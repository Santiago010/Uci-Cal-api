/** @file BaseEOB_RecordType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/BaseEOB_RecordType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/EOB_CodesType.h"
#include "extjson_uci/type/EOB_FixedPositionType.h"
#include "extjson_uci/type/EOB_RecordID_Type.h"
#include "extjson_uci/type/IdentityType.h"
#include "extjson_uci/type/MobilityEnum.h"
#include "extjson_uci/type/OB_OperationalStatusEnum.h"
#include "extjson_uci/type/OrderOfBattleTimestampsType.h"
#include "extjson_uci/type/SecurityInformationType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/DerivedTypesSerializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/BaseEOB_RecordType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace BaseEOB_RecordType_Names {

constexpr const char* Extern_Type_Name{"BaseEOB_RecordType"};
constexpr const char* SecurityInformation_Name{"SecurityInformation"};
constexpr const char* EOB_RecordID_Name{"EOB_RecordID"};
constexpr const char* Timestamps_Name{"Timestamps"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* Position_Name{"Position"};
constexpr const char* Mobility_Name{"Mobility"};
constexpr const char* EOB_Codes_Name{"EOB_Codes"};
constexpr const char* SiteOperationalStatus_Name{"SiteOperationalStatus"};
constexpr const char* RecordOwner_Name{"RecordOwner"};
constexpr const char* RemarksText_Name{"RemarksText"};

} // namespace BaseEOB_RecordType_Names

bool BaseEOB_RecordType::deserialize(const boost::property_tree::ptree& propTree, uci::type::BaseEOB_RecordType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = BaseEOB_RecordType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::SecurityInformation_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.getSecurityInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::EOB_RecordID_Name) {
      EOB_RecordID_Type::deserialize(valueType.second, accessor.getEOB_RecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::Timestamps_Name) {
      OrderOfBattleTimestampsType::deserialize(valueType.second, accessor.getTimestamps(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::Identity_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableIdentity(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::Position_Name) {
      EOB_FixedPositionType::deserialize(valueType.second, accessor.getPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::Mobility_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMobility().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::EOB_Codes_Name) {
      EOB_CodesType::deserialize(valueType.second, accessor.enableEOB_Codes(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::SiteOperationalStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSiteOperationalStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::RecordOwner_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRecordOwner(*value);
      }
    } else if (valueType.first == nsPrefix + BaseEOB_RecordType_Names::RemarksText_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRemarksText(*value);
      }
    }
  }
  return true;
}

std::string BaseEOB_RecordType::serialize(const uci::type::BaseEOB_RecordType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? BaseEOB_RecordType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::baseEOB_RecordType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extjson_uci::util::SerializationHelpers::addTypeAttribute(node, BaseEOB_RecordType_Names::Extern_Type_Name);
    }
    SecurityInformationType::serialize(accessor.getSecurityInformation(), node, BaseEOB_RecordType_Names::SecurityInformation_Name);
    EOB_RecordID_Type::serialize(accessor.getEOB_RecordID(), node, BaseEOB_RecordType_Names::EOB_RecordID_Name);
    OrderOfBattleTimestampsType::serialize(accessor.getTimestamps(), node, BaseEOB_RecordType_Names::Timestamps_Name);
    IdentityType::serialize(accessor.getIdentity(), node, BaseEOB_RecordType_Names::Identity_Name);
    EOB_FixedPositionType::serialize(accessor.getPosition(), node, BaseEOB_RecordType_Names::Position_Name);
    if (accessor.hasMobility()) {
      MobilityEnum::serialize(accessor.getMobility(), node, BaseEOB_RecordType_Names::Mobility_Name, false);
    }
    if (accessor.hasEOB_Codes()) {
      EOB_CodesType::serialize(accessor.getEOB_Codes(), node, BaseEOB_RecordType_Names::EOB_Codes_Name);
    }
    if (accessor.hasSiteOperationalStatus()) {
      OB_OperationalStatusEnum::serialize(accessor.getSiteOperationalStatus(), node, BaseEOB_RecordType_Names::SiteOperationalStatus_Name, false);
    }
    if (accessor.hasRecordOwner()) {
      extjson_uci::util::SerializationHelpers::serializeString(accessor.getRecordOwner(), node, BaseEOB_RecordType_Names::RecordOwner_Name);
    }
    if (accessor.hasRemarksText()) {
      extjson_uci::util::SerializationHelpers::serializeString(accessor.getRemarksText(), node, BaseEOB_RecordType_Names::RemarksText_Name);
    }
    if (createNode) {
      propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
    }
  } else {
    extjson_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

