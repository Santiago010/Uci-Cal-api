/** @file PlanReferenceID_ChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/PlanReferenceID_ChoiceType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ActionPlanID_Type.h"
#include "extjson_uci/type/ActivityPlanID_Type.h"
#include "extjson_uci/type/CommScheduleAllocationID_Type.h"
#include "extjson_uci/type/EffectPlanID_Type.h"
#include "extjson_uci/type/MissionPlanID_Type.h"
#include "extjson_uci/type/OrbitActivityPlanID_Type.h"
#include "extjson_uci/type/OrbitPlanID_Type.h"
#include "extjson_uci/type/ResponsePlanID_Type.h"
#include "extjson_uci/type/RouteActivityPlanID_Type.h"
#include "extjson_uci/type/RoutePlanID_Type.h"
#include "extjson_uci/type/TaskPlanID_Type.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/PlanReferenceID_ChoiceType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PlanReferenceID_ChoiceType_Names {

constexpr const char* Extern_Type_Name{"PlanReferenceID_ChoiceType"};
constexpr const char* MissionPlanID_Name{"MissionPlanID"};
constexpr const char* TaskPlanID_Name{"TaskPlanID"};
constexpr const char* OrbitPlanID_Name{"OrbitPlanID"};
constexpr const char* OrbitActivityPlanID_Name{"OrbitActivityPlanID"};
constexpr const char* RoutePlanID_Name{"RoutePlanID"};
constexpr const char* RouteActivityPlanID_Name{"RouteActivityPlanID"};
constexpr const char* CommScheduleAllocationID_Name{"CommScheduleAllocationID"};
constexpr const char* ActivityPlanID_Name{"ActivityPlanID"};
constexpr const char* EffectPlanID_Name{"EffectPlanID"};
constexpr const char* ActionPlanID_Name{"ActionPlanID"};
constexpr const char* ResponsePlanID_Name{"ResponsePlanID"};

} // namespace PlanReferenceID_ChoiceType_Names

bool PlanReferenceID_ChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanReferenceID_ChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanReferenceID_ChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::MissionPlanID_Name) {
      MissionPlanID_Type::deserialize(valueType.second, accessor.chooseMissionPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::TaskPlanID_Name) {
      TaskPlanID_Type::deserialize(valueType.second, accessor.chooseTaskPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::OrbitPlanID_Name) {
      OrbitPlanID_Type::deserialize(valueType.second, accessor.chooseOrbitPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::OrbitActivityPlanID_Name) {
      OrbitActivityPlanID_Type::deserialize(valueType.second, accessor.chooseOrbitActivityPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::RoutePlanID_Name) {
      RoutePlanID_Type::deserialize(valueType.second, accessor.chooseRoutePlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::RouteActivityPlanID_Name) {
      RouteActivityPlanID_Type::deserialize(valueType.second, accessor.chooseRouteActivityPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::CommScheduleAllocationID_Name) {
      CommScheduleAllocationID_Type::deserialize(valueType.second, accessor.chooseCommScheduleAllocationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::ActivityPlanID_Name) {
      ActivityPlanID_Type::deserialize(valueType.second, accessor.chooseActivityPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::EffectPlanID_Name) {
      EffectPlanID_Type::deserialize(valueType.second, accessor.chooseEffectPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::ActionPlanID_Name) {
      ActionPlanID_Type::deserialize(valueType.second, accessor.chooseActionPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlanReferenceID_ChoiceType_Names::ResponsePlanID_Name) {
      ResponsePlanID_Type::deserialize(valueType.second, accessor.chooseResponsePlanID(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string PlanReferenceID_ChoiceType::serialize(const uci::type::PlanReferenceID_ChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PlanReferenceID_ChoiceType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, PlanReferenceID_ChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isMissionPlanID()) {
    MissionPlanID_Type::serialize(accessor.getMissionPlanID(), node, PlanReferenceID_ChoiceType_Names::MissionPlanID_Name);
  } else if (accessor.isTaskPlanID()) {
    TaskPlanID_Type::serialize(accessor.getTaskPlanID(), node, PlanReferenceID_ChoiceType_Names::TaskPlanID_Name);
  } else if (accessor.isOrbitPlanID()) {
    OrbitPlanID_Type::serialize(accessor.getOrbitPlanID(), node, PlanReferenceID_ChoiceType_Names::OrbitPlanID_Name);
  } else if (accessor.isOrbitActivityPlanID()) {
    OrbitActivityPlanID_Type::serialize(accessor.getOrbitActivityPlanID(), node, PlanReferenceID_ChoiceType_Names::OrbitActivityPlanID_Name);
  } else if (accessor.isRoutePlanID()) {
    RoutePlanID_Type::serialize(accessor.getRoutePlanID(), node, PlanReferenceID_ChoiceType_Names::RoutePlanID_Name);
  } else if (accessor.isRouteActivityPlanID()) {
    RouteActivityPlanID_Type::serialize(accessor.getRouteActivityPlanID(), node, PlanReferenceID_ChoiceType_Names::RouteActivityPlanID_Name);
  } else if (accessor.isCommScheduleAllocationID()) {
    CommScheduleAllocationID_Type::serialize(accessor.getCommScheduleAllocationID(), node, PlanReferenceID_ChoiceType_Names::CommScheduleAllocationID_Name);
  } else if (accessor.isActivityPlanID()) {
    ActivityPlanID_Type::serialize(accessor.getActivityPlanID(), node, PlanReferenceID_ChoiceType_Names::ActivityPlanID_Name);
  } else if (accessor.isEffectPlanID()) {
    EffectPlanID_Type::serialize(accessor.getEffectPlanID(), node, PlanReferenceID_ChoiceType_Names::EffectPlanID_Name);
  } else if (accessor.isActionPlanID()) {
    ActionPlanID_Type::serialize(accessor.getActionPlanID(), node, PlanReferenceID_ChoiceType_Names::ActionPlanID_Name);
  } else if (accessor.isResponsePlanID()) {
    ResponsePlanID_Type::serialize(accessor.getResponsePlanID(), node, PlanReferenceID_ChoiceType_Names::ResponsePlanID_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

