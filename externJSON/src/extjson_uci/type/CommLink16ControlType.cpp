/** @file CommLink16ControlType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/CommLink16ControlType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/CommLink16AdvancedSlotNotificationType.h"
#include "extjson_uci/type/CommLink16DelayReductionType.h"
#include "extjson_uci/type/CommLink16EnhancedThroughputCodeRateEnum.h"
#include "extjson_uci/type/CommLink16InitialEntryGroupEnum.h"
#include "extjson_uci/type/CommLink16InitialEntryMessageType.h"
#include "extjson_uci/type/CommLink16InterferenceProtModeEnum.h"
#include "extjson_uci/type/CommLink16MissionInfoWordsType.h"
#include "extjson_uci/type/CommLink16NetSelectionType.h"
#include "extjson_uci/type/CommLink16RangeModeEnum.h"
#include "extjson_uci/type/CommLink16ReceiptComplianceWordsType.h"
#include "extjson_uci/type/CommLink16TransmitAntennaEnum.h"
#include "extjson_uci/type/CommLink16TransmitModeEnum.h"
#include "extjson_uci/type/CommLink16TxPG_Type.h"
#include "extjson_uci/type/CommLink16TxPowerSelectionEnum.h"
#include "extjson_uci/type/CommLink16_PPLI_PoolEnum.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/CommLink16ControlType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace CommLink16ControlType_Names {

constexpr const char* Extern_Type_Name{"CommLink16ControlType"};
constexpr const char* AdvancedSlotNotificationMode_Name{"AdvancedSlotNotificationMode"};
constexpr const char* DataReductionPG_Index_Name{"DataReductionPG_Index"};
constexpr const char* DelayReduction_Name{"DelayReduction"};
constexpr const char* EnhancedThroughputCodeRate_Name{"EnhancedThroughputCodeRate"};
constexpr const char* InitialEntryGroup_Name{"InitialEntryGroup"};
constexpr const char* InitialEntryMessageAssignment_Name{"InitialEntryMessageAssignment"};
constexpr const char* InitialEntryWords_Name{"InitialEntryWords"};
constexpr const char* InitializationActivityIndicator_Name{"InitializationActivityIndicator"};
constexpr const char* InitializationIndexNumber_Name{"InitializationIndexNumber"};
constexpr const char* InterferenceProtectionMode_Name{"InterferenceProtectionMode"};
constexpr const char* MissionInformationWords_Name{"MissionInformationWords"};
constexpr const char* NetSelectionStatus_Name{"NetSelectionStatus"};
constexpr const char* NetEntryTxEnable_Name{"NetEntryTxEnable"};
constexpr const char* PlatformStrength_Name{"PlatformStrength"};
constexpr const char* PPLI_Pool_Name{"PPLI_Pool"};
constexpr const char* RangeMode_Name{"RangeMode"};
constexpr const char* RouteEstPG_Index_Name{"RouteEstPG_Index"};
constexpr const char* SecondarySourceTrackNumber_Name{"SecondarySourceTrackNumber"};
constexpr const char* TransmitPG_Slots_Name{"TransmitPG_Slots"};
constexpr const char* TransmitAntenna_Name{"TransmitAntenna"};
constexpr const char* ReceiptComplianceProcessingWords_Name{"ReceiptComplianceProcessingWords"};
constexpr const char* ReceiveAntenna_Name{"ReceiveAntenna"};
constexpr const char* TransmitPowerSelection_Name{"TransmitPowerSelection"};
constexpr const char* TransmitMode_Name{"TransmitMode"};
constexpr const char* VoiceGroupRate_Name{"VoiceGroupRate"};
constexpr const char* VoiceGroupCoding_Name{"VoiceGroupCoding"};
constexpr const char* ForceTellIndicator_Name{"ForceTellIndicator"};
constexpr const char* ResetNavKalmanFilter_Name{"ResetNavKalmanFilter"};
constexpr const char* IPF_Reset_Name{"IPF_Reset"};
constexpr const char* VoiceCallSign_Name{"VoiceCallSign"};

} // namespace CommLink16ControlType_Names

bool CommLink16ControlType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommLink16ControlType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommLink16ControlType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + CommLink16ControlType_Names::AdvancedSlotNotificationMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommLink16ControlType::AdvancedSlotNotificationMode& boundedList = accessor.getAdvancedSlotNotificationMode();
        const uci::type::CommLink16ControlType::AdvancedSlotNotificationMode::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CommLink16AdvancedSlotNotificationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::DataReductionPG_Index_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDataReductionPG_Index(extjson_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::DelayReduction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommLink16ControlType::DelayReduction& boundedList = accessor.getDelayReduction();
        const uci::type::CommLink16ControlType::DelayReduction::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CommLink16DelayReductionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::EnhancedThroughputCodeRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEnhancedThroughputCodeRate().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::InitialEntryGroup_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableInitialEntryGroup().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::InitialEntryMessageAssignment_Name) {
      CommLink16InitialEntryMessageType::deserialize(valueType.second, accessor.enableInitialEntryMessageAssignment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::InitialEntryWords_Name) {
      extjson_uci::util::SerializationHelpers::deserializeIntList(valueType.second, accessor.getInitialEntryWords());
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::InitializationActivityIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInitializationActivityIndicator(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::InitializationIndexNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInitializationIndexNumber(extjson_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::InterferenceProtectionMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableInterferenceProtectionMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::MissionInformationWords_Name) {
      CommLink16MissionInfoWordsType::deserialize(valueType.second, accessor.enableMissionInformationWords(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::NetSelectionStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommLink16ControlType::NetSelectionStatus& boundedList = accessor.getNetSelectionStatus();
        const uci::type::CommLink16ControlType::NetSelectionStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CommLink16NetSelectionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::NetEntryTxEnable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNetEntryTxEnable(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::PlatformStrength_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPlatformStrength(extjson_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::PPLI_Pool_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePPLI_Pool().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::RangeMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRangeMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::RouteEstPG_Index_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRouteEstPG_Index(extjson_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::SecondarySourceTrackNumber_Name) {
      extjson_uci::util::SerializationHelpers::deserializeUnsignedShortList(valueType.second, accessor.getSecondarySourceTrackNumber());
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::TransmitPG_Slots_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommLink16ControlType::TransmitPG_Slots& boundedList = accessor.getTransmitPG_Slots();
        const uci::type::CommLink16ControlType::TransmitPG_Slots::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CommLink16TxPG_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::TransmitAntenna_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTransmitAntenna().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::ReceiptComplianceProcessingWords_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords& boundedList = accessor.getReceiptComplianceProcessingWords();
        const uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CommLink16ReceiptComplianceWordsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::ReceiveAntenna_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableReceiveAntenna().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::TransmitPowerSelection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTransmitPowerSelection().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::TransmitMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTransmitMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::VoiceGroupRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVoiceGroupRate(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::VoiceGroupCoding_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVoiceGroupCoding(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::ForceTellIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setForceTellIndicator(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::ResetNavKalmanFilter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResetNavKalmanFilter(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::IPF_Reset_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIPF_Reset(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommLink16ControlType_Names::VoiceCallSign_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVoiceCallSign(*value);
      }
    }
  }
  return true;
}

std::string CommLink16ControlType::serialize(const uci::type::CommLink16ControlType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? CommLink16ControlType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, CommLink16ControlType_Names::Extern_Type_Name);
  }
  {
    const uci::type::CommLink16ControlType::AdvancedSlotNotificationMode& boundedList = accessor.getAdvancedSlotNotificationMode();
    for (uci::type::CommLink16ControlType::AdvancedSlotNotificationMode::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CommLink16AdvancedSlotNotificationType::serialize(boundedList.at(i), node, CommLink16ControlType_Names::AdvancedSlotNotificationMode_Name);
    }
  }
  if (accessor.hasDataReductionPG_Index()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getDataReductionPG_Index(), node, CommLink16ControlType_Names::DataReductionPG_Index_Name);
  }
  {
    const uci::type::CommLink16ControlType::DelayReduction& boundedList = accessor.getDelayReduction();
    for (uci::type::CommLink16ControlType::DelayReduction::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CommLink16DelayReductionType::serialize(boundedList.at(i), node, CommLink16ControlType_Names::DelayReduction_Name);
    }
  }
  if (accessor.hasEnhancedThroughputCodeRate()) {
    CommLink16EnhancedThroughputCodeRateEnum::serialize(accessor.getEnhancedThroughputCodeRate(), node, CommLink16ControlType_Names::EnhancedThroughputCodeRate_Name, false);
  }
  if (accessor.hasInitialEntryGroup()) {
    CommLink16InitialEntryGroupEnum::serialize(accessor.getInitialEntryGroup(), node, CommLink16ControlType_Names::InitialEntryGroup_Name, false);
  }
  if (accessor.hasInitialEntryMessageAssignment()) {
    CommLink16InitialEntryMessageType::serialize(accessor.getInitialEntryMessageAssignment(), node, CommLink16ControlType_Names::InitialEntryMessageAssignment_Name);
  }
  {
    extjson_uci::util::SerializationHelpers::serializeIntList(accessor.getInitialEntryWords(), node, CommLink16ControlType_Names::InitialEntryWords_Name);
  }
  if (accessor.hasInitializationActivityIndicator()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getInitializationActivityIndicator(), node, CommLink16ControlType_Names::InitializationActivityIndicator_Name);
  }
  if (accessor.hasInitializationIndexNumber()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getInitializationIndexNumber(), node, CommLink16ControlType_Names::InitializationIndexNumber_Name);
  }
  if (accessor.hasInterferenceProtectionMode()) {
    CommLink16InterferenceProtModeEnum::serialize(accessor.getInterferenceProtectionMode(), node, CommLink16ControlType_Names::InterferenceProtectionMode_Name, false);
  }
  if (accessor.hasMissionInformationWords()) {
    CommLink16MissionInfoWordsType::serialize(accessor.getMissionInformationWords(), node, CommLink16ControlType_Names::MissionInformationWords_Name);
  }
  {
    const uci::type::CommLink16ControlType::NetSelectionStatus& boundedList = accessor.getNetSelectionStatus();
    for (uci::type::CommLink16ControlType::NetSelectionStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CommLink16NetSelectionType::serialize(boundedList.at(i), node, CommLink16ControlType_Names::NetSelectionStatus_Name);
    }
  }
  if (accessor.hasNetEntryTxEnable()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getNetEntryTxEnable(), node, CommLink16ControlType_Names::NetEntryTxEnable_Name);
  }
  if (accessor.hasPlatformStrength()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getPlatformStrength(), node, CommLink16ControlType_Names::PlatformStrength_Name);
  }
  if (accessor.hasPPLI_Pool()) {
    CommLink16_PPLI_PoolEnum::serialize(accessor.getPPLI_Pool(), node, CommLink16ControlType_Names::PPLI_Pool_Name, false);
  }
  if (accessor.hasRangeMode()) {
    CommLink16RangeModeEnum::serialize(accessor.getRangeMode(), node, CommLink16ControlType_Names::RangeMode_Name, false);
  }
  if (accessor.hasRouteEstPG_Index()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getRouteEstPG_Index(), node, CommLink16ControlType_Names::RouteEstPG_Index_Name);
  }
  {
    extjson_uci::util::SerializationHelpers::serializeUnsignedShortList(accessor.getSecondarySourceTrackNumber(), node, CommLink16ControlType_Names::SecondarySourceTrackNumber_Name);
  }
  {
    const uci::type::CommLink16ControlType::TransmitPG_Slots& boundedList = accessor.getTransmitPG_Slots();
    for (uci::type::CommLink16ControlType::TransmitPG_Slots::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CommLink16TxPG_Type::serialize(boundedList.at(i), node, CommLink16ControlType_Names::TransmitPG_Slots_Name);
    }
  }
  if (accessor.hasTransmitAntenna()) {
    CommLink16TransmitAntennaEnum::serialize(accessor.getTransmitAntenna(), node, CommLink16ControlType_Names::TransmitAntenna_Name, false);
  }
  {
    const uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords& boundedList = accessor.getReceiptComplianceProcessingWords();
    for (uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CommLink16ReceiptComplianceWordsType::serialize(boundedList.at(i), node, CommLink16ControlType_Names::ReceiptComplianceProcessingWords_Name);
    }
  }
  if (accessor.hasReceiveAntenna()) {
    CommLink16TransmitAntennaEnum::serialize(accessor.getReceiveAntenna(), node, CommLink16ControlType_Names::ReceiveAntenna_Name, false);
  }
  if (accessor.hasTransmitPowerSelection()) {
    CommLink16TxPowerSelectionEnum::serialize(accessor.getTransmitPowerSelection(), node, CommLink16ControlType_Names::TransmitPowerSelection_Name, false);
  }
  if (accessor.hasTransmitMode()) {
    CommLink16TransmitModeEnum::serialize(accessor.getTransmitMode(), node, CommLink16ControlType_Names::TransmitMode_Name, false);
  }
  if (accessor.hasVoiceGroupRate()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getVoiceGroupRate(), node, CommLink16ControlType_Names::VoiceGroupRate_Name);
  }
  if (accessor.hasVoiceGroupCoding()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getVoiceGroupCoding(), node, CommLink16ControlType_Names::VoiceGroupCoding_Name);
  }
  if (accessor.hasForceTellIndicator()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getForceTellIndicator(), node, CommLink16ControlType_Names::ForceTellIndicator_Name);
  }
  if (accessor.hasResetNavKalmanFilter()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getResetNavKalmanFilter(), node, CommLink16ControlType_Names::ResetNavKalmanFilter_Name);
  }
  if (accessor.hasIPF_Reset()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getIPF_Reset(), node, CommLink16ControlType_Names::IPF_Reset_Name);
  }
  if (accessor.hasVoiceCallSign()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getVoiceCallSign(), node, CommLink16ControlType_Names::VoiceCallSign_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

