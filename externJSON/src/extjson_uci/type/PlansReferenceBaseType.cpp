/** @file PlansReferenceBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/PlansReferenceBaseType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ActionPlanID_Type.h"
#include "extjson_uci/type/ActivityPlanID_Type.h"
#include "extjson_uci/type/EffectPlanID_Type.h"
#include "extjson_uci/type/OrbitActivityPlanID_Type.h"
#include "extjson_uci/type/OrbitPlanID_Type.h"
#include "extjson_uci/type/ResponsePlanID_Type.h"
#include "extjson_uci/type/RouteActivityPlanID_Type.h"
#include "extjson_uci/type/RoutePlanID_Type.h"
#include "extjson_uci/type/TaskPlanID_Type.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/DerivedTypesSerializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/PlansReferenceBaseType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PlansReferenceBaseType_Names {

constexpr const char* Extern_Type_Name{"PlansReferenceBaseType"};
constexpr const char* TaskPlanID_Name{"TaskPlanID"};
constexpr const char* OrbitPlanID_Name{"OrbitPlanID"};
constexpr const char* OrbitActivityPlanID_Name{"OrbitActivityPlanID"};
constexpr const char* RoutePlanID_Name{"RoutePlanID"};
constexpr const char* RouteActivityPlanID_Name{"RouteActivityPlanID"};
constexpr const char* ActivityPlanID_Name{"ActivityPlanID"};
constexpr const char* EffectPlanID_Name{"EffectPlanID"};
constexpr const char* ActionPlanID_Name{"ActionPlanID"};
constexpr const char* ResponsePlanID_Name{"ResponsePlanID"};

} // namespace PlansReferenceBaseType_Names

bool PlansReferenceBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlansReferenceBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlansReferenceBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::TaskPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::TaskPlanID& boundedList = accessor.getTaskPlanID();
        const uci::type::PlansReferenceBaseType::TaskPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        TaskPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::OrbitPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::OrbitPlanID& boundedList = accessor.getOrbitPlanID();
        const uci::type::PlansReferenceBaseType::OrbitPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        OrbitPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::OrbitActivityPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::OrbitActivityPlanID& boundedList = accessor.getOrbitActivityPlanID();
        const uci::type::PlansReferenceBaseType::OrbitActivityPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        OrbitActivityPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::RoutePlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::RoutePlanID& boundedList = accessor.getRoutePlanID();
        const uci::type::PlansReferenceBaseType::RoutePlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        RoutePlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::RouteActivityPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::RouteActivityPlanID& boundedList = accessor.getRouteActivityPlanID();
        const uci::type::PlansReferenceBaseType::RouteActivityPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        RouteActivityPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::ActivityPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::ActivityPlanID& boundedList = accessor.getActivityPlanID();
        const uci::type::PlansReferenceBaseType::ActivityPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ActivityPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::EffectPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::EffectPlanID& boundedList = accessor.getEffectPlanID();
        const uci::type::PlansReferenceBaseType::EffectPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        EffectPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::ActionPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::ActionPlanID& boundedList = accessor.getActionPlanID();
        const uci::type::PlansReferenceBaseType::ActionPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ActionPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlansReferenceBaseType_Names::ResponsePlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlansReferenceBaseType::ResponsePlanID& boundedList = accessor.getResponsePlanID();
        const uci::type::PlansReferenceBaseType::ResponsePlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ResponsePlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string PlansReferenceBaseType::serialize(const uci::type::PlansReferenceBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PlansReferenceBaseType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::plansReferenceBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extjson_uci::util::SerializationHelpers::addTypeAttribute(node, PlansReferenceBaseType_Names::Extern_Type_Name);
    }
    {
      const uci::type::PlansReferenceBaseType::TaskPlanID& boundedList = accessor.getTaskPlanID();
      for (uci::type::PlansReferenceBaseType::TaskPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        TaskPlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::TaskPlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::OrbitPlanID& boundedList = accessor.getOrbitPlanID();
      for (uci::type::PlansReferenceBaseType::OrbitPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        OrbitPlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::OrbitPlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::OrbitActivityPlanID& boundedList = accessor.getOrbitActivityPlanID();
      for (uci::type::PlansReferenceBaseType::OrbitActivityPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        OrbitActivityPlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::OrbitActivityPlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::RoutePlanID& boundedList = accessor.getRoutePlanID();
      for (uci::type::PlansReferenceBaseType::RoutePlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        RoutePlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::RoutePlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::RouteActivityPlanID& boundedList = accessor.getRouteActivityPlanID();
      for (uci::type::PlansReferenceBaseType::RouteActivityPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        RouteActivityPlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::RouteActivityPlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::ActivityPlanID& boundedList = accessor.getActivityPlanID();
      for (uci::type::PlansReferenceBaseType::ActivityPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        ActivityPlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::ActivityPlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::EffectPlanID& boundedList = accessor.getEffectPlanID();
      for (uci::type::PlansReferenceBaseType::EffectPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        EffectPlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::EffectPlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::ActionPlanID& boundedList = accessor.getActionPlanID();
      for (uci::type::PlansReferenceBaseType::ActionPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        ActionPlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::ActionPlanID_Name);
      }
    }
    {
      const uci::type::PlansReferenceBaseType::ResponsePlanID& boundedList = accessor.getResponsePlanID();
      for (uci::type::PlansReferenceBaseType::ResponsePlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        ResponsePlanID_Type::serialize(boundedList.at(i), node, PlansReferenceBaseType_Names::ResponsePlanID_Name);
      }
    }
    if (createNode) {
      propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
    }
  } else {
    extjson_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

