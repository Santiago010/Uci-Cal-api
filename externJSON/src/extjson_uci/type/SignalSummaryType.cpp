/** @file SignalSummaryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/SignalSummaryType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/CoverageEffortEnum.h"
#include "extjson_uci/type/EmitterUrgencyEnum.h"
#include "extjson_uci/type/FrequencyControlType.h"
#include "extjson_uci/type/FrequencyModulationVariationEnum.h"
#include "extjson_uci/type/FrequencyRangeType.h"
#include "extjson_uci/type/ModulationEnum.h"
#include "extjson_uci/type/PRI_TypeEnum.h"
#include "extjson_uci/type/RadarBeamPersistenceEnum.h"
#include "extjson_uci/type/RadarBeamTypeEnum.h"
#include "extjson_uci/type/SignalLocationEnum.h"
#include "extjson_uci/type/TrackModeEnum.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/SignalSummaryType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SignalSummaryType_Names {

constexpr const char* Extern_Type_Name{"SignalSummaryType"};
constexpr const char* Modulation_Name{"Modulation"};
constexpr const char* VendorSpecificModulation_Name{"VendorSpecificModulation"};
constexpr const char* FrequencyModulationVariation_Name{"FrequencyModulationVariation"};
constexpr const char* FrequencyAverage_Name{"FrequencyAverage"};
constexpr const char* FrequencyMin_Name{"FrequencyMin"};
constexpr const char* FrequencyMax_Name{"FrequencyMax"};
constexpr const char* FrequencyRangeControlOptions_Name{"FrequencyRangeControlOptions"};
constexpr const char* PRI_Type_Name{"PRI_Type"};
constexpr const char* PRI_Average_Name{"PRI_Average"};
constexpr const char* PRI_Min_Name{"PRI_Min"};
constexpr const char* PRI_Max_Name{"PRI_Max"};
constexpr const char* PulseWidthAverage_Name{"PulseWidthAverage"};
constexpr const char* PulseWidthMin_Name{"PulseWidthMin"};
constexpr const char* PulseWidthMax_Name{"PulseWidthMax"};
constexpr const char* SignalBandwidth_Name{"SignalBandwidth"};
constexpr const char* AmplitudeAverage_Name{"AmplitudeAverage"};
constexpr const char* TrackMode_Name{"TrackMode"};
constexpr const char* Urgency_Name{"Urgency"};
constexpr const char* WartimeReserve_Name{"WartimeReserve"};
constexpr const char* LocationCategory_Name{"LocationCategory"};
constexpr const char* TypeOfBeam_Name{"TypeOfBeam"};
constexpr const char* BeamPersistence_Name{"BeamPersistence"};
constexpr const char* FrequencyCoverage_Name{"FrequencyCoverage"};

} // namespace SignalSummaryType_Names

bool SignalSummaryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SignalSummaryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SignalSummaryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + SignalSummaryType_Names::Modulation_Name) {
      ModulationEnum::deserializeList(valueType.second, accessor.getModulation());
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::VendorSpecificModulation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVendorSpecificModulation(*value);
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::FrequencyModulationVariation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFrequencyModulationVariation().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::FrequencyAverage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyAverage(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::FrequencyMin_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyMin(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::FrequencyMax_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyMax(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::FrequencyRangeControlOptions_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFrequencyRangeControlOptions().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::PRI_Type_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePRI_Type().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::PRI_Average_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_Average(extjson_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::PRI_Min_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_Min(extjson_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::PRI_Max_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_Max(extjson_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::PulseWidthAverage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthAverage(extjson_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::PulseWidthMin_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthMin(extjson_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::PulseWidthMax_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthMax(extjson_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::SignalBandwidth_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.enableSignalBandwidth(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::AmplitudeAverage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAmplitudeAverage(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::TrackMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTrackMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::Urgency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableUrgency().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::WartimeReserve_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWartimeReserve(*value);
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::LocationCategory_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableLocationCategory().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::TypeOfBeam_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTypeOfBeam().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::BeamPersistence_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableBeamPersistence().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalSummaryType_Names::FrequencyCoverage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SignalSummaryType::FrequencyCoverage& boundedList = accessor.getFrequencyCoverage();
        const uci::type::SignalSummaryType::FrequencyCoverage::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FrequencyControlType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string SignalSummaryType::serialize(const uci::type::SignalSummaryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SignalSummaryType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, SignalSummaryType_Names::Extern_Type_Name);
  }
  {
    ModulationEnum::serializeList(accessor.getModulation(), node, SignalSummaryType_Names::Modulation_Name);
  }
  if (accessor.hasVendorSpecificModulation()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getVendorSpecificModulation(), node, SignalSummaryType_Names::VendorSpecificModulation_Name);
  }
  if (accessor.hasFrequencyModulationVariation()) {
    FrequencyModulationVariationEnum::serialize(accessor.getFrequencyModulationVariation(), node, SignalSummaryType_Names::FrequencyModulationVariation_Name, false);
  }
  if (accessor.hasFrequencyAverage()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequencyAverage(), node, SignalSummaryType_Names::FrequencyAverage_Name);
  }
  if (accessor.hasFrequencyMin()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequencyMin(), node, SignalSummaryType_Names::FrequencyMin_Name);
  }
  if (accessor.hasFrequencyMax()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequencyMax(), node, SignalSummaryType_Names::FrequencyMax_Name);
  }
  if (accessor.hasFrequencyRangeControlOptions()) {
    CoverageEffortEnum::serialize(accessor.getFrequencyRangeControlOptions(), node, SignalSummaryType_Names::FrequencyRangeControlOptions_Name, false);
  }
  if (accessor.hasPRI_Type()) {
    PRI_TypeEnum::serialize(accessor.getPRI_Type(), node, SignalSummaryType_Names::PRI_Type_Name, false);
  }
  if (accessor.hasPRI_Average()) {
    extjson_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_Average(), node, SignalSummaryType_Names::PRI_Average_Name);
  }
  if (accessor.hasPRI_Min()) {
    extjson_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_Min(), node, SignalSummaryType_Names::PRI_Min_Name);
  }
  if (accessor.hasPRI_Max()) {
    extjson_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_Max(), node, SignalSummaryType_Names::PRI_Max_Name);
  }
  if (accessor.hasPulseWidthAverage()) {
    extjson_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthAverage(), node, SignalSummaryType_Names::PulseWidthAverage_Name);
  }
  if (accessor.hasPulseWidthMin()) {
    extjson_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthMin(), node, SignalSummaryType_Names::PulseWidthMin_Name);
  }
  if (accessor.hasPulseWidthMax()) {
    extjson_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthMax(), node, SignalSummaryType_Names::PulseWidthMax_Name);
  }
  if (accessor.hasSignalBandwidth()) {
    FrequencyRangeType::serialize(accessor.getSignalBandwidth(), node, SignalSummaryType_Names::SignalBandwidth_Name);
  }
  if (accessor.hasAmplitudeAverage()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getAmplitudeAverage(), node, SignalSummaryType_Names::AmplitudeAverage_Name);
  }
  if (accessor.hasTrackMode()) {
    TrackModeEnum::serialize(accessor.getTrackMode(), node, SignalSummaryType_Names::TrackMode_Name, false);
  }
  if (accessor.hasUrgency()) {
    EmitterUrgencyEnum::serialize(accessor.getUrgency(), node, SignalSummaryType_Names::Urgency_Name, false);
  }
  if (accessor.hasWartimeReserve()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getWartimeReserve(), node, SignalSummaryType_Names::WartimeReserve_Name);
  }
  if (accessor.hasLocationCategory()) {
    SignalLocationEnum::serialize(accessor.getLocationCategory(), node, SignalSummaryType_Names::LocationCategory_Name, false);
  }
  if (accessor.hasTypeOfBeam()) {
    RadarBeamTypeEnum::serialize(accessor.getTypeOfBeam(), node, SignalSummaryType_Names::TypeOfBeam_Name, false);
  }
  if (accessor.hasBeamPersistence()) {
    RadarBeamPersistenceEnum::serialize(accessor.getBeamPersistence(), node, SignalSummaryType_Names::BeamPersistence_Name, false);
  }
  {
    const uci::type::SignalSummaryType::FrequencyCoverage& boundedList = accessor.getFrequencyCoverage();
    for (uci::type::SignalSummaryType::FrequencyCoverage::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FrequencyControlType::serialize(boundedList.at(i), node, SignalSummaryType_Names::FrequencyCoverage_Name);
    }
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

