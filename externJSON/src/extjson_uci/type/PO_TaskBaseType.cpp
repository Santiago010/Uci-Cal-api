/** @file PO_TaskBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/PO_TaskBaseType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/LocatedEllipseType.h"
#include "extjson_uci/type/OpticalCollectionConstraintsType.h"
#include "extjson_uci/type/PO_CapabilityEnum.h"
#include "extjson_uci/type/PO_ProductOutputCommandImageryType.h"
#include "extjson_uci/type/PairIdentifierEnum.h"
#include "extjson_uci/type/SensorSpectrumEnum.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/DerivedTypesSerializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/PO_TaskBaseType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PO_TaskBaseType_Names {

constexpr const char* Extern_Type_Name{"PO_TaskBaseType"};
constexpr const char* Capability_Name{"Capability"};
constexpr const char* SensorSpectrum_Name{"SensorSpectrum"};
constexpr const char* LookAtCoords_Name{"LookAtCoords"};
constexpr const char* MinimumNIIRS_Name{"MinimumNIIRS"};
constexpr const char* DesiredNIIRS_Name{"DesiredNIIRS"};
constexpr const char* CollectionConstraints_Name{"CollectionConstraints"};
constexpr const char* PairIdentifier_Name{"PairIdentifier"};
constexpr const char* Output_Name{"Output"};

} // namespace PO_TaskBaseType_Names

bool PO_TaskBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_TaskBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_TaskBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + PO_TaskBaseType_Names::Capability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCapability().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TaskBaseType_Names::SensorSpectrum_Name) {
      SensorSpectrumEnum::deserializeList(valueType.second, accessor.getSensorSpectrum());
    } else if (valueType.first == nsPrefix + PO_TaskBaseType_Names::LookAtCoords_Name) {
      LocatedEllipseType::deserialize(valueType.second, accessor.enableLookAtCoords(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TaskBaseType_Names::MinimumNIIRS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumNIIRS(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TaskBaseType_Names::DesiredNIIRS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDesiredNIIRS(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TaskBaseType_Names::CollectionConstraints_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableCollectionConstraints(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TaskBaseType_Names::PairIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePairIdentifier().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TaskBaseType_Names::Output_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_TaskBaseType::Output& boundedList = accessor.getOutput();
        const uci::type::PO_TaskBaseType::Output::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PO_ProductOutputCommandImageryType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string PO_TaskBaseType::serialize(const uci::type::PO_TaskBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PO_TaskBaseType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::pO_TaskBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extjson_uci::util::SerializationHelpers::addTypeAttribute(node, PO_TaskBaseType_Names::Extern_Type_Name);
    }
    PO_CapabilityEnum::serialize(accessor.getCapability(), node, PO_TaskBaseType_Names::Capability_Name, false);
    {
      SensorSpectrumEnum::serializeList(accessor.getSensorSpectrum(), node, PO_TaskBaseType_Names::SensorSpectrum_Name);
    }
    if (accessor.hasLookAtCoords()) {
      LocatedEllipseType::serialize(accessor.getLookAtCoords(), node, PO_TaskBaseType_Names::LookAtCoords_Name);
    }
    if (accessor.hasMinimumNIIRS()) {
      extjson_uci::util::SerializationHelpers::serializeString(accessor.getMinimumNIIRS(), node, PO_TaskBaseType_Names::MinimumNIIRS_Name);
    }
    if (accessor.hasDesiredNIIRS()) {
      extjson_uci::util::SerializationHelpers::serializeString(accessor.getDesiredNIIRS(), node, PO_TaskBaseType_Names::DesiredNIIRS_Name);
    }
    if (accessor.hasCollectionConstraints()) {
      OpticalCollectionConstraintsType::serialize(accessor.getCollectionConstraints(), node, PO_TaskBaseType_Names::CollectionConstraints_Name);
    }
    if (accessor.hasPairIdentifier()) {
      PairIdentifierEnum::serialize(accessor.getPairIdentifier(), node, PO_TaskBaseType_Names::PairIdentifier_Name, false);
    }
    {
      const uci::type::PO_TaskBaseType::Output& boundedList = accessor.getOutput();
      for (uci::type::PO_TaskBaseType::Output::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        PO_ProductOutputCommandImageryType::serialize(boundedList.at(i), node, PO_TaskBaseType_Names::Output_Name);
      }
    }
    if (createNode) {
      propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
    }
  } else {
    extjson_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

