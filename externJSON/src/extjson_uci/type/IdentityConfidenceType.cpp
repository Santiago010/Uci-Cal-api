/** @file IdentityConfidenceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/IdentityConfidenceType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/EOB_IdentityConfidenceType.h"
#include "extjson_uci/type/EmitterMultipleType.h"
#include "extjson_uci/type/EnvironmentIdentityConfidenceType.h"
#include "extjson_uci/type/PlatformIdentityConfidenceType.h"
#include "extjson_uci/type/SpecificEmitterMultipleType.h"
#include "extjson_uci/type/SpecificFacilityIdentityConfidenceType.h"
#include "extjson_uci/type/SpecificIdentityConfidenceType.h"
#include "extjson_uci/type/SpecificVehicleIdentityConfidenceType.h"
#include "extjson_uci/type/StandardIdentityConfidenceType.h"
#include "extjson_uci/type/StoreMultipleType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/DerivedTypesSerializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/IdentityConfidenceType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace IdentityConfidenceType_Names {

constexpr const char* Extern_Type_Name{"IdentityConfidenceType"};
constexpr const char* Standard_Name{"Standard"};
constexpr const char* Environment_Name{"Environment"};
constexpr const char* Platform_Name{"Platform"};
constexpr const char* Specific_Name{"Specific"};
constexpr const char* Emitter_Name{"Emitter"};
constexpr const char* SpecificEmitter_Name{"SpecificEmitter"};
constexpr const char* SpecificVehicle_Name{"SpecificVehicle"};
constexpr const char* SpecificFacility_Name{"SpecificFacility"};
constexpr const char* EOB_Name{"EOB"};
constexpr const char* Weapon_Name{"Weapon"};

} // namespace IdentityConfidenceType_Names

bool IdentityConfidenceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IdentityConfidenceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IdentityConfidenceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + IdentityConfidenceType_Names::Standard_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::Standard& boundedList = accessor.getStandard();
        const uci::type::IdentityConfidenceType::Standard::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        StandardIdentityConfidenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::Environment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::Environment& boundedList = accessor.getEnvironment();
        const uci::type::IdentityConfidenceType::Environment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        EnvironmentIdentityConfidenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::Platform_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::Platform& boundedList = accessor.getPlatform();
        const uci::type::IdentityConfidenceType::Platform::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PlatformIdentityConfidenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::Specific_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::Specific& boundedList = accessor.getSpecific();
        const uci::type::IdentityConfidenceType::Specific::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SpecificIdentityConfidenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::Emitter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::Emitter& boundedList = accessor.getEmitter();
        const uci::type::IdentityConfidenceType::Emitter::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        EmitterMultipleType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::SpecificEmitter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::SpecificEmitter& boundedList = accessor.getSpecificEmitter();
        const uci::type::IdentityConfidenceType::SpecificEmitter::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SpecificEmitterMultipleType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::SpecificVehicle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::SpecificVehicle& boundedList = accessor.getSpecificVehicle();
        const uci::type::IdentityConfidenceType::SpecificVehicle::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SpecificVehicleIdentityConfidenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::SpecificFacility_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::SpecificFacility& boundedList = accessor.getSpecificFacility();
        const uci::type::IdentityConfidenceType::SpecificFacility::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SpecificFacilityIdentityConfidenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::EOB_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::EOB& boundedList = accessor.getEOB();
        const uci::type::IdentityConfidenceType::EOB::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        EOB_IdentityConfidenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityConfidenceType_Names::Weapon_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityConfidenceType::Weapon& boundedList = accessor.getWeapon();
        const uci::type::IdentityConfidenceType::Weapon::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        StoreMultipleType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string IdentityConfidenceType::serialize(const uci::type::IdentityConfidenceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? IdentityConfidenceType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::identityConfidenceType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extjson_uci::util::SerializationHelpers::addTypeAttribute(node, IdentityConfidenceType_Names::Extern_Type_Name);
    }
    {
      const uci::type::IdentityConfidenceType::Standard& boundedList = accessor.getStandard();
      for (uci::type::IdentityConfidenceType::Standard::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        StandardIdentityConfidenceType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::Standard_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::Environment& boundedList = accessor.getEnvironment();
      for (uci::type::IdentityConfidenceType::Environment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        EnvironmentIdentityConfidenceType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::Environment_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::Platform& boundedList = accessor.getPlatform();
      for (uci::type::IdentityConfidenceType::Platform::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        PlatformIdentityConfidenceType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::Platform_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::Specific& boundedList = accessor.getSpecific();
      for (uci::type::IdentityConfidenceType::Specific::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SpecificIdentityConfidenceType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::Specific_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::Emitter& boundedList = accessor.getEmitter();
      for (uci::type::IdentityConfidenceType::Emitter::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        EmitterMultipleType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::Emitter_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::SpecificEmitter& boundedList = accessor.getSpecificEmitter();
      for (uci::type::IdentityConfidenceType::SpecificEmitter::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SpecificEmitterMultipleType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::SpecificEmitter_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::SpecificVehicle& boundedList = accessor.getSpecificVehicle();
      for (uci::type::IdentityConfidenceType::SpecificVehicle::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SpecificVehicleIdentityConfidenceType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::SpecificVehicle_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::SpecificFacility& boundedList = accessor.getSpecificFacility();
      for (uci::type::IdentityConfidenceType::SpecificFacility::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SpecificFacilityIdentityConfidenceType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::SpecificFacility_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::EOB& boundedList = accessor.getEOB();
      for (uci::type::IdentityConfidenceType::EOB::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        EOB_IdentityConfidenceType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::EOB_Name);
      }
    }
    {
      const uci::type::IdentityConfidenceType::Weapon& boundedList = accessor.getWeapon();
      for (uci::type::IdentityConfidenceType::Weapon::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        StoreMultipleType::serialize(boundedList.at(i), node, IdentityConfidenceType_Names::Weapon_Name);
      }
    }
    if (createNode) {
      propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
    }
  } else {
    extjson_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

