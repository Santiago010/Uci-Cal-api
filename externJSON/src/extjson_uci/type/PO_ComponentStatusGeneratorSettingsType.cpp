/** @file PO_ComponentStatusGeneratorSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/PO_ComponentStatusGeneratorSettingsType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/DoubleMinMaxType.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/PO_ComponentStatusGeneratorSettingsType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PO_ComponentStatusGeneratorSettingsType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentStatusGeneratorSettingsType"};
constexpr const char* VisibleImageSetting_Name{"VisibleImageSetting"};
constexpr const char* InfraredImageSetting_Name{"InfraredImageSetting"};
constexpr const char* HyperspectralImageSetting_Name{"HyperspectralImageSetting"};
constexpr const char* ImageSetting_Name{"ImageSetting"};
constexpr const char* VideoClipVisibleSetting_Name{"VideoClipVisibleSetting"};
constexpr const char* VideoClipInfraredSetting_Name{"VideoClipInfraredSetting"};
constexpr const char* VideoClipHyperspectralSetting_Name{"VideoClipHyperspectralSetting"};
constexpr const char* VideoClipSetting_Name{"VideoClipSetting"};
constexpr const char* VideoStreamVisibleSetting_Name{"VideoStreamVisibleSetting"};
constexpr const char* VideoStreamInfraredSetting_Name{"VideoStreamInfraredSetting"};
constexpr const char* VideoStreamHyperspectralSetting_Name{"VideoStreamHyperspectralSetting"};
constexpr const char* VideoStreamSetting_Name{"VideoStreamSetting"};

} // namespace PO_ComponentStatusGeneratorSettingsType_Names

bool PO_ComponentStatusGeneratorSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentStatusGeneratorSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentStatusGeneratorSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VisibleImageSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VisibleImageSetting& boundedList = accessor.getVisibleImageSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VisibleImageSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::InfraredImageSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::InfraredImageSetting& boundedList = accessor.getInfraredImageSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::InfraredImageSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::HyperspectralImageSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::HyperspectralImageSetting& boundedList = accessor.getHyperspectralImageSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::HyperspectralImageSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::ImageSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::ImageSetting& boundedList = accessor.getImageSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::ImageSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoClipVisibleSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipVisibleSetting& boundedList = accessor.getVideoClipVisibleSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipVisibleSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoClipInfraredSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipInfraredSetting& boundedList = accessor.getVideoClipInfraredSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipInfraredSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoClipHyperspectralSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipHyperspectralSetting& boundedList = accessor.getVideoClipHyperspectralSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipHyperspectralSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoClipSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipSetting& boundedList = accessor.getVideoClipSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamVisibleSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamVisibleSetting& boundedList = accessor.getVideoStreamVisibleSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamVisibleSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamInfraredSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamInfraredSetting& boundedList = accessor.getVideoStreamInfraredSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamInfraredSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamHyperspectralSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamHyperspectralSetting& boundedList = accessor.getVideoStreamHyperspectralSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamHyperspectralSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamSetting& boundedList = accessor.getVideoStreamSetting();
        const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DoubleMinMaxType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string PO_ComponentStatusGeneratorSettingsType::serialize(const uci::type::PO_ComponentStatusGeneratorSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PO_ComponentStatusGeneratorSettingsType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentStatusGeneratorSettingsType_Names::Extern_Type_Name);
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VisibleImageSetting& boundedList = accessor.getVisibleImageSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VisibleImageSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VisibleImageSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::InfraredImageSetting& boundedList = accessor.getInfraredImageSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::InfraredImageSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::InfraredImageSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::HyperspectralImageSetting& boundedList = accessor.getHyperspectralImageSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::HyperspectralImageSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::HyperspectralImageSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::ImageSetting& boundedList = accessor.getImageSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::ImageSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::ImageSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipVisibleSetting& boundedList = accessor.getVideoClipVisibleSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipVisibleSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoClipVisibleSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipInfraredSetting& boundedList = accessor.getVideoClipInfraredSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipInfraredSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoClipInfraredSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipHyperspectralSetting& boundedList = accessor.getVideoClipHyperspectralSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipHyperspectralSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoClipHyperspectralSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipSetting& boundedList = accessor.getVideoClipSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoClipSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoClipSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamVisibleSetting& boundedList = accessor.getVideoStreamVisibleSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamVisibleSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamVisibleSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamInfraredSetting& boundedList = accessor.getVideoStreamInfraredSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamInfraredSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamInfraredSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamHyperspectralSetting& boundedList = accessor.getVideoStreamHyperspectralSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamHyperspectralSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamHyperspectralSetting_Name);
    }
  }
  {
    const uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamSetting& boundedList = accessor.getVideoStreamSetting();
    for (uci::type::PO_ComponentStatusGeneratorSettingsType::VideoStreamSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DoubleMinMaxType::serialize(boundedList.at(i), node, PO_ComponentStatusGeneratorSettingsType_Names::VideoStreamSetting_Name);
    }
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

