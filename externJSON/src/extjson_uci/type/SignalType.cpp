/** @file SignalType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/SignalType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ActivityByType.h"
#include "extjson_uci/type/EmitterFunctionType.h"
#include "extjson_uci/type/EmitterUrgencyEnum.h"
#include "extjson_uci/type/ForeignKeyType.h"
#include "extjson_uci/type/LockIndicatorEnum.h"
#include "extjson_uci/type/MeasurementQualityEnum.h"
#include "extjson_uci/type/MobilityEnum.h"
#include "extjson_uci/type/ModulationEnum.h"
#include "extjson_uci/type/ModulationParameterType.h"
#include "extjson_uci/type/PulseDataID_Type.h"
#include "extjson_uci/type/SignalEmitterKinematicsType.h"
#include "extjson_uci/type/SignalID_Type.h"
#include "extjson_uci/type/SignalIdentityType.h"
#include "extjson_uci/type/SignalNavDataType.h"
#include "extjson_uci/type/SignalParametricsType.h"
#include "extjson_uci/type/SignalRemoveInfoType.h"
#include "extjson_uci/type/SignalReportStateEnum.h"
#include "extjson_uci/type/SignalSourceType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/SignalType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SignalType_Names {

constexpr const char* Extern_Type_Name{"SignalType"};
constexpr const char* SignalID_Name{"SignalID"};
constexpr const char* SignalState_Name{"SignalState"};
constexpr const char* Source_Name{"Source"};
constexpr const char* LocalTrackIdentifier_Name{"LocalTrackIdentifier"};
constexpr const char* AssociatedPulseDataID_Name{"AssociatedPulseDataID"};
constexpr const char* InitialDetectionTimestamp_Name{"InitialDetectionTimestamp"};
constexpr const char* LatestDetectionTimestamp_Name{"LatestDetectionTimestamp"};
constexpr const char* TimestampQuality_Name{"TimestampQuality"};
constexpr const char* Parametrics_Name{"Parametrics"};
constexpr const char* EmitterFunction_Name{"EmitterFunction"};
constexpr const char* EmitterIdentity_Name{"EmitterIdentity"};
constexpr const char* EmitterKinematics_Name{"EmitterKinematics"};
constexpr const char* CollectorKinematics_Name{"CollectorKinematics"};
constexpr const char* WartimeReserveMode_Name{"WartimeReserveMode"};
constexpr const char* LockIndicator_Name{"LockIndicator"};
constexpr const char* ActivityBy_Name{"ActivityBy"};
constexpr const char* RemoveInfo_Name{"RemoveInfo"};
constexpr const char* Modulation_Name{"Modulation"};
constexpr const char* ModulationParameter_Name{"ModulationParameter"};
constexpr const char* Urgency_Name{"Urgency"};
constexpr const char* Mobility_Name{"Mobility"};

} // namespace SignalType_Names

bool SignalType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SignalType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SignalType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + SignalType_Names::SignalID_Name) {
      SignalID_Type::deserialize(valueType.second, accessor.getSignalID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalType_Names::SignalState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSignalState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalType_Names::Source_Name) {
      SignalSourceType::deserialize(valueType.second, accessor.enableSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalType_Names::LocalTrackIdentifier_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableLocalTrackIdentifier(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalType_Names::AssociatedPulseDataID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SignalType::AssociatedPulseDataID& boundedList = accessor.getAssociatedPulseDataID();
        const uci::type::SignalType::AssociatedPulseDataID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PulseDataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SignalType_Names::InitialDetectionTimestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInitialDetectionTimestamp(extjson_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SignalType_Names::LatestDetectionTimestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLatestDetectionTimestamp(extjson_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SignalType_Names::TimestampQuality_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTimestampQuality().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalType_Names::Parametrics_Name) {
      SignalParametricsType::deserialize(valueType.second, accessor.enableParametrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalType_Names::EmitterFunction_Name) {
      EmitterFunctionType::deserialize(valueType.second, accessor.enableEmitterFunction(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalType_Names::EmitterIdentity_Name) {
      SignalIdentityType::deserialize(valueType.second, accessor.enableEmitterIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalType_Names::EmitterKinematics_Name) {
      SignalEmitterKinematicsType::deserialize(valueType.second, accessor.enableEmitterKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalType_Names::CollectorKinematics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SignalType::CollectorKinematics& boundedList = accessor.getCollectorKinematics();
        const uci::type::SignalType::CollectorKinematics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SignalNavDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SignalType_Names::WartimeReserveMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWartimeReserveMode(*value);
      }
    } else if (valueType.first == nsPrefix + SignalType_Names::LockIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableLockIndicator().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalType_Names::ActivityBy_Name) {
      ActivityByType::deserialize(valueType.second, accessor.enableActivityBy(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalType_Names::RemoveInfo_Name) {
      SignalRemoveInfoType::deserialize(valueType.second, accessor.enableRemoveInfo(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalType_Names::Modulation_Name) {
      ModulationEnum::deserializeList(valueType.second, accessor.getModulation());
    } else if (valueType.first == nsPrefix + SignalType_Names::ModulationParameter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SignalType::ModulationParameter& boundedList = accessor.getModulationParameter();
        const uci::type::SignalType::ModulationParameter::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ModulationParameterType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SignalType_Names::Urgency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableUrgency().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalType_Names::Mobility_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMobility().setValueFromName(*value);
      }
    }
  }
  return true;
}

std::string SignalType::serialize(const uci::type::SignalType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SignalType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, SignalType_Names::Extern_Type_Name);
  }
  SignalID_Type::serialize(accessor.getSignalID(), node, SignalType_Names::SignalID_Name);
  SignalReportStateEnum::serialize(accessor.getSignalState(), node, SignalType_Names::SignalState_Name, false);
  if (accessor.hasSource()) {
    SignalSourceType::serialize(accessor.getSource(), node, SignalType_Names::Source_Name);
  }
  if (accessor.hasLocalTrackIdentifier()) {
    ForeignKeyType::serialize(accessor.getLocalTrackIdentifier(), node, SignalType_Names::LocalTrackIdentifier_Name);
  }
  {
    const uci::type::SignalType::AssociatedPulseDataID& boundedList = accessor.getAssociatedPulseDataID();
    for (uci::type::SignalType::AssociatedPulseDataID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PulseDataID_Type::serialize(boundedList.at(i), node, SignalType_Names::AssociatedPulseDataID_Name);
    }
  }
  if (accessor.hasInitialDetectionTimestamp()) {
    extjson_uci::util::SerializationHelpers::serializeDateTime(accessor.getInitialDetectionTimestamp(), node, SignalType_Names::InitialDetectionTimestamp_Name);
  }
  if (accessor.hasLatestDetectionTimestamp()) {
    extjson_uci::util::SerializationHelpers::serializeDateTime(accessor.getLatestDetectionTimestamp(), node, SignalType_Names::LatestDetectionTimestamp_Name);
  }
  if (accessor.hasTimestampQuality()) {
    MeasurementQualityEnum::serialize(accessor.getTimestampQuality(), node, SignalType_Names::TimestampQuality_Name, false);
  }
  if (accessor.hasParametrics()) {
    SignalParametricsType::serialize(accessor.getParametrics(), node, SignalType_Names::Parametrics_Name);
  }
  if (accessor.hasEmitterFunction()) {
    EmitterFunctionType::serialize(accessor.getEmitterFunction(), node, SignalType_Names::EmitterFunction_Name);
  }
  if (accessor.hasEmitterIdentity()) {
    SignalIdentityType::serialize(accessor.getEmitterIdentity(), node, SignalType_Names::EmitterIdentity_Name);
  }
  if (accessor.hasEmitterKinematics()) {
    SignalEmitterKinematicsType::serialize(accessor.getEmitterKinematics(), node, SignalType_Names::EmitterKinematics_Name);
  }
  {
    const uci::type::SignalType::CollectorKinematics& boundedList = accessor.getCollectorKinematics();
    for (uci::type::SignalType::CollectorKinematics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SignalNavDataType::serialize(boundedList.at(i), node, SignalType_Names::CollectorKinematics_Name);
    }
  }
  if (accessor.hasWartimeReserveMode()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getWartimeReserveMode(), node, SignalType_Names::WartimeReserveMode_Name);
  }
  if (accessor.hasLockIndicator()) {
    LockIndicatorEnum::serialize(accessor.getLockIndicator(), node, SignalType_Names::LockIndicator_Name, false);
  }
  if (accessor.hasActivityBy()) {
    ActivityByType::serialize(accessor.getActivityBy(), node, SignalType_Names::ActivityBy_Name);
  }
  if (accessor.hasRemoveInfo()) {
    SignalRemoveInfoType::serialize(accessor.getRemoveInfo(), node, SignalType_Names::RemoveInfo_Name);
  }
  {
    ModulationEnum::serializeList(accessor.getModulation(), node, SignalType_Names::Modulation_Name);
  }
  {
    const uci::type::SignalType::ModulationParameter& boundedList = accessor.getModulationParameter();
    for (uci::type::SignalType::ModulationParameter::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ModulationParameterType::serialize(boundedList.at(i), node, SignalType_Names::ModulationParameter_Name);
    }
  }
  if (accessor.hasUrgency()) {
    EmitterUrgencyEnum::serialize(accessor.getUrgency(), node, SignalType_Names::Urgency_Name, false);
  }
  if (accessor.hasMobility()) {
    MobilityEnum::serialize(accessor.getMobility(), node, SignalType_Names::Mobility_Name, false);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

