/** @file UnitType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/UnitType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/BaseEOB_RecordType.h"
#include "extjson_uci/type/CountryCodeType.h"
#include "extjson_uci/type/EOB_EquipmentRecordType.h"
#include "extjson_uci/type/EOB_FixedPositionType.h"
#include "extjson_uci/type/ID_Type.h"
#include "extjson_uci/type/OB_OperationalStatusEnum.h"
#include "extjson_uci/type/OrderOfBattleTimestampsType.h"
#include "extjson_uci/type/SecurityInformationType.h"
#include "extjson_uci/type/StandardIdentityConfidenceType.h"
#include "extjson_uci/type/UnitIdentityType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/UnitType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace UnitType_Names {

constexpr const char* Extern_Type_Name{"UnitType"};
constexpr const char* SecurityInformation_Name{"SecurityInformation"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* StandardIdentity_Name{"StandardIdentity"};
constexpr const char* CountryCode_Name{"CountryCode"};
constexpr const char* Position_Name{"Position"};
constexpr const char* Timestamps_Name{"Timestamps"};
constexpr const char* Evaluation_Name{"Evaluation"};
constexpr const char* OperationalStatus_Name{"OperationalStatus"};
constexpr const char* PoliticalSubdivision_Name{"PoliticalSubdivision"};
constexpr const char* AllegianceAlternate_Name{"AllegianceAlternate"};
constexpr const char* DeploymentStatus_Name{"DeploymentStatus"};
constexpr const char* DivisionCategory_Name{"DivisionCategory"};
constexpr const char* Echelon_Name{"Echelon"};
constexpr const char* EchelonTier_Name{"EchelonTier"};
constexpr const char* FlagFlown_Name{"FlagFlown"};
constexpr const char* FleetAssignment_Name{"FleetAssignment"};
constexpr const char* AirDefenseArea_Name{"AirDefenseArea"};
constexpr const char* ForceAssignment_Name{"ForceAssignment"};
constexpr const char* ForceName_Name{"ForceName"};
constexpr const char* FunctionRole_Name{"FunctionRole"};
constexpr const char* MissionPrimary_Name{"MissionPrimary"};
constexpr const char* MissionPrimarySpecialty_Name{"MissionPrimarySpecialty"};
constexpr const char* MissionSecondary_Name{"MissionSecondary"};
constexpr const char* MissionSecondarySpecialty_Name{"MissionSecondarySpecialty"};
constexpr const char* NuclearCapacity_Name{"NuclearCapacity"};
constexpr const char* ParentUnitID_Name{"ParentUnitID"};
constexpr const char* Site_Name{"Site"};
constexpr const char* Equipment_Name{"Equipment"};

} // namespace UnitType_Names

bool UnitType::deserialize(const boost::property_tree::ptree& propTree, uci::type::UnitType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = UnitType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + UnitType_Names::SecurityInformation_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.getSecurityInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + UnitType_Names::Identity_Name) {
      UnitIdentityType::deserialize(valueType.second, accessor.getIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + UnitType_Names::StandardIdentity_Name) {
      StandardIdentityConfidenceType::deserialize(valueType.second, accessor.enableStandardIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + UnitType_Names::CountryCode_Name) {
      CountryCodeType::deserialize(valueType.second, accessor.enableCountryCode(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + UnitType_Names::Position_Name) {
      EOB_FixedPositionType::deserialize(valueType.second, accessor.enablePosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + UnitType_Names::Timestamps_Name) {
      OrderOfBattleTimestampsType::deserialize(valueType.second, accessor.enableTimestamps(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + UnitType_Names::Evaluation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEvaluation(extjson_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::OperationalStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableOperationalStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::PoliticalSubdivision_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPoliticalSubdivision(*value);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::AllegianceAlternate_Name) {
      CountryCodeType::deserialize(valueType.second, accessor.enableAllegianceAlternate(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + UnitType_Names::DeploymentStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDeploymentStatus(*value);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::DivisionCategory_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDivisionCategory(*value);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::Echelon_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEchelon(*value);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::EchelonTier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEchelonTier(extjson_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::FlagFlown_Name) {
      CountryCodeType::deserialize(valueType.second, accessor.enableFlagFlown(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + UnitType_Names::FleetAssignment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFleetAssignment(*value);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::AirDefenseArea_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAirDefenseArea(*value);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::ForceAssignment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setForceAssignment(*value);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::ForceName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setForceName(*value);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::FunctionRole_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFunctionRole(*value);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::MissionPrimary_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMissionPrimary(*value);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::MissionPrimarySpecialty_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMissionPrimarySpecialty(*value);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::MissionSecondary_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMissionSecondary(*value);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::MissionSecondarySpecialty_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMissionSecondarySpecialty(*value);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::NuclearCapacity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNuclearCapacity(*value);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::ParentUnitID_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableParentUnitID(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + UnitType_Names::Site_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::UnitType::Site& boundedList = accessor.getSite();
        const uci::type::UnitType::Site::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + UnitType_Names::Equipment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::UnitType::Equipment& boundedList = accessor.getEquipment();
        const uci::type::UnitType::Equipment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        EOB_EquipmentRecordType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string UnitType::serialize(const uci::type::UnitType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? UnitType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, UnitType_Names::Extern_Type_Name);
  }
  SecurityInformationType::serialize(accessor.getSecurityInformation(), node, UnitType_Names::SecurityInformation_Name);
  UnitIdentityType::serialize(accessor.getIdentity(), node, UnitType_Names::Identity_Name);
  if (accessor.hasStandardIdentity()) {
    StandardIdentityConfidenceType::serialize(accessor.getStandardIdentity(), node, UnitType_Names::StandardIdentity_Name);
  }
  if (accessor.hasCountryCode()) {
    CountryCodeType::serialize(accessor.getCountryCode(), node, UnitType_Names::CountryCode_Name);
  }
  if (accessor.hasPosition()) {
    EOB_FixedPositionType::serialize(accessor.getPosition(), node, UnitType_Names::Position_Name);
  }
  if (accessor.hasTimestamps()) {
    OrderOfBattleTimestampsType::serialize(accessor.getTimestamps(), node, UnitType_Names::Timestamps_Name);
  }
  if (accessor.hasEvaluation()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getEvaluation(), node, UnitType_Names::Evaluation_Name);
  }
  if (accessor.hasOperationalStatus()) {
    OB_OperationalStatusEnum::serialize(accessor.getOperationalStatus(), node, UnitType_Names::OperationalStatus_Name, false);
  }
  if (accessor.hasPoliticalSubdivision()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getPoliticalSubdivision(), node, UnitType_Names::PoliticalSubdivision_Name);
  }
  if (accessor.hasAllegianceAlternate()) {
    CountryCodeType::serialize(accessor.getAllegianceAlternate(), node, UnitType_Names::AllegianceAlternate_Name);
  }
  if (accessor.hasDeploymentStatus()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getDeploymentStatus(), node, UnitType_Names::DeploymentStatus_Name);
  }
  if (accessor.hasDivisionCategory()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getDivisionCategory(), node, UnitType_Names::DivisionCategory_Name);
  }
  if (accessor.hasEchelon()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getEchelon(), node, UnitType_Names::Echelon_Name);
  }
  if (accessor.hasEchelonTier()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getEchelonTier(), node, UnitType_Names::EchelonTier_Name);
  }
  if (accessor.hasFlagFlown()) {
    CountryCodeType::serialize(accessor.getFlagFlown(), node, UnitType_Names::FlagFlown_Name);
  }
  if (accessor.hasFleetAssignment()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getFleetAssignment(), node, UnitType_Names::FleetAssignment_Name);
  }
  if (accessor.hasAirDefenseArea()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getAirDefenseArea(), node, UnitType_Names::AirDefenseArea_Name);
  }
  if (accessor.hasForceAssignment()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getForceAssignment(), node, UnitType_Names::ForceAssignment_Name);
  }
  if (accessor.hasForceName()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getForceName(), node, UnitType_Names::ForceName_Name);
  }
  if (accessor.hasFunctionRole()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getFunctionRole(), node, UnitType_Names::FunctionRole_Name);
  }
  if (accessor.hasMissionPrimary()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getMissionPrimary(), node, UnitType_Names::MissionPrimary_Name);
  }
  if (accessor.hasMissionPrimarySpecialty()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getMissionPrimarySpecialty(), node, UnitType_Names::MissionPrimarySpecialty_Name);
  }
  if (accessor.hasMissionSecondary()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getMissionSecondary(), node, UnitType_Names::MissionSecondary_Name);
  }
  if (accessor.hasMissionSecondarySpecialty()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getMissionSecondarySpecialty(), node, UnitType_Names::MissionSecondarySpecialty_Name);
  }
  if (accessor.hasNuclearCapacity()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getNuclearCapacity(), node, UnitType_Names::NuclearCapacity_Name);
  }
  if (accessor.hasParentUnitID()) {
    ID_Type::serialize(accessor.getParentUnitID(), node, UnitType_Names::ParentUnitID_Name);
  }
  {
    const uci::type::UnitType::Site& boundedList = accessor.getSite();
    for (uci::type::UnitType::Site::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      BaseEOB_RecordType::serialize(boundedList.at(i), node, UnitType_Names::Site_Name);
    }
  }
  {
    const uci::type::UnitType::Equipment& boundedList = accessor.getEquipment();
    for (uci::type::UnitType::Equipment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      EOB_EquipmentRecordType::serialize(boundedList.at(i), node, UnitType_Names::Equipment_Name);
    }
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

