/** @file FileMetadataMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/FileMetadataMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/CreationSourceEnum.h"
#include "extjson_uci/type/DataRecordBaseType.h"
#include "extjson_uci/type/FileMetadataID_Type.h"
#include "extjson_uci/type/FileOutputType.h"
#include "extjson_uci/type/SecurityInformationType.h"
#include "extjson_uci/type/SourceFiltersType.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/FileMetadataMDT.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace FileMetadataMDT_Names {

constexpr const char* Extern_Type_Name{"FileMetadataMDT"};
constexpr const char* FileMetadataID_Name{"FileMetadataID"};
constexpr const char* FileDescription_Name{"FileDescription"};
constexpr const char* FileName_Name{"FileName"};
constexpr const char* FileSource_Name{"FileSource"};
constexpr const char* FileConsumer_Name{"FileConsumer"};
constexpr const char* CreationSource_Name{"CreationSource"};
constexpr const char* UntrustedModification_Name{"UntrustedModification"};
constexpr const char* Timestamp_Name{"Timestamp"};
constexpr const char* SecurityInformation_Name{"SecurityInformation"};
constexpr const char* SHA_2_Hash_Name{"SHA_2_Hash"};
constexpr const char* AssociatedID_Name{"AssociatedID"};

} // namespace FileMetadataMDT_Names

bool FileMetadataMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::FileMetadataMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FileMetadataMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + FileMetadataMDT_Names::FileMetadataID_Name) {
      FileMetadataID_Type::deserialize(valueType.second, accessor.getFileMetadataID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::FileDescription_Name) {
      FileOutputType::deserialize(valueType.second, accessor.getFileDescription(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::FileName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileName(*value);
      }
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::FileSource_Name) {
      SourceFiltersType::deserialize(valueType.second, accessor.getFileSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::FileConsumer_Name) {
      SourceFiltersType::deserialize(valueType.second, accessor.enableFileConsumer(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::CreationSource_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCreationSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::UntrustedModification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUntrustedModification(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(extjson_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::SecurityInformation_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.getSecurityInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::SHA_2_Hash_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        extjson_uci::util::SerializationHelpers::deserializeHexBinary(*value, accessor.enableSHA_2_Hash());
      }
    } else if (valueType.first == nsPrefix + FileMetadataMDT_Names::AssociatedID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::FileMetadataMDT::AssociatedID& boundedList = accessor.getAssociatedID();
        const uci::type::FileMetadataMDT::AssociatedID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string FileMetadataMDT::serialize(const uci::type::FileMetadataMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? FileMetadataMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, FileMetadataMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  FileMetadataID_Type::serialize(accessor.getFileMetadataID(), node, FileMetadataMDT_Names::FileMetadataID_Name);
  FileOutputType::serialize(accessor.getFileDescription(), node, FileMetadataMDT_Names::FileDescription_Name);
  extjson_uci::util::SerializationHelpers::serializeString(accessor.getFileName(), node, FileMetadataMDT_Names::FileName_Name);
  SourceFiltersType::serialize(accessor.getFileSource(), node, FileMetadataMDT_Names::FileSource_Name);
  if (accessor.hasFileConsumer()) {
    SourceFiltersType::serialize(accessor.getFileConsumer(), node, FileMetadataMDT_Names::FileConsumer_Name);
  }
  CreationSourceEnum::serialize(accessor.getCreationSource(), node, FileMetadataMDT_Names::CreationSource_Name, false);
  extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getUntrustedModification(), node, FileMetadataMDT_Names::UntrustedModification_Name);
  extjson_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, FileMetadataMDT_Names::Timestamp_Name);
  SecurityInformationType::serialize(accessor.getSecurityInformation(), node, FileMetadataMDT_Names::SecurityInformation_Name);
  if (accessor.hasSHA_2_Hash()) {
    extjson_uci::util::SerializationHelpers::serializeHexBinary(accessor.getSHA_2_Hash(), node, FileMetadataMDT_Names::SHA_2_Hash_Name);
  }
  {
    const uci::type::FileMetadataMDT::AssociatedID& boundedList = accessor.getAssociatedID();
    for (uci::type::FileMetadataMDT::AssociatedID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, FileMetadataMDT_Names::AssociatedID_Name);
    }
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

