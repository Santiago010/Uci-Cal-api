/** @file MISP_PackingPlanType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/MISP_PackingPlanType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/MISP_OperationalModeEnum.h"
#include "extjson_uci/type/MissionID_Type.h"
#include "extjson_uci/type/UMID_AudioID_Type.h"
#include "extjson_uci/type/UMID_DataID_Type.h"
#include "extjson_uci/type/UMID_SystemID_Type.h"
#include "extjson_uci/type/UMID_VideoID_Type.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/MISP_PackingPlanType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace MISP_PackingPlanType_Names {

constexpr const char* Extern_Type_Name{"MISP_PackingPlanType"};
constexpr const char* MissionID_Name{"MissionID"};
constexpr const char* PlatformDesignation_Name{"PlatformDesignation"};
constexpr const char* ImageSourceSensor_Name{"ImageSourceSensor"};
constexpr const char* PlatformTailNumber_Name{"PlatformTailNumber"};
constexpr const char* AirfieldBarometricPressure_Name{"AirfieldBarometricPressure"};
constexpr const char* AirFieldElevation_Name{"AirFieldElevation"};
constexpr const char* PlatformCallSign_Name{"PlatformCallSign"};
constexpr const char* OperationalMode_Name{"OperationalMode"};
constexpr const char* ClassificationOrMarkingSystem_Name{"ClassificationOrMarkingSystem"};
constexpr const char* ClassificationComment_Name{"ClassificationComment"};
constexpr const char* UMID_VideoID_Name{"UMID_VideoID"};
constexpr const char* UMID_AudioID_Name{"UMID_AudioID"};
constexpr const char* UMID_DataID_Name{"UMID_DataID"};
constexpr const char* UMID_SystemID_Name{"UMID_SystemID"};
constexpr const char* ItemDesignator_Name{"ItemDesignator"};

} // namespace MISP_PackingPlanType_Names

bool MISP_PackingPlanType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MISP_PackingPlanType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MISP_PackingPlanType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + MISP_PackingPlanType_Names::MissionID_Name) {
      MissionID_Type::deserialize(valueType.second, accessor.getMissionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MISP_PackingPlanType_Names::PlatformDesignation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPlatformDesignation(*value);
      }
    } else if (valueType.first == nsPrefix + MISP_PackingPlanType_Names::ImageSourceSensor_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setImageSourceSensor(*value);
      }
    } else if (valueType.first == nsPrefix + MISP_PackingPlanType_Names::PlatformTailNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPlatformTailNumber(*value);
      }
    } else if (valueType.first == nsPrefix + MISP_PackingPlanType_Names::AirfieldBarometricPressure_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAirfieldBarometricPressure(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MISP_PackingPlanType_Names::AirFieldElevation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAirFieldElevation(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MISP_PackingPlanType_Names::PlatformCallSign_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPlatformCallSign(*value);
      }
    } else if (valueType.first == nsPrefix + MISP_PackingPlanType_Names::OperationalMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableOperationalMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MISP_PackingPlanType_Names::ClassificationOrMarkingSystem_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setClassificationOrMarkingSystem(*value);
      }
    } else if (valueType.first == nsPrefix + MISP_PackingPlanType_Names::ClassificationComment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setClassificationComment(*value);
      }
    } else if (valueType.first == nsPrefix + MISP_PackingPlanType_Names::UMID_VideoID_Name) {
      UMID_VideoID_Type::deserialize(valueType.second, accessor.enableUMID_VideoID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MISP_PackingPlanType_Names::UMID_AudioID_Name) {
      UMID_AudioID_Type::deserialize(valueType.second, accessor.enableUMID_AudioID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MISP_PackingPlanType_Names::UMID_DataID_Name) {
      UMID_DataID_Type::deserialize(valueType.second, accessor.enableUMID_DataID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MISP_PackingPlanType_Names::UMID_SystemID_Name) {
      UMID_SystemID_Type::deserialize(valueType.second, accessor.enableUMID_SystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MISP_PackingPlanType_Names::ItemDesignator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setItemDesignator(*value);
      }
    }
  }
  return true;
}

std::string MISP_PackingPlanType::serialize(const uci::type::MISP_PackingPlanType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? MISP_PackingPlanType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, MISP_PackingPlanType_Names::Extern_Type_Name);
  }
  MissionID_Type::serialize(accessor.getMissionID(), node, MISP_PackingPlanType_Names::MissionID_Name);
  extjson_uci::util::SerializationHelpers::serializeString(accessor.getPlatformDesignation(), node, MISP_PackingPlanType_Names::PlatformDesignation_Name);
  extjson_uci::util::SerializationHelpers::serializeString(accessor.getImageSourceSensor(), node, MISP_PackingPlanType_Names::ImageSourceSensor_Name);
  if (accessor.hasPlatformTailNumber()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getPlatformTailNumber(), node, MISP_PackingPlanType_Names::PlatformTailNumber_Name);
  }
  if (accessor.hasAirfieldBarometricPressure()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getAirfieldBarometricPressure(), node, MISP_PackingPlanType_Names::AirfieldBarometricPressure_Name);
  }
  if (accessor.hasAirFieldElevation()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getAirFieldElevation(), node, MISP_PackingPlanType_Names::AirFieldElevation_Name);
  }
  if (accessor.hasPlatformCallSign()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getPlatformCallSign(), node, MISP_PackingPlanType_Names::PlatformCallSign_Name);
  }
  if (accessor.hasOperationalMode()) {
    MISP_OperationalModeEnum::serialize(accessor.getOperationalMode(), node, MISP_PackingPlanType_Names::OperationalMode_Name, false);
  }
  if (accessor.hasClassificationOrMarkingSystem()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getClassificationOrMarkingSystem(), node, MISP_PackingPlanType_Names::ClassificationOrMarkingSystem_Name);
  }
  if (accessor.hasClassificationComment()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getClassificationComment(), node, MISP_PackingPlanType_Names::ClassificationComment_Name);
  }
  if (accessor.hasUMID_VideoID()) {
    UMID_VideoID_Type::serialize(accessor.getUMID_VideoID(), node, MISP_PackingPlanType_Names::UMID_VideoID_Name);
  }
  if (accessor.hasUMID_AudioID()) {
    UMID_AudioID_Type::serialize(accessor.getUMID_AudioID(), node, MISP_PackingPlanType_Names::UMID_AudioID_Name);
  }
  if (accessor.hasUMID_DataID()) {
    UMID_DataID_Type::serialize(accessor.getUMID_DataID(), node, MISP_PackingPlanType_Names::UMID_DataID_Name);
  }
  if (accessor.hasUMID_SystemID()) {
    UMID_SystemID_Type::serialize(accessor.getUMID_SystemID(), node, MISP_PackingPlanType_Names::UMID_SystemID_Name);
  }
  if (accessor.hasItemDesignator()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getItemDesignator(), node, MISP_PackingPlanType_Names::ItemDesignator_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

