/** @file SAR_CollectionConstraintsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/SAR_CollectionConstraintsType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/AltitudeRangeType.h"
#include "extjson_uci/type/CollectionConstraintsType.h"
#include "extjson_uci/type/EmconConstraintType.h"
#include "extjson_uci/type/PositionLocationUncertaintyType.h"
#include "extjson_uci/type/SAR_CollectionConstraintsQualityType.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/SAR_CollectionConstraintsType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SAR_CollectionConstraintsType_Names {

constexpr const char* Extern_Type_Name{"SAR_CollectionConstraintsType"};
constexpr const char* Quality_Name{"Quality"};
constexpr const char* ContinuousSpotAngle_Name{"ContinuousSpotAngle"};
constexpr const char* AltitudeConstraints_Name{"AltitudeConstraints"};
constexpr const char* MaximumMappingTime_Name{"MaximumMappingTime"};
constexpr const char* AzSubsetFraction_Name{"AzSubsetFraction"};
constexpr const char* LOS_BufferAngle_Name{"LOS_BufferAngle"};
constexpr const char* NumImagesAzimuth_Name{"NumImagesAzimuth"};
constexpr const char* NumImagesRange_Name{"NumImagesRange"};
constexpr const char* PercentAzimuthCollection_Name{"PercentAzimuthCollection"};
constexpr const char* HeadingDeviationTolerance_Name{"HeadingDeviationTolerance"};
constexpr const char* CrossTrackDeviationTolerance_Name{"CrossTrackDeviationTolerance"};
constexpr const char* Emcon_Name{"Emcon"};
constexpr const char* MapGainAdjustment_Name{"MapGainAdjustment"};
constexpr const char* OwnshipLocationConstraint_Name{"OwnshipLocationConstraint"};

} // namespace SAR_CollectionConstraintsType_Names

bool SAR_CollectionConstraintsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_CollectionConstraintsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SAR_CollectionConstraintsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::Quality_Name) {
      SAR_CollectionConstraintsQualityType::deserialize(valueType.second, accessor.enableQuality(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::ContinuousSpotAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setContinuousSpotAngle(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::AltitudeConstraints_Name) {
      AltitudeRangeType::deserialize(valueType.second, accessor.enableAltitudeConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::MaximumMappingTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumMappingTime(extjson_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::AzSubsetFraction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzSubsetFraction(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::LOS_BufferAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLOS_BufferAngle(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::NumImagesAzimuth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumImagesAzimuth(extjson_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::NumImagesRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumImagesRange(extjson_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::PercentAzimuthCollection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentAzimuthCollection(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::HeadingDeviationTolerance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHeadingDeviationTolerance(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::CrossTrackDeviationTolerance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCrossTrackDeviationTolerance(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::Emcon_Name) {
      EmconConstraintType::deserialize(valueType.second, accessor.enableEmcon(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::MapGainAdjustment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMapGainAdjustment(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CollectionConstraintsType_Names::OwnshipLocationConstraint_Name) {
      PositionLocationUncertaintyType::deserialize(valueType.second, accessor.enableOwnshipLocationConstraint(), nodeName, nsPrefix);
    }
  }
  CollectionConstraintsType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string SAR_CollectionConstraintsType::serialize(const uci::type::SAR_CollectionConstraintsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SAR_CollectionConstraintsType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, SAR_CollectionConstraintsType_Names::Extern_Type_Name);
  }
  CollectionConstraintsType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasQuality()) {
    SAR_CollectionConstraintsQualityType::serialize(accessor.getQuality(), node, SAR_CollectionConstraintsType_Names::Quality_Name);
  }
  if (accessor.hasContinuousSpotAngle()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getContinuousSpotAngle(), node, SAR_CollectionConstraintsType_Names::ContinuousSpotAngle_Name);
  }
  if (accessor.hasAltitudeConstraints()) {
    AltitudeRangeType::serialize(accessor.getAltitudeConstraints(), node, SAR_CollectionConstraintsType_Names::AltitudeConstraints_Name);
  }
  if (accessor.hasMaximumMappingTime()) {
    extjson_uci::util::SerializationHelpers::serializeDuration(accessor.getMaximumMappingTime(), node, SAR_CollectionConstraintsType_Names::MaximumMappingTime_Name);
  }
  if (accessor.hasAzSubsetFraction()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getAzSubsetFraction(), node, SAR_CollectionConstraintsType_Names::AzSubsetFraction_Name);
  }
  if (accessor.hasLOS_BufferAngle()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getLOS_BufferAngle(), node, SAR_CollectionConstraintsType_Names::LOS_BufferAngle_Name);
  }
  if (accessor.hasNumImagesAzimuth()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumImagesAzimuth(), node, SAR_CollectionConstraintsType_Names::NumImagesAzimuth_Name);
  }
  if (accessor.hasNumImagesRange()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumImagesRange(), node, SAR_CollectionConstraintsType_Names::NumImagesRange_Name);
  }
  if (accessor.hasPercentAzimuthCollection()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentAzimuthCollection(), node, SAR_CollectionConstraintsType_Names::PercentAzimuthCollection_Name);
  }
  if (accessor.hasHeadingDeviationTolerance()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getHeadingDeviationTolerance(), node, SAR_CollectionConstraintsType_Names::HeadingDeviationTolerance_Name);
  }
  if (accessor.hasCrossTrackDeviationTolerance()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getCrossTrackDeviationTolerance(), node, SAR_CollectionConstraintsType_Names::CrossTrackDeviationTolerance_Name);
  }
  if (accessor.hasEmcon()) {
    EmconConstraintType::serialize(accessor.getEmcon(), node, SAR_CollectionConstraintsType_Names::Emcon_Name);
  }
  if (accessor.hasMapGainAdjustment()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getMapGainAdjustment(), node, SAR_CollectionConstraintsType_Names::MapGainAdjustment_Name);
  }
  if (accessor.hasOwnshipLocationConstraint()) {
    PositionLocationUncertaintyType::serialize(accessor.getOwnshipLocationConstraint(), node, SAR_CollectionConstraintsType_Names::OwnshipLocationConstraint_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

