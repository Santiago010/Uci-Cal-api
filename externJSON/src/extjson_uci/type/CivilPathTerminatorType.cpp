/** @file CivilPathTerminatorType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/CivilPathTerminatorType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/CF_CourseToFixType.h"
#include "extjson_uci/type/RF_RadiusToFixType.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/CivilPathTerminatorType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace CivilPathTerminatorType_Names {

constexpr const char* Extern_Type_Name{"CivilPathTerminatorType"};
constexpr const char* AF_ArcToFix_Name{"AF_ArcToFix"};
constexpr const char* CA_CourseToAltitude_Name{"CA_CourseToAltitude"};
constexpr const char* CD_CourseToDMEDistance_Name{"CD_CourseToDMEDistance"};
constexpr const char* CF_CourseToFix_Name{"CF_CourseToFix"};
constexpr const char* CI_CourseToIntercept_Name{"CI_CourseToIntercept"};
constexpr const char* CR_CourseToRadial_Name{"CR_CourseToRadial"};
constexpr const char* DF_DirectToFix_Name{"DF_DirectToFix"};
constexpr const char* FA_TrackToAltitude_Name{"FA_TrackToAltitude"};
constexpr const char* FC_TrackFromFixToDistanceAlongTrack_Name{"FC_TrackFromFixToDistanceAlongTrack"};
constexpr const char* FD_TrackFromFixToDMEDistance_Name{"FD_TrackFromFixToDMEDistance"};
constexpr const char* FM_FixToManualTermination_Name{"FM_FixToManualTermination"};
constexpr const char* HA_HoldingWithAltitudeTermination_Name{"HA_HoldingWithAltitudeTermination"};
constexpr const char* HF_HoldingWithFixTermination_Name{"HF_HoldingWithFixTermination"};
constexpr const char* HM_HoldingWithManualTermination_Name{"HM_HoldingWithManualTermination"};
constexpr const char* IF_InitialFix_Name{"IF_InitialFix"};
constexpr const char* PI_ProcedureTurnToIntercept_Name{"PI_ProcedureTurnToIntercept"};
constexpr const char* RF_RadiusToFix_Name{"RF_RadiusToFix"};
constexpr const char* TF_TrackToFix_Name{"TF_TrackToFix"};
constexpr const char* VA_HeadingToAltitude_Name{"VA_HeadingToAltitude"};
constexpr const char* VD_HeadingToDMEDistanceTermination_Name{"VD_HeadingToDMEDistanceTermination"};
constexpr const char* VI_HeadingToIntercept_Name{"VI_HeadingToIntercept"};
constexpr const char* VM_HeadingToManual_Name{"VM_HeadingToManual"};
constexpr const char* VR_HeadingToRadialTermination_Name{"VR_HeadingToRadialTermination"};

} // namespace CivilPathTerminatorType_Names

bool CivilPathTerminatorType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CivilPathTerminatorType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CivilPathTerminatorType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::AF_ArcToFix_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseAF_ArcToFix().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::CA_CourseToAltitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseCA_CourseToAltitude().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::CD_CourseToDMEDistance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseCD_CourseToDMEDistance().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::CF_CourseToFix_Name) {
      CF_CourseToFixType::deserialize(valueType.second, accessor.chooseCF_CourseToFix(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::CI_CourseToIntercept_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseCI_CourseToIntercept().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::CR_CourseToRadial_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseCR_CourseToRadial().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::DF_DirectToFix_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseDF_DirectToFix().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::FA_TrackToAltitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseFA_TrackToAltitude().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::FC_TrackFromFixToDistanceAlongTrack_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseFC_TrackFromFixToDistanceAlongTrack().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::FD_TrackFromFixToDMEDistance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseFD_TrackFromFixToDMEDistance().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::FM_FixToManualTermination_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseFM_FixToManualTermination().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::HA_HoldingWithAltitudeTermination_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseHA_HoldingWithAltitudeTermination().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::HF_HoldingWithFixTermination_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseHF_HoldingWithFixTermination().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::HM_HoldingWithManualTermination_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseHM_HoldingWithManualTermination().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::IF_InitialFix_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseIF_InitialFix().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::PI_ProcedureTurnToIntercept_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.choosePI_ProcedureTurnToIntercept().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::RF_RadiusToFix_Name) {
      RF_RadiusToFixType::deserialize(valueType.second, accessor.chooseRF_RadiusToFix(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::TF_TrackToFix_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseTF_TrackToFix().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::VA_HeadingToAltitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseVA_HeadingToAltitude().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::VD_HeadingToDMEDistanceTermination_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseVD_HeadingToDMEDistanceTermination().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::VI_HeadingToIntercept_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseVI_HeadingToIntercept().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::VM_HeadingToManual_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseVM_HeadingToManual().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + CivilPathTerminatorType_Names::VR_HeadingToRadialTermination_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseVR_HeadingToRadialTermination().setStringValue(*value);
      }
    }
  }
  return true;
}

std::string CivilPathTerminatorType::serialize(const uci::type::CivilPathTerminatorType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? CivilPathTerminatorType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, CivilPathTerminatorType_Names::Extern_Type_Name);
  }
  if (accessor.isAF_ArcToFix()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getAF_ArcToFix(), node, CivilPathTerminatorType_Names::AF_ArcToFix_Name);
  } else if (accessor.isCA_CourseToAltitude()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getCA_CourseToAltitude(), node, CivilPathTerminatorType_Names::CA_CourseToAltitude_Name);
  } else if (accessor.isCD_CourseToDMEDistance()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getCD_CourseToDMEDistance(), node, CivilPathTerminatorType_Names::CD_CourseToDMEDistance_Name);
  } else if (accessor.isCF_CourseToFix()) {
    CF_CourseToFixType::serialize(accessor.getCF_CourseToFix(), node, CivilPathTerminatorType_Names::CF_CourseToFix_Name);
  } else if (accessor.isCI_CourseToIntercept()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getCI_CourseToIntercept(), node, CivilPathTerminatorType_Names::CI_CourseToIntercept_Name);
  } else if (accessor.isCR_CourseToRadial()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getCR_CourseToRadial(), node, CivilPathTerminatorType_Names::CR_CourseToRadial_Name);
  } else if (accessor.isDF_DirectToFix()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getDF_DirectToFix(), node, CivilPathTerminatorType_Names::DF_DirectToFix_Name);
  } else if (accessor.isFA_TrackToAltitude()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getFA_TrackToAltitude(), node, CivilPathTerminatorType_Names::FA_TrackToAltitude_Name);
  } else if (accessor.isFC_TrackFromFixToDistanceAlongTrack()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getFC_TrackFromFixToDistanceAlongTrack(), node, CivilPathTerminatorType_Names::FC_TrackFromFixToDistanceAlongTrack_Name);
  } else if (accessor.isFD_TrackFromFixToDMEDistance()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getFD_TrackFromFixToDMEDistance(), node, CivilPathTerminatorType_Names::FD_TrackFromFixToDMEDistance_Name);
  } else if (accessor.isFM_FixToManualTermination()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getFM_FixToManualTermination(), node, CivilPathTerminatorType_Names::FM_FixToManualTermination_Name);
  } else if (accessor.isHA_HoldingWithAltitudeTermination()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getHA_HoldingWithAltitudeTermination(), node, CivilPathTerminatorType_Names::HA_HoldingWithAltitudeTermination_Name);
  } else if (accessor.isHF_HoldingWithFixTermination()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getHF_HoldingWithFixTermination(), node, CivilPathTerminatorType_Names::HF_HoldingWithFixTermination_Name);
  } else if (accessor.isHM_HoldingWithManualTermination()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getHM_HoldingWithManualTermination(), node, CivilPathTerminatorType_Names::HM_HoldingWithManualTermination_Name);
  } else if (accessor.isIF_InitialFix()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getIF_InitialFix(), node, CivilPathTerminatorType_Names::IF_InitialFix_Name);
  } else if (accessor.isPI_ProcedureTurnToIntercept()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getPI_ProcedureTurnToIntercept(), node, CivilPathTerminatorType_Names::PI_ProcedureTurnToIntercept_Name);
  } else if (accessor.isRF_RadiusToFix()) {
    RF_RadiusToFixType::serialize(accessor.getRF_RadiusToFix(), node, CivilPathTerminatorType_Names::RF_RadiusToFix_Name);
  } else if (accessor.isTF_TrackToFix()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getTF_TrackToFix(), node, CivilPathTerminatorType_Names::TF_TrackToFix_Name);
  } else if (accessor.isVA_HeadingToAltitude()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getVA_HeadingToAltitude(), node, CivilPathTerminatorType_Names::VA_HeadingToAltitude_Name);
  } else if (accessor.isVD_HeadingToDMEDistanceTermination()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getVD_HeadingToDMEDistanceTermination(), node, CivilPathTerminatorType_Names::VD_HeadingToDMEDistanceTermination_Name);
  } else if (accessor.isVI_HeadingToIntercept()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getVI_HeadingToIntercept(), node, CivilPathTerminatorType_Names::VI_HeadingToIntercept_Name);
  } else if (accessor.isVM_HeadingToManual()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getVM_HeadingToManual(), node, CivilPathTerminatorType_Names::VM_HeadingToManual_Name);
  } else if (accessor.isVR_HeadingToRadialTermination()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getVR_HeadingToRadialTermination(), node, CivilPathTerminatorType_Names::VR_HeadingToRadialTermination_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

