/** @file OrderOfBattleEmitterType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/OrderOfBattleEmitterType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/EOB_EmitterID_Type.h"
#include "extjson_uci/type/EOB_EmitterIdentityType.h"
#include "extjson_uci/type/EOB_EmitterModeType.h"
#include "extjson_uci/type/OperationalScheduleType.h"
#include "extjson_uci/type/OrderOfBattleTimestampsType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/DerivedTypesSerializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/OrderOfBattleEmitterType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace OrderOfBattleEmitterType_Names {

constexpr const char* Extern_Type_Name{"OrderOfBattleEmitterType"};
constexpr const char* EmitterID_Name{"EmitterID"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* Timestamps_Name{"Timestamps"};
constexpr const char* LastCollector_Name{"LastCollector"};
constexpr const char* RecordOwner_Name{"RecordOwner"};
constexpr const char* RemarksText_Name{"RemarksText"};
constexpr const char* Mode_Name{"Mode"};
constexpr const char* OperationalSchedule_Name{"OperationalSchedule"};

} // namespace OrderOfBattleEmitterType_Names

bool OrderOfBattleEmitterType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrderOfBattleEmitterType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrderOfBattleEmitterType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + OrderOfBattleEmitterType_Names::EmitterID_Name) {
      EOB_EmitterID_Type::deserialize(valueType.second, accessor.getEmitterID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrderOfBattleEmitterType_Names::Identity_Name) {
      EOB_EmitterIdentityType::deserialize(valueType.second, accessor.enableIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrderOfBattleEmitterType_Names::Timestamps_Name) {
      OrderOfBattleTimestampsType::deserialize(valueType.second, accessor.enableTimestamps(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrderOfBattleEmitterType_Names::LastCollector_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLastCollector(*value);
      }
    } else if (valueType.first == nsPrefix + OrderOfBattleEmitterType_Names::RecordOwner_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRecordOwner(*value);
      }
    } else if (valueType.first == nsPrefix + OrderOfBattleEmitterType_Names::RemarksText_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRemarksText(*value);
      }
    } else if (valueType.first == nsPrefix + OrderOfBattleEmitterType_Names::Mode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderOfBattleEmitterType::Mode& boundedList = accessor.getMode();
        const uci::type::OrderOfBattleEmitterType::Mode::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        EOB_EmitterModeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderOfBattleEmitterType_Names::OperationalSchedule_Name) {
      OperationalScheduleType::deserialize(valueType.second, accessor.enableOperationalSchedule(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string OrderOfBattleEmitterType::serialize(const uci::type::OrderOfBattleEmitterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? OrderOfBattleEmitterType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::orderOfBattleEmitterType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extjson_uci::util::SerializationHelpers::addTypeAttribute(node, OrderOfBattleEmitterType_Names::Extern_Type_Name);
    }
    EOB_EmitterID_Type::serialize(accessor.getEmitterID(), node, OrderOfBattleEmitterType_Names::EmitterID_Name);
    if (accessor.hasIdentity()) {
      EOB_EmitterIdentityType::serialize(accessor.getIdentity(), node, OrderOfBattleEmitterType_Names::Identity_Name);
    }
    if (accessor.hasTimestamps()) {
      OrderOfBattleTimestampsType::serialize(accessor.getTimestamps(), node, OrderOfBattleEmitterType_Names::Timestamps_Name);
    }
    if (accessor.hasLastCollector()) {
      extjson_uci::util::SerializationHelpers::serializeString(accessor.getLastCollector(), node, OrderOfBattleEmitterType_Names::LastCollector_Name);
    }
    if (accessor.hasRecordOwner()) {
      extjson_uci::util::SerializationHelpers::serializeString(accessor.getRecordOwner(), node, OrderOfBattleEmitterType_Names::RecordOwner_Name);
    }
    if (accessor.hasRemarksText()) {
      extjson_uci::util::SerializationHelpers::serializeString(accessor.getRemarksText(), node, OrderOfBattleEmitterType_Names::RemarksText_Name);
    }
    {
      const uci::type::OrderOfBattleEmitterType::Mode& boundedList = accessor.getMode();
      for (uci::type::OrderOfBattleEmitterType::Mode::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        EOB_EmitterModeType::serialize(boundedList.at(i), node, OrderOfBattleEmitterType_Names::Mode_Name);
      }
    }
    if (accessor.hasOperationalSchedule()) {
      OperationalScheduleType::serialize(accessor.getOperationalSchedule(), node, OrderOfBattleEmitterType_Names::OperationalSchedule_Name);
    }
    if (createNode) {
      propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
    }
  } else {
    extjson_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

