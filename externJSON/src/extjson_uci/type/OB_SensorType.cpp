/** @file OB_SensorType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/OB_SensorType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/EntityEphemerisBasisChoiceType.h"
#include "extjson_uci/type/FieldOfRegardType.h"
#include "extjson_uci/type/KinematicsType.h"
#include "extjson_uci/type/OB_SensorID_Type.h"
#include "extjson_uci/type/OB_SensorIdentityType.h"
#include "extjson_uci/type/SensorFieldOfViewType.h"
#include "extjson_uci/type/VisualMagnitudeLimitsType.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/OB_SensorType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace OB_SensorType_Names {

constexpr const char* Extern_Type_Name{"OB_SensorType"};
constexpr const char* SensorID_Name{"SensorID"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* FieldOfRegard_Name{"FieldOfRegard"};
constexpr const char* FieldOfView_Name{"FieldOfView"};
constexpr const char* VisualMagnitudeLimits_Name{"VisualMagnitudeLimits"};
constexpr const char* PrimaryApertureDiameter_Name{"PrimaryApertureDiameter"};
constexpr const char* Resolution_Name{"Resolution"};
constexpr const char* Kinematics_Name{"Kinematics"};
constexpr const char* OrbitalKinematics_Name{"OrbitalKinematics"};

} // namespace OB_SensorType_Names

bool OB_SensorType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OB_SensorType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OB_SensorType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + OB_SensorType_Names::SensorID_Name) {
      OB_SensorID_Type::deserialize(valueType.second, accessor.getSensorID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::Identity_Name) {
      OB_SensorIdentityType::deserialize(valueType.second, accessor.enableIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::FieldOfRegard_Name) {
      FieldOfRegardType::deserialize(valueType.second, accessor.enableFieldOfRegard(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::FieldOfView_Name) {
      SensorFieldOfViewType::deserialize(valueType.second, accessor.enableFieldOfView(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::VisualMagnitudeLimits_Name) {
      VisualMagnitudeLimitsType::deserialize(valueType.second, accessor.enableVisualMagnitudeLimits(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::PrimaryApertureDiameter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPrimaryApertureDiameter(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::Resolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setResolution(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::Kinematics_Name) {
      KinematicsType::deserialize(valueType.second, accessor.enableKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OB_SensorType_Names::OrbitalKinematics_Name) {
      EntityEphemerisBasisChoiceType::deserialize(valueType.second, accessor.enableOrbitalKinematics(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string OB_SensorType::serialize(const uci::type::OB_SensorType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? OB_SensorType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, OB_SensorType_Names::Extern_Type_Name);
  }
  OB_SensorID_Type::serialize(accessor.getSensorID(), node, OB_SensorType_Names::SensorID_Name);
  if (accessor.hasIdentity()) {
    OB_SensorIdentityType::serialize(accessor.getIdentity(), node, OB_SensorType_Names::Identity_Name);
  }
  if (accessor.hasFieldOfRegard()) {
    FieldOfRegardType::serialize(accessor.getFieldOfRegard(), node, OB_SensorType_Names::FieldOfRegard_Name);
  }
  if (accessor.hasFieldOfView()) {
    SensorFieldOfViewType::serialize(accessor.getFieldOfView(), node, OB_SensorType_Names::FieldOfView_Name);
  }
  if (accessor.hasVisualMagnitudeLimits()) {
    VisualMagnitudeLimitsType::serialize(accessor.getVisualMagnitudeLimits(), node, OB_SensorType_Names::VisualMagnitudeLimits_Name);
  }
  if (accessor.hasPrimaryApertureDiameter()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getPrimaryApertureDiameter(), node, OB_SensorType_Names::PrimaryApertureDiameter_Name);
  }
  if (accessor.hasResolution()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getResolution(), node, OB_SensorType_Names::Resolution_Name);
  }
  if (accessor.hasKinematics()) {
    KinematicsType::serialize(accessor.getKinematics(), node, OB_SensorType_Names::Kinematics_Name);
  }
  if (accessor.hasOrbitalKinematics()) {
    EntityEphemerisBasisChoiceType::serialize(accessor.getOrbitalKinematics(), node, OB_SensorType_Names::OrbitalKinematics_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

