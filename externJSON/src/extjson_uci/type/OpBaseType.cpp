/** @file OpBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/OpBaseType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/CreationSourceEnum.h"
#include "extjson_uci/type/DataLinkIdentifierPET.h"
#include "extjson_uci/type/MissionTraceabilityType.h"
#include "extjson_uci/type/OpDescriptionType.h"
#include "extjson_uci/type/QualifyingTagsType.h"
#include "extjson_uci/type/ScheduleType.h"
#include "extjson_uci/type/SystemID_Type.h"
#include "extjson_uci/type/SystemScheduleStateType.h"
#include "extjson_uci/type/TimeFunctionType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/DerivedTypesSerializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/OpBaseType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace OpBaseType_Names {

constexpr const char* Extern_Type_Name{"OpBaseType"};
constexpr const char* OpDescription_Name{"OpDescription"};
constexpr const char* MissionTraceability_Name{"MissionTraceability"};
constexpr const char* Source_Name{"Source"};
constexpr const char* Schedule_Name{"Schedule"};
constexpr const char* AssociatedTime_Name{"AssociatedTime"};
constexpr const char* DataLinkIdentifier_Name{"DataLinkIdentifier"};
constexpr const char* Priority_Name{"Priority"};
constexpr const char* QualifyingTags_Name{"QualifyingTags"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* SystemScheduleOverride_Name{"SystemScheduleOverride"};

} // namespace OpBaseType_Names

bool OpBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + OpBaseType_Names::OpDescription_Name) {
      OpDescriptionType::deserialize(valueType.second, accessor.enableOpDescription(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpBaseType_Names::MissionTraceability_Name) {
      MissionTraceabilityType::deserialize(valueType.second, accessor.enableMissionTraceability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpBaseType_Names::Source_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OpBaseType_Names::Schedule_Name) {
      ScheduleType::deserialize(valueType.second, accessor.enableSchedule(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpBaseType_Names::AssociatedTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpBaseType::AssociatedTime& boundedList = accessor.getAssociatedTime();
        const uci::type::OpBaseType::AssociatedTime::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        TimeFunctionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OpBaseType_Names::DataLinkIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpBaseType::DataLinkIdentifier& boundedList = accessor.getDataLinkIdentifier();
        const uci::type::OpBaseType::DataLinkIdentifier::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OpBaseType_Names::Priority_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPriority(extjson_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + OpBaseType_Names::QualifyingTags_Name) {
      QualifyingTagsType::deserialize(valueType.second, accessor.enableQualifyingTags(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpBaseType_Names::SystemID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpBaseType::SystemID& boundedList = accessor.getSystemID();
        const uci::type::OpBaseType::SystemID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OpBaseType_Names::SystemScheduleOverride_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpBaseType::SystemScheduleOverride& boundedList = accessor.getSystemScheduleOverride();
        const uci::type::OpBaseType::SystemScheduleOverride::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SystemScheduleStateType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string OpBaseType::serialize(const uci::type::OpBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? OpBaseType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::opBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extjson_uci::util::SerializationHelpers::addTypeAttribute(node, OpBaseType_Names::Extern_Type_Name);
    }
    if (accessor.hasOpDescription()) {
      OpDescriptionType::serialize(accessor.getOpDescription(), node, OpBaseType_Names::OpDescription_Name);
    }
    if (accessor.hasMissionTraceability()) {
      MissionTraceabilityType::serialize(accessor.getMissionTraceability(), node, OpBaseType_Names::MissionTraceability_Name);
    }
    if (accessor.hasSource()) {
      CreationSourceEnum::serialize(accessor.getSource(), node, OpBaseType_Names::Source_Name, false);
    }
    if (accessor.hasSchedule()) {
      ScheduleType::serialize(accessor.getSchedule(), node, OpBaseType_Names::Schedule_Name);
    }
    {
      const uci::type::OpBaseType::AssociatedTime& boundedList = accessor.getAssociatedTime();
      for (uci::type::OpBaseType::AssociatedTime::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        TimeFunctionType::serialize(boundedList.at(i), node, OpBaseType_Names::AssociatedTime_Name);
      }
    }
    {
      const uci::type::OpBaseType::DataLinkIdentifier& boundedList = accessor.getDataLinkIdentifier();
      for (uci::type::OpBaseType::DataLinkIdentifier::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        DataLinkIdentifierPET::serialize(boundedList.at(i), node, OpBaseType_Names::DataLinkIdentifier_Name);
      }
    }
    if (accessor.hasPriority()) {
      extjson_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getPriority(), node, OpBaseType_Names::Priority_Name);
    }
    if (accessor.hasQualifyingTags()) {
      QualifyingTagsType::serialize(accessor.getQualifyingTags(), node, OpBaseType_Names::QualifyingTags_Name);
    }
    {
      const uci::type::OpBaseType::SystemID& boundedList = accessor.getSystemID();
      for (uci::type::OpBaseType::SystemID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SystemID_Type::serialize(boundedList.at(i), node, OpBaseType_Names::SystemID_Name);
      }
    }
    {
      const uci::type::OpBaseType::SystemScheduleOverride& boundedList = accessor.getSystemScheduleOverride();
      for (uci::type::OpBaseType::SystemScheduleOverride::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SystemScheduleStateType::serialize(boundedList.at(i), node, OpBaseType_Names::SystemScheduleOverride_Name);
      }
    }
    if (createNode) {
      propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
    }
  } else {
    extjson_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

