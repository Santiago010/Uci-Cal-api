/** @file CommTerminalCapabilityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/CommTerminalCapabilityCommandType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/CapabilityCommandFrequencyType.h"
#include "extjson_uci/type/CommConnectionCommandEnum.h"
#include "extjson_uci/type/CommControlType.h"
#include "extjson_uci/type/CommLinkPortMapType.h"
#include "extjson_uci/type/CommProfileID_Type.h"
#include "extjson_uci/type/CommWaveformCapabilityCommandPET.h"
#include "extjson_uci/type/DependentActivityType.h"
#include "extjson_uci/type/NetworkLinkID_Type.h"
#include "extjson_uci/type/ResourceSelectionType.h"
#include "extjson_uci/type/SharedRF_ApertureCapabilityCommandBaseType.h"
#include "extjson_uci/type/SubsystemID_Type.h"
#include "extjson_uci/type/VerboseStatusType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/CommTerminalCapabilityCommandType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace CommTerminalCapabilityCommandType_Names {

constexpr const char* Extern_Type_Name{"CommTerminalCapabilityCommandType"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* ResourceSelection_Name{"ResourceSelection"};
constexpr const char* DependentActivity_Name{"DependentActivity"};
constexpr const char* ConnectionRequest_Name{"ConnectionRequest"};
constexpr const char* CommonSettingsChange_Name{"CommonSettingsChange"};
constexpr const char* ActivateProfileID_Name{"ActivateProfileID"};
constexpr const char* LinkPortAssignments_Name{"LinkPortAssignments"};
constexpr const char* NetworkLinkID_Name{"NetworkLinkID"};
constexpr const char* VerboseStatus_Name{"VerboseStatus"};
constexpr const char* WaveformSpecificSettings_Name{"WaveformSpecificSettings"};
constexpr const char* Frequency_Name{"Frequency"};

} // namespace CommTerminalCapabilityCommandType_Names

bool CommTerminalCapabilityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommTerminalCapabilityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommTerminalCapabilityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.getSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::ResourceSelection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityCommandType::ResourceSelection& boundedList = accessor.getResourceSelection();
        const uci::type::CommTerminalCapabilityCommandType::ResourceSelection::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ResourceSelectionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::DependentActivity_Name) {
      DependentActivityType::deserialize(valueType.second, accessor.enableDependentActivity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::ConnectionRequest_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableConnectionRequest().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::CommonSettingsChange_Name) {
      CommControlType::deserialize(valueType.second, accessor.enableCommonSettingsChange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::ActivateProfileID_Name) {
      CommProfileID_Type::deserialize(valueType.second, accessor.enableActivateProfileID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::LinkPortAssignments_Name) {
      CommLinkPortMapType::deserialize(valueType.second, accessor.enableLinkPortAssignments(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::NetworkLinkID_Name) {
      NetworkLinkID_Type::deserialize(valueType.second, accessor.enableNetworkLinkID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::VerboseStatus_Name) {
      VerboseStatusType::deserialize(valueType.second, accessor.enableVerboseStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::WaveformSpecificSettings_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableWaveformSpecificSettings(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityCommandType_Names::Frequency_Name) {
      CapabilityCommandFrequencyType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    }
  }
  SharedRF_ApertureCapabilityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string CommTerminalCapabilityCommandType::serialize(const uci::type::CommTerminalCapabilityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? CommTerminalCapabilityCommandType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, CommTerminalCapabilityCommandType_Names::Extern_Type_Name);
  }
  SharedRF_ApertureCapabilityCommandBaseType::serialize(accessor, node, "", false, false, false);
  SubsystemID_Type::serialize(accessor.getSubsystemID(), node, CommTerminalCapabilityCommandType_Names::SubsystemID_Name);
  {
    const uci::type::CommTerminalCapabilityCommandType::ResourceSelection& boundedList = accessor.getResourceSelection();
    for (uci::type::CommTerminalCapabilityCommandType::ResourceSelection::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ResourceSelectionType::serialize(boundedList.at(i), node, CommTerminalCapabilityCommandType_Names::ResourceSelection_Name);
    }
  }
  if (accessor.hasDependentActivity()) {
    DependentActivityType::serialize(accessor.getDependentActivity(), node, CommTerminalCapabilityCommandType_Names::DependentActivity_Name);
  }
  if (accessor.hasConnectionRequest()) {
    CommConnectionCommandEnum::serialize(accessor.getConnectionRequest(), node, CommTerminalCapabilityCommandType_Names::ConnectionRequest_Name, false);
  }
  if (accessor.hasCommonSettingsChange()) {
    CommControlType::serialize(accessor.getCommonSettingsChange(), node, CommTerminalCapabilityCommandType_Names::CommonSettingsChange_Name);
  }
  if (accessor.hasActivateProfileID()) {
    CommProfileID_Type::serialize(accessor.getActivateProfileID(), node, CommTerminalCapabilityCommandType_Names::ActivateProfileID_Name);
  }
  if (accessor.hasLinkPortAssignments()) {
    CommLinkPortMapType::serialize(accessor.getLinkPortAssignments(), node, CommTerminalCapabilityCommandType_Names::LinkPortAssignments_Name);
  }
  if (accessor.hasNetworkLinkID()) {
    NetworkLinkID_Type::serialize(accessor.getNetworkLinkID(), node, CommTerminalCapabilityCommandType_Names::NetworkLinkID_Name);
  }
  if (accessor.hasVerboseStatus()) {
    VerboseStatusType::serialize(accessor.getVerboseStatus(), node, CommTerminalCapabilityCommandType_Names::VerboseStatus_Name);
  }
  if (accessor.hasWaveformSpecificSettings()) {
    CommWaveformCapabilityCommandPET::serialize(accessor.getWaveformSpecificSettings(), node, CommTerminalCapabilityCommandType_Names::WaveformSpecificSettings_Name);
  }
  if (accessor.hasFrequency()) {
    CapabilityCommandFrequencyType::serialize(accessor.getFrequency(), node, CommTerminalCapabilityCommandType_Names::Frequency_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

