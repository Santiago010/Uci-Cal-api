/** @file ComponentConfigurationPET.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/ComponentConfigurationPET.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/AboutType.h"
#include "extjson_uci/type/CapabilityCrossReferenceType.h"
#include "extjson_uci/type/ComponentConfigurationID_Type.h"
#include "extjson_uci/type/ComponentID_Type.h"
#include "extjson_uci/type/ComponentTypeEnum.h"
#include "extjson_uci/type/ForeignKeyType.h"
#include "extjson_uci/type/InstallationDetailsType.h"
#include "extjson_uci/type/ServiceID_Type.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/DerivedTypesSerializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/ComponentConfigurationPET.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace ComponentConfigurationPET_Names {

constexpr const char* Extern_Type_Name{"ComponentConfigurationPET"};
constexpr const char* ComponentConfigurationID_Name{"ComponentConfigurationID"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* About_Name{"About"};
constexpr const char* Mass_Name{"Mass"};
constexpr const char* CapabilityCrossReference_Name{"CapabilityCrossReference"};
constexpr const char* InstallationLocationKey_Name{"InstallationLocationKey"};
constexpr const char* InstallationDetails_Name{"InstallationDetails"};
constexpr const char* ComponentType_Name{"ComponentType"};
constexpr const char* ComponentCode_Name{"ComponentCode"};
constexpr const char* ServiceID_Name{"ServiceID"};

} // namespace ComponentConfigurationPET_Names

bool ComponentConfigurationPET::deserialize(const boost::property_tree::ptree& propTree, uci::type::ComponentConfigurationPET& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ComponentConfigurationPET_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + ComponentConfigurationPET_Names::ComponentConfigurationID_Name) {
      ComponentConfigurationID_Type::deserialize(valueType.second, accessor.getComponentConfigurationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentConfigurationPET_Names::ComponentID_Name) {
      ComponentID_Type::deserialize(valueType.second, accessor.getComponentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentConfigurationPET_Names::About_Name) {
      AboutType::deserialize(valueType.second, accessor.enableAbout(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentConfigurationPET_Names::Mass_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMass(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ComponentConfigurationPET_Names::CapabilityCrossReference_Name) {
      uci::type::ComponentConfigurationPET::CapabilityCrossReference& boundedList = accessor.getCapabilityCrossReference();
      const uci::type::ComponentConfigurationPET::CapabilityCrossReference::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      CapabilityCrossReferenceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentConfigurationPET_Names::InstallationLocationKey_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableInstallationLocationKey(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentConfigurationPET_Names::InstallationDetails_Name) {
      InstallationDetailsType::deserialize(valueType.second, accessor.enableInstallationDetails(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentConfigurationPET_Names::ComponentType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableComponentType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ComponentConfigurationPET_Names::ComponentCode_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableComponentCode(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentConfigurationPET_Names::ServiceID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ComponentConfigurationPET::ServiceID& boundedList = accessor.getServiceID();
        const uci::type::ComponentConfigurationPET::ServiceID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ServiceID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string ComponentConfigurationPET::serialize(const uci::type::ComponentConfigurationPET& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? ComponentConfigurationPET_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::componentConfigurationPET)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extjson_uci::util::SerializationHelpers::addTypeAttribute(node, ComponentConfigurationPET_Names::Extern_Type_Name);
    }
    ComponentConfigurationID_Type::serialize(accessor.getComponentConfigurationID(), node, ComponentConfigurationPET_Names::ComponentConfigurationID_Name);
    ComponentID_Type::serialize(accessor.getComponentID(), node, ComponentConfigurationPET_Names::ComponentID_Name);
    if (accessor.hasAbout()) {
      AboutType::serialize(accessor.getAbout(), node, ComponentConfigurationPET_Names::About_Name);
    }
    if (accessor.hasMass()) {
      extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getMass(), node, ComponentConfigurationPET_Names::Mass_Name);
    }
    {
      const uci::type::ComponentConfigurationPET::CapabilityCrossReference& boundedList = accessor.getCapabilityCrossReference();
      for (uci::type::ComponentConfigurationPET::CapabilityCrossReference::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        CapabilityCrossReferenceType::serialize(boundedList.at(i), node, ComponentConfigurationPET_Names::CapabilityCrossReference_Name);
      }
    }
    if (accessor.hasInstallationLocationKey()) {
      ForeignKeyType::serialize(accessor.getInstallationLocationKey(), node, ComponentConfigurationPET_Names::InstallationLocationKey_Name);
    }
    if (accessor.hasInstallationDetails()) {
      InstallationDetailsType::serialize(accessor.getInstallationDetails(), node, ComponentConfigurationPET_Names::InstallationDetails_Name);
    }
    if (accessor.hasComponentType()) {
      ComponentTypeEnum::serialize(accessor.getComponentType(), node, ComponentConfigurationPET_Names::ComponentType_Name, false);
    }
    if (accessor.hasComponentCode()) {
      ForeignKeyType::serialize(accessor.getComponentCode(), node, ComponentConfigurationPET_Names::ComponentCode_Name);
    }
    {
      const uci::type::ComponentConfigurationPET::ServiceID& boundedList = accessor.getServiceID();
      for (uci::type::ComponentConfigurationPET::ServiceID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        ServiceID_Type::serialize(boundedList.at(i), node, ComponentConfigurationPET_Names::ServiceID_Name);
      }
    }
    if (createNode) {
      propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
    }
  } else {
    extjson_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

