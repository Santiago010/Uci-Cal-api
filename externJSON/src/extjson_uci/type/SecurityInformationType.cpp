/** @file SecurityInformationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/SecurityInformationType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/AtomicEnergyMarkingsChoiceType.h"
#include "extjson_uci/type/ClassificationEnum.h"
#include "extjson_uci/type/DeclassExceptionEnum.h"
#include "extjson_uci/type/DisseminationControlsEnum.h"
#include "extjson_uci/type/FGI_SourceOpenChoiceType.h"
#include "extjson_uci/type/NonIC_MarkingsChoiceType.h"
#include "extjson_uci/type/NonUS_ControlsEnum.h"
#include "extjson_uci/type/OwnerProducerChoiceType.h"
#include "extjson_uci/type/ReleasableToChoiceType.h"
#include "extjson_uci/type/SCI_ControlsChoiceType.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/SecurityInformationType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SecurityInformationType_Names {

constexpr const char* Extern_Type_Name{"SecurityInformationType"};
constexpr const char* Classification_Name{"Classification"};
constexpr const char* OwnerProducer_Name{"OwnerProducer"};
constexpr const char* Joint_Name{"Joint"};
constexpr const char* SCI_Controls_Name{"SCI_Controls"};
constexpr const char* SAR_Identifier_Name{"SAR_Identifier"};
constexpr const char* AtomicEnergyMarkings_Name{"AtomicEnergyMarkings"};
constexpr const char* DisseminationControls_Name{"DisseminationControls"};
constexpr const char* DisplayOnlyTo_Name{"DisplayOnlyTo"};
constexpr const char* FGI_SourceOpen_Name{"FGI_SourceOpen"};
constexpr const char* ReleasableTo_Name{"ReleasableTo"};
constexpr const char* NonIC_Markings_Name{"NonIC_Markings"};
constexpr const char* ClassifiedBy_Name{"ClassifiedBy"};
constexpr const char* CompilationReason_Name{"CompilationReason"};
constexpr const char* DerivativelyClassifiedBy_Name{"DerivativelyClassifiedBy"};
constexpr const char* ClassificationReason_Name{"ClassificationReason"};
constexpr const char* NonUS_Controls_Name{"NonUS_Controls"};
constexpr const char* DerivedFrom_Name{"DerivedFrom"};
constexpr const char* DeclassDate_Name{"DeclassDate"};
constexpr const char* DeclassEvent_Name{"DeclassEvent"};
constexpr const char* DeclassException_Name{"DeclassException"};

} // namespace SecurityInformationType_Names

bool SecurityInformationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SecurityInformationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SecurityInformationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + SecurityInformationType_Names::Classification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getClassification().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::OwnerProducer_Name) {
      uci::type::SecurityInformationType::OwnerProducer& boundedList = accessor.getOwnerProducer();
      const uci::type::SecurityInformationType::OwnerProducer::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      OwnerProducerChoiceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::Joint_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setJoint(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::SCI_Controls_Name) {
      uci::type::SecurityInformationType::SCI_Controls& boundedList = accessor.getSCI_Controls();
      const uci::type::SecurityInformationType::SCI_Controls::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      SCI_ControlsChoiceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::SAR_Identifier_Name) {
      extjson_uci::util::SerializationHelpers::deserializeStringList(valueType.second, accessor.getSAR_Identifier());
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::AtomicEnergyMarkings_Name) {
      uci::type::SecurityInformationType::AtomicEnergyMarkings& boundedList = accessor.getAtomicEnergyMarkings();
      const uci::type::SecurityInformationType::AtomicEnergyMarkings::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      AtomicEnergyMarkingsChoiceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::DisseminationControls_Name) {
      DisseminationControlsEnum::deserializeList(valueType.second, accessor.getDisseminationControls());
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::DisplayOnlyTo_Name) {
      uci::type::SecurityInformationType::DisplayOnlyTo& boundedList = accessor.getDisplayOnlyTo();
      const uci::type::SecurityInformationType::DisplayOnlyTo::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      ReleasableToChoiceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::FGI_SourceOpen_Name) {
      uci::type::SecurityInformationType::FGI_SourceOpen& boundedList = accessor.getFGI_SourceOpen();
      const uci::type::SecurityInformationType::FGI_SourceOpen::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      FGI_SourceOpenChoiceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::ReleasableTo_Name) {
      uci::type::SecurityInformationType::ReleasableTo& boundedList = accessor.getReleasableTo();
      const uci::type::SecurityInformationType::ReleasableTo::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      ReleasableToChoiceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::NonIC_Markings_Name) {
      uci::type::SecurityInformationType::NonIC_Markings& boundedList = accessor.getNonIC_Markings();
      const uci::type::SecurityInformationType::NonIC_Markings::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      NonIC_MarkingsChoiceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::ClassifiedBy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setClassifiedBy(*value);
      }
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::CompilationReason_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCompilationReason(*value);
      }
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::DerivativelyClassifiedBy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDerivativelyClassifiedBy(*value);
      }
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::ClassificationReason_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setClassificationReason(*value);
      }
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::NonUS_Controls_Name) {
      NonUS_ControlsEnum::deserializeList(valueType.second, accessor.getNonUS_Controls());
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::DerivedFrom_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDerivedFrom(*value);
      }
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::DeclassDate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDeclassDate(extjson_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::DeclassEvent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDeclassEvent(*value);
      }
    } else if (valueType.first == nsPrefix + SecurityInformationType_Names::DeclassException_Name) {
      DeclassExceptionEnum::deserializeList(valueType.second, accessor.getDeclassException());
    }
  }
  return true;
}

std::string SecurityInformationType::serialize(const uci::type::SecurityInformationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SecurityInformationType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, SecurityInformationType_Names::Extern_Type_Name);
  }
  ClassificationEnum::serialize(accessor.getClassification(), node, SecurityInformationType_Names::Classification_Name, false);
  {
    const uci::type::SecurityInformationType::OwnerProducer& boundedList = accessor.getOwnerProducer();
    for (uci::type::SecurityInformationType::OwnerProducer::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OwnerProducerChoiceType::serialize(boundedList.at(i), node, SecurityInformationType_Names::OwnerProducer_Name);
    }
  }
  if (accessor.hasJoint()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getJoint(), node, SecurityInformationType_Names::Joint_Name);
  }
  {
    const uci::type::SecurityInformationType::SCI_Controls& boundedList = accessor.getSCI_Controls();
    for (uci::type::SecurityInformationType::SCI_Controls::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SCI_ControlsChoiceType::serialize(boundedList.at(i), node, SecurityInformationType_Names::SCI_Controls_Name);
    }
  }
  {
    extjson_uci::util::SerializationHelpers::serializeStringList(accessor.getSAR_Identifier(), node, SecurityInformationType_Names::SAR_Identifier_Name);
  }
  {
    const uci::type::SecurityInformationType::AtomicEnergyMarkings& boundedList = accessor.getAtomicEnergyMarkings();
    for (uci::type::SecurityInformationType::AtomicEnergyMarkings::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      AtomicEnergyMarkingsChoiceType::serialize(boundedList.at(i), node, SecurityInformationType_Names::AtomicEnergyMarkings_Name);
    }
  }
  {
    DisseminationControlsEnum::serializeList(accessor.getDisseminationControls(), node, SecurityInformationType_Names::DisseminationControls_Name);
  }
  {
    const uci::type::SecurityInformationType::DisplayOnlyTo& boundedList = accessor.getDisplayOnlyTo();
    for (uci::type::SecurityInformationType::DisplayOnlyTo::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ReleasableToChoiceType::serialize(boundedList.at(i), node, SecurityInformationType_Names::DisplayOnlyTo_Name);
    }
  }
  {
    const uci::type::SecurityInformationType::FGI_SourceOpen& boundedList = accessor.getFGI_SourceOpen();
    for (uci::type::SecurityInformationType::FGI_SourceOpen::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FGI_SourceOpenChoiceType::serialize(boundedList.at(i), node, SecurityInformationType_Names::FGI_SourceOpen_Name);
    }
  }
  {
    const uci::type::SecurityInformationType::ReleasableTo& boundedList = accessor.getReleasableTo();
    for (uci::type::SecurityInformationType::ReleasableTo::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ReleasableToChoiceType::serialize(boundedList.at(i), node, SecurityInformationType_Names::ReleasableTo_Name);
    }
  }
  {
    const uci::type::SecurityInformationType::NonIC_Markings& boundedList = accessor.getNonIC_Markings();
    for (uci::type::SecurityInformationType::NonIC_Markings::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      NonIC_MarkingsChoiceType::serialize(boundedList.at(i), node, SecurityInformationType_Names::NonIC_Markings_Name);
    }
  }
  if (accessor.hasClassifiedBy()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getClassifiedBy(), node, SecurityInformationType_Names::ClassifiedBy_Name);
  }
  if (accessor.hasCompilationReason()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getCompilationReason(), node, SecurityInformationType_Names::CompilationReason_Name);
  }
  if (accessor.hasDerivativelyClassifiedBy()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getDerivativelyClassifiedBy(), node, SecurityInformationType_Names::DerivativelyClassifiedBy_Name);
  }
  if (accessor.hasClassificationReason()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getClassificationReason(), node, SecurityInformationType_Names::ClassificationReason_Name);
  }
  {
    NonUS_ControlsEnum::serializeList(accessor.getNonUS_Controls(), node, SecurityInformationType_Names::NonUS_Controls_Name);
  }
  if (accessor.hasDerivedFrom()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getDerivedFrom(), node, SecurityInformationType_Names::DerivedFrom_Name);
  }
  if (accessor.hasDeclassDate()) {
    extjson_uci::util::SerializationHelpers::serializeDateTime(accessor.getDeclassDate(), node, SecurityInformationType_Names::DeclassDate_Name);
  }
  if (accessor.hasDeclassEvent()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getDeclassEvent(), node, SecurityInformationType_Names::DeclassEvent_Name);
  }
  {
    DeclassExceptionEnum::serializeList(accessor.getDeclassException(), node, SecurityInformationType_Names::DeclassException_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

