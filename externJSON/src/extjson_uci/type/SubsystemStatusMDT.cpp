/** @file SubsystemStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/SubsystemStatusMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/AboutType.h"
#include "extjson_uci/type/ComponentType.h"
#include "extjson_uci/type/ProcessingStatusEnum.h"
#include "extjson_uci/type/StateTransitionStatusEnum.h"
#include "extjson_uci/type/SubsystemEnabledSettingType.h"
#include "extjson_uci/type/SubsystemExtendedStatusPET.h"
#include "extjson_uci/type/SubsystemID_Type.h"
#include "extjson_uci/type/SubsystemStateEnum.h"
#include "extjson_uci/type/SubsystemSupportedSettingType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/SubsystemStatusMDT.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SubsystemStatusMDT_Names {

constexpr const char* Extern_Type_Name{"SubsystemStatusMDT"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* SubsystemState_Name{"SubsystemState"};
constexpr const char* SubsystemStateDescription_Name{"SubsystemStateDescription"};
constexpr const char* EnabledSetting_Name{"EnabledSetting"};
constexpr const char* CommandableSubsystemSettingParameters_Name{"CommandableSubsystemSettingParameters"};
constexpr const char* EraseStatus_Name{"EraseStatus"};
constexpr const char* StateTransitionStatus_Name{"StateTransitionStatus"};
constexpr const char* CommandableSubsystemState_Name{"CommandableSubsystemState"};
constexpr const char* About_Name{"About"};
constexpr const char* ExtendedStatus_Name{"ExtendedStatus"};
constexpr const char* SubsystemComponent_Name{"SubsystemComponent"};

} // namespace SubsystemStatusMDT_Names

bool SubsystemStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::SubsystemStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SubsystemStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.getSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::SubsystemState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSubsystemState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::SubsystemStateDescription_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSubsystemStateDescription(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::EnabledSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemStatusMDT::EnabledSetting& boundedList = accessor.getEnabledSetting();
        const uci::type::SubsystemStatusMDT::EnabledSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SubsystemEnabledSettingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::CommandableSubsystemSettingParameters_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters& boundedList = accessor.getCommandableSubsystemSettingParameters();
        const uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SubsystemSupportedSettingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::EraseStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEraseStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::StateTransitionStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableStateTransitionStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::CommandableSubsystemState_Name) {
      SubsystemStateEnum::deserializeList(valueType.second, accessor.getCommandableSubsystemState());
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::About_Name) {
      AboutType::deserialize(valueType.second, accessor.getAbout(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::ExtendedStatus_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableExtendedStatus(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SubsystemStatusMDT_Names::SubsystemComponent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SubsystemStatusMDT::SubsystemComponent& boundedList = accessor.getSubsystemComponent();
        const uci::type::SubsystemStatusMDT::SubsystemComponent::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ComponentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string SubsystemStatusMDT::serialize(const uci::type::SubsystemStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SubsystemStatusMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, SubsystemStatusMDT_Names::Extern_Type_Name);
  }
  SubsystemID_Type::serialize(accessor.getSubsystemID(), node, SubsystemStatusMDT_Names::SubsystemID_Name);
  SubsystemStateEnum::serialize(accessor.getSubsystemState(), node, SubsystemStatusMDT_Names::SubsystemState_Name, false);
  if (accessor.hasSubsystemStateDescription()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getSubsystemStateDescription(), node, SubsystemStatusMDT_Names::SubsystemStateDescription_Name);
  }
  {
    const uci::type::SubsystemStatusMDT::EnabledSetting& boundedList = accessor.getEnabledSetting();
    for (uci::type::SubsystemStatusMDT::EnabledSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SubsystemEnabledSettingType::serialize(boundedList.at(i), node, SubsystemStatusMDT_Names::EnabledSetting_Name);
    }
  }
  {
    const uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters& boundedList = accessor.getCommandableSubsystemSettingParameters();
    for (uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SubsystemSupportedSettingType::serialize(boundedList.at(i), node, SubsystemStatusMDT_Names::CommandableSubsystemSettingParameters_Name);
    }
  }
  if (accessor.hasEraseStatus()) {
    ProcessingStatusEnum::serialize(accessor.getEraseStatus(), node, SubsystemStatusMDT_Names::EraseStatus_Name, false);
  }
  if (accessor.hasStateTransitionStatus()) {
    StateTransitionStatusEnum::serialize(accessor.getStateTransitionStatus(), node, SubsystemStatusMDT_Names::StateTransitionStatus_Name, false);
  }
  {
    SubsystemStateEnum::serializeList(accessor.getCommandableSubsystemState(), node, SubsystemStatusMDT_Names::CommandableSubsystemState_Name);
  }
  AboutType::serialize(accessor.getAbout(), node, SubsystemStatusMDT_Names::About_Name);
  if (accessor.hasExtendedStatus()) {
    SubsystemExtendedStatusPET::serialize(accessor.getExtendedStatus(), node, SubsystemStatusMDT_Names::ExtendedStatus_Name);
  }
  {
    const uci::type::SubsystemStatusMDT::SubsystemComponent& boundedList = accessor.getSubsystemComponent();
    for (uci::type::SubsystemStatusMDT::SubsystemComponent::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ComponentType::serialize(boundedList.at(i), node, SubsystemStatusMDT_Names::SubsystemComponent_Name);
    }
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

