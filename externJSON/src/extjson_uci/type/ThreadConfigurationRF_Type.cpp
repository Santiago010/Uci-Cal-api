/** @file ThreadConfigurationRF_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/ThreadConfigurationRF_Type.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/AntennaResourceID_Type.h"
#include "extjson_uci/type/BeamPointingReferenceType.h"
#include "extjson_uci/type/BeamPowerModeEnum.h"
#include "extjson_uci/type/BeamShapingType.h"
#include "extjson_uci/type/FrequencyRangeType.h"
#include "extjson_uci/type/PolarizationControlType.h"
#include "extjson_uci/type/RF_TypeEnum.h"
#include "extjson_uci/type/SupportCapabilityID_Type.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/ThreadConfigurationRF_Type.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace ThreadConfigurationRF_Type_Names {

constexpr const char* Extern_Type_Name{"ThreadConfigurationRF_Type"};
constexpr const char* BeamConfigurationIndex_Name{"BeamConfigurationIndex"};
constexpr const char* SupportCapabilityID_Name{"SupportCapabilityID"};
constexpr const char* AntennaResourceInstanceID_Name{"AntennaResourceInstanceID"};
constexpr const char* RF_Mode_Name{"RF_Mode"};
constexpr const char* BeamPowerMode_Name{"BeamPowerMode"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* BeamPointingReference_Name{"BeamPointingReference"};
constexpr const char* Polarization_Name{"Polarization"};
constexpr const char* AntennaAttenuation_Name{"AntennaAttenuation"};
constexpr const char* AntennaPriority_Name{"AntennaPriority"};
constexpr const char* BeamShaping_Name{"BeamShaping"};

} // namespace ThreadConfigurationRF_Type_Names

bool ThreadConfigurationRF_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::ThreadConfigurationRF_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ThreadConfigurationRF_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::BeamConfigurationIndex_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBeamConfigurationIndex(extjson_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::SupportCapabilityID_Name) {
      SupportCapabilityID_Type::deserialize(valueType.second, accessor.getSupportCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::AntennaResourceInstanceID_Name) {
      AntennaResourceID_Type::deserialize(valueType.second, accessor.getAntennaResourceInstanceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::RF_Mode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getRF_Mode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::BeamPowerMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableBeamPowerMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::Frequency_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::BeamPointingReference_Name) {
      BeamPointingReferenceType::deserialize(valueType.second, accessor.enableBeamPointingReference(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::Polarization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ThreadConfigurationRF_Type::Polarization& boundedList = accessor.getPolarization();
        const uci::type::ThreadConfigurationRF_Type::Polarization::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PolarizationControlType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::AntennaAttenuation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAntennaAttenuation(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::AntennaPriority_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAntennaPriority(extjson_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ThreadConfigurationRF_Type_Names::BeamShaping_Name) {
      BeamShapingType::deserialize(valueType.second, accessor.enableBeamShaping(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string ThreadConfigurationRF_Type::serialize(const uci::type::ThreadConfigurationRF_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? ThreadConfigurationRF_Type_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, ThreadConfigurationRF_Type_Names::Extern_Type_Name);
  }
  extjson_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getBeamConfigurationIndex(), node, ThreadConfigurationRF_Type_Names::BeamConfigurationIndex_Name);
  SupportCapabilityID_Type::serialize(accessor.getSupportCapabilityID(), node, ThreadConfigurationRF_Type_Names::SupportCapabilityID_Name);
  AntennaResourceID_Type::serialize(accessor.getAntennaResourceInstanceID(), node, ThreadConfigurationRF_Type_Names::AntennaResourceInstanceID_Name);
  RF_TypeEnum::serialize(accessor.getRF_Mode(), node, ThreadConfigurationRF_Type_Names::RF_Mode_Name, false);
  if (accessor.hasBeamPowerMode()) {
    BeamPowerModeEnum::serialize(accessor.getBeamPowerMode(), node, ThreadConfigurationRF_Type_Names::BeamPowerMode_Name, false);
  }
  if (accessor.hasFrequency()) {
    FrequencyRangeType::serialize(accessor.getFrequency(), node, ThreadConfigurationRF_Type_Names::Frequency_Name);
  }
  if (accessor.hasBeamPointingReference()) {
    BeamPointingReferenceType::serialize(accessor.getBeamPointingReference(), node, ThreadConfigurationRF_Type_Names::BeamPointingReference_Name);
  }
  {
    const uci::type::ThreadConfigurationRF_Type::Polarization& boundedList = accessor.getPolarization();
    for (uci::type::ThreadConfigurationRF_Type::Polarization::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PolarizationControlType::serialize(boundedList.at(i), node, ThreadConfigurationRF_Type_Names::Polarization_Name);
    }
  }
  if (accessor.hasAntennaAttenuation()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getAntennaAttenuation(), node, ThreadConfigurationRF_Type_Names::AntennaAttenuation_Name);
  }
  if (accessor.hasAntennaPriority()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAntennaPriority(), node, ThreadConfigurationRF_Type_Names::AntennaPriority_Name);
  }
  if (accessor.hasBeamShaping()) {
    BeamShapingType::serialize(accessor.getBeamShaping(), node, ThreadConfigurationRF_Type_Names::BeamShaping_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

