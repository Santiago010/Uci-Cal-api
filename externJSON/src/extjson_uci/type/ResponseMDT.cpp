/** @file ResponseMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/ResponseMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/RequirementConstraintsType.h"
#include "extjson_uci/type/RequirementGuidanceType.h"
#include "extjson_uci/type/RequirementMetadataType.h"
#include "extjson_uci/type/RequirementsTemplateType.h"
#include "extjson_uci/type/ResponseID_Type.h"
#include "extjson_uci/type/ResponseOptionDetailsType.h"
#include "extjson_uci/type/ResponseTypeEnum.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/ResponseMDT.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace ResponseMDT_Names {

constexpr const char* Extern_Type_Name{"ResponseMDT"};
constexpr const char* ResponseID_Name{"ResponseID"};
constexpr const char* ResponseType_Name{"ResponseType"};
constexpr const char* ResponseManagementConstraints_Name{"ResponseManagementConstraints"};
constexpr const char* ResponseManagementGuidance_Name{"ResponseManagementGuidance"};
constexpr const char* Option_Name{"Option"};
constexpr const char* RequirementsTemplate_Name{"RequirementsTemplate"};
constexpr const char* Metadata_Name{"Metadata"};

} // namespace ResponseMDT_Names

bool ResponseMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ResponseMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ResponseMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + ResponseMDT_Names::ResponseID_Name) {
      ResponseID_Type::deserialize(valueType.second, accessor.getResponseID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseMDT_Names::ResponseType_Name) {
      ResponseTypeEnum::deserializeList(valueType.second, accessor.getResponseType());
    } else if (valueType.first == nsPrefix + ResponseMDT_Names::ResponseManagementConstraints_Name) {
      RequirementConstraintsType::deserialize(valueType.second, accessor.enableResponseManagementConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseMDT_Names::ResponseManagementGuidance_Name) {
      RequirementGuidanceType::deserialize(valueType.second, accessor.enableResponseManagementGuidance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ResponseMDT_Names::Option_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResponseMDT::Option& boundedList = accessor.getOption();
        const uci::type::ResponseMDT::Option::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ResponseOptionDetailsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ResponseMDT_Names::RequirementsTemplate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ResponseMDT::RequirementsTemplate& boundedList = accessor.getRequirementsTemplate();
        const uci::type::ResponseMDT::RequirementsTemplate::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        RequirementsTemplateType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ResponseMDT_Names::Metadata_Name) {
      RequirementMetadataType::deserialize(valueType.second, accessor.enableMetadata(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string ResponseMDT::serialize(const uci::type::ResponseMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? ResponseMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, ResponseMDT_Names::Extern_Type_Name);
  }
  ResponseID_Type::serialize(accessor.getResponseID(), node, ResponseMDT_Names::ResponseID_Name);
  {
    ResponseTypeEnum::serializeList(accessor.getResponseType(), node, ResponseMDT_Names::ResponseType_Name);
  }
  if (accessor.hasResponseManagementConstraints()) {
    RequirementConstraintsType::serialize(accessor.getResponseManagementConstraints(), node, ResponseMDT_Names::ResponseManagementConstraints_Name);
  }
  if (accessor.hasResponseManagementGuidance()) {
    RequirementGuidanceType::serialize(accessor.getResponseManagementGuidance(), node, ResponseMDT_Names::ResponseManagementGuidance_Name);
  }
  {
    const uci::type::ResponseMDT::Option& boundedList = accessor.getOption();
    for (uci::type::ResponseMDT::Option::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ResponseOptionDetailsType::serialize(boundedList.at(i), node, ResponseMDT_Names::Option_Name);
    }
  }
  {
    const uci::type::ResponseMDT::RequirementsTemplate& boundedList = accessor.getRequirementsTemplate();
    for (uci::type::ResponseMDT::RequirementsTemplate::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      RequirementsTemplateType::serialize(boundedList.at(i), node, ResponseMDT_Names::RequirementsTemplate_Name);
    }
  }
  if (accessor.hasMetadata()) {
    RequirementMetadataType::serialize(accessor.getMetadata(), node, ResponseMDT_Names::Metadata_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

