/** @file CharacterizationChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/CharacterizationChoiceType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ColorPhotometryParamsType.h"
#include "extjson_uci/type/FrequencyParamsType.h"
#include "extjson_uci/type/IR_ImageParamsType.h"
#include "extjson_uci/type/MetricParamsType.h"
#include "extjson_uci/type/Narrowband_SOI_ParamsType.h"
#include "extjson_uci/type/OpticalImageParamsType.h"
#include "extjson_uci/type/PhotometryParamsType.h"
#include "extjson_uci/type/RCS_ParamsType.h"
#include "extjson_uci/type/VisMagParamsType.h"
#include "extjson_uci/type/Wideband_SOI_ParamsType.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/CharacterizationChoiceType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace CharacterizationChoiceType_Names {

constexpr const char* Extern_Type_Name{"CharacterizationChoiceType"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* IR_Image_Name{"IR_Image"};
constexpr const char* MetricObservations_Name{"MetricObservations"};
constexpr const char* Narrowband_SOI_Name{"Narrowband_SOI"};
constexpr const char* OpticalImage_Name{"OpticalImage"};
constexpr const char* RCS_Name{"RCS"};
constexpr const char* VisMag_Name{"VisMag"};
constexpr const char* Wideband_SOI_Name{"Wideband_SOI"};
constexpr const char* Photometry_Name{"Photometry"};
constexpr const char* ColorPhotometry_Name{"ColorPhotometry"};

} // namespace CharacterizationChoiceType_Names

bool CharacterizationChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CharacterizationChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CharacterizationChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + CharacterizationChoiceType_Names::Frequency_Name) {
      FrequencyParamsType::deserialize(valueType.second, accessor.chooseFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CharacterizationChoiceType_Names::IR_Image_Name) {
      IR_ImageParamsType::deserialize(valueType.second, accessor.chooseIR_Image(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CharacterizationChoiceType_Names::MetricObservations_Name) {
      MetricParamsType::deserialize(valueType.second, accessor.chooseMetricObservations(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CharacterizationChoiceType_Names::Narrowband_SOI_Name) {
      Narrowband_SOI_ParamsType::deserialize(valueType.second, accessor.chooseNarrowband_SOI(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CharacterizationChoiceType_Names::OpticalImage_Name) {
      OpticalImageParamsType::deserialize(valueType.second, accessor.chooseOpticalImage(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CharacterizationChoiceType_Names::RCS_Name) {
      RCS_ParamsType::deserialize(valueType.second, accessor.chooseRCS(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CharacterizationChoiceType_Names::VisMag_Name) {
      VisMagParamsType::deserialize(valueType.second, accessor.chooseVisMag(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CharacterizationChoiceType_Names::Wideband_SOI_Name) {
      Wideband_SOI_ParamsType::deserialize(valueType.second, accessor.chooseWideband_SOI(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CharacterizationChoiceType_Names::Photometry_Name) {
      PhotometryParamsType::deserialize(valueType.second, accessor.choosePhotometry(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CharacterizationChoiceType_Names::ColorPhotometry_Name) {
      ColorPhotometryParamsType::deserialize(valueType.second, accessor.chooseColorPhotometry(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string CharacterizationChoiceType::serialize(const uci::type::CharacterizationChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? CharacterizationChoiceType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, CharacterizationChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isFrequency()) {
    FrequencyParamsType::serialize(accessor.getFrequency(), node, CharacterizationChoiceType_Names::Frequency_Name);
  } else if (accessor.isIR_Image()) {
    IR_ImageParamsType::serialize(accessor.getIR_Image(), node, CharacterizationChoiceType_Names::IR_Image_Name);
  } else if (accessor.isMetricObservations()) {
    MetricParamsType::serialize(accessor.getMetricObservations(), node, CharacterizationChoiceType_Names::MetricObservations_Name);
  } else if (accessor.isNarrowband_SOI()) {
    Narrowband_SOI_ParamsType::serialize(accessor.getNarrowband_SOI(), node, CharacterizationChoiceType_Names::Narrowband_SOI_Name);
  } else if (accessor.isOpticalImage()) {
    OpticalImageParamsType::serialize(accessor.getOpticalImage(), node, CharacterizationChoiceType_Names::OpticalImage_Name);
  } else if (accessor.isRCS()) {
    RCS_ParamsType::serialize(accessor.getRCS(), node, CharacterizationChoiceType_Names::RCS_Name);
  } else if (accessor.isVisMag()) {
    VisMagParamsType::serialize(accessor.getVisMag(), node, CharacterizationChoiceType_Names::VisMag_Name);
  } else if (accessor.isWideband_SOI()) {
    Wideband_SOI_ParamsType::serialize(accessor.getWideband_SOI(), node, CharacterizationChoiceType_Names::Wideband_SOI_Name);
  } else if (accessor.isPhotometry()) {
    PhotometryParamsType::serialize(accessor.getPhotometry(), node, CharacterizationChoiceType_Names::Photometry_Name);
  } else if (accessor.isColorPhotometry()) {
    ColorPhotometryParamsType::serialize(accessor.getColorPhotometry(), node, CharacterizationChoiceType_Names::ColorPhotometry_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

