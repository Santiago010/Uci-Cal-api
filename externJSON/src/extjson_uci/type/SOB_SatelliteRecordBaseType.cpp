/** @file SOB_SatelliteRecordBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/SOB_SatelliteRecordBaseType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/EOB_RecordID_Type.h"
#include "extjson_uci/type/FileMetadataID_Type.h"
#include "extjson_uci/type/LaunchObservationID_Type.h"
#include "extjson_uci/type/LaunchStaticDetailsType.h"
#include "extjson_uci/type/OB_OperationalStatusEnum.h"
#include "extjson_uci/type/OrbitKinematicsParametersType.h"
#include "extjson_uci/type/OrbitRegimeType.h"
#include "extjson_uci/type/OrderOfBattleEmitterType.h"
#include "extjson_uci/type/OrderOfBattleTimestampsType.h"
#include "extjson_uci/type/ProductMetadataID_Type.h"
#include "extjson_uci/type/SOB_EquipmentType.h"
#include "extjson_uci/type/SOB_SatelliteRecordID_Type.h"
#include "extjson_uci/type/SOB_SatelliteRecordRemoveInfoType.h"
#include "extjson_uci/type/SatelliteCharacteristicsOverrideType.h"
#include "extjson_uci/type/SatelliteEnduranceType.h"
#include "extjson_uci/type/SatelliteIdentityType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/DerivedTypesSerializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/SOB_SatelliteRecordBaseType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SOB_SatelliteRecordBaseType_Names {

constexpr const char* Extern_Type_Name{"SOB_SatelliteRecordBaseType"};
constexpr const char* SOB_SatelliteRecordID_Name{"SOB_SatelliteRecordID"};
constexpr const char* EOB_RecordID_Name{"EOB_RecordID"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* Equipment_Name{"Equipment"};
constexpr const char* Orbit_Name{"Orbit"};
constexpr const char* Timestamps_Name{"Timestamps"};
constexpr const char* DecayDate_Name{"DecayDate"};
constexpr const char* RelatedLaunchObservationID_Name{"RelatedLaunchObservationID"};
constexpr const char* HistoricalLaunchData_Name{"HistoricalLaunchData"};
constexpr const char* OperationalStatus_Name{"OperationalStatus"};
constexpr const char* Kinematics_Name{"Kinematics"};
constexpr const char* Mass_Name{"Mass"};
constexpr const char* Endurance_Name{"Endurance"};
constexpr const char* RelatedSatelliteRecordID_Name{"RelatedSatelliteRecordID"};
constexpr const char* PatternOfLife_Name{"PatternOfLife"};
constexpr const char* ProductID_Name{"ProductID"};
constexpr const char* FileID_Name{"FileID"};
constexpr const char* Characteristics_Name{"Characteristics"};
constexpr const char* RemoveInfo_Name{"RemoveInfo"};
constexpr const char* Emitter_Name{"Emitter"};
constexpr const char* RemarksText_Name{"RemarksText"};

} // namespace SOB_SatelliteRecordBaseType_Names

bool SOB_SatelliteRecordBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SOB_SatelliteRecordBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SOB_SatelliteRecordBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::SOB_SatelliteRecordID_Name) {
      SOB_SatelliteRecordID_Type::deserialize(valueType.second, accessor.getSOB_SatelliteRecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::EOB_RecordID_Name) {
      EOB_RecordID_Type::deserialize(valueType.second, accessor.enableEOB_RecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Identity_Name) {
      SatelliteIdentityType::deserialize(valueType.second, accessor.enableIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Equipment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_SatelliteRecordBaseType::Equipment& boundedList = accessor.getEquipment();
        const uci::type::SOB_SatelliteRecordBaseType::Equipment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SOB_EquipmentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Orbit_Name) {
      OrbitRegimeType::deserialize(valueType.second, accessor.enableOrbit(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Timestamps_Name) {
      OrderOfBattleTimestampsType::deserialize(valueType.second, accessor.enableTimestamps(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::DecayDate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDecayDate(extjson_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::RelatedLaunchObservationID_Name) {
      LaunchObservationID_Type::deserialize(valueType.second, accessor.enableRelatedLaunchObservationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::HistoricalLaunchData_Name) {
      LaunchStaticDetailsType::deserialize(valueType.second, accessor.enableHistoricalLaunchData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::OperationalStatus_Name) {
      OB_OperationalStatusEnum::deserializeList(valueType.second, accessor.getOperationalStatus());
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Kinematics_Name) {
      OrbitKinematicsParametersType::deserialize(valueType.second, accessor.enableKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Mass_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMass(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Endurance_Name) {
      SatelliteEnduranceType::deserialize(valueType.second, accessor.enableEndurance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::RelatedSatelliteRecordID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID& boundedList = accessor.getRelatedSatelliteRecordID();
        const uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SOB_SatelliteRecordID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::PatternOfLife_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPatternOfLife(*value);
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::ProductID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_SatelliteRecordBaseType::ProductID& boundedList = accessor.getProductID();
        const uci::type::SOB_SatelliteRecordBaseType::ProductID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ProductMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::FileID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_SatelliteRecordBaseType::FileID& boundedList = accessor.getFileID();
        const uci::type::SOB_SatelliteRecordBaseType::FileID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Characteristics_Name) {
      SatelliteCharacteristicsOverrideType::deserialize(valueType.second, accessor.enableCharacteristics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::RemoveInfo_Name) {
      SOB_SatelliteRecordRemoveInfoType::deserialize(valueType.second, accessor.enableRemoveInfo(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::Emitter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SOB_SatelliteRecordBaseType::Emitter& boundedList = accessor.getEmitter();
        const uci::type::SOB_SatelliteRecordBaseType::Emitter::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SOB_SatelliteRecordBaseType_Names::RemarksText_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRemarksText(*value);
      }
    }
  }
  return true;
}

std::string SOB_SatelliteRecordBaseType::serialize(const uci::type::SOB_SatelliteRecordBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SOB_SatelliteRecordBaseType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::sOB_SatelliteRecordBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extjson_uci::util::SerializationHelpers::addTypeAttribute(node, SOB_SatelliteRecordBaseType_Names::Extern_Type_Name);
    }
    SOB_SatelliteRecordID_Type::serialize(accessor.getSOB_SatelliteRecordID(), node, SOB_SatelliteRecordBaseType_Names::SOB_SatelliteRecordID_Name);
    if (accessor.hasEOB_RecordID()) {
      EOB_RecordID_Type::serialize(accessor.getEOB_RecordID(), node, SOB_SatelliteRecordBaseType_Names::EOB_RecordID_Name);
    }
    if (accessor.hasIdentity()) {
      SatelliteIdentityType::serialize(accessor.getIdentity(), node, SOB_SatelliteRecordBaseType_Names::Identity_Name);
    }
    {
      const uci::type::SOB_SatelliteRecordBaseType::Equipment& boundedList = accessor.getEquipment();
      for (uci::type::SOB_SatelliteRecordBaseType::Equipment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SOB_EquipmentType::serialize(boundedList.at(i), node, SOB_SatelliteRecordBaseType_Names::Equipment_Name);
      }
    }
    if (accessor.hasOrbit()) {
      OrbitRegimeType::serialize(accessor.getOrbit(), node, SOB_SatelliteRecordBaseType_Names::Orbit_Name);
    }
    if (accessor.hasTimestamps()) {
      OrderOfBattleTimestampsType::serialize(accessor.getTimestamps(), node, SOB_SatelliteRecordBaseType_Names::Timestamps_Name);
    }
    if (accessor.hasDecayDate()) {
      extjson_uci::util::SerializationHelpers::serializeDateTime(accessor.getDecayDate(), node, SOB_SatelliteRecordBaseType_Names::DecayDate_Name);
    }
    if (accessor.hasRelatedLaunchObservationID()) {
      LaunchObservationID_Type::serialize(accessor.getRelatedLaunchObservationID(), node, SOB_SatelliteRecordBaseType_Names::RelatedLaunchObservationID_Name);
    }
    if (accessor.hasHistoricalLaunchData()) {
      LaunchStaticDetailsType::serialize(accessor.getHistoricalLaunchData(), node, SOB_SatelliteRecordBaseType_Names::HistoricalLaunchData_Name);
    }
    {
      OB_OperationalStatusEnum::serializeList(accessor.getOperationalStatus(), node, SOB_SatelliteRecordBaseType_Names::OperationalStatus_Name);
    }
    if (accessor.hasKinematics()) {
      OrbitKinematicsParametersType::serialize(accessor.getKinematics(), node, SOB_SatelliteRecordBaseType_Names::Kinematics_Name);
    }
    if (accessor.hasMass()) {
      extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getMass(), node, SOB_SatelliteRecordBaseType_Names::Mass_Name);
    }
    if (accessor.hasEndurance()) {
      SatelliteEnduranceType::serialize(accessor.getEndurance(), node, SOB_SatelliteRecordBaseType_Names::Endurance_Name);
    }
    {
      const uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID& boundedList = accessor.getRelatedSatelliteRecordID();
      for (uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SOB_SatelliteRecordID_Type::serialize(boundedList.at(i), node, SOB_SatelliteRecordBaseType_Names::RelatedSatelliteRecordID_Name);
      }
    }
    if (accessor.hasPatternOfLife()) {
      extjson_uci::util::SerializationHelpers::serializeString(accessor.getPatternOfLife(), node, SOB_SatelliteRecordBaseType_Names::PatternOfLife_Name);
    }
    {
      const uci::type::SOB_SatelliteRecordBaseType::ProductID& boundedList = accessor.getProductID();
      for (uci::type::SOB_SatelliteRecordBaseType::ProductID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        ProductMetadataID_Type::serialize(boundedList.at(i), node, SOB_SatelliteRecordBaseType_Names::ProductID_Name);
      }
    }
    {
      const uci::type::SOB_SatelliteRecordBaseType::FileID& boundedList = accessor.getFileID();
      for (uci::type::SOB_SatelliteRecordBaseType::FileID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        FileMetadataID_Type::serialize(boundedList.at(i), node, SOB_SatelliteRecordBaseType_Names::FileID_Name);
      }
    }
    if (accessor.hasCharacteristics()) {
      SatelliteCharacteristicsOverrideType::serialize(accessor.getCharacteristics(), node, SOB_SatelliteRecordBaseType_Names::Characteristics_Name);
    }
    if (accessor.hasRemoveInfo()) {
      SOB_SatelliteRecordRemoveInfoType::serialize(accessor.getRemoveInfo(), node, SOB_SatelliteRecordBaseType_Names::RemoveInfo_Name);
    }
    {
      const uci::type::SOB_SatelliteRecordBaseType::Emitter& boundedList = accessor.getEmitter();
      for (uci::type::SOB_SatelliteRecordBaseType::Emitter::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        OrderOfBattleEmitterType::serialize(boundedList.at(i), node, SOB_SatelliteRecordBaseType_Names::Emitter_Name);
      }
    }
    if (accessor.hasRemarksText()) {
      extjson_uci::util::SerializationHelpers::serializeString(accessor.getRemarksText(), node, SOB_SatelliteRecordBaseType_Names::RemarksText_Name);
    }
    if (createNode) {
      propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
    }
  } else {
    extjson_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

