/** @file SOB_CorrelationRecordType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/SOB_CorrelationRecordType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/EOB_SignalType.h"
#include "extjson_uci/type/IdentityConfidenceType.h"
#include "extjson_uci/type/OB_CorrelationInputType.h"
#include "extjson_uci/type/OrbitalEphemerisChoiceType.h"
#include "extjson_uci/type/OrbitalKinematicsChoiceType.h"
#include "extjson_uci/type/SOB_CorrelatedToType.h"
#include "extjson_uci/type/SOB_CorrelationRecordID_Type.h"
#include "extjson_uci/type/SOB_CorrelationTypeEnum.h"
#include "extjson_uci/type/SecurityInformationType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/SOB_CorrelationRecordType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SOB_CorrelationRecordType_Names {

constexpr const char* Extern_Type_Name{"SOB_CorrelationRecordType"};
constexpr const char* SecurityInformation_Name{"SecurityInformation"};
constexpr const char* SOB_CorrelationRecordID_Name{"SOB_CorrelationRecordID"};
constexpr const char* CorrelationType_Name{"CorrelationType"};
constexpr const char* CorrelationTimestamp_Name{"CorrelationTimestamp"};
constexpr const char* CorrelatedTo_Name{"CorrelatedTo"};
constexpr const char* CorrelationInput_Name{"CorrelationInput"};
constexpr const char* Signal_Name{"Signal"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* SinglePositionKinematics_Name{"SinglePositionKinematics"};
constexpr const char* Ephemeris_Name{"Ephemeris"};

} // namespace SOB_CorrelationRecordType_Names

bool SOB_CorrelationRecordType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SOB_CorrelationRecordType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SOB_CorrelationRecordType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::SecurityInformation_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.getSecurityInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::SOB_CorrelationRecordID_Name) {
      SOB_CorrelationRecordID_Type::deserialize(valueType.second, accessor.getSOB_CorrelationRecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::CorrelationType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCorrelationType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::CorrelationTimestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCorrelationTimestamp(extjson_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::CorrelatedTo_Name) {
      SOB_CorrelatedToType::deserialize(valueType.second, accessor.enableCorrelatedTo(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::CorrelationInput_Name) {
      OB_CorrelationInputType::deserialize(valueType.second, accessor.enableCorrelationInput(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::Signal_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSignal(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::Identity_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableIdentity(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::SinglePositionKinematics_Name) {
      OrbitalKinematicsChoiceType::deserialize(valueType.second, accessor.enableSinglePositionKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SOB_CorrelationRecordType_Names::Ephemeris_Name) {
      OrbitalEphemerisChoiceType::deserialize(valueType.second, accessor.enableEphemeris(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string SOB_CorrelationRecordType::serialize(const uci::type::SOB_CorrelationRecordType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SOB_CorrelationRecordType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, SOB_CorrelationRecordType_Names::Extern_Type_Name);
  }
  SecurityInformationType::serialize(accessor.getSecurityInformation(), node, SOB_CorrelationRecordType_Names::SecurityInformation_Name);
  SOB_CorrelationRecordID_Type::serialize(accessor.getSOB_CorrelationRecordID(), node, SOB_CorrelationRecordType_Names::SOB_CorrelationRecordID_Name);
  SOB_CorrelationTypeEnum::serialize(accessor.getCorrelationType(), node, SOB_CorrelationRecordType_Names::CorrelationType_Name, false);
  extjson_uci::util::SerializationHelpers::serializeDateTime(accessor.getCorrelationTimestamp(), node, SOB_CorrelationRecordType_Names::CorrelationTimestamp_Name);
  if (accessor.hasCorrelatedTo()) {
    SOB_CorrelatedToType::serialize(accessor.getCorrelatedTo(), node, SOB_CorrelationRecordType_Names::CorrelatedTo_Name);
  }
  if (accessor.hasCorrelationInput()) {
    OB_CorrelationInputType::serialize(accessor.getCorrelationInput(), node, SOB_CorrelationRecordType_Names::CorrelationInput_Name);
  }
  if (accessor.hasSignal()) {
    EOB_SignalType::serialize(accessor.getSignal(), node, SOB_CorrelationRecordType_Names::Signal_Name);
  }
  if (accessor.hasIdentity()) {
    IdentityConfidenceType::serialize(accessor.getIdentity(), node, SOB_CorrelationRecordType_Names::Identity_Name);
  }
  if (accessor.hasSinglePositionKinematics()) {
    OrbitalKinematicsChoiceType::serialize(accessor.getSinglePositionKinematics(), node, SOB_CorrelationRecordType_Names::SinglePositionKinematics_Name);
  }
  if (accessor.hasEphemeris()) {
    OrbitalEphemerisChoiceType::serialize(accessor.getEphemeris(), node, SOB_CorrelationRecordType_Names::Ephemeris_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

