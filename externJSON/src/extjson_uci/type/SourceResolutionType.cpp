/** @file SourceResolutionType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/SourceResolutionType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/SourceResolutionType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SourceResolutionType_Names {

constexpr const char* Extern_Type_Name{"SourceResolutionType"};
constexpr const char* RangeResolution_Name{"RangeResolution"};
constexpr const char* RangeRateResolution_Name{"RangeRateResolution"};
constexpr const char* AzimuthResolution_Name{"AzimuthResolution"};
constexpr const char* ElevationResolution_Name{"ElevationResolution"};
constexpr const char* AzimuthRateResolution_Name{"AzimuthRateResolution"};
constexpr const char* ElevationRateResolution_Name{"ElevationRateResolution"};
constexpr const char* CosconeY_Resolution_Name{"CosconeY_Resolution"};
constexpr const char* CosconeZ_Resolution_Name{"CosconeZ_Resolution"};
constexpr const char* CosconeY_RateResolution_Name{"CosconeY_RateResolution"};
constexpr const char* CosconeZ_RateResolution_Name{"CosconeZ_RateResolution"};

} // namespace SourceResolutionType_Names

bool SourceResolutionType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SourceResolutionType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SourceResolutionType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + SourceResolutionType_Names::RangeResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRangeResolution(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::RangeRateResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRangeRateResolution(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::AzimuthResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzimuthResolution(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::ElevationResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setElevationResolution(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::AzimuthRateResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzimuthRateResolution(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::ElevationRateResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setElevationRateResolution(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::CosconeY_Resolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCosconeY_Resolution(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::CosconeZ_Resolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCosconeZ_Resolution(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::CosconeY_RateResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCosconeY_RateResolution(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SourceResolutionType_Names::CosconeZ_RateResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCosconeZ_RateResolution(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
  return true;
}

std::string SourceResolutionType::serialize(const uci::type::SourceResolutionType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SourceResolutionType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, SourceResolutionType_Names::Extern_Type_Name);
  }
  if (accessor.hasRangeResolution()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getRangeResolution(), node, SourceResolutionType_Names::RangeResolution_Name);
  }
  if (accessor.hasRangeRateResolution()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getRangeRateResolution(), node, SourceResolutionType_Names::RangeRateResolution_Name);
  }
  if (accessor.hasAzimuthResolution()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getAzimuthResolution(), node, SourceResolutionType_Names::AzimuthResolution_Name);
  }
  if (accessor.hasElevationResolution()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getElevationResolution(), node, SourceResolutionType_Names::ElevationResolution_Name);
  }
  if (accessor.hasAzimuthRateResolution()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getAzimuthRateResolution(), node, SourceResolutionType_Names::AzimuthRateResolution_Name);
  }
  if (accessor.hasElevationRateResolution()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getElevationRateResolution(), node, SourceResolutionType_Names::ElevationRateResolution_Name);
  }
  if (accessor.hasCosconeY_Resolution()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getCosconeY_Resolution(), node, SourceResolutionType_Names::CosconeY_Resolution_Name);
  }
  if (accessor.hasCosconeZ_Resolution()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getCosconeZ_Resolution(), node, SourceResolutionType_Names::CosconeZ_Resolution_Name);
  }
  if (accessor.hasCosconeY_RateResolution()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getCosconeY_RateResolution(), node, SourceResolutionType_Names::CosconeY_RateResolution_Name);
  }
  if (accessor.hasCosconeZ_RateResolution()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getCosconeZ_RateResolution(), node, SourceResolutionType_Names::CosconeZ_RateResolution_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

