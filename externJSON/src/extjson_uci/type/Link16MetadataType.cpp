/** @file Link16MetadataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/Link16MetadataType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/CommCountermeasureSetEnum.h"
#include "extjson_uci/type/ConnectionStatusEnum.h"
#include "extjson_uci/type/DefensiveJammerSystemInfoType.h"
#include "extjson_uci/type/GenericUnitTypeEnum.h"
#include "extjson_uci/type/JammerStationType.h"
#include "extjson_uci/type/Link16ActiveRelayIndicatorsType.h"
#include "extjson_uci/type/NPSI_Enum.h"
#include "extjson_uci/type/NetworkLinkID_Type.h"
#include "extjson_uci/type/OperationalCapabilityEnum.h"
#include "extjson_uci/type/PositionTimeQualityEnum.h"
#include "extjson_uci/type/RadarChannelIndicatorEnum.h"
#include "extjson_uci/type/ReconnaissanceStatusType.h"
#include "extjson_uci/type/SiteEnum.h"
#include "extjson_uci/type/SystemID_Type.h"
#include "extjson_uci/type/TrackNumberOrEntityType.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/Link16MetadataType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace Link16MetadataType_Names {

constexpr const char* Extern_Type_Name{"Link16MetadataType"};
constexpr const char* NetworkLinkID_Name{"NetworkLinkID"};
constexpr const char* SourceTrack_Name{"SourceTrack"};
constexpr const char* ReportingSystemID_Name{"ReportingSystemID"};
constexpr const char* Airborne_Name{"Airborne"};
constexpr const char* ControlChannel_Name{"ControlChannel"};
constexpr const char* FlightLeadIndicator_Name{"FlightLeadIndicator"};
constexpr const char* FlightLead_Name{"FlightLead"};
constexpr const char* GenericUnitType_Name{"GenericUnitType"};
constexpr const char* MissionCommanderIndicator_Name{"MissionCommanderIndicator"};
constexpr const char* PrecisionTime_Name{"PrecisionTime"};
constexpr const char* PositionTimeQuality_Name{"PositionTimeQuality"};
constexpr const char* Site_Name{"Site"};
constexpr const char* OperationalCapability_Name{"OperationalCapability"};
constexpr const char* Link16_Status_Name{"Link16_Status"};
constexpr const char* ReconnaissanceStatus_Name{"ReconnaissanceStatus"};
constexpr const char* NetworkParticipationStatusIndicator_Name{"NetworkParticipationStatusIndicator"};
constexpr const char* RadarChannelIndicator_Name{"RadarChannelIndicator"};
constexpr const char* RadarChannel_Name{"RadarChannel"};
constexpr const char* MissileChannel_Name{"MissileChannel"};
constexpr const char* DefensiveJammerSystemInfo_Name{"DefensiveJammerSystemInfo"};
constexpr const char* JammerStation_Name{"JammerStation"};
constexpr const char* CommCountermeasureSet_Name{"CommCountermeasureSet"};
constexpr const char* ActiveRelayIndicators_Name{"ActiveRelayIndicators"};
constexpr const char* MissionCommander_Name{"MissionCommander"};

} // namespace Link16MetadataType_Names

bool Link16MetadataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::Link16MetadataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = Link16MetadataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + Link16MetadataType_Names::NetworkLinkID_Name) {
      NetworkLinkID_Type::deserialize(valueType.second, accessor.enableNetworkLinkID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::SourceTrack_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSourceTrack(*value);
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::ReportingSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableReportingSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::Airborne_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAirborne(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::ControlChannel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setControlChannel(extjson_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::FlightLeadIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFlightLeadIndicator(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::FlightLead_Name) {
      TrackNumberOrEntityType::deserialize(valueType.second, accessor.enableFlightLead(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::GenericUnitType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableGenericUnitType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::MissionCommanderIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMissionCommanderIndicator(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::PrecisionTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPrecisionTime(extjson_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::PositionTimeQuality_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePositionTimeQuality().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::Site_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSite().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::OperationalCapability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableOperationalCapability().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::Link16_Status_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableLink16_Status().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::ReconnaissanceStatus_Name) {
      ReconnaissanceStatusType::deserialize(valueType.second, accessor.enableReconnaissanceStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::NetworkParticipationStatusIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableNetworkParticipationStatusIndicator().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::RadarChannelIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRadarChannelIndicator().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::RadarChannel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRadarChannel(extjson_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::MissileChannel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMissileChannel(extjson_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::DefensiveJammerSystemInfo_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::Link16MetadataType::DefensiveJammerSystemInfo& boundedList = accessor.getDefensiveJammerSystemInfo();
        const uci::type::Link16MetadataType::DefensiveJammerSystemInfo::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DefensiveJammerSystemInfoType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::JammerStation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::Link16MetadataType::JammerStation& boundedList = accessor.getJammerStation();
        const uci::type::Link16MetadataType::JammerStation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        JammerStationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::CommCountermeasureSet_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCommCountermeasureSet().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::ActiveRelayIndicators_Name) {
      Link16ActiveRelayIndicatorsType::deserialize(valueType.second, accessor.enableActiveRelayIndicators(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Link16MetadataType_Names::MissionCommander_Name) {
      TrackNumberOrEntityType::deserialize(valueType.second, accessor.enableMissionCommander(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string Link16MetadataType::serialize(const uci::type::Link16MetadataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? Link16MetadataType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, Link16MetadataType_Names::Extern_Type_Name);
  }
  if (accessor.hasNetworkLinkID()) {
    NetworkLinkID_Type::serialize(accessor.getNetworkLinkID(), node, Link16MetadataType_Names::NetworkLinkID_Name);
  }
  if (accessor.hasSourceTrack()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getSourceTrack(), node, Link16MetadataType_Names::SourceTrack_Name);
  }
  if (accessor.hasReportingSystemID()) {
    SystemID_Type::serialize(accessor.getReportingSystemID(), node, Link16MetadataType_Names::ReportingSystemID_Name);
  }
  if (accessor.hasAirborne()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getAirborne(), node, Link16MetadataType_Names::Airborne_Name);
  }
  if (accessor.hasControlChannel()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getControlChannel(), node, Link16MetadataType_Names::ControlChannel_Name);
  }
  if (accessor.hasFlightLeadIndicator()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getFlightLeadIndicator(), node, Link16MetadataType_Names::FlightLeadIndicator_Name);
  }
  if (accessor.hasFlightLead()) {
    TrackNumberOrEntityType::serialize(accessor.getFlightLead(), node, Link16MetadataType_Names::FlightLead_Name);
  }
  if (accessor.hasGenericUnitType()) {
    GenericUnitTypeEnum::serialize(accessor.getGenericUnitType(), node, Link16MetadataType_Names::GenericUnitType_Name, false);
  }
  if (accessor.hasMissionCommanderIndicator()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getMissionCommanderIndicator(), node, Link16MetadataType_Names::MissionCommanderIndicator_Name);
  }
  if (accessor.hasPrecisionTime()) {
    extjson_uci::util::SerializationHelpers::serializeDateTime(accessor.getPrecisionTime(), node, Link16MetadataType_Names::PrecisionTime_Name);
  }
  if (accessor.hasPositionTimeQuality()) {
    PositionTimeQualityEnum::serialize(accessor.getPositionTimeQuality(), node, Link16MetadataType_Names::PositionTimeQuality_Name, false);
  }
  if (accessor.hasSite()) {
    SiteEnum::serialize(accessor.getSite(), node, Link16MetadataType_Names::Site_Name, false);
  }
  if (accessor.hasOperationalCapability()) {
    OperationalCapabilityEnum::serialize(accessor.getOperationalCapability(), node, Link16MetadataType_Names::OperationalCapability_Name, false);
  }
  if (accessor.hasLink16_Status()) {
    ConnectionStatusEnum::serialize(accessor.getLink16_Status(), node, Link16MetadataType_Names::Link16_Status_Name, false);
  }
  if (accessor.hasReconnaissanceStatus()) {
    ReconnaissanceStatusType::serialize(accessor.getReconnaissanceStatus(), node, Link16MetadataType_Names::ReconnaissanceStatus_Name);
  }
  if (accessor.hasNetworkParticipationStatusIndicator()) {
    NPSI_Enum::serialize(accessor.getNetworkParticipationStatusIndicator(), node, Link16MetadataType_Names::NetworkParticipationStatusIndicator_Name, false);
  }
  if (accessor.hasRadarChannelIndicator()) {
    RadarChannelIndicatorEnum::serialize(accessor.getRadarChannelIndicator(), node, Link16MetadataType_Names::RadarChannelIndicator_Name, false);
  }
  if (accessor.hasRadarChannel()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getRadarChannel(), node, Link16MetadataType_Names::RadarChannel_Name);
  }
  if (accessor.hasMissileChannel()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getMissileChannel(), node, Link16MetadataType_Names::MissileChannel_Name);
  }
  {
    const uci::type::Link16MetadataType::DefensiveJammerSystemInfo& boundedList = accessor.getDefensiveJammerSystemInfo();
    for (uci::type::Link16MetadataType::DefensiveJammerSystemInfo::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DefensiveJammerSystemInfoType::serialize(boundedList.at(i), node, Link16MetadataType_Names::DefensiveJammerSystemInfo_Name);
    }
  }
  {
    const uci::type::Link16MetadataType::JammerStation& boundedList = accessor.getJammerStation();
    for (uci::type::Link16MetadataType::JammerStation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      JammerStationType::serialize(boundedList.at(i), node, Link16MetadataType_Names::JammerStation_Name);
    }
  }
  if (accessor.hasCommCountermeasureSet()) {
    CommCountermeasureSetEnum::serialize(accessor.getCommCountermeasureSet(), node, Link16MetadataType_Names::CommCountermeasureSet_Name, false);
  }
  if (accessor.hasActiveRelayIndicators()) {
    Link16ActiveRelayIndicatorsType::serialize(accessor.getActiveRelayIndicators(), node, Link16MetadataType_Names::ActiveRelayIndicators_Name);
  }
  if (accessor.hasMissionCommander()) {
    TrackNumberOrEntityType::serialize(accessor.getMissionCommander(), node, Link16MetadataType_Names::MissionCommander_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

