/** @file OperatorNotificationMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/OperatorNotificationMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/AssociatedMessageType.h"
#include "extjson_uci/type/AuralAlertType.h"
#include "extjson_uci/type/ID_Type.h"
#include "extjson_uci/type/NotificationCategoryEnum.h"
#include "extjson_uci/type/NotificationSeverityEnum.h"
#include "extjson_uci/type/NotificationSourceType.h"
#include "extjson_uci/type/OperatorNotificationActionType.h"
#include "extjson_uci/type/OperatorNotificationID_Type.h"
#include "extjson_uci/type/OperatorRoleType.h"
#include "extjson_uci/type/Point2D_Type.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/OperatorNotificationMDT.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace OperatorNotificationMDT_Names {

constexpr const char* Extern_Type_Name{"OperatorNotificationMDT"};
constexpr const char* OperatorNotificationID_Name{"OperatorNotificationID"};
constexpr const char* OperatorNotificationTemplateID_Name{"OperatorNotificationTemplateID"};
constexpr const char* OperatorNotificationTemplateParameters_Name{"OperatorNotificationTemplateParameters"};
constexpr const char* Title_Name{"Title"};
constexpr const char* Details_Name{"Details"};
constexpr const char* Category_Name{"Category"};
constexpr const char* Severity_Name{"Severity"};
constexpr const char* Location_Name{"Location"};
constexpr const char* Source_Name{"Source"};
constexpr const char* Actions_Name{"Actions"};
constexpr const char* Count_Name{"Count"};
constexpr const char* OccurrenceTimestamp_Name{"OccurrenceTimestamp"};
constexpr const char* Priority_Name{"Priority"};
constexpr const char* AuralAlert_Name{"AuralAlert"};
constexpr const char* Destinations_Name{"Destinations"};
constexpr const char* AssociatedMessage_Name{"AssociatedMessage"};

} // namespace OperatorNotificationMDT_Names

bool OperatorNotificationMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::OperatorNotificationMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OperatorNotificationMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::OperatorNotificationID_Name) {
      OperatorNotificationID_Type::deserialize(valueType.second, accessor.getOperatorNotificationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::OperatorNotificationTemplateID_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableOperatorNotificationTemplateID(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::OperatorNotificationTemplateParameters_Name) {
      extjson_uci::util::SerializationHelpers::deserializeStringList(valueType.second, accessor.getOperatorNotificationTemplateParameters());
    } else if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::Title_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTitle(*value);
      }
    } else if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::Details_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDetails(*value);
      }
    } else if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::Category_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCategory().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::Severity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSeverity().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::Location_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableLocation(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::Source_Name) {
      NotificationSourceType::deserialize(valueType.second, accessor.enableSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::Actions_Name) {
      OperatorNotificationActionType::deserialize(valueType.second, accessor.enableActions(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::Count_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCount(extjson_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::OccurrenceTimestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOccurrenceTimestamp(extjson_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::Priority_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPriority(extjson_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::AuralAlert_Name) {
      AuralAlertType::deserialize(valueType.second, accessor.enableAuralAlert(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::Destinations_Name) {
      uci::type::OperatorNotificationMDT::Destinations& boundedList = accessor.getDestinations();
      const uci::type::OperatorNotificationMDT::Destinations::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      OperatorRoleType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OperatorNotificationMDT_Names::AssociatedMessage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OperatorNotificationMDT::AssociatedMessage& boundedList = accessor.getAssociatedMessage();
        const uci::type::OperatorNotificationMDT::AssociatedMessage::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        AssociatedMessageType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string OperatorNotificationMDT::serialize(const uci::type::OperatorNotificationMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? OperatorNotificationMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, OperatorNotificationMDT_Names::Extern_Type_Name);
  }
  OperatorNotificationID_Type::serialize(accessor.getOperatorNotificationID(), node, OperatorNotificationMDT_Names::OperatorNotificationID_Name);
  if (accessor.hasOperatorNotificationTemplateID()) {
    ID_Type::serialize(accessor.getOperatorNotificationTemplateID(), node, OperatorNotificationMDT_Names::OperatorNotificationTemplateID_Name);
  }
  {
    extjson_uci::util::SerializationHelpers::serializeStringList(accessor.getOperatorNotificationTemplateParameters(), node, OperatorNotificationMDT_Names::OperatorNotificationTemplateParameters_Name);
  }
  extjson_uci::util::SerializationHelpers::serializeString(accessor.getTitle(), node, OperatorNotificationMDT_Names::Title_Name);
  if (accessor.hasDetails()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getDetails(), node, OperatorNotificationMDT_Names::Details_Name);
  }
  NotificationCategoryEnum::serialize(accessor.getCategory(), node, OperatorNotificationMDT_Names::Category_Name, false);
  NotificationSeverityEnum::serialize(accessor.getSeverity(), node, OperatorNotificationMDT_Names::Severity_Name, false);
  if (accessor.hasLocation()) {
    Point2D_Type::serialize(accessor.getLocation(), node, OperatorNotificationMDT_Names::Location_Name);
  }
  if (accessor.hasSource()) {
    NotificationSourceType::serialize(accessor.getSource(), node, OperatorNotificationMDT_Names::Source_Name);
  }
  if (accessor.hasActions()) {
    OperatorNotificationActionType::serialize(accessor.getActions(), node, OperatorNotificationMDT_Names::Actions_Name);
  }
  if (accessor.hasCount()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getCount(), node, OperatorNotificationMDT_Names::Count_Name);
  }
  if (accessor.hasOccurrenceTimestamp()) {
    extjson_uci::util::SerializationHelpers::serializeDateTime(accessor.getOccurrenceTimestamp(), node, OperatorNotificationMDT_Names::OccurrenceTimestamp_Name);
  }
  if (accessor.hasPriority()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getPriority(), node, OperatorNotificationMDT_Names::Priority_Name);
  }
  if (accessor.hasAuralAlert()) {
    AuralAlertType::serialize(accessor.getAuralAlert(), node, OperatorNotificationMDT_Names::AuralAlert_Name);
  }
  {
    const uci::type::OperatorNotificationMDT::Destinations& boundedList = accessor.getDestinations();
    for (uci::type::OperatorNotificationMDT::Destinations::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OperatorRoleType::serialize(boundedList.at(i), node, OperatorNotificationMDT_Names::Destinations_Name);
    }
  }
  {
    const uci::type::OperatorNotificationMDT::AssociatedMessage& boundedList = accessor.getAssociatedMessage();
    for (uci::type::OperatorNotificationMDT::AssociatedMessage::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      AssociatedMessageType::serialize(boundedList.at(i), node, OperatorNotificationMDT_Names::AssociatedMessage_Name);
    }
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

