/** @file StoreCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/StoreCommandType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ForeignKeyType.h"
#include "extjson_uci/type/ReleaseConsentType.h"
#include "extjson_uci/type/StoreType.h"
#include "extjson_uci/type/Velocity2D_Type.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/StoreCommandType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace StoreCommandType_Names {

constexpr const char* Extern_Type_Name{"StoreCommandType"};
constexpr const char* NextStoreStation_Name{"NextStoreStation"};
constexpr const char* NextStoreType_Name{"NextStoreType"};
constexpr const char* OverrideLAR_Name{"OverrideLAR"};
constexpr const char* OverrideAttitudeConstraints_Name{"OverrideAttitudeConstraints"};
constexpr const char* MasterArm_Name{"MasterArm"};
constexpr const char* ReleaseConsent_Name{"ReleaseConsent"};
constexpr const char* LAR_CalculationWindHold_Name{"LAR_CalculationWindHold"};
constexpr const char* LAR_CalculationWindOverride_Name{"LAR_CalculationWindOverride"};
constexpr const char* VerifyInventory_Name{"VerifyInventory"};

} // namespace StoreCommandType_Names

bool StoreCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StoreCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StoreCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + StoreCommandType_Names::NextStoreStation_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseNextStoreStation(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StoreCommandType_Names::NextStoreType_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseNextStoreType(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StoreCommandType_Names::OverrideLAR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOverrideLAR(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StoreCommandType_Names::OverrideAttitudeConstraints_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOverrideAttitudeConstraints(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StoreCommandType_Names::MasterArm_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMasterArm(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StoreCommandType_Names::ReleaseConsent_Name) {
      ReleaseConsentType::deserialize(valueType.second, accessor.chooseReleaseConsent(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StoreCommandType_Names::LAR_CalculationWindHold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLAR_CalculationWindHold(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StoreCommandType_Names::LAR_CalculationWindOverride_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseLAR_CalculationWindOverride(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StoreCommandType_Names::VerifyInventory_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseVerifyInventory().setStringValue(*value);
      }
    }
  }
  return true;
}

std::string StoreCommandType::serialize(const uci::type::StoreCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? StoreCommandType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, StoreCommandType_Names::Extern_Type_Name);
  }
  if (accessor.isNextStoreStation()) {
    ForeignKeyType::serialize(accessor.getNextStoreStation(), node, StoreCommandType_Names::NextStoreStation_Name);
  } else if (accessor.isNextStoreType()) {
    StoreType::serialize(accessor.getNextStoreType(), node, StoreCommandType_Names::NextStoreType_Name);
  } else if (accessor.isOverrideLAR()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getOverrideLAR(), node, StoreCommandType_Names::OverrideLAR_Name);
  } else if (accessor.isOverrideAttitudeConstraints()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getOverrideAttitudeConstraints(), node, StoreCommandType_Names::OverrideAttitudeConstraints_Name);
  } else if (accessor.isMasterArm()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getMasterArm(), node, StoreCommandType_Names::MasterArm_Name);
  } else if (accessor.isReleaseConsent()) {
    ReleaseConsentType::serialize(accessor.getReleaseConsent(), node, StoreCommandType_Names::ReleaseConsent_Name);
  } else if (accessor.isLAR_CalculationWindHold()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getLAR_CalculationWindHold(), node, StoreCommandType_Names::LAR_CalculationWindHold_Name);
  } else if (accessor.isLAR_CalculationWindOverride()) {
    Velocity2D_Type::serialize(accessor.getLAR_CalculationWindOverride(), node, StoreCommandType_Names::LAR_CalculationWindOverride_Name);
  } else if (accessor.isVerifyInventory()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getVerifyInventory(), node, StoreCommandType_Names::VerifyInventory_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

