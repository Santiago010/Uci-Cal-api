/** @file MeasurementCharacteristicsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/MeasurementCharacteristicsType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/AltitudeReferenceUncertaintyType.h"
#include "extjson_uci/type/FOV_ExtentType.h"
#include "extjson_uci/type/FrequencyRangeType.h"
#include "extjson_uci/type/MeasurementDurationType.h"
#include "extjson_uci/type/NameValuePairType.h"
#include "extjson_uci/type/PassiveActiveEnum.h"
#include "extjson_uci/type/PathIdentificationEnum.h"
#include "extjson_uci/type/RCS_MedianType.h"
#include "extjson_uci/type/SourceCharacteristicsType.h"
#include "extjson_uci/type/SourceCoverageType.h"
#include "extjson_uci/type/SourceResolutionType.h"
#include "extjson_uci/type/SpaceObjectVisualDataType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/MeasurementCharacteristicsType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace MeasurementCharacteristicsType_Names {

constexpr const char* Extern_Type_Name{"MeasurementCharacteristicsType"};
constexpr const char* PassiveActiveIndicator_Name{"PassiveActiveIndicator"};
constexpr const char* MeasurementDuration_Name{"MeasurementDuration"};
constexpr const char* PathIdentification_Name{"PathIdentification"};
constexpr const char* SourceCoverage_Name{"SourceCoverage"};
constexpr const char* AltitudeReported_Name{"AltitudeReported"};
constexpr const char* SourceAngularExtent_Name{"SourceAngularExtent"};
constexpr const char* SourceResolution_Name{"SourceResolution"};
constexpr const char* CenterFrequency_Name{"CenterFrequency"};
constexpr const char* Bandwidth_Name{"Bandwidth"};
constexpr const char* SourceSpecifiedCharacteristics_Name{"SourceSpecifiedCharacteristics"};
constexpr const char* TargetIrradiance_Name{"TargetIrradiance"};
constexpr const char* ProbabilityOfDetection_Name{"ProbabilityOfDetection"};
constexpr const char* ProbabilityOfFalseAlarm_Name{"ProbabilityOfFalseAlarm"};
constexpr const char* SNR_Name{"SNR"};
constexpr const char* SBR_Name{"SBR"};
constexpr const char* RadarCrossSection_Name{"RadarCrossSection"};
constexpr const char* SpaceObjectVisualData_Name{"SpaceObjectVisualData"};
constexpr const char* CustomCharacteristics_Name{"CustomCharacteristics"};

} // namespace MeasurementCharacteristicsType_Names

bool MeasurementCharacteristicsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MeasurementCharacteristicsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MeasurementCharacteristicsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::PassiveActiveIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePassiveActiveIndicator().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::MeasurementDuration_Name) {
      MeasurementDurationType::deserialize(valueType.second, accessor.enableMeasurementDuration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::PathIdentification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePathIdentification().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::SourceCoverage_Name) {
      SourceCoverageType::deserialize(valueType.second, accessor.enableSourceCoverage(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::AltitudeReported_Name) {
      AltitudeReferenceUncertaintyType::deserialize(valueType.second, accessor.enableAltitudeReported(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::SourceAngularExtent_Name) {
      FOV_ExtentType::deserialize(valueType.second, accessor.enableSourceAngularExtent(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::SourceResolution_Name) {
      SourceResolutionType::deserialize(valueType.second, accessor.enableSourceResolution(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::CenterFrequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCenterFrequency(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::Bandwidth_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.enableBandwidth(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::SourceSpecifiedCharacteristics_Name) {
      SourceCharacteristicsType::deserialize(valueType.second, accessor.enableSourceSpecifiedCharacteristics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::TargetIrradiance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTargetIrradiance(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::ProbabilityOfDetection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProbabilityOfDetection(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::ProbabilityOfFalseAlarm_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProbabilityOfFalseAlarm(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::SNR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSNR(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::SBR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSBR(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::RadarCrossSection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MeasurementCharacteristicsType::RadarCrossSection& boundedList = accessor.getRadarCrossSection();
        const uci::type::MeasurementCharacteristicsType::RadarCrossSection::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        RCS_MedianType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::SpaceObjectVisualData_Name) {
      SpaceObjectVisualDataType::deserialize(valueType.second, accessor.enableSpaceObjectVisualData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MeasurementCharacteristicsType_Names::CustomCharacteristics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MeasurementCharacteristicsType::CustomCharacteristics& boundedList = accessor.getCustomCharacteristics();
        const uci::type::MeasurementCharacteristicsType::CustomCharacteristics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string MeasurementCharacteristicsType::serialize(const uci::type::MeasurementCharacteristicsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? MeasurementCharacteristicsType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, MeasurementCharacteristicsType_Names::Extern_Type_Name);
  }
  if (accessor.hasPassiveActiveIndicator()) {
    PassiveActiveEnum::serialize(accessor.getPassiveActiveIndicator(), node, MeasurementCharacteristicsType_Names::PassiveActiveIndicator_Name, false);
  }
  if (accessor.hasMeasurementDuration()) {
    MeasurementDurationType::serialize(accessor.getMeasurementDuration(), node, MeasurementCharacteristicsType_Names::MeasurementDuration_Name);
  }
  if (accessor.hasPathIdentification()) {
    PathIdentificationEnum::serialize(accessor.getPathIdentification(), node, MeasurementCharacteristicsType_Names::PathIdentification_Name, false);
  }
  if (accessor.hasSourceCoverage()) {
    SourceCoverageType::serialize(accessor.getSourceCoverage(), node, MeasurementCharacteristicsType_Names::SourceCoverage_Name);
  }
  if (accessor.hasAltitudeReported()) {
    AltitudeReferenceUncertaintyType::serialize(accessor.getAltitudeReported(), node, MeasurementCharacteristicsType_Names::AltitudeReported_Name);
  }
  if (accessor.hasSourceAngularExtent()) {
    FOV_ExtentType::serialize(accessor.getSourceAngularExtent(), node, MeasurementCharacteristicsType_Names::SourceAngularExtent_Name);
  }
  if (accessor.hasSourceResolution()) {
    SourceResolutionType::serialize(accessor.getSourceResolution(), node, MeasurementCharacteristicsType_Names::SourceResolution_Name);
  }
  if (accessor.hasCenterFrequency()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getCenterFrequency(), node, MeasurementCharacteristicsType_Names::CenterFrequency_Name);
  }
  if (accessor.hasBandwidth()) {
    FrequencyRangeType::serialize(accessor.getBandwidth(), node, MeasurementCharacteristicsType_Names::Bandwidth_Name);
  }
  if (accessor.hasSourceSpecifiedCharacteristics()) {
    SourceCharacteristicsType::serialize(accessor.getSourceSpecifiedCharacteristics(), node, MeasurementCharacteristicsType_Names::SourceSpecifiedCharacteristics_Name);
  }
  if (accessor.hasTargetIrradiance()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getTargetIrradiance(), node, MeasurementCharacteristicsType_Names::TargetIrradiance_Name);
  }
  if (accessor.hasProbabilityOfDetection()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getProbabilityOfDetection(), node, MeasurementCharacteristicsType_Names::ProbabilityOfDetection_Name);
  }
  if (accessor.hasProbabilityOfFalseAlarm()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getProbabilityOfFalseAlarm(), node, MeasurementCharacteristicsType_Names::ProbabilityOfFalseAlarm_Name);
  }
  if (accessor.hasSNR()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getSNR(), node, MeasurementCharacteristicsType_Names::SNR_Name);
  }
  if (accessor.hasSBR()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getSBR(), node, MeasurementCharacteristicsType_Names::SBR_Name);
  }
  {
    const uci::type::MeasurementCharacteristicsType::RadarCrossSection& boundedList = accessor.getRadarCrossSection();
    for (uci::type::MeasurementCharacteristicsType::RadarCrossSection::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      RCS_MedianType::serialize(boundedList.at(i), node, MeasurementCharacteristicsType_Names::RadarCrossSection_Name);
    }
  }
  if (accessor.hasSpaceObjectVisualData()) {
    SpaceObjectVisualDataType::serialize(accessor.getSpaceObjectVisualData(), node, MeasurementCharacteristicsType_Names::SpaceObjectVisualData_Name);
  }
  {
    const uci::type::MeasurementCharacteristicsType::CustomCharacteristics& boundedList = accessor.getCustomCharacteristics();
    for (uci::type::MeasurementCharacteristicsType::CustomCharacteristics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      NameValuePairType::serialize(boundedList.at(i), node, MeasurementCharacteristicsType_Names::CustomCharacteristics_Name);
    }
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

