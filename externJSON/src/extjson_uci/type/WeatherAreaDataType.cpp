/** @file WeatherAreaDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/WeatherAreaDataType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/CloudsType.h"
#include "extjson_uci/type/WeatherDescriptionEnum.h"
#include "extjson_uci/type/WeatherEffectsType.h"
#include "extjson_uci/type/WeatherKindEnum.h"
#include "extjson_uci/type/WeatherPrecipitationAmplificationEnum.h"
#include "extjson_uci/type/WeatherPrecipitationEnum.h"
#include "extjson_uci/type/WeatherSeverityEnum.h"
#include "extjson_uci/type/WeatherSourceEnum.h"
#include "extjson_uci/type/WeatherVisibilityEnum.h"
#include "extjson_uci/type/WindDataType.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/WeatherAreaDataType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace WeatherAreaDataType_Names {

constexpr const char* Extern_Type_Name{"WeatherAreaDataType"};
constexpr const char* Source_Name{"Source"};
constexpr const char* StationCode_Name{"StationCode"};
constexpr const char* Temperature_Name{"Temperature"};
constexpr const char* PrecipitationPotential_Name{"PrecipitationPotential"};
constexpr const char* PrecipitationAmount_Name{"PrecipitationAmount"};
constexpr const char* TypeOfPrecipitation_Name{"TypeOfPrecipitation"};
constexpr const char* PrecipitationAmplification_Name{"PrecipitationAmplification"};
constexpr const char* Visibility_Name{"Visibility"};
constexpr const char* VisibilityStatus_Name{"VisibilityStatus"};
constexpr const char* DewPoint_Name{"DewPoint"};
constexpr const char* Clouds_Name{"Clouds"};
constexpr const char* WeatherEffects_Name{"WeatherEffects"};
constexpr const char* BarometricPressure_Name{"BarometricPressure"};
constexpr const char* KollsmanSetting_Name{"KollsmanSetting"};
constexpr const char* Icing_Name{"Icing"};
constexpr const char* Turbulence_Name{"Turbulence"};
constexpr const char* ThunderstormPotential_Name{"ThunderstormPotential"};
constexpr const char* Remarks_Name{"Remarks"};
constexpr const char* Kind_Name{"Kind"};
constexpr const char* Description_Name{"Description"};
constexpr const char* Qualifier_Name{"Qualifier"};
constexpr const char* WindData_Name{"WindData"};
constexpr const char* RelativeHumidity_Name{"RelativeHumidity"};

} // namespace WeatherAreaDataType_Names

bool WeatherAreaDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::WeatherAreaDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WeatherAreaDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + WeatherAreaDataType_Names::Source_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::StationCode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStationCode(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::Temperature_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTemperature(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::PrecipitationPotential_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPrecipitationPotential(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::PrecipitationAmount_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPrecipitationAmount(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::TypeOfPrecipitation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTypeOfPrecipitation().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::PrecipitationAmplification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePrecipitationAmplification().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::Visibility_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVisibility(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::VisibilityStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableVisibilityStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::DewPoint_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDewPoint(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::Clouds_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WeatherAreaDataType::Clouds& boundedList = accessor.getClouds();
        const uci::type::WeatherAreaDataType::Clouds::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CloudsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::WeatherEffects_Name) {
      WeatherEffectsType::deserialize(valueType.second, accessor.enableWeatherEffects(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::BarometricPressure_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBarometricPressure(extjson_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::KollsmanSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setKollsmanSetting(extjson_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::Icing_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableIcing().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::Turbulence_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTurbulence().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::ThunderstormPotential_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setThunderstormPotential(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::Remarks_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRemarks(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::Kind_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableKind().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::Description_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableDescription().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::Qualifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableQualifier().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::WindData_Name) {
      WindDataType::deserialize(valueType.second, accessor.enableWindData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherAreaDataType_Names::RelativeHumidity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRelativeHumidity(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
  return true;
}

std::string WeatherAreaDataType::serialize(const uci::type::WeatherAreaDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? WeatherAreaDataType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, WeatherAreaDataType_Names::Extern_Type_Name);
  }
  WeatherSourceEnum::serialize(accessor.getSource(), node, WeatherAreaDataType_Names::Source_Name, false);
  if (accessor.hasStationCode()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getStationCode(), node, WeatherAreaDataType_Names::StationCode_Name);
  }
  if (accessor.hasTemperature()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getTemperature(), node, WeatherAreaDataType_Names::Temperature_Name);
  }
  if (accessor.hasPrecipitationPotential()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getPrecipitationPotential(), node, WeatherAreaDataType_Names::PrecipitationPotential_Name);
  }
  if (accessor.hasPrecipitationAmount()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getPrecipitationAmount(), node, WeatherAreaDataType_Names::PrecipitationAmount_Name);
  }
  if (accessor.hasTypeOfPrecipitation()) {
    WeatherPrecipitationEnum::serialize(accessor.getTypeOfPrecipitation(), node, WeatherAreaDataType_Names::TypeOfPrecipitation_Name, false);
  }
  if (accessor.hasPrecipitationAmplification()) {
    WeatherPrecipitationAmplificationEnum::serialize(accessor.getPrecipitationAmplification(), node, WeatherAreaDataType_Names::PrecipitationAmplification_Name, false);
  }
  if (accessor.hasVisibility()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getVisibility(), node, WeatherAreaDataType_Names::Visibility_Name);
  }
  if (accessor.hasVisibilityStatus()) {
    WeatherVisibilityEnum::serialize(accessor.getVisibilityStatus(), node, WeatherAreaDataType_Names::VisibilityStatus_Name, false);
  }
  if (accessor.hasDewPoint()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getDewPoint(), node, WeatherAreaDataType_Names::DewPoint_Name);
  }
  {
    const uci::type::WeatherAreaDataType::Clouds& boundedList = accessor.getClouds();
    for (uci::type::WeatherAreaDataType::Clouds::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CloudsType::serialize(boundedList.at(i), node, WeatherAreaDataType_Names::Clouds_Name);
    }
  }
  if (accessor.hasWeatherEffects()) {
    WeatherEffectsType::serialize(accessor.getWeatherEffects(), node, WeatherAreaDataType_Names::WeatherEffects_Name);
  }
  if (accessor.hasBarometricPressure()) {
    extjson_uci::util::SerializationHelpers::serializeFloat(accessor.getBarometricPressure(), node, WeatherAreaDataType_Names::BarometricPressure_Name);
  }
  if (accessor.hasKollsmanSetting()) {
    extjson_uci::util::SerializationHelpers::serializeFloat(accessor.getKollsmanSetting(), node, WeatherAreaDataType_Names::KollsmanSetting_Name);
  }
  if (accessor.hasIcing()) {
    WeatherSeverityEnum::serialize(accessor.getIcing(), node, WeatherAreaDataType_Names::Icing_Name, false);
  }
  if (accessor.hasTurbulence()) {
    WeatherSeverityEnum::serialize(accessor.getTurbulence(), node, WeatherAreaDataType_Names::Turbulence_Name, false);
  }
  if (accessor.hasThunderstormPotential()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getThunderstormPotential(), node, WeatherAreaDataType_Names::ThunderstormPotential_Name);
  }
  if (accessor.hasRemarks()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getRemarks(), node, WeatherAreaDataType_Names::Remarks_Name);
  }
  if (accessor.hasKind()) {
    WeatherKindEnum::serialize(accessor.getKind(), node, WeatherAreaDataType_Names::Kind_Name, false);
  }
  if (accessor.hasDescription()) {
    WeatherDescriptionEnum::serialize(accessor.getDescription(), node, WeatherAreaDataType_Names::Description_Name, false);
  }
  if (accessor.hasQualifier()) {
    WeatherSeverityEnum::serialize(accessor.getQualifier(), node, WeatherAreaDataType_Names::Qualifier_Name, false);
  }
  if (accessor.hasWindData()) {
    WindDataType::serialize(accessor.getWindData(), node, WeatherAreaDataType_Names::WindData_Name);
  }
  if (accessor.hasRelativeHumidity()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getRelativeHumidity(), node, WeatherAreaDataType_Names::RelativeHumidity_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

