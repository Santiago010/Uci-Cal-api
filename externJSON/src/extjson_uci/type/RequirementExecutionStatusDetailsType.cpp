/** @file RequirementExecutionStatusDetailsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/RequirementExecutionStatusDetailsType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/CannotComplyType.h"
#include "extjson_uci/type/MetricsType.h"
#include "extjson_uci/type/RequirementExecutionStateEnum.h"
#include "extjson_uci/type/RequirementStatusTraceabilityType.h"
#include "extjson_uci/type/RequirementTimingType.h"
#include "extjson_uci/type/SystemID_Type.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/DerivedTypesSerializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/RequirementExecutionStatusDetailsType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace RequirementExecutionStatusDetailsType_Names {

constexpr const char* Extern_Type_Name{"RequirementExecutionStatusDetailsType"};
constexpr const char* ExecutingSystemID_Name{"ExecutingSystemID"};
constexpr const char* ExecutionState_Name{"ExecutionState"};
constexpr const char* ExecutionStateReason_Name{"ExecutionStateReason"};
constexpr const char* ActualTiming_Name{"ActualTiming"};
constexpr const char* PercentCompleted_Name{"PercentCompleted"};
constexpr const char* Traceability_Name{"Traceability"};
constexpr const char* Metrics_Name{"Metrics"};

} // namespace RequirementExecutionStatusDetailsType_Names

bool RequirementExecutionStatusDetailsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RequirementExecutionStatusDetailsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RequirementExecutionStatusDetailsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + RequirementExecutionStatusDetailsType_Names::ExecutingSystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getExecutingSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementExecutionStatusDetailsType_Names::ExecutionState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getExecutionState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RequirementExecutionStatusDetailsType_Names::ExecutionStateReason_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableExecutionStateReason(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementExecutionStatusDetailsType_Names::ActualTiming_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RequirementExecutionStatusDetailsType::ActualTiming& boundedList = accessor.getActualTiming();
        const uci::type::RequirementExecutionStatusDetailsType::ActualTiming::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        RequirementTimingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RequirementExecutionStatusDetailsType_Names::PercentCompleted_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentCompleted(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RequirementExecutionStatusDetailsType_Names::Traceability_Name) {
      RequirementStatusTraceabilityType::deserialize(valueType.second, accessor.enableTraceability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RequirementExecutionStatusDetailsType_Names::Metrics_Name) {
      MetricsType::deserialize(valueType.second, accessor.enableMetrics(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string RequirementExecutionStatusDetailsType::serialize(const uci::type::RequirementExecutionStatusDetailsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? RequirementExecutionStatusDetailsType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::requirementExecutionStatusDetailsType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extjson_uci::util::SerializationHelpers::addTypeAttribute(node, RequirementExecutionStatusDetailsType_Names::Extern_Type_Name);
    }
    SystemID_Type::serialize(accessor.getExecutingSystemID(), node, RequirementExecutionStatusDetailsType_Names::ExecutingSystemID_Name);
    RequirementExecutionStateEnum::serialize(accessor.getExecutionState(), node, RequirementExecutionStatusDetailsType_Names::ExecutionState_Name, false);
    if (accessor.hasExecutionStateReason()) {
      CannotComplyType::serialize(accessor.getExecutionStateReason(), node, RequirementExecutionStatusDetailsType_Names::ExecutionStateReason_Name);
    }
    {
      const uci::type::RequirementExecutionStatusDetailsType::ActualTiming& boundedList = accessor.getActualTiming();
      for (uci::type::RequirementExecutionStatusDetailsType::ActualTiming::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        RequirementTimingType::serialize(boundedList.at(i), node, RequirementExecutionStatusDetailsType_Names::ActualTiming_Name);
      }
    }
    if (accessor.hasPercentCompleted()) {
      extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentCompleted(), node, RequirementExecutionStatusDetailsType_Names::PercentCompleted_Name);
    }
    if (accessor.hasTraceability()) {
      RequirementStatusTraceabilityType::serialize(accessor.getTraceability(), node, RequirementExecutionStatusDetailsType_Names::Traceability_Name);
    }
    if (accessor.hasMetrics()) {
      MetricsType::serialize(accessor.getMetrics(), node, RequirementExecutionStatusDetailsType_Names::Metrics_Name);
    }
    if (createNode) {
      propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
    }
  } else {
    extjson_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

