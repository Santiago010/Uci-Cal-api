/** @file ObservationMeasurementSourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/ObservationMeasurementSourceType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ElementDetailsType.h"
#include "extjson_uci/type/FOV_ExtentType.h"
#include "extjson_uci/type/MeasurementReportSourceTypeEnum.h"
#include "extjson_uci/type/MeasurementSourceIdentityType.h"
#include "extjson_uci/type/NameValuePairType.h"
#include "extjson_uci/type/ProductMetadataID_Type.h"
#include "extjson_uci/type/SourceCharacteristicsType.h"
#include "extjson_uci/type/SourceCoverageType.h"
#include "extjson_uci/type/SourceResolutionType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/ObservationMeasurementSourceType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace ObservationMeasurementSourceType_Names {

constexpr const char* Extern_Type_Name{"ObservationMeasurementSourceType"};
constexpr const char* ElementDetails_Name{"ElementDetails"};
constexpr const char* SourceIdentity_Name{"SourceIdentity"};
constexpr const char* SourceType_Name{"SourceType"};
constexpr const char* SourceCoverage_Name{"SourceCoverage"};
constexpr const char* SourceAngularExtent_Name{"SourceAngularExtent"};
constexpr const char* SourceResolution_Name{"SourceResolution"};
constexpr const char* SourceSpecifiedCharacteristics_Name{"SourceSpecifiedCharacteristics"};
constexpr const char* NumberOfLocalTracksReported_Name{"NumberOfLocalTracksReported"};
constexpr const char* NumberOfIndependentMeasurements_Name{"NumberOfIndependentMeasurements"};
constexpr const char* ProductMetadataID_Name{"ProductMetadataID"};
constexpr const char* CustomCharacteristics_Name{"CustomCharacteristics"};

} // namespace ObservationMeasurementSourceType_Names

bool ObservationMeasurementSourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ObservationMeasurementSourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ObservationMeasurementSourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::ElementDetails_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ObservationMeasurementSourceType::ElementDetails& boundedList = accessor.getElementDetails();
        const uci::type::ObservationMeasurementSourceType::ElementDetails::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ElementDetailsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::SourceIdentity_Name) {
      MeasurementSourceIdentityType::deserialize(valueType.second, accessor.enableSourceIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::SourceType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSourceType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::SourceCoverage_Name) {
      SourceCoverageType::deserialize(valueType.second, accessor.enableSourceCoverage(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::SourceAngularExtent_Name) {
      FOV_ExtentType::deserialize(valueType.second, accessor.enableSourceAngularExtent(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::SourceResolution_Name) {
      SourceResolutionType::deserialize(valueType.second, accessor.enableSourceResolution(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::SourceSpecifiedCharacteristics_Name) {
      SourceCharacteristicsType::deserialize(valueType.second, accessor.enableSourceSpecifiedCharacteristics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::NumberOfLocalTracksReported_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfLocalTracksReported(extjson_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::NumberOfIndependentMeasurements_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfIndependentMeasurements(extjson_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::ProductMetadataID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ObservationMeasurementSourceType::ProductMetadataID& boundedList = accessor.getProductMetadataID();
        const uci::type::ObservationMeasurementSourceType::ProductMetadataID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ProductMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ObservationMeasurementSourceType_Names::CustomCharacteristics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ObservationMeasurementSourceType::CustomCharacteristics& boundedList = accessor.getCustomCharacteristics();
        const uci::type::ObservationMeasurementSourceType::CustomCharacteristics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string ObservationMeasurementSourceType::serialize(const uci::type::ObservationMeasurementSourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? ObservationMeasurementSourceType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, ObservationMeasurementSourceType_Names::Extern_Type_Name);
  }
  {
    const uci::type::ObservationMeasurementSourceType::ElementDetails& boundedList = accessor.getElementDetails();
    for (uci::type::ObservationMeasurementSourceType::ElementDetails::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ElementDetailsType::serialize(boundedList.at(i), node, ObservationMeasurementSourceType_Names::ElementDetails_Name);
    }
  }
  if (accessor.hasSourceIdentity()) {
    MeasurementSourceIdentityType::serialize(accessor.getSourceIdentity(), node, ObservationMeasurementSourceType_Names::SourceIdentity_Name);
  }
  if (accessor.hasSourceType()) {
    MeasurementReportSourceTypeEnum::serialize(accessor.getSourceType(), node, ObservationMeasurementSourceType_Names::SourceType_Name, false);
  }
  if (accessor.hasSourceCoverage()) {
    SourceCoverageType::serialize(accessor.getSourceCoverage(), node, ObservationMeasurementSourceType_Names::SourceCoverage_Name);
  }
  if (accessor.hasSourceAngularExtent()) {
    FOV_ExtentType::serialize(accessor.getSourceAngularExtent(), node, ObservationMeasurementSourceType_Names::SourceAngularExtent_Name);
  }
  if (accessor.hasSourceResolution()) {
    SourceResolutionType::serialize(accessor.getSourceResolution(), node, ObservationMeasurementSourceType_Names::SourceResolution_Name);
  }
  if (accessor.hasSourceSpecifiedCharacteristics()) {
    SourceCharacteristicsType::serialize(accessor.getSourceSpecifiedCharacteristics(), node, ObservationMeasurementSourceType_Names::SourceSpecifiedCharacteristics_Name);
  }
  if (accessor.hasNumberOfLocalTracksReported()) {
    extjson_uci::util::SerializationHelpers::serializeInt(accessor.getNumberOfLocalTracksReported(), node, ObservationMeasurementSourceType_Names::NumberOfLocalTracksReported_Name);
  }
  if (accessor.hasNumberOfIndependentMeasurements()) {
    extjson_uci::util::SerializationHelpers::serializeInt(accessor.getNumberOfIndependentMeasurements(), node, ObservationMeasurementSourceType_Names::NumberOfIndependentMeasurements_Name);
  }
  {
    const uci::type::ObservationMeasurementSourceType::ProductMetadataID& boundedList = accessor.getProductMetadataID();
    for (uci::type::ObservationMeasurementSourceType::ProductMetadataID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ProductMetadataID_Type::serialize(boundedList.at(i), node, ObservationMeasurementSourceType_Names::ProductMetadataID_Name);
    }
  }
  {
    const uci::type::ObservationMeasurementSourceType::CustomCharacteristics& boundedList = accessor.getCustomCharacteristics();
    for (uci::type::ObservationMeasurementSourceType::CustomCharacteristics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      NameValuePairType::serialize(boundedList.at(i), node, ObservationMeasurementSourceType_Names::CustomCharacteristics_Name);
    }
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

