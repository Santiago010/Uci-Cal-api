/** @file CS_CapabilitiesType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/CS_CapabilitiesType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/CS_ObscuraDataType.h"
#include "extjson_uci/type/CS_SensorDataType.h"
#include "extjson_uci/type/ForeignKeyType.h"
#include "extjson_uci/type/FrequencyRangeType.h"
#include "extjson_uci/type/ModulationEnum.h"
#include "extjson_uci/type/Point3D_Type.h"
#include "extjson_uci/type/PolarizationEnum.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/CS_CapabilitiesType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace CS_CapabilitiesType_Names {

constexpr const char* Extern_Type_Name{"CS_CapabilitiesType"};
constexpr const char* SubCapabilityName_Name{"SubCapabilityName"};
constexpr const char* Dependency_Name{"Dependency"};
constexpr const char* TxFrequency_Name{"TxFrequency"};
constexpr const char* TxBandwidth_Name{"TxBandwidth"};
constexpr const char* Power_Name{"Power"};
constexpr const char* RxFrequency_Name{"RxFrequency"};
constexpr const char* RxBandwidth_Name{"RxBandwidth"};
constexpr const char* AzSlewRate_Name{"AzSlewRate"};
constexpr const char* ElSlewRate_Name{"ElSlewRate"};
constexpr const char* MinElevation_Name{"MinElevation"};
constexpr const char* MaxElevation_Name{"MaxElevation"};
constexpr const char* Capacity_Name{"Capacity"};
constexpr const char* Location_Name{"Location"};
constexpr const char* Modulation_Name{"Modulation"};
constexpr const char* Polarization_Name{"Polarization"};
constexpr const char* ObscuraData_Name{"ObscuraData"};
constexpr const char* SensorData_Name{"SensorData"};

} // namespace CS_CapabilitiesType_Names

bool CS_CapabilitiesType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CS_CapabilitiesType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CS_CapabilitiesType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::SubCapabilityName_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSubCapabilityName(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::Dependency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDependency(extjson_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::TxFrequency_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.enableTxFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::TxBandwidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTxBandwidth(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::Power_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPower(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::RxFrequency_Name) {
      FrequencyRangeType::deserialize(valueType.second, accessor.enableRxFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::RxBandwidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRxBandwidth(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::AzSlewRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzSlewRate(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::ElSlewRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setElSlewRate(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::MinElevation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinElevation(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::MaxElevation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaxElevation(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::Capacity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCapacity(extjson_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::Location_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableLocation(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::Modulation_Name) {
      ModulationEnum::deserializeList(valueType.second, accessor.getModulation());
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::Polarization_Name) {
      PolarizationEnum::deserializeList(valueType.second, accessor.getPolarization());
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::ObscuraData_Name) {
      CS_ObscuraDataType::deserialize(valueType.second, accessor.enableObscuraData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CS_CapabilitiesType_Names::SensorData_Name) {
      CS_SensorDataType::deserialize(valueType.second, accessor.enableSensorData(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string CS_CapabilitiesType::serialize(const uci::type::CS_CapabilitiesType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? CS_CapabilitiesType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, CS_CapabilitiesType_Names::Extern_Type_Name);
  }
  ForeignKeyType::serialize(accessor.getSubCapabilityName(), node, CS_CapabilitiesType_Names::SubCapabilityName_Name);
  if (accessor.hasDependency()) {
    extjson_uci::util::SerializationHelpers::serializeInt(accessor.getDependency(), node, CS_CapabilitiesType_Names::Dependency_Name);
  }
  if (accessor.hasTxFrequency()) {
    FrequencyRangeType::serialize(accessor.getTxFrequency(), node, CS_CapabilitiesType_Names::TxFrequency_Name);
  }
  if (accessor.hasTxBandwidth()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getTxBandwidth(), node, CS_CapabilitiesType_Names::TxBandwidth_Name);
  }
  if (accessor.hasPower()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getPower(), node, CS_CapabilitiesType_Names::Power_Name);
  }
  if (accessor.hasRxFrequency()) {
    FrequencyRangeType::serialize(accessor.getRxFrequency(), node, CS_CapabilitiesType_Names::RxFrequency_Name);
  }
  if (accessor.hasRxBandwidth()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getRxBandwidth(), node, CS_CapabilitiesType_Names::RxBandwidth_Name);
  }
  if (accessor.hasAzSlewRate()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getAzSlewRate(), node, CS_CapabilitiesType_Names::AzSlewRate_Name);
  }
  if (accessor.hasElSlewRate()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getElSlewRate(), node, CS_CapabilitiesType_Names::ElSlewRate_Name);
  }
  if (accessor.hasMinElevation()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getMinElevation(), node, CS_CapabilitiesType_Names::MinElevation_Name);
  }
  if (accessor.hasMaxElevation()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getMaxElevation(), node, CS_CapabilitiesType_Names::MaxElevation_Name);
  }
  if (accessor.hasCapacity()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getCapacity(), node, CS_CapabilitiesType_Names::Capacity_Name);
  }
  if (accessor.hasLocation()) {
    Point3D_Type::serialize(accessor.getLocation(), node, CS_CapabilitiesType_Names::Location_Name);
  }
  {
    ModulationEnum::serializeList(accessor.getModulation(), node, CS_CapabilitiesType_Names::Modulation_Name);
  }
  {
    PolarizationEnum::serializeList(accessor.getPolarization(), node, CS_CapabilitiesType_Names::Polarization_Name);
  }
  if (accessor.hasObscuraData()) {
    CS_ObscuraDataType::serialize(accessor.getObscuraData(), node, CS_CapabilitiesType_Names::ObscuraData_Name);
  }
  if (accessor.hasSensorData()) {
    CS_SensorDataType::serialize(accessor.getSensorData(), node, CS_CapabilitiesType_Names::SensorData_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

