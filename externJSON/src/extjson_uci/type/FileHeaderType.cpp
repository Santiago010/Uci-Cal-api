/** @file FileHeaderType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/FileHeaderType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/CountryCodeType.h"
#include "extjson_uci/type/FileDeclassificationEnum.h"
#include "extjson_uci/type/SAR_CollectionReasonEnum.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/FileHeaderType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace FileHeaderType_Names {

constexpr const char* Extern_Type_Name{"FileHeaderType"};
constexpr const char* CountryCode_Name{"CountryCode"};
constexpr const char* SceneSource_Name{"SceneSource"};
constexpr const char* OriginatingStationIdentifier_Name{"OriginatingStationIdentifier"};
constexpr const char* CollectionIdentifier_Name{"CollectionIdentifier"};
constexpr const char* FileTitle_Name{"FileTitle"};
constexpr const char* OriginatorsName_Name{"OriginatorsName"};
constexpr const char* OriginatorsPhone_Name{"OriginatorsPhone"};
constexpr const char* FileClassificationSystem_Name{"FileClassificationSystem"};
constexpr const char* FileSecurityControlNumber_Name{"FileSecurityControlNumber"};
constexpr const char* FileControlAndHandling_Name{"FileControlAndHandling"};
constexpr const char* FileDeclassificationType_Name{"FileDeclassificationType"};
constexpr const char* FileClassificationAuthorityType_Name{"FileClassificationAuthorityType"};
constexpr const char* FileDowngrade_Name{"FileDowngrade"};
constexpr const char* FileSecuritySourceDate_Name{"FileSecuritySourceDate"};

} // namespace FileHeaderType_Names

bool FileHeaderType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FileHeaderType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FileHeaderType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + FileHeaderType_Names::CountryCode_Name) {
      CountryCodeType::deserialize(valueType.second, accessor.enableCountryCode(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + FileHeaderType_Names::SceneSource_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSceneSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderType_Names::OriginatingStationIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOriginatingStationIdentifier(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderType_Names::CollectionIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCollectionIdentifier(extjson_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + FileHeaderType_Names::FileTitle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileTitle(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderType_Names::OriginatorsName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOriginatorsName(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderType_Names::OriginatorsPhone_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOriginatorsPhone(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderType_Names::FileClassificationSystem_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileClassificationSystem(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderType_Names::FileSecurityControlNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileSecurityControlNumber(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderType_Names::FileControlAndHandling_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileControlAndHandling(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderType_Names::FileDeclassificationType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFileDeclassificationType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderType_Names::FileClassificationAuthorityType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileClassificationAuthorityType(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderType_Names::FileDowngrade_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileDowngrade(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderType_Names::FileSecuritySourceDate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileSecuritySourceDate(*value);
      }
    }
  }
  return true;
}

std::string FileHeaderType::serialize(const uci::type::FileHeaderType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? FileHeaderType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, FileHeaderType_Names::Extern_Type_Name);
  }
  if (accessor.hasCountryCode()) {
    CountryCodeType::serialize(accessor.getCountryCode(), node, FileHeaderType_Names::CountryCode_Name);
  }
  if (accessor.hasSceneSource()) {
    SAR_CollectionReasonEnum::serialize(accessor.getSceneSource(), node, FileHeaderType_Names::SceneSource_Name, false);
  }
  if (accessor.hasOriginatingStationIdentifier()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getOriginatingStationIdentifier(), node, FileHeaderType_Names::OriginatingStationIdentifier_Name);
  }
  if (accessor.hasCollectionIdentifier()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getCollectionIdentifier(), node, FileHeaderType_Names::CollectionIdentifier_Name);
  }
  if (accessor.hasFileTitle()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getFileTitle(), node, FileHeaderType_Names::FileTitle_Name);
  }
  if (accessor.hasOriginatorsName()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getOriginatorsName(), node, FileHeaderType_Names::OriginatorsName_Name);
  }
  if (accessor.hasOriginatorsPhone()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getOriginatorsPhone(), node, FileHeaderType_Names::OriginatorsPhone_Name);
  }
  if (accessor.hasFileClassificationSystem()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getFileClassificationSystem(), node, FileHeaderType_Names::FileClassificationSystem_Name);
  }
  if (accessor.hasFileSecurityControlNumber()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getFileSecurityControlNumber(), node, FileHeaderType_Names::FileSecurityControlNumber_Name);
  }
  if (accessor.hasFileControlAndHandling()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getFileControlAndHandling(), node, FileHeaderType_Names::FileControlAndHandling_Name);
  }
  if (accessor.hasFileDeclassificationType()) {
    FileDeclassificationEnum::serialize(accessor.getFileDeclassificationType(), node, FileHeaderType_Names::FileDeclassificationType_Name, false);
  }
  if (accessor.hasFileClassificationAuthorityType()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getFileClassificationAuthorityType(), node, FileHeaderType_Names::FileClassificationAuthorityType_Name);
  }
  if (accessor.hasFileDowngrade()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getFileDowngrade(), node, FileHeaderType_Names::FileDowngrade_Name);
  }
  if (accessor.hasFileSecuritySourceDate()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getFileSecuritySourceDate(), node, FileHeaderType_Names::FileSecuritySourceDate_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

