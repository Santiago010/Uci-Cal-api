/** @file OrbitMetricsMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/OrbitMetricsMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ActivityPlanPartsEnum.h"
#include "extjson_uci/type/OrbitActivityMetricsType.h"
#include "extjson_uci/type/OrbitActivityPlanID_Type.h"
#include "extjson_uci/type/OrbitManeuverSegmentMetricsType.h"
#include "extjson_uci/type/OrbitManeuverSequenceMetricsType.h"
#include "extjson_uci/type/OrbitMetricsID_Type.h"
#include "extjson_uci/type/OrbitPlanID_Type.h"
#include "extjson_uci/type/OrbitPlanPartsEnum.h"
#include "extjson_uci/type/SatelliteEnduranceType.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/OrbitMetricsMDT.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace OrbitMetricsMDT_Names {

constexpr const char* Extern_Type_Name{"OrbitMetricsMDT"};
constexpr const char* MetricsID_Name{"MetricsID"};
constexpr const char* OrbitPlanID_Name{"OrbitPlanID"};
constexpr const char* OrbitParts_Name{"OrbitParts"};
constexpr const char* OrbitActivityPlanID_Name{"OrbitActivityPlanID"};
constexpr const char* ActivityParts_Name{"ActivityParts"};
constexpr const char* OrbitMetrics_Name{"OrbitMetrics"};
constexpr const char* SequenceMetrics_Name{"SequenceMetrics"};
constexpr const char* SegmentMetrics_Name{"SegmentMetrics"};
constexpr const char* OrbitActivityMetrics_Name{"OrbitActivityMetrics"};

} // namespace OrbitMetricsMDT_Names

bool OrbitMetricsMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitMetricsMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitMetricsMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::MetricsID_Name) {
      OrbitMetricsID_Type::deserialize(valueType.second, accessor.getMetricsID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::OrbitPlanID_Name) {
      OrbitPlanID_Type::deserialize(valueType.second, accessor.getOrbitPlanID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::OrbitParts_Name) {
      OrbitPlanPartsEnum::deserializeList(valueType.second, accessor.getOrbitParts());
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::OrbitActivityPlanID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitMetricsMDT::OrbitActivityPlanID& boundedList = accessor.getOrbitActivityPlanID();
        const uci::type::OrbitMetricsMDT::OrbitActivityPlanID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        OrbitActivityPlanID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::ActivityParts_Name) {
      ActivityPlanPartsEnum::deserializeList(valueType.second, accessor.getActivityParts());
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::OrbitMetrics_Name) {
      SatelliteEnduranceType::deserialize(valueType.second, accessor.enableOrbitMetrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::SequenceMetrics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitMetricsMDT::SequenceMetrics& boundedList = accessor.getSequenceMetrics();
        const uci::type::OrbitMetricsMDT::SequenceMetrics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        OrbitManeuverSequenceMetricsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::SegmentMetrics_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitMetricsMDT::SegmentMetrics& boundedList = accessor.getSegmentMetrics();
        const uci::type::OrbitMetricsMDT::SegmentMetrics::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        OrbitManeuverSegmentMetricsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitMetricsMDT_Names::OrbitActivityMetrics_Name) {
      OrbitActivityMetricsType::deserialize(valueType.second, accessor.enableOrbitActivityMetrics(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string OrbitMetricsMDT::serialize(const uci::type::OrbitMetricsMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? OrbitMetricsMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitMetricsMDT_Names::Extern_Type_Name);
  }
  OrbitMetricsID_Type::serialize(accessor.getMetricsID(), node, OrbitMetricsMDT_Names::MetricsID_Name);
  OrbitPlanID_Type::serialize(accessor.getOrbitPlanID(), node, OrbitMetricsMDT_Names::OrbitPlanID_Name);
  {
    OrbitPlanPartsEnum::serializeList(accessor.getOrbitParts(), node, OrbitMetricsMDT_Names::OrbitParts_Name);
  }
  {
    const uci::type::OrbitMetricsMDT::OrbitActivityPlanID& boundedList = accessor.getOrbitActivityPlanID();
    for (uci::type::OrbitMetricsMDT::OrbitActivityPlanID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitActivityPlanID_Type::serialize(boundedList.at(i), node, OrbitMetricsMDT_Names::OrbitActivityPlanID_Name);
    }
  }
  {
    ActivityPlanPartsEnum::serializeList(accessor.getActivityParts(), node, OrbitMetricsMDT_Names::ActivityParts_Name);
  }
  if (accessor.hasOrbitMetrics()) {
    SatelliteEnduranceType::serialize(accessor.getOrbitMetrics(), node, OrbitMetricsMDT_Names::OrbitMetrics_Name);
  }
  {
    const uci::type::OrbitMetricsMDT::SequenceMetrics& boundedList = accessor.getSequenceMetrics();
    for (uci::type::OrbitMetricsMDT::SequenceMetrics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitManeuverSequenceMetricsType::serialize(boundedList.at(i), node, OrbitMetricsMDT_Names::SequenceMetrics_Name);
    }
  }
  {
    const uci::type::OrbitMetricsMDT::SegmentMetrics& boundedList = accessor.getSegmentMetrics();
    for (uci::type::OrbitMetricsMDT::SegmentMetrics::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitManeuverSegmentMetricsType::serialize(boundedList.at(i), node, OrbitMetricsMDT_Names::SegmentMetrics_Name);
    }
  }
  if (accessor.hasOrbitActivityMetrics()) {
    OrbitActivityMetricsType::serialize(accessor.getOrbitActivityMetrics(), node, OrbitMetricsMDT_Names::OrbitActivityMetrics_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

