/** @file COMINT_SubcapabilityChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/COMINT_SubcapabilityChoiceType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/COMINT_SubcapabilityAcquisitionType.h"
#include "extjson_uci/type/COMINT_SubcapabilityDataCollectType.h"
#include "extjson_uci/type/COMINT_SubcapabilityGeolocationType.h"
#include "extjson_uci/type/COMINT_SubcapabilityIdentificationType.h"
#include "extjson_uci/type/COMINT_SubcapabilityMeasurementType.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/COMINT_SubcapabilityChoiceType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace COMINT_SubcapabilityChoiceType_Names {

constexpr const char* Extern_Type_Name{"COMINT_SubcapabilityChoiceType"};
constexpr const char* Acquisition_Name{"Acquisition"};
constexpr const char* Identification_Name{"Identification"};
constexpr const char* Geolocation_Name{"Geolocation"};
constexpr const char* Measurement_Name{"Measurement"};
constexpr const char* Data_Collect_Name{"Data_Collect"};

} // namespace COMINT_SubcapabilityChoiceType_Names

bool COMINT_SubcapabilityChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::COMINT_SubcapabilityChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = COMINT_SubcapabilityChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + COMINT_SubcapabilityChoiceType_Names::Acquisition_Name) {
      COMINT_SubcapabilityAcquisitionType::deserialize(valueType.second, accessor.chooseAcquisition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_SubcapabilityChoiceType_Names::Identification_Name) {
      COMINT_SubcapabilityIdentificationType::deserialize(valueType.second, accessor.chooseIdentification(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_SubcapabilityChoiceType_Names::Geolocation_Name) {
      COMINT_SubcapabilityGeolocationType::deserialize(valueType.second, accessor.chooseGeolocation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_SubcapabilityChoiceType_Names::Measurement_Name) {
      COMINT_SubcapabilityMeasurementType::deserialize(valueType.second, accessor.chooseMeasurement(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_SubcapabilityChoiceType_Names::Data_Collect_Name) {
      COMINT_SubcapabilityDataCollectType::deserialize(valueType.second, accessor.chooseData_Collect(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string COMINT_SubcapabilityChoiceType::serialize(const uci::type::COMINT_SubcapabilityChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? COMINT_SubcapabilityChoiceType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, COMINT_SubcapabilityChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isAcquisition()) {
    COMINT_SubcapabilityAcquisitionType::serialize(accessor.getAcquisition(), node, COMINT_SubcapabilityChoiceType_Names::Acquisition_Name);
  } else if (accessor.isIdentification()) {
    COMINT_SubcapabilityIdentificationType::serialize(accessor.getIdentification(), node, COMINT_SubcapabilityChoiceType_Names::Identification_Name);
  } else if (accessor.isGeolocation()) {
    COMINT_SubcapabilityGeolocationType::serialize(accessor.getGeolocation(), node, COMINT_SubcapabilityChoiceType_Names::Geolocation_Name);
  } else if (accessor.isMeasurement()) {
    COMINT_SubcapabilityMeasurementType::serialize(accessor.getMeasurement(), node, COMINT_SubcapabilityChoiceType_Names::Measurement_Name);
  } else if (accessor.isData_Collect()) {
    COMINT_SubcapabilityDataCollectType::serialize(accessor.getData_Collect(), node, COMINT_SubcapabilityChoiceType_Names::Data_Collect_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

