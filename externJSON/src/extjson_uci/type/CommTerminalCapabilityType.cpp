/** @file CommTerminalCapabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/CommTerminalCapabilityType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/CommCapabilityEnum.h"
#include "extjson_uci/type/CommCapabilityOptionsType.h"
#include "extjson_uci/type/CommDataFormatEnum.h"
#include "extjson_uci/type/CommProfileID_Type.h"
#include "extjson_uci/type/CommUserIO_ID_Type.h"
#include "extjson_uci/type/CommUserLinkType.h"
#include "extjson_uci/type/CommandableCapabilityDeclarationType.h"
#include "extjson_uci/type/ComponentID_Type.h"
#include "extjson_uci/type/CryptoTypeEnum.h"
#include "extjson_uci/type/ForeignKeyType.h"
#include "extjson_uci/type/FrequencyRangeType.h"
#include "extjson_uci/type/MilliwattPowerRatioRangeType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/CommTerminalCapabilityType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace CommTerminalCapabilityType_Names {

constexpr const char* Extern_Type_Name{"CommTerminalCapabilityType"};
constexpr const char* CapabilityType_Name{"CapabilityType"};
constexpr const char* SubCapabilityType_Name{"SubCapabilityType"};
constexpr const char* CapabilityOptions_Name{"CapabilityOptions"};
constexpr const char* AvailableProfileID_Name{"AvailableProfileID"};
constexpr const char* DataFormat_Name{"DataFormat"};
constexpr const char* TerminalUniqueKey_Name{"TerminalUniqueKey"};
constexpr const char* TxPowerRange_Name{"TxPowerRange"};
constexpr const char* TransmitFrequencyRange_Name{"TransmitFrequencyRange"};
constexpr const char* ReceiveFrequencyRange_Name{"ReceiveFrequencyRange"};
constexpr const char* CryptoType_Name{"CryptoType"};
constexpr const char* AssociatedUserIO_ID_Name{"AssociatedUserIO_ID"};
constexpr const char* AssociatedUserLink_Name{"AssociatedUserLink"};
constexpr const char* AssociatedAntennaID_Name{"AssociatedAntennaID"};

} // namespace CommTerminalCapabilityType_Names

bool CommTerminalCapabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommTerminalCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommTerminalCapabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::CapabilityType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCapabilityType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::SubCapabilityType_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSubCapabilityType(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::CapabilityOptions_Name) {
      CommCapabilityOptionsType::deserialize(valueType.second, accessor.getCapabilityOptions(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::AvailableProfileID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityType::AvailableProfileID& boundedList = accessor.getAvailableProfileID();
        const uci::type::CommTerminalCapabilityType::AvailableProfileID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CommProfileID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::DataFormat_Name) {
      CommDataFormatEnum::deserializeList(valueType.second, accessor.getDataFormat());
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::TerminalUniqueKey_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableTerminalUniqueKey(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::TxPowerRange_Name) {
      MilliwattPowerRatioRangeType::deserialize(valueType.second, accessor.enableTxPowerRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::TransmitFrequencyRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityType::TransmitFrequencyRange& boundedList = accessor.getTransmitFrequencyRange();
        const uci::type::CommTerminalCapabilityType::TransmitFrequencyRange::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::ReceiveFrequencyRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange& boundedList = accessor.getReceiveFrequencyRange();
        const uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::CryptoType_Name) {
      CryptoTypeEnum::deserializeList(valueType.second, accessor.getCryptoType());
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::AssociatedUserIO_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID& boundedList = accessor.getAssociatedUserIO_ID();
        const uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CommUserIO_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::AssociatedUserLink_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityType::AssociatedUserLink& boundedList = accessor.getAssociatedUserLink();
        const uci::type::CommTerminalCapabilityType::AssociatedUserLink::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CommUserLinkType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommTerminalCapabilityType_Names::AssociatedAntennaID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommTerminalCapabilityType::AssociatedAntennaID& boundedList = accessor.getAssociatedAntennaID();
        const uci::type::CommTerminalCapabilityType::AssociatedAntennaID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ComponentID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  CommandableCapabilityDeclarationType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string CommTerminalCapabilityType::serialize(const uci::type::CommTerminalCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? CommTerminalCapabilityType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, CommTerminalCapabilityType_Names::Extern_Type_Name);
  }
  CommandableCapabilityDeclarationType::serialize(accessor, node, "", false, false, false);
  CommCapabilityEnum::serialize(accessor.getCapabilityType(), node, CommTerminalCapabilityType_Names::CapabilityType_Name, false);
  if (accessor.hasSubCapabilityType()) {
    ForeignKeyType::serialize(accessor.getSubCapabilityType(), node, CommTerminalCapabilityType_Names::SubCapabilityType_Name);
  }
  CommCapabilityOptionsType::serialize(accessor.getCapabilityOptions(), node, CommTerminalCapabilityType_Names::CapabilityOptions_Name);
  {
    const uci::type::CommTerminalCapabilityType::AvailableProfileID& boundedList = accessor.getAvailableProfileID();
    for (uci::type::CommTerminalCapabilityType::AvailableProfileID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CommProfileID_Type::serialize(boundedList.at(i), node, CommTerminalCapabilityType_Names::AvailableProfileID_Name);
    }
  }
  {
    CommDataFormatEnum::serializeList(accessor.getDataFormat(), node, CommTerminalCapabilityType_Names::DataFormat_Name);
  }
  if (accessor.hasTerminalUniqueKey()) {
    ForeignKeyType::serialize(accessor.getTerminalUniqueKey(), node, CommTerminalCapabilityType_Names::TerminalUniqueKey_Name);
  }
  if (accessor.hasTxPowerRange()) {
    MilliwattPowerRatioRangeType::serialize(accessor.getTxPowerRange(), node, CommTerminalCapabilityType_Names::TxPowerRange_Name);
  }
  {
    const uci::type::CommTerminalCapabilityType::TransmitFrequencyRange& boundedList = accessor.getTransmitFrequencyRange();
    for (uci::type::CommTerminalCapabilityType::TransmitFrequencyRange::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FrequencyRangeType::serialize(boundedList.at(i), node, CommTerminalCapabilityType_Names::TransmitFrequencyRange_Name);
    }
  }
  {
    const uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange& boundedList = accessor.getReceiveFrequencyRange();
    for (uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FrequencyRangeType::serialize(boundedList.at(i), node, CommTerminalCapabilityType_Names::ReceiveFrequencyRange_Name);
    }
  }
  {
    CryptoTypeEnum::serializeList(accessor.getCryptoType(), node, CommTerminalCapabilityType_Names::CryptoType_Name);
  }
  {
    const uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID& boundedList = accessor.getAssociatedUserIO_ID();
    for (uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CommUserIO_ID_Type::serialize(boundedList.at(i), node, CommTerminalCapabilityType_Names::AssociatedUserIO_ID_Name);
    }
  }
  {
    const uci::type::CommTerminalCapabilityType::AssociatedUserLink& boundedList = accessor.getAssociatedUserLink();
    for (uci::type::CommTerminalCapabilityType::AssociatedUserLink::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CommUserLinkType::serialize(boundedList.at(i), node, CommTerminalCapabilityType_Names::AssociatedUserLink_Name);
    }
  }
  {
    const uci::type::CommTerminalCapabilityType::AssociatedAntennaID& boundedList = accessor.getAssociatedAntennaID();
    for (uci::type::CommTerminalCapabilityType::AssociatedAntennaID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ComponentID_Type::serialize(boundedList.at(i), node, CommTerminalCapabilityType_Names::AssociatedAntennaID_Name);
    }
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

