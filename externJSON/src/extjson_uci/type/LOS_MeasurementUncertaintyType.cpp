/** @file LOS_MeasurementUncertaintyType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/LOS_MeasurementUncertaintyType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ArrivalDataUncertaintyType.h"
#include "extjson_uci/type/ConeAngleSlantRangeUncertaintyType.h"
#include "extjson_uci/type/ConeAngleUncertaintyType.h"
#include "extjson_uci/type/LOS_SlantRangeUncertaintyType.h"
#include "extjson_uci/type/LOS_VarianceAndCovarianceType.h"
#include "extjson_uci/type/SlantRangeUncertaintyType.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/LOS_MeasurementUncertaintyType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace LOS_MeasurementUncertaintyType_Names {

constexpr const char* Extern_Type_Name{"LOS_MeasurementUncertaintyType"};
constexpr const char* LOS_Uncertainty_Name{"LOS_Uncertainty"};
constexpr const char* ConeAngleUncertainty_Name{"ConeAngleUncertainty"};
constexpr const char* ArrivalDataUncertainty_Name{"ArrivalDataUncertainty"};
constexpr const char* SlantRangeUncertainty_Name{"SlantRangeUncertainty"};
constexpr const char* ConeAngleSlantRangeUncertainty_Name{"ConeAngleSlantRangeUncertainty"};
constexpr const char* LOS_SlantRangeUncertainty_Name{"LOS_SlantRangeUncertainty"};

} // namespace LOS_MeasurementUncertaintyType_Names

bool LOS_MeasurementUncertaintyType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LOS_MeasurementUncertaintyType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LOS_MeasurementUncertaintyType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + LOS_MeasurementUncertaintyType_Names::LOS_Uncertainty_Name) {
      LOS_VarianceAndCovarianceType::deserialize(valueType.second, accessor.enableLOS_Uncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementUncertaintyType_Names::ConeAngleUncertainty_Name) {
      ConeAngleUncertaintyType::deserialize(valueType.second, accessor.enableConeAngleUncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementUncertaintyType_Names::ArrivalDataUncertainty_Name) {
      ArrivalDataUncertaintyType::deserialize(valueType.second, accessor.enableArrivalDataUncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementUncertaintyType_Names::SlantRangeUncertainty_Name) {
      SlantRangeUncertaintyType::deserialize(valueType.second, accessor.enableSlantRangeUncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementUncertaintyType_Names::ConeAngleSlantRangeUncertainty_Name) {
      ConeAngleSlantRangeUncertaintyType::deserialize(valueType.second, accessor.enableConeAngleSlantRangeUncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LOS_MeasurementUncertaintyType_Names::LOS_SlantRangeUncertainty_Name) {
      LOS_SlantRangeUncertaintyType::deserialize(valueType.second, accessor.enableLOS_SlantRangeUncertainty(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string LOS_MeasurementUncertaintyType::serialize(const uci::type::LOS_MeasurementUncertaintyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? LOS_MeasurementUncertaintyType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, LOS_MeasurementUncertaintyType_Names::Extern_Type_Name);
  }
  if (accessor.hasLOS_Uncertainty()) {
    LOS_VarianceAndCovarianceType::serialize(accessor.getLOS_Uncertainty(), node, LOS_MeasurementUncertaintyType_Names::LOS_Uncertainty_Name);
  }
  if (accessor.hasConeAngleUncertainty()) {
    ConeAngleUncertaintyType::serialize(accessor.getConeAngleUncertainty(), node, LOS_MeasurementUncertaintyType_Names::ConeAngleUncertainty_Name);
  }
  if (accessor.hasArrivalDataUncertainty()) {
    ArrivalDataUncertaintyType::serialize(accessor.getArrivalDataUncertainty(), node, LOS_MeasurementUncertaintyType_Names::ArrivalDataUncertainty_Name);
  }
  if (accessor.hasSlantRangeUncertainty()) {
    SlantRangeUncertaintyType::serialize(accessor.getSlantRangeUncertainty(), node, LOS_MeasurementUncertaintyType_Names::SlantRangeUncertainty_Name);
  }
  if (accessor.hasConeAngleSlantRangeUncertainty()) {
    ConeAngleSlantRangeUncertaintyType::serialize(accessor.getConeAngleSlantRangeUncertainty(), node, LOS_MeasurementUncertaintyType_Names::ConeAngleSlantRangeUncertainty_Name);
  }
  if (accessor.hasLOS_SlantRangeUncertainty()) {
    LOS_SlantRangeUncertaintyType::serialize(accessor.getLOS_SlantRangeUncertainty(), node, LOS_MeasurementUncertaintyType_Names::LOS_SlantRangeUncertainty_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

