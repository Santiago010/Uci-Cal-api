/** @file MissionEnvironmentConstraintType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/MissionEnvironmentConstraintType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ConstrainedEntityType.h"
#include "extjson_uci/type/ConstrainedOpLineType.h"
#include "extjson_uci/type/ConstrainedOpPointType.h"
#include "extjson_uci/type/ConstrainedOpVolumeType.h"
#include "extjson_uci/type/ConstrainedOpZoneType.h"
#include "extjson_uci/type/ParameterAssertType.h"
#include "extjson_uci/type/RequirementRiskAdjustmentType.h"
#include "extjson_uci/type/SystemStatusMDT.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/MissionEnvironmentConstraintType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace MissionEnvironmentConstraintType_Names {

constexpr const char* Extern_Type_Name{"MissionEnvironmentConstraintType"};
constexpr const char* ConstrainedEntity_Name{"ConstrainedEntity"};
constexpr const char* ConstrainedOpPoint_Name{"ConstrainedOpPoint"};
constexpr const char* ConstrainedOpLine_Name{"ConstrainedOpLine"};
constexpr const char* ConstrainedOpZone_Name{"ConstrainedOpZone"};
constexpr const char* ConstrainedOpVolume_Name{"ConstrainedOpVolume"};
constexpr const char* System_Name{"System"};
constexpr const char* RiskAdjustment_Name{"RiskAdjustment"};
constexpr const char* Parameter_Name{"Parameter"};

} // namespace MissionEnvironmentConstraintType_Names

bool MissionEnvironmentConstraintType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionEnvironmentConstraintType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MissionEnvironmentConstraintType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + MissionEnvironmentConstraintType_Names::ConstrainedEntity_Name) {
      ConstrainedEntityType::deserialize(valueType.second, accessor.chooseConstrainedEntity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentConstraintType_Names::ConstrainedOpPoint_Name) {
      ConstrainedOpPointType::deserialize(valueType.second, accessor.chooseConstrainedOpPoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentConstraintType_Names::ConstrainedOpLine_Name) {
      ConstrainedOpLineType::deserialize(valueType.second, accessor.chooseConstrainedOpLine(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentConstraintType_Names::ConstrainedOpZone_Name) {
      ConstrainedOpZoneType::deserialize(valueType.second, accessor.chooseConstrainedOpZone(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentConstraintType_Names::ConstrainedOpVolume_Name) {
      ConstrainedOpVolumeType::deserialize(valueType.second, accessor.chooseConstrainedOpVolume(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentConstraintType_Names::System_Name) {
      SystemStatusMDT::deserialize(valueType.second, accessor.chooseSystem(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentConstraintType_Names::RiskAdjustment_Name) {
      RequirementRiskAdjustmentType::deserialize(valueType.second, accessor.chooseRiskAdjustment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentConstraintType_Names::Parameter_Name) {
      ParameterAssertType::deserialize(valueType.second, accessor.chooseParameter(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string MissionEnvironmentConstraintType::serialize(const uci::type::MissionEnvironmentConstraintType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? MissionEnvironmentConstraintType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, MissionEnvironmentConstraintType_Names::Extern_Type_Name);
  }
  if (accessor.isConstrainedEntity()) {
    ConstrainedEntityType::serialize(accessor.getConstrainedEntity(), node, MissionEnvironmentConstraintType_Names::ConstrainedEntity_Name);
  } else if (accessor.isConstrainedOpPoint()) {
    ConstrainedOpPointType::serialize(accessor.getConstrainedOpPoint(), node, MissionEnvironmentConstraintType_Names::ConstrainedOpPoint_Name);
  } else if (accessor.isConstrainedOpLine()) {
    ConstrainedOpLineType::serialize(accessor.getConstrainedOpLine(), node, MissionEnvironmentConstraintType_Names::ConstrainedOpLine_Name);
  } else if (accessor.isConstrainedOpZone()) {
    ConstrainedOpZoneType::serialize(accessor.getConstrainedOpZone(), node, MissionEnvironmentConstraintType_Names::ConstrainedOpZone_Name);
  } else if (accessor.isConstrainedOpVolume()) {
    ConstrainedOpVolumeType::serialize(accessor.getConstrainedOpVolume(), node, MissionEnvironmentConstraintType_Names::ConstrainedOpVolume_Name);
  } else if (accessor.isSystem()) {
    SystemStatusMDT::serialize(accessor.getSystem(), node, MissionEnvironmentConstraintType_Names::System_Name);
  } else if (accessor.isRiskAdjustment()) {
    RequirementRiskAdjustmentType::serialize(accessor.getRiskAdjustment(), node, MissionEnvironmentConstraintType_Names::RiskAdjustment_Name);
  } else if (accessor.isParameter()) {
    ParameterAssertType::serialize(accessor.getParameter(), node, MissionEnvironmentConstraintType_Names::Parameter_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

