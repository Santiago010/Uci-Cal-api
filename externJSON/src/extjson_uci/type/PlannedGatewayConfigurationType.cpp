/** @file PlannedGatewayConfigurationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/PlannedGatewayConfigurationType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ActivityID_Type.h"
#include "extjson_uci/type/CapabilityID_Type.h"
#include "extjson_uci/type/CommConfigurationID_Type.h"
#include "extjson_uci/type/CommConfigurationStateEnum.h"
#include "extjson_uci/type/CommProfileID_Type.h"
#include "extjson_uci/type/GatewayConfigurationPET.h"
#include "extjson_uci/type/GatewayLinkDestinationType.h"
#include "extjson_uci/type/MDF_CommandType.h"
#include "extjson_uci/type/MessageConfigurationType.h"
#include "extjson_uci/type/ProductDisseminationDestinationID_Type.h"
#include "extjson_uci/type/ServiceID_Type.h"
#include "extjson_uci/type/SystemID_Type.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/PlannedGatewayConfigurationType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PlannedGatewayConfigurationType_Names {

constexpr const char* Extern_Type_Name{"PlannedGatewayConfigurationType"};
constexpr const char* GatewayServiceID_Name{"GatewayServiceID"};
constexpr const char* ConfigurationID_Name{"ConfigurationID"};
constexpr const char* ConfigurationState_Name{"ConfigurationState"};
constexpr const char* ActivateMDF_Name{"ActivateMDF"};
constexpr const char* ActivateProfileID_Name{"ActivateProfileID"};
constexpr const char* GatewayCapabilityID_Name{"GatewayCapabilityID"};
constexpr const char* GatewayActivityID_Name{"GatewayActivityID"};
constexpr const char* GatewayLinkDestination_Name{"GatewayLinkDestination"};
constexpr const char* MessageConfiguration_Name{"MessageConfiguration"};
constexpr const char* ProductDisseminationIngressSystemID_Name{"ProductDisseminationIngressSystemID"};
constexpr const char* ProductDisseminationEgressDestinationID_Name{"ProductDisseminationEgressDestinationID"};
constexpr const char* GatewaySpecificSettings_Name{"GatewaySpecificSettings"};

} // namespace PlannedGatewayConfigurationType_Names

bool PlannedGatewayConfigurationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlannedGatewayConfigurationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlannedGatewayConfigurationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::GatewayServiceID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlannedGatewayConfigurationType::GatewayServiceID& boundedList = accessor.getGatewayServiceID();
        const uci::type::PlannedGatewayConfigurationType::GatewayServiceID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ServiceID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::ConfigurationID_Name) {
      CommConfigurationID_Type::deserialize(valueType.second, accessor.getConfigurationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::ConfigurationState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getConfigurationState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::ActivateMDF_Name) {
      MDF_CommandType::deserialize(valueType.second, accessor.enableActivateMDF(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::ActivateProfileID_Name) {
      CommProfileID_Type::deserialize(valueType.second, accessor.enableActivateProfileID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::GatewayCapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableGatewayCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::GatewayActivityID_Name) {
      ActivityID_Type::deserialize(valueType.second, accessor.enableGatewayActivityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::GatewayLinkDestination_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination& boundedList = accessor.getGatewayLinkDestination();
        const uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        GatewayLinkDestinationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::MessageConfiguration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlannedGatewayConfigurationType::MessageConfiguration& boundedList = accessor.getMessageConfiguration();
        const uci::type::PlannedGatewayConfigurationType::MessageConfiguration::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        MessageConfigurationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::ProductDisseminationIngressSystemID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID& boundedList = accessor.getProductDisseminationIngressSystemID();
        const uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::ProductDisseminationEgressDestinationID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID& boundedList = accessor.getProductDisseminationEgressDestinationID();
        const uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ProductDisseminationDestinationID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlannedGatewayConfigurationType_Names::GatewaySpecificSettings_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableGatewaySpecificSettings(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string PlannedGatewayConfigurationType::serialize(const uci::type::PlannedGatewayConfigurationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PlannedGatewayConfigurationType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, PlannedGatewayConfigurationType_Names::Extern_Type_Name);
  }
  {
    const uci::type::PlannedGatewayConfigurationType::GatewayServiceID& boundedList = accessor.getGatewayServiceID();
    for (uci::type::PlannedGatewayConfigurationType::GatewayServiceID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ServiceID_Type::serialize(boundedList.at(i), node, PlannedGatewayConfigurationType_Names::GatewayServiceID_Name);
    }
  }
  CommConfigurationID_Type::serialize(accessor.getConfigurationID(), node, PlannedGatewayConfigurationType_Names::ConfigurationID_Name);
  CommConfigurationStateEnum::serialize(accessor.getConfigurationState(), node, PlannedGatewayConfigurationType_Names::ConfigurationState_Name, false);
  if (accessor.hasActivateMDF()) {
    MDF_CommandType::serialize(accessor.getActivateMDF(), node, PlannedGatewayConfigurationType_Names::ActivateMDF_Name);
  }
  if (accessor.hasActivateProfileID()) {
    CommProfileID_Type::serialize(accessor.getActivateProfileID(), node, PlannedGatewayConfigurationType_Names::ActivateProfileID_Name);
  }
  if (accessor.hasGatewayCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getGatewayCapabilityID(), node, PlannedGatewayConfigurationType_Names::GatewayCapabilityID_Name);
  }
  if (accessor.hasGatewayActivityID()) {
    ActivityID_Type::serialize(accessor.getGatewayActivityID(), node, PlannedGatewayConfigurationType_Names::GatewayActivityID_Name);
  }
  {
    const uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination& boundedList = accessor.getGatewayLinkDestination();
    for (uci::type::PlannedGatewayConfigurationType::GatewayLinkDestination::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      GatewayLinkDestinationType::serialize(boundedList.at(i), node, PlannedGatewayConfigurationType_Names::GatewayLinkDestination_Name);
    }
  }
  {
    const uci::type::PlannedGatewayConfigurationType::MessageConfiguration& boundedList = accessor.getMessageConfiguration();
    for (uci::type::PlannedGatewayConfigurationType::MessageConfiguration::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      MessageConfigurationType::serialize(boundedList.at(i), node, PlannedGatewayConfigurationType_Names::MessageConfiguration_Name);
    }
  }
  {
    const uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID& boundedList = accessor.getProductDisseminationIngressSystemID();
    for (uci::type::PlannedGatewayConfigurationType::ProductDisseminationIngressSystemID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SystemID_Type::serialize(boundedList.at(i), node, PlannedGatewayConfigurationType_Names::ProductDisseminationIngressSystemID_Name);
    }
  }
  {
    const uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID& boundedList = accessor.getProductDisseminationEgressDestinationID();
    for (uci::type::PlannedGatewayConfigurationType::ProductDisseminationEgressDestinationID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ProductDisseminationDestinationID_Type::serialize(boundedList.at(i), node, PlannedGatewayConfigurationType_Names::ProductDisseminationEgressDestinationID_Name);
    }
  }
  if (accessor.hasGatewaySpecificSettings()) {
    GatewayConfigurationPET::serialize(accessor.getGatewaySpecificSettings(), node, PlannedGatewayConfigurationType_Names::GatewaySpecificSettings_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

