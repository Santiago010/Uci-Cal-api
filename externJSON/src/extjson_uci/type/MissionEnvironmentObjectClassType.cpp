/** @file MissionEnvironmentObjectClassType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/MissionEnvironmentObjectClassType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/MissionEnvironmentObjectValueActionType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueEffectType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueEntityType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueOpLineType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueOpPointType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueOpVolumeType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueOpZoneType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueResponseType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueSystemType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueTaskType.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/MissionEnvironmentObjectClassType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace MissionEnvironmentObjectClassType_Names {

constexpr const char* Extern_Type_Name{"MissionEnvironmentObjectClassType"};
constexpr const char* Entity_Name{"Entity"};
constexpr const char* System_Name{"System"};
constexpr const char* OpPoint_Name{"OpPoint"};
constexpr const char* OpLine_Name{"OpLine"};
constexpr const char* OpZone_Name{"OpZone"};
constexpr const char* OpVolume_Name{"OpVolume"};
constexpr const char* Task_Name{"Task"};
constexpr const char* Effect_Name{"Effect"};
constexpr const char* Action_Name{"Action"};
constexpr const char* Response_Name{"Response"};

} // namespace MissionEnvironmentObjectClassType_Names

bool MissionEnvironmentObjectClassType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionEnvironmentObjectClassType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MissionEnvironmentObjectClassType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::Entity_Name) {
      MissionEnvironmentObjectValueEntityType::deserialize(valueType.second, accessor.chooseEntity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::System_Name) {
      MissionEnvironmentObjectValueSystemType::deserialize(valueType.second, accessor.chooseSystem(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::OpPoint_Name) {
      MissionEnvironmentObjectValueOpPointType::deserialize(valueType.second, accessor.chooseOpPoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::OpLine_Name) {
      MissionEnvironmentObjectValueOpLineType::deserialize(valueType.second, accessor.chooseOpLine(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::OpZone_Name) {
      MissionEnvironmentObjectValueOpZoneType::deserialize(valueType.second, accessor.chooseOpZone(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::OpVolume_Name) {
      MissionEnvironmentObjectValueOpVolumeType::deserialize(valueType.second, accessor.chooseOpVolume(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::Task_Name) {
      MissionEnvironmentObjectValueTaskType::deserialize(valueType.second, accessor.chooseTask(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::Effect_Name) {
      MissionEnvironmentObjectValueEffectType::deserialize(valueType.second, accessor.chooseEffect(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::Action_Name) {
      MissionEnvironmentObjectValueActionType::deserialize(valueType.second, accessor.chooseAction(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionEnvironmentObjectClassType_Names::Response_Name) {
      MissionEnvironmentObjectValueResponseType::deserialize(valueType.second, accessor.chooseResponse(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string MissionEnvironmentObjectClassType::serialize(const uci::type::MissionEnvironmentObjectClassType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? MissionEnvironmentObjectClassType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, MissionEnvironmentObjectClassType_Names::Extern_Type_Name);
  }
  if (accessor.isEntity()) {
    MissionEnvironmentObjectValueEntityType::serialize(accessor.getEntity(), node, MissionEnvironmentObjectClassType_Names::Entity_Name);
  } else if (accessor.isSystem()) {
    MissionEnvironmentObjectValueSystemType::serialize(accessor.getSystem(), node, MissionEnvironmentObjectClassType_Names::System_Name);
  } else if (accessor.isOpPoint()) {
    MissionEnvironmentObjectValueOpPointType::serialize(accessor.getOpPoint(), node, MissionEnvironmentObjectClassType_Names::OpPoint_Name);
  } else if (accessor.isOpLine()) {
    MissionEnvironmentObjectValueOpLineType::serialize(accessor.getOpLine(), node, MissionEnvironmentObjectClassType_Names::OpLine_Name);
  } else if (accessor.isOpZone()) {
    MissionEnvironmentObjectValueOpZoneType::serialize(accessor.getOpZone(), node, MissionEnvironmentObjectClassType_Names::OpZone_Name);
  } else if (accessor.isOpVolume()) {
    MissionEnvironmentObjectValueOpVolumeType::serialize(accessor.getOpVolume(), node, MissionEnvironmentObjectClassType_Names::OpVolume_Name);
  } else if (accessor.isTask()) {
    MissionEnvironmentObjectValueTaskType::serialize(accessor.getTask(), node, MissionEnvironmentObjectClassType_Names::Task_Name);
  } else if (accessor.isEffect()) {
    MissionEnvironmentObjectValueEffectType::serialize(accessor.getEffect(), node, MissionEnvironmentObjectClassType_Names::Effect_Name);
  } else if (accessor.isAction()) {
    MissionEnvironmentObjectValueActionType::serialize(accessor.getAction(), node, MissionEnvironmentObjectClassType_Names::Action_Name);
  } else if (accessor.isResponse()) {
    MissionEnvironmentObjectValueResponseType::serialize(accessor.getResponse(), node, MissionEnvironmentObjectClassType_Names::Response_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

