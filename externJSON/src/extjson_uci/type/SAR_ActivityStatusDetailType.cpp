/** @file SAR_ActivityStatusDetailType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/SAR_ActivityStatusDetailType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ConcurrentCollectionDetailsType.h"
#include "extjson_uci/type/RelativeDirectionEnum.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/SAR_ActivityStatusDetailType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SAR_ActivityStatusDetailType_Names {

constexpr const char* Extern_Type_Name{"SAR_ActivityStatusDetailType"};
constexpr const char* PercentageInFOR_Name{"PercentageInFOR"};
constexpr const char* ActualStartTime_Name{"ActualStartTime"};
constexpr const char* ActualStopTime_Name{"ActualStopTime"};
constexpr const char* PercentCoverage_Name{"PercentCoverage"};
constexpr const char* EntitiesReported_Name{"EntitiesReported"};
constexpr const char* ProductsProduced_Name{"ProductsProduced"};
constexpr const char* EstimatedERP_Name{"EstimatedERP"};
constexpr const char* MinimumCNR_Name{"MinimumCNR"};
constexpr const char* AchievableEllipticity_Name{"AchievableEllipticity"};
constexpr const char* AchievableResolution_Name{"AchievableResolution"};
constexpr const char* ConcurrentActivity_Name{"ConcurrentActivity"};
constexpr const char* PercentOccluded_Name{"PercentOccluded"};
constexpr const char* TimeToService_Name{"TimeToService"};
constexpr const char* PercentRadarTimeline_Name{"PercentRadarTimeline"};
constexpr const char* PercentageInFOV_Name{"PercentageInFOV"};
constexpr const char* RelativeDirectionOfTarget_Name{"RelativeDirectionOfTarget"};

} // namespace SAR_ActivityStatusDetailType_Names

bool SAR_ActivityStatusDetailType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_ActivityStatusDetailType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SAR_ActivityStatusDetailType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::PercentageInFOR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentageInFOR(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::ActualStartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStartTime(extjson_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::ActualStopTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStopTime(extjson_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::PercentCoverage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentCoverage(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::EntitiesReported_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEntitiesReported(extjson_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::ProductsProduced_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProductsProduced(extjson_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::EstimatedERP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedERP(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::MinimumCNR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinimumCNR(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::AchievableEllipticity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAchievableEllipticity(extjson_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::AchievableResolution_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAchievableResolution(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::ConcurrentActivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity& boundedList = accessor.getConcurrentActivity();
        const uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ConcurrentCollectionDetailsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::PercentOccluded_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentOccluded(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::TimeToService_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeToService(extjson_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::PercentRadarTimeline_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentRadarTimeline(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::PercentageInFOV_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentageInFOV(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_ActivityStatusDetailType_Names::RelativeDirectionOfTarget_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRelativeDirectionOfTarget().setValueFromName(*value);
      }
    }
  }
  return true;
}

std::string SAR_ActivityStatusDetailType::serialize(const uci::type::SAR_ActivityStatusDetailType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SAR_ActivityStatusDetailType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, SAR_ActivityStatusDetailType_Names::Extern_Type_Name);
  }
  if (accessor.hasPercentageInFOR()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentageInFOR(), node, SAR_ActivityStatusDetailType_Names::PercentageInFOR_Name);
  }
  if (accessor.hasActualStartTime()) {
    extjson_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStartTime(), node, SAR_ActivityStatusDetailType_Names::ActualStartTime_Name);
  }
  if (accessor.hasActualStopTime()) {
    extjson_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStopTime(), node, SAR_ActivityStatusDetailType_Names::ActualStopTime_Name);
  }
  if (accessor.hasPercentCoverage()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentCoverage(), node, SAR_ActivityStatusDetailType_Names::PercentCoverage_Name);
  }
  if (accessor.hasEntitiesReported()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getEntitiesReported(), node, SAR_ActivityStatusDetailType_Names::EntitiesReported_Name);
  }
  if (accessor.hasProductsProduced()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getProductsProduced(), node, SAR_ActivityStatusDetailType_Names::ProductsProduced_Name);
  }
  if (accessor.hasEstimatedERP()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getEstimatedERP(), node, SAR_ActivityStatusDetailType_Names::EstimatedERP_Name);
  }
  if (accessor.hasMinimumCNR()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getMinimumCNR(), node, SAR_ActivityStatusDetailType_Names::MinimumCNR_Name);
  }
  if (accessor.hasAchievableEllipticity()) {
    extjson_uci::util::SerializationHelpers::serializeFloat(accessor.getAchievableEllipticity(), node, SAR_ActivityStatusDetailType_Names::AchievableEllipticity_Name);
  }
  if (accessor.hasAchievableResolution()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getAchievableResolution(), node, SAR_ActivityStatusDetailType_Names::AchievableResolution_Name);
  }
  {
    const uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity& boundedList = accessor.getConcurrentActivity();
    for (uci::type::SAR_ActivityStatusDetailType::ConcurrentActivity::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ConcurrentCollectionDetailsType::serialize(boundedList.at(i), node, SAR_ActivityStatusDetailType_Names::ConcurrentActivity_Name);
    }
  }
  if (accessor.hasPercentOccluded()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentOccluded(), node, SAR_ActivityStatusDetailType_Names::PercentOccluded_Name);
  }
  if (accessor.hasTimeToService()) {
    extjson_uci::util::SerializationHelpers::serializeDuration(accessor.getTimeToService(), node, SAR_ActivityStatusDetailType_Names::TimeToService_Name);
  }
  if (accessor.hasPercentRadarTimeline()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentRadarTimeline(), node, SAR_ActivityStatusDetailType_Names::PercentRadarTimeline_Name);
  }
  if (accessor.hasPercentageInFOV()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentageInFOV(), node, SAR_ActivityStatusDetailType_Names::PercentageInFOV_Name);
  }
  if (accessor.hasRelativeDirectionOfTarget()) {
    RelativeDirectionEnum::serialize(accessor.getRelativeDirectionOfTarget(), node, SAR_ActivityStatusDetailType_Names::RelativeDirectionOfTarget_Name, false);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

