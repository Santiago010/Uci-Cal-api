/** @file ActivitySourceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/ActivitySourceType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ActivityPlanReferenceType.h"
#include "extjson_uci/type/AssociatedMessageSourceType.h"
#include "extjson_uci/type/MDF_ReferenceType.h"
#include "extjson_uci/type/RequirementInstanceID_ChoiceType.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/ActivitySourceType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace ActivitySourceType_Names {

constexpr const char* Extern_Type_Name{"ActivitySourceType"};
constexpr const char* Requirement_Name{"Requirement"};
constexpr const char* MDF_Name{"MDF"};
constexpr const char* ActivityPlan_Name{"ActivityPlan"};
constexpr const char* AssociatedMessage_Name{"AssociatedMessage"};

} // namespace ActivitySourceType_Names

bool ActivitySourceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ActivitySourceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ActivitySourceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + ActivitySourceType_Names::Requirement_Name) {
      RequirementInstanceID_ChoiceType::deserialize(valueType.second, accessor.chooseRequirement(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivitySourceType_Names::MDF_Name) {
      MDF_ReferenceType::deserialize(valueType.second, accessor.chooseMDF(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivitySourceType_Names::ActivityPlan_Name) {
      ActivityPlanReferenceType::deserialize(valueType.second, accessor.chooseActivityPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ActivitySourceType_Names::AssociatedMessage_Name) {
      AssociatedMessageSourceType::deserialize(valueType.second, accessor.chooseAssociatedMessage(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string ActivitySourceType::serialize(const uci::type::ActivitySourceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? ActivitySourceType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, ActivitySourceType_Names::Extern_Type_Name);
  }
  if (accessor.isRequirement()) {
    RequirementInstanceID_ChoiceType::serialize(accessor.getRequirement(), node, ActivitySourceType_Names::Requirement_Name);
  } else if (accessor.isMDF()) {
    MDF_ReferenceType::serialize(accessor.getMDF(), node, ActivitySourceType_Names::MDF_Name);
  } else if (accessor.isActivityPlan()) {
    ActivityPlanReferenceType::serialize(accessor.getActivityPlan(), node, ActivitySourceType_Names::ActivityPlan_Name);
  } else if (accessor.isAssociatedMessage()) {
    AssociatedMessageSourceType::serialize(accessor.getAssociatedMessage(), node, ActivitySourceType_Names::AssociatedMessage_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

