/** @file AtomicValueType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/AtomicValueType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/AtomicValueType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace AtomicValueType_Names {

constexpr const char* Extern_Type_Name{"AtomicValueType"};
constexpr const char* BooleanValue_Name{"BooleanValue"};
constexpr const char* ByteValue_Name{"ByteValue"};
constexpr const char* UnsignedByteValue_Name{"UnsignedByteValue"};
constexpr const char* ShortValue_Name{"ShortValue"};
constexpr const char* UnsignedShortValue_Name{"UnsignedShortValue"};
constexpr const char* IntValue_Name{"IntValue"};
constexpr const char* UnsignedIntValue_Name{"UnsignedIntValue"};
constexpr const char* LongValue_Name{"LongValue"};
constexpr const char* FloatValue_Name{"FloatValue"};
constexpr const char* DoubleValue_Name{"DoubleValue"};
constexpr const char* DateTimeValue_Name{"DateTimeValue"};
constexpr const char* DurationValue_Name{"DurationValue"};
constexpr const char* TimeValue_Name{"TimeValue"};
constexpr const char* StringValueCaseSensitive_Name{"StringValueCaseSensitive"};
constexpr const char* StringValueCaseInsensitive_Name{"StringValueCaseInsensitive"};
constexpr const char* EnumValue_Name{"EnumValue"};
constexpr const char* HexBinaryValue_Name{"HexBinaryValue"};
constexpr const char* UUID_Value_Name{"UUID_Value"};

} // namespace AtomicValueType_Names

bool AtomicValueType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AtomicValueType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AtomicValueType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + AtomicValueType_Names::BooleanValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBooleanValue(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::ByteValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setByteValue(extjson_uci::util::SerializationHelpers::deserializeByte(*value));
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::UnsignedByteValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUnsignedByteValue(extjson_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::ShortValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setShortValue(extjson_uci::util::SerializationHelpers::deserializeShort(*value));
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::UnsignedShortValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUnsignedShortValue(extjson_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::IntValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIntValue(extjson_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::UnsignedIntValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUnsignedIntValue(extjson_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::LongValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLongValue(extjson_uci::util::SerializationHelpers::deserializeLong(*value));
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::FloatValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFloatValue(extjson_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::DoubleValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDoubleValue(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::DateTimeValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDateTimeValue(extjson_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::DurationValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDurationValue(extjson_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::TimeValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeValue(extjson_uci::util::SerializationHelpers::deserializeTime(*value));
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::StringValueCaseSensitive_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseStringValueCaseSensitive().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::StringValueCaseInsensitive_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseStringValueCaseInsensitive().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::EnumValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseEnumValue().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::HexBinaryValue_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        extjson_uci::util::SerializationHelpers::deserializeHexBinary(*value, accessor.chooseHexBinaryValue());
      }
    } else if (valueType.first == nsPrefix + AtomicValueType_Names::UUID_Value_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUUID_Value(extjson_uci::util::SerializationHelpers::deserializeUUID(*value));
      }
    }
  }
  return true;
}

std::string AtomicValueType::serialize(const uci::type::AtomicValueType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? AtomicValueType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, AtomicValueType_Names::Extern_Type_Name);
  }
  if (accessor.isBooleanValue()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getBooleanValue(), node, AtomicValueType_Names::BooleanValue_Name);
  } else if (accessor.isByteValue()) {
    extjson_uci::util::SerializationHelpers::serializeByte(accessor.getByteValue(), node, AtomicValueType_Names::ByteValue_Name);
  } else if (accessor.isUnsignedByteValue()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getUnsignedByteValue(), node, AtomicValueType_Names::UnsignedByteValue_Name);
  } else if (accessor.isShortValue()) {
    extjson_uci::util::SerializationHelpers::serializeShort(accessor.getShortValue(), node, AtomicValueType_Names::ShortValue_Name);
  } else if (accessor.isUnsignedShortValue()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getUnsignedShortValue(), node, AtomicValueType_Names::UnsignedShortValue_Name);
  } else if (accessor.isIntValue()) {
    extjson_uci::util::SerializationHelpers::serializeInt(accessor.getIntValue(), node, AtomicValueType_Names::IntValue_Name);
  } else if (accessor.isUnsignedIntValue()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getUnsignedIntValue(), node, AtomicValueType_Names::UnsignedIntValue_Name);
  } else if (accessor.isLongValue()) {
    extjson_uci::util::SerializationHelpers::serializeLong(accessor.getLongValue(), node, AtomicValueType_Names::LongValue_Name);
  } else if (accessor.isFloatValue()) {
    extjson_uci::util::SerializationHelpers::serializeFloat(accessor.getFloatValue(), node, AtomicValueType_Names::FloatValue_Name);
  } else if (accessor.isDoubleValue()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getDoubleValue(), node, AtomicValueType_Names::DoubleValue_Name);
  } else if (accessor.isDateTimeValue()) {
    extjson_uci::util::SerializationHelpers::serializeDateTime(accessor.getDateTimeValue(), node, AtomicValueType_Names::DateTimeValue_Name);
  } else if (accessor.isDurationValue()) {
    extjson_uci::util::SerializationHelpers::serializeDuration(accessor.getDurationValue(), node, AtomicValueType_Names::DurationValue_Name);
  } else if (accessor.isTimeValue()) {
    extjson_uci::util::SerializationHelpers::serializeTime(accessor.getTimeValue(), node, AtomicValueType_Names::TimeValue_Name);
  } else if (accessor.isStringValueCaseSensitive()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getStringValueCaseSensitive(), node, AtomicValueType_Names::StringValueCaseSensitive_Name);
  } else if (accessor.isStringValueCaseInsensitive()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getStringValueCaseInsensitive(), node, AtomicValueType_Names::StringValueCaseInsensitive_Name);
  } else if (accessor.isEnumValue()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getEnumValue(), node, AtomicValueType_Names::EnumValue_Name);
  } else if (accessor.isHexBinaryValue()) {
    extjson_uci::util::SerializationHelpers::serializeHexBinary(accessor.getHexBinaryValue(), node, AtomicValueType_Names::HexBinaryValue_Name);
  } else if (accessor.isUUID_Value()) {
    extjson_uci::util::SerializationHelpers::serializeUUID(accessor.getUUID_Value(), node, AtomicValueType_Names::UUID_Value_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

