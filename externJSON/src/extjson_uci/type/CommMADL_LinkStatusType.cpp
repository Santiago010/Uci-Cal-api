/** @file CommMADL_LinkStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/CommMADL_LinkStatusType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/CommMADL_DataRateTypeEnum.h"
#include "extjson_uci/type/CommMADL_LinkStateEnum.h"
#include "extjson_uci/type/CommMADL_PeerNodeDataType.h"
#include "extjson_uci/type/CommMADL_SearchTypeEnum.h"
#include "extjson_uci/type/CommMADL_TimeSlotOE_PhaseTypeEnum.h"
#include "extjson_uci/type/CommMADL_TimeSlotTxPhaseTypeEnum.h"
#include "extjson_uci/type/CommMADL_TopologyEntryType.h"
#include "extjson_uci/type/CommMADL_VoiceRxIndicatorTypeEnum.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/CommMADL_LinkStatusType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace CommMADL_LinkStatusType_Names {

constexpr const char* Extern_Type_Name{"CommMADL_LinkStatusType"};
constexpr const char* LinkState_Name{"LinkState"};
constexpr const char* ReceivedDataRate_Name{"ReceivedDataRate"};
constexpr const char* ActualTxDataRate_Name{"ActualTxDataRate"};
constexpr const char* HigherDataRateCapable_Name{"HigherDataRateCapable"};
constexpr const char* VoiceReceiptIndicator_Name{"VoiceReceiptIndicator"};
constexpr const char* VoiceSource_Name{"VoiceSource"};
constexpr const char* PeerNodeData_Name{"PeerNodeData"};
constexpr const char* MemberTopology_Name{"MemberTopology"};
constexpr const char* SearchPattern_Name{"SearchPattern"};
constexpr const char* SearchVector_Name{"SearchVector"};
constexpr const char* EvenOddPhase_Name{"EvenOddPhase"};
constexpr const char* EarlyLatePhase_Name{"EarlyLatePhase"};
constexpr const char* HopOffset_Name{"HopOffset"};

} // namespace CommMADL_LinkStatusType_Names

bool CommMADL_LinkStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommMADL_LinkStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommMADL_LinkStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + CommMADL_LinkStatusType_Names::LinkState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getLinkState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommMADL_LinkStatusType_Names::ReceivedDataRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableReceivedDataRate().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommMADL_LinkStatusType_Names::ActualTxDataRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableActualTxDataRate().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommMADL_LinkStatusType_Names::HigherDataRateCapable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHigherDataRateCapable(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_LinkStatusType_Names::VoiceReceiptIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableVoiceReceiptIndicator().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommMADL_LinkStatusType_Names::VoiceSource_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVoiceSource(extjson_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_LinkStatusType_Names::PeerNodeData_Name) {
      CommMADL_PeerNodeDataType::deserialize(valueType.second, accessor.enablePeerNodeData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommMADL_LinkStatusType_Names::MemberTopology_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommMADL_LinkStatusType::MemberTopology& boundedList = accessor.getMemberTopology();
        const uci::type::CommMADL_LinkStatusType::MemberTopology::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CommMADL_TopologyEntryType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommMADL_LinkStatusType_Names::SearchPattern_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSearchPattern().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommMADL_LinkStatusType_Names::SearchVector_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSearchVector(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_LinkStatusType_Names::EvenOddPhase_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEvenOddPhase().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommMADL_LinkStatusType_Names::EarlyLatePhase_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEarlyLatePhase().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommMADL_LinkStatusType_Names::HopOffset_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHopOffset(extjson_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    }
  }
  return true;
}

std::string CommMADL_LinkStatusType::serialize(const uci::type::CommMADL_LinkStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? CommMADL_LinkStatusType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, CommMADL_LinkStatusType_Names::Extern_Type_Name);
  }
  CommMADL_LinkStateEnum::serialize(accessor.getLinkState(), node, CommMADL_LinkStatusType_Names::LinkState_Name, false);
  if (accessor.hasReceivedDataRate()) {
    CommMADL_DataRateTypeEnum::serialize(accessor.getReceivedDataRate(), node, CommMADL_LinkStatusType_Names::ReceivedDataRate_Name, false);
  }
  if (accessor.hasActualTxDataRate()) {
    CommMADL_DataRateTypeEnum::serialize(accessor.getActualTxDataRate(), node, CommMADL_LinkStatusType_Names::ActualTxDataRate_Name, false);
  }
  if (accessor.hasHigherDataRateCapable()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getHigherDataRateCapable(), node, CommMADL_LinkStatusType_Names::HigherDataRateCapable_Name);
  }
  if (accessor.hasVoiceReceiptIndicator()) {
    CommMADL_VoiceRxIndicatorTypeEnum::serialize(accessor.getVoiceReceiptIndicator(), node, CommMADL_LinkStatusType_Names::VoiceReceiptIndicator_Name, false);
  }
  if (accessor.hasVoiceSource()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getVoiceSource(), node, CommMADL_LinkStatusType_Names::VoiceSource_Name);
  }
  if (accessor.hasPeerNodeData()) {
    CommMADL_PeerNodeDataType::serialize(accessor.getPeerNodeData(), node, CommMADL_LinkStatusType_Names::PeerNodeData_Name);
  }
  {
    const uci::type::CommMADL_LinkStatusType::MemberTopology& boundedList = accessor.getMemberTopology();
    for (uci::type::CommMADL_LinkStatusType::MemberTopology::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CommMADL_TopologyEntryType::serialize(boundedList.at(i), node, CommMADL_LinkStatusType_Names::MemberTopology_Name);
    }
  }
  if (accessor.hasSearchPattern()) {
    CommMADL_SearchTypeEnum::serialize(accessor.getSearchPattern(), node, CommMADL_LinkStatusType_Names::SearchPattern_Name, false);
  }
  if (accessor.hasSearchVector()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getSearchVector(), node, CommMADL_LinkStatusType_Names::SearchVector_Name);
  }
  if (accessor.hasEvenOddPhase()) {
    CommMADL_TimeSlotOE_PhaseTypeEnum::serialize(accessor.getEvenOddPhase(), node, CommMADL_LinkStatusType_Names::EvenOddPhase_Name, false);
  }
  if (accessor.hasEarlyLatePhase()) {
    CommMADL_TimeSlotTxPhaseTypeEnum::serialize(accessor.getEarlyLatePhase(), node, CommMADL_LinkStatusType_Names::EarlyLatePhase_Name, false);
  }
  if (accessor.hasHopOffset()) {
    extjson_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getHopOffset(), node, CommMADL_LinkStatusType_Names::HopOffset_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

