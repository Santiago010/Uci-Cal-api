/** @file DamageEstimateRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/DamageEstimateRequestMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/DMPI_BlastPairingType.h"
#include "extjson_uci/type/DMPI_DamageEstimateType.h"
#include "extjson_uci/type/DamageCategoryEnum.h"
#include "extjson_uci/type/DamageEstimateContentsEnum.h"
#include "extjson_uci/type/DamageEstimateTargetType.h"
#include "extjson_uci/type/Point3D_Type.h"
#include "extjson_uci/type/ProductMetadataID_Type.h"
#include "extjson_uci/type/RequestBaseType.h"
#include "extjson_uci/type/TaskID_Type.h"
#include "extjson_uci/type/ZoneType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/DamageEstimateRequestMDT.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace DamageEstimateRequestMDT_Names {

constexpr const char* Extern_Type_Name{"DamageEstimateRequestMDT"};
constexpr const char* EstimateType_Name{"EstimateType"};
constexpr const char* EstimateContents_Name{"EstimateContents"};
constexpr const char* ReportingThreshold_Name{"ReportingThreshold"};
constexpr const char* TargetData_Name{"TargetData"};
constexpr const char* TargetName_Name{"TargetName"};
constexpr const char* DMPI_Data_Name{"DMPI_Data"};
constexpr const char* TaskID_Name{"TaskID"};
constexpr const char* ReleasePoint_Name{"ReleasePoint"};
constexpr const char* ProductMetadataID_Name{"ProductMetadataID"};
constexpr const char* RespondBy_Name{"RespondBy"};
constexpr const char* EstimateZone_Name{"EstimateZone"};
constexpr const char* DMPI_BlastPairing_Name{"DMPI_BlastPairing"};

} // namespace DamageEstimateRequestMDT_Names

bool DamageEstimateRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::DamageEstimateRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DamageEstimateRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::EstimateType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getEstimateType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::EstimateContents_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getEstimateContents().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::ReportingThreshold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReportingThreshold(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::TargetData_Name) {
      DamageEstimateTargetType::deserialize(valueType.second, accessor.getTargetData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::TargetName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTargetName(*value);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::DMPI_Data_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DamageEstimateRequestMDT::DMPI_Data& boundedList = accessor.getDMPI_Data();
        const uci::type::DamageEstimateRequestMDT::DMPI_Data::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DMPI_DamageEstimateType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::TaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.getTaskID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::ReleasePoint_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableReleasePoint(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::ProductMetadataID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DamageEstimateRequestMDT::ProductMetadataID& boundedList = accessor.getProductMetadataID();
        const uci::type::DamageEstimateRequestMDT::ProductMetadataID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ProductMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::RespondBy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRespondBy(extjson_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::EstimateZone_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEstimateZone(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateRequestMDT_Names::DMPI_BlastPairing_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing& boundedList = accessor.getDMPI_BlastPairing();
        const uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DMPI_BlastPairingType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string DamageEstimateRequestMDT::serialize(const uci::type::DamageEstimateRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? DamageEstimateRequestMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, DamageEstimateRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  DamageCategoryEnum::serialize(accessor.getEstimateType(), node, DamageEstimateRequestMDT_Names::EstimateType_Name, false);
  DamageEstimateContentsEnum::serialize(accessor.getEstimateContents(), node, DamageEstimateRequestMDT_Names::EstimateContents_Name, false);
  extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getReportingThreshold(), node, DamageEstimateRequestMDT_Names::ReportingThreshold_Name);
  DamageEstimateTargetType::serialize(accessor.getTargetData(), node, DamageEstimateRequestMDT_Names::TargetData_Name);
  if (accessor.hasTargetName()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getTargetName(), node, DamageEstimateRequestMDT_Names::TargetName_Name);
  }
  {
    const uci::type::DamageEstimateRequestMDT::DMPI_Data& boundedList = accessor.getDMPI_Data();
    for (uci::type::DamageEstimateRequestMDT::DMPI_Data::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DMPI_DamageEstimateType::serialize(boundedList.at(i), node, DamageEstimateRequestMDT_Names::DMPI_Data_Name);
    }
  }
  TaskID_Type::serialize(accessor.getTaskID(), node, DamageEstimateRequestMDT_Names::TaskID_Name);
  if (accessor.hasReleasePoint()) {
    Point3D_Type::serialize(accessor.getReleasePoint(), node, DamageEstimateRequestMDT_Names::ReleasePoint_Name);
  }
  {
    const uci::type::DamageEstimateRequestMDT::ProductMetadataID& boundedList = accessor.getProductMetadataID();
    for (uci::type::DamageEstimateRequestMDT::ProductMetadataID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ProductMetadataID_Type::serialize(boundedList.at(i), node, DamageEstimateRequestMDT_Names::ProductMetadataID_Name);
    }
  }
  if (accessor.hasRespondBy()) {
    extjson_uci::util::SerializationHelpers::serializeDateTime(accessor.getRespondBy(), node, DamageEstimateRequestMDT_Names::RespondBy_Name);
  }
  if (accessor.hasEstimateZone()) {
    ZoneType::serialize(accessor.getEstimateZone(), node, DamageEstimateRequestMDT_Names::EstimateZone_Name);
  }
  {
    const uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing& boundedList = accessor.getDMPI_BlastPairing();
    for (uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DMPI_BlastPairingType::serialize(boundedList.at(i), node, DamageEstimateRequestMDT_Names::DMPI_BlastPairing_Name);
    }
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

