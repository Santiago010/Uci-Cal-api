/** @file InertialStateRelativeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/InertialStateRelativeType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/Acceleration3D_Type.h"
#include "extjson_uci/type/OrientationRateType.h"
#include "extjson_uci/type/OrientationType.h"
#include "extjson_uci/type/PointChoice4D_Type.h"
#include "extjson_uci/type/UncertaintyType.h"
#include "extjson_uci/type/Velocity2D_Type.h"
#include "extjson_uci/type/Velocity3D_Type.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/DerivedTypesSerializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/InertialStateRelativeType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace InertialStateRelativeType_Names {

constexpr const char* Extern_Type_Name{"InertialStateRelativeType"};
constexpr const char* Position_Name{"Position"};
constexpr const char* PositionUncertainty_Name{"PositionUncertainty"};
constexpr const char* DomainVelocity_Name{"DomainVelocity"};
constexpr const char* GroundVelocity_Name{"GroundVelocity"};
constexpr const char* RelativeVelocity_Name{"RelativeVelocity"};
constexpr const char* DomainAcceleration_Name{"DomainAcceleration"};
constexpr const char* Orientation_Name{"Orientation"};
constexpr const char* OrientationRate_Name{"OrientationRate"};

} // namespace InertialStateRelativeType_Names

bool InertialStateRelativeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::InertialStateRelativeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = InertialStateRelativeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + InertialStateRelativeType_Names::Position_Name) {
      PointChoice4D_Type::deserialize(valueType.second, accessor.getPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InertialStateRelativeType_Names::PositionUncertainty_Name) {
      UncertaintyType::deserialize(valueType.second, accessor.enablePositionUncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InertialStateRelativeType_Names::DomainVelocity_Name) {
      Velocity3D_Type::deserialize(valueType.second, accessor.enableDomainVelocity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InertialStateRelativeType_Names::GroundVelocity_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableGroundVelocity(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InertialStateRelativeType_Names::RelativeVelocity_Name) {
      Velocity3D_Type::deserialize(valueType.second, accessor.enableRelativeVelocity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InertialStateRelativeType_Names::DomainAcceleration_Name) {
      Acceleration3D_Type::deserialize(valueType.second, accessor.enableDomainAcceleration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InertialStateRelativeType_Names::Orientation_Name) {
      OrientationType::deserialize(valueType.second, accessor.enableOrientation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + InertialStateRelativeType_Names::OrientationRate_Name) {
      OrientationRateType::deserialize(valueType.second, accessor.enableOrientationRate(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string InertialStateRelativeType::serialize(const uci::type::InertialStateRelativeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? InertialStateRelativeType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::inertialStateRelativeType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extjson_uci::util::SerializationHelpers::addTypeAttribute(node, InertialStateRelativeType_Names::Extern_Type_Name);
    }
    PointChoice4D_Type::serialize(accessor.getPosition(), node, InertialStateRelativeType_Names::Position_Name);
    if (accessor.hasPositionUncertainty()) {
      UncertaintyType::serialize(accessor.getPositionUncertainty(), node, InertialStateRelativeType_Names::PositionUncertainty_Name);
    }
    if (accessor.hasDomainVelocity()) {
      Velocity3D_Type::serialize(accessor.getDomainVelocity(), node, InertialStateRelativeType_Names::DomainVelocity_Name);
    }
    if (accessor.hasGroundVelocity()) {
      Velocity2D_Type::serialize(accessor.getGroundVelocity(), node, InertialStateRelativeType_Names::GroundVelocity_Name);
    }
    if (accessor.hasRelativeVelocity()) {
      Velocity3D_Type::serialize(accessor.getRelativeVelocity(), node, InertialStateRelativeType_Names::RelativeVelocity_Name);
    }
    if (accessor.hasDomainAcceleration()) {
      Acceleration3D_Type::serialize(accessor.getDomainAcceleration(), node, InertialStateRelativeType_Names::DomainAcceleration_Name);
    }
    if (accessor.hasOrientation()) {
      OrientationType::serialize(accessor.getOrientation(), node, InertialStateRelativeType_Names::Orientation_Name);
    }
    if (accessor.hasOrientationRate()) {
      OrientationRateType::serialize(accessor.getOrientationRate(), node, InertialStateRelativeType_Names::OrientationRate_Name);
    }
    if (createNode) {
      propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
    }
  } else {
    extjson_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

