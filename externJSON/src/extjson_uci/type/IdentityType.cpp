/** @file IdentityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/IdentityType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/EOB_IdentityType.h"
#include "extjson_uci/type/EmitterIdentityType.h"
#include "extjson_uci/type/EnvironmentIdentityType.h"
#include "extjson_uci/type/FacilityIdentificationType.h"
#include "extjson_uci/type/PlatformIdentityType.h"
#include "extjson_uci/type/SpecificEmitterIdentityType.h"
#include "extjson_uci/type/SpecificIdentityType.h"
#include "extjson_uci/type/StandardIdentityType.h"
#include "extjson_uci/type/StoreType.h"
#include "extjson_uci/type/VehicleIdentificationType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/DerivedTypesSerializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/IdentityType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace IdentityType_Names {

constexpr const char* Extern_Type_Name{"IdentityType"};
constexpr const char* Standard_Name{"Standard"};
constexpr const char* Environment_Name{"Environment"};
constexpr const char* Platform_Name{"Platform"};
constexpr const char* Specific_Name{"Specific"};
constexpr const char* Emitter_Name{"Emitter"};
constexpr const char* SpecificEmitter_Name{"SpecificEmitter"};
constexpr const char* SpecificFacility_Name{"SpecificFacility"};
constexpr const char* SpecificVehicle_Name{"SpecificVehicle"};
constexpr const char* EOB_Name{"EOB"};
constexpr const char* Weapon_Name{"Weapon"};

} // namespace IdentityType_Names

bool IdentityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::IdentityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = IdentityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + IdentityType_Names::Standard_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableStandard(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IdentityType_Names::Environment_Name) {
      EnvironmentIdentityType::deserialize(valueType.second, accessor.enableEnvironment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IdentityType_Names::Platform_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePlatform(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IdentityType_Names::Specific_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSpecific(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IdentityType_Names::Emitter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityType::Emitter& boundedList = accessor.getEmitter();
        const uci::type::IdentityType::Emitter::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        EmitterIdentityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityType_Names::SpecificEmitter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::IdentityType::SpecificEmitter& boundedList = accessor.getSpecificEmitter();
        const uci::type::IdentityType::SpecificEmitter::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + IdentityType_Names::SpecificFacility_Name) {
      FacilityIdentificationType::deserialize(valueType.second, accessor.enableSpecificFacility(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IdentityType_Names::SpecificVehicle_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSpecificVehicle(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IdentityType_Names::EOB_Name) {
      EOB_IdentityType::deserialize(valueType.second, accessor.enableEOB(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + IdentityType_Names::Weapon_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableWeapon(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string IdentityType::serialize(const uci::type::IdentityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? IdentityType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::identityType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extjson_uci::util::SerializationHelpers::addTypeAttribute(node, IdentityType_Names::Extern_Type_Name);
    }
    if (accessor.hasStandard()) {
      StandardIdentityType::serialize(accessor.getStandard(), node, IdentityType_Names::Standard_Name);
    }
    if (accessor.hasEnvironment()) {
      EnvironmentIdentityType::serialize(accessor.getEnvironment(), node, IdentityType_Names::Environment_Name);
    }
    if (accessor.hasPlatform()) {
      PlatformIdentityType::serialize(accessor.getPlatform(), node, IdentityType_Names::Platform_Name);
    }
    if (accessor.hasSpecific()) {
      SpecificIdentityType::serialize(accessor.getSpecific(), node, IdentityType_Names::Specific_Name);
    }
    {
      const uci::type::IdentityType::Emitter& boundedList = accessor.getEmitter();
      for (uci::type::IdentityType::Emitter::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        EmitterIdentityType::serialize(boundedList.at(i), node, IdentityType_Names::Emitter_Name);
      }
    }
    {
      const uci::type::IdentityType::SpecificEmitter& boundedList = accessor.getSpecificEmitter();
      for (uci::type::IdentityType::SpecificEmitter::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SpecificEmitterIdentityType::serialize(boundedList.at(i), node, IdentityType_Names::SpecificEmitter_Name);
      }
    }
    if (accessor.hasSpecificFacility()) {
      FacilityIdentificationType::serialize(accessor.getSpecificFacility(), node, IdentityType_Names::SpecificFacility_Name);
    }
    if (accessor.hasSpecificVehicle()) {
      VehicleIdentificationType::serialize(accessor.getSpecificVehicle(), node, IdentityType_Names::SpecificVehicle_Name);
    }
    if (accessor.hasEOB()) {
      EOB_IdentityType::serialize(accessor.getEOB(), node, IdentityType_Names::EOB_Name);
    }
    if (accessor.hasWeapon()) {
      StoreType::serialize(accessor.getWeapon(), node, IdentityType_Names::Weapon_Name);
    }
    if (createNode) {
      propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
    }
  } else {
    extjson_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

