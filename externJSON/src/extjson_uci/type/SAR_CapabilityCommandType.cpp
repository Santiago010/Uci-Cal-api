/** @file SAR_CapabilityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/SAR_CapabilityCommandType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/AtmosphericPropagationLossType.h"
#include "extjson_uci/type/CapabilityCommandFrequencyType.h"
#include "extjson_uci/type/ECEF_UnitVectorType.h"
#include "extjson_uci/type/MultistaticModeType.h"
#include "extjson_uci/type/PairIdentifierEnum.h"
#include "extjson_uci/type/ProductOutputCommandImageryType.h"
#include "extjson_uci/type/RepetitionType.h"
#include "extjson_uci/type/SAR_CapabilityCommandSubCapabilityType.h"
#include "extjson_uci/type/SAR_CollectionConstraintsType.h"
#include "extjson_uci/type/SAR_CollectionOptionsType.h"
#include "extjson_uci/type/SAR_DesiredWaveformType.h"
#include "extjson_uci/type/SharedRF_ApertureCapabilityCommandBaseType.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/SAR_CapabilityCommandType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SAR_CapabilityCommandType_Names {

constexpr const char* Extern_Type_Name{"SAR_CapabilityCommandType"};
constexpr const char* SubCapability_Name{"SubCapability"};
constexpr const char* MultistaticMode_Name{"MultistaticMode"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* CollectionOptions_Name{"CollectionOptions"};
constexpr const char* CollectionConstraints_Name{"CollectionConstraints"};
constexpr const char* PlaneNormalUnitVector_Name{"PlaneNormalUnitVector"};
constexpr const char* CoefficientOfTroposphericRefraction_Name{"CoefficientOfTroposphericRefraction"};
constexpr const char* AtmosphericPropagation_Name{"AtmosphericPropagation"};
constexpr const char* DesiredWaveform_Name{"DesiredWaveform"};
constexpr const char* PairIdentifier_Name{"PairIdentifier"};
constexpr const char* Repetition_Name{"Repetition"};
constexpr const char* ProductOutput_Name{"ProductOutput"};

} // namespace SAR_CapabilityCommandType_Names

bool SAR_CapabilityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SAR_CapabilityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SAR_CapabilityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::SubCapability_Name) {
      SAR_CapabilityCommandSubCapabilityType::deserialize(valueType.second, accessor.getSubCapability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::MultistaticMode_Name) {
      MultistaticModeType::deserialize(valueType.second, accessor.enableMultistaticMode(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::Frequency_Name) {
      CapabilityCommandFrequencyType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::CollectionOptions_Name) {
      SAR_CollectionOptionsType::deserialize(valueType.second, accessor.enableCollectionOptions(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::CollectionConstraints_Name) {
      SAR_CollectionConstraintsType::deserialize(valueType.second, accessor.enableCollectionConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::PlaneNormalUnitVector_Name) {
      ECEF_UnitVectorType::deserialize(valueType.second, accessor.enablePlaneNormalUnitVector(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::CoefficientOfTroposphericRefraction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCoefficientOfTroposphericRefraction(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::AtmosphericPropagation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SAR_CapabilityCommandType::AtmosphericPropagation& boundedList = accessor.getAtmosphericPropagation();
        const uci::type::SAR_CapabilityCommandType::AtmosphericPropagation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        AtmosphericPropagationLossType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::DesiredWaveform_Name) {
      SAR_DesiredWaveformType::deserialize(valueType.second, accessor.enableDesiredWaveform(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::PairIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePairIdentifier().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::Repetition_Name) {
      RepetitionType::deserialize(valueType.second, accessor.enableRepetition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SAR_CapabilityCommandType_Names::ProductOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SAR_CapabilityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
        const uci::type::SAR_CapabilityCommandType::ProductOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ProductOutputCommandImageryType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  SharedRF_ApertureCapabilityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string SAR_CapabilityCommandType::serialize(const uci::type::SAR_CapabilityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SAR_CapabilityCommandType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, SAR_CapabilityCommandType_Names::Extern_Type_Name);
  }
  SharedRF_ApertureCapabilityCommandBaseType::serialize(accessor, node, "", false, false, false);
  SAR_CapabilityCommandSubCapabilityType::serialize(accessor.getSubCapability(), node, SAR_CapabilityCommandType_Names::SubCapability_Name);
  if (accessor.hasMultistaticMode()) {
    MultistaticModeType::serialize(accessor.getMultistaticMode(), node, SAR_CapabilityCommandType_Names::MultistaticMode_Name);
  }
  if (accessor.hasFrequency()) {
    CapabilityCommandFrequencyType::serialize(accessor.getFrequency(), node, SAR_CapabilityCommandType_Names::Frequency_Name);
  }
  if (accessor.hasCollectionOptions()) {
    SAR_CollectionOptionsType::serialize(accessor.getCollectionOptions(), node, SAR_CapabilityCommandType_Names::CollectionOptions_Name);
  }
  if (accessor.hasCollectionConstraints()) {
    SAR_CollectionConstraintsType::serialize(accessor.getCollectionConstraints(), node, SAR_CapabilityCommandType_Names::CollectionConstraints_Name);
  }
  if (accessor.hasPlaneNormalUnitVector()) {
    ECEF_UnitVectorType::serialize(accessor.getPlaneNormalUnitVector(), node, SAR_CapabilityCommandType_Names::PlaneNormalUnitVector_Name);
  }
  if (accessor.hasCoefficientOfTroposphericRefraction()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getCoefficientOfTroposphericRefraction(), node, SAR_CapabilityCommandType_Names::CoefficientOfTroposphericRefraction_Name);
  }
  {
    const uci::type::SAR_CapabilityCommandType::AtmosphericPropagation& boundedList = accessor.getAtmosphericPropagation();
    for (uci::type::SAR_CapabilityCommandType::AtmosphericPropagation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      AtmosphericPropagationLossType::serialize(boundedList.at(i), node, SAR_CapabilityCommandType_Names::AtmosphericPropagation_Name);
    }
  }
  if (accessor.hasDesiredWaveform()) {
    SAR_DesiredWaveformType::serialize(accessor.getDesiredWaveform(), node, SAR_CapabilityCommandType_Names::DesiredWaveform_Name);
  }
  if (accessor.hasPairIdentifier()) {
    PairIdentifierEnum::serialize(accessor.getPairIdentifier(), node, SAR_CapabilityCommandType_Names::PairIdentifier_Name, false);
  }
  if (accessor.hasRepetition()) {
    RepetitionType::serialize(accessor.getRepetition(), node, SAR_CapabilityCommandType_Names::Repetition_Name);
  }
  {
    const uci::type::SAR_CapabilityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
    for (uci::type::SAR_CapabilityCommandType::ProductOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ProductOutputCommandImageryType::serialize(boundedList.at(i), node, SAR_CapabilityCommandType_Names::ProductOutput_Name);
    }
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

