/** @file MissionDefinitionMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/MissionDefinitionMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ArchiveRequestType.h"
#include "extjson_uci/type/DataRecordBaseType.h"
#include "extjson_uci/type/DateTimeRangeType.h"
#include "extjson_uci/type/MissionDefinitionID_Type.h"
#include "extjson_uci/type/MissionID_Type.h"
#include "extjson_uci/type/MissionStateEnum.h"
#include "extjson_uci/type/OrderTraceabilityType.h"
#include "extjson_uci/type/SystemID_Type.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/MissionDefinitionMDT.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace MissionDefinitionMDT_Names {

constexpr const char* Extern_Type_Name{"MissionDefinitionMDT"};
constexpr const char* MissionDefinitionID_Name{"MissionDefinitionID"};
constexpr const char* MissionID_Name{"MissionID"};
constexpr const char* ParentMissionID_Name{"ParentMissionID"};
constexpr const char* OrderTraceability_Name{"OrderTraceability"};
constexpr const char* MissionType_Name{"MissionType"};
constexpr const char* MissionState_Name{"MissionState"};
constexpr const char* TimeSpan_Name{"TimeSpan"};
constexpr const char* Expired_Name{"Expired"};
constexpr const char* AuthorizedSystemID_Name{"AuthorizedSystemID"};
constexpr const char* AuthorizedUserIdentifier_Name{"AuthorizedUserIdentifier"};
constexpr const char* ArchiveConfiguration_Name{"ArchiveConfiguration"};

} // namespace MissionDefinitionMDT_Names

bool MissionDefinitionMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::MissionDefinitionMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MissionDefinitionMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + MissionDefinitionMDT_Names::MissionDefinitionID_Name) {
      MissionDefinitionID_Type::deserialize(valueType.second, accessor.getMissionDefinitionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionDefinitionMDT_Names::MissionID_Name) {
      MissionID_Type::deserialize(valueType.second, accessor.getMissionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionDefinitionMDT_Names::ParentMissionID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionDefinitionMDT::ParentMissionID& boundedList = accessor.getParentMissionID();
        const uci::type::MissionDefinitionMDT::ParentMissionID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        MissionID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionDefinitionMDT_Names::OrderTraceability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionDefinitionMDT::OrderTraceability& boundedList = accessor.getOrderTraceability();
        const uci::type::MissionDefinitionMDT::OrderTraceability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        OrderTraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionDefinitionMDT_Names::MissionType_Name) {
      extjson_uci::util::SerializationHelpers::deserializeStringList(valueType.second, accessor.getMissionType());
    } else if (valueType.first == nsPrefix + MissionDefinitionMDT_Names::MissionState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getMissionState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + MissionDefinitionMDT_Names::TimeSpan_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableTimeSpan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + MissionDefinitionMDT_Names::Expired_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setExpired(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + MissionDefinitionMDT_Names::AuthorizedSystemID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MissionDefinitionMDT::AuthorizedSystemID& boundedList = accessor.getAuthorizedSystemID();
        const uci::type::MissionDefinitionMDT::AuthorizedSystemID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MissionDefinitionMDT_Names::AuthorizedUserIdentifier_Name) {
      extjson_uci::util::SerializationHelpers::deserializeStringList(valueType.second, accessor.getAuthorizedUserIdentifier());
    } else if (valueType.first == nsPrefix + MissionDefinitionMDT_Names::ArchiveConfiguration_Name) {
      ArchiveRequestType::deserialize(valueType.second, accessor.enableArchiveConfiguration(), nodeName, nsPrefix);
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string MissionDefinitionMDT::serialize(const uci::type::MissionDefinitionMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? MissionDefinitionMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, MissionDefinitionMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  MissionDefinitionID_Type::serialize(accessor.getMissionDefinitionID(), node, MissionDefinitionMDT_Names::MissionDefinitionID_Name);
  MissionID_Type::serialize(accessor.getMissionID(), node, MissionDefinitionMDT_Names::MissionID_Name);
  {
    const uci::type::MissionDefinitionMDT::ParentMissionID& boundedList = accessor.getParentMissionID();
    for (uci::type::MissionDefinitionMDT::ParentMissionID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      MissionID_Type::serialize(boundedList.at(i), node, MissionDefinitionMDT_Names::ParentMissionID_Name);
    }
  }
  {
    const uci::type::MissionDefinitionMDT::OrderTraceability& boundedList = accessor.getOrderTraceability();
    for (uci::type::MissionDefinitionMDT::OrderTraceability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrderTraceabilityType::serialize(boundedList.at(i), node, MissionDefinitionMDT_Names::OrderTraceability_Name);
    }
  }
  {
    extjson_uci::util::SerializationHelpers::serializeStringList(accessor.getMissionType(), node, MissionDefinitionMDT_Names::MissionType_Name);
  }
  MissionStateEnum::serialize(accessor.getMissionState(), node, MissionDefinitionMDT_Names::MissionState_Name, false);
  if (accessor.hasTimeSpan()) {
    DateTimeRangeType::serialize(accessor.getTimeSpan(), node, MissionDefinitionMDT_Names::TimeSpan_Name);
  }
  extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getExpired(), node, MissionDefinitionMDT_Names::Expired_Name);
  {
    const uci::type::MissionDefinitionMDT::AuthorizedSystemID& boundedList = accessor.getAuthorizedSystemID();
    for (uci::type::MissionDefinitionMDT::AuthorizedSystemID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SystemID_Type::serialize(boundedList.at(i), node, MissionDefinitionMDT_Names::AuthorizedSystemID_Name);
    }
  }
  {
    extjson_uci::util::SerializationHelpers::serializeStringList(accessor.getAuthorizedUserIdentifier(), node, MissionDefinitionMDT_Names::AuthorizedUserIdentifier_Name);
  }
  if (accessor.hasArchiveConfiguration()) {
    ArchiveRequestType::serialize(accessor.getArchiveConfiguration(), node, MissionDefinitionMDT_Names::ArchiveConfiguration_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

