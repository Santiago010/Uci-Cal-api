/** @file COMINT_InteractiveType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/COMINT_InteractiveType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/COMINT_AcquisitionTargetType.h"
#include "extjson_uci/type/ForeignKeyType.h"
#include "extjson_uci/type/FrequencyRangeType.h"
#include "extjson_uci/type/GainControlMethodEnum.h"
#include "extjson_uci/type/NoiseAdaptiveThresholdStatusEnum.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/COMINT_InteractiveType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace COMINT_InteractiveType_Names {

constexpr const char* Extern_Type_Name{"COMINT_InteractiveType"};
constexpr const char* Threshold_Name{"Threshold"};
constexpr const char* NoiseAdaptiveThresholdStatus_Name{"NoiseAdaptiveThresholdStatus"};
constexpr const char* GainControlMethod_Name{"GainControlMethod"};
constexpr const char* Gain_Name{"Gain"};
constexpr const char* CenterFrequency_Name{"CenterFrequency"};
constexpr const char* ScanRange_Name{"ScanRange"};
constexpr const char* ScanLockout_Name{"ScanLockout"};
constexpr const char* DwellTarget_Name{"DwellTarget"};
constexpr const char* IgnoreTarget_Name{"IgnoreTarget"};
constexpr const char* TechniqueInUse_Name{"TechniqueInUse"};
constexpr const char* TechniqueParameters_Name{"TechniqueParameters"};
constexpr const char* AudioEnable_Name{"AudioEnable"};
constexpr const char* IQ_Enable_Name{"IQ_Enable"};

} // namespace COMINT_InteractiveType_Names

bool COMINT_InteractiveType::deserialize(const boost::property_tree::ptree& propTree, uci::type::COMINT_InteractiveType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = COMINT_InteractiveType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::Threshold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setThreshold(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::NoiseAdaptiveThresholdStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableNoiseAdaptiveThresholdStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::GainControlMethod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableGainControlMethod().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::Gain_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setGain(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::CenterFrequency_Name) {
      extjson_uci::util::SerializationHelpers::deserializeDoubleList(valueType.second, accessor.getCenterFrequency());
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::ScanRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_InteractiveType::ScanRange& boundedList = accessor.getScanRange();
        const uci::type::COMINT_InteractiveType::ScanRange::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::ScanLockout_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_InteractiveType::ScanLockout& boundedList = accessor.getScanLockout();
        const uci::type::COMINT_InteractiveType::ScanLockout::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::DwellTarget_Name) {
      COMINT_AcquisitionTargetType::deserialize(valueType.second, accessor.enableDwellTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::IgnoreTarget_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_InteractiveType::IgnoreTarget& boundedList = accessor.getIgnoreTarget();
        const uci::type::COMINT_InteractiveType::IgnoreTarget::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        COMINT_AcquisitionTargetType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::TechniqueInUse_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_InteractiveType::TechniqueInUse& boundedList = accessor.getTechniqueInUse();
        const uci::type::COMINT_InteractiveType::TechniqueInUse::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::TechniqueParameters_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_InteractiveType::TechniqueParameters& boundedList = accessor.getTechniqueParameters();
        const uci::type::COMINT_InteractiveType::TechniqueParameters::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::AudioEnable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAudioEnable(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_InteractiveType_Names::IQ_Enable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIQ_Enable(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
  return true;
}

std::string COMINT_InteractiveType::serialize(const uci::type::COMINT_InteractiveType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? COMINT_InteractiveType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, COMINT_InteractiveType_Names::Extern_Type_Name);
  }
  if (accessor.hasThreshold()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getThreshold(), node, COMINT_InteractiveType_Names::Threshold_Name);
  }
  if (accessor.hasNoiseAdaptiveThresholdStatus()) {
    NoiseAdaptiveThresholdStatusEnum::serialize(accessor.getNoiseAdaptiveThresholdStatus(), node, COMINT_InteractiveType_Names::NoiseAdaptiveThresholdStatus_Name, false);
  }
  if (accessor.hasGainControlMethod()) {
    GainControlMethodEnum::serialize(accessor.getGainControlMethod(), node, COMINT_InteractiveType_Names::GainControlMethod_Name, false);
  }
  if (accessor.hasGain()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getGain(), node, COMINT_InteractiveType_Names::Gain_Name);
  }
  {
    extjson_uci::util::SerializationHelpers::serializeDoubleList(accessor.getCenterFrequency(), node, COMINT_InteractiveType_Names::CenterFrequency_Name);
  }
  {
    const uci::type::COMINT_InteractiveType::ScanRange& boundedList = accessor.getScanRange();
    for (uci::type::COMINT_InteractiveType::ScanRange::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FrequencyRangeType::serialize(boundedList.at(i), node, COMINT_InteractiveType_Names::ScanRange_Name);
    }
  }
  {
    const uci::type::COMINT_InteractiveType::ScanLockout& boundedList = accessor.getScanLockout();
    for (uci::type::COMINT_InteractiveType::ScanLockout::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FrequencyRangeType::serialize(boundedList.at(i), node, COMINT_InteractiveType_Names::ScanLockout_Name);
    }
  }
  if (accessor.hasDwellTarget()) {
    COMINT_AcquisitionTargetType::serialize(accessor.getDwellTarget(), node, COMINT_InteractiveType_Names::DwellTarget_Name);
  }
  {
    const uci::type::COMINT_InteractiveType::IgnoreTarget& boundedList = accessor.getIgnoreTarget();
    for (uci::type::COMINT_InteractiveType::IgnoreTarget::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      COMINT_AcquisitionTargetType::serialize(boundedList.at(i), node, COMINT_InteractiveType_Names::IgnoreTarget_Name);
    }
  }
  {
    const uci::type::COMINT_InteractiveType::TechniqueInUse& boundedList = accessor.getTechniqueInUse();
    for (uci::type::COMINT_InteractiveType::TechniqueInUse::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ForeignKeyType::serialize(boundedList.at(i), node, COMINT_InteractiveType_Names::TechniqueInUse_Name);
    }
  }
  {
    const uci::type::COMINT_InteractiveType::TechniqueParameters& boundedList = accessor.getTechniqueParameters();
    for (uci::type::COMINT_InteractiveType::TechniqueParameters::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ForeignKeyType::serialize(boundedList.at(i), node, COMINT_InteractiveType_Names::TechniqueParameters_Name);
    }
  }
  if (accessor.hasAudioEnable()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getAudioEnable(), node, COMINT_InteractiveType_Names::AudioEnable_Name);
  }
  if (accessor.hasIQ_Enable()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getIQ_Enable(), node, COMINT_InteractiveType_Names::IQ_Enable_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

