/** @file EntityMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/EntityMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ActivityAgainstType.h"
#include "extjson_uci/type/ActivityByType.h"
#include "extjson_uci/type/CapabilityID_Type.h"
#include "extjson_uci/type/DateTimeSigmaType.h"
#include "extjson_uci/type/EnduranceType.h"
#include "extjson_uci/type/EntityID_Type.h"
#include "extjson_uci/type/EntityIdentityType.h"
#include "extjson_uci/type/EntityRemoveInfoType.h"
#include "extjson_uci/type/EntitySignalSummaryType.h"
#include "extjson_uci/type/EntitySourceType.h"
#include "extjson_uci/type/EntityStatusEnum.h"
#include "extjson_uci/type/ID_Type.h"
#include "extjson_uci/type/KinematicsType.h"
#include "extjson_uci/type/MeasurementID_Type.h"
#include "extjson_uci/type/MobilityEnum.h"
#include "extjson_uci/type/OB_OperationalStatusEnum.h"
#include "extjson_uci/type/OrbitalKinematicsChoiceType.h"
#include "extjson_uci/type/OrbitalSingleVectorParametersType.h"
#include "extjson_uci/type/PlatformStatusType.h"
#include "extjson_uci/type/Point2D_Type.h"
#include "extjson_uci/type/PulseDataID_Type.h"
#include "extjson_uci/type/StrengthType.h"
#include "extjson_uci/type/VoiceControlType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/EntityMDT.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace EntityMDT_Names {

constexpr const char* Extern_Type_Name{"EntityMDT"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* CreationTimestamp_Name{"CreationTimestamp"};
constexpr const char* Source_Name{"Source"};
constexpr const char* EntityStatus_Name{"EntityStatus"};
constexpr const char* OperationalStatus_Name{"OperationalStatus"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* SiteEntityID_Name{"SiteEntityID"};
constexpr const char* Mobility_Name{"Mobility"};
constexpr const char* Kinematics_Name{"Kinematics"};
constexpr const char* EstimatedKinematics_Name{"EstimatedKinematics"};
constexpr const char* DownLocation_Name{"DownLocation"};
constexpr const char* PlatformStatus_Name{"PlatformStatus"};
constexpr const char* SignalSummary_Name{"SignalSummary"};
constexpr const char* PulseDataID_Name{"PulseDataID"};
constexpr const char* MeasurementID_Name{"MeasurementID"};
constexpr const char* Strength_Name{"Strength"};
constexpr const char* ActivityAgainst_Name{"ActivityAgainst"};
constexpr const char* ActivityBy_Name{"ActivityBy"};
constexpr const char* Endurance_Name{"Endurance"};
constexpr const char* VoiceControl_Name{"VoiceControl"};
constexpr const char* AssociatedID_Name{"AssociatedID"};
constexpr const char* RemoveInfo_Name{"RemoveInfo"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* OrbitalKinematics_Name{"OrbitalKinematics"};
constexpr const char* OrbitalKinematicsParameters_Name{"OrbitalKinematicsParameters"};
constexpr const char* EstimatedOrbitalKinematics_Name{"EstimatedOrbitalKinematics"};

} // namespace EntityMDT_Names

bool EntityMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + EntityMDT_Names::EntityID_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::CreationTimestamp_Name) {
      DateTimeSigmaType::deserialize(valueType.second, accessor.getCreationTimestamp(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::Source_Name) {
      EntitySourceType::deserialize(valueType.second, accessor.getSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::EntityStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getEntityStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::OperationalStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableOperationalStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::Identity_Name) {
      EntityIdentityType::deserialize(valueType.second, accessor.getIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::SiteEntityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::SiteEntityID& boundedList = accessor.getSiteEntityID();
        const uci::type::EntityMDT::SiteEntityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::Mobility_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMobility().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::Kinematics_Name) {
      KinematicsType::deserialize(valueType.second, accessor.enableKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::EstimatedKinematics_Name) {
      KinematicsType::deserialize(valueType.second, accessor.enableEstimatedKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::DownLocation_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDownLocation(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::PlatformStatus_Name) {
      PlatformStatusType::deserialize(valueType.second, accessor.enablePlatformStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::SignalSummary_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::SignalSummary& boundedList = accessor.getSignalSummary();
        const uci::type::EntityMDT::SignalSummary::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        EntitySignalSummaryType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::PulseDataID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::PulseDataID& boundedList = accessor.getPulseDataID();
        const uci::type::EntityMDT::PulseDataID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PulseDataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::MeasurementID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::MeasurementID& boundedList = accessor.getMeasurementID();
        const uci::type::EntityMDT::MeasurementID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        MeasurementID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::Strength_Name) {
      StrengthType::deserialize(valueType.second, accessor.enableStrength(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::ActivityAgainst_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::ActivityAgainst& boundedList = accessor.getActivityAgainst();
        const uci::type::EntityMDT::ActivityAgainst::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ActivityAgainstType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::ActivityBy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::ActivityBy& boundedList = accessor.getActivityBy();
        const uci::type::EntityMDT::ActivityBy::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ActivityByType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::Endurance_Name) {
      EnduranceType::deserialize(valueType.second, accessor.enableEndurance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::VoiceControl_Name) {
      VoiceControlType::deserialize(valueType.second, accessor.enableVoiceControl(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::AssociatedID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::AssociatedID& boundedList = accessor.getAssociatedID();
        const uci::type::EntityMDT::AssociatedID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::RemoveInfo_Name) {
      EntityRemoveInfoType::deserialize(valueType.second, accessor.enableRemoveInfo(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::CapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityMDT::CapabilityID& boundedList = accessor.getCapabilityID();
        const uci::type::EntityMDT::CapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityMDT_Names::OrbitalKinematics_Name) {
      OrbitalKinematicsChoiceType::deserialize(valueType.second, accessor.enableOrbitalKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::OrbitalKinematicsParameters_Name) {
      OrbitalSingleVectorParametersType::deserialize(valueType.second, accessor.enableOrbitalKinematicsParameters(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityMDT_Names::EstimatedOrbitalKinematics_Name) {
      OrbitalKinematicsChoiceType::deserialize(valueType.second, accessor.enableEstimatedOrbitalKinematics(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string EntityMDT::serialize(const uci::type::EntityMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? EntityMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, EntityMDT_Names::Extern_Type_Name);
  }
  EntityID_Type::serialize(accessor.getEntityID(), node, EntityMDT_Names::EntityID_Name);
  DateTimeSigmaType::serialize(accessor.getCreationTimestamp(), node, EntityMDT_Names::CreationTimestamp_Name);
  EntitySourceType::serialize(accessor.getSource(), node, EntityMDT_Names::Source_Name);
  EntityStatusEnum::serialize(accessor.getEntityStatus(), node, EntityMDT_Names::EntityStatus_Name, false);
  if (accessor.hasOperationalStatus()) {
    OB_OperationalStatusEnum::serialize(accessor.getOperationalStatus(), node, EntityMDT_Names::OperationalStatus_Name, false);
  }
  EntityIdentityType::serialize(accessor.getIdentity(), node, EntityMDT_Names::Identity_Name);
  {
    const uci::type::EntityMDT::SiteEntityID& boundedList = accessor.getSiteEntityID();
    for (uci::type::EntityMDT::SiteEntityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      EntityID_Type::serialize(boundedList.at(i), node, EntityMDT_Names::SiteEntityID_Name);
    }
  }
  if (accessor.hasMobility()) {
    MobilityEnum::serialize(accessor.getMobility(), node, EntityMDT_Names::Mobility_Name, false);
  }
  if (accessor.hasKinematics()) {
    KinematicsType::serialize(accessor.getKinematics(), node, EntityMDT_Names::Kinematics_Name);
  }
  if (accessor.hasEstimatedKinematics()) {
    KinematicsType::serialize(accessor.getEstimatedKinematics(), node, EntityMDT_Names::EstimatedKinematics_Name);
  }
  if (accessor.hasDownLocation()) {
    Point2D_Type::serialize(accessor.getDownLocation(), node, EntityMDT_Names::DownLocation_Name);
  }
  if (accessor.hasPlatformStatus()) {
    PlatformStatusType::serialize(accessor.getPlatformStatus(), node, EntityMDT_Names::PlatformStatus_Name);
  }
  {
    const uci::type::EntityMDT::SignalSummary& boundedList = accessor.getSignalSummary();
    for (uci::type::EntityMDT::SignalSummary::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      EntitySignalSummaryType::serialize(boundedList.at(i), node, EntityMDT_Names::SignalSummary_Name);
    }
  }
  {
    const uci::type::EntityMDT::PulseDataID& boundedList = accessor.getPulseDataID();
    for (uci::type::EntityMDT::PulseDataID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PulseDataID_Type::serialize(boundedList.at(i), node, EntityMDT_Names::PulseDataID_Name);
    }
  }
  {
    const uci::type::EntityMDT::MeasurementID& boundedList = accessor.getMeasurementID();
    for (uci::type::EntityMDT::MeasurementID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      MeasurementID_Type::serialize(boundedList.at(i), node, EntityMDT_Names::MeasurementID_Name);
    }
  }
  if (accessor.hasStrength()) {
    StrengthType::serialize(accessor.getStrength(), node, EntityMDT_Names::Strength_Name);
  }
  {
    const uci::type::EntityMDT::ActivityAgainst& boundedList = accessor.getActivityAgainst();
    for (uci::type::EntityMDT::ActivityAgainst::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ActivityAgainstType::serialize(boundedList.at(i), node, EntityMDT_Names::ActivityAgainst_Name);
    }
  }
  {
    const uci::type::EntityMDT::ActivityBy& boundedList = accessor.getActivityBy();
    for (uci::type::EntityMDT::ActivityBy::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ActivityByType::serialize(boundedList.at(i), node, EntityMDT_Names::ActivityBy_Name);
    }
  }
  if (accessor.hasEndurance()) {
    EnduranceType::serialize(accessor.getEndurance(), node, EntityMDT_Names::Endurance_Name);
  }
  if (accessor.hasVoiceControl()) {
    VoiceControlType::serialize(accessor.getVoiceControl(), node, EntityMDT_Names::VoiceControl_Name);
  }
  {
    const uci::type::EntityMDT::AssociatedID& boundedList = accessor.getAssociatedID();
    for (uci::type::EntityMDT::AssociatedID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ID_Type::serialize(boundedList.at(i), node, EntityMDT_Names::AssociatedID_Name);
    }
  }
  if (accessor.hasRemoveInfo()) {
    EntityRemoveInfoType::serialize(accessor.getRemoveInfo(), node, EntityMDT_Names::RemoveInfo_Name);
  }
  {
    const uci::type::EntityMDT::CapabilityID& boundedList = accessor.getCapabilityID();
    for (uci::type::EntityMDT::CapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CapabilityID_Type::serialize(boundedList.at(i), node, EntityMDT_Names::CapabilityID_Name);
    }
  }
  if (accessor.hasOrbitalKinematics()) {
    OrbitalKinematicsChoiceType::serialize(accessor.getOrbitalKinematics(), node, EntityMDT_Names::OrbitalKinematics_Name);
  }
  if (accessor.hasOrbitalKinematicsParameters()) {
    OrbitalSingleVectorParametersType::serialize(accessor.getOrbitalKinematicsParameters(), node, EntityMDT_Names::OrbitalKinematicsParameters_Name);
  }
  if (accessor.hasEstimatedOrbitalKinematics()) {
    OrbitalKinematicsChoiceType::serialize(accessor.getEstimatedOrbitalKinematics(), node, EntityMDT_Names::EstimatedOrbitalKinematics_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

