/** @file ProductOutputCapabilityStatusImageryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/ProductOutputCapabilityStatusImageryType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/PO_ProductGeneratorOutputID_Type.h"
#include "extjson_uci/type/ProductResolutionType.h"
#include "extjson_uci/type/VideoOutputSettingsType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/DerivedTypesSerializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/ProductOutputCapabilityStatusImageryType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace ProductOutputCapabilityStatusImageryType_Names {

constexpr const char* Extern_Type_Name{"ProductOutputCapabilityStatusImageryType"};
constexpr const char* ProductOutputGeneratorID_Name{"ProductOutputGeneratorID"};
constexpr const char* CompressionRatio_Name{"CompressionRatio"};
constexpr const char* ProductRate_Name{"ProductRate"};
constexpr const char* Interlaced_Name{"Interlaced"};
constexpr const char* ProductSize_Name{"ProductSize"};
constexpr const char* ProductResolution_Name{"ProductResolution"};
constexpr const char* VideoOutput_Name{"VideoOutput"};

} // namespace ProductOutputCapabilityStatusImageryType_Names

bool ProductOutputCapabilityStatusImageryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductOutputCapabilityStatusImageryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductOutputCapabilityStatusImageryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + ProductOutputCapabilityStatusImageryType_Names::ProductOutputGeneratorID_Name) {
      PO_ProductGeneratorOutputID_Type::deserialize(valueType.second, accessor.getProductOutputGeneratorID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityStatusImageryType_Names::CompressionRatio_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCompressionRatio(extjson_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityStatusImageryType_Names::ProductRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProductRate(extjson_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityStatusImageryType_Names::Interlaced_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInterlaced(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityStatusImageryType_Names::ProductSize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProductSize(extjson_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityStatusImageryType_Names::ProductResolution_Name) {
      ProductResolutionType::deserialize(valueType.second, accessor.enableProductResolution(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductOutputCapabilityStatusImageryType_Names::VideoOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductOutputCapabilityStatusImageryType::VideoOutput& boundedList = accessor.getVideoOutput();
        const uci::type::ProductOutputCapabilityStatusImageryType::VideoOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        VideoOutputSettingsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string ProductOutputCapabilityStatusImageryType::serialize(const uci::type::ProductOutputCapabilityStatusImageryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? ProductOutputCapabilityStatusImageryType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::productOutputCapabilityStatusImageryType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extjson_uci::util::SerializationHelpers::addTypeAttribute(node, ProductOutputCapabilityStatusImageryType_Names::Extern_Type_Name);
    }
    PO_ProductGeneratorOutputID_Type::serialize(accessor.getProductOutputGeneratorID(), node, ProductOutputCapabilityStatusImageryType_Names::ProductOutputGeneratorID_Name);
    if (accessor.hasCompressionRatio()) {
      extjson_uci::util::SerializationHelpers::serializeFloat(accessor.getCompressionRatio(), node, ProductOutputCapabilityStatusImageryType_Names::CompressionRatio_Name);
    }
    if (accessor.hasProductRate()) {
      extjson_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getProductRate(), node, ProductOutputCapabilityStatusImageryType_Names::ProductRate_Name);
    }
    if (accessor.hasInterlaced()) {
      extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getInterlaced(), node, ProductOutputCapabilityStatusImageryType_Names::Interlaced_Name);
    }
    if (accessor.hasProductSize()) {
      extjson_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getProductSize(), node, ProductOutputCapabilityStatusImageryType_Names::ProductSize_Name);
    }
    if (accessor.hasProductResolution()) {
      ProductResolutionType::serialize(accessor.getProductResolution(), node, ProductOutputCapabilityStatusImageryType_Names::ProductResolution_Name);
    }
    {
      const uci::type::ProductOutputCapabilityStatusImageryType::VideoOutput& boundedList = accessor.getVideoOutput();
      for (uci::type::ProductOutputCapabilityStatusImageryType::VideoOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        VideoOutputSettingsType::serialize(boundedList.at(i), node, ProductOutputCapabilityStatusImageryType_Names::VideoOutput_Name);
      }
    }
    if (createNode) {
      propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
    }
  } else {
    extjson_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

