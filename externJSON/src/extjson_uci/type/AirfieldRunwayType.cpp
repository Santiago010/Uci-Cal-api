/** @file AirfieldRunwayType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/AirfieldRunwayType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ApproachLightingEnum.h"
#include "extjson_uci/type/ArresterWiresEnum.h"
#include "extjson_uci/type/BrakingActionEnum.h"
#include "extjson_uci/type/ForeignKeyType.h"
#include "extjson_uci/type/RunwayCoordinatesType.h"
#include "extjson_uci/type/RunwayID_Type.h"
#include "extjson_uci/type/RunwayStatusEnum.h"
#include "extjson_uci/type/RunwayUsageDetailsType.h"
#include "extjson_uci/type/SafeAltitudeType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/AirfieldRunwayType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace AirfieldRunwayType_Names {

constexpr const char* Extern_Type_Name{"AirfieldRunwayType"};
constexpr const char* RunwayID_Name{"RunwayID"};
constexpr const char* SecondaryIndicator_Name{"SecondaryIndicator"};
constexpr const char* Status_Name{"Status"};
constexpr const char* Direction_Name{"Direction"};
constexpr const char* AvailableLength_Name{"AvailableLength"};
constexpr const char* GCA_Name{"GCA"};
constexpr const char* ILS_Name{"ILS"};
constexpr const char* ApproachLighting_Name{"ApproachLighting"};
constexpr const char* ArresterWires_Name{"ArresterWires"};
constexpr const char* ArresterBarrier_Name{"ArresterBarrier"};
constexpr const char* BrakingAction_Name{"BrakingAction"};
constexpr const char* VisualRange_Name{"VisualRange"};
constexpr const char* TakeoffCoordinates_Name{"TakeoffCoordinates"};
constexpr const char* LandingCoordinates_Name{"LandingCoordinates"};
constexpr const char* DefaultRunwayUsageDetails_Name{"DefaultRunwayUsageDetails"};
constexpr const char* SafeAltitude_Name{"SafeAltitude"};
constexpr const char* DAFIF_RunwayIdentifier_Name{"DAFIF_RunwayIdentifier"};

} // namespace AirfieldRunwayType_Names

bool AirfieldRunwayType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AirfieldRunwayType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AirfieldRunwayType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + AirfieldRunwayType_Names::RunwayID_Name) {
      RunwayID_Type::deserialize(valueType.second, accessor.getRunwayID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::SecondaryIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSecondaryIndicator(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::Status_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableStatus().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::Direction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDirection(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::AvailableLength_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAvailableLength(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::GCA_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setGCA(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::ILS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setILS(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::ApproachLighting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableApproachLighting().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::ArresterWires_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableArresterWires().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::ArresterBarrier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setArresterBarrier(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::BrakingAction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableBrakingAction().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::VisualRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVisualRange(extjson_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::TakeoffCoordinates_Name) {
      RunwayCoordinatesType::deserialize(valueType.second, accessor.enableTakeoffCoordinates(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::LandingCoordinates_Name) {
      RunwayCoordinatesType::deserialize(valueType.second, accessor.enableLandingCoordinates(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::DefaultRunwayUsageDetails_Name) {
      RunwayUsageDetailsType::deserialize(valueType.second, accessor.enableDefaultRunwayUsageDetails(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::SafeAltitude_Name) {
      SafeAltitudeType::deserialize(valueType.second, accessor.enableSafeAltitude(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AirfieldRunwayType_Names::DAFIF_RunwayIdentifier_Name) {
      extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDAFIF_RunwayIdentifier(extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string AirfieldRunwayType::serialize(const uci::type::AirfieldRunwayType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? AirfieldRunwayType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, AirfieldRunwayType_Names::Extern_Type_Name);
  }
  RunwayID_Type::serialize(accessor.getRunwayID(), node, AirfieldRunwayType_Names::RunwayID_Name);
  if (accessor.hasSecondaryIndicator()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getSecondaryIndicator(), node, AirfieldRunwayType_Names::SecondaryIndicator_Name);
  }
  if (accessor.hasStatus()) {
    RunwayStatusEnum::serialize(accessor.getStatus(), node, AirfieldRunwayType_Names::Status_Name, false);
  }
  if (accessor.hasDirection()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getDirection(), node, AirfieldRunwayType_Names::Direction_Name);
  }
  if (accessor.hasAvailableLength()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getAvailableLength(), node, AirfieldRunwayType_Names::AvailableLength_Name);
  }
  if (accessor.hasGCA()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getGCA(), node, AirfieldRunwayType_Names::GCA_Name);
  }
  if (accessor.hasILS()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getILS(), node, AirfieldRunwayType_Names::ILS_Name);
  }
  if (accessor.hasApproachLighting()) {
    ApproachLightingEnum::serialize(accessor.getApproachLighting(), node, AirfieldRunwayType_Names::ApproachLighting_Name, false);
  }
  if (accessor.hasArresterWires()) {
    ArresterWiresEnum::serialize(accessor.getArresterWires(), node, AirfieldRunwayType_Names::ArresterWires_Name, false);
  }
  if (accessor.hasArresterBarrier()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getArresterBarrier(), node, AirfieldRunwayType_Names::ArresterBarrier_Name);
  }
  if (accessor.hasBrakingAction()) {
    BrakingActionEnum::serialize(accessor.getBrakingAction(), node, AirfieldRunwayType_Names::BrakingAction_Name, false);
  }
  if (accessor.hasVisualRange()) {
    extjson_uci::util::SerializationHelpers::serializeDouble(accessor.getVisualRange(), node, AirfieldRunwayType_Names::VisualRange_Name);
  }
  if (accessor.hasTakeoffCoordinates()) {
    RunwayCoordinatesType::serialize(accessor.getTakeoffCoordinates(), node, AirfieldRunwayType_Names::TakeoffCoordinates_Name);
  }
  if (accessor.hasLandingCoordinates()) {
    RunwayCoordinatesType::serialize(accessor.getLandingCoordinates(), node, AirfieldRunwayType_Names::LandingCoordinates_Name);
  }
  if (accessor.hasDefaultRunwayUsageDetails()) {
    RunwayUsageDetailsType::serialize(accessor.getDefaultRunwayUsageDetails(), node, AirfieldRunwayType_Names::DefaultRunwayUsageDetails_Name);
  }
  if (accessor.hasSafeAltitude()) {
    SafeAltitudeType::serialize(accessor.getSafeAltitude(), node, AirfieldRunwayType_Names::SafeAltitude_Name);
  }
  if (accessor.hasDAFIF_RunwayIdentifier()) {
    ForeignKeyType::serialize(accessor.getDAFIF_RunwayIdentifier(), node, AirfieldRunwayType_Names::DAFIF_RunwayIdentifier_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

