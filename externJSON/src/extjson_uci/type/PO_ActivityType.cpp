/** @file PO_ActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/PO_ActivityType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ActivityBaseType.h"
#include "extjson_uci/type/FOR_Enum.h"
#include "extjson_uci/type/FOV_ActivityType.h"
#include "extjson_uci/type/PO_CollectionConstraintsStatusType.h"
#include "extjson_uci/type/PO_ComponentStatusType.h"
#include "extjson_uci/type/PO_SubCapabilitySettingsType.h"
#include "extjson_uci/type/PO_TargetType.h"
#include "extjson_uci/type/PO_TrackActivityType.h"
#include "extjson_uci/type/PO_TrackDetailsType.h"
#include "extjson_uci/type/ProductOutputCapabilityStatusImageryType.h"
#include "extjson_uci/type/RepetitionType.h"
#include "extjson_uci/type/SearchTrackActivityDetailsType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/PO_ActivityType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PO_ActivityType_Names {

constexpr const char* Extern_Type_Name{"PO_ActivityType"};
constexpr const char* ActualStartTime_Name{"ActualStartTime"};
constexpr const char* ActualCompletionTime_Name{"ActualCompletionTime"};
constexpr const char* AllProductsAndMessagesProduced_Name{"AllProductsAndMessagesProduced"};
constexpr const char* FOV_Name{"FOV"};
constexpr const char* PointingActivityReport_Name{"PointingActivityReport"};
constexpr const char* SubCapabilityStatus_Name{"SubCapabilityStatus"};
constexpr const char* ComponentStatus_Name{"ComponentStatus"};
constexpr const char* CollectionConstraintsStatus_Name{"CollectionConstraintsStatus"};
constexpr const char* TrackOptionsStatus_Name{"TrackOptionsStatus"};
constexpr const char* ProductOutputStatus_Name{"ProductOutputStatus"};
constexpr const char* SearchActivity_Name{"SearchActivity"};
constexpr const char* TrackActivity_Name{"TrackActivity"};
constexpr const char* FOR_State_Name{"FOR_State"};
constexpr const char* ThermalBlankingFOR_State_Name{"ThermalBlankingFOR_State"};
constexpr const char* Repetition_Name{"Repetition"};

} // namespace PO_ActivityType_Names

bool PO_ActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + PO_ActivityType_Names::ActualStartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStartTime(extjson_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::ActualCompletionTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualCompletionTime(extjson_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::AllProductsAndMessagesProduced_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAllProductsAndMessagesProduced(extjson_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::FOV_Name) {
      FOV_ActivityType::deserialize(valueType.second, accessor.enableFOV(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::PointingActivityReport_Name) {
      PO_TargetType::deserialize(valueType.second, accessor.enablePointingActivityReport(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::SubCapabilityStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ActivityType::SubCapabilityStatus& boundedList = accessor.getSubCapabilityStatus();
        const uci::type::PO_ActivityType::SubCapabilityStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PO_SubCapabilitySettingsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::ComponentStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ActivityType::ComponentStatus& boundedList = accessor.getComponentStatus();
        const uci::type::PO_ActivityType::ComponentStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PO_ComponentStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::CollectionConstraintsStatus_Name) {
      PO_CollectionConstraintsStatusType::deserialize(valueType.second, accessor.enableCollectionConstraintsStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::TrackOptionsStatus_Name) {
      PO_TrackDetailsType::deserialize(valueType.second, accessor.enableTrackOptionsStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::ProductOutputStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ActivityType::ProductOutputStatus& boundedList = accessor.getProductOutputStatus();
        const uci::type::PO_ActivityType::ProductOutputStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::SearchActivity_Name) {
      SearchTrackActivityDetailsType::deserialize(valueType.second, accessor.enableSearchActivity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::TrackActivity_Name) {
      PO_TrackActivityType::deserialize(valueType.second, accessor.enableTrackActivity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::FOR_State_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFOR_State().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::ThermalBlankingFOR_State_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableThermalBlankingFOR_State().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_ActivityType_Names::Repetition_Name) {
      RepetitionType::deserialize(valueType.second, accessor.enableRepetition(), nodeName, nsPrefix);
    }
  }
  ActivityBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string PO_ActivityType::serialize(const uci::type::PO_ActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PO_ActivityType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ActivityType_Names::Extern_Type_Name);
  }
  ActivityBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasActualStartTime()) {
    extjson_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStartTime(), node, PO_ActivityType_Names::ActualStartTime_Name);
  }
  if (accessor.hasActualCompletionTime()) {
    extjson_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualCompletionTime(), node, PO_ActivityType_Names::ActualCompletionTime_Name);
  }
  if (accessor.hasAllProductsAndMessagesProduced()) {
    extjson_uci::util::SerializationHelpers::serializeBoolean(accessor.getAllProductsAndMessagesProduced(), node, PO_ActivityType_Names::AllProductsAndMessagesProduced_Name);
  }
  if (accessor.hasFOV()) {
    FOV_ActivityType::serialize(accessor.getFOV(), node, PO_ActivityType_Names::FOV_Name);
  }
  if (accessor.hasPointingActivityReport()) {
    PO_TargetType::serialize(accessor.getPointingActivityReport(), node, PO_ActivityType_Names::PointingActivityReport_Name);
  }
  {
    const uci::type::PO_ActivityType::SubCapabilityStatus& boundedList = accessor.getSubCapabilityStatus();
    for (uci::type::PO_ActivityType::SubCapabilityStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_SubCapabilitySettingsType::serialize(boundedList.at(i), node, PO_ActivityType_Names::SubCapabilityStatus_Name);
    }
  }
  {
    const uci::type::PO_ActivityType::ComponentStatus& boundedList = accessor.getComponentStatus();
    for (uci::type::PO_ActivityType::ComponentStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_ComponentStatusType::serialize(boundedList.at(i), node, PO_ActivityType_Names::ComponentStatus_Name);
    }
  }
  if (accessor.hasCollectionConstraintsStatus()) {
    PO_CollectionConstraintsStatusType::serialize(accessor.getCollectionConstraintsStatus(), node, PO_ActivityType_Names::CollectionConstraintsStatus_Name);
  }
  if (accessor.hasTrackOptionsStatus()) {
    PO_TrackDetailsType::serialize(accessor.getTrackOptionsStatus(), node, PO_ActivityType_Names::TrackOptionsStatus_Name);
  }
  {
    const uci::type::PO_ActivityType::ProductOutputStatus& boundedList = accessor.getProductOutputStatus();
    for (uci::type::PO_ActivityType::ProductOutputStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ProductOutputCapabilityStatusImageryType::serialize(boundedList.at(i), node, PO_ActivityType_Names::ProductOutputStatus_Name);
    }
  }
  if (accessor.hasSearchActivity()) {
    SearchTrackActivityDetailsType::serialize(accessor.getSearchActivity(), node, PO_ActivityType_Names::SearchActivity_Name);
  }
  if (accessor.hasTrackActivity()) {
    PO_TrackActivityType::serialize(accessor.getTrackActivity(), node, PO_ActivityType_Names::TrackActivity_Name);
  }
  if (accessor.hasFOR_State()) {
    FOR_Enum::serialize(accessor.getFOR_State(), node, PO_ActivityType_Names::FOR_State_Name, false);
  }
  if (accessor.hasThermalBlankingFOR_State()) {
    FOR_Enum::serialize(accessor.getThermalBlankingFOR_State(), node, PO_ActivityType_Names::ThermalBlankingFOR_State_Name, false);
  }
  if (accessor.hasRepetition()) {
    RepetitionType::serialize(accessor.getRepetition(), node, PO_ActivityType_Names::Repetition_Name);
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

