/** @file NITF_PackingPlanType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/NITF_PackingPlanType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ACFTB_Type.h"
#include "extjson_uci/type/AIMIDB_Type.h"
#include "extjson_uci/type/EXPLTB_Type.h"
#include "extjson_uci/type/FileHeaderType.h"
#include "extjson_uci/type/ImageSubheaderType.h"
#include "extjson_uci/type/MSTGTA_Type.h"
#include "extjson_uci/type/NITF_PackingPlanPET.h"
#include "extjson_uci/type/PATCHB_Type.h"
#include "extjson_uci/type/SECTGA_Type.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/NITF_PackingPlanType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace NITF_PackingPlanType_Names {

constexpr const char* Extern_Type_Name{"NITF_PackingPlanType"};
constexpr const char* FileHeader_Name{"FileHeader"};
constexpr const char* ImageSubheader_Name{"ImageSubheader"};
constexpr const char* ACFTB_Name{"ACFTB"};
constexpr const char* AIMIDB_Name{"AIMIDB"};
constexpr const char* EXPLTB_Name{"EXPLTB"};
constexpr const char* MPDSRA_Name{"MPDSRA"};
constexpr const char* PATCHB_Name{"PATCHB"};
constexpr const char* MSTGTA_Name{"MSTGTA"};
constexpr const char* SECTGA_Name{"SECTGA"};

} // namespace NITF_PackingPlanType_Names

bool NITF_PackingPlanType::deserialize(const boost::property_tree::ptree& propTree, uci::type::NITF_PackingPlanType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = NITF_PackingPlanType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::FileHeader_Name) {
      FileHeaderType::deserialize(valueType.second, accessor.enableFileHeader(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::ImageSubheader_Name) {
      ImageSubheaderType::deserialize(valueType.second, accessor.enableImageSubheader(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::ACFTB_Name) {
      ACFTB_Type::deserialize(valueType.second, accessor.enableACFTB(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::AIMIDB_Name) {
      AIMIDB_Type::deserialize(valueType.second, accessor.enableAIMIDB(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::EXPLTB_Name) {
      EXPLTB_Type::deserialize(valueType.second, accessor.enableEXPLTB(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::MPDSRA_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMPDSRA(*value);
      }
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::PATCHB_Name) {
      PATCHB_Type::deserialize(valueType.second, accessor.enablePATCHB(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::MSTGTA_Name) {
      MSTGTA_Type::deserialize(valueType.second, accessor.enableMSTGTA(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NITF_PackingPlanType_Names::SECTGA_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::NITF_PackingPlanType::SECTGA& boundedList = accessor.getSECTGA();
        const uci::type::NITF_PackingPlanType::SECTGA::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SECTGA_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  NITF_PackingPlanPET::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string NITF_PackingPlanType::serialize(const uci::type::NITF_PackingPlanType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? NITF_PackingPlanType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, NITF_PackingPlanType_Names::Extern_Type_Name);
  }
  NITF_PackingPlanPET::serialize(accessor, node, "", false, false, false);
  if (accessor.hasFileHeader()) {
    FileHeaderType::serialize(accessor.getFileHeader(), node, NITF_PackingPlanType_Names::FileHeader_Name);
  }
  if (accessor.hasImageSubheader()) {
    ImageSubheaderType::serialize(accessor.getImageSubheader(), node, NITF_PackingPlanType_Names::ImageSubheader_Name);
  }
  if (accessor.hasACFTB()) {
    ACFTB_Type::serialize(accessor.getACFTB(), node, NITF_PackingPlanType_Names::ACFTB_Name);
  }
  if (accessor.hasAIMIDB()) {
    AIMIDB_Type::serialize(accessor.getAIMIDB(), node, NITF_PackingPlanType_Names::AIMIDB_Name);
  }
  if (accessor.hasEXPLTB()) {
    EXPLTB_Type::serialize(accessor.getEXPLTB(), node, NITF_PackingPlanType_Names::EXPLTB_Name);
  }
  if (accessor.hasMPDSRA()) {
    extjson_uci::util::SerializationHelpers::serializeString(accessor.getMPDSRA(), node, NITF_PackingPlanType_Names::MPDSRA_Name);
  }
  if (accessor.hasPATCHB()) {
    PATCHB_Type::serialize(accessor.getPATCHB(), node, NITF_PackingPlanType_Names::PATCHB_Name);
  }
  if (accessor.hasMSTGTA()) {
    MSTGTA_Type::serialize(accessor.getMSTGTA(), node, NITF_PackingPlanType_Names::MSTGTA_Name);
  }
  {
    const uci::type::NITF_PackingPlanType::SECTGA& boundedList = accessor.getSECTGA();
    for (uci::type::NITF_PackingPlanType::SECTGA::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SECTGA_Type::serialize(boundedList.at(i), node, NITF_PackingPlanType_Names::SECTGA_Name);
    }
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

