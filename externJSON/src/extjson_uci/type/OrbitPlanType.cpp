/** @file OrbitPlanType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:22 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/type/OrbitPlanType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/DateTimeRangeType.h"
#include "extjson_uci/type/OrbitKinematicsSequenceID_Type.h"
#include "extjson_uci/type/OrbitKinematicsSequenceType.h"
#include "extjson_uci/type/OrbitKinematicsSetParametersType.h"
#include "extjson_uci/type/OrbitPlanPartsType.h"
#include "extjson_uci/type/OrbitRegimeType.h"
#include "extjson_uci/type/PlanApplicabilityType.h"
#include "extjson_uci/util/DerivedTypesDeserializer.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/type/OrbitPlanType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace OrbitPlanType_Names {

constexpr const char* Extern_Type_Name{"OrbitPlanType"};
constexpr const char* Applicability_Name{"Applicability"};
constexpr const char* Window_Name{"Window"};
constexpr const char* Parts_Name{"Parts"};
constexpr const char* Orbit_Name{"Orbit"};
constexpr const char* Parameters_Name{"Parameters"};
constexpr const char* FirstSequenceID_Name{"FirstSequenceID"};
constexpr const char* Sequence_Name{"Sequence"};

} // namespace OrbitPlanType_Names

bool OrbitPlanType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitPlanType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitPlanType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if (valueType.first == nsPrefix + OrbitPlanType_Names::Applicability_Name) {
      PlanApplicabilityType::deserialize(valueType.second, accessor.getApplicability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitPlanType_Names::Window_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableWindow(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitPlanType_Names::Parts_Name) {
      OrbitPlanPartsType::deserialize(valueType.second, accessor.getParts(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitPlanType_Names::Orbit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitPlanType::Orbit& boundedList = accessor.getOrbit();
        const uci::type::OrbitPlanType::Orbit::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        OrbitRegimeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrbitPlanType_Names::Parameters_Name) {
      OrbitKinematicsSetParametersType::deserialize(valueType.second, accessor.enableParameters(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitPlanType_Names::FirstSequenceID_Name) {
      OrbitKinematicsSequenceID_Type::deserialize(valueType.second, accessor.getFirstSequenceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitPlanType_Names::Sequence_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrbitPlanType::Sequence& boundedList = accessor.getSequence();
        const uci::type::OrbitPlanType::Sequence::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extjson_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extjson_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string OrbitPlanType::serialize(const uci::type::OrbitPlanType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? OrbitPlanType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extjson_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitPlanType_Names::Extern_Type_Name);
  }
  PlanApplicabilityType::serialize(accessor.getApplicability(), node, OrbitPlanType_Names::Applicability_Name);
  if (accessor.hasWindow()) {
    DateTimeRangeType::serialize(accessor.getWindow(), node, OrbitPlanType_Names::Window_Name);
  }
  OrbitPlanPartsType::serialize(accessor.getParts(), node, OrbitPlanType_Names::Parts_Name);
  {
    const uci::type::OrbitPlanType::Orbit& boundedList = accessor.getOrbit();
    for (uci::type::OrbitPlanType::Orbit::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitRegimeType::serialize(boundedList.at(i), node, OrbitPlanType_Names::Orbit_Name);
    }
  }
  if (accessor.hasParameters()) {
    OrbitKinematicsSetParametersType::serialize(accessor.getParameters(), node, OrbitPlanType_Names::Parameters_Name);
  }
  OrbitKinematicsSequenceID_Type::serialize(accessor.getFirstSequenceID(), node, OrbitPlanType_Names::FirstSequenceID_Name);
  {
    const uci::type::OrbitPlanType::Sequence& boundedList = accessor.getSequence();
    for (uci::type::OrbitPlanType::Sequence::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitKinematicsSequenceType::serialize(boundedList.at(i), node, OrbitPlanType_Names::Sequence_Name);
    }
  }
  if (createNode) {
    propTree.add_child(boost::property_tree::ptree::path_type(generatedNodeName, '#'), node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extjson_uci

