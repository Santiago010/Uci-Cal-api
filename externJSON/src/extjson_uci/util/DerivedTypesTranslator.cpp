/** @file DerivedTypesTranslator.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/util/DerivedTypesTranslator.h"

#include <string>
#include <utility>

#include <boost/smart_ptr/make_unique.hpp>

#include "uci/base/accessorType.h"

/**  */
namespace extjson_uci {

/**  */
namespace util {

DerivedTypesTranslator::TranslationMapGenerator::TranslationMapGenerator()
  : translationMap{boost::make_unique<TranslationMap>()} {
  translationMap->reserve(2017);
  // use of initializer list with insert caused massive increase of compilation time with gcc
  translationMap->insert(std::make_pair("AccessAssessmentID_Type", uci::type::accessorType::accessAssessmentID_Type));
  translationMap->insert(std::make_pair("AccessAssessmentMT", uci::type::accessorType::accessAssessmentMT));
  translationMap->insert(std::make_pair("AccessAssessmentRequestMDT", uci::type::accessorType::accessAssessmentRequestMDT));
  translationMap->insert(std::make_pair("AccessAssessmentRequestMT", uci::type::accessorType::accessAssessmentRequestMT));
  translationMap->insert(std::make_pair("AccessAssessmentRequestStatusMDT", uci::type::accessorType::accessAssessmentRequestStatusMDT));
  translationMap->insert(std::make_pair("AccessAssessmentRequestStatusMT", uci::type::accessorType::accessAssessmentRequestStatusMT));
  translationMap->insert(std::make_pair("AchievabilityAssessmentPET", uci::type::accessorType::achievabilityAssessmentPET));
  translationMap->insert(std::make_pair("AchievabilityAssessmentRequestPET", uci::type::accessorType::achievabilityAssessmentRequestPET));
  translationMap->insert(std::make_pair("ACO_FileTraceabilityType", uci::type::accessorType::aCO_FileTraceabilityType));
  translationMap->insert(std::make_pair("ACO_TraceabilityType", uci::type::accessorType::aCO_TraceabilityType));
  translationMap->insert(std::make_pair("ACTDF_FileTraceabilityType", uci::type::accessorType::aCTDF_FileTraceabilityType));
  translationMap->insert(std::make_pair("ACTDF_TaskID_Type", uci::type::accessorType::aCTDF_TaskID_Type));
  translationMap->insert(std::make_pair("ACTDF_TraceabilityType", uci::type::accessorType::aCTDF_TraceabilityType));
  translationMap->insert(std::make_pair("ActionActivityMT", uci::type::accessorType::actionActivityMT));
  translationMap->insert(std::make_pair("ActionActivityType", uci::type::accessorType::actionActivityType));
  translationMap->insert(std::make_pair("ActionAllocationType", uci::type::accessorType::actionAllocationType));
  translationMap->insert(std::make_pair("ActionCancelCommandMDT", uci::type::accessorType::actionCancelCommandMDT));
  translationMap->insert(std::make_pair("ActionCancelCommandMT", uci::type::accessorType::actionCancelCommandMT));
  translationMap->insert(std::make_pair("ActionCancelCommandStatusMDT", uci::type::accessorType::actionCancelCommandStatusMDT));
  translationMap->insert(std::make_pair("ActionCancelCommandStatusMT", uci::type::accessorType::actionCancelCommandStatusMT));
  translationMap->insert(std::make_pair("ActionCapabilityCommandType", uci::type::accessorType::actionCapabilityCommandType));
  translationMap->insert(std::make_pair("ActionCapabilityMDT", uci::type::accessorType::actionCapabilityMDT));
  translationMap->insert(std::make_pair("ActionCapabilityMT", uci::type::accessorType::actionCapabilityMT));
  translationMap->insert(std::make_pair("ActionCapabilityStatusMDT", uci::type::accessorType::actionCapabilityStatusMDT));
  translationMap->insert(std::make_pair("ActionCapabilityStatusMT", uci::type::accessorType::actionCapabilityStatusMT));
  translationMap->insert(std::make_pair("ActionCapabilityType", uci::type::accessorType::actionCapabilityType));
  translationMap->insert(std::make_pair("ActionCommandMT", uci::type::accessorType::actionCommandMT));
  translationMap->insert(std::make_pair("ActionCommandStatusMDT", uci::type::accessorType::actionCommandStatusMDT));
  translationMap->insert(std::make_pair("ActionCommandStatusMT", uci::type::accessorType::actionCommandStatusMT));
  translationMap->insert(std::make_pair("ActionExecutionApprovalStatusMDT", uci::type::accessorType::actionExecutionApprovalStatusMDT));
  translationMap->insert(std::make_pair("ActionExecutionApprovalStatusMT", uci::type::accessorType::actionExecutionApprovalStatusMT));
  translationMap->insert(std::make_pair("ActionID_Type", uci::type::accessorType::actionID_Type));
  translationMap->insert(std::make_pair("ActionMT", uci::type::accessorType::actionMT));
  translationMap->insert(std::make_pair("ActionPlanApprovalStatusMT", uci::type::accessorType::actionPlanApprovalStatusMT));
  translationMap->insert(std::make_pair("ActionPlanCommandID_Type", uci::type::accessorType::actionPlanCommandID_Type));
  translationMap->insert(std::make_pair("ActionPlanCommandMT", uci::type::accessorType::actionPlanCommandMT));
  translationMap->insert(std::make_pair("ActionPlanCommandStatusMT", uci::type::accessorType::actionPlanCommandStatusMT));
  translationMap->insert(std::make_pair("ActionPlanExecutionStatusMT", uci::type::accessorType::actionPlanExecutionStatusMT));
  translationMap->insert(std::make_pair("ActionPlanID_Type", uci::type::accessorType::actionPlanID_Type));
  translationMap->insert(std::make_pair("ActionPlanInputsType", uci::type::accessorType::actionPlanInputsType));
  translationMap->insert(std::make_pair("ActionPlanMT", uci::type::accessorType::actionPlanMT));
  translationMap->insert(std::make_pair("ActionPlanningResultType", uci::type::accessorType::actionPlanningResultType));
  translationMap->insert(std::make_pair("ActionPlanningStatusMDT", uci::type::accessorType::actionPlanningStatusMDT));
  translationMap->insert(std::make_pair("ActionPlanningStatusMT", uci::type::accessorType::actionPlanningStatusMT));
  translationMap->insert(std::make_pair("ActionPlanProcessDescriptionType", uci::type::accessorType::actionPlanProcessDescriptionType));
  translationMap->insert(std::make_pair("ActionPlanStatusMT", uci::type::accessorType::actionPlanStatusMT));
  translationMap->insert(std::make_pair("ActionPlanValidationCommandMDT", uci::type::accessorType::actionPlanValidationCommandMDT));
  translationMap->insert(std::make_pair("ActionPlanValidationCommandMT", uci::type::accessorType::actionPlanValidationCommandMT));
  translationMap->insert(std::make_pair("ActionPlanValidationCommandStatusMDT", uci::type::accessorType::actionPlanValidationCommandStatusMDT));
  translationMap->insert(std::make_pair("ActionPlanValidationCommandStatusMT", uci::type::accessorType::actionPlanValidationCommandStatusMT));
  translationMap->insert(std::make_pair("ActionPlanValidationID_Type", uci::type::accessorType::actionPlanValidationID_Type));
  translationMap->insert(std::make_pair("ActionPlanValidationInputsType", uci::type::accessorType::actionPlanValidationInputsType));
  translationMap->insert(std::make_pair("ActionPlanValidationMT", uci::type::accessorType::actionPlanValidationMT));
  translationMap->insert(std::make_pair("ActionStatusMDT", uci::type::accessorType::actionStatusMDT));
  translationMap->insert(std::make_pair("ActionStatusMT", uci::type::accessorType::actionStatusMT));
  translationMap->insert(std::make_pair("ActivityBaseType", uci::type::accessorType::activityBaseType));
  translationMap->insert(std::make_pair("ActivityCommandBaseType", uci::type::accessorType::activityCommandBaseType));
  translationMap->insert(std::make_pair("ActivityExecutionStatusType", uci::type::accessorType::activityExecutionStatusType));
  translationMap->insert(std::make_pair("ActivityID_Type", uci::type::accessorType::activityID_Type));
  translationMap->insert(std::make_pair("ActivityMetricsID_Type", uci::type::accessorType::activityMetricsID_Type));
  translationMap->insert(std::make_pair("ActivityMetricsMT", uci::type::accessorType::activityMetricsMT));
  translationMap->insert(std::make_pair("ActivityMetricsRequestMDT", uci::type::accessorType::activityMetricsRequestMDT));
  translationMap->insert(std::make_pair("ActivityMetricsRequestMT", uci::type::accessorType::activityMetricsRequestMT));
  translationMap->insert(std::make_pair("ActivityMetricsRequestStatusMDT", uci::type::accessorType::activityMetricsRequestStatusMDT));
  translationMap->insert(std::make_pair("ActivityMetricsRequestStatusMT", uci::type::accessorType::activityMetricsRequestStatusMT));
  translationMap->insert(std::make_pair("ActivityPlanApprovalStatusMT", uci::type::accessorType::activityPlanApprovalStatusMT));
  translationMap->insert(std::make_pair("ActivityPlanCommandID_Type", uci::type::accessorType::activityPlanCommandID_Type));
  translationMap->insert(std::make_pair("ActivityPlanCommandMT", uci::type::accessorType::activityPlanCommandMT));
  translationMap->insert(std::make_pair("ActivityPlanCommandStatusMT", uci::type::accessorType::activityPlanCommandStatusMT));
  translationMap->insert(std::make_pair("ActivityPlanExecutionStatusMT", uci::type::accessorType::activityPlanExecutionStatusMT));
  translationMap->insert(std::make_pair("ActivityPlanID_Type", uci::type::accessorType::activityPlanID_Type));
  translationMap->insert(std::make_pair("ActivityPlanInputsType", uci::type::accessorType::activityPlanInputsType));
  translationMap->insert(std::make_pair("ActivityPlanMT", uci::type::accessorType::activityPlanMT));
  translationMap->insert(std::make_pair("ActivityPlanPartsCommandType", uci::type::accessorType::activityPlanPartsCommandType));
  translationMap->insert(std::make_pair("ActivityPlanPartsType", uci::type::accessorType::activityPlanPartsType));
  translationMap->insert(std::make_pair("ActivityPlanProcessDescriptionType", uci::type::accessorType::activityPlanProcessDescriptionType));
  translationMap->insert(std::make_pair("ActivityPlanStatusMT", uci::type::accessorType::activityPlanStatusMT));
  translationMap->insert(std::make_pair("ActivityPlanStatusType", uci::type::accessorType::activityPlanStatusType));
  translationMap->insert(std::make_pair("ActivityPlanValidationCommandMDT", uci::type::accessorType::activityPlanValidationCommandMDT));
  translationMap->insert(std::make_pair("ActivityPlanValidationCommandMT", uci::type::accessorType::activityPlanValidationCommandMT));
  translationMap->insert(std::make_pair("ActivityPlanValidationCommandStatusMDT", uci::type::accessorType::activityPlanValidationCommandStatusMDT));
  translationMap->insert(std::make_pair("ActivityPlanValidationCommandStatusMT", uci::type::accessorType::activityPlanValidationCommandStatusMT));
  translationMap->insert(std::make_pair("ActivityPlanValidationID_Type", uci::type::accessorType::activityPlanValidationID_Type));
  translationMap->insert(std::make_pair("ActivityPlanValidationInputsType", uci::type::accessorType::activityPlanValidationInputsType));
  translationMap->insert(std::make_pair("ActivityPlanValidationMT", uci::type::accessorType::activityPlanValidationMT));
  translationMap->insert(std::make_pair("AirfieldGeneralStoreType", uci::type::accessorType::airfieldGeneralStoreType));
  translationMap->insert(std::make_pair("AirfieldID_Type", uci::type::accessorType::airfieldID_Type));
  translationMap->insert(std::make_pair("AirfieldReportID_Type", uci::type::accessorType::airfieldReportID_Type));
  translationMap->insert(std::make_pair("AirfieldReportMT", uci::type::accessorType::airfieldReportMT));
  translationMap->insert(std::make_pair("AirfieldStoresPET", uci::type::accessorType::airfieldStoresPET));
  translationMap->insert(std::make_pair("AirfieldStoreType", uci::type::accessorType::airfieldStoreType));
  translationMap->insert(std::make_pair("AirSampleActivityMT", uci::type::accessorType::airSampleActivityMT));
  translationMap->insert(std::make_pair("AirSampleActivityType", uci::type::accessorType::airSampleActivityType));
  translationMap->insert(std::make_pair("AirSampleCapabilityCommandType", uci::type::accessorType::airSampleCapabilityCommandType));
  translationMap->insert(std::make_pair("AirSampleCapabilityMDT", uci::type::accessorType::airSampleCapabilityMDT));
  translationMap->insert(std::make_pair("AirSampleCapabilityMT", uci::type::accessorType::airSampleCapabilityMT));
  translationMap->insert(std::make_pair("AirSampleCapabilityStatusMDT", uci::type::accessorType::airSampleCapabilityStatusMDT));
  translationMap->insert(std::make_pair("AirSampleCapabilityStatusMT", uci::type::accessorType::airSampleCapabilityStatusMT));
  translationMap->insert(std::make_pair("AirSampleCapabilityType", uci::type::accessorType::airSampleCapabilityType));
  translationMap->insert(std::make_pair("AirSampleCommandMT", uci::type::accessorType::airSampleCommandMT));
  translationMap->insert(std::make_pair("AirSampleCommandStatusMDT", uci::type::accessorType::airSampleCommandStatusMDT));
  translationMap->insert(std::make_pair("AirSampleCommandStatusMT", uci::type::accessorType::airSampleCommandStatusMT));
  translationMap->insert(std::make_pair("AirSampleSettingsCommandMDT", uci::type::accessorType::airSampleSettingsCommandMDT));
  translationMap->insert(std::make_pair("AirSampleSettingsCommandMT", uci::type::accessorType::airSampleSettingsCommandMT));
  translationMap->insert(std::make_pair("AirSampleSettingsCommandStatusMDT", uci::type::accessorType::airSampleSettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("AirSampleSettingsCommandStatusMT", uci::type::accessorType::airSampleSettingsCommandStatusMT));
  translationMap->insert(std::make_pair("AirSampleTaskBaseType", uci::type::accessorType::airSampleTaskBaseType));
  translationMap->insert(std::make_pair("AirSampleTaskType", uci::type::accessorType::airSampleTaskType));
  translationMap->insert(std::make_pair("AMTI_ActivityCommandType", uci::type::accessorType::aMTI_ActivityCommandType));
  translationMap->insert(std::make_pair("AMTI_ActivityMT", uci::type::accessorType::aMTI_ActivityMT));
  translationMap->insert(std::make_pair("AMTI_ActivityType", uci::type::accessorType::aMTI_ActivityType));
  translationMap->insert(std::make_pair("AMTI_CapabilityCommandType", uci::type::accessorType::aMTI_CapabilityCommandType));
  translationMap->insert(std::make_pair("AMTI_CapabilityMDT", uci::type::accessorType::aMTI_CapabilityMDT));
  translationMap->insert(std::make_pair("AMTI_CapabilityMT", uci::type::accessorType::aMTI_CapabilityMT));
  translationMap->insert(std::make_pair("AMTI_CapabilityStatusMDT", uci::type::accessorType::aMTI_CapabilityStatusMDT));
  translationMap->insert(std::make_pair("AMTI_CapabilityStatusMT", uci::type::accessorType::aMTI_CapabilityStatusMT));
  translationMap->insert(std::make_pair("AMTI_CapabilityType", uci::type::accessorType::aMTI_CapabilityType));
  translationMap->insert(std::make_pair("AMTI_CollectionConstraintsType", uci::type::accessorType::aMTI_CollectionConstraintsType));
  translationMap->insert(std::make_pair("AMTI_CommandMT", uci::type::accessorType::aMTI_CommandMT));
  translationMap->insert(std::make_pair("AMTI_CommandStatusMDT", uci::type::accessorType::aMTI_CommandStatusMDT));
  translationMap->insert(std::make_pair("AMTI_CommandStatusMT", uci::type::accessorType::aMTI_CommandStatusMT));
  translationMap->insert(std::make_pair("AMTI_SettingsCommandMDT", uci::type::accessorType::aMTI_SettingsCommandMDT));
  translationMap->insert(std::make_pair("AMTI_SettingsCommandMT", uci::type::accessorType::aMTI_SettingsCommandMT));
  translationMap->insert(std::make_pair("AMTI_SettingsCommandStatusMDT", uci::type::accessorType::aMTI_SettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("AMTI_SettingsCommandStatusMT", uci::type::accessorType::aMTI_SettingsCommandStatusMT));
  translationMap->insert(std::make_pair("AMTI_TaskBaseType", uci::type::accessorType::aMTI_TaskBaseType));
  translationMap->insert(std::make_pair("AMTI_TaskType", uci::type::accessorType::aMTI_TaskType));
  translationMap->insert(std::make_pair("AnalysisRouteID_Type", uci::type::accessorType::analysisRouteID_Type));
  translationMap->insert(std::make_pair("AnalysisRouteMT", uci::type::accessorType::analysisRouteMT));
  translationMap->insert(std::make_pair("AnalysisRouteRequestMDT", uci::type::accessorType::analysisRouteRequestMDT));
  translationMap->insert(std::make_pair("AnalysisRouteRequestMT", uci::type::accessorType::analysisRouteRequestMT));
  translationMap->insert(std::make_pair("AnalysisRouteRequestStatusMDT", uci::type::accessorType::analysisRouteRequestStatusMDT));
  translationMap->insert(std::make_pair("AnalysisRouteRequestStatusMT", uci::type::accessorType::analysisRouteRequestStatusMT));
  translationMap->insert(std::make_pair("AnglePairType", uci::type::accessorType::anglePairType));
  translationMap->insert(std::make_pair("AntennaID_Type", uci::type::accessorType::antennaID_Type));
  translationMap->insert(std::make_pair("AntennaResourceID_Type", uci::type::accessorType::antennaResourceID_Type));
  translationMap->insert(std::make_pair("AO_ActivityCommandType", uci::type::accessorType::aO_ActivityCommandType));
  translationMap->insert(std::make_pair("AO_ActivityMT", uci::type::accessorType::aO_ActivityMT));
  translationMap->insert(std::make_pair("AO_ActivityType", uci::type::accessorType::aO_ActivityType));
  translationMap->insert(std::make_pair("AO_CapabilityCommandType", uci::type::accessorType::aO_CapabilityCommandType));
  translationMap->insert(std::make_pair("AO_CapabilityMDT", uci::type::accessorType::aO_CapabilityMDT));
  translationMap->insert(std::make_pair("AO_CapabilityMT", uci::type::accessorType::aO_CapabilityMT));
  translationMap->insert(std::make_pair("AO_CapabilityStatusMDT", uci::type::accessorType::aO_CapabilityStatusMDT));
  translationMap->insert(std::make_pair("AO_CapabilityStatusMT", uci::type::accessorType::aO_CapabilityStatusMT));
  translationMap->insert(std::make_pair("AO_CapabilityType", uci::type::accessorType::aO_CapabilityType));
  translationMap->insert(std::make_pair("AO_CommandMT", uci::type::accessorType::aO_CommandMT));
  translationMap->insert(std::make_pair("AO_CommandStatusMDT", uci::type::accessorType::aO_CommandStatusMDT));
  translationMap->insert(std::make_pair("AO_CommandStatusMT", uci::type::accessorType::aO_CommandStatusMT));
  translationMap->insert(std::make_pair("AO_ConsentRequestMT", uci::type::accessorType::aO_ConsentRequestMT));
  translationMap->insert(std::make_pair("AO_ConsentRequestStatusMDT", uci::type::accessorType::aO_ConsentRequestStatusMDT));
  translationMap->insert(std::make_pair("AO_ConsentRequestStatusMT", uci::type::accessorType::aO_ConsentRequestStatusMT));
  translationMap->insert(std::make_pair("AO_ConsentRequestType", uci::type::accessorType::aO_ConsentRequestType));
  translationMap->insert(std::make_pair("AO_SettingsCommandMDT", uci::type::accessorType::aO_SettingsCommandMDT));
  translationMap->insert(std::make_pair("AO_SettingsCommandMT", uci::type::accessorType::aO_SettingsCommandMT));
  translationMap->insert(std::make_pair("AO_SettingsCommandStatusMDT", uci::type::accessorType::aO_SettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("AO_SettingsCommandStatusMT", uci::type::accessorType::aO_SettingsCommandStatusMT));
  translationMap->insert(std::make_pair("AO_TaskBaseType", uci::type::accessorType::aO_TaskBaseType));
  translationMap->insert(std::make_pair("AO_TaskType", uci::type::accessorType::aO_TaskType));
  translationMap->insert(std::make_pair("ApplicabilityType", uci::type::accessorType::applicabilityType));
  translationMap->insert(std::make_pair("ApprovalAuthorityID_Type", uci::type::accessorType::approvalAuthorityID_Type));
  translationMap->insert(std::make_pair("ApprovalAuthorityMDT", uci::type::accessorType::approvalAuthorityMDT));
  translationMap->insert(std::make_pair("ApprovalAuthorityMT", uci::type::accessorType::approvalAuthorityMT));
  translationMap->insert(std::make_pair("ApprovalAuthorityRequestMDT", uci::type::accessorType::approvalAuthorityRequestMDT));
  translationMap->insert(std::make_pair("ApprovalAuthorityRequestMT", uci::type::accessorType::approvalAuthorityRequestMT));
  translationMap->insert(std::make_pair("ApprovalAuthorityRequestStatusMDT", uci::type::accessorType::approvalAuthorityRequestStatusMDT));
  translationMap->insert(std::make_pair("ApprovalAuthorityRequestStatusMT", uci::type::accessorType::approvalAuthorityRequestStatusMT));
  translationMap->insert(std::make_pair("ApprovalManagementCommandMDT", uci::type::accessorType::approvalManagementCommandMDT));
  translationMap->insert(std::make_pair("ApprovalManagementCommandMT", uci::type::accessorType::approvalManagementCommandMT));
  translationMap->insert(std::make_pair("ApprovalManagementCommandStatusMDT", uci::type::accessorType::approvalManagementCommandStatusMDT));
  translationMap->insert(std::make_pair("ApprovalManagementCommandStatusMT", uci::type::accessorType::approvalManagementCommandStatusMT));
  translationMap->insert(std::make_pair("ApprovalPolicyBaseType", uci::type::accessorType::approvalPolicyBaseType));
  translationMap->insert(std::make_pair("ApprovalPolicyID_Type", uci::type::accessorType::approvalPolicyID_Type));
  translationMap->insert(std::make_pair("ApprovalPolicyMDT", uci::type::accessorType::approvalPolicyMDT));
  translationMap->insert(std::make_pair("ApprovalPolicyMT", uci::type::accessorType::approvalPolicyMT));
  translationMap->insert(std::make_pair("ApprovalRequestMDT", uci::type::accessorType::approvalRequestMDT));
  translationMap->insert(std::make_pair("ApprovalRequestMT", uci::type::accessorType::approvalRequestMT));
  translationMap->insert(std::make_pair("ApprovalRequestStatusMDT", uci::type::accessorType::approvalRequestStatusMDT));
  translationMap->insert(std::make_pair("ApprovalRequestStatusMT", uci::type::accessorType::approvalRequestStatusMT));
  translationMap->insert(std::make_pair("AssessmentID_Type", uci::type::accessorType::assessmentID_Type));
  translationMap->insert(std::make_pair("AssessmentMT", uci::type::accessorType::assessmentMT));
  translationMap->insert(std::make_pair("AssessmentRequestMDT", uci::type::accessorType::assessmentRequestMDT));
  translationMap->insert(std::make_pair("AssessmentRequestMT", uci::type::accessorType::assessmentRequestMT));
  translationMap->insert(std::make_pair("AssessmentRequestStatusMDT", uci::type::accessorType::assessmentRequestStatusMDT));
  translationMap->insert(std::make_pair("AssessmentRequestStatusMT", uci::type::accessorType::assessmentRequestStatusMT));
  translationMap->insert(std::make_pair("AssessmentStatusType", uci::type::accessorType::assessmentStatusType));
  translationMap->insert(std::make_pair("ATO_FileTraceabilityType", uci::type::accessorType::aTO_FileTraceabilityType));
  translationMap->insert(std::make_pair("ATO_TraceabilityType", uci::type::accessorType::aTO_TraceabilityType));
  translationMap->insert(std::make_pair("ATR_ProcessingParametersType", uci::type::accessorType::aTR_ProcessingParametersType));
  translationMap->insert(std::make_pair("ATR_ProcessingResultsType", uci::type::accessorType::aTR_ProcessingResultsType));
  translationMap->insert(std::make_pair("AugmentationProcessingParametersType", uci::type::accessorType::augmentationProcessingParametersType));
  translationMap->insert(std::make_pair("AuthorizationID_Type", uci::type::accessorType::authorizationID_Type));
  translationMap->insert(std::make_pair("AuthorizationMDT", uci::type::accessorType::authorizationMDT));
  translationMap->insert(std::make_pair("AuthorizationMT", uci::type::accessorType::authorizationMT));
  translationMap->insert(std::make_pair("AutonomousPlanCommandType", uci::type::accessorType::autonomousPlanCommandType));
  translationMap->insert(std::make_pair("AutonomousPlanningActionID_Type", uci::type::accessorType::autonomousPlanningActionID_Type));
  translationMap->insert(std::make_pair("AutonomousPlanningConstrainingPlansType", uci::type::accessorType::autonomousPlanningConstrainingPlansType));
  translationMap->insert(std::make_pair("AutonomousPlanningOtherSystemConstrainingPlansType", uci::type::accessorType::autonomousPlanningOtherSystemConstrainingPlansType));
  translationMap->insert(std::make_pair("AzElRequiredReferenceType", uci::type::accessorType::azElRequiredReferenceType));
  translationMap->insert(std::make_pair("BaseEOB_RecordType", uci::type::accessorType::baseEOB_RecordType));
  translationMap->insert(std::make_pair("BeamID_Type", uci::type::accessorType::beamID_Type));
  translationMap->insert(std::make_pair("BehaviorType", uci::type::accessorType::behaviorType));
  translationMap->insert(std::make_pair("BIT_ID_Type", uci::type::accessorType::bIT_ID_Type));
  translationMap->insert(std::make_pair("ByRequirementPolicyType", uci::type::accessorType::byRequirementPolicyType));
  translationMap->insert(std::make_pair("ByResultPolicyType", uci::type::accessorType::byResultPolicyType));
  translationMap->insert(std::make_pair("ByTriggerPolicyType", uci::type::accessorType::byTriggerPolicyType));
  translationMap->insert(std::make_pair("CalibrationID_Type", uci::type::accessorType::calibrationID_Type));
  translationMap->insert(std::make_pair("CallSignType", uci::type::accessorType::callSignType));
  translationMap->insert(std::make_pair("CannotComplyType", uci::type::accessorType::cannotComplyType));
  translationMap->insert(std::make_pair("CapabilityBaseType", uci::type::accessorType::capabilityBaseType));
  translationMap->insert(std::make_pair("CapabilityCommandBaseType", uci::type::accessorType::capabilityCommandBaseType));
  translationMap->insert(std::make_pair("CapabilityCommandStatusBaseType", uci::type::accessorType::capabilityCommandStatusBaseType));
  translationMap->insert(std::make_pair("CapabilityConfigurationID_Type", uci::type::accessorType::capabilityConfigurationID_Type));
  translationMap->insert(std::make_pair("CapabilityConsentRequestStatusBaseType", uci::type::accessorType::capabilityConsentRequestStatusBaseType));
  translationMap->insert(std::make_pair("CapabilityCoverageAreaID_Type", uci::type::accessorType::capabilityCoverageAreaID_Type));
  translationMap->insert(std::make_pair("CapabilityCoverageAreaMT", uci::type::accessorType::capabilityCoverageAreaMT));
  translationMap->insert(std::make_pair("CapabilityCoverageAreaRequestMDT", uci::type::accessorType::capabilityCoverageAreaRequestMDT));
  translationMap->insert(std::make_pair("CapabilityCoverageAreaRequestMT", uci::type::accessorType::capabilityCoverageAreaRequestMT));
  translationMap->insert(std::make_pair("CapabilityCoverageAreaRequestStatusMDT", uci::type::accessorType::capabilityCoverageAreaRequestStatusMDT));
  translationMap->insert(std::make_pair("CapabilityCoverageAreaRequestStatusMT", uci::type::accessorType::capabilityCoverageAreaRequestStatusMT));
  translationMap->insert(std::make_pair("CapabilityDeclarationBaseType", uci::type::accessorType::capabilityDeclarationBaseType));
  translationMap->insert(std::make_pair("CapabilityID_Type", uci::type::accessorType::capabilityID_Type));
  translationMap->insert(std::make_pair("CapabilitySettingsCommandBaseType", uci::type::accessorType::capabilitySettingsCommandBaseType));
  translationMap->insert(std::make_pair("CapabilitySettingsCommandStatusBaseType", uci::type::accessorType::capabilitySettingsCommandStatusBaseType));
  translationMap->insert(std::make_pair("CapabilityStatusBaseType", uci::type::accessorType::capabilityStatusBaseType));
  translationMap->insert(std::make_pair("CapabilityStatusType", uci::type::accessorType::capabilityStatusType));
  translationMap->insert(std::make_pair("CapabilityTaxonomyUniversalBaseType", uci::type::accessorType::capabilityTaxonomyUniversalBaseType));
  translationMap->insert(std::make_pair("CapabilityTaxonomyUniversalType", uci::type::accessorType::capabilityTaxonomyUniversalType));
  translationMap->insert(std::make_pair("CargoDeliveryCapabilityMT", uci::type::accessorType::cargoDeliveryCapabilityMT));
  translationMap->insert(std::make_pair("CargoDeliveryCapabilityStatusMDT", uci::type::accessorType::cargoDeliveryCapabilityStatusMDT));
  translationMap->insert(std::make_pair("CargoDeliveryCapabilityStatusMT", uci::type::accessorType::cargoDeliveryCapabilityStatusMT));
  translationMap->insert(std::make_pair("CargoDeliveryCapabilityType", uci::type::accessorType::cargoDeliveryCapabilityType));
  translationMap->insert(std::make_pair("CargoID_Type", uci::type::accessorType::cargoID_Type));
  translationMap->insert(std::make_pair("CargoStatusMT", uci::type::accessorType::cargoStatusMT));
  translationMap->insert(std::make_pair("CenterPointImageRegionOfInterestType", uci::type::accessorType::centerPointImageRegionOfInterestType));
  translationMap->insert(std::make_pair("COE_OrbitBaseType", uci::type::accessorType::cOE_OrbitBaseType));
  translationMap->insert(std::make_pair("COE_OrbitType", uci::type::accessorType::cOE_OrbitType));
  translationMap->insert(std::make_pair("CollectionConstraintsType", uci::type::accessorType::collectionConstraintsType));
  translationMap->insert(std::make_pair("ColorDepthSettingsType", uci::type::accessorType::colorDepthSettingsType));
  translationMap->insert(std::make_pair("COMINT_ActivityCommandType", uci::type::accessorType::cOMINT_ActivityCommandType));
  translationMap->insert(std::make_pair("COMINT_ActivityMT", uci::type::accessorType::cOMINT_ActivityMT));
  translationMap->insert(std::make_pair("COMINT_ActivityType", uci::type::accessorType::cOMINT_ActivityType));
  translationMap->insert(std::make_pair("COMINT_CapabilityCommandType", uci::type::accessorType::cOMINT_CapabilityCommandType));
  translationMap->insert(std::make_pair("COMINT_CapabilityMDT", uci::type::accessorType::cOMINT_CapabilityMDT));
  translationMap->insert(std::make_pair("COMINT_CapabilityMT", uci::type::accessorType::cOMINT_CapabilityMT));
  translationMap->insert(std::make_pair("COMINT_CapabilityStatusMDT", uci::type::accessorType::cOMINT_CapabilityStatusMDT));
  translationMap->insert(std::make_pair("COMINT_CapabilityStatusMT", uci::type::accessorType::cOMINT_CapabilityStatusMT));
  translationMap->insert(std::make_pair("COMINT_CapabilityType", uci::type::accessorType::cOMINT_CapabilityType));
  translationMap->insert(std::make_pair("COMINT_CommandMT", uci::type::accessorType::cOMINT_CommandMT));
  translationMap->insert(std::make_pair("COMINT_CommandStatusMDT", uci::type::accessorType::cOMINT_CommandStatusMDT));
  translationMap->insert(std::make_pair("COMINT_CommandStatusMT", uci::type::accessorType::cOMINT_CommandStatusMT));
  translationMap->insert(std::make_pair("COMINT_ConsentRequestMT", uci::type::accessorType::cOMINT_ConsentRequestMT));
  translationMap->insert(std::make_pair("COMINT_ConsentRequestStatusMDT", uci::type::accessorType::cOMINT_ConsentRequestStatusMDT));
  translationMap->insert(std::make_pair("COMINT_ConsentRequestStatusMT", uci::type::accessorType::cOMINT_ConsentRequestStatusMT));
  translationMap->insert(std::make_pair("COMINT_ConsentRequestType", uci::type::accessorType::cOMINT_ConsentRequestType));
  translationMap->insert(std::make_pair("COMINT_ProcessingParametersType", uci::type::accessorType::cOMINT_ProcessingParametersType));
  translationMap->insert(std::make_pair("COMINT_SettingsCommandMDT", uci::type::accessorType::cOMINT_SettingsCommandMDT));
  translationMap->insert(std::make_pair("COMINT_SettingsCommandMT", uci::type::accessorType::cOMINT_SettingsCommandMT));
  translationMap->insert(std::make_pair("COMINT_SettingsCommandStatusMDT", uci::type::accessorType::cOMINT_SettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("COMINT_SettingsCommandStatusMT", uci::type::accessorType::cOMINT_SettingsCommandStatusMT));
  translationMap->insert(std::make_pair("COMINT_TaskBaseType", uci::type::accessorType::cOMINT_TaskBaseType));
  translationMap->insert(std::make_pair("COMINT_TaskType", uci::type::accessorType::cOMINT_TaskType));
  translationMap->insert(std::make_pair("CommActionExtendedType", uci::type::accessorType::commActionExtendedType));
  translationMap->insert(std::make_pair("CommActionType", uci::type::accessorType::commActionType));
  translationMap->insert(std::make_pair("CommandableCapabilityDeclarationType", uci::type::accessorType::commandableCapabilityDeclarationType));
  translationMap->insert(std::make_pair("CommandBaseType", uci::type::accessorType::commandBaseType));
  translationMap->insert(std::make_pair("CommandID_Type", uci::type::accessorType::commandID_Type));
  translationMap->insert(std::make_pair("CommandStatusBaseType", uci::type::accessorType::commandStatusBaseType));
  translationMap->insert(std::make_pair("CommAntennaModeType", uci::type::accessorType::commAntennaModeType));
  translationMap->insert(std::make_pair("CommAssetEstimationRequestMDT", uci::type::accessorType::commAssetEstimationRequestMDT));
  translationMap->insert(std::make_pair("CommAssetEstimationRequestMT", uci::type::accessorType::commAssetEstimationRequestMT));
  translationMap->insert(std::make_pair("CommAssetEstimationRequestStatusMDT", uci::type::accessorType::commAssetEstimationRequestStatusMDT));
  translationMap->insert(std::make_pair("CommAssetEstimationRequestStatusMT", uci::type::accessorType::commAssetEstimationRequestStatusMT));
  translationMap->insert(std::make_pair("CommAssetID_Type", uci::type::accessorType::commAssetID_Type));
  translationMap->insert(std::make_pair("CommAssetMT", uci::type::accessorType::commAssetMT));
  translationMap->insert(std::make_pair("CommAssetOrbitID_Type", uci::type::accessorType::commAssetOrbitID_Type));
  translationMap->insert(std::make_pair("CommAssetOrbitMT", uci::type::accessorType::commAssetOrbitMT));
  translationMap->insert(std::make_pair("CommAssetPositionReportMT", uci::type::accessorType::commAssetPositionReportMT));
  translationMap->insert(std::make_pair("CommBLOS_CommWaveformActivityCommandType", uci::type::accessorType::commBLOS_CommWaveformActivityCommandType));
  translationMap->insert(std::make_pair("CommBLOS_CommWaveformActivityType", uci::type::accessorType::commBLOS_CommWaveformActivityType));
  translationMap->insert(std::make_pair("CommBLOS_CommWaveformCapabilityCommandType", uci::type::accessorType::commBLOS_CommWaveformCapabilityCommandType));
  translationMap->insert(std::make_pair("CommCDL_CommWaveformActivityCommandType", uci::type::accessorType::commCDL_CommWaveformActivityCommandType));
  translationMap->insert(std::make_pair("CommCDL_CommWaveformActivityType", uci::type::accessorType::commCDL_CommWaveformActivityType));
  translationMap->insert(std::make_pair("CommCDL_CommWaveformCapabilityCommandType", uci::type::accessorType::commCDL_CommWaveformCapabilityCommandType));
  translationMap->insert(std::make_pair("CommConfigurationID_Type", uci::type::accessorType::commConfigurationID_Type));
  translationMap->insert(std::make_pair("CommCoverageDataType", uci::type::accessorType::commCoverageDataType));
  translationMap->insert(std::make_pair("CommCoverageUserDataType", uci::type::accessorType::commCoverageUserDataType));
  translationMap->insert(std::make_pair("CommDataType", uci::type::accessorType::commDataType));
  translationMap->insert(std::make_pair("CommEffectivityID_Type", uci::type::accessorType::commEffectivityID_Type));
  translationMap->insert(std::make_pair("CommIFDL_CommWaveformActivityCommandType", uci::type::accessorType::commIFDL_CommWaveformActivityCommandType));
  translationMap->insert(std::make_pair("CommIFDL_CommWaveformActivityType", uci::type::accessorType::commIFDL_CommWaveformActivityType));
  translationMap->insert(std::make_pair("CommIFDL_CommWaveformCapabilityCommandType", uci::type::accessorType::commIFDL_CommWaveformCapabilityCommandType));
  translationMap->insert(std::make_pair("CommLink16CommWaveformActivityCommandType", uci::type::accessorType::commLink16CommWaveformActivityCommandType));
  translationMap->insert(std::make_pair("CommLink16CommWaveformActivityType", uci::type::accessorType::commLink16CommWaveformActivityType));
  translationMap->insert(std::make_pair("CommLink16CommWaveformCapabilityCommandType", uci::type::accessorType::commLink16CommWaveformCapabilityCommandType));
  translationMap->insert(std::make_pair("CommMADL_CommWaveformActivityCommandType", uci::type::accessorType::commMADL_CommWaveformActivityCommandType));
  translationMap->insert(std::make_pair("CommMADL_CommWaveformActivityType", uci::type::accessorType::commMADL_CommWaveformActivityType));
  translationMap->insert(std::make_pair("CommMADL_CommWaveformCapabilityCommandType", uci::type::accessorType::commMADL_CommWaveformCapabilityCommandType));
  translationMap->insert(std::make_pair("CommOutageType", uci::type::accessorType::commOutageType));
  translationMap->insert(std::make_pair("CommPointingCommandMDT", uci::type::accessorType::commPointingCommandMDT));
  translationMap->insert(std::make_pair("CommPointingCommandMT", uci::type::accessorType::commPointingCommandMT));
  translationMap->insert(std::make_pair("CommPointingCommandStatusMDT", uci::type::accessorType::commPointingCommandStatusMDT));
  translationMap->insert(std::make_pair("CommPointingCommandStatusMT", uci::type::accessorType::commPointingCommandStatusMT));
  translationMap->insert(std::make_pair("CommPointingID_Type", uci::type::accessorType::commPointingID_Type));
  translationMap->insert(std::make_pair("CommPointingMT", uci::type::accessorType::commPointingMT));
  translationMap->insert(std::make_pair("CommPointingRequestMDT", uci::type::accessorType::commPointingRequestMDT));
  translationMap->insert(std::make_pair("CommPointingRequestMT", uci::type::accessorType::commPointingRequestMT));
  translationMap->insert(std::make_pair("CommPointingRequestStatusMDT", uci::type::accessorType::commPointingRequestStatusMDT));
  translationMap->insert(std::make_pair("CommPointingRequestStatusMT", uci::type::accessorType::commPointingRequestStatusMT));
  translationMap->insert(std::make_pair("CommProfileID_Type", uci::type::accessorType::commProfileID_Type));
  translationMap->insert(std::make_pair("CommPTW_CommWaveformActivityCommandType", uci::type::accessorType::commPTW_CommWaveformActivityCommandType));
  translationMap->insert(std::make_pair("CommPTW_CommWaveformActivityType", uci::type::accessorType::commPTW_CommWaveformActivityType));
  translationMap->insert(std::make_pair("CommPTW_CommWaveformCapabilityCommandType", uci::type::accessorType::commPTW_CommWaveformCapabilityCommandType));
  translationMap->insert(std::make_pair("CommRelayActivityMT", uci::type::accessorType::commRelayActivityMT));
  translationMap->insert(std::make_pair("CommRelayActivityType", uci::type::accessorType::commRelayActivityType));
  translationMap->insert(std::make_pair("CommRelayCapabilityCommandType", uci::type::accessorType::commRelayCapabilityCommandType));
  translationMap->insert(std::make_pair("CommRelayCapabilityMDT", uci::type::accessorType::commRelayCapabilityMDT));
  translationMap->insert(std::make_pair("CommRelayCapabilityMT", uci::type::accessorType::commRelayCapabilityMT));
  translationMap->insert(std::make_pair("CommRelayCapabilityStatusMDT", uci::type::accessorType::commRelayCapabilityStatusMDT));
  translationMap->insert(std::make_pair("CommRelayCapabilityStatusMT", uci::type::accessorType::commRelayCapabilityStatusMT));
  translationMap->insert(std::make_pair("CommRelayCapabilityType", uci::type::accessorType::commRelayCapabilityType));
  translationMap->insert(std::make_pair("CommRelayCommandMT", uci::type::accessorType::commRelayCommandMT));
  translationMap->insert(std::make_pair("CommRelayCommandStatusMDT", uci::type::accessorType::commRelayCommandStatusMDT));
  translationMap->insert(std::make_pair("CommRelayCommandStatusMT", uci::type::accessorType::commRelayCommandStatusMT));
  translationMap->insert(std::make_pair("CommRelaySettingsCommandMDT", uci::type::accessorType::commRelaySettingsCommandMDT));
  translationMap->insert(std::make_pair("CommRelaySettingsCommandMT", uci::type::accessorType::commRelaySettingsCommandMT));
  translationMap->insert(std::make_pair("CommRelaySettingsCommandStatusMDT", uci::type::accessorType::commRelaySettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("CommRelaySettingsCommandStatusMT", uci::type::accessorType::commRelaySettingsCommandStatusMT));
  translationMap->insert(std::make_pair("CommRelayTaskBaseType", uci::type::accessorType::commRelayTaskBaseType));
  translationMap->insert(std::make_pair("CommRelayTaskType", uci::type::accessorType::commRelayTaskType));
  translationMap->insert(std::make_pair("CommScheduleAllocationID_Type", uci::type::accessorType::commScheduleAllocationID_Type));
  translationMap->insert(std::make_pair("CommScheduleAllocationMT", uci::type::accessorType::commScheduleAllocationMT));
  translationMap->insert(std::make_pair("CommScheduleAllocationUpdateRequestMDT", uci::type::accessorType::commScheduleAllocationUpdateRequestMDT));
  translationMap->insert(std::make_pair("CommScheduleAllocationUpdateRequestMT", uci::type::accessorType::commScheduleAllocationUpdateRequestMT));
  translationMap->insert(std::make_pair("CommScheduleAllocationUpdateRequestStatusMDT", uci::type::accessorType::commScheduleAllocationUpdateRequestStatusMDT));
  translationMap->insert(std::make_pair("CommScheduleAllocationUpdateRequestStatusMT", uci::type::accessorType::commScheduleAllocationUpdateRequestStatusMT));
  translationMap->insert(std::make_pair("CommScheduleAvailabilityID_Type", uci::type::accessorType::commScheduleAvailabilityID_Type));
  translationMap->insert(std::make_pair("CommScheduleAvailabilityMT", uci::type::accessorType::commScheduleAvailabilityMT));
  translationMap->insert(std::make_pair("CommSchedulingRequestMDT", uci::type::accessorType::commSchedulingRequestMDT));
  translationMap->insert(std::make_pair("CommSchedulingRequestMT", uci::type::accessorType::commSchedulingRequestMT));
  translationMap->insert(std::make_pair("CommSchedulingRequestStatusMDT", uci::type::accessorType::commSchedulingRequestStatusMDT));
  translationMap->insert(std::make_pair("CommSchedulingRequestStatusMT", uci::type::accessorType::commSchedulingRequestStatusMT));
  translationMap->insert(std::make_pair("CommSchedulingRequirementID_Type", uci::type::accessorType::commSchedulingRequirementID_Type));
  translationMap->insert(std::make_pair("CommSchedulingRequirementMT", uci::type::accessorType::commSchedulingRequirementMT));
  translationMap->insert(std::make_pair("CommSINCGARS_CommWaveformActivityCommandType", uci::type::accessorType::commSINCGARS_CommWaveformActivityCommandType));
  translationMap->insert(std::make_pair("CommSINCGARS_CommWaveformActivityType", uci::type::accessorType::commSINCGARS_CommWaveformActivityType));
  translationMap->insert(std::make_pair("CommSINCGARS_CommWaveformCapabilityCommandType", uci::type::accessorType::commSINCGARS_CommWaveformCapabilityCommandType));
  translationMap->insert(std::make_pair("CommStarlinkCommWaveformActivityCommandType", uci::type::accessorType::commStarlinkCommWaveformActivityCommandType));
  translationMap->insert(std::make_pair("CommStarlinkCommWaveformActivityType", uci::type::accessorType::commStarlinkCommWaveformActivityType));
  translationMap->insert(std::make_pair("CommStarlinkCommWaveformCapabilityCommandType", uci::type::accessorType::commStarlinkCommWaveformCapabilityCommandType));
  translationMap->insert(std::make_pair("CommSystemID_Type", uci::type::accessorType::commSystemID_Type));
  translationMap->insert(std::make_pair("CommSystemMT", uci::type::accessorType::commSystemMT));
  translationMap->insert(std::make_pair("CommTerminalActivityCommandType", uci::type::accessorType::commTerminalActivityCommandType));
  translationMap->insert(std::make_pair("CommTerminalActivityMT", uci::type::accessorType::commTerminalActivityMT));
  translationMap->insert(std::make_pair("CommTerminalActivityType", uci::type::accessorType::commTerminalActivityType));
  translationMap->insert(std::make_pair("CommTerminalCapabilityCommandType", uci::type::accessorType::commTerminalCapabilityCommandType));
  translationMap->insert(std::make_pair("CommTerminalCapabilityMDT", uci::type::accessorType::commTerminalCapabilityMDT));
  translationMap->insert(std::make_pair("CommTerminalCapabilityMT", uci::type::accessorType::commTerminalCapabilityMT));
  translationMap->insert(std::make_pair("CommTerminalCapabilityStatusMDT", uci::type::accessorType::commTerminalCapabilityStatusMDT));
  translationMap->insert(std::make_pair("CommTerminalCapabilityStatusMT", uci::type::accessorType::commTerminalCapabilityStatusMT));
  translationMap->insert(std::make_pair("CommTerminalCapabilityStatusType", uci::type::accessorType::commTerminalCapabilityStatusType));
  translationMap->insert(std::make_pair("CommTerminalCapabilityType", uci::type::accessorType::commTerminalCapabilityType));
  translationMap->insert(std::make_pair("CommTerminalCommandMT", uci::type::accessorType::commTerminalCommandMT));
  translationMap->insert(std::make_pair("CommTerminalCommandStatusMDT", uci::type::accessorType::commTerminalCommandStatusMDT));
  translationMap->insert(std::make_pair("CommTerminalCommandStatusMT", uci::type::accessorType::commTerminalCommandStatusMT));
  translationMap->insert(std::make_pair("CommTerminalPlanActivationCommandMDT", uci::type::accessorType::commTerminalPlanActivationCommandMDT));
  translationMap->insert(std::make_pair("CommTerminalPlanActivationCommandMT", uci::type::accessorType::commTerminalPlanActivationCommandMT));
  translationMap->insert(std::make_pair("CommTerminalPlanActivationCommandStatusMDT", uci::type::accessorType::commTerminalPlanActivationCommandStatusMDT));
  translationMap->insert(std::make_pair("CommTerminalPlanActivationCommandStatusMT", uci::type::accessorType::commTerminalPlanActivationCommandStatusMT));
  translationMap->insert(std::make_pair("CommTerminalPlanActivationStatusMT", uci::type::accessorType::commTerminalPlanActivationStatusMT));
  translationMap->insert(std::make_pair("CommTerminalPlanID_Type", uci::type::accessorType::commTerminalPlanID_Type));
  translationMap->insert(std::make_pair("CommTerminalPlanMT", uci::type::accessorType::commTerminalPlanMT));
  translationMap->insert(std::make_pair("CommTerminalPlanOverrideRequestMT", uci::type::accessorType::commTerminalPlanOverrideRequestMT));
  translationMap->insert(std::make_pair("CommTerminalPlanOverrideRequestStatusMDT", uci::type::accessorType::commTerminalPlanOverrideRequestStatusMDT));
  translationMap->insert(std::make_pair("CommTerminalPlanOverrideRequestStatusMT", uci::type::accessorType::commTerminalPlanOverrideRequestStatusMT));
  translationMap->insert(std::make_pair("CommTerminalPlanOverrideRequestType", uci::type::accessorType::commTerminalPlanOverrideRequestType));
  translationMap->insert(std::make_pair("CommTerminalSettingsCommandMDT", uci::type::accessorType::commTerminalSettingsCommandMDT));
  translationMap->insert(std::make_pair("CommTerminalSettingsCommandMT", uci::type::accessorType::commTerminalSettingsCommandMT));
  translationMap->insert(std::make_pair("CommTerminalSettingsCommandStatusMDT", uci::type::accessorType::commTerminalSettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("CommTerminalSettingsCommandStatusMT", uci::type::accessorType::commTerminalSettingsCommandStatusMT));
  translationMap->insert(std::make_pair("CommUHF_SATCOM_CommWaveformActivityCommandType", uci::type::accessorType::commUHF_SATCOM_CommWaveformActivityCommandType));
  translationMap->insert(std::make_pair("CommUHF_SATCOM_CommWaveformActivityType", uci::type::accessorType::commUHF_SATCOM_CommWaveformActivityType));
  translationMap->insert(std::make_pair("CommUHF_SATCOM_CommWaveformCapabilityCommandType", uci::type::accessorType::commUHF_SATCOM_CommWaveformCapabilityCommandType));
  translationMap->insert(std::make_pair("CommUserIO_ID_Type", uci::type::accessorType::commUserIO_ID_Type));
  translationMap->insert(std::make_pair("CommUserLinkID_Type", uci::type::accessorType::commUserLinkID_Type));
  translationMap->insert(std::make_pair("CommUtilizationRequestMDT", uci::type::accessorType::commUtilizationRequestMDT));
  translationMap->insert(std::make_pair("CommUtilizationRequestMT", uci::type::accessorType::commUtilizationRequestMT));
  translationMap->insert(std::make_pair("CommUtilizationRequestStatusMDT", uci::type::accessorType::commUtilizationRequestStatusMDT));
  translationMap->insert(std::make_pair("CommUtilizationRequestStatusMT", uci::type::accessorType::commUtilizationRequestStatusMT));
  translationMap->insert(std::make_pair("CommWaveformActivityCommandPET", uci::type::accessorType::commWaveformActivityCommandPET));
  translationMap->insert(std::make_pair("CommWaveformActivityPET", uci::type::accessorType::commWaveformActivityPET));
  translationMap->insert(std::make_pair("CommWaveformCapabilityCommandPET", uci::type::accessorType::commWaveformCapabilityCommandPET));
  translationMap->insert(std::make_pair("CompletedRequirementMetricsType", uci::type::accessorType::completedRequirementMetricsType));
  translationMap->insert(std::make_pair("ComponentConfigurationDataRequestMDT", uci::type::accessorType::componentConfigurationDataRequestMDT));
  translationMap->insert(std::make_pair("ComponentConfigurationDataRequestMT", uci::type::accessorType::componentConfigurationDataRequestMT));
  translationMap->insert(std::make_pair("ComponentConfigurationDataRequestStatusMDT", uci::type::accessorType::componentConfigurationDataRequestStatusMDT));
  translationMap->insert(std::make_pair("ComponentConfigurationDataRequestStatusMT", uci::type::accessorType::componentConfigurationDataRequestStatusMT));
  translationMap->insert(std::make_pair("ComponentConfigurationID_Type", uci::type::accessorType::componentConfigurationID_Type));
  translationMap->insert(std::make_pair("ComponentConfigurationMT", uci::type::accessorType::componentConfigurationMT));
  translationMap->insert(std::make_pair("ComponentConfigurationPET", uci::type::accessorType::componentConfigurationPET));
  translationMap->insert(std::make_pair("ComponentConfigurationTreeType", uci::type::accessorType::componentConfigurationTreeType));
  translationMap->insert(std::make_pair("ComponentConfigurationType", uci::type::accessorType::componentConfigurationType));
  translationMap->insert(std::make_pair("ComponentDetailedStatusInfoType", uci::type::accessorType::componentDetailedStatusInfoType));
  translationMap->insert(std::make_pair("ComponentDetailedStatusType", uci::type::accessorType::componentDetailedStatusType));
  translationMap->insert(std::make_pair("ComponentElementID_Type", uci::type::accessorType::componentElementID_Type));
  translationMap->insert(std::make_pair("ComponentExtendedStatusPET", uci::type::accessorType::componentExtendedStatusPET));
  translationMap->insert(std::make_pair("ComponentID_Type", uci::type::accessorType::componentID_Type));
  translationMap->insert(std::make_pair("ComponentSettingsCommandMDT", uci::type::accessorType::componentSettingsCommandMDT));
  translationMap->insert(std::make_pair("ComponentSettingsCommandMT", uci::type::accessorType::componentSettingsCommandMT));
  translationMap->insert(std::make_pair("ComponentSettingsCommandStatusMDT", uci::type::accessorType::componentSettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("ComponentSettingsCommandStatusMT", uci::type::accessorType::componentSettingsCommandStatusMT));
  translationMap->insert(std::make_pair("ComponentStatusDataRequestMDT", uci::type::accessorType::componentStatusDataRequestMDT));
  translationMap->insert(std::make_pair("ComponentStatusDataRequestMT", uci::type::accessorType::componentStatusDataRequestMT));
  translationMap->insert(std::make_pair("ComponentStatusDataRequestStatusMDT", uci::type::accessorType::componentStatusDataRequestStatusMDT));
  translationMap->insert(std::make_pair("ComponentStatusDataRequestStatusMT", uci::type::accessorType::componentStatusDataRequestStatusMT));
  translationMap->insert(std::make_pair("ComponentStatusMT", uci::type::accessorType::componentStatusMT));
  translationMap->insert(std::make_pair("ComponentTemperatureType", uci::type::accessorType::componentTemperatureType));
  translationMap->insert(std::make_pair("CompressionRatioSettingsType", uci::type::accessorType::compressionRatioSettingsType));
  translationMap->insert(std::make_pair("ConstrainingPlanPartsType", uci::type::accessorType::constrainingPlanPartsType));
  translationMap->insert(std::make_pair("ControlInterfacesCommandMDT", uci::type::accessorType::controlInterfacesCommandMDT));
  translationMap->insert(std::make_pair("ControlInterfacesCommandMT", uci::type::accessorType::controlInterfacesCommandMT));
  translationMap->insert(std::make_pair("ControlInterfacesCommandStatusMDT", uci::type::accessorType::controlInterfacesCommandStatusMDT));
  translationMap->insert(std::make_pair("ControlInterfacesCommandStatusMT", uci::type::accessorType::controlInterfacesCommandStatusMT));
  translationMap->insert(std::make_pair("ControlRequestMDT", uci::type::accessorType::controlRequestMDT));
  translationMap->insert(std::make_pair("ControlRequestMT", uci::type::accessorType::controlRequestMT));
  translationMap->insert(std::make_pair("ControlRequestStatusMDT", uci::type::accessorType::controlRequestStatusMDT));
  translationMap->insert(std::make_pair("ControlRequestStatusMT", uci::type::accessorType::controlRequestStatusMT));
  translationMap->insert(std::make_pair("ControlSourcesCommandMDT", uci::type::accessorType::controlSourcesCommandMDT));
  translationMap->insert(std::make_pair("ControlSourcesCommandMT", uci::type::accessorType::controlSourcesCommandMT));
  translationMap->insert(std::make_pair("ControlSourcesCommandStatusMDT", uci::type::accessorType::controlSourcesCommandStatusMDT));
  translationMap->insert(std::make_pair("ControlSourcesCommandStatusMT", uci::type::accessorType::controlSourcesCommandStatusMT));
  translationMap->insert(std::make_pair("ControlStatusMT", uci::type::accessorType::controlStatusMT));
  translationMap->insert(std::make_pair("CoordinatedRequirementSetID_Type", uci::type::accessorType::coordinatedRequirementSetID_Type));
  translationMap->insert(std::make_pair("CoordinatedRequirementSetMT", uci::type::accessorType::coordinatedRequirementSetMT));
  translationMap->insert(std::make_pair("CoordinatedRequirementSetStatusMT", uci::type::accessorType::coordinatedRequirementSetStatusMT));
  translationMap->insert(std::make_pair("CornerPointImageRegionOfInterestType", uci::type::accessorType::cornerPointImageRegionOfInterestType));
  translationMap->insert(std::make_pair("CorrelatedEntityID_Type", uci::type::accessorType::correlatedEntityID_Type));
  translationMap->insert(std::make_pair("CounterSpaceActivityMT", uci::type::accessorType::counterSpaceActivityMT));
  translationMap->insert(std::make_pair("CounterSpaceCapabilityMDT", uci::type::accessorType::counterSpaceCapabilityMDT));
  translationMap->insert(std::make_pair("CounterSpaceCapabilityMT", uci::type::accessorType::counterSpaceCapabilityMT));
  translationMap->insert(std::make_pair("CounterSpaceCapabilityStatusMDT", uci::type::accessorType::counterSpaceCapabilityStatusMDT));
  translationMap->insert(std::make_pair("CounterSpaceCapabilityStatusMT", uci::type::accessorType::counterSpaceCapabilityStatusMT));
  translationMap->insert(std::make_pair("CounterSpaceDeconflictionID_Type", uci::type::accessorType::counterSpaceDeconflictionID_Type));
  translationMap->insert(std::make_pair("CounterSpaceDeconflictionMDT", uci::type::accessorType::counterSpaceDeconflictionMDT));
  translationMap->insert(std::make_pair("CounterSpaceDeconflictionMT", uci::type::accessorType::counterSpaceDeconflictionMT));
  translationMap->insert(std::make_pair("CounterSpaceReportID_Type", uci::type::accessorType::counterSpaceReportID_Type));
  translationMap->insert(std::make_pair("CounterSpaceReportMT", uci::type::accessorType::counterSpaceReportMT));
  translationMap->insert(std::make_pair("CryptoCommandMT", uci::type::accessorType::cryptoCommandMT));
  translationMap->insert(std::make_pair("CryptoCommandStatusMDT", uci::type::accessorType::cryptoCommandStatusMDT));
  translationMap->insert(std::make_pair("CryptoCommandStatusMT", uci::type::accessorType::cryptoCommandStatusMT));
  translationMap->insert(std::make_pair("CryptoCommandType", uci::type::accessorType::cryptoCommandType));
  translationMap->insert(std::make_pair("CryptoPortID_Type", uci::type::accessorType::cryptoPortID_Type));
  translationMap->insert(std::make_pair("CryptoSlotGroupID_Type", uci::type::accessorType::cryptoSlotGroupID_Type));
  translationMap->insert(std::make_pair("CryptoStatusMT", uci::type::accessorType::cryptoStatusMT));
  translationMap->insert(std::make_pair("CryptoStatusType", uci::type::accessorType::cryptoStatusType));
  translationMap->insert(std::make_pair("CS_ActivityDetailType", uci::type::accessorType::cS_ActivityDetailType));
  translationMap->insert(std::make_pair("CS_ActivityType", uci::type::accessorType::cS_ActivityType));
  translationMap->insert(std::make_pair("CS_AssessmentType", uci::type::accessorType::cS_AssessmentType));
  translationMap->insert(std::make_pair("CS_CapabilityType", uci::type::accessorType::cS_CapabilityType));
  translationMap->insert(std::make_pair("DamageAssessmentDetailType", uci::type::accessorType::damageAssessmentDetailType));
  translationMap->insert(std::make_pair("DamageAssessmentID_Type", uci::type::accessorType::damageAssessmentID_Type));
  translationMap->insert(std::make_pair("DamageAssessmentMT", uci::type::accessorType::damageAssessmentMT));
  translationMap->insert(std::make_pair("DamageAssessmentRequestMDT", uci::type::accessorType::damageAssessmentRequestMDT));
  translationMap->insert(std::make_pair("DamageAssessmentRequestMT", uci::type::accessorType::damageAssessmentRequestMT));
  translationMap->insert(std::make_pair("DamageAssessmentRequestStatusMDT", uci::type::accessorType::damageAssessmentRequestStatusMDT));
  translationMap->insert(std::make_pair("DamageAssessmentRequestStatusMT", uci::type::accessorType::damageAssessmentRequestStatusMT));
  translationMap->insert(std::make_pair("DamagedFunctionType", uci::type::accessorType::damagedFunctionType));
  translationMap->insert(std::make_pair("DamageEstimateID_Type", uci::type::accessorType::damageEstimateID_Type));
  translationMap->insert(std::make_pair("DamageEstimateMT", uci::type::accessorType::damageEstimateMT));
  translationMap->insert(std::make_pair("DamageEstimateRequestMDT", uci::type::accessorType::damageEstimateRequestMDT));
  translationMap->insert(std::make_pair("DamageEstimateRequestMT", uci::type::accessorType::damageEstimateRequestMT));
  translationMap->insert(std::make_pair("DamageEstimateRequestStatusMDT", uci::type::accessorType::damageEstimateRequestStatusMDT));
  translationMap->insert(std::make_pair("DamageEstimateRequestStatusMT", uci::type::accessorType::damageEstimateRequestStatusMT));
  translationMap->insert(std::make_pair("DamageInformationSourceType", uci::type::accessorType::damageInformationSourceType));
  translationMap->insert(std::make_pair("DamageInformationWeatherSourceType", uci::type::accessorType::damageInformationWeatherSourceType));
  translationMap->insert(std::make_pair("DamageReportDetailType", uci::type::accessorType::damageReportDetailType));
  translationMap->insert(std::make_pair("DamageReportID_Type", uci::type::accessorType::damageReportID_Type));
  translationMap->insert(std::make_pair("DamageReportMT", uci::type::accessorType::damageReportMT));
  translationMap->insert(std::make_pair("DamageSummaryID_Type", uci::type::accessorType::damageSummaryID_Type));
  translationMap->insert(std::make_pair("DamageSummaryMT", uci::type::accessorType::damageSummaryMT));
  translationMap->insert(std::make_pair("DataDeleteRequestMDT", uci::type::accessorType::dataDeleteRequestMDT));
  translationMap->insert(std::make_pair("DataDeleteRequestMT", uci::type::accessorType::dataDeleteRequestMT));
  translationMap->insert(std::make_pair("DataDeleteRequestStatusMDT", uci::type::accessorType::dataDeleteRequestStatusMDT));
  translationMap->insert(std::make_pair("DataDeleteRequestStatusMT", uci::type::accessorType::dataDeleteRequestStatusMT));
  translationMap->insert(std::make_pair("DataDestinationID_Type", uci::type::accessorType::dataDestinationID_Type));
  translationMap->insert(std::make_pair("DataLinkIdentifierPET", uci::type::accessorType::dataLinkIdentifierPET));
  translationMap->insert(std::make_pair("DataLinkNativeFilter_NetworkLinkType", uci::type::accessorType::dataLinkNativeFilter_NetworkLinkType));
  translationMap->insert(std::make_pair("DataLinkNativeFilterPET", uci::type::accessorType::dataLinkNativeFilterPET));
  translationMap->insert(std::make_pair("DataLinkNativeInfoPET", uci::type::accessorType::dataLinkNativeInfoPET));
  translationMap->insert(std::make_pair("DataManagementRequestMDT", uci::type::accessorType::dataManagementRequestMDT));
  translationMap->insert(std::make_pair("DataManagementRequestMT", uci::type::accessorType::dataManagementRequestMT));
  translationMap->insert(std::make_pair("DataManagementRequestStatusMDT", uci::type::accessorType::dataManagementRequestStatusMDT));
  translationMap->insert(std::make_pair("DataManagementRequestStatusMT", uci::type::accessorType::dataManagementRequestStatusMT));
  translationMap->insert(std::make_pair("DataPlanActivationCommandMDT", uci::type::accessorType::dataPlanActivationCommandMDT));
  translationMap->insert(std::make_pair("DataPlanActivationCommandMT", uci::type::accessorType::dataPlanActivationCommandMT));
  translationMap->insert(std::make_pair("DataPlanActivationCommandStatusMDT", uci::type::accessorType::dataPlanActivationCommandStatusMDT));
  translationMap->insert(std::make_pair("DataPlanActivationCommandStatusMT", uci::type::accessorType::dataPlanActivationCommandStatusMT));
  translationMap->insert(std::make_pair("DataPlanActivationStatusMT", uci::type::accessorType::dataPlanActivationStatusMT));
  translationMap->insert(std::make_pair("DataPlanID_Type", uci::type::accessorType::dataPlanID_Type));
  translationMap->insert(std::make_pair("DataPlanMT", uci::type::accessorType::dataPlanMT));
  translationMap->insert(std::make_pair("DataPlanOverrideRequestMT", uci::type::accessorType::dataPlanOverrideRequestMT));
  translationMap->insert(std::make_pair("DataPlanOverrideRequestStatusMDT", uci::type::accessorType::dataPlanOverrideRequestStatusMDT));
  translationMap->insert(std::make_pair("DataPlanOverrideRequestStatusMT", uci::type::accessorType::dataPlanOverrideRequestStatusMT));
  translationMap->insert(std::make_pair("DataPlanOverrideRequestType", uci::type::accessorType::dataPlanOverrideRequestType));
  translationMap->insert(std::make_pair("DataRateDataType", uci::type::accessorType::dataRateDataType));
  translationMap->insert(std::make_pair("DataRecordBaseType", uci::type::accessorType::dataRecordBaseType));
  translationMap->insert(std::make_pair("DataRecordInstanceID_Type", uci::type::accessorType::dataRecordInstanceID_Type));
  translationMap->insert(std::make_pair("DataRecordListBaseType", uci::type::accessorType::dataRecordListBaseType));
  translationMap->insert(std::make_pair("DataRecordListID_Type", uci::type::accessorType::dataRecordListID_Type));
  translationMap->insert(std::make_pair("DataRecordListManagementRequestMDT", uci::type::accessorType::dataRecordListManagementRequestMDT));
  translationMap->insert(std::make_pair("DataRecordListManagementRequestMT", uci::type::accessorType::dataRecordListManagementRequestMT));
  translationMap->insert(std::make_pair("DataRecordListManagementRequestStatusMDT", uci::type::accessorType::dataRecordListManagementRequestStatusMDT));
  translationMap->insert(std::make_pair("DataRecordListManagementRequestStatusMT", uci::type::accessorType::dataRecordListManagementRequestStatusMT));
  translationMap->insert(std::make_pair("DataRecordManagementRequestMDT", uci::type::accessorType::dataRecordManagementRequestMDT));
  translationMap->insert(std::make_pair("DataRecordManagementRequestMT", uci::type::accessorType::dataRecordManagementRequestMT));
  translationMap->insert(std::make_pair("DataRecordManagementRequestStatusMDT", uci::type::accessorType::dataRecordManagementRequestStatusMDT));
  translationMap->insert(std::make_pair("DataRecordManagementRequestStatusMT", uci::type::accessorType::dataRecordManagementRequestStatusMT));
  translationMap->insert(std::make_pair("DataStorageUtilizationRequestMDT", uci::type::accessorType::dataStorageUtilizationRequestMDT));
  translationMap->insert(std::make_pair("DataStorageUtilizationRequestMT", uci::type::accessorType::dataStorageUtilizationRequestMT));
  translationMap->insert(std::make_pair("DataStorageUtilizationRequestStatusMDT", uci::type::accessorType::dataStorageUtilizationRequestStatusMDT));
  translationMap->insert(std::make_pair("DataStorageUtilizationRequestStatusMT", uci::type::accessorType::dataStorageUtilizationRequestStatusMT));
  translationMap->insert(std::make_pair("DataUpdateRequestMDT", uci::type::accessorType::dataUpdateRequestMDT));
  translationMap->insert(std::make_pair("DataUpdateRequestMT", uci::type::accessorType::dataUpdateRequestMT));
  translationMap->insert(std::make_pair("DataUpdateRequestStatusMDT", uci::type::accessorType::dataUpdateRequestStatusMDT));
  translationMap->insert(std::make_pair("DataUpdateRequestStatusMT", uci::type::accessorType::dataUpdateRequestStatusMT));
  translationMap->insert(std::make_pair("DeploymentDetectionType", uci::type::accessorType::deploymentDetectionType));
  translationMap->insert(std::make_pair("DesignationID_Type", uci::type::accessorType::designationID_Type));
  translationMap->insert(std::make_pair("DesignationMT", uci::type::accessorType::designationMT));
  translationMap->insert(std::make_pair("DesignationRequestMDT", uci::type::accessorType::designationRequestMDT));
  translationMap->insert(std::make_pair("DesignationRequestMT", uci::type::accessorType::designationRequestMT));
  translationMap->insert(std::make_pair("DesignationRequestStatusMDT", uci::type::accessorType::designationRequestStatusMDT));
  translationMap->insert(std::make_pair("DesignationRequestStatusMT", uci::type::accessorType::designationRequestStatusMT));
  translationMap->insert(std::make_pair("DiscreteDataLinkIdentifierType", uci::type::accessorType::discreteDataLinkIdentifierType));
  translationMap->insert(std::make_pair("DiscreteStatusMT", uci::type::accessorType::discreteStatusMT));
  translationMap->insert(std::make_pair("DisseminationConstrainedSubplanType", uci::type::accessorType::disseminationConstrainedSubplanType));
  translationMap->insert(std::make_pair("DisseminationSubplanType", uci::type::accessorType::disseminationSubplanType));
  translationMap->insert(std::make_pair("DLZ_ID_Type", uci::type::accessorType::dLZ_ID_Type));
  translationMap->insert(std::make_pair("DLZ_MT", uci::type::accessorType::dLZ_MT));
  translationMap->insert(std::make_pair("DLZ_RequestMDT", uci::type::accessorType::dLZ_RequestMDT));
  translationMap->insert(std::make_pair("DLZ_RequestMT", uci::type::accessorType::dLZ_RequestMT));
  translationMap->insert(std::make_pair("DLZ_RequestStatusMDT", uci::type::accessorType::dLZ_RequestStatusMDT));
  translationMap->insert(std::make_pair("DLZ_RequestStatusMT", uci::type::accessorType::dLZ_RequestStatusMT));
  translationMap->insert(std::make_pair("DMPI_AchievabilityAssessmentRequestType", uci::type::accessorType::dMPI_AchievabilityAssessmentRequestType));
  translationMap->insert(std::make_pair("DMPI_AchievabilityAssessmentType", uci::type::accessorType::dMPI_AchievabilityAssessmentType));
  translationMap->insert(std::make_pair("DMPI_CancelCommandMDT", uci::type::accessorType::dMPI_CancelCommandMDT));
  translationMap->insert(std::make_pair("DMPI_CancelCommandMT", uci::type::accessorType::dMPI_CancelCommandMT));
  translationMap->insert(std::make_pair("DMPI_CancelCommandStatusMDT", uci::type::accessorType::dMPI_CancelCommandStatusMDT));
  translationMap->insert(std::make_pair("DMPI_CancelCommandStatusMT", uci::type::accessorType::dMPI_CancelCommandStatusMT));
  translationMap->insert(std::make_pair("DMPI_DesignationID_Type", uci::type::accessorType::dMPI_DesignationID_Type));
  translationMap->insert(std::make_pair("DMPI_DesignationMDT", uci::type::accessorType::dMPI_DesignationMDT));
  translationMap->insert(std::make_pair("DMPI_DesignationMT", uci::type::accessorType::dMPI_DesignationMT));
  translationMap->insert(std::make_pair("DMPI_DesignationRequestMDT", uci::type::accessorType::dMPI_DesignationRequestMDT));
  translationMap->insert(std::make_pair("DMPI_DesignationRequestMT", uci::type::accessorType::dMPI_DesignationRequestMT));
  translationMap->insert(std::make_pair("DMPI_DesignationRequestStatusMDT", uci::type::accessorType::dMPI_DesignationRequestStatusMDT));
  translationMap->insert(std::make_pair("DMPI_DesignationRequestStatusMT", uci::type::accessorType::dMPI_DesignationRequestStatusMT));
  translationMap->insert(std::make_pair("DMPI_ID_Type", uci::type::accessorType::dMPI_ID_Type));
  translationMap->insert(std::make_pair("DMPI_MDT", uci::type::accessorType::dMPI_MDT));
  translationMap->insert(std::make_pair("DMPI_MT", uci::type::accessorType::dMPI_MT));
  translationMap->insert(std::make_pair("DMPI_PatternID_Type", uci::type::accessorType::dMPI_PatternID_Type));
  translationMap->insert(std::make_pair("DMPI_PatternMDT", uci::type::accessorType::dMPI_PatternMDT));
  translationMap->insert(std::make_pair("DMPI_PatternMT", uci::type::accessorType::dMPI_PatternMT));
  translationMap->insert(std::make_pair("DMPI_PatternType", uci::type::accessorType::dMPI_PatternType));
  translationMap->insert(std::make_pair("DMPI_RadialPatternType", uci::type::accessorType::dMPI_RadialPatternType));
  translationMap->insert(std::make_pair("DMPI_StatusMT", uci::type::accessorType::dMPI_StatusMT));
  translationMap->insert(std::make_pair("DMPI_XbyY_PatternType", uci::type::accessorType::dMPI_XbyY_PatternType));
  translationMap->insert(std::make_pair("DoorCommandMT", uci::type::accessorType::doorCommandMT));
  translationMap->insert(std::make_pair("DoorCommandStatusMDT", uci::type::accessorType::doorCommandStatusMDT));
  translationMap->insert(std::make_pair("DoorCommandStatusMT", uci::type::accessorType::doorCommandStatusMT));
  translationMap->insert(std::make_pair("DoorCommandType", uci::type::accessorType::doorCommandType));
  translationMap->insert(std::make_pair("DoorStatusMT", uci::type::accessorType::doorStatusMT));
  translationMap->insert(std::make_pair("DoorStatusType", uci::type::accessorType::doorStatusType));
  translationMap->insert(std::make_pair("DVR_ProcessingParametersType", uci::type::accessorType::dVR_ProcessingParametersType));
  translationMap->insert(std::make_pair("DwellID_Type", uci::type::accessorType::dwellID_Type));
  translationMap->insert(std::make_pair("EA_ActivityCommandType", uci::type::accessorType::eA_ActivityCommandType));
  translationMap->insert(std::make_pair("EA_ActivityMT", uci::type::accessorType::eA_ActivityMT));
  translationMap->insert(std::make_pair("EA_ActivityType", uci::type::accessorType::eA_ActivityType));
  translationMap->insert(std::make_pair("EA_CapabilityCommandType", uci::type::accessorType::eA_CapabilityCommandType));
  translationMap->insert(std::make_pair("EA_CapabilityMDT", uci::type::accessorType::eA_CapabilityMDT));
  translationMap->insert(std::make_pair("EA_CapabilityMT", uci::type::accessorType::eA_CapabilityMT));
  translationMap->insert(std::make_pair("EA_CapabilityStatusMDT", uci::type::accessorType::eA_CapabilityStatusMDT));
  translationMap->insert(std::make_pair("EA_CapabilityStatusMT", uci::type::accessorType::eA_CapabilityStatusMT));
  translationMap->insert(std::make_pair("EA_CapabilityType", uci::type::accessorType::eA_CapabilityType));
  translationMap->insert(std::make_pair("EA_CommandMT", uci::type::accessorType::eA_CommandMT));
  translationMap->insert(std::make_pair("EA_CommandStatusMDT", uci::type::accessorType::eA_CommandStatusMDT));
  translationMap->insert(std::make_pair("EA_CommandStatusMT", uci::type::accessorType::eA_CommandStatusMT));
  translationMap->insert(std::make_pair("EA_ConsentRequestMT", uci::type::accessorType::eA_ConsentRequestMT));
  translationMap->insert(std::make_pair("EA_ConsentRequestStatusMDT", uci::type::accessorType::eA_ConsentRequestStatusMDT));
  translationMap->insert(std::make_pair("EA_ConsentRequestStatusMT", uci::type::accessorType::eA_ConsentRequestStatusMT));
  translationMap->insert(std::make_pair("EA_ConsentRequestType", uci::type::accessorType::eA_ConsentRequestType));
  translationMap->insert(std::make_pair("EA_SettingsCommandMDT", uci::type::accessorType::eA_SettingsCommandMDT));
  translationMap->insert(std::make_pair("EA_SettingsCommandMT", uci::type::accessorType::eA_SettingsCommandMT));
  translationMap->insert(std::make_pair("EA_SettingsCommandStatusMDT", uci::type::accessorType::eA_SettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("EA_SettingsCommandStatusMT", uci::type::accessorType::eA_SettingsCommandStatusMT));
  translationMap->insert(std::make_pair("EA_TechniqueIdentifierType", uci::type::accessorType::eA_TechniqueIdentifierType));
  translationMap->insert(std::make_pair("EarthOrientationParametersID_Type", uci::type::accessorType::earthOrientationParametersID_Type));
  translationMap->insert(std::make_pair("EarthOrientationParametersMT", uci::type::accessorType::earthOrientationParametersMT));
  translationMap->insert(std::make_pair("ECEF_UnitVectorType", uci::type::accessorType::eCEF_UnitVectorType));
  translationMap->insert(std::make_pair("EEI_ID_Type", uci::type::accessorType::eEI_ID_Type));
  translationMap->insert(std::make_pair("EEI_MDT", uci::type::accessorType::eEI_MDT));
  translationMap->insert(std::make_pair("EEI_MT", uci::type::accessorType::eEI_MT));
  translationMap->insert(std::make_pair("EffectActivityMT", uci::type::accessorType::effectActivityMT));
  translationMap->insert(std::make_pair("EffectActivityType", uci::type::accessorType::effectActivityType));
  translationMap->insert(std::make_pair("EffectAllocationType", uci::type::accessorType::effectAllocationType));
  translationMap->insert(std::make_pair("EffectCancelCommandMDT", uci::type::accessorType::effectCancelCommandMDT));
  translationMap->insert(std::make_pair("EffectCancelCommandMT", uci::type::accessorType::effectCancelCommandMT));
  translationMap->insert(std::make_pair("EffectCancelCommandStatusMDT", uci::type::accessorType::effectCancelCommandStatusMDT));
  translationMap->insert(std::make_pair("EffectCancelCommandStatusMT", uci::type::accessorType::effectCancelCommandStatusMT));
  translationMap->insert(std::make_pair("EffectCapabilityCommandType", uci::type::accessorType::effectCapabilityCommandType));
  translationMap->insert(std::make_pair("EffectCapabilityMDT", uci::type::accessorType::effectCapabilityMDT));
  translationMap->insert(std::make_pair("EffectCapabilityMT", uci::type::accessorType::effectCapabilityMT));
  translationMap->insert(std::make_pair("EffectCapabilityStatusMDT", uci::type::accessorType::effectCapabilityStatusMDT));
  translationMap->insert(std::make_pair("EffectCapabilityStatusMT", uci::type::accessorType::effectCapabilityStatusMT));
  translationMap->insert(std::make_pair("EffectCapabilityType", uci::type::accessorType::effectCapabilityType));
  translationMap->insert(std::make_pair("EffectCommandMT", uci::type::accessorType::effectCommandMT));
  translationMap->insert(std::make_pair("EffectCommandStatusMDT", uci::type::accessorType::effectCommandStatusMDT));
  translationMap->insert(std::make_pair("EffectCommandStatusMT", uci::type::accessorType::effectCommandStatusMT));
  translationMap->insert(std::make_pair("EffectExecutionApprovalStatusMDT", uci::type::accessorType::effectExecutionApprovalStatusMDT));
  translationMap->insert(std::make_pair("EffectExecutionApprovalStatusMT", uci::type::accessorType::effectExecutionApprovalStatusMT));
  translationMap->insert(std::make_pair("EffectID_Type", uci::type::accessorType::effectID_Type));
  translationMap->insert(std::make_pair("EffectMT", uci::type::accessorType::effectMT));
  translationMap->insert(std::make_pair("EffectPlanApprovalStatusMT", uci::type::accessorType::effectPlanApprovalStatusMT));
  translationMap->insert(std::make_pair("EffectPlanCommandID_Type", uci::type::accessorType::effectPlanCommandID_Type));
  translationMap->insert(std::make_pair("EffectPlanCommandMT", uci::type::accessorType::effectPlanCommandMT));
  translationMap->insert(std::make_pair("EffectPlanCommandStatusMT", uci::type::accessorType::effectPlanCommandStatusMT));
  translationMap->insert(std::make_pair("EffectPlanExecutionStatusMT", uci::type::accessorType::effectPlanExecutionStatusMT));
  translationMap->insert(std::make_pair("EffectPlanID_Type", uci::type::accessorType::effectPlanID_Type));
  translationMap->insert(std::make_pair("EffectPlanInputsType", uci::type::accessorType::effectPlanInputsType));
  translationMap->insert(std::make_pair("EffectPlanMT", uci::type::accessorType::effectPlanMT));
  translationMap->insert(std::make_pair("EffectPlanningResultType", uci::type::accessorType::effectPlanningResultType));
  translationMap->insert(std::make_pair("EffectPlanningStatusMDT", uci::type::accessorType::effectPlanningStatusMDT));
  translationMap->insert(std::make_pair("EffectPlanningStatusMT", uci::type::accessorType::effectPlanningStatusMT));
  translationMap->insert(std::make_pair("EffectPlanProcessDescriptionType", uci::type::accessorType::effectPlanProcessDescriptionType));
  translationMap->insert(std::make_pair("EffectPlanStatusMT", uci::type::accessorType::effectPlanStatusMT));
  translationMap->insert(std::make_pair("EffectPlanValidationCommandMDT", uci::type::accessorType::effectPlanValidationCommandMDT));
  translationMap->insert(std::make_pair("EffectPlanValidationCommandMT", uci::type::accessorType::effectPlanValidationCommandMT));
  translationMap->insert(std::make_pair("EffectPlanValidationCommandStatusMDT", uci::type::accessorType::effectPlanValidationCommandStatusMDT));
  translationMap->insert(std::make_pair("EffectPlanValidationCommandStatusMT", uci::type::accessorType::effectPlanValidationCommandStatusMT));
  translationMap->insert(std::make_pair("EffectPlanValidationID_Type", uci::type::accessorType::effectPlanValidationID_Type));
  translationMap->insert(std::make_pair("EffectPlanValidationInputsType", uci::type::accessorType::effectPlanValidationInputsType));
  translationMap->insert(std::make_pair("EffectPlanValidationMT", uci::type::accessorType::effectPlanValidationMT));
  translationMap->insert(std::make_pair("EffectStatusMDT", uci::type::accessorType::effectStatusMDT));
  translationMap->insert(std::make_pair("EffectStatusMT", uci::type::accessorType::effectStatusMT));
  translationMap->insert(std::make_pair("ElevationRequestMDT", uci::type::accessorType::elevationRequestMDT));
  translationMap->insert(std::make_pair("ElevationRequestMT", uci::type::accessorType::elevationRequestMT));
  translationMap->insert(std::make_pair("ElevationRequestStatusMDT", uci::type::accessorType::elevationRequestStatusMDT));
  translationMap->insert(std::make_pair("ElevationRequestStatusMT", uci::type::accessorType::elevationRequestStatusMT));
  translationMap->insert(std::make_pair("ElevationVisibilityRequestMDT", uci::type::accessorType::elevationVisibilityRequestMDT));
  translationMap->insert(std::make_pair("ElevationVisibilityRequestMT", uci::type::accessorType::elevationVisibilityRequestMT));
  translationMap->insert(std::make_pair("ElevationVisibilityRequestStatusMDT", uci::type::accessorType::elevationVisibilityRequestStatusMDT));
  translationMap->insert(std::make_pair("ElevationVisibilityRequestStatusMT", uci::type::accessorType::elevationVisibilityRequestStatusMT));
  translationMap->insert(std::make_pair("EllipseType", uci::type::accessorType::ellipseType));
  translationMap->insert(std::make_pair("EmergencyReferenceOpPointType", uci::type::accessorType::emergencyReferenceOpPointType));
  translationMap->insert(std::make_pair("EmitterFixedPositionType", uci::type::accessorType::emitterFixedPositionType));
  translationMap->insert(std::make_pair("EnduranceBaseType", uci::type::accessorType::enduranceBaseType));
  translationMap->insert(std::make_pair("EnduranceType", uci::type::accessorType::enduranceType));
  translationMap->insert(std::make_pair("EntityConfirmationMT", uci::type::accessorType::entityConfirmationMT));
  translationMap->insert(std::make_pair("EntityConfirmationRequestMDT", uci::type::accessorType::entityConfirmationRequestMDT));
  translationMap->insert(std::make_pair("EntityConfirmationRequestMT", uci::type::accessorType::entityConfirmationRequestMT));
  translationMap->insert(std::make_pair("EntityConfirmationRequestStatusMDT", uci::type::accessorType::entityConfirmationRequestStatusMDT));
  translationMap->insert(std::make_pair("EntityConfirmationRequestStatusMT", uci::type::accessorType::entityConfirmationRequestStatusMT));
  translationMap->insert(std::make_pair("EntityEphemerisRequestParametersType", uci::type::accessorType::entityEphemerisRequestParametersType));
  translationMap->insert(std::make_pair("EntityID_Type", uci::type::accessorType::entityID_Type));
  translationMap->insert(std::make_pair("EntityIdentityType", uci::type::accessorType::entityIdentityType));
  translationMap->insert(std::make_pair("EntityLostMT", uci::type::accessorType::entityLostMT));
  translationMap->insert(std::make_pair("EntityManagementRequestMDT", uci::type::accessorType::entityManagementRequestMDT));
  translationMap->insert(std::make_pair("EntityManagementRequestMT", uci::type::accessorType::entityManagementRequestMT));
  translationMap->insert(std::make_pair("EntityManagementRequestStatusMDT", uci::type::accessorType::entityManagementRequestStatusMDT));
  translationMap->insert(std::make_pair("EntityManagementRequestStatusMT", uci::type::accessorType::entityManagementRequestStatusMT));
  translationMap->insert(std::make_pair("EntityMetadataMT", uci::type::accessorType::entityMetadataMT));
  translationMap->insert(std::make_pair("EntityMetadataPET", uci::type::accessorType::entityMetadataPET));
  translationMap->insert(std::make_pair("EntityMT", uci::type::accessorType::entityMT));
  translationMap->insert(std::make_pair("EntityNotificationMDT", uci::type::accessorType::entityNotificationMDT));
  translationMap->insert(std::make_pair("EntityNotificationMT", uci::type::accessorType::entityNotificationMT));
  translationMap->insert(std::make_pair("EntityOrbitalCSO_ID_Type", uci::type::accessorType::entityOrbitalCSO_ID_Type));
  translationMap->insert(std::make_pair("EntityOrbitalCSO_MT", uci::type::accessorType::entityOrbitalCSO_MT));
  translationMap->insert(std::make_pair("EntityOrbitalElementSetID_Type", uci::type::accessorType::entityOrbitalElementSetID_Type));
  translationMap->insert(std::make_pair("EntityOrbitalElementSetMDT", uci::type::accessorType::entityOrbitalElementSetMDT));
  translationMap->insert(std::make_pair("EntityOrbitalElementSetMT", uci::type::accessorType::entityOrbitalElementSetMT));
  translationMap->insert(std::make_pair("EntityOrbitalElementSetRequestMDT", uci::type::accessorType::entityOrbitalElementSetRequestMDT));
  translationMap->insert(std::make_pair("EntityOrbitalElementSetRequestMT", uci::type::accessorType::entityOrbitalElementSetRequestMT));
  translationMap->insert(std::make_pair("EntityOrbitalElementSetRequestStatusMDT", uci::type::accessorType::entityOrbitalElementSetRequestStatusMDT));
  translationMap->insert(std::make_pair("EntityOrbitalElementSetRequestStatusMT", uci::type::accessorType::entityOrbitalElementSetRequestStatusMT));
  translationMap->insert(std::make_pair("EntityOrbitalElementSetType", uci::type::accessorType::entityOrbitalElementSetType));
  translationMap->insert(std::make_pair("EntityOrbitalEphemerisID_Type", uci::type::accessorType::entityOrbitalEphemerisID_Type));
  translationMap->insert(std::make_pair("EntityOrbitalEphemerisMDT", uci::type::accessorType::entityOrbitalEphemerisMDT));
  translationMap->insert(std::make_pair("EntityOrbitalEphemerisMT", uci::type::accessorType::entityOrbitalEphemerisMT));
  translationMap->insert(std::make_pair("EntityOrbitalEphemerisRequestMDT", uci::type::accessorType::entityOrbitalEphemerisRequestMDT));
  translationMap->insert(std::make_pair("EntityOrbitalEphemerisRequestMT", uci::type::accessorType::entityOrbitalEphemerisRequestMT));
  translationMap->insert(std::make_pair("EntityOrbitalEphemerisRequestStatusMDT", uci::type::accessorType::entityOrbitalEphemerisRequestStatusMDT));
  translationMap->insert(std::make_pair("EntityOrbitalEphemerisRequestStatusMT", uci::type::accessorType::entityOrbitalEphemerisRequestStatusMT));
  translationMap->insert(std::make_pair("EntityOrbitalEphemerisType", uci::type::accessorType::entityOrbitalEphemerisType));
  translationMap->insert(std::make_pair("EntityOrbitalManeuverMT", uci::type::accessorType::entityOrbitalManeuverMT));
  translationMap->insert(std::make_pair("EntityOrbitalVCM_ID_Type", uci::type::accessorType::entityOrbitalVCM_ID_Type));
  translationMap->insert(std::make_pair("EntityOrbitalVCM_MDT", uci::type::accessorType::entityOrbitalVCM_MDT));
  translationMap->insert(std::make_pair("EntityOrbitalVCM_MT", uci::type::accessorType::entityOrbitalVCM_MT));
  translationMap->insert(std::make_pair("EntityOrbitalVCM_RequestMDT", uci::type::accessorType::entityOrbitalVCM_RequestMDT));
  translationMap->insert(std::make_pair("EntityOrbitalVCM_RequestMT", uci::type::accessorType::entityOrbitalVCM_RequestMT));
  translationMap->insert(std::make_pair("EntityOrbitalVCM_RequestStatusMDT", uci::type::accessorType::entityOrbitalVCM_RequestStatusMDT));
  translationMap->insert(std::make_pair("EntityOrbitalVCM_RequestStatusMT", uci::type::accessorType::entityOrbitalVCM_RequestStatusMT));
  translationMap->insert(std::make_pair("EntityOrbitalVCM_Type", uci::type::accessorType::entityOrbitalVCM_Type));
  translationMap->insert(std::make_pair("EntityPropagationMT", uci::type::accessorType::entityPropagationMT));
  translationMap->insert(std::make_pair("EOB_CorrelationRecordID_Type", uci::type::accessorType::eOB_CorrelationRecordID_Type));
  translationMap->insert(std::make_pair("EOB_CorrelationRecordMDT", uci::type::accessorType::eOB_CorrelationRecordMDT));
  translationMap->insert(std::make_pair("EOB_CorrelationRecordMT", uci::type::accessorType::eOB_CorrelationRecordMT));
  translationMap->insert(std::make_pair("EOB_EmitterID_Type", uci::type::accessorType::eOB_EmitterID_Type));
  translationMap->insert(std::make_pair("EOB_EmitterModeID_Type", uci::type::accessorType::eOB_EmitterModeID_Type));
  translationMap->insert(std::make_pair("EOB_EmitterModeType", uci::type::accessorType::eOB_EmitterModeType));
  translationMap->insert(std::make_pair("EOB_EmitterType", uci::type::accessorType::eOB_EmitterType));
  translationMap->insert(std::make_pair("EOB_EquipmentIdentityType", uci::type::accessorType::eOB_EquipmentIdentityType));
  translationMap->insert(std::make_pair("EOB_EquipmentRecordType", uci::type::accessorType::eOB_EquipmentRecordType));
  translationMap->insert(std::make_pair("EOB_EquipmentType", uci::type::accessorType::eOB_EquipmentType));
  translationMap->insert(std::make_pair("EOB_FixedPositionType", uci::type::accessorType::eOB_FixedPositionType));
  translationMap->insert(std::make_pair("EOB_IdentityBaseType", uci::type::accessorType::eOB_IdentityBaseType));
  translationMap->insert(std::make_pair("EOB_RecordID_Type", uci::type::accessorType::eOB_RecordID_Type));
  translationMap->insert(std::make_pair("EOB_RecordMarkedType", uci::type::accessorType::eOB_RecordMarkedType));
  translationMap->insert(std::make_pair("EOB_SignalType", uci::type::accessorType::eOB_SignalType));
  translationMap->insert(std::make_pair("EOB_SiteIdentityType", uci::type::accessorType::eOB_SiteIdentityType));
  translationMap->insert(std::make_pair("EOB_SitePIN_Type", uci::type::accessorType::eOB_SitePIN_Type));
  translationMap->insert(std::make_pair("ESM_ActivityCommandType", uci::type::accessorType::eSM_ActivityCommandType));
  translationMap->insert(std::make_pair("ESM_ActivityMT", uci::type::accessorType::eSM_ActivityMT));
  translationMap->insert(std::make_pair("ESM_ActivityType", uci::type::accessorType::eSM_ActivityType));
  translationMap->insert(std::make_pair("ESM_CapabilityCommandType", uci::type::accessorType::eSM_CapabilityCommandType));
  translationMap->insert(std::make_pair("ESM_CapabilityMDT", uci::type::accessorType::eSM_CapabilityMDT));
  translationMap->insert(std::make_pair("ESM_CapabilityMT", uci::type::accessorType::eSM_CapabilityMT));
  translationMap->insert(std::make_pair("ESM_CapabilityStatusMDT", uci::type::accessorType::eSM_CapabilityStatusMDT));
  translationMap->insert(std::make_pair("ESM_CapabilityStatusMT", uci::type::accessorType::eSM_CapabilityStatusMT));
  translationMap->insert(std::make_pair("ESM_CapabilityType", uci::type::accessorType::eSM_CapabilityType));
  translationMap->insert(std::make_pair("ESM_CommandMT", uci::type::accessorType::eSM_CommandMT));
  translationMap->insert(std::make_pair("ESM_CommandStatusMDT", uci::type::accessorType::eSM_CommandStatusMDT));
  translationMap->insert(std::make_pair("ESM_CommandStatusMT", uci::type::accessorType::eSM_CommandStatusMT));
  translationMap->insert(std::make_pair("ESM_ConsentRequestMT", uci::type::accessorType::eSM_ConsentRequestMT));
  translationMap->insert(std::make_pair("ESM_ConsentRequestStatusMDT", uci::type::accessorType::eSM_ConsentRequestStatusMDT));
  translationMap->insert(std::make_pair("ESM_ConsentRequestStatusMT", uci::type::accessorType::eSM_ConsentRequestStatusMT));
  translationMap->insert(std::make_pair("ESM_ConsentRequestType", uci::type::accessorType::eSM_ConsentRequestType));
  translationMap->insert(std::make_pair("ESM_SettingsCommandMDT", uci::type::accessorType::eSM_SettingsCommandMDT));
  translationMap->insert(std::make_pair("ESM_SettingsCommandMT", uci::type::accessorType::eSM_SettingsCommandMT));
  translationMap->insert(std::make_pair("ESM_SettingsCommandStatusMDT", uci::type::accessorType::eSM_SettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("ESM_SettingsCommandStatusMT", uci::type::accessorType::eSM_SettingsCommandStatusMT));
  translationMap->insert(std::make_pair("ESM_TaskBaseType", uci::type::accessorType::eSM_TaskBaseType));
  translationMap->insert(std::make_pair("ESM_TaskType", uci::type::accessorType::eSM_TaskType));
  translationMap->insert(std::make_pair("EW_ConfigurationID_Type", uci::type::accessorType::eW_ConfigurationID_Type));
  translationMap->insert(std::make_pair("EW_ConfigurationMT", uci::type::accessorType::eW_ConfigurationMT));
  translationMap->insert(std::make_pair("EW_CoordinationDataLinkIdentifierType", uci::type::accessorType::eW_CoordinationDataLinkIdentifierType));
  translationMap->insert(std::make_pair("EW_IndexNumberDataLinkIdentifierType", uci::type::accessorType::eW_IndexNumberDataLinkIdentifierType));
  translationMap->insert(std::make_pair("ExecutionPlanSetBaseType", uci::type::accessorType::executionPlanSetBaseType));
  translationMap->insert(std::make_pair("ExecutionPlanSetID_Type", uci::type::accessorType::executionPlanSetID_Type));
  translationMap->insert(std::make_pair("ExecutionSequenceInsertionType", uci::type::accessorType::executionSequenceInsertionType));
  translationMap->insert(std::make_pair("ExecutionSequencePlanSetsType", uci::type::accessorType::executionSequencePlanSetsType));
  translationMap->insert(std::make_pair("ExecutionSequenceType", uci::type::accessorType::executionSequenceType));
  translationMap->insert(std::make_pair("ExternalDataRequestMDT", uci::type::accessorType::externalDataRequestMDT));
  translationMap->insert(std::make_pair("ExternalDataRequestMT", uci::type::accessorType::externalDataRequestMT));
  translationMap->insert(std::make_pair("ExternalDataRequestStatusMDT", uci::type::accessorType::externalDataRequestStatusMDT));
  translationMap->insert(std::make_pair("ExternalDataRequestStatusMT", uci::type::accessorType::externalDataRequestStatusMT));
  translationMap->insert(std::make_pair("ExternalRequestedDataID_Type", uci::type::accessorType::externalRequestedDataID_Type));
  translationMap->insert(std::make_pair("FaultID_Type", uci::type::accessorType::faultID_Type));
  translationMap->insert(std::make_pair("FaultMDT", uci::type::accessorType::faultMDT));
  translationMap->insert(std::make_pair("FaultMT", uci::type::accessorType::faultMT));
  translationMap->insert(std::make_pair("FileLocationID_Type", uci::type::accessorType::fileLocationID_Type));
  translationMap->insert(std::make_pair("FileLocationMDT", uci::type::accessorType::fileLocationMDT));
  translationMap->insert(std::make_pair("FileLocationMT", uci::type::accessorType::fileLocationMT));
  translationMap->insert(std::make_pair("FileMetadataID_Type", uci::type::accessorType::fileMetadataID_Type));
  translationMap->insert(std::make_pair("FileMetadataMDT", uci::type::accessorType::fileMetadataMDT));
  translationMap->insert(std::make_pair("FileMetadataMT", uci::type::accessorType::fileMetadataMT));
  translationMap->insert(std::make_pair("FilterID_Type", uci::type::accessorType::filterID_Type));
  translationMap->insert(std::make_pair("FixedPositionType", uci::type::accessorType::fixedPositionType));
  translationMap->insert(std::make_pair("FlightActivityMT", uci::type::accessorType::flightActivityMT));
  translationMap->insert(std::make_pair("FlightActivityType", uci::type::accessorType::flightActivityType));
  translationMap->insert(std::make_pair("FlightCapabilityMDT", uci::type::accessorType::flightCapabilityMDT));
  translationMap->insert(std::make_pair("FlightCapabilityMT", uci::type::accessorType::flightCapabilityMT));
  translationMap->insert(std::make_pair("FlightCapabilityStatusMDT", uci::type::accessorType::flightCapabilityStatusMDT));
  translationMap->insert(std::make_pair("FlightCapabilityStatusMT", uci::type::accessorType::flightCapabilityStatusMT));
  translationMap->insert(std::make_pair("FlightCapabilityType", uci::type::accessorType::flightCapabilityType));
  translationMap->insert(std::make_pair("FlightTaskBaseType", uci::type::accessorType::flightTaskBaseType));
  translationMap->insert(std::make_pair("FlightTaskType", uci::type::accessorType::flightTaskType));
  translationMap->insert(std::make_pair("FloatMinMaxType", uci::type::accessorType::floatMinMaxType));
  translationMap->insert(std::make_pair("ForeignKeyMapDRL", uci::type::accessorType::foreignKeyMapDRL));
  translationMap->insert(std::make_pair("ForeignKeyMapID_Type", uci::type::accessorType::foreignKeyMapID_Type));
  translationMap->insert(std::make_pair("ForeignKeyMapMDT", uci::type::accessorType::foreignKeyMapMDT));
  translationMap->insert(std::make_pair("ForeignKeyMapML", uci::type::accessorType::foreignKeyMapML));
  translationMap->insert(std::make_pair("ForeignKeyMapMT", uci::type::accessorType::foreignKeyMapMT));
  translationMap->insert(std::make_pair("ForeignKeyPairDRLE", uci::type::accessorType::foreignKeyPairDRLE));
  translationMap->insert(std::make_pair("ForeignKeyPairID_Type", uci::type::accessorType::foreignKeyPairID_Type));
  translationMap->insert(std::make_pair("ForeignKeyPairMDT", uci::type::accessorType::foreignKeyPairMDT));
  translationMap->insert(std::make_pair("ForeignKeyPairMT", uci::type::accessorType::foreignKeyPairMT));
  translationMap->insert(std::make_pair("ForeignKeyType", uci::type::accessorType::foreignKeyType));
  translationMap->insert(std::make_pair("FOV_ActivityType", uci::type::accessorType::fOV_ActivityType));
  translationMap->insert(std::make_pair("FOV_Type", uci::type::accessorType::fOV_Type));
  translationMap->insert(std::make_pair("FOV_VolumeType", uci::type::accessorType::fOV_VolumeType));
  translationMap->insert(std::make_pair("FrequencyDataBaseType", uci::type::accessorType::frequencyDataBaseType));
  translationMap->insert(std::make_pair("FrequencyDataType", uci::type::accessorType::frequencyDataType));
  translationMap->insert(std::make_pair("FuelSubsystemExtendedStatusType", uci::type::accessorType::fuelSubsystemExtendedStatusType));
  translationMap->insert(std::make_pair("FuelTankComponentExtendedStatusType", uci::type::accessorType::fuelTankComponentExtendedStatusType));
  translationMap->insert(std::make_pair("FunctionalDamageConfidenceType", uci::type::accessorType::functionalDamageConfidenceType));
  translationMap->insert(std::make_pair("FunctionalDamageProbabilityType", uci::type::accessorType::functionalDamageProbabilityType));
  translationMap->insert(std::make_pair("FunctionID_Type", uci::type::accessorType::functionID_Type));
  translationMap->insert(std::make_pair("FusionSettingsMT", uci::type::accessorType::fusionSettingsMT));
  translationMap->insert(std::make_pair("FusionSettingsRequestMDT", uci::type::accessorType::fusionSettingsRequestMDT));
  translationMap->insert(std::make_pair("FusionSettingsRequestMT", uci::type::accessorType::fusionSettingsRequestMT));
  translationMap->insert(std::make_pair("FusionSettingsRequestStatusMDT", uci::type::accessorType::fusionSettingsRequestStatusMDT));
  translationMap->insert(std::make_pair("FusionSettingsRequestStatusMT", uci::type::accessorType::fusionSettingsRequestStatusMT));
  translationMap->insert(std::make_pair("GatewayActivityCommandType", uci::type::accessorType::gatewayActivityCommandType));
  translationMap->insert(std::make_pair("GatewayActivityMT", uci::type::accessorType::gatewayActivityMT));
  translationMap->insert(std::make_pair("GatewayActivityType", uci::type::accessorType::gatewayActivityType));
  translationMap->insert(std::make_pair("GatewayCapabilityCommandType", uci::type::accessorType::gatewayCapabilityCommandType));
  translationMap->insert(std::make_pair("GatewayCapabilityMDT", uci::type::accessorType::gatewayCapabilityMDT));
  translationMap->insert(std::make_pair("GatewayCapabilityMT", uci::type::accessorType::gatewayCapabilityMT));
  translationMap->insert(std::make_pair("GatewayCapabilitySettingsCommandBaseType", uci::type::accessorType::gatewayCapabilitySettingsCommandBaseType));
  translationMap->insert(std::make_pair("GatewayCapabilityStatusMDT", uci::type::accessorType::gatewayCapabilityStatusMDT));
  translationMap->insert(std::make_pair("GatewayCapabilityStatusMT", uci::type::accessorType::gatewayCapabilityStatusMT));
  translationMap->insert(std::make_pair("GatewayCapabilityStatusType", uci::type::accessorType::gatewayCapabilityStatusType));
  translationMap->insert(std::make_pair("GatewayCapabilityType", uci::type::accessorType::gatewayCapabilityType));
  translationMap->insert(std::make_pair("GatewayCommandMT", uci::type::accessorType::gatewayCommandMT));
  translationMap->insert(std::make_pair("GatewayCommandStatusMDT", uci::type::accessorType::gatewayCommandStatusMDT));
  translationMap->insert(std::make_pair("GatewayCommandStatusMT", uci::type::accessorType::gatewayCommandStatusMT));
  translationMap->insert(std::make_pair("GatewayConfigurationPET", uci::type::accessorType::gatewayConfigurationPET));
  translationMap->insert(std::make_pair("GatewayLink16ConfigurationAnnulusType", uci::type::accessorType::gatewayLink16ConfigurationAnnulusType));
  translationMap->insert(std::make_pair("GatewayLink16ConfigurationCircleType", uci::type::accessorType::gatewayLink16ConfigurationCircleType));
  translationMap->insert(std::make_pair("GatewayLink16ConfigurationCircularSectorType", uci::type::accessorType::gatewayLink16ConfigurationCircularSectorType));
  translationMap->insert(std::make_pair("GatewayLink16ConfigurationClosedAreaType", uci::type::accessorType::gatewayLink16ConfigurationClosedAreaType));
  translationMap->insert(std::make_pair("GatewayLink16ConfigurationRectangleType", uci::type::accessorType::gatewayLink16ConfigurationRectangleType));
  translationMap->insert(std::make_pair("GatewayNativeStatisticsPET", uci::type::accessorType::gatewayNativeStatisticsPET));
  translationMap->insert(std::make_pair("GatewaySettingsCommandMDT", uci::type::accessorType::gatewaySettingsCommandMDT));
  translationMap->insert(std::make_pair("GatewaySettingsCommandMT", uci::type::accessorType::gatewaySettingsCommandMT));
  translationMap->insert(std::make_pair("GatewaySettingsCommandStatusMDT", uci::type::accessorType::gatewaySettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("GatewaySettingsCommandStatusMT", uci::type::accessorType::gatewaySettingsCommandStatusMT));
  translationMap->insert(std::make_pair("GenericDataLinkNativeInfoType", uci::type::accessorType::genericDataLinkNativeInfoType));
  translationMap->insert(std::make_pair("GeoFiltersQueryType", uci::type::accessorType::geoFiltersQueryType));
  translationMap->insert(std::make_pair("GimbalAxisID_Type", uci::type::accessorType::gimbalAxisID_Type));
  translationMap->insert(std::make_pair("ID_Type", uci::type::accessorType::iD_Type));
  translationMap->insert(std::make_pair("IdentityConfidenceType", uci::type::accessorType::identityConfidenceType));
  translationMap->insert(std::make_pair("IdentityType", uci::type::accessorType::identityType));
  translationMap->insert(std::make_pair("IFF_ActivityCommandType", uci::type::accessorType::iFF_ActivityCommandType));
  translationMap->insert(std::make_pair("IFF_ActivityMT", uci::type::accessorType::iFF_ActivityMT));
  translationMap->insert(std::make_pair("IFF_ActivityTransponderType", uci::type::accessorType::iFF_ActivityTransponderType));
  translationMap->insert(std::make_pair("IFF_ActivityType", uci::type::accessorType::iFF_ActivityType));
  translationMap->insert(std::make_pair("IFF_CapabilityCommandType", uci::type::accessorType::iFF_CapabilityCommandType));
  translationMap->insert(std::make_pair("IFF_CapabilityMDT", uci::type::accessorType::iFF_CapabilityMDT));
  translationMap->insert(std::make_pair("IFF_CapabilityMT", uci::type::accessorType::iFF_CapabilityMT));
  translationMap->insert(std::make_pair("IFF_CapabilityStatusMDT", uci::type::accessorType::iFF_CapabilityStatusMDT));
  translationMap->insert(std::make_pair("IFF_CapabilityStatusMT", uci::type::accessorType::iFF_CapabilityStatusMT));
  translationMap->insert(std::make_pair("IFF_CapabilityType", uci::type::accessorType::iFF_CapabilityType));
  translationMap->insert(std::make_pair("IFF_CollectionConstraintsType", uci::type::accessorType::iFF_CollectionConstraintsType));
  translationMap->insert(std::make_pair("IFF_CommandMT", uci::type::accessorType::iFF_CommandMT));
  translationMap->insert(std::make_pair("IFF_CommandStatusMDT", uci::type::accessorType::iFF_CommandStatusMDT));
  translationMap->insert(std::make_pair("IFF_CommandStatusMT", uci::type::accessorType::iFF_CommandStatusMT));
  translationMap->insert(std::make_pair("IFF_ConsentRequestMT", uci::type::accessorType::iFF_ConsentRequestMT));
  translationMap->insert(std::make_pair("IFF_ConsentRequestStatusMDT", uci::type::accessorType::iFF_ConsentRequestStatusMDT));
  translationMap->insert(std::make_pair("IFF_ConsentRequestStatusMT", uci::type::accessorType::iFF_ConsentRequestStatusMT));
  translationMap->insert(std::make_pair("IFF_ConsentRequestType", uci::type::accessorType::iFF_ConsentRequestType));
  translationMap->insert(std::make_pair("IFF_SettingsCommandMDT", uci::type::accessorType::iFF_SettingsCommandMDT));
  translationMap->insert(std::make_pair("IFF_SettingsCommandMT", uci::type::accessorType::iFF_SettingsCommandMT));
  translationMap->insert(std::make_pair("IFF_SettingsCommandStatusMDT", uci::type::accessorType::iFF_SettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("IFF_SettingsCommandStatusMT", uci::type::accessorType::iFF_SettingsCommandStatusMT));
  translationMap->insert(std::make_pair("IFF_TransponderModeControlType", uci::type::accessorType::iFF_TransponderModeControlType));
  translationMap->insert(std::make_pair("IJMS_DataLinkIdentifierType", uci::type::accessorType::iJMS_DataLinkIdentifierType));
  translationMap->insert(std::make_pair("IJMS_QuerySpecificDataType", uci::type::accessorType::iJMS_QuerySpecificDataType));
  translationMap->insert(std::make_pair("ImageAugmentationParametersType", uci::type::accessorType::imageAugmentationParametersType));
  translationMap->insert(std::make_pair("ImageGeoRegistrationProcessingResultsType", uci::type::accessorType::imageGeoRegistrationProcessingResultsType));
  translationMap->insert(std::make_pair("ImagePixelGeoLocationProcessingParametersType", uci::type::accessorType::imagePixelGeoLocationProcessingParametersType));
  translationMap->insert(std::make_pair("ImagePixelGeoLocationProcessingResultsType", uci::type::accessorType::imagePixelGeoLocationProcessingResultsType));
  translationMap->insert(std::make_pair("ImageRegionOfInterestPET", uci::type::accessorType::imageRegionOfInterestPET));
  translationMap->insert(std::make_pair("InertialStateRelativeType", uci::type::accessorType::inertialStateRelativeType));
  translationMap->insert(std::make_pair("IO_PortCommandMT", uci::type::accessorType::iO_PortCommandMT));
  translationMap->insert(std::make_pair("IO_PortCommandStatusMDT", uci::type::accessorType::iO_PortCommandStatusMDT));
  translationMap->insert(std::make_pair("IO_PortCommandStatusMT", uci::type::accessorType::iO_PortCommandStatusMT));
  translationMap->insert(std::make_pair("IO_PortCommandType", uci::type::accessorType::iO_PortCommandType));
  translationMap->insert(std::make_pair("IO_PortStatusMT", uci::type::accessorType::iO_PortStatusMT));
  translationMap->insert(std::make_pair("IO_PortStatusType", uci::type::accessorType::iO_PortStatusType));
  translationMap->insert(std::make_pair("IP_DataLinkNativeInfoType", uci::type::accessorType::iP_DataLinkNativeInfoType));
  translationMap->insert(std::make_pair("IPv4_DataLinkNativeInfoType", uci::type::accessorType::iPv4_DataLinkNativeInfoType));
  translationMap->insert(std::make_pair("IPv6_DataLinkNativeInfoType", uci::type::accessorType::iPv6_DataLinkNativeInfoType));
  translationMap->insert(std::make_pair("JREAP_GatewayNativeStatisticsType", uci::type::accessorType::jREAP_GatewayNativeStatisticsType));
  translationMap->insert(std::make_pair("LAR_ID_Type", uci::type::accessorType::lAR_ID_Type));
  translationMap->insert(std::make_pair("LAR_MT", uci::type::accessorType::lAR_MT));
  translationMap->insert(std::make_pair("LAR_ReportMT", uci::type::accessorType::lAR_ReportMT));
  translationMap->insert(std::make_pair("LAR_RequestMDT", uci::type::accessorType::lAR_RequestMDT));
  translationMap->insert(std::make_pair("LAR_RequestMT", uci::type::accessorType::lAR_RequestMT));
  translationMap->insert(std::make_pair("LAR_RequestStatusMDT", uci::type::accessorType::lAR_RequestStatusMDT));
  translationMap->insert(std::make_pair("LAR_RequestStatusMT", uci::type::accessorType::lAR_RequestStatusMT));
  translationMap->insert(std::make_pair("LaunchObjectID_Type", uci::type::accessorType::launchObjectID_Type));
  translationMap->insert(std::make_pair("LaunchObservationID_Type", uci::type::accessorType::launchObservationID_Type));
  translationMap->insert(std::make_pair("LaunchObservationMDT", uci::type::accessorType::launchObservationMDT));
  translationMap->insert(std::make_pair("LaunchObservationMT", uci::type::accessorType::launchObservationMT));
  translationMap->insert(std::make_pair("LineDataStatusType", uci::type::accessorType::lineDataStatusType));
  translationMap->insert(std::make_pair("LinePoint2D_Type", uci::type::accessorType::linePoint2D_Type));
  translationMap->insert(std::make_pair("LineTargetType", uci::type::accessorType::lineTargetType));
  translationMap->insert(std::make_pair("LineType", uci::type::accessorType::lineType));
  translationMap->insert(std::make_pair("Link11DataLinkIdentifierType", uci::type::accessorType::link11DataLinkIdentifierType));
  translationMap->insert(std::make_pair("Link11QuerySpecificDataType", uci::type::accessorType::link11QuerySpecificDataType));
  translationMap->insert(std::make_pair("Link16DataLinkIdentifierType", uci::type::accessorType::link16DataLinkIdentifierType));
  translationMap->insert(std::make_pair("Link16DataLinkNativeInfoType", uci::type::accessorType::link16DataLinkNativeInfoType));
  translationMap->insert(std::make_pair("Link16EntityDataLinkNativeFilterType", uci::type::accessorType::link16EntityDataLinkNativeFilterType));
  translationMap->insert(std::make_pair("Link16EntityMetadataType", uci::type::accessorType::link16EntityMetadataType));
  translationMap->insert(std::make_pair("Link16GatewayConfigurationType", uci::type::accessorType::link16GatewayConfigurationType));
  translationMap->insert(std::make_pair("Link16InterfaceDataLinkNativeInfoType", uci::type::accessorType::link16InterfaceDataLinkNativeInfoType));
  translationMap->insert(std::make_pair("Link16SystemMetadataType", uci::type::accessorType::link16SystemMetadataType));
  translationMap->insert(std::make_pair("Link16TN_QuerySpecificDataType", uci::type::accessorType::link16TN_QuerySpecificDataType));
  translationMap->insert(std::make_pair("LocatedEllipseType", uci::type::accessorType::locatedEllipseType));
  translationMap->insert(std::make_pair("LocatedRectangleType", uci::type::accessorType::locatedRectangleType));
  translationMap->insert(std::make_pair("LocationAndStatusBaseType", uci::type::accessorType::locationAndStatusBaseType));
  translationMap->insert(std::make_pair("LocationAndStatusExpireType", uci::type::accessorType::locationAndStatusExpireType));
  translationMap->insert(std::make_pair("LogMT", uci::type::accessorType::logMT));
  translationMap->insert(std::make_pair("LOS_MeasurementWithUncertaintyType", uci::type::accessorType::lOS_MeasurementWithUncertaintyType));
  translationMap->insert(std::make_pair("LOS_VariableA_Type", uci::type::accessorType::lOS_VariableA_Type));
  translationMap->insert(std::make_pair("LOS_VariableB_Type", uci::type::accessorType::lOS_VariableB_Type));
  translationMap->insert(std::make_pair("ManagedListBaseType", uci::type::accessorType::managedListBaseType));
  translationMap->insert(std::make_pair("MDF_ID_Type", uci::type::accessorType::mDF_ID_Type));
  translationMap->insert(std::make_pair("MDF_SubCategoryFileID_Type", uci::type::accessorType::mDF_SubCategoryFileID_Type));
  translationMap->insert(std::make_pair("MDF_SubCategoryID_Type", uci::type::accessorType::mDF_SubCategoryID_Type));
  translationMap->insert(std::make_pair("MeasurementGroupID_Type", uci::type::accessorType::measurementGroupID_Type));
  translationMap->insert(std::make_pair("MeasurementID_Type", uci::type::accessorType::measurementID_Type));
  translationMap->insert(std::make_pair("MessageConfigurationID_Type", uci::type::accessorType::messageConfigurationID_Type));
  translationMap->insert(std::make_pair("MessageTransmissionFilterRecordDRLE", uci::type::accessorType::messageTransmissionFilterRecordDRLE));
  translationMap->insert(std::make_pair("MessageTransmissionFilterRecordID_Type", uci::type::accessorType::messageTransmissionFilterRecordID_Type));
  translationMap->insert(std::make_pair("MessageTransmissionFilterRecordMDT", uci::type::accessorType::messageTransmissionFilterRecordMDT));
  translationMap->insert(std::make_pair("MessageTransmissionFilterRecordMT", uci::type::accessorType::messageTransmissionFilterRecordMT));
  translationMap->insert(std::make_pair("MessageTransmissionListDRL", uci::type::accessorType::messageTransmissionListDRL));
  translationMap->insert(std::make_pair("MessageTransmissionListID_Type", uci::type::accessorType::messageTransmissionListID_Type));
  translationMap->insert(std::make_pair("MessageTransmissionListMDT", uci::type::accessorType::messageTransmissionListMDT));
  translationMap->insert(std::make_pair("MessageTransmissionListMT", uci::type::accessorType::messageTransmissionListMT));
  translationMap->insert(std::make_pair("MessageType", uci::type::accessorType::messageType));
  translationMap->insert(std::make_pair("MetadataID_Type", uci::type::accessorType::metadataID_Type));
  translationMap->insert(std::make_pair("MissionActivationRequestMDT", uci::type::accessorType::missionActivationRequestMDT));
  translationMap->insert(std::make_pair("MissionActivationRequestMT", uci::type::accessorType::missionActivationRequestMT));
  translationMap->insert(std::make_pair("MissionActivationRequestStatusMDT", uci::type::accessorType::missionActivationRequestStatusMDT));
  translationMap->insert(std::make_pair("MissionActivationRequestStatusMT", uci::type::accessorType::missionActivationRequestStatusMT));
  translationMap->insert(std::make_pair("MissionContingencyAlertID_Type", uci::type::accessorType::missionContingencyAlertID_Type));
  translationMap->insert(std::make_pair("MissionContingencyAlertMT", uci::type::accessorType::missionContingencyAlertMT));
  translationMap->insert(std::make_pair("MissionDefinitionID_Type", uci::type::accessorType::missionDefinitionID_Type));
  translationMap->insert(std::make_pair("MissionDefinitionMDT", uci::type::accessorType::missionDefinitionMDT));
  translationMap->insert(std::make_pair("MissionDefinitionMT", uci::type::accessorType::missionDefinitionMT));
  translationMap->insert(std::make_pair("MissionEnvironmentObjectActionType", uci::type::accessorType::missionEnvironmentObjectActionType));
  translationMap->insert(std::make_pair("MissionEnvironmentObjectBaseType", uci::type::accessorType::missionEnvironmentObjectBaseType));
  translationMap->insert(std::make_pair("MissionEnvironmentObjectEffectType", uci::type::accessorType::missionEnvironmentObjectEffectType));
  translationMap->insert(std::make_pair("MissionEnvironmentObjectEntityType", uci::type::accessorType::missionEnvironmentObjectEntityType));
  translationMap->insert(std::make_pair("MissionEnvironmentObjectOpLineType", uci::type::accessorType::missionEnvironmentObjectOpLineType));
  translationMap->insert(std::make_pair("MissionEnvironmentObjectOpPointType", uci::type::accessorType::missionEnvironmentObjectOpPointType));
  translationMap->insert(std::make_pair("MissionEnvironmentObjectOpVolumeType", uci::type::accessorType::missionEnvironmentObjectOpVolumeType));
  translationMap->insert(std::make_pair("MissionEnvironmentObjectOpZoneType", uci::type::accessorType::missionEnvironmentObjectOpZoneType));
  translationMap->insert(std::make_pair("MissionEnvironmentObjectResponseType", uci::type::accessorType::missionEnvironmentObjectResponseType));
  translationMap->insert(std::make_pair("MissionEnvironmentObjectSystemType", uci::type::accessorType::missionEnvironmentObjectSystemType));
  translationMap->insert(std::make_pair("MissionEnvironmentObjectTaskType", uci::type::accessorType::missionEnvironmentObjectTaskType));
  translationMap->insert(std::make_pair("MissionEnvironmentOverrideID_Type", uci::type::accessorType::missionEnvironmentOverrideID_Type));
  translationMap->insert(std::make_pair("MissionEnvironmentOverrideMDT", uci::type::accessorType::missionEnvironmentOverrideMDT));
  translationMap->insert(std::make_pair("MissionEnvironmentOverrideMT", uci::type::accessorType::missionEnvironmentOverrideMT));
  translationMap->insert(std::make_pair("MissionID_Type", uci::type::accessorType::missionID_Type));
  translationMap->insert(std::make_pair("MissionPlanActivationApprovalStatusMT", uci::type::accessorType::missionPlanActivationApprovalStatusMT));
  translationMap->insert(std::make_pair("MissionPlanActivationCommandID_Type", uci::type::accessorType::missionPlanActivationCommandID_Type));
  translationMap->insert(std::make_pair("MissionPlanActivationCommandMT", uci::type::accessorType::missionPlanActivationCommandMT));
  translationMap->insert(std::make_pair("MissionPlanActivationCommandStatusMT", uci::type::accessorType::missionPlanActivationCommandStatusMT));
  translationMap->insert(std::make_pair("MissionPlanActivationStatusMT", uci::type::accessorType::missionPlanActivationStatusMT));
  translationMap->insert(std::make_pair("MissionPlanApprovalStatusMT", uci::type::accessorType::missionPlanApprovalStatusMT));
  translationMap->insert(std::make_pair("MissionPlanCommandID_Type", uci::type::accessorType::missionPlanCommandID_Type));
  translationMap->insert(std::make_pair("MissionPlanCommandMT", uci::type::accessorType::missionPlanCommandMT));
  translationMap->insert(std::make_pair("MissionPlanCommandStatusMT", uci::type::accessorType::missionPlanCommandStatusMT));
  translationMap->insert(std::make_pair("MissionPlanExecutionStatusMT", uci::type::accessorType::missionPlanExecutionStatusMT));
  translationMap->insert(std::make_pair("MissionPlanID_Type", uci::type::accessorType::missionPlanID_Type));
  translationMap->insert(std::make_pair("MissionPlanInputsType", uci::type::accessorType::missionPlanInputsType));
  translationMap->insert(std::make_pair("MissionPlanMetricsReportID_Type", uci::type::accessorType::missionPlanMetricsReportID_Type));
  translationMap->insert(std::make_pair("MissionPlanMetricsReportMT", uci::type::accessorType::missionPlanMetricsReportMT));
  translationMap->insert(std::make_pair("MissionPlanMetricsReportRequestMDT", uci::type::accessorType::missionPlanMetricsReportRequestMDT));
  translationMap->insert(std::make_pair("MissionPlanMetricsReportRequestMT", uci::type::accessorType::missionPlanMetricsReportRequestMT));
  translationMap->insert(std::make_pair("MissionPlanMetricsReportRequestStatusMDT", uci::type::accessorType::missionPlanMetricsReportRequestStatusMDT));
  translationMap->insert(std::make_pair("MissionPlanMetricsReportRequestStatusMT", uci::type::accessorType::missionPlanMetricsReportRequestStatusMT));
  translationMap->insert(std::make_pair("MissionPlanMT", uci::type::accessorType::missionPlanMT));
  translationMap->insert(std::make_pair("MissionPlanningOrchestrationID_Type", uci::type::accessorType::missionPlanningOrchestrationID_Type));
  translationMap->insert(std::make_pair("MissionPlanningOrchestrationMDT", uci::type::accessorType::missionPlanningOrchestrationMDT));
  translationMap->insert(std::make_pair("MissionPlanningOrchestrationMT", uci::type::accessorType::missionPlanningOrchestrationMT));
  translationMap->insert(std::make_pair("MissionPlanProcessDescriptionType", uci::type::accessorType::missionPlanProcessDescriptionType));
  translationMap->insert(std::make_pair("MissionPlanStatusMT", uci::type::accessorType::missionPlanStatusMT));
  translationMap->insert(std::make_pair("MissionPlanValidationCommandMDT", uci::type::accessorType::missionPlanValidationCommandMDT));
  translationMap->insert(std::make_pair("MissionPlanValidationCommandMT", uci::type::accessorType::missionPlanValidationCommandMT));
  translationMap->insert(std::make_pair("MissionPlanValidationCommandStatusMDT", uci::type::accessorType::missionPlanValidationCommandStatusMDT));
  translationMap->insert(std::make_pair("MissionPlanValidationCommandStatusMT", uci::type::accessorType::missionPlanValidationCommandStatusMT));
  translationMap->insert(std::make_pair("MissionPlanValidationID_Type", uci::type::accessorType::missionPlanValidationID_Type));
  translationMap->insert(std::make_pair("MissionPlanValidationInputsType", uci::type::accessorType::missionPlanValidationInputsType));
  translationMap->insert(std::make_pair("MissionPlanValidationMT", uci::type::accessorType::missionPlanValidationMT));
  translationMap->insert(std::make_pair("MissionRequirementStatusMT", uci::type::accessorType::missionRequirementStatusMT));
  translationMap->insert(std::make_pair("ModRateDataType", uci::type::accessorType::modRateDataType));
  translationMap->insert(std::make_pair("ModulationOnPulseDataBaseType", uci::type::accessorType::modulationOnPulseDataBaseType));
  translationMap->insert(std::make_pair("ModulationOnPulseDataType", uci::type::accessorType::modulationOnPulseDataType));
  translationMap->insert(std::make_pair("MTI_ActivityStatusBaseType", uci::type::accessorType::mTI_ActivityStatusBaseType));
  translationMap->insert(std::make_pair("MTI_ActivityStatusDetailType", uci::type::accessorType::mTI_ActivityStatusDetailType));
  translationMap->insert(std::make_pair("MTI_OpZoneFilterAreaType", uci::type::accessorType::mTI_OpZoneFilterAreaType));
  translationMap->insert(std::make_pair("MTI_STANAG_4607_OpZoneFilterAreaType", uci::type::accessorType::mTI_STANAG_4607_OpZoneFilterAreaType));
  translationMap->insert(std::make_pair("MultiObjectType", uci::type::accessorType::multiObjectType));
  translationMap->insert(std::make_pair("MultistaticEmitterDataID_Type", uci::type::accessorType::multistaticEmitterDataID_Type));
  translationMap->insert(std::make_pair("MultistaticEmitterDataMT", uci::type::accessorType::multistaticEmitterDataMT));
  translationMap->insert(std::make_pair("MultistaticEmitterID_Type", uci::type::accessorType::multistaticEmitterID_Type));
  translationMap->insert(std::make_pair("MvAnomalyEventID_Type", uci::type::accessorType::mvAnomalyEventID_Type));
  translationMap->insert(std::make_pair("MvAnomalyEventMDT", uci::type::accessorType::mvAnomalyEventMDT));
  translationMap->insert(std::make_pair("MvAnomalyEventMT", uci::type::accessorType::mvAnomalyEventMT));
  translationMap->insert(std::make_pair("NameValuePairType", uci::type::accessorType::nameValuePairType));
  translationMap->insert(std::make_pair("NATO_Link1DataLinkIdentifierType", uci::type::accessorType::nATO_Link1DataLinkIdentifierType));
  translationMap->insert(std::make_pair("NATO_Link1QuerySpecificDataType", uci::type::accessorType::nATO_Link1QuerySpecificDataType));
  translationMap->insert(std::make_pair("NavigationReportMT", uci::type::accessorType::navigationReportMT));
  translationMap->insert(std::make_pair("NetworkLinkID_Type", uci::type::accessorType::networkLinkID_Type));
  translationMap->insert(std::make_pair("NITF_PackingPlanPET", uci::type::accessorType::nITF_PackingPlanPET));
  translationMap->insert(std::make_pair("NITF_PackingPlanRevA_Type", uci::type::accessorType::nITF_PackingPlanRevA_Type));
  translationMap->insert(std::make_pair("NITF_PackingPlanType", uci::type::accessorType::nITF_PackingPlanType));
  translationMap->insert(std::make_pair("NotificationBaseType", uci::type::accessorType::notificationBaseType));
  translationMap->insert(std::make_pair("NotificationID_Type", uci::type::accessorType::notificationID_Type));
  translationMap->insert(std::make_pair("OB_SensorID_Type", uci::type::accessorType::oB_SensorID_Type));
  translationMap->insert(std::make_pair("ObservationMeasurementID_Type", uci::type::accessorType::observationMeasurementID_Type));
  translationMap->insert(std::make_pair("ObservationMeasurementReportID_Type", uci::type::accessorType::observationMeasurementReportID_Type));
  translationMap->insert(std::make_pair("ObservationMeasurementReportMT", uci::type::accessorType::observationMeasurementReportMT));
  translationMap->insert(std::make_pair("ObservationReportID_Type", uci::type::accessorType::observationReportID_Type));
  translationMap->insert(std::make_pair("ObservationReportMT", uci::type::accessorType::observationReportMT));
  translationMap->insert(std::make_pair("OffsetLocationErrorType", uci::type::accessorType::offsetLocationErrorType));
  translationMap->insert(std::make_pair("OffsetLocationType", uci::type::accessorType::offsetLocationType));
  translationMap->insert(std::make_pair("OpaqueCapabilityMDT", uci::type::accessorType::opaqueCapabilityMDT));
  translationMap->insert(std::make_pair("OpaqueCapabilityMT", uci::type::accessorType::opaqueCapabilityMT));
  translationMap->insert(std::make_pair("OpaqueCapabilityStatusMDT", uci::type::accessorType::opaqueCapabilityStatusMDT));
  translationMap->insert(std::make_pair("OpaqueCapabilityStatusMT", uci::type::accessorType::opaqueCapabilityStatusMT));
  translationMap->insert(std::make_pair("OpaqueSettingsCommandMDT", uci::type::accessorType::opaqueSettingsCommandMDT));
  translationMap->insert(std::make_pair("OpaqueSettingsCommandMT", uci::type::accessorType::opaqueSettingsCommandMT));
  translationMap->insert(std::make_pair("OpaqueSettingsCommandStatusMDT", uci::type::accessorType::opaqueSettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("OpaqueSettingsCommandStatusMT", uci::type::accessorType::opaqueSettingsCommandStatusMT));
  translationMap->insert(std::make_pair("OpBaseType", uci::type::accessorType::opBaseType));
  translationMap->insert(std::make_pair("OperationsAreaDataLinkNativeFilterType", uci::type::accessorType::operationsAreaDataLinkNativeFilterType));
  translationMap->insert(std::make_pair("OperatorActionCommandMDT", uci::type::accessorType::operatorActionCommandMDT));
  translationMap->insert(std::make_pair("OperatorActionCommandMT", uci::type::accessorType::operatorActionCommandMT));
  translationMap->insert(std::make_pair("OperatorActionCommandStatusMDT", uci::type::accessorType::operatorActionCommandStatusMDT));
  translationMap->insert(std::make_pair("OperatorActionCommandStatusMT", uci::type::accessorType::operatorActionCommandStatusMT));
  translationMap->insert(std::make_pair("OperatorActionID_Type", uci::type::accessorType::operatorActionID_Type));
  translationMap->insert(std::make_pair("OperatorAnnotationID_Type", uci::type::accessorType::operatorAnnotationID_Type));
  translationMap->insert(std::make_pair("OperatorAnnotationMDT", uci::type::accessorType::operatorAnnotationMDT));
  translationMap->insert(std::make_pair("OperatorAnnotationMT", uci::type::accessorType::operatorAnnotationMT));
  translationMap->insert(std::make_pair("OperatorID_Type", uci::type::accessorType::operatorID_Type));
  translationMap->insert(std::make_pair("OperatorLocationOfInterestID_Type", uci::type::accessorType::operatorLocationOfInterestID_Type));
  translationMap->insert(std::make_pair("OperatorLocationOfInterestMDT", uci::type::accessorType::operatorLocationOfInterestMDT));
  translationMap->insert(std::make_pair("OperatorLocationOfInterestMT", uci::type::accessorType::operatorLocationOfInterestMT));
  translationMap->insert(std::make_pair("OperatorMDT", uci::type::accessorType::operatorMDT));
  translationMap->insert(std::make_pair("OperatorMT", uci::type::accessorType::operatorMT));
  translationMap->insert(std::make_pair("OperatorNotificationAckID_Type", uci::type::accessorType::operatorNotificationAckID_Type));
  translationMap->insert(std::make_pair("OperatorNotificationAckMT", uci::type::accessorType::operatorNotificationAckMT));
  translationMap->insert(std::make_pair("OperatorNotificationID_Type", uci::type::accessorType::operatorNotificationID_Type));
  translationMap->insert(std::make_pair("OperatorNotificationMT", uci::type::accessorType::operatorNotificationMT));
  translationMap->insert(std::make_pair("OperatorNotificationOverrideID_Type", uci::type::accessorType::operatorNotificationOverrideID_Type));
  translationMap->insert(std::make_pair("OperatorNotificationOverrideMT", uci::type::accessorType::operatorNotificationOverrideMT));
  translationMap->insert(std::make_pair("OperatorRoleID_Type", uci::type::accessorType::operatorRoleID_Type));
  translationMap->insert(std::make_pair("OperatorRoleMDT", uci::type::accessorType::operatorRoleMDT));
  translationMap->insert(std::make_pair("OperatorRoleMT", uci::type::accessorType::operatorRoleMT));
  translationMap->insert(std::make_pair("OpLineID_Type", uci::type::accessorType::opLineID_Type));
  translationMap->insert(std::make_pair("OpLineMDT", uci::type::accessorType::opLineMDT));
  translationMap->insert(std::make_pair("OpLineMT", uci::type::accessorType::opLineMT));
  translationMap->insert(std::make_pair("OpLineType", uci::type::accessorType::opLineType));
  translationMap->insert(std::make_pair("OpNotificationMDT", uci::type::accessorType::opNotificationMDT));
  translationMap->insert(std::make_pair("OpNotificationMT", uci::type::accessorType::opNotificationMT));
  translationMap->insert(std::make_pair("OpPointBaseType", uci::type::accessorType::opPointBaseType));
  translationMap->insert(std::make_pair("OpPointID_Type", uci::type::accessorType::opPointID_Type));
  translationMap->insert(std::make_pair("OpPointMDT", uci::type::accessorType::opPointMDT));
  translationMap->insert(std::make_pair("OpPointMT", uci::type::accessorType::opPointMT));
  translationMap->insert(std::make_pair("OpRoutingID_Type", uci::type::accessorType::opRoutingID_Type));
  translationMap->insert(std::make_pair("OpRoutingMT", uci::type::accessorType::opRoutingMT));
  translationMap->insert(std::make_pair("OpticalCollectionConstraintsType", uci::type::accessorType::opticalCollectionConstraintsType));
  translationMap->insert(std::make_pair("OpVolumeID_Type", uci::type::accessorType::opVolumeID_Type));
  translationMap->insert(std::make_pair("OpVolumeMDT", uci::type::accessorType::opVolumeMDT));
  translationMap->insert(std::make_pair("OpVolumeMT", uci::type::accessorType::opVolumeMT));
  translationMap->insert(std::make_pair("OpZoneFilterAreaPET", uci::type::accessorType::opZoneFilterAreaPET));
  translationMap->insert(std::make_pair("OpZoneID_Type", uci::type::accessorType::opZoneID_Type));
  translationMap->insert(std::make_pair("OpZoneMDT", uci::type::accessorType::opZoneMDT));
  translationMap->insert(std::make_pair("OpZoneMT", uci::type::accessorType::opZoneMT));
  translationMap->insert(std::make_pair("OpZoneType", uci::type::accessorType::opZoneType));
  translationMap->insert(std::make_pair("OrbitActivityExecutionStatusType", uci::type::accessorType::orbitActivityExecutionStatusType));
  translationMap->insert(std::make_pair("OrbitActivityPlanApprovalStatusMT", uci::type::accessorType::orbitActivityPlanApprovalStatusMT));
  translationMap->insert(std::make_pair("OrbitActivityPlanCommandID_Type", uci::type::accessorType::orbitActivityPlanCommandID_Type));
  translationMap->insert(std::make_pair("OrbitActivityPlanCommandMT", uci::type::accessorType::orbitActivityPlanCommandMT));
  translationMap->insert(std::make_pair("OrbitActivityPlanCommandStatusMT", uci::type::accessorType::orbitActivityPlanCommandStatusMT));
  translationMap->insert(std::make_pair("OrbitActivityPlanExecutionStatusMT", uci::type::accessorType::orbitActivityPlanExecutionStatusMT));
  translationMap->insert(std::make_pair("OrbitActivityPlanID_Type", uci::type::accessorType::orbitActivityPlanID_Type));
  translationMap->insert(std::make_pair("OrbitActivityPlanInputsType", uci::type::accessorType::orbitActivityPlanInputsType));
  translationMap->insert(std::make_pair("OrbitActivityPlanMT", uci::type::accessorType::orbitActivityPlanMT));
  translationMap->insert(std::make_pair("OrbitActivityPlanStatusMT", uci::type::accessorType::orbitActivityPlanStatusMT));
  translationMap->insert(std::make_pair("OrbitActivityPlanStatusType", uci::type::accessorType::orbitActivityPlanStatusType));
  translationMap->insert(std::make_pair("OrbitActivityPlanValidationCommandMDT", uci::type::accessorType::orbitActivityPlanValidationCommandMDT));
  translationMap->insert(std::make_pair("OrbitActivityPlanValidationCommandMT", uci::type::accessorType::orbitActivityPlanValidationCommandMT));
  translationMap->insert(std::make_pair("OrbitActivityPlanValidationCommandStatusMDT", uci::type::accessorType::orbitActivityPlanValidationCommandStatusMDT));
  translationMap->insert(std::make_pair("OrbitActivityPlanValidationCommandStatusMT", uci::type::accessorType::orbitActivityPlanValidationCommandStatusMT));
  translationMap->insert(std::make_pair("OrbitActivityPlanValidationID_Type", uci::type::accessorType::orbitActivityPlanValidationID_Type));
  translationMap->insert(std::make_pair("OrbitActivityPlanValidationInputsType", uci::type::accessorType::orbitActivityPlanValidationInputsType));
  translationMap->insert(std::make_pair("OrbitActivityPlanValidationMT", uci::type::accessorType::orbitActivityPlanValidationMT));
  translationMap->insert(std::make_pair("OrbitActivityType", uci::type::accessorType::orbitActivityType));
  translationMap->insert(std::make_pair("OrbitalConjunctionID_Type", uci::type::accessorType::orbitalConjunctionID_Type));
  translationMap->insert(std::make_pair("OrbitalDebrisCloudID_Type", uci::type::accessorType::orbitalDebrisCloudID_Type));
  translationMap->insert(std::make_pair("OrbitalDebrisEstimateID_Type", uci::type::accessorType::orbitalDebrisEstimateID_Type));
  translationMap->insert(std::make_pair("OrbitalDebrisEstimateMT", uci::type::accessorType::orbitalDebrisEstimateMT));
  translationMap->insert(std::make_pair("OrbitalDebrisEstimateRequestMDT", uci::type::accessorType::orbitalDebrisEstimateRequestMDT));
  translationMap->insert(std::make_pair("OrbitalDebrisEstimateRequestMT", uci::type::accessorType::orbitalDebrisEstimateRequestMT));
  translationMap->insert(std::make_pair("OrbitalDebrisEstimateRequestStatusMDT", uci::type::accessorType::orbitalDebrisEstimateRequestStatusMDT));
  translationMap->insert(std::make_pair("OrbitalDebrisEstimateRequestStatusMT", uci::type::accessorType::orbitalDebrisEstimateRequestStatusMT));
  translationMap->insert(std::make_pair("OrbitalDebrisID_Type", uci::type::accessorType::orbitalDebrisID_Type));
  translationMap->insert(std::make_pair("OrbitalEphemerisRequestParametersType", uci::type::accessorType::orbitalEphemerisRequestParametersType));
  translationMap->insert(std::make_pair("OrbitalFiltersQueryType", uci::type::accessorType::orbitalFiltersQueryType));
  translationMap->insert(std::make_pair("OrbitalManeuverDetailsBaseType", uci::type::accessorType::orbitalManeuverDetailsBaseType));
  translationMap->insert(std::make_pair("OrbitalManeuverDetailsType", uci::type::accessorType::orbitalManeuverDetailsType));
  translationMap->insert(std::make_pair("OrbitalManeuverID_Type", uci::type::accessorType::orbitalManeuverID_Type));
  translationMap->insert(std::make_pair("OrbitalSurveillanceActivityDetailType", uci::type::accessorType::orbitalSurveillanceActivityDetailType));
  translationMap->insert(std::make_pair("OrbitalSurveillanceActivityMT", uci::type::accessorType::orbitalSurveillanceActivityMT));
  translationMap->insert(std::make_pair("OrbitalSurveillanceActivityType", uci::type::accessorType::orbitalSurveillanceActivityType));
  translationMap->insert(std::make_pair("OrbitalSurveillanceCapabilityMDT", uci::type::accessorType::orbitalSurveillanceCapabilityMDT));
  translationMap->insert(std::make_pair("OrbitalSurveillanceCapabilityMT", uci::type::accessorType::orbitalSurveillanceCapabilityMT));
  translationMap->insert(std::make_pair("OrbitalSurveillanceCapabilityStatusMDT", uci::type::accessorType::orbitalSurveillanceCapabilityStatusMDT));
  translationMap->insert(std::make_pair("OrbitalSurveillanceCapabilityStatusMT", uci::type::accessorType::orbitalSurveillanceCapabilityStatusMT));
  translationMap->insert(std::make_pair("OrbitalSurveillanceCapabilityType", uci::type::accessorType::orbitalSurveillanceCapabilityType));
  translationMap->insert(std::make_pair("OrbitalSurveillanceObjectBaseType", uci::type::accessorType::orbitalSurveillanceObjectBaseType));
  translationMap->insert(std::make_pair("OrbitalSurveillanceObjectType", uci::type::accessorType::orbitalSurveillanceObjectType));
  translationMap->insert(std::make_pair("OrbitalSurveillanceSensorActivityMT", uci::type::accessorType::orbitalSurveillanceSensorActivityMT));
  translationMap->insert(std::make_pair("OrbitalSurveillanceSensorActivityType", uci::type::accessorType::orbitalSurveillanceSensorActivityType));
  translationMap->insert(std::make_pair("OrbitalSurveillanceSensorCapabilityMDT", uci::type::accessorType::orbitalSurveillanceSensorCapabilityMDT));
  translationMap->insert(std::make_pair("OrbitalSurveillanceSensorCapabilityMT", uci::type::accessorType::orbitalSurveillanceSensorCapabilityMT));
  translationMap->insert(std::make_pair("OrbitalSurveillanceSensorCapabilityStatusMDT", uci::type::accessorType::orbitalSurveillanceSensorCapabilityStatusMDT));
  translationMap->insert(std::make_pair("OrbitalSurveillanceSensorCapabilityStatusMT", uci::type::accessorType::orbitalSurveillanceSensorCapabilityStatusMT));
  translationMap->insert(std::make_pair("OrbitalSurveillanceSensorCapabilityType", uci::type::accessorType::orbitalSurveillanceSensorCapabilityType));
  translationMap->insert(std::make_pair("OrbitalSurveillanceSensorTaskBaseType", uci::type::accessorType::orbitalSurveillanceSensorTaskBaseType));
  translationMap->insert(std::make_pair("OrbitalSurveillanceSensorTaskType", uci::type::accessorType::orbitalSurveillanceSensorTaskType));
  translationMap->insert(std::make_pair("OrbitalSurveillanceTaskBaseType", uci::type::accessorType::orbitalSurveillanceTaskBaseType));
  translationMap->insert(std::make_pair("OrbitalSurveillanceTaskType", uci::type::accessorType::orbitalSurveillanceTaskType));
  translationMap->insert(std::make_pair("OrbitChangeActivityMT", uci::type::accessorType::orbitChangeActivityMT));
  translationMap->insert(std::make_pair("OrbitChangeActivityType", uci::type::accessorType::orbitChangeActivityType));
  translationMap->insert(std::make_pair("OrbitChangeCapabilityMDT", uci::type::accessorType::orbitChangeCapabilityMDT));
  translationMap->insert(std::make_pair("OrbitChangeCapabilityMT", uci::type::accessorType::orbitChangeCapabilityMT));
  translationMap->insert(std::make_pair("OrbitChangeCapabilityStatusMDT", uci::type::accessorType::orbitChangeCapabilityStatusMDT));
  translationMap->insert(std::make_pair("OrbitChangeCapabilityStatusMT", uci::type::accessorType::orbitChangeCapabilityStatusMT));
  translationMap->insert(std::make_pair("OrbitChangeCapabilityType", uci::type::accessorType::orbitChangeCapabilityType));
  translationMap->insert(std::make_pair("OrbitChangeTaskBaseType", uci::type::accessorType::orbitChangeTaskBaseType));
  translationMap->insert(std::make_pair("OrbitChangeTaskType", uci::type::accessorType::orbitChangeTaskType));
  translationMap->insert(std::make_pair("OrbitConjunctionAssessmentID_Type", uci::type::accessorType::orbitConjunctionAssessmentID_Type));
  translationMap->insert(std::make_pair("OrbitConjunctionAssessmentMT", uci::type::accessorType::orbitConjunctionAssessmentMT));
  translationMap->insert(std::make_pair("OrbitConjunctionAssessmentRequestMDT", uci::type::accessorType::orbitConjunctionAssessmentRequestMDT));
  translationMap->insert(std::make_pair("OrbitConjunctionAssessmentRequestMT", uci::type::accessorType::orbitConjunctionAssessmentRequestMT));
  translationMap->insert(std::make_pair("OrbitConjunctionAssessmentRequestStatusMDT", uci::type::accessorType::orbitConjunctionAssessmentRequestStatusMDT));
  translationMap->insert(std::make_pair("OrbitConjunctionAssessmentRequestStatusMT", uci::type::accessorType::orbitConjunctionAssessmentRequestStatusMT));
  translationMap->insert(std::make_pair("OrbitExecutionPlanSetType", uci::type::accessorType::orbitExecutionPlanSetType));
  translationMap->insert(std::make_pair("OrbitKinematicsParametersType", uci::type::accessorType::orbitKinematicsParametersType));
  translationMap->insert(std::make_pair("OrbitKinematicsSequenceID_Type", uci::type::accessorType::orbitKinematicsSequenceID_Type));
  translationMap->insert(std::make_pair("OrbitKinematicsSequenceInsertionType", uci::type::accessorType::orbitKinematicsSequenceInsertionType));
  translationMap->insert(std::make_pair("OrbitKinematicsSequenceType", uci::type::accessorType::orbitKinematicsSequenceType));
  translationMap->insert(std::make_pair("OrbitKinematicsType", uci::type::accessorType::orbitKinematicsType));
  translationMap->insert(std::make_pair("OrbitManeuverSegmentID_Type", uci::type::accessorType::orbitManeuverSegmentID_Type));
  translationMap->insert(std::make_pair("OrbitMetricsID_Type", uci::type::accessorType::orbitMetricsID_Type));
  translationMap->insert(std::make_pair("OrbitMetricsMT", uci::type::accessorType::orbitMetricsMT));
  translationMap->insert(std::make_pair("OrbitMetricsRequestMDT", uci::type::accessorType::orbitMetricsRequestMDT));
  translationMap->insert(std::make_pair("OrbitMetricsRequestMT", uci::type::accessorType::orbitMetricsRequestMT));
  translationMap->insert(std::make_pair("OrbitMetricsRequestStatusMDT", uci::type::accessorType::orbitMetricsRequestStatusMDT));
  translationMap->insert(std::make_pair("OrbitMetricsRequestStatusMT", uci::type::accessorType::orbitMetricsRequestStatusMT));
  translationMap->insert(std::make_pair("OrbitModificationRequestMDT", uci::type::accessorType::orbitModificationRequestMDT));
  translationMap->insert(std::make_pair("OrbitModificationRequestMT", uci::type::accessorType::orbitModificationRequestMT));
  translationMap->insert(std::make_pair("OrbitModificationRequestStatusMDT", uci::type::accessorType::orbitModificationRequestStatusMDT));
  translationMap->insert(std::make_pair("OrbitModificationRequestStatusMT", uci::type::accessorType::orbitModificationRequestStatusMT));
  translationMap->insert(std::make_pair("OrbitPlanApprovalStatusMT", uci::type::accessorType::orbitPlanApprovalStatusMT));
  translationMap->insert(std::make_pair("OrbitPlanCommandID_Type", uci::type::accessorType::orbitPlanCommandID_Type));
  translationMap->insert(std::make_pair("OrbitPlanCommandMT", uci::type::accessorType::orbitPlanCommandMT));
  translationMap->insert(std::make_pair("OrbitPlanCommandStatusMT", uci::type::accessorType::orbitPlanCommandStatusMT));
  translationMap->insert(std::make_pair("OrbitPlanExecutionStatusMT", uci::type::accessorType::orbitPlanExecutionStatusMT));
  translationMap->insert(std::make_pair("OrbitPlanID_Type", uci::type::accessorType::orbitPlanID_Type));
  translationMap->insert(std::make_pair("OrbitPlanInputsType", uci::type::accessorType::orbitPlanInputsType));
  translationMap->insert(std::make_pair("OrbitPlanMT", uci::type::accessorType::orbitPlanMT));
  translationMap->insert(std::make_pair("OrbitPlanningCandidateType", uci::type::accessorType::orbitPlanningCandidateType));
  translationMap->insert(std::make_pair("OrbitPlanProcessDescriptionType", uci::type::accessorType::orbitPlanProcessDescriptionType));
  translationMap->insert(std::make_pair("OrbitPlanStatusMT", uci::type::accessorType::orbitPlanStatusMT));
  translationMap->insert(std::make_pair("OrbitPlanStatusType", uci::type::accessorType::orbitPlanStatusType));
  translationMap->insert(std::make_pair("OrbitPlanValidationCommandMDT", uci::type::accessorType::orbitPlanValidationCommandMDT));
  translationMap->insert(std::make_pair("OrbitPlanValidationCommandMT", uci::type::accessorType::orbitPlanValidationCommandMT));
  translationMap->insert(std::make_pair("OrbitPlanValidationCommandStatusMDT", uci::type::accessorType::orbitPlanValidationCommandStatusMDT));
  translationMap->insert(std::make_pair("OrbitPlanValidationCommandStatusMT", uci::type::accessorType::orbitPlanValidationCommandStatusMT));
  translationMap->insert(std::make_pair("OrbitPlanValidationID_Type", uci::type::accessorType::orbitPlanValidationID_Type));
  translationMap->insert(std::make_pair("OrbitPlanValidationInputsType", uci::type::accessorType::orbitPlanValidationInputsType));
  translationMap->insert(std::make_pair("OrbitPlanValidationMT", uci::type::accessorType::orbitPlanValidationMT));
  translationMap->insert(std::make_pair("OrbitSequenceCompletedType", uci::type::accessorType::orbitSequenceCompletedType));
  translationMap->insert(std::make_pair("OrbitSequenceEstimateType", uci::type::accessorType::orbitSequenceEstimateType));
  translationMap->insert(std::make_pair("OrderOfBattleC2_EmitterType", uci::type::accessorType::orderOfBattleC2_EmitterType));
  translationMap->insert(std::make_pair("OrderOfBattleEmitterType", uci::type::accessorType::orderOfBattleEmitterType));
  translationMap->insert(std::make_pair("OrderOfBattleID_Type", uci::type::accessorType::orderOfBattleID_Type));
  translationMap->insert(std::make_pair("OrderOfBattleMDT", uci::type::accessorType::orderOfBattleMDT));
  translationMap->insert(std::make_pair("OrderOfBattleMT", uci::type::accessorType::orderOfBattleMT));
  translationMap->insert(std::make_pair("PackageID_Type", uci::type::accessorType::packageID_Type));
  translationMap->insert(std::make_pair("PackageMDT", uci::type::accessorType::packageMDT));
  translationMap->insert(std::make_pair("PackageMT", uci::type::accessorType::packageMT));
  translationMap->insert(std::make_pair("PackageStatusMT", uci::type::accessorType::packageStatusMT));
  translationMap->insert(std::make_pair("ParameterID_Type", uci::type::accessorType::parameterID_Type));
  translationMap->insert(std::make_pair("PathID_Type", uci::type::accessorType::pathID_Type));
  translationMap->insert(std::make_pair("PixelCountSettingsType", uci::type::accessorType::pixelCountSettingsType));
  translationMap->insert(std::make_pair("PixelDataType", uci::type::accessorType::pixelDataType));
  translationMap->insert(std::make_pair("PixelOutputDataType", uci::type::accessorType::pixelOutputDataType));
  translationMap->insert(std::make_pair("PlanInputsCoreType", uci::type::accessorType::planInputsCoreType));
  translationMap->insert(std::make_pair("PlanModificationRequestMDT", uci::type::accessorType::planModificationRequestMDT));
  translationMap->insert(std::make_pair("PlanModificationRequestMT", uci::type::accessorType::planModificationRequestMT));
  translationMap->insert(std::make_pair("PlanModificationRequestStatusMDT", uci::type::accessorType::planModificationRequestStatusMDT));
  translationMap->insert(std::make_pair("PlanModificationRequestStatusMT", uci::type::accessorType::planModificationRequestStatusMT));
  translationMap->insert(std::make_pair("PlannedActivityBaseType", uci::type::accessorType::plannedActivityBaseType));
  translationMap->insert(std::make_pair("PlannedActivityExecutionStatusType", uci::type::accessorType::plannedActivityExecutionStatusType));
  translationMap->insert(std::make_pair("PlannedActivityID_Type", uci::type::accessorType::plannedActivityID_Type));
  translationMap->insert(std::make_pair("PlannedActivityTriggerType", uci::type::accessorType::plannedActivityTriggerType));
  translationMap->insert(std::make_pair("PlannedActivityType", uci::type::accessorType::plannedActivityType));
  translationMap->insert(std::make_pair("PlannedCommActionExtendedType", uci::type::accessorType::plannedCommActionExtendedType));
  translationMap->insert(std::make_pair("PlannedCommActionType", uci::type::accessorType::plannedCommActionType));
  translationMap->insert(std::make_pair("PlanningAllowedType", uci::type::accessorType::planningAllowedType));
  translationMap->insert(std::make_pair("PlanningApplicabilitySystemType", uci::type::accessorType::planningApplicabilitySystemType));
  translationMap->insert(std::make_pair("PlanningCandidateBaseType", uci::type::accessorType::planningCandidateBaseType));
  translationMap->insert(std::make_pair("PlanningDiscoveryBaseType", uci::type::accessorType::planningDiscoveryBaseType));
  translationMap->insert(std::make_pair("PlanningFunctionID_Type", uci::type::accessorType::planningFunctionID_Type));
  translationMap->insert(std::make_pair("PlanningFunctionMT", uci::type::accessorType::planningFunctionMT));
  translationMap->insert(std::make_pair("PlanningFunctionSettingsCommandMDT", uci::type::accessorType::planningFunctionSettingsCommandMDT));
  translationMap->insert(std::make_pair("PlanningFunctionSettingsCommandMT", uci::type::accessorType::planningFunctionSettingsCommandMT));
  translationMap->insert(std::make_pair("PlanningFunctionSettingsCommandStatusMDT", uci::type::accessorType::planningFunctionSettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("PlanningFunctionSettingsCommandStatusMT", uci::type::accessorType::planningFunctionSettingsCommandStatusMT));
  translationMap->insert(std::make_pair("PlanningFunctionStatusMT", uci::type::accessorType::planningFunctionStatusMT));
  translationMap->insert(std::make_pair("PlanningInterfacesType", uci::type::accessorType::planningInterfacesType));
  translationMap->insert(std::make_pair("PlanningInterfaceType", uci::type::accessorType::planningInterfaceType));
  translationMap->insert(std::make_pair("PlanningLocationType", uci::type::accessorType::planningLocationType));
  translationMap->insert(std::make_pair("PlanningProcessID_Type", uci::type::accessorType::planningProcessID_Type));
  translationMap->insert(std::make_pair("PlanPartsBaseType", uci::type::accessorType::planPartsBaseType));
  translationMap->insert(std::make_pair("PlanPartsType", uci::type::accessorType::planPartsType));
  translationMap->insert(std::make_pair("PlanScoresID_Type", uci::type::accessorType::planScoresID_Type));
  translationMap->insert(std::make_pair("PlanScoresMT", uci::type::accessorType::planScoresMT));
  translationMap->insert(std::make_pair("PlanScoresRequestMDT", uci::type::accessorType::planScoresRequestMDT));
  translationMap->insert(std::make_pair("PlanScoresRequestMT", uci::type::accessorType::planScoresRequestMT));
  translationMap->insert(std::make_pair("PlanScoresRequestStatusMDT", uci::type::accessorType::planScoresRequestStatusMDT));
  translationMap->insert(std::make_pair("PlanScoresRequestStatusMT", uci::type::accessorType::planScoresRequestStatusMT));
  translationMap->insert(std::make_pair("PlansReferenceBaseType", uci::type::accessorType::plansReferenceBaseType));
  translationMap->insert(std::make_pair("PlansReferenceType", uci::type::accessorType::plansReferenceType));
  translationMap->insert(std::make_pair("PlanStatusType", uci::type::accessorType::planStatusType));
  translationMap->insert(std::make_pair("PlanValidationInputsBaseType", uci::type::accessorType::planValidationInputsBaseType));
  translationMap->insert(std::make_pair("PlatformIdentityConfidenceType", uci::type::accessorType::platformIdentityConfidenceType));
  translationMap->insert(std::make_pair("PlatformIdentityType", uci::type::accessorType::platformIdentityType));
  translationMap->insert(std::make_pair("PO_ActivityCommandType", uci::type::accessorType::pO_ActivityCommandType));
  translationMap->insert(std::make_pair("PO_ActivityMT", uci::type::accessorType::pO_ActivityMT));
  translationMap->insert(std::make_pair("PO_ActivityType", uci::type::accessorType::pO_ActivityType));
  translationMap->insert(std::make_pair("PO_ApertureID_Type", uci::type::accessorType::pO_ApertureID_Type));
  translationMap->insert(std::make_pair("PO_CapabilityCommandType", uci::type::accessorType::pO_CapabilityCommandType));
  translationMap->insert(std::make_pair("PO_CapabilityMDT", uci::type::accessorType::pO_CapabilityMDT));
  translationMap->insert(std::make_pair("PO_CapabilityMT", uci::type::accessorType::pO_CapabilityMT));
  translationMap->insert(std::make_pair("PO_CapabilityStatusMDT", uci::type::accessorType::pO_CapabilityStatusMDT));
  translationMap->insert(std::make_pair("PO_CapabilityStatusMT", uci::type::accessorType::pO_CapabilityStatusMT));
  translationMap->insert(std::make_pair("PO_CapabilityStatusType", uci::type::accessorType::pO_CapabilityStatusType));
  translationMap->insert(std::make_pair("PO_CapabilityType", uci::type::accessorType::pO_CapabilityType));
  translationMap->insert(std::make_pair("PO_CollectionConstraintsType", uci::type::accessorType::pO_CollectionConstraintsType));
  translationMap->insert(std::make_pair("PO_CommandMT", uci::type::accessorType::pO_CommandMT));
  translationMap->insert(std::make_pair("PO_CommandStatusMDT", uci::type::accessorType::pO_CommandStatusMDT));
  translationMap->insert(std::make_pair("PO_CommandStatusMT", uci::type::accessorType::pO_CommandStatusMT));
  translationMap->insert(std::make_pair("PO_FilterID_Type", uci::type::accessorType::pO_FilterID_Type));
  translationMap->insert(std::make_pair("PO_FPA_ChannelID_Type", uci::type::accessorType::pO_FPA_ChannelID_Type));
  translationMap->insert(std::make_pair("PO_FPA_ID_Type", uci::type::accessorType::pO_FPA_ID_Type));
  translationMap->insert(std::make_pair("PO_LensID_Type", uci::type::accessorType::pO_LensID_Type));
  translationMap->insert(std::make_pair("PO_ProcessingStageID_Type", uci::type::accessorType::pO_ProcessingStageID_Type));
  translationMap->insert(std::make_pair("PO_ProductGeneratorID_Type", uci::type::accessorType::pO_ProductGeneratorID_Type));
  translationMap->insert(std::make_pair("PO_ProductGeneratorOutputID_Type", uci::type::accessorType::pO_ProductGeneratorOutputID_Type));
  translationMap->insert(std::make_pair("PO_ProductOutputCommandImageryType", uci::type::accessorType::pO_ProductOutputCommandImageryType));
  translationMap->insert(std::make_pair("PO_SettingsCommandMDT", uci::type::accessorType::pO_SettingsCommandMDT));
  translationMap->insert(std::make_pair("PO_SettingsCommandMT", uci::type::accessorType::pO_SettingsCommandMT));
  translationMap->insert(std::make_pair("PO_SettingsCommandStatusMDT", uci::type::accessorType::pO_SettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("PO_SettingsCommandStatusMT", uci::type::accessorType::pO_SettingsCommandStatusMT));
  translationMap->insert(std::make_pair("PO_TaskBaseType", uci::type::accessorType::pO_TaskBaseType));
  translationMap->insert(std::make_pair("PO_TaskType", uci::type::accessorType::pO_TaskType));
  translationMap->insert(std::make_pair("PO_WindowID_Type", uci::type::accessorType::pO_WindowID_Type));
  translationMap->insert(std::make_pair("Point2D_ReportedType", uci::type::accessorType::point2D_ReportedType));
  translationMap->insert(std::make_pair("Point2D_Type", uci::type::accessorType::point2D_Type));
  translationMap->insert(std::make_pair("Point3D_Type", uci::type::accessorType::point3D_Type));
  translationMap->insert(std::make_pair("PositionAndVelocityCovarianceType", uci::type::accessorType::positionAndVelocityCovarianceType));
  translationMap->insert(std::make_pair("PositionReportDetailedMT", uci::type::accessorType::positionReportDetailedMT));
  translationMap->insert(std::make_pair("PositionReportMT", uci::type::accessorType::positionReportMT));
  translationMap->insert(std::make_pair("PRI_DataBaseType", uci::type::accessorType::pRI_DataBaseType));
  translationMap->insert(std::make_pair("PRI_DataType", uci::type::accessorType::pRI_DataType));
  translationMap->insert(std::make_pair("PrioritizationListID_Type", uci::type::accessorType::prioritizationListID_Type));
  translationMap->insert(std::make_pair("PrioritizationListMDT", uci::type::accessorType::prioritizationListMDT));
  translationMap->insert(std::make_pair("PrioritizationListMT", uci::type::accessorType::prioritizationListMT));
  translationMap->insert(std::make_pair("ProcessingConstrainedSubPlanType", uci::type::accessorType::processingConstrainedSubPlanType));
  translationMap->insert(std::make_pair("ProcessingParametersPET", uci::type::accessorType::processingParametersPET));
  translationMap->insert(std::make_pair("ProcessingResultsPET", uci::type::accessorType::processingResultsPET));
  translationMap->insert(std::make_pair("ProductClassificationPlanID_Type", uci::type::accessorType::productClassificationPlanID_Type));
  translationMap->insert(std::make_pair("ProductClassificationPlanMT", uci::type::accessorType::productClassificationPlanMT));
  translationMap->insert(std::make_pair("ProductClassificationReportID_Type", uci::type::accessorType::productClassificationReportID_Type));
  translationMap->insert(std::make_pair("ProductClassificationReportMT", uci::type::accessorType::productClassificationReportMT));
  translationMap->insert(std::make_pair("ProductClassificationRequestMDT", uci::type::accessorType::productClassificationRequestMDT));
  translationMap->insert(std::make_pair("ProductClassificationRequestMT", uci::type::accessorType::productClassificationRequestMT));
  translationMap->insert(std::make_pair("ProductClassificationRequestStatusMDT", uci::type::accessorType::productClassificationRequestStatusMDT));
  translationMap->insert(std::make_pair("ProductClassificationRequestStatusMT", uci::type::accessorType::productClassificationRequestStatusMT));
  translationMap->insert(std::make_pair("ProductClassificationTaskMDT", uci::type::accessorType::productClassificationTaskMDT));
  translationMap->insert(std::make_pair("ProductClassificationTaskMT", uci::type::accessorType::productClassificationTaskMT));
  translationMap->insert(std::make_pair("ProductClassificationTaskStatusMDT", uci::type::accessorType::productClassificationTaskStatusMDT));
  translationMap->insert(std::make_pair("ProductClassificationTaskStatusMT", uci::type::accessorType::productClassificationTaskStatusMT));
  translationMap->insert(std::make_pair("ProductCollectionPathType", uci::type::accessorType::productCollectionPathType));
  translationMap->insert(std::make_pair("ProductDisseminationConfigurationID_Type", uci::type::accessorType::productDisseminationConfigurationID_Type));
  translationMap->insert(std::make_pair("ProductDisseminationConfigurationMDT", uci::type::accessorType::productDisseminationConfigurationMDT));
  translationMap->insert(std::make_pair("ProductDisseminationConfigurationMT", uci::type::accessorType::productDisseminationConfigurationMT));
  translationMap->insert(std::make_pair("ProductDisseminationDestinationID_Type", uci::type::accessorType::productDisseminationDestinationID_Type));
  translationMap->insert(std::make_pair("ProductDisseminationDestinationMDT", uci::type::accessorType::productDisseminationDestinationMDT));
  translationMap->insert(std::make_pair("ProductDisseminationDestinationMT", uci::type::accessorType::productDisseminationDestinationMT));
  translationMap->insert(std::make_pair("ProductDisseminationPlanID_Type", uci::type::accessorType::productDisseminationPlanID_Type));
  translationMap->insert(std::make_pair("ProductDisseminationPlanMT", uci::type::accessorType::productDisseminationPlanMT));
  translationMap->insert(std::make_pair("ProductDisseminationReportID_Type", uci::type::accessorType::productDisseminationReportID_Type));
  translationMap->insert(std::make_pair("ProductDisseminationReportMT", uci::type::accessorType::productDisseminationReportMT));
  translationMap->insert(std::make_pair("ProductDisseminationRequestMDT", uci::type::accessorType::productDisseminationRequestMDT));
  translationMap->insert(std::make_pair("ProductDisseminationRequestMT", uci::type::accessorType::productDisseminationRequestMT));
  translationMap->insert(std::make_pair("ProductDisseminationRequestStatusMDT", uci::type::accessorType::productDisseminationRequestStatusMDT));
  translationMap->insert(std::make_pair("ProductDisseminationRequestStatusMT", uci::type::accessorType::productDisseminationRequestStatusMT));
  translationMap->insert(std::make_pair("ProductDisseminationTaskMDT", uci::type::accessorType::productDisseminationTaskMDT));
  translationMap->insert(std::make_pair("ProductDisseminationTaskMT", uci::type::accessorType::productDisseminationTaskMT));
  translationMap->insert(std::make_pair("ProductDisseminationTaskStatusMDT", uci::type::accessorType::productDisseminationTaskStatusMDT));
  translationMap->insert(std::make_pair("ProductDisseminationTaskStatusMT", uci::type::accessorType::productDisseminationTaskStatusMT));
  translationMap->insert(std::make_pair("ProductDownloadPlanID_Type", uci::type::accessorType::productDownloadPlanID_Type));
  translationMap->insert(std::make_pair("ProductDownloadPlanMT", uci::type::accessorType::productDownloadPlanMT));
  translationMap->insert(std::make_pair("ProductDownloadReportID_Type", uci::type::accessorType::productDownloadReportID_Type));
  translationMap->insert(std::make_pair("ProductDownloadReportMT", uci::type::accessorType::productDownloadReportMT));
  translationMap->insert(std::make_pair("ProductDownloadRequestMDT", uci::type::accessorType::productDownloadRequestMDT));
  translationMap->insert(std::make_pair("ProductDownloadRequestMT", uci::type::accessorType::productDownloadRequestMT));
  translationMap->insert(std::make_pair("ProductDownloadRequestStatusMDT", uci::type::accessorType::productDownloadRequestStatusMDT));
  translationMap->insert(std::make_pair("ProductDownloadRequestStatusMT", uci::type::accessorType::productDownloadRequestStatusMT));
  translationMap->insert(std::make_pair("ProductDownloadTaskMDT", uci::type::accessorType::productDownloadTaskMDT));
  translationMap->insert(std::make_pair("ProductDownloadTaskMT", uci::type::accessorType::productDownloadTaskMT));
  translationMap->insert(std::make_pair("ProductDownloadTaskStatusMDT", uci::type::accessorType::productDownloadTaskStatusMDT));
  translationMap->insert(std::make_pair("ProductDownloadTaskStatusMT", uci::type::accessorType::productDownloadTaskStatusMT));
  translationMap->insert(std::make_pair("ProductLocationID_Type", uci::type::accessorType::productLocationID_Type));
  translationMap->insert(std::make_pair("ProductLocationMDT", uci::type::accessorType::productLocationMDT));
  translationMap->insert(std::make_pair("ProductLocationMT", uci::type::accessorType::productLocationMT));
  translationMap->insert(std::make_pair("ProductManagementTaskDataType", uci::type::accessorType::productManagementTaskDataType));
  translationMap->insert(std::make_pair("ProductManagementTaskStatusDataType", uci::type::accessorType::productManagementTaskStatusDataType));
  translationMap->insert(std::make_pair("ProductMetadataID_Type", uci::type::accessorType::productMetadataID_Type));
  translationMap->insert(std::make_pair("ProductMetadataMDT", uci::type::accessorType::productMetadataMDT));
  translationMap->insert(std::make_pair("ProductMetadataMT", uci::type::accessorType::productMetadataMT));
  translationMap->insert(std::make_pair("ProductOutputCapabilityImageryType", uci::type::accessorType::productOutputCapabilityImageryType));
  translationMap->insert(std::make_pair("ProductOutputCapabilityStatusImageryType", uci::type::accessorType::productOutputCapabilityStatusImageryType));
  translationMap->insert(std::make_pair("ProductOutputCommandBasicType", uci::type::accessorType::productOutputCommandBasicType));
  translationMap->insert(std::make_pair("ProductOutputCommandImageryType", uci::type::accessorType::productOutputCommandImageryType));
  translationMap->insert(std::make_pair("ProductOutputCommandSMTI_Type", uci::type::accessorType::productOutputCommandSMTI_Type));
  translationMap->insert(std::make_pair("ProductOutputStatusType", uci::type::accessorType::productOutputStatusType));
  translationMap->insert(std::make_pair("ProductOutputType", uci::type::accessorType::productOutputType));
  translationMap->insert(std::make_pair("ProductProcessingClassificationType", uci::type::accessorType::productProcessingClassificationType));
  translationMap->insert(std::make_pair("ProductProcessingFunctionMT", uci::type::accessorType::productProcessingFunctionMT));
  translationMap->insert(std::make_pair("ProductProcessingFunctionStatusMT", uci::type::accessorType::productProcessingFunctionStatusMT));
  translationMap->insert(std::make_pair("ProductProcessingPlanID_Type", uci::type::accessorType::productProcessingPlanID_Type));
  translationMap->insert(std::make_pair("ProductProcessingPlanMT", uci::type::accessorType::productProcessingPlanMT));
  translationMap->insert(std::make_pair("ProductProcessingReportID_Type", uci::type::accessorType::productProcessingReportID_Type));
  translationMap->insert(std::make_pair("ProductProcessingReportMT", uci::type::accessorType::productProcessingReportMT));
  translationMap->insert(std::make_pair("ProductProcessingRequestMDT", uci::type::accessorType::productProcessingRequestMDT));
  translationMap->insert(std::make_pair("ProductProcessingRequestMT", uci::type::accessorType::productProcessingRequestMT));
  translationMap->insert(std::make_pair("ProductProcessingRequestStatusMDT", uci::type::accessorType::productProcessingRequestStatusMDT));
  translationMap->insert(std::make_pair("ProductProcessingRequestStatusMT", uci::type::accessorType::productProcessingRequestStatusMT));
  translationMap->insert(std::make_pair("ProductProcessingTaskMDT", uci::type::accessorType::productProcessingTaskMDT));
  translationMap->insert(std::make_pair("ProductProcessingTaskMT", uci::type::accessorType::productProcessingTaskMT));
  translationMap->insert(std::make_pair("ProductProcessingTaskStatusMDT", uci::type::accessorType::productProcessingTaskStatusMDT));
  translationMap->insert(std::make_pair("ProductProcessingTaskStatusMT", uci::type::accessorType::productProcessingTaskStatusMT));
  translationMap->insert(std::make_pair("ProductProcessingType", uci::type::accessorType::productProcessingType));
  translationMap->insert(std::make_pair("ProductRateSettingsType", uci::type::accessorType::productRateSettingsType));
  translationMap->insert(std::make_pair("ProductSizeSettingsType", uci::type::accessorType::productSizeSettingsType));
  translationMap->insert(std::make_pair("PropagatorSettingsDataRequestMDT", uci::type::accessorType::propagatorSettingsDataRequestMDT));
  translationMap->insert(std::make_pair("PropagatorSettingsDataRequestMT", uci::type::accessorType::propagatorSettingsDataRequestMT));
  translationMap->insert(std::make_pair("PropagatorSettingsDataRequestStatusMDT", uci::type::accessorType::propagatorSettingsDataRequestStatusMDT));
  translationMap->insert(std::make_pair("PropagatorSettingsDataRequestStatusMT", uci::type::accessorType::propagatorSettingsDataRequestStatusMT));
  translationMap->insert(std::make_pair("PropagatorSettingsID_Type", uci::type::accessorType::propagatorSettingsID_Type));
  translationMap->insert(std::make_pair("PropagatorSettingsMT", uci::type::accessorType::propagatorSettingsMT));
  translationMap->insert(std::make_pair("ProximityOperationsType", uci::type::accessorType::proximityOperationsType));
  translationMap->insert(std::make_pair("PulseDataID_Type", uci::type::accessorType::pulseDataID_Type));
  translationMap->insert(std::make_pair("PulseDataMT", uci::type::accessorType::pulseDataMT));
  translationMap->insert(std::make_pair("PumpComponentExtendedStatusType", uci::type::accessorType::pumpComponentExtendedStatusType));
  translationMap->insert(std::make_pair("QueryDataRequestMDT", uci::type::accessorType::queryDataRequestMDT));
  translationMap->insert(std::make_pair("QueryDataRequestMT", uci::type::accessorType::queryDataRequestMT));
  translationMap->insert(std::make_pair("QueryDataRequestStatusMDT", uci::type::accessorType::queryDataRequestStatusMDT));
  translationMap->insert(std::make_pair("QueryDataRequestStatusMT", uci::type::accessorType::queryDataRequestStatusMT));
  translationMap->insert(std::make_pair("QueryPET", uci::type::accessorType::queryPET));
  translationMap->insert(std::make_pair("QuerySpecificDataPET", uci::type::accessorType::querySpecificDataPET));
  translationMap->insert(std::make_pair("QueryType", uci::type::accessorType::queryType));
  translationMap->insert(std::make_pair("RadarActivityCommandType", uci::type::accessorType::radarActivityCommandType));
  translationMap->insert(std::make_pair("RadarAltimeterActivityCommandType", uci::type::accessorType::radarAltimeterActivityCommandType));
  translationMap->insert(std::make_pair("RadarAltimeterActivityMT", uci::type::accessorType::radarAltimeterActivityMT));
  translationMap->insert(std::make_pair("RadarAltimeterActivityType", uci::type::accessorType::radarAltimeterActivityType));
  translationMap->insert(std::make_pair("RadarAltimeterCapabilityCommandType", uci::type::accessorType::radarAltimeterCapabilityCommandType));
  translationMap->insert(std::make_pair("RadarAltimeterCapabilityMDT", uci::type::accessorType::radarAltimeterCapabilityMDT));
  translationMap->insert(std::make_pair("RadarAltimeterCapabilityMT", uci::type::accessorType::radarAltimeterCapabilityMT));
  translationMap->insert(std::make_pair("RadarAltimeterCapabilityStatusMDT", uci::type::accessorType::radarAltimeterCapabilityStatusMDT));
  translationMap->insert(std::make_pair("RadarAltimeterCapabilityStatusMT", uci::type::accessorType::radarAltimeterCapabilityStatusMT));
  translationMap->insert(std::make_pair("RadarAltimeterCapabilityType", uci::type::accessorType::radarAltimeterCapabilityType));
  translationMap->insert(std::make_pair("RadarAltimeterCollectionOptionsType", uci::type::accessorType::radarAltimeterCollectionOptionsType));
  translationMap->insert(std::make_pair("RadarAltimeterCommandMT", uci::type::accessorType::radarAltimeterCommandMT));
  translationMap->insert(std::make_pair("RadarAltimeterCommandStatusMDT", uci::type::accessorType::radarAltimeterCommandStatusMDT));
  translationMap->insert(std::make_pair("RadarAltimeterCommandStatusMT", uci::type::accessorType::radarAltimeterCommandStatusMT));
  translationMap->insert(std::make_pair("RadarAltimeterReportID_Type", uci::type::accessorType::radarAltimeterReportID_Type));
  translationMap->insert(std::make_pair("RadarAltimeterReportMT", uci::type::accessorType::radarAltimeterReportMT));
  translationMap->insert(std::make_pair("RadarAltimeterSettingsCommandMDT", uci::type::accessorType::radarAltimeterSettingsCommandMDT));
  translationMap->insert(std::make_pair("RadarAltimeterSettingsCommandMT", uci::type::accessorType::radarAltimeterSettingsCommandMT));
  translationMap->insert(std::make_pair("RadarAltimeterSettingsCommandStatusMDT", uci::type::accessorType::radarAltimeterSettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("RadarAltimeterSettingsCommandStatusMT", uci::type::accessorType::radarAltimeterSettingsCommandStatusMT));
  translationMap->insert(std::make_pair("RadarCollectionOptionsType", uci::type::accessorType::radarCollectionOptionsType));
  translationMap->insert(std::make_pair("RDMA_InitializeID_Type", uci::type::accessorType::rDMA_InitializeID_Type));
  translationMap->insert(std::make_pair("RDMA_InitializeMT", uci::type::accessorType::rDMA_InitializeMT));
  translationMap->insert(std::make_pair("RDMA_InitializeSetupID_Type", uci::type::accessorType::rDMA_InitializeSetupID_Type));
  translationMap->insert(std::make_pair("RDMA_InitializeSetupMT", uci::type::accessorType::rDMA_InitializeSetupMT));
  translationMap->insert(std::make_pair("RectangleType", uci::type::accessorType::rectangleType));
  translationMap->insert(std::make_pair("ReferenceActivityMT", uci::type::accessorType::referenceActivityMT));
  translationMap->insert(std::make_pair("ReferenceActivityType", uci::type::accessorType::referenceActivityType));
  translationMap->insert(std::make_pair("ReferenceCapabilityMDT", uci::type::accessorType::referenceCapabilityMDT));
  translationMap->insert(std::make_pair("ReferenceCapabilityMT", uci::type::accessorType::referenceCapabilityMT));
  translationMap->insert(std::make_pair("ReferenceCapabilityStatusMDT", uci::type::accessorType::referenceCapabilityStatusMDT));
  translationMap->insert(std::make_pair("ReferenceCapabilityStatusMT", uci::type::accessorType::referenceCapabilityStatusMT));
  translationMap->insert(std::make_pair("ReferenceCapabilityType", uci::type::accessorType::referenceCapabilityType));
  translationMap->insert(std::make_pair("ReferenceFrameID_Type", uci::type::accessorType::referenceFrameID_Type));
  translationMap->insert(std::make_pair("ReferenceFrameMT", uci::type::accessorType::referenceFrameMT));
  translationMap->insert(std::make_pair("RefuelActivityCommandType", uci::type::accessorType::refuelActivityCommandType));
  translationMap->insert(std::make_pair("RefuelActivityMT", uci::type::accessorType::refuelActivityMT));
  translationMap->insert(std::make_pair("RefuelActivityType", uci::type::accessorType::refuelActivityType));
  translationMap->insert(std::make_pair("RefuelCapabilityDrogueCommandType", uci::type::accessorType::refuelCapabilityDrogueCommandType));
  translationMap->insert(std::make_pair("RefuelCapabilityDrogueCommonType", uci::type::accessorType::refuelCapabilityDrogueCommonType));
  translationMap->insert(std::make_pair("RefuelCapabilityDrogueStatusType", uci::type::accessorType::refuelCapabilityDrogueStatusType));
  translationMap->insert(std::make_pair("RefuelCapabilityExtendCommandType", uci::type::accessorType::refuelCapabilityExtendCommandType));
  translationMap->insert(std::make_pair("RefuelCapabilityMDT", uci::type::accessorType::refuelCapabilityMDT));
  translationMap->insert(std::make_pair("RefuelCapabilityMT", uci::type::accessorType::refuelCapabilityMT));
  translationMap->insert(std::make_pair("RefuelCapabilityStatusMDT", uci::type::accessorType::refuelCapabilityStatusMDT));
  translationMap->insert(std::make_pair("RefuelCapabilityStatusMT", uci::type::accessorType::refuelCapabilityStatusMT));
  translationMap->insert(std::make_pair("RefuelCapabilityType", uci::type::accessorType::refuelCapabilityType));
  translationMap->insert(std::make_pair("RefuelCommandMT", uci::type::accessorType::refuelCommandMT));
  translationMap->insert(std::make_pair("RefuelCommandStatusMDT", uci::type::accessorType::refuelCommandStatusMDT));
  translationMap->insert(std::make_pair("RefuelCommandStatusMT", uci::type::accessorType::refuelCommandStatusMT));
  translationMap->insert(std::make_pair("RefuelSettingsCommandMDT", uci::type::accessorType::refuelSettingsCommandMDT));
  translationMap->insert(std::make_pair("RefuelSettingsCommandMT", uci::type::accessorType::refuelSettingsCommandMT));
  translationMap->insert(std::make_pair("RefuelSettingsCommandStatusMDT", uci::type::accessorType::refuelSettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("RefuelSettingsCommandStatusMT", uci::type::accessorType::refuelSettingsCommandStatusMT));
  translationMap->insert(std::make_pair("RefuelTaskBaseType", uci::type::accessorType::refuelTaskBaseType));
  translationMap->insert(std::make_pair("RefuelTaskType", uci::type::accessorType::refuelTaskType));
  translationMap->insert(std::make_pair("RelationshipDesignationID_Type", uci::type::accessorType::relationshipDesignationID_Type));
  translationMap->insert(std::make_pair("RelationshipDesignationMDT", uci::type::accessorType::relationshipDesignationMDT));
  translationMap->insert(std::make_pair("RelationshipDesignationMT", uci::type::accessorType::relationshipDesignationMT));
  translationMap->insert(std::make_pair("RequestBaseType", uci::type::accessorType::requestBaseType));
  translationMap->insert(std::make_pair("RequestID_Type", uci::type::accessorType::requestID_Type));
  translationMap->insert(std::make_pair("RequestStatusBaseType", uci::type::accessorType::requestStatusBaseType));
  translationMap->insert(std::make_pair("RequirementAllocationBaseType", uci::type::accessorType::requirementAllocationBaseType));
  translationMap->insert(std::make_pair("RequirementAllocationWindowID_Type", uci::type::accessorType::requirementAllocationWindowID_Type));
  translationMap->insert(std::make_pair("RequirementDependencyBaseType", uci::type::accessorType::requirementDependencyBaseType));
  translationMap->insert(std::make_pair("RequirementDependencyType", uci::type::accessorType::requirementDependencyType));
  translationMap->insert(std::make_pair("RequirementExecutionApprovalStatusBaseType", uci::type::accessorType::requirementExecutionApprovalStatusBaseType));
  translationMap->insert(std::make_pair("RequirementExecutionStatusDetailsType", uci::type::accessorType::requirementExecutionStatusDetailsType));
  translationMap->insert(std::make_pair("RequirementFailedTriggerType", uci::type::accessorType::requirementFailedTriggerType));
  translationMap->insert(std::make_pair("RequirementGenerationDependencyType", uci::type::accessorType::requirementGenerationDependencyType));
  translationMap->insert(std::make_pair("RequirementMetricsID_Type", uci::type::accessorType::requirementMetricsID_Type));
  translationMap->insert(std::make_pair("RequirementMetricsMT", uci::type::accessorType::requirementMetricsMT));
  translationMap->insert(std::make_pair("RequirementMetricsReportType", uci::type::accessorType::requirementMetricsReportType));
  translationMap->insert(std::make_pair("RequirementMetricsRequestMDT", uci::type::accessorType::requirementMetricsRequestMDT));
  translationMap->insert(std::make_pair("RequirementMetricsRequestMT", uci::type::accessorType::requirementMetricsRequestMT));
  translationMap->insert(std::make_pair("RequirementMetricsRequestStatusMDT", uci::type::accessorType::requirementMetricsRequestStatusMDT));
  translationMap->insert(std::make_pair("RequirementMetricsRequestStatusMT", uci::type::accessorType::requirementMetricsRequestStatusMT));
  translationMap->insert(std::make_pair("RequirementOptionsCommandMDT", uci::type::accessorType::requirementOptionsCommandMDT));
  translationMap->insert(std::make_pair("RequirementOptionsCommandMT", uci::type::accessorType::requirementOptionsCommandMT));
  translationMap->insert(std::make_pair("RequirementOptionsCommandStatusMT", uci::type::accessorType::requirementOptionsCommandStatusMT));
  translationMap->insert(std::make_pair("RequirementOptionsID_Type", uci::type::accessorType::requirementOptionsID_Type));
  translationMap->insert(std::make_pair("RequirementOptionsMT", uci::type::accessorType::requirementOptionsMT));
  translationMap->insert(std::make_pair("RequirementPlanningCandidateType", uci::type::accessorType::requirementPlanningCandidateType));
  translationMap->insert(std::make_pair("RequirementPlanningResultBaseType", uci::type::accessorType::requirementPlanningResultBaseType));
  translationMap->insert(std::make_pair("RequirementPlanningResultType", uci::type::accessorType::requirementPlanningResultType));
  translationMap->insert(std::make_pair("RequirementPlanningStatusDetailsType", uci::type::accessorType::requirementPlanningStatusDetailsType));
  translationMap->insert(std::make_pair("RequirementSetID_Type", uci::type::accessorType::requirementSetID_Type));
  translationMap->insert(std::make_pair("RequirementSetMDT", uci::type::accessorType::requirementSetMDT));
  translationMap->insert(std::make_pair("RequirementSetMT", uci::type::accessorType::requirementSetMT));
  translationMap->insert(std::make_pair("RequirementsReferenceLockableType", uci::type::accessorType::requirementsReferenceLockableType));
  translationMap->insert(std::make_pair("RequirementsReferenceType", uci::type::accessorType::requirementsReferenceType));
  translationMap->insert(std::make_pair("RequirementsTemplateID_Type", uci::type::accessorType::requirementsTemplateID_Type));
  translationMap->insert(std::make_pair("RequirementTaxonomyDetailedType", uci::type::accessorType::requirementTaxonomyDetailedType));
  translationMap->insert(std::make_pair("RequirementTaxonomyType", uci::type::accessorType::requirementTaxonomyType));
  translationMap->insert(std::make_pair("RequirementTriggerType", uci::type::accessorType::requirementTriggerType));
  translationMap->insert(std::make_pair("ResendDataRequestMDT", uci::type::accessorType::resendDataRequestMDT));
  translationMap->insert(std::make_pair("ResendDataRequestMT", uci::type::accessorType::resendDataRequestMT));
  translationMap->insert(std::make_pair("ResendDataRequestStatusMDT", uci::type::accessorType::resendDataRequestStatusMDT));
  translationMap->insert(std::make_pair("ResendDataRequestStatusMT", uci::type::accessorType::resendDataRequestStatusMT));
  translationMap->insert(std::make_pair("ResponseActivityMT", uci::type::accessorType::responseActivityMT));
  translationMap->insert(std::make_pair("ResponseActivityType", uci::type::accessorType::responseActivityType));
  translationMap->insert(std::make_pair("ResponseAllocationType", uci::type::accessorType::responseAllocationType));
  translationMap->insert(std::make_pair("ResponseCancelCommandMDT", uci::type::accessorType::responseCancelCommandMDT));
  translationMap->insert(std::make_pair("ResponseCancelCommandMT", uci::type::accessorType::responseCancelCommandMT));
  translationMap->insert(std::make_pair("ResponseCancelCommandStatusMDT", uci::type::accessorType::responseCancelCommandStatusMDT));
  translationMap->insert(std::make_pair("ResponseCancelCommandStatusMT", uci::type::accessorType::responseCancelCommandStatusMT));
  translationMap->insert(std::make_pair("ResponseCapabilityCommandType", uci::type::accessorType::responseCapabilityCommandType));
  translationMap->insert(std::make_pair("ResponseCapabilityMDT", uci::type::accessorType::responseCapabilityMDT));
  translationMap->insert(std::make_pair("ResponseCapabilityMT", uci::type::accessorType::responseCapabilityMT));
  translationMap->insert(std::make_pair("ResponseCapabilityStatusMDT", uci::type::accessorType::responseCapabilityStatusMDT));
  translationMap->insert(std::make_pair("ResponseCapabilityStatusMT", uci::type::accessorType::responseCapabilityStatusMT));
  translationMap->insert(std::make_pair("ResponseCapabilityType", uci::type::accessorType::responseCapabilityType));
  translationMap->insert(std::make_pair("ResponseCommandMT", uci::type::accessorType::responseCommandMT));
  translationMap->insert(std::make_pair("ResponseCommandStatusMDT", uci::type::accessorType::responseCommandStatusMDT));
  translationMap->insert(std::make_pair("ResponseCommandStatusMT", uci::type::accessorType::responseCommandStatusMT));
  translationMap->insert(std::make_pair("ResponseExecutionApprovalStatusMDT", uci::type::accessorType::responseExecutionApprovalStatusMDT));
  translationMap->insert(std::make_pair("ResponseExecutionApprovalStatusMT", uci::type::accessorType::responseExecutionApprovalStatusMT));
  translationMap->insert(std::make_pair("ResponseID_Type", uci::type::accessorType::responseID_Type));
  translationMap->insert(std::make_pair("ResponseMT", uci::type::accessorType::responseMT));
  translationMap->insert(std::make_pair("ResponsePlanApprovalStatusMT", uci::type::accessorType::responsePlanApprovalStatusMT));
  translationMap->insert(std::make_pair("ResponsePlanCommandID_Type", uci::type::accessorType::responsePlanCommandID_Type));
  translationMap->insert(std::make_pair("ResponsePlanCommandMT", uci::type::accessorType::responsePlanCommandMT));
  translationMap->insert(std::make_pair("ResponsePlanCommandStatusMT", uci::type::accessorType::responsePlanCommandStatusMT));
  translationMap->insert(std::make_pair("ResponsePlanExecutionStatusMT", uci::type::accessorType::responsePlanExecutionStatusMT));
  translationMap->insert(std::make_pair("ResponsePlanID_Type", uci::type::accessorType::responsePlanID_Type));
  translationMap->insert(std::make_pair("ResponsePlanInputsType", uci::type::accessorType::responsePlanInputsType));
  translationMap->insert(std::make_pair("ResponsePlanMT", uci::type::accessorType::responsePlanMT));
  translationMap->insert(std::make_pair("ResponsePlanningResultType", uci::type::accessorType::responsePlanningResultType));
  translationMap->insert(std::make_pair("ResponsePlanningStatusMDT", uci::type::accessorType::responsePlanningStatusMDT));
  translationMap->insert(std::make_pair("ResponsePlanningStatusMT", uci::type::accessorType::responsePlanningStatusMT));
  translationMap->insert(std::make_pair("ResponsePlanProcessDescriptionType", uci::type::accessorType::responsePlanProcessDescriptionType));
  translationMap->insert(std::make_pair("ResponsePlanStatusMT", uci::type::accessorType::responsePlanStatusMT));
  translationMap->insert(std::make_pair("ResponsePlanValidationCommandMDT", uci::type::accessorType::responsePlanValidationCommandMDT));
  translationMap->insert(std::make_pair("ResponsePlanValidationCommandMT", uci::type::accessorType::responsePlanValidationCommandMT));
  translationMap->insert(std::make_pair("ResponsePlanValidationCommandStatusMDT", uci::type::accessorType::responsePlanValidationCommandStatusMDT));
  translationMap->insert(std::make_pair("ResponsePlanValidationCommandStatusMT", uci::type::accessorType::responsePlanValidationCommandStatusMT));
  translationMap->insert(std::make_pair("ResponsePlanValidationID_Type", uci::type::accessorType::responsePlanValidationID_Type));
  translationMap->insert(std::make_pair("ResponsePlanValidationInputsType", uci::type::accessorType::responsePlanValidationInputsType));
  translationMap->insert(std::make_pair("ResponsePlanValidationMT", uci::type::accessorType::responsePlanValidationMT));
  translationMap->insert(std::make_pair("ResponseStatusMDT", uci::type::accessorType::responseStatusMDT));
  translationMap->insert(std::make_pair("ResponseStatusMT", uci::type::accessorType::responseStatusMT));
  translationMap->insert(std::make_pair("RF_ControlCommandMDT", uci::type::accessorType::rF_ControlCommandMDT));
  translationMap->insert(std::make_pair("RF_ControlCommandMT", uci::type::accessorType::rF_ControlCommandMT));
  translationMap->insert(std::make_pair("RF_ControlCommandStatusMDT", uci::type::accessorType::rF_ControlCommandStatusMDT));
  translationMap->insert(std::make_pair("RF_ControlCommandStatusMT", uci::type::accessorType::rF_ControlCommandStatusMT));
  translationMap->insert(std::make_pair("RF_ProfileID_Type", uci::type::accessorType::rF_ProfileID_Type));
  translationMap->insert(std::make_pair("RF_ProfileMT", uci::type::accessorType::rF_ProfileMT));
  translationMap->insert(std::make_pair("RF_ReportID_Type", uci::type::accessorType::rF_ReportID_Type));
  translationMap->insert(std::make_pair("RF_ReportMT", uci::type::accessorType::rF_ReportMT));
  translationMap->insert(std::make_pair("RF_ResourceAllocationID_Type", uci::type::accessorType::rF_ResourceAllocationID_Type));
  translationMap->insert(std::make_pair("RF_ResourceAllocationMT", uci::type::accessorType::rF_ResourceAllocationMT));
  translationMap->insert(std::make_pair("RF_ResourceAllocationRequestMDT", uci::type::accessorType::rF_ResourceAllocationRequestMDT));
  translationMap->insert(std::make_pair("RF_ResourceAllocationRequestMT", uci::type::accessorType::rF_ResourceAllocationRequestMT));
  translationMap->insert(std::make_pair("RF_ResourceAllocationRequestStatusMDT", uci::type::accessorType::rF_ResourceAllocationRequestStatusMDT));
  translationMap->insert(std::make_pair("RF_ResourceAllocationRequestStatusMT", uci::type::accessorType::rF_ResourceAllocationRequestStatusMT));
  translationMap->insert(std::make_pair("RF_ThreadInstanceSetupCommandMDT", uci::type::accessorType::rF_ThreadInstanceSetupCommandMDT));
  translationMap->insert(std::make_pair("RF_ThreadInstanceSetupCommandMT", uci::type::accessorType::rF_ThreadInstanceSetupCommandMT));
  translationMap->insert(std::make_pair("RF_ThreadInstanceSetupCommandStatusMDT", uci::type::accessorType::rF_ThreadInstanceSetupCommandStatusMDT));
  translationMap->insert(std::make_pair("RF_ThreadInstanceSetupCommandStatusMT", uci::type::accessorType::rF_ThreadInstanceSetupCommandStatusMT));
  translationMap->insert(std::make_pair("RFD_ComponentIdentifierType", uci::type::accessorType::rFD_ComponentIdentifierType));
  translationMap->insert(std::make_pair("RouteActivityExecutionStatusType", uci::type::accessorType::routeActivityExecutionStatusType));
  translationMap->insert(std::make_pair("RouteActivityPlanApprovalStatusMT", uci::type::accessorType::routeActivityPlanApprovalStatusMT));
  translationMap->insert(std::make_pair("RouteActivityPlanCommandID_Type", uci::type::accessorType::routeActivityPlanCommandID_Type));
  translationMap->insert(std::make_pair("RouteActivityPlanCommandMT", uci::type::accessorType::routeActivityPlanCommandMT));
  translationMap->insert(std::make_pair("RouteActivityPlanCommandStatusMT", uci::type::accessorType::routeActivityPlanCommandStatusMT));
  translationMap->insert(std::make_pair("RouteActivityPlanExecutionStatusMT", uci::type::accessorType::routeActivityPlanExecutionStatusMT));
  translationMap->insert(std::make_pair("RouteActivityPlanID_Type", uci::type::accessorType::routeActivityPlanID_Type));
  translationMap->insert(std::make_pair("RouteActivityPlanInputsType", uci::type::accessorType::routeActivityPlanInputsType));
  translationMap->insert(std::make_pair("RouteActivityPlanMT", uci::type::accessorType::routeActivityPlanMT));
  translationMap->insert(std::make_pair("RouteActivityPlanStatusMT", uci::type::accessorType::routeActivityPlanStatusMT));
  translationMap->insert(std::make_pair("RouteActivityPlanStatusType", uci::type::accessorType::routeActivityPlanStatusType));
  translationMap->insert(std::make_pair("RouteActivityPlanValidationCommandMDT", uci::type::accessorType::routeActivityPlanValidationCommandMDT));
  translationMap->insert(std::make_pair("RouteActivityPlanValidationCommandMT", uci::type::accessorType::routeActivityPlanValidationCommandMT));
  translationMap->insert(std::make_pair("RouteActivityPlanValidationCommandStatusMDT", uci::type::accessorType::routeActivityPlanValidationCommandStatusMDT));
  translationMap->insert(std::make_pair("RouteActivityPlanValidationCommandStatusMT", uci::type::accessorType::routeActivityPlanValidationCommandStatusMT));
  translationMap->insert(std::make_pair("RouteActivityPlanValidationID_Type", uci::type::accessorType::routeActivityPlanValidationID_Type));
  translationMap->insert(std::make_pair("RouteActivityPlanValidationInputsType", uci::type::accessorType::routeActivityPlanValidationInputsType));
  translationMap->insert(std::make_pair("RouteActivityPlanValidationMT", uci::type::accessorType::routeActivityPlanValidationMT));
  translationMap->insert(std::make_pair("RouteActivityType", uci::type::accessorType::routeActivityType));
  translationMap->insert(std::make_pair("RouteExecutionPlanSetType", uci::type::accessorType::routeExecutionPlanSetType));
  translationMap->insert(std::make_pair("RouteMetricsID_Type", uci::type::accessorType::routeMetricsID_Type));
  translationMap->insert(std::make_pair("RouteMetricsMT", uci::type::accessorType::routeMetricsMT));
  translationMap->insert(std::make_pair("RouteMetricsRequestMDT", uci::type::accessorType::routeMetricsRequestMDT));
  translationMap->insert(std::make_pair("RouteMetricsRequestMT", uci::type::accessorType::routeMetricsRequestMT));
  translationMap->insert(std::make_pair("RouteMetricsRequestStatusMDT", uci::type::accessorType::routeMetricsRequestStatusMDT));
  translationMap->insert(std::make_pair("RouteMetricsRequestStatusMT", uci::type::accessorType::routeMetricsRequestStatusMT));
  translationMap->insert(std::make_pair("RouteModificationRequestMDT", uci::type::accessorType::routeModificationRequestMDT));
  translationMap->insert(std::make_pair("RouteModificationRequestMT", uci::type::accessorType::routeModificationRequestMT));
  translationMap->insert(std::make_pair("RouteModificationRequestStatusMDT", uci::type::accessorType::routeModificationRequestStatusMDT));
  translationMap->insert(std::make_pair("RouteModificationRequestStatusMT", uci::type::accessorType::routeModificationRequestStatusMT));
  translationMap->insert(std::make_pair("RoutePlanApprovalStatusMT", uci::type::accessorType::routePlanApprovalStatusMT));
  translationMap->insert(std::make_pair("RoutePlanCommandID_Type", uci::type::accessorType::routePlanCommandID_Type));
  translationMap->insert(std::make_pair("RoutePlanCommandMT", uci::type::accessorType::routePlanCommandMT));
  translationMap->insert(std::make_pair("RoutePlanCommandStatusMT", uci::type::accessorType::routePlanCommandStatusMT));
  translationMap->insert(std::make_pair("RoutePlanExecutionStatusMT", uci::type::accessorType::routePlanExecutionStatusMT));
  translationMap->insert(std::make_pair("RoutePlanID_Type", uci::type::accessorType::routePlanID_Type));
  translationMap->insert(std::make_pair("RoutePlanInputsType", uci::type::accessorType::routePlanInputsType));
  translationMap->insert(std::make_pair("RoutePlanMT", uci::type::accessorType::routePlanMT));
  translationMap->insert(std::make_pair("RoutePlanningCandidateType", uci::type::accessorType::routePlanningCandidateType));
  translationMap->insert(std::make_pair("RoutePlanProcessDescriptionType", uci::type::accessorType::routePlanProcessDescriptionType));
  translationMap->insert(std::make_pair("RoutePlanStatusMT", uci::type::accessorType::routePlanStatusMT));
  translationMap->insert(std::make_pair("RoutePlanStatusType", uci::type::accessorType::routePlanStatusType));
  translationMap->insert(std::make_pair("RoutePlanValidationCommandMDT", uci::type::accessorType::routePlanValidationCommandMDT));
  translationMap->insert(std::make_pair("RoutePlanValidationCommandMT", uci::type::accessorType::routePlanValidationCommandMT));
  translationMap->insert(std::make_pair("RoutePlanValidationCommandStatusMDT", uci::type::accessorType::routePlanValidationCommandStatusMDT));
  translationMap->insert(std::make_pair("RoutePlanValidationCommandStatusMT", uci::type::accessorType::routePlanValidationCommandStatusMT));
  translationMap->insert(std::make_pair("RoutePlanValidationID_Type", uci::type::accessorType::routePlanValidationID_Type));
  translationMap->insert(std::make_pair("RoutePlanValidationInputsType", uci::type::accessorType::routePlanValidationInputsType));
  translationMap->insert(std::make_pair("RoutePlanValidationMT", uci::type::accessorType::routePlanValidationMT));
  translationMap->insert(std::make_pair("RouteVulnerabilityMetricsRequestType", uci::type::accessorType::routeVulnerabilityMetricsRequestType));
  translationMap->insert(std::make_pair("RSO_ApproachType", uci::type::accessorType::rSO_ApproachType));
  translationMap->insert(std::make_pair("RSTA_FileTraceabilityType", uci::type::accessorType::rSTA_FileTraceabilityType));
  translationMap->insert(std::make_pair("RSTA_TraceabilityType", uci::type::accessorType::rSTA_TraceabilityType));
  translationMap->insert(std::make_pair("RunwayID_Type", uci::type::accessorType::runwayID_Type));
  translationMap->insert(std::make_pair("SAR_ActivityCommandType", uci::type::accessorType::sAR_ActivityCommandType));
  translationMap->insert(std::make_pair("SAR_ActivityMT", uci::type::accessorType::sAR_ActivityMT));
  translationMap->insert(std::make_pair("SAR_ActivityType", uci::type::accessorType::sAR_ActivityType));
  translationMap->insert(std::make_pair("SAR_AutomaticTargetDetectionParametersType", uci::type::accessorType::sAR_AutomaticTargetDetectionParametersType));
  translationMap->insert(std::make_pair("SAR_CapabilityCommandType", uci::type::accessorType::sAR_CapabilityCommandType));
  translationMap->insert(std::make_pair("SAR_CapabilityMDT", uci::type::accessorType::sAR_CapabilityMDT));
  translationMap->insert(std::make_pair("SAR_CapabilityMT", uci::type::accessorType::sAR_CapabilityMT));
  translationMap->insert(std::make_pair("SAR_CapabilityStatusMDT", uci::type::accessorType::sAR_CapabilityStatusMDT));
  translationMap->insert(std::make_pair("SAR_CapabilityStatusMT", uci::type::accessorType::sAR_CapabilityStatusMT));
  translationMap->insert(std::make_pair("SAR_CapabilityStatusType", uci::type::accessorType::sAR_CapabilityStatusType));
  translationMap->insert(std::make_pair("SAR_CapabilityType", uci::type::accessorType::sAR_CapabilityType));
  translationMap->insert(std::make_pair("SAR_CoherentChangeDetectionParametersType", uci::type::accessorType::sAR_CoherentChangeDetectionParametersType));
  translationMap->insert(std::make_pair("SAR_CollectionConstraintsType", uci::type::accessorType::sAR_CollectionConstraintsType));
  translationMap->insert(std::make_pair("SAR_CollectionOptionsType", uci::type::accessorType::sAR_CollectionOptionsType));
  translationMap->insert(std::make_pair("SAR_CommandMT", uci::type::accessorType::sAR_CommandMT));
  translationMap->insert(std::make_pair("SAR_CommandStatusMDT", uci::type::accessorType::sAR_CommandStatusMDT));
  translationMap->insert(std::make_pair("SAR_CommandStatusMT", uci::type::accessorType::sAR_CommandStatusMT));
  translationMap->insert(std::make_pair("SAR_DynamicImageParametersType", uci::type::accessorType::sAR_DynamicImageParametersType));
  translationMap->insert(std::make_pair("SAR_ProcessingParametersType", uci::type::accessorType::sAR_ProcessingParametersType));
  translationMap->insert(std::make_pair("SAR_SettingsCommandMDT", uci::type::accessorType::sAR_SettingsCommandMDT));
  translationMap->insert(std::make_pair("SAR_SettingsCommandMT", uci::type::accessorType::sAR_SettingsCommandMT));
  translationMap->insert(std::make_pair("SAR_SettingsCommandStatusMDT", uci::type::accessorType::sAR_SettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("SAR_SettingsCommandStatusMT", uci::type::accessorType::sAR_SettingsCommandStatusMT));
  translationMap->insert(std::make_pair("SAR_TaskAchievabilityAssessmentRequestType", uci::type::accessorType::sAR_TaskAchievabilityAssessmentRequestType));
  translationMap->insert(std::make_pair("SAR_TaskAchievabilityAssessmentType", uci::type::accessorType::sAR_TaskAchievabilityAssessmentType));
  translationMap->insert(std::make_pair("SAR_TaskBaseType", uci::type::accessorType::sAR_TaskBaseType));
  translationMap->insert(std::make_pair("SAR_TaskType", uci::type::accessorType::sAR_TaskType));
  translationMap->insert(std::make_pair("SAR_TwoColorMultiViewParametersType", uci::type::accessorType::sAR_TwoColorMultiViewParametersType));
  translationMap->insert(std::make_pair("SatelliteCharacteristicsID_Type", uci::type::accessorType::satelliteCharacteristicsID_Type));
  translationMap->insert(std::make_pair("SatelliteCharacteristicsMDT", uci::type::accessorType::satelliteCharacteristicsMDT));
  translationMap->insert(std::make_pair("SatelliteCharacteristicsMT", uci::type::accessorType::satelliteCharacteristicsMT));
  translationMap->insert(std::make_pair("SatellitePhysicalConfigurationID_Type", uci::type::accessorType::satellitePhysicalConfigurationID_Type));
  translationMap->insert(std::make_pair("ScanDataBaseType", uci::type::accessorType::scanDataBaseType));
  translationMap->insert(std::make_pair("ScanDataType", uci::type::accessorType::scanDataType));
  translationMap->insert(std::make_pair("ScoringProcessID_Type", uci::type::accessorType::scoringProcessID_Type));
  translationMap->insert(std::make_pair("SectorType", uci::type::accessorType::sectorType));
  translationMap->insert(std::make_pair("SecurityAuditRecordID_Type", uci::type::accessorType::securityAuditRecordID_Type));
  translationMap->insert(std::make_pair("SecurityAuditRecordMT", uci::type::accessorType::securityAuditRecordMT));
  translationMap->insert(std::make_pair("SegmentCompletedType", uci::type::accessorType::segmentCompletedType));
  translationMap->insert(std::make_pair("SegmentEstimateType", uci::type::accessorType::segmentEstimateType));
  translationMap->insert(std::make_pair("SegmentID_Type", uci::type::accessorType::segmentID_Type));
  translationMap->insert(std::make_pair("SelectionQuerySpecificDataType", uci::type::accessorType::selectionQuerySpecificDataType));
  translationMap->insert(std::make_pair("SelfDefenseStatusMDT", uci::type::accessorType::selfDefenseStatusMDT));
  translationMap->insert(std::make_pair("SelfDefenseStatusMT", uci::type::accessorType::selfDefenseStatusMT));
  translationMap->insert(std::make_pair("SensorConstraintsBaseType", uci::type::accessorType::sensorConstraintsBaseType));
  translationMap->insert(std::make_pair("SensorConstraintsType", uci::type::accessorType::sensorConstraintsType));
  translationMap->insert(std::make_pair("SeparationParametersType", uci::type::accessorType::separationParametersType));
  translationMap->insert(std::make_pair("ServiceConfigurationChangeRequestMDT", uci::type::accessorType::serviceConfigurationChangeRequestMDT));
  translationMap->insert(std::make_pair("ServiceConfigurationChangeRequestMT", uci::type::accessorType::serviceConfigurationChangeRequestMT));
  translationMap->insert(std::make_pair("ServiceConfigurationChangeRequestStatusMDT", uci::type::accessorType::serviceConfigurationChangeRequestStatusMDT));
  translationMap->insert(std::make_pair("ServiceConfigurationChangeRequestStatusMT", uci::type::accessorType::serviceConfigurationChangeRequestStatusMT));
  translationMap->insert(std::make_pair("ServiceConfigurationParamsDataRequestMDT", uci::type::accessorType::serviceConfigurationParamsDataRequestMDT));
  translationMap->insert(std::make_pair("ServiceConfigurationParamsDataRequestMT", uci::type::accessorType::serviceConfigurationParamsDataRequestMT));
  translationMap->insert(std::make_pair("ServiceConfigurationParamsDataRequestStatusMDT", uci::type::accessorType::serviceConfigurationParamsDataRequestStatusMDT));
  translationMap->insert(std::make_pair("ServiceConfigurationParamsDataRequestStatusMT", uci::type::accessorType::serviceConfigurationParamsDataRequestStatusMT));
  translationMap->insert(std::make_pair("ServiceConfigurationParamsMT", uci::type::accessorType::serviceConfigurationParamsMT));
  translationMap->insert(std::make_pair("ServiceErrorReportID_Type", uci::type::accessorType::serviceErrorReportID_Type));
  translationMap->insert(std::make_pair("ServiceErrorReportMT", uci::type::accessorType::serviceErrorReportMT));
  translationMap->insert(std::make_pair("ServiceID_Type", uci::type::accessorType::serviceID_Type));
  translationMap->insert(std::make_pair("ServiceLifecycleCommandMDT", uci::type::accessorType::serviceLifecycleCommandMDT));
  translationMap->insert(std::make_pair("ServiceLifecycleCommandMT", uci::type::accessorType::serviceLifecycleCommandMT));
  translationMap->insert(std::make_pair("ServiceLifecycleCommandStatusMDT", uci::type::accessorType::serviceLifecycleCommandStatusMDT));
  translationMap->insert(std::make_pair("ServiceLifecycleCommandStatusMT", uci::type::accessorType::serviceLifecycleCommandStatusMT));
  translationMap->insert(std::make_pair("ServiceRegistrationRequestMDT", uci::type::accessorType::serviceRegistrationRequestMDT));
  translationMap->insert(std::make_pair("ServiceRegistrationRequestMT", uci::type::accessorType::serviceRegistrationRequestMT));
  translationMap->insert(std::make_pair("ServiceRegistrationRequestStatusMDT", uci::type::accessorType::serviceRegistrationRequestStatusMDT));
  translationMap->insert(std::make_pair("ServiceRegistrationRequestStatusMT", uci::type::accessorType::serviceRegistrationRequestStatusMT));
  translationMap->insert(std::make_pair("ServiceSettingsCommandMDT", uci::type::accessorType::serviceSettingsCommandMDT));
  translationMap->insert(std::make_pair("ServiceSettingsCommandMT", uci::type::accessorType::serviceSettingsCommandMT));
  translationMap->insert(std::make_pair("ServiceSettingsCommandStatusMDT", uci::type::accessorType::serviceSettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("ServiceSettingsCommandStatusMT", uci::type::accessorType::serviceSettingsCommandStatusMT));
  translationMap->insert(std::make_pair("ServiceStatusDataRequestMDT", uci::type::accessorType::serviceStatusDataRequestMDT));
  translationMap->insert(std::make_pair("ServiceStatusDataRequestMT", uci::type::accessorType::serviceStatusDataRequestMT));
  translationMap->insert(std::make_pair("ServiceStatusDataRequestStatusMDT", uci::type::accessorType::serviceStatusDataRequestStatusMDT));
  translationMap->insert(std::make_pair("ServiceStatusDataRequestStatusMT", uci::type::accessorType::serviceStatusDataRequestStatusMT));
  translationMap->insert(std::make_pair("ServiceStatusMT", uci::type::accessorType::serviceStatusMT));
  translationMap->insert(std::make_pair("SharedApertureSupportCapabilityStatusMDT", uci::type::accessorType::sharedApertureSupportCapabilityStatusMDT));
  translationMap->insert(std::make_pair("SharedApertureSupportCapabilityStatusMT", uci::type::accessorType::sharedApertureSupportCapabilityStatusMT));
  translationMap->insert(std::make_pair("SharedRF_ApertureActivityBaseType", uci::type::accessorType::sharedRF_ApertureActivityBaseType));
  translationMap->insert(std::make_pair("SharedRF_ApertureActivityCommandBaseType", uci::type::accessorType::sharedRF_ApertureActivityCommandBaseType));
  translationMap->insert(std::make_pair("SharedRF_ApertureCapabilityCommandBaseType", uci::type::accessorType::sharedRF_ApertureCapabilityCommandBaseType));
  translationMap->insert(std::make_pair("SignalEmitterKinematicsFixedType", uci::type::accessorType::signalEmitterKinematicsFixedType));
  translationMap->insert(std::make_pair("SignalID_Type", uci::type::accessorType::signalID_Type));
  translationMap->insert(std::make_pair("SignalIdentityType", uci::type::accessorType::signalIdentityType));
  translationMap->insert(std::make_pair("SignalPulseWidthBaseType", uci::type::accessorType::signalPulseWidthBaseType));
  translationMap->insert(std::make_pair("SignalPulseWidthType", uci::type::accessorType::signalPulseWidthType));
  translationMap->insert(std::make_pair("SignalRelativeType", uci::type::accessorType::signalRelativeType));
  translationMap->insert(std::make_pair("SignalReportID_Type", uci::type::accessorType::signalReportID_Type));
  translationMap->insert(std::make_pair("SignalReportMT", uci::type::accessorType::signalReportMT));
  translationMap->insert(std::make_pair("SMTI_ActivityCommandType", uci::type::accessorType::sMTI_ActivityCommandType));
  translationMap->insert(std::make_pair("SMTI_ActivityMT", uci::type::accessorType::sMTI_ActivityMT));
  translationMap->insert(std::make_pair("SMTI_ActivityType", uci::type::accessorType::sMTI_ActivityType));
  translationMap->insert(std::make_pair("SMTI_CapabilityCommandType", uci::type::accessorType::sMTI_CapabilityCommandType));
  translationMap->insert(std::make_pair("SMTI_CapabilityMDT", uci::type::accessorType::sMTI_CapabilityMDT));
  translationMap->insert(std::make_pair("SMTI_CapabilityMT", uci::type::accessorType::sMTI_CapabilityMT));
  translationMap->insert(std::make_pair("SMTI_CapabilityStatusMDT", uci::type::accessorType::sMTI_CapabilityStatusMDT));
  translationMap->insert(std::make_pair("SMTI_CapabilityStatusMT", uci::type::accessorType::sMTI_CapabilityStatusMT));
  translationMap->insert(std::make_pair("SMTI_CapabilityType", uci::type::accessorType::sMTI_CapabilityType));
  translationMap->insert(std::make_pair("SMTI_CollectionConstraintsType", uci::type::accessorType::sMTI_CollectionConstraintsType));
  translationMap->insert(std::make_pair("SMTI_CollectionOptionsType", uci::type::accessorType::sMTI_CollectionOptionsType));
  translationMap->insert(std::make_pair("SMTI_CommandMT", uci::type::accessorType::sMTI_CommandMT));
  translationMap->insert(std::make_pair("SMTI_CommandStatusMDT", uci::type::accessorType::sMTI_CommandStatusMDT));
  translationMap->insert(std::make_pair("SMTI_CommandStatusMT", uci::type::accessorType::sMTI_CommandStatusMT));
  translationMap->insert(std::make_pair("SMTI_SettingsCommandMDT", uci::type::accessorType::sMTI_SettingsCommandMDT));
  translationMap->insert(std::make_pair("SMTI_SettingsCommandMT", uci::type::accessorType::sMTI_SettingsCommandMT));
  translationMap->insert(std::make_pair("SMTI_SettingsCommandStatusMDT", uci::type::accessorType::sMTI_SettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("SMTI_SettingsCommandStatusMT", uci::type::accessorType::sMTI_SettingsCommandStatusMT));
  translationMap->insert(std::make_pair("SMTI_TaskBaseType", uci::type::accessorType::sMTI_TaskBaseType));
  translationMap->insert(std::make_pair("SMTI_TaskType", uci::type::accessorType::sMTI_TaskType));
  translationMap->insert(std::make_pair("SOB_C2_RecordBaseType", uci::type::accessorType::sOB_C2_RecordBaseType));
  translationMap->insert(std::make_pair("SOB_C2_RecordID_Type", uci::type::accessorType::sOB_C2_RecordID_Type));
  translationMap->insert(std::make_pair("SOB_C2_RecordMDT", uci::type::accessorType::sOB_C2_RecordMDT));
  translationMap->insert(std::make_pair("SOB_C2_RecordMT", uci::type::accessorType::sOB_C2_RecordMT));
  translationMap->insert(std::make_pair("SOB_C2_RecordType", uci::type::accessorType::sOB_C2_RecordType));
  translationMap->insert(std::make_pair("SOB_CorrelationRecordID_Type", uci::type::accessorType::sOB_CorrelationRecordID_Type));
  translationMap->insert(std::make_pair("SOB_CorrelationRecordMDT", uci::type::accessorType::sOB_CorrelationRecordMDT));
  translationMap->insert(std::make_pair("SOB_CorrelationRecordMT", uci::type::accessorType::sOB_CorrelationRecordMT));
  translationMap->insert(std::make_pair("SOB_SatelliteRecordBaseType", uci::type::accessorType::sOB_SatelliteRecordBaseType));
  translationMap->insert(std::make_pair("SOB_SatelliteRecordID_Type", uci::type::accessorType::sOB_SatelliteRecordID_Type));
  translationMap->insert(std::make_pair("SOB_SatelliteRecordMDT", uci::type::accessorType::sOB_SatelliteRecordMDT));
  translationMap->insert(std::make_pair("SOB_SatelliteRecordMT", uci::type::accessorType::sOB_SatelliteRecordMT));
  translationMap->insert(std::make_pair("SOB_SatelliteRecordType", uci::type::accessorType::sOB_SatelliteRecordType));
  translationMap->insert(std::make_pair("SpaceWeatherID_Type", uci::type::accessorType::spaceWeatherID_Type));
  translationMap->insert(std::make_pair("SpaceWeatherMT", uci::type::accessorType::spaceWeatherMT));
  translationMap->insert(std::make_pair("SpecialCodeDataLinkIdentifierType", uci::type::accessorType::specialCodeDataLinkIdentifierType));
  translationMap->insert(std::make_pair("SpecificBlueSeparationType", uci::type::accessorType::specificBlueSeparationType));
  translationMap->insert(std::make_pair("SpecificEmitterIdentityConfidenceType", uci::type::accessorType::specificEmitterIdentityConfidenceType));
  translationMap->insert(std::make_pair("SpecificEmitterIdentityType", uci::type::accessorType::specificEmitterIdentityType));
  translationMap->insert(std::make_pair("SpecificIdentityConfidenceType", uci::type::accessorType::specificIdentityConfidenceType));
  translationMap->insert(std::make_pair("SpecificIdentityType", uci::type::accessorType::specificIdentityType));
  translationMap->insert(std::make_pair("SpecificRedSeparationType", uci::type::accessorType::specificRedSeparationType));
  translationMap->insert(std::make_pair("SpecificVehicleIdentityConfidenceType", uci::type::accessorType::specificVehicleIdentityConfidenceType));
  translationMap->insert(std::make_pair("SpectralDensityReportID_Type", uci::type::accessorType::spectralDensityReportID_Type));
  translationMap->insert(std::make_pair("SpectralDensityReportMT", uci::type::accessorType::spectralDensityReportMT));
  translationMap->insert(std::make_pair("STANAG_4607_PackingPlanPET", uci::type::accessorType::sTANAG_4607_PackingPlanPET));
  translationMap->insert(std::make_pair("STANAG_4607_PackingPlanRevA_Type", uci::type::accessorType::sTANAG_4607_PackingPlanRevA_Type));
  translationMap->insert(std::make_pair("STANAG_4607_PackingPlanType", uci::type::accessorType::sTANAG_4607_PackingPlanType));
  translationMap->insert(std::make_pair("StandardIdentityConfidenceType", uci::type::accessorType::standardIdentityConfidenceType));
  translationMap->insert(std::make_pair("StandardIdentityType", uci::type::accessorType::standardIdentityType));
  translationMap->insert(std::make_pair("StateCovarianceNED_Type", uci::type::accessorType::stateCovarianceNED_Type));
  translationMap->insert(std::make_pair("StoreCarriageCapabilityStatusBaseType", uci::type::accessorType::storeCarriageCapabilityStatusBaseType));
  translationMap->insert(std::make_pair("StoreCarriageCapabilityStatusMT", uci::type::accessorType::storeCarriageCapabilityStatusMT));
  translationMap->insert(std::make_pair("StoreCarriageCapabilityStatusType", uci::type::accessorType::storeCarriageCapabilityStatusType));
  translationMap->insert(std::make_pair("StoreCarriageStatusType", uci::type::accessorType::storeCarriageStatusType));
  translationMap->insert(std::make_pair("StoreInformationBaseType", uci::type::accessorType::storeInformationBaseType));
  translationMap->insert(std::make_pair("StoreInformationType", uci::type::accessorType::storeInformationType));
  translationMap->insert(std::make_pair("StoreLoadoutConfigurationID_Type", uci::type::accessorType::storeLoadoutConfigurationID_Type));
  translationMap->insert(std::make_pair("StoreLoadoutConfigurationMT", uci::type::accessorType::storeLoadoutConfigurationMT));
  translationMap->insert(std::make_pair("StoreLoadoutItemPET", uci::type::accessorType::storeLoadoutItemPET));
  translationMap->insert(std::make_pair("StoreLoadoutItemType", uci::type::accessorType::storeLoadoutItemType));
  translationMap->insert(std::make_pair("StoreManagementCommandMT", uci::type::accessorType::storeManagementCommandMT));
  translationMap->insert(std::make_pair("StoreManagementCommandStatusMDT", uci::type::accessorType::storeManagementCommandStatusMDT));
  translationMap->insert(std::make_pair("StoreManagementCommandStatusMT", uci::type::accessorType::storeManagementCommandStatusMT));
  translationMap->insert(std::make_pair("StoreManagementCommandType", uci::type::accessorType::storeManagementCommandType));
  translationMap->insert(std::make_pair("StoreManagementReportID_Type", uci::type::accessorType::storeManagementReportID_Type));
  translationMap->insert(std::make_pair("StoreManagementReportMT", uci::type::accessorType::storeManagementReportMT));
  translationMap->insert(std::make_pair("StoreManagementStatusMDT", uci::type::accessorType::storeManagementStatusMDT));
  translationMap->insert(std::make_pair("StoreManagementStatusMT", uci::type::accessorType::storeManagementStatusMT));
  translationMap->insert(std::make_pair("StoreStatusBaseType", uci::type::accessorType::storeStatusBaseType));
  translationMap->insert(std::make_pair("StoreStatusType", uci::type::accessorType::storeStatusType));
  translationMap->insert(std::make_pair("StoreType", uci::type::accessorType::storeType));
  translationMap->insert(std::make_pair("StrikeActivityCommandType", uci::type::accessorType::strikeActivityCommandType));
  translationMap->insert(std::make_pair("StrikeActivityMT", uci::type::accessorType::strikeActivityMT));
  translationMap->insert(std::make_pair("StrikeActivityType", uci::type::accessorType::strikeActivityType));
  translationMap->insert(std::make_pair("StrikeCapabilityCommandType", uci::type::accessorType::strikeCapabilityCommandType));
  translationMap->insert(std::make_pair("StrikeCapabilityMDT", uci::type::accessorType::strikeCapabilityMDT));
  translationMap->insert(std::make_pair("StrikeCapabilityMT", uci::type::accessorType::strikeCapabilityMT));
  translationMap->insert(std::make_pair("StrikeCapabilityStatusMDT", uci::type::accessorType::strikeCapabilityStatusMDT));
  translationMap->insert(std::make_pair("StrikeCapabilityStatusMT", uci::type::accessorType::strikeCapabilityStatusMT));
  translationMap->insert(std::make_pair("StrikeCapabilityStatusType", uci::type::accessorType::strikeCapabilityStatusType));
  translationMap->insert(std::make_pair("StrikeCapabilityType", uci::type::accessorType::strikeCapabilityType));
  translationMap->insert(std::make_pair("StrikeCommandMT", uci::type::accessorType::strikeCommandMT));
  translationMap->insert(std::make_pair("StrikeCommandStatusMDT", uci::type::accessorType::strikeCommandStatusMDT));
  translationMap->insert(std::make_pair("StrikeCommandStatusMT", uci::type::accessorType::strikeCommandStatusMT));
  translationMap->insert(std::make_pair("StrikeConsentRequestMT", uci::type::accessorType::strikeConsentRequestMT));
  translationMap->insert(std::make_pair("StrikeConsentRequestStatusMDT", uci::type::accessorType::strikeConsentRequestStatusMDT));
  translationMap->insert(std::make_pair("StrikeConsentRequestStatusMT", uci::type::accessorType::strikeConsentRequestStatusMT));
  translationMap->insert(std::make_pair("StrikeConsentRequestType", uci::type::accessorType::strikeConsentRequestType));
  translationMap->insert(std::make_pair("StrikeSettingsCommandMDT", uci::type::accessorType::strikeSettingsCommandMDT));
  translationMap->insert(std::make_pair("StrikeSettingsCommandMT", uci::type::accessorType::strikeSettingsCommandMT));
  translationMap->insert(std::make_pair("StrikeSettingsCommandStatusMDT", uci::type::accessorType::strikeSettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("StrikeSettingsCommandStatusMT", uci::type::accessorType::strikeSettingsCommandStatusMT));
  translationMap->insert(std::make_pair("StrikeTaskAchievabilityAssessmentRequestType", uci::type::accessorType::strikeTaskAchievabilityAssessmentRequestType));
  translationMap->insert(std::make_pair("StrikeTaskAchievabilityAssessmentType", uci::type::accessorType::strikeTaskAchievabilityAssessmentType));
  translationMap->insert(std::make_pair("StrikeTaskWeaponType", uci::type::accessorType::strikeTaskWeaponType));
  translationMap->insert(std::make_pair("SubCapabilityID_Type", uci::type::accessorType::subCapabilityID_Type));
  translationMap->insert(std::make_pair("SubsystemBIT_CommandMDT", uci::type::accessorType::subsystemBIT_CommandMDT));
  translationMap->insert(std::make_pair("SubsystemBIT_CommandMT", uci::type::accessorType::subsystemBIT_CommandMT));
  translationMap->insert(std::make_pair("SubsystemBIT_CommandStatusMDT", uci::type::accessorType::subsystemBIT_CommandStatusMDT));
  translationMap->insert(std::make_pair("SubsystemBIT_CommandStatusMT", uci::type::accessorType::subsystemBIT_CommandStatusMT));
  translationMap->insert(std::make_pair("SubsystemBIT_ConfigurationID_Type", uci::type::accessorType::subsystemBIT_ConfigurationID_Type));
  translationMap->insert(std::make_pair("SubsystemBIT_ConfigurationMT", uci::type::accessorType::subsystemBIT_ConfigurationMT));
  translationMap->insert(std::make_pair("SubsystemBIT_StatusMT", uci::type::accessorType::subsystemBIT_StatusMT));
  translationMap->insert(std::make_pair("SubsystemCalibrationCommandMDT", uci::type::accessorType::subsystemCalibrationCommandMDT));
  translationMap->insert(std::make_pair("SubsystemCalibrationCommandMT", uci::type::accessorType::subsystemCalibrationCommandMT));
  translationMap->insert(std::make_pair("SubsystemCalibrationCommandStatusMDT", uci::type::accessorType::subsystemCalibrationCommandStatusMDT));
  translationMap->insert(std::make_pair("SubsystemCalibrationCommandStatusMT", uci::type::accessorType::subsystemCalibrationCommandStatusMT));
  translationMap->insert(std::make_pair("SubsystemCalibrationConfigurationID_Type", uci::type::accessorType::subsystemCalibrationConfigurationID_Type));
  translationMap->insert(std::make_pair("SubsystemCalibrationConfigurationMT", uci::type::accessorType::subsystemCalibrationConfigurationMT));
  translationMap->insert(std::make_pair("SubsystemCalibrationStatusMT", uci::type::accessorType::subsystemCalibrationStatusMT));
  translationMap->insert(std::make_pair("SubsystemCommandStatusBaseType", uci::type::accessorType::subsystemCommandStatusBaseType));
  translationMap->insert(std::make_pair("SubsystemConfigurationDataRequestMDT", uci::type::accessorType::subsystemConfigurationDataRequestMDT));
  translationMap->insert(std::make_pair("SubsystemConfigurationDataRequestMT", uci::type::accessorType::subsystemConfigurationDataRequestMT));
  translationMap->insert(std::make_pair("SubsystemConfigurationDataRequestStatusMDT", uci::type::accessorType::subsystemConfigurationDataRequestStatusMDT));
  translationMap->insert(std::make_pair("SubsystemConfigurationDataRequestStatusMT", uci::type::accessorType::subsystemConfigurationDataRequestStatusMT));
  translationMap->insert(std::make_pair("SubsystemConfigurationID_Type", uci::type::accessorType::subsystemConfigurationID_Type));
  translationMap->insert(std::make_pair("SubsystemConfigurationMT", uci::type::accessorType::subsystemConfigurationMT));
  translationMap->insert(std::make_pair("SubsystemEraseCommandMDT", uci::type::accessorType::subsystemEraseCommandMDT));
  translationMap->insert(std::make_pair("SubsystemEraseCommandMT", uci::type::accessorType::subsystemEraseCommandMT));
  translationMap->insert(std::make_pair("SubsystemEraseCommandStatusMDT", uci::type::accessorType::subsystemEraseCommandStatusMDT));
  translationMap->insert(std::make_pair("SubsystemEraseCommandStatusMT", uci::type::accessorType::subsystemEraseCommandStatusMT));
  translationMap->insert(std::make_pair("SubsystemExtendedStatusPET", uci::type::accessorType::subsystemExtendedStatusPET));
  translationMap->insert(std::make_pair("SubsystemID_Type", uci::type::accessorType::subsystemID_Type));
  translationMap->insert(std::make_pair("SubsystemMaintenanceCommandMDT", uci::type::accessorType::subsystemMaintenanceCommandMDT));
  translationMap->insert(std::make_pair("SubsystemMaintenanceCommandMT", uci::type::accessorType::subsystemMaintenanceCommandMT));
  translationMap->insert(std::make_pair("SubsystemMaintenanceCommandStatusMDT", uci::type::accessorType::subsystemMaintenanceCommandStatusMDT));
  translationMap->insert(std::make_pair("SubsystemMaintenanceCommandStatusMT", uci::type::accessorType::subsystemMaintenanceCommandStatusMT));
  translationMap->insert(std::make_pair("SubsystemMaintenanceConfigurationID_Type", uci::type::accessorType::subsystemMaintenanceConfigurationID_Type));
  translationMap->insert(std::make_pair("SubsystemMaintenanceConfigurationMT", uci::type::accessorType::subsystemMaintenanceConfigurationMT));
  translationMap->insert(std::make_pair("SubsystemMaintenanceID_Type", uci::type::accessorType::subsystemMaintenanceID_Type));
  translationMap->insert(std::make_pair("SubsystemMaintenanceStatusMT", uci::type::accessorType::subsystemMaintenanceStatusMT));
  translationMap->insert(std::make_pair("SubsystemMaintenanceTestCommandPET", uci::type::accessorType::subsystemMaintenanceTestCommandPET));
  translationMap->insert(std::make_pair("SubsystemMaintenanceTestCommandType", uci::type::accessorType::subsystemMaintenanceTestCommandType));
  translationMap->insert(std::make_pair("SubsystemMaintenanceTestPET", uci::type::accessorType::subsystemMaintenanceTestPET));
  translationMap->insert(std::make_pair("SubsystemMaintenanceTestResultPET", uci::type::accessorType::subsystemMaintenanceTestResultPET));
  translationMap->insert(std::make_pair("SubsystemMaintenanceTestResultType", uci::type::accessorType::subsystemMaintenanceTestResultType));
  translationMap->insert(std::make_pair("SubsystemMaintenanceTestType", uci::type::accessorType::subsystemMaintenanceTestType));
  translationMap->insert(std::make_pair("SubsystemSettingsCommandMDT", uci::type::accessorType::subsystemSettingsCommandMDT));
  translationMap->insert(std::make_pair("SubsystemSettingsCommandMT", uci::type::accessorType::subsystemSettingsCommandMT));
  translationMap->insert(std::make_pair("SubsystemSettingsCommandStatusMDT", uci::type::accessorType::subsystemSettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("SubsystemSettingsCommandStatusMT", uci::type::accessorType::subsystemSettingsCommandStatusMT));
  translationMap->insert(std::make_pair("SubsystemStateCommandMDT", uci::type::accessorType::subsystemStateCommandMDT));
  translationMap->insert(std::make_pair("SubsystemStateCommandMT", uci::type::accessorType::subsystemStateCommandMT));
  translationMap->insert(std::make_pair("SubsystemStateCommandStatusMDT", uci::type::accessorType::subsystemStateCommandStatusMDT));
  translationMap->insert(std::make_pair("SubsystemStateCommandStatusMT", uci::type::accessorType::subsystemStateCommandStatusMT));
  translationMap->insert(std::make_pair("SubsystemStatusDataRequestMDT", uci::type::accessorType::subsystemStatusDataRequestMDT));
  translationMap->insert(std::make_pair("SubsystemStatusDataRequestMT", uci::type::accessorType::subsystemStatusDataRequestMT));
  translationMap->insert(std::make_pair("SubsystemStatusDataRequestStatusMDT", uci::type::accessorType::subsystemStatusDataRequestStatusMDT));
  translationMap->insert(std::make_pair("SubsystemStatusDataRequestStatusMT", uci::type::accessorType::subsystemStatusDataRequestStatusMT));
  translationMap->insert(std::make_pair("SubsystemStatusDetailedDataRequestMDT", uci::type::accessorType::subsystemStatusDetailedDataRequestMDT));
  translationMap->insert(std::make_pair("SubsystemStatusDetailedDataRequestMT", uci::type::accessorType::subsystemStatusDetailedDataRequestMT));
  translationMap->insert(std::make_pair("SubsystemStatusDetailedDataRequestStatusMDT", uci::type::accessorType::subsystemStatusDetailedDataRequestStatusMDT));
  translationMap->insert(std::make_pair("SubsystemStatusDetailedDataRequestStatusMT", uci::type::accessorType::subsystemStatusDetailedDataRequestStatusMT));
  translationMap->insert(std::make_pair("SubsystemStatusDetailedMT", uci::type::accessorType::subsystemStatusDetailedMT));
  translationMap->insert(std::make_pair("SubsystemStatusMT", uci::type::accessorType::subsystemStatusMT));
  translationMap->insert(std::make_pair("SubsystemStreamMT", uci::type::accessorType::subsystemStreamMT));
  translationMap->insert(std::make_pair("SupportCapabilityCommandBaseType", uci::type::accessorType::supportCapabilityCommandBaseType));
  translationMap->insert(std::make_pair("SupportCapabilityCommandStatusBaseType", uci::type::accessorType::supportCapabilityCommandStatusBaseType));
  translationMap->insert(std::make_pair("SupportCapabilityID_Type", uci::type::accessorType::supportCapabilityID_Type));
  translationMap->insert(std::make_pair("SupportCapabilityStatusBaseType", uci::type::accessorType::supportCapabilityStatusBaseType));
  translationMap->insert(std::make_pair("SupportedResolutionID_Type", uci::type::accessorType::supportedResolutionID_Type));
  translationMap->insert(std::make_pair("SurvivabilityRiskLevelID_Type", uci::type::accessorType::survivabilityRiskLevelID_Type));
  translationMap->insert(std::make_pair("SurvivabilityRiskLevelMT", uci::type::accessorType::survivabilityRiskLevelMT));
  translationMap->insert(std::make_pair("SystemDeploymentActivityMT", uci::type::accessorType::systemDeploymentActivityMT));
  translationMap->insert(std::make_pair("SystemDeploymentActivityType", uci::type::accessorType::systemDeploymentActivityType));
  translationMap->insert(std::make_pair("SystemDeploymentCapabilityMDT", uci::type::accessorType::systemDeploymentCapabilityMDT));
  translationMap->insert(std::make_pair("SystemDeploymentCapabilityMT", uci::type::accessorType::systemDeploymentCapabilityMT));
  translationMap->insert(std::make_pair("SystemDeploymentCapabilityStatusMDT", uci::type::accessorType::systemDeploymentCapabilityStatusMDT));
  translationMap->insert(std::make_pair("SystemDeploymentCapabilityStatusMT", uci::type::accessorType::systemDeploymentCapabilityStatusMT));
  translationMap->insert(std::make_pair("SystemDeploymentCapabilityStatusType", uci::type::accessorType::systemDeploymentCapabilityStatusType));
  translationMap->insert(std::make_pair("SystemDeploymentCapabilityType", uci::type::accessorType::systemDeploymentCapabilityType));
  translationMap->insert(std::make_pair("SystemDeploymentTaskBaseType", uci::type::accessorType::systemDeploymentTaskBaseType));
  translationMap->insert(std::make_pair("SystemDeploymentTaskType", uci::type::accessorType::systemDeploymentTaskType));
  translationMap->insert(std::make_pair("SystemEphemerisRequestParametersType", uci::type::accessorType::systemEphemerisRequestParametersType));
  translationMap->insert(std::make_pair("SystemEstimationRequestMDT", uci::type::accessorType::systemEstimationRequestMDT));
  translationMap->insert(std::make_pair("SystemEstimationRequestMT", uci::type::accessorType::systemEstimationRequestMT));
  translationMap->insert(std::make_pair("SystemEstimationRequestStatusMDT", uci::type::accessorType::systemEstimationRequestStatusMDT));
  translationMap->insert(std::make_pair("SystemEstimationRequestStatusMT", uci::type::accessorType::systemEstimationRequestStatusMT));
  translationMap->insert(std::make_pair("SystemID_Type", uci::type::accessorType::systemID_Type));
  translationMap->insert(std::make_pair("SystemIdentityType", uci::type::accessorType::systemIdentityType));
  translationMap->insert(std::make_pair("SystemManagementRequestMDT", uci::type::accessorType::systemManagementRequestMDT));
  translationMap->insert(std::make_pair("SystemManagementRequestMT", uci::type::accessorType::systemManagementRequestMT));
  translationMap->insert(std::make_pair("SystemManagementRequestStatusMDT", uci::type::accessorType::systemManagementRequestStatusMDT));
  translationMap->insert(std::make_pair("SystemManagementRequestStatusMT", uci::type::accessorType::systemManagementRequestStatusMT));
  translationMap->insert(std::make_pair("SystemMetadataMT", uci::type::accessorType::systemMetadataMT));
  translationMap->insert(std::make_pair("SystemMetadataPET", uci::type::accessorType::systemMetadataPET));
  translationMap->insert(std::make_pair("SystemNotificationMDT", uci::type::accessorType::systemNotificationMDT));
  translationMap->insert(std::make_pair("SystemNotificationMT", uci::type::accessorType::systemNotificationMT));
  translationMap->insert(std::make_pair("SystemOrbitalElementSetID_Type", uci::type::accessorType::systemOrbitalElementSetID_Type));
  translationMap->insert(std::make_pair("SystemOrbitalElementSetMDT", uci::type::accessorType::systemOrbitalElementSetMDT));
  translationMap->insert(std::make_pair("SystemOrbitalElementSetMT", uci::type::accessorType::systemOrbitalElementSetMT));
  translationMap->insert(std::make_pair("SystemOrbitalElementSetRequestMDT", uci::type::accessorType::systemOrbitalElementSetRequestMDT));
  translationMap->insert(std::make_pair("SystemOrbitalElementSetRequestMT", uci::type::accessorType::systemOrbitalElementSetRequestMT));
  translationMap->insert(std::make_pair("SystemOrbitalElementSetRequestStatusMDT", uci::type::accessorType::systemOrbitalElementSetRequestStatusMDT));
  translationMap->insert(std::make_pair("SystemOrbitalElementSetRequestStatusMT", uci::type::accessorType::systemOrbitalElementSetRequestStatusMT));
  translationMap->insert(std::make_pair("SystemOrbitalElementSetType", uci::type::accessorType::systemOrbitalElementSetType));
  translationMap->insert(std::make_pair("SystemOrbitalEphemerisID_Type", uci::type::accessorType::systemOrbitalEphemerisID_Type));
  translationMap->insert(std::make_pair("SystemOrbitalEphemerisMDT", uci::type::accessorType::systemOrbitalEphemerisMDT));
  translationMap->insert(std::make_pair("SystemOrbitalEphemerisMT", uci::type::accessorType::systemOrbitalEphemerisMT));
  translationMap->insert(std::make_pair("SystemOrbitalEphemerisRequestMDT", uci::type::accessorType::systemOrbitalEphemerisRequestMDT));
  translationMap->insert(std::make_pair("SystemOrbitalEphemerisRequestMT", uci::type::accessorType::systemOrbitalEphemerisRequestMT));
  translationMap->insert(std::make_pair("SystemOrbitalEphemerisRequestStatusMDT", uci::type::accessorType::systemOrbitalEphemerisRequestStatusMDT));
  translationMap->insert(std::make_pair("SystemOrbitalEphemerisRequestStatusMT", uci::type::accessorType::systemOrbitalEphemerisRequestStatusMT));
  translationMap->insert(std::make_pair("SystemOrbitalEphemerisType", uci::type::accessorType::systemOrbitalEphemerisType));
  translationMap->insert(std::make_pair("SystemOrbitalPositionReportMT", uci::type::accessorType::systemOrbitalPositionReportMT));
  translationMap->insert(std::make_pair("SystemOrbitalVCM_ID_Type", uci::type::accessorType::systemOrbitalVCM_ID_Type));
  translationMap->insert(std::make_pair("SystemOrbitalVCM_MDT", uci::type::accessorType::systemOrbitalVCM_MDT));
  translationMap->insert(std::make_pair("SystemOrbitalVCM_MT", uci::type::accessorType::systemOrbitalVCM_MT));
  translationMap->insert(std::make_pair("SystemOrbitalVCM_RequestMDT", uci::type::accessorType::systemOrbitalVCM_RequestMDT));
  translationMap->insert(std::make_pair("SystemOrbitalVCM_RequestMT", uci::type::accessorType::systemOrbitalVCM_RequestMT));
  translationMap->insert(std::make_pair("SystemOrbitalVCM_RequestStatusMDT", uci::type::accessorType::systemOrbitalVCM_RequestStatusMDT));
  translationMap->insert(std::make_pair("SystemOrbitalVCM_RequestStatusMT", uci::type::accessorType::systemOrbitalVCM_RequestStatusMT));
  translationMap->insert(std::make_pair("SystemOrbitalVCM_Type", uci::type::accessorType::systemOrbitalVCM_Type));
  translationMap->insert(std::make_pair("SystemOrbitReportMT", uci::type::accessorType::systemOrbitReportMT));
  translationMap->insert(std::make_pair("SystemReadinessID_Type", uci::type::accessorType::systemReadinessID_Type));
  translationMap->insert(std::make_pair("SystemReadinessMDT", uci::type::accessorType::systemReadinessMDT));
  translationMap->insert(std::make_pair("SystemReadinessMT", uci::type::accessorType::systemReadinessMT));
  translationMap->insert(std::make_pair("SystemsNeededRequestMDT", uci::type::accessorType::systemsNeededRequestMDT));
  translationMap->insert(std::make_pair("SystemsNeededRequestMT", uci::type::accessorType::systemsNeededRequestMT));
  translationMap->insert(std::make_pair("SystemsNeededRequestStatusMDT", uci::type::accessorType::systemsNeededRequestStatusMDT));
  translationMap->insert(std::make_pair("SystemsNeededRequestStatusMT", uci::type::accessorType::systemsNeededRequestStatusMT));
  translationMap->insert(std::make_pair("SystemStatusMT", uci::type::accessorType::systemStatusMT));
  translationMap->insert(std::make_pair("SystemTimeAtReferenceMT", uci::type::accessorType::systemTimeAtReferenceMT));
  translationMap->insert(std::make_pair("TacticalOrderActivityMT", uci::type::accessorType::tacticalOrderActivityMT));
  translationMap->insert(std::make_pair("TacticalOrderActivityType", uci::type::accessorType::tacticalOrderActivityType));
  translationMap->insert(std::make_pair("TacticalOrderCapabilityMDT", uci::type::accessorType::tacticalOrderCapabilityMDT));
  translationMap->insert(std::make_pair("TacticalOrderCapabilityMT", uci::type::accessorType::tacticalOrderCapabilityMT));
  translationMap->insert(std::make_pair("TacticalOrderCapabilityStatusMDT", uci::type::accessorType::tacticalOrderCapabilityStatusMDT));
  translationMap->insert(std::make_pair("TacticalOrderCapabilityStatusMT", uci::type::accessorType::tacticalOrderCapabilityStatusMT));
  translationMap->insert(std::make_pair("TacticalOrderCapabilityType", uci::type::accessorType::tacticalOrderCapabilityType));
  translationMap->insert(std::make_pair("TacticalOrderTaskBaseType", uci::type::accessorType::tacticalOrderTaskBaseType));
  translationMap->insert(std::make_pair("TacticalOrderTaskType", uci::type::accessorType::tacticalOrderTaskType));
  translationMap->insert(std::make_pair("TagAssociationID_Type", uci::type::accessorType::tagAssociationID_Type));
  translationMap->insert(std::make_pair("TagAssociationMDT", uci::type::accessorType::tagAssociationMDT));
  translationMap->insert(std::make_pair("TagAssociationMT", uci::type::accessorType::tagAssociationMT));
  translationMap->insert(std::make_pair("TaskAchievabilityAssessmentPET", uci::type::accessorType::taskAchievabilityAssessmentPET));
  translationMap->insert(std::make_pair("TaskAchievabilityAssessmentRequestPET", uci::type::accessorType::taskAchievabilityAssessmentRequestPET));
  translationMap->insert(std::make_pair("TaskAllocationType", uci::type::accessorType::taskAllocationType));
  translationMap->insert(std::make_pair("TaskCancelCommandMDT", uci::type::accessorType::taskCancelCommandMDT));
  translationMap->insert(std::make_pair("TaskCancelCommandMT", uci::type::accessorType::taskCancelCommandMT));
  translationMap->insert(std::make_pair("TaskCancelCommandStatusMDT", uci::type::accessorType::taskCancelCommandStatusMDT));
  translationMap->insert(std::make_pair("TaskCancelCommandStatusMT", uci::type::accessorType::taskCancelCommandStatusMT));
  translationMap->insert(std::make_pair("TaskCapabilityCommandType", uci::type::accessorType::taskCapabilityCommandType));
  translationMap->insert(std::make_pair("TaskCommandMT", uci::type::accessorType::taskCommandMT));
  translationMap->insert(std::make_pair("TaskCommandStatusMDT", uci::type::accessorType::taskCommandStatusMDT));
  translationMap->insert(std::make_pair("TaskCommandStatusMT", uci::type::accessorType::taskCommandStatusMT));
  translationMap->insert(std::make_pair("TaskExecutionApprovalStatusMDT", uci::type::accessorType::taskExecutionApprovalStatusMDT));
  translationMap->insert(std::make_pair("TaskExecutionApprovalStatusMT", uci::type::accessorType::taskExecutionApprovalStatusMT));
  translationMap->insert(std::make_pair("TaskID_Type", uci::type::accessorType::taskID_Type));
  translationMap->insert(std::make_pair("TaskMT", uci::type::accessorType::taskMT));
  translationMap->insert(std::make_pair("TaskPlanApprovalStatusMT", uci::type::accessorType::taskPlanApprovalStatusMT));
  translationMap->insert(std::make_pair("TaskPlanCommandID_Type", uci::type::accessorType::taskPlanCommandID_Type));
  translationMap->insert(std::make_pair("TaskPlanCommandMT", uci::type::accessorType::taskPlanCommandMT));
  translationMap->insert(std::make_pair("TaskPlanCommandStatusMT", uci::type::accessorType::taskPlanCommandStatusMT));
  translationMap->insert(std::make_pair("TaskPlanExecutionStatusMT", uci::type::accessorType::taskPlanExecutionStatusMT));
  translationMap->insert(std::make_pair("TaskPlanID_Type", uci::type::accessorType::taskPlanID_Type));
  translationMap->insert(std::make_pair("TaskPlanInputsType", uci::type::accessorType::taskPlanInputsType));
  translationMap->insert(std::make_pair("TaskPlanMT", uci::type::accessorType::taskPlanMT));
  translationMap->insert(std::make_pair("TaskPlanningResultType", uci::type::accessorType::taskPlanningResultType));
  translationMap->insert(std::make_pair("TaskPlanningStatusMDT", uci::type::accessorType::taskPlanningStatusMDT));
  translationMap->insert(std::make_pair("TaskPlanningStatusMT", uci::type::accessorType::taskPlanningStatusMT));
  translationMap->insert(std::make_pair("TaskPlanProcessDescriptionType", uci::type::accessorType::taskPlanProcessDescriptionType));
  translationMap->insert(std::make_pair("TaskPlanStatusMT", uci::type::accessorType::taskPlanStatusMT));
  translationMap->insert(std::make_pair("TaskPlanValidationCommandMDT", uci::type::accessorType::taskPlanValidationCommandMDT));
  translationMap->insert(std::make_pair("TaskPlanValidationCommandMT", uci::type::accessorType::taskPlanValidationCommandMT));
  translationMap->insert(std::make_pair("TaskPlanValidationCommandStatusMDT", uci::type::accessorType::taskPlanValidationCommandStatusMDT));
  translationMap->insert(std::make_pair("TaskPlanValidationCommandStatusMT", uci::type::accessorType::taskPlanValidationCommandStatusMT));
  translationMap->insert(std::make_pair("TaskPlanValidationID_Type", uci::type::accessorType::taskPlanValidationID_Type));
  translationMap->insert(std::make_pair("TaskPlanValidationInputsType", uci::type::accessorType::taskPlanValidationInputsType));
  translationMap->insert(std::make_pair("TaskPlanValidationMT", uci::type::accessorType::taskPlanValidationMT));
  translationMap->insert(std::make_pair("TaskStatusMDT", uci::type::accessorType::taskStatusMDT));
  translationMap->insert(std::make_pair("TaskStatusMT", uci::type::accessorType::taskStatusMT));
  translationMap->insert(std::make_pair("TemperatureStatusType", uci::type::accessorType::temperatureStatusType));
  translationMap->insert(std::make_pair("ThreatAssessmentRequestType", uci::type::accessorType::threatAssessmentRequestType));
  translationMap->insert(std::make_pair("TimeAndPolarDataType", uci::type::accessorType::timeAndPolarDataType));
  translationMap->insert(std::make_pair("TimeAndPolarRecordType", uci::type::accessorType::timeAndPolarRecordType));
  translationMap->insert(std::make_pair("TimedZoneType", uci::type::accessorType::timedZoneType));
  translationMap->insert(std::make_pair("TLE_BaseType", uci::type::accessorType::tLE_BaseType));
  translationMap->insert(std::make_pair("TLE_Type", uci::type::accessorType::tLE_Type));
  translationMap->insert(std::make_pair("TLE_WithParametersType", uci::type::accessorType::tLE_WithParametersType));
  translationMap->insert(std::make_pair("TrackingOpZoneFilterAreaType", uci::type::accessorType::trackingOpZoneFilterAreaType));
  translationMap->insert(std::make_pair("TrackOptionsID_Type", uci::type::accessorType::trackOptionsID_Type));
  translationMap->insert(std::make_pair("TurretCommandMT", uci::type::accessorType::turretCommandMT));
  translationMap->insert(std::make_pair("TurretCommandStatusMDT", uci::type::accessorType::turretCommandStatusMDT));
  translationMap->insert(std::make_pair("TurretCommandStatusMT", uci::type::accessorType::turretCommandStatusMT));
  translationMap->insert(std::make_pair("TurretCommandType", uci::type::accessorType::turretCommandType));
  translationMap->insert(std::make_pair("TurretReportID_Type", uci::type::accessorType::turretReportID_Type));
  translationMap->insert(std::make_pair("TurretReportMT", uci::type::accessorType::turretReportMT));
  translationMap->insert(std::make_pair("TurretStatusMDT", uci::type::accessorType::turretStatusMDT));
  translationMap->insert(std::make_pair("TurretStatusMT", uci::type::accessorType::turretStatusMT));
  translationMap->insert(std::make_pair("UMID_AudioID_Type", uci::type::accessorType::uMID_AudioID_Type));
  translationMap->insert(std::make_pair("UMID_DataID_Type", uci::type::accessorType::uMID_DataID_Type));
  translationMap->insert(std::make_pair("UMID_SystemID_Type", uci::type::accessorType::uMID_SystemID_Type));
  translationMap->insert(std::make_pair("UMID_VideoID_Type", uci::type::accessorType::uMID_VideoID_Type));
  translationMap->insert(std::make_pair("UnallocatedReasonType", uci::type::accessorType::unallocatedReasonType));
  translationMap->insert(std::make_pair("UnitID_Type", uci::type::accessorType::unitID_Type));
  translationMap->insert(std::make_pair("UnitVectorType", uci::type::accessorType::unitVectorType));
  translationMap->insert(std::make_pair("UnsignedIntegerMinMaxType", uci::type::accessorType::unsignedIntegerMinMaxType));
  translationMap->insert(std::make_pair("ValidationCommandBaseType", uci::type::accessorType::validationCommandBaseType));
  translationMap->insert(std::make_pair("ValidationCommandStatusBaseType", uci::type::accessorType::validationCommandStatusBaseType));
  translationMap->insert(std::make_pair("ValveDataStatusType", uci::type::accessorType::valveDataStatusType));
  translationMap->insert(std::make_pair("VehicleConfigurationType", uci::type::accessorType::vehicleConfigurationType));
  translationMap->insert(std::make_pair("VehicleIdentificationType", uci::type::accessorType::vehicleIdentificationType));
  translationMap->insert(std::make_pair("Velocity2D_Type", uci::type::accessorType::velocity2D_Type));
  translationMap->insert(std::make_pair("Velocity2D_UncertaintyType", uci::type::accessorType::velocity2D_UncertaintyType));
  translationMap->insert(std::make_pair("VersionedID_Type", uci::type::accessorType::versionedID_Type));
  translationMap->insert(std::make_pair("VideoAugmentationParametersType", uci::type::accessorType::videoAugmentationParametersType));
  translationMap->insert(std::make_pair("WeaponeeringLocationType", uci::type::accessorType::weaponeeringLocationType));
  translationMap->insert(std::make_pair("WeaponeeringStoreType", uci::type::accessorType::weaponeeringStoreType));
  translationMap->insert(std::make_pair("WeaponeeringTargetType", uci::type::accessorType::weaponeeringTargetType));
  translationMap->insert(std::make_pair("WeaponeeringType", uci::type::accessorType::weaponeeringType));
  translationMap->insert(std::make_pair("WeatherAugmentationParametersType", uci::type::accessorType::weatherAugmentationParametersType));
  translationMap->insert(std::make_pair("WeatherDatasetID_Type", uci::type::accessorType::weatherDatasetID_Type));
  translationMap->insert(std::make_pair("WeatherDatasetMDT", uci::type::accessorType::weatherDatasetMDT));
  translationMap->insert(std::make_pair("WeatherDatasetMT", uci::type::accessorType::weatherDatasetMT));
  translationMap->insert(std::make_pair("WeatherMT", uci::type::accessorType::weatherMT));
  translationMap->insert(std::make_pair("WeatherObservationMT", uci::type::accessorType::weatherObservationMT));
  translationMap->insert(std::make_pair("WeatherRadarActivityMT", uci::type::accessorType::weatherRadarActivityMT));
  translationMap->insert(std::make_pair("WeatherRadarActivityType", uci::type::accessorType::weatherRadarActivityType));
  translationMap->insert(std::make_pair("WeatherRadarCapabilityCommandType", uci::type::accessorType::weatherRadarCapabilityCommandType));
  translationMap->insert(std::make_pair("WeatherRadarCapabilityMDT", uci::type::accessorType::weatherRadarCapabilityMDT));
  translationMap->insert(std::make_pair("WeatherRadarCapabilityMT", uci::type::accessorType::weatherRadarCapabilityMT));
  translationMap->insert(std::make_pair("WeatherRadarCapabilityStatusMDT", uci::type::accessorType::weatherRadarCapabilityStatusMDT));
  translationMap->insert(std::make_pair("WeatherRadarCapabilityStatusMT", uci::type::accessorType::weatherRadarCapabilityStatusMT));
  translationMap->insert(std::make_pair("WeatherRadarCapabilityType", uci::type::accessorType::weatherRadarCapabilityType));
  translationMap->insert(std::make_pair("WeatherRadarCommandMT", uci::type::accessorType::weatherRadarCommandMT));
  translationMap->insert(std::make_pair("WeatherRadarCommandStatusMDT", uci::type::accessorType::weatherRadarCommandStatusMDT));
  translationMap->insert(std::make_pair("WeatherRadarCommandStatusMT", uci::type::accessorType::weatherRadarCommandStatusMT));
  translationMap->insert(std::make_pair("WeatherRadarObservationMT", uci::type::accessorType::weatherRadarObservationMT));
  translationMap->insert(std::make_pair("WeatherRadarSettingsCommandMDT", uci::type::accessorType::weatherRadarSettingsCommandMDT));
  translationMap->insert(std::make_pair("WeatherRadarSettingsCommandMT", uci::type::accessorType::weatherRadarSettingsCommandMT));
  translationMap->insert(std::make_pair("WeatherRadarSettingsCommandStatusMDT", uci::type::accessorType::weatherRadarSettingsCommandStatusMDT));
  translationMap->insert(std::make_pair("WeatherRadarSettingsCommandStatusMT", uci::type::accessorType::weatherRadarSettingsCommandStatusMT));
  translationMap->insert(std::make_pair("WeatherReportGridDataType", uci::type::accessorType::weatherReportGridDataType));
  translationMap->insert(std::make_pair("WorkingEOB_ID_Type", uci::type::accessorType::workingEOB_ID_Type));
  translationMap->insert(std::make_pair("WorkingEOB_MDT", uci::type::accessorType::workingEOB_MDT));
  translationMap->insert(std::make_pair("WorkingEOB_MT", uci::type::accessorType::workingEOB_MT));
  translationMap->insert(std::make_pair("WorkingEOB_RequestMDT", uci::type::accessorType::workingEOB_RequestMDT));
  translationMap->insert(std::make_pair("WorkingEOB_RequestMT", uci::type::accessorType::workingEOB_RequestMT));
  translationMap->insert(std::make_pair("WorkingEOB_RequestStatusMDT", uci::type::accessorType::workingEOB_RequestStatusMDT));
  translationMap->insert(std::make_pair("WorkingEOB_RequestStatusMT", uci::type::accessorType::workingEOB_RequestStatusMT));
  translationMap->insert(std::make_pair("WorkingSOB_ID_Type", uci::type::accessorType::workingSOB_ID_Type));
  translationMap->insert(std::make_pair("WorkingSOB_MDT", uci::type::accessorType::workingSOB_MDT));
  translationMap->insert(std::make_pair("WorkingSOB_MT", uci::type::accessorType::workingSOB_MT));
  translationMap->insert(std::make_pair("WorkingSOB_RequestMDT", uci::type::accessorType::workingSOB_RequestMDT));
  translationMap->insert(std::make_pair("WorkingSOB_RequestMT", uci::type::accessorType::workingSOB_RequestMT));
  translationMap->insert(std::make_pair("WorkingSOB_RequestStatusMDT", uci::type::accessorType::workingSOB_RequestStatusMDT));
  translationMap->insert(std::make_pair("WorkingSOB_RequestStatusMT", uci::type::accessorType::workingSOB_RequestStatusMT));
  translationMap->insert(std::make_pair("ZoneExternalType", uci::type::accessorType::zoneExternalType));
  translationMap->insert(std::make_pair("ZoneInclusionType", uci::type::accessorType::zoneInclusionType));
  translationMap->insert(std::make_pair("ZoneType", uci::type::accessorType::zoneType));
}

const DerivedTypesTranslator::TranslationMap& DerivedTypesTranslator::getTranslationMap() {
  static const TranslationMapGenerator translationMapGenerator;
  return translationMapGenerator.getMap();
}

uci::base::accessorType::AccessorType DerivedTypesTranslator::translateToAccessorType(const std::string& accessorType) {
  const auto accessorInMap = getTranslationMap().find(accessorType);
  return ((accessorInMap != getTranslationMap().end()) ? accessorInMap->second : uci::base::accessorType::null);
}

} // namespace util

} // namespace extjson_uci

