/** @file ExternalizerWrite9.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/base/ExternalizerWrite9.h"

#include <string>

#include <boost/none.hpp>
#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/AMTI_CapabilityEnum.h"
#include "extjson_uci/type/AMTI_MessageOutputsEnum.h"
#include "extjson_uci/type/AMTI_SubCapabilityEnum.h"
#include "extjson_uci/type/AO_CapabilityEnum.h"
#include "extjson_uci/type/AO_MessageOutputsEnum.h"
#include "extjson_uci/type/AS_IntegratorModeEnum.h"
#include "extjson_uci/type/AS_IntegratorStepModeEnum.h"
#include "extjson_uci/type/AS_PartialDerivativesEnum.h"
#include "extjson_uci/type/AccessEffortEnum.h"
#include "extjson_uci/type/AchievabilityEnum.h"
#include "extjson_uci/type/ActionMessageOutputsEnum.h"
#include "extjson_uci/type/ActionTypeEnum.h"
#include "extjson_uci/type/ActivityBasisEnum.h"
#include "extjson_uci/type/ActivityExecutionStatusEnum.h"
#include "extjson_uci/type/ActivityPlanPartsEnum.h"
#include "extjson_uci/type/ActivityStateEnum.h"
#include "extjson_uci/type/ActivitySubCategoryEnum.h"
#include "extjson_uci/type/ActivityTransitionEnum.h"
#include "extjson_uci/type/AirRaidStateEnum.h"
#include "extjson_uci/type/AirSampleCapabilityEnum.h"
#include "extjson_uci/type/AirSampleMessageOutputsEnum.h"
#include "extjson_uci/type/AirfieldStoresEnum.h"
#include "extjson_uci/type/AltitudeReferenceEnum.h"
#include "extjson_uci/type/AltitudeSourceEnum.h"
#include "extjson_uci/type/AmbiguityOrderingEnum.h"
#include "extjson_uci/type/AntennaTypeEnum.h"
#include "extjson_uci/type/ApproachConditionStatusEnum.h"
#include "extjson_uci/type/ApproachLightingEnum.h"
#include "extjson_uci/type/ApprovalRequirementEnum.h"
#include "extjson_uci/type/ApprovalResponseEnum.h"
#include "extjson_uci/type/ApprovalStateEnum.h"
#include "extjson_uci/type/ApprovalStatusEnum.h"
#include "extjson_uci/type/ArresterWiresEnum.h"
#include "extjson_uci/type/AssessmentStatusEnum.h"
#include "extjson_uci/type/AssessmentSuppressionEnum.h"
#include "extjson_uci/type/AssociatedAccessAssessmentInfoEnum.h"
#include "extjson_uci/type/AtmosphereModelEnum.h"
#include "extjson_uci/type/AutonomousActionStatusEnum.h"
#include "extjson_uci/type/AutopilotModeEnum.h"
#include "extjson_uci/type/BeamPowerModeEnum.h"
#include "extjson_uci/type/BeamWeightingEnum.h"
#include "extjson_uci/type/BehavioralChangeEnum.h"
#include "extjson_uci/type/BodyFaceEnum.h"
#include "extjson_uci/type/BodyReferenceEnum.h"
#include "extjson_uci/type/BrakingActionEnum.h"
#include "extjson_uci/type/COARPS_SAR_CollectionOptionsEnum.h"
#include "extjson_uci/type/COARPS_SMTI_CollectionOptionsEnum.h"
#include "extjson_uci/type/COMINT_DwellStateEnum.h"
#include "extjson_uci/type/COMINT_DwellTypeEnum.h"
#include "extjson_uci/type/COMINT_SubCapabilityEnum.h"
#include "extjson_uci/type/CSO_StateEnum.h"
#include "extjson_uci/type/CS_CapabilityEnum.h"
#include "extjson_uci/type/CS_KindEnum.h"
#include "extjson_uci/type/CS_PostureEnum.h"
#include "extjson_uci/type/CS_SensorPointingEnum.h"
#include "extjson_uci/type/CS_SensorTargetingEnum.h"
#include "extjson_uci/type/CS_SensorTypeEnum.h"
#include "extjson_uci/type/CTR_StateEnum.h"
#include "extjson_uci/type/CannotComplyEnum.h"
#include "extjson_uci/type/CapabilityAvailabilityEnum.h"
#include "extjson_uci/type/CapabilityCommandStateEnum.h"
#include "extjson_uci/type/CapabilityControlInterfacesEnum.h"
#include "extjson_uci/type/CapabilityCoverageAreaBasisEnum.h"
#include "extjson_uci/type/CapabilityCoverageAreaFactorEnum.h"
#include "extjson_uci/type/CapabilityInitiationEnum.h"
#include "extjson_uci/type/CapabilityTypeEnum.h"
#include "extjson_uci/type/CargoDeliveryCapabilityEnum.h"
#include "extjson_uci/type/CargoDeliverySubCapabilityEnum.h"
#include "extjson_uci/type/CargoPackagingEnum.h"
#include "extjson_uci/type/CelestialBodyEphemerisSourceEnum.h"
#include "extjson_uci/type/CelestialBodyNameEnum.h"
#include "extjson_uci/type/CharacterizationProductTypeEnum.h"
#include "extjson_uci/type/CharacterizationTypeEnum.h"
#include "extjson_uci/type/ClearIdentityValuesEnum.h"
#include "extjson_uci/type/ClimbOptimizationEnum.h"
#include "extjson_uci/type/CollectionObjectiveEnum.h"
#include "extjson_uci/type/CollectionPatternEnum.h"
#include "extjson_uci/type/CollectionPolicyEnum.h"
#include "extjson_uci/type/CommAcquisitionModeTypeEnum.h"
#include "extjson_uci/type/CommAllocationTransitionEnum.h"
#include "extjson_uci/type/CommAssetCategoryEnum.h"
#include "extjson_uci/type/CommAssetEstimationMessageEnum.h"
#include "extjson_uci/type/CommCDL_LinkFallbackStateEnum.h"
#include "extjson_uci/type/CommCDL_RemoteMessageProcessingEnum.h"
#include "extjson_uci/type/CommCapabilityEnum.h"
#include "extjson_uci/type/CommComsecModeTypeEnum.h"
#include "extjson_uci/type/CommComsecModeTypeRequestEnum.h"
#include "extjson_uci/type/CommConfigurationStateEnum.h"
#include "extjson_uci/type/CommConnectionCommandEnum.h"
#include "extjson_uci/type/CommConnectionStateEnum.h"
#include "extjson_uci/type/CommCountermeasureSetEnum.h"
#include "extjson_uci/type/CommDataDirectionFiltrationEnum.h"
#include "extjson_uci/type/CommDataFormatEnum.h"
#include "extjson_uci/type/CommIFDL_AcqControlEnum.h"
#include "extjson_uci/type/CommIFDL_CommModeEnum.h"
#include "extjson_uci/type/CommIFDL_FlightSizeEnum.h"
#include "extjson_uci/type/CommIFDL_TxRateEnum.h"
#include "extjson_uci/type/CommLink16EnhancedThroughputCodeRateEnum.h"
#include "extjson_uci/type/CommLink16InitialEntryGroupEnum.h"
#include "extjson_uci/type/CommLink16InterferenceProtModeEnum.h"
#include "extjson_uci/type/CommLink16RangeModeEnum.h"
#include "extjson_uci/type/CommLink16TransmitAntennaEnum.h"
#include "extjson_uci/type/CommLink16TransmitModeEnum.h"
#include "extjson_uci/type/CommLink16TxPackingLimitEnum.h"
#include "extjson_uci/type/CommLink16TxPowerSelectionEnum.h"
#include "extjson_uci/type/CommLink16_AdvanceSlotNotificationModeEnum.h"
#include "extjson_uci/type/CommLink16_PPLI_PoolEnum.h"
#include "extjson_uci/type/CommMADL_AircraftTypeEnum.h"
#include "extjson_uci/type/CommMADL_DataRateTypeEnum.h"
#include "extjson_uci/type/CommMADL_LinkStateEnum.h"
#include "extjson_uci/type/CommMADL_NetChangeOpEnum.h"
#include "extjson_uci/type/CommMADL_NetChangeStatusEnum.h"
#include "extjson_uci/type/CommMADL_NetLinkOpStateEnum.h"
#include "extjson_uci/type/CommMADL_NetLinkSearchModeEnum.h"
#include "extjson_uci/type/CommMADL_NodeDataValidityEnum.h"
#include "extjson_uci/type/CommMADL_SearchTypeEnum.h"
#include "extjson_uci/type/CommMADL_TimeSlotOE_PhaseTypeEnum.h"
#include "extjson_uci/type/CommMADL_TimeSlotTxPhaseTypeEnum.h"
#include "extjson_uci/type/CommMADL_TimeSourceEnum.h"
#include "extjson_uci/type/CommMADL_VoiceRxIndicatorTypeEnum.h"
#include "extjson_uci/type/CommModeEnum.h"
#include "extjson_uci/type/CommModulationTypeEnum.h"
#include "extjson_uci/type/CommPointingAssessmentEnum.h"
#include "extjson_uci/type/CommPointingRequestEnum.h"
#include "extjson_uci/type/CommRangeModeTypeEnum.h"
#include "extjson_uci/type/CommReceiverStateEnum.h"
#include "extjson_uci/type/CommRelayMessageOutputsEnum.h"
#include "extjson_uci/type/CommRelayStateEnum.h"
#include "extjson_uci/type/CommRequestActionEnum.h"
#include "extjson_uci/type/CommSATCOM_ServiceTypeEnum.h"
#include "extjson_uci/type/CommSINCGARS_FreqModeEnum.h"
#include "extjson_uci/type/CommSchedulingRequestApprovalStatusEnum.h"
#include "extjson_uci/type/CommSchedulingRequirementStateEnum.h"
#include "extjson_uci/type/CommSchedulingScopeEnum.h"
#include "extjson_uci/type/CommTerminalPlanActivationStateEnum.h"
#include "extjson_uci/type/CommTerminalPlanApprovalStatusEnum.h"
#include "extjson_uci/type/CommTransmitterStateEnum.h"
#include "extjson_uci/type/CommandProcessingStateEnum.h"
#include "extjson_uci/type/CommandStateEnum.h"
#include "extjson_uci/type/CommunicationsImpairmentEnum.h"
#include "extjson_uci/type/ComponentControlInterfacesEnum.h"
#include "extjson_uci/type/ComponentElementStateEnum.h"
#include "extjson_uci/type/ComponentSettingEnum.h"
#include "extjson_uci/type/ComponentStateCommandEnum.h"
#include "extjson_uci/type/ComponentStateEnum.h"
#include "extjson_uci/type/ComponentStatusRequestEnum.h"
#include "extjson_uci/type/ComponentTypeEnum.h"
#include "extjson_uci/type/ConfidenceLevelEnum.h"
#include "extjson_uci/type/ConflictStateEnum.h"
#include "extjson_uci/type/ConnectionStatusEnum.h"
#include "extjson_uci/type/ConsentEnum.h"
#include "extjson_uci/type/ConstrainedPlanIncorporationEnum.h"
#include "extjson_uci/type/ControlInterfaceEnum.h"
#include "extjson_uci/type/ControlRequestEnum.h"
#include "extjson_uci/type/ControlTypeEnum.h"
#include "extjson_uci/type/CoordinationRiskEnum.h"
#include "extjson_uci/type/CorrelationIndicatorEnum.h"
#include "extjson_uci/type/CovarianceMatrixCategoryEnum.h"
#include "extjson_uci/type/CoverageEffortEnum.h"
#include "extjson_uci/type/CrashServiceEnum.h"
#include "extjson_uci/type/CreationSourceEnum.h"
#include "extjson_uci/type/CryptoDS101_Enum.h"
#include "extjson_uci/type/CryptoKeyStatusEnum.h"
#include "extjson_uci/type/CryptoLoadStateEnum.h"
#include "extjson_uci/type/CryptoLoadTypeEnum.h"
#include "extjson_uci/type/CryptoOTAM_Enum.h"
#include "extjson_uci/type/CryptoRolloverActionEnum.h"
#include "extjson_uci/type/CryptoRolloverMethodEnum.h"
#include "extjson_uci/type/CryptoRolloverStateEnum.h"
#include "extjson_uci/type/CryptoSlotGroupStateEnum.h"
#include "extjson_uci/type/CryptoTypeEnum.h"
#include "extjson_uci/type/CyberTypeEnum.h"
#include "extjson_uci/type/DF_ModeEnum.h"
#include "extjson_uci/type/DLZ_RelationEnum.h"
#include "extjson_uci/type/DMPI_StateEnum.h"
#include "extjson_uci/type/DMPI_StoreStateEnum.h"
#include "extjson_uci/type/DVR_OperationEnum.h"
#include "extjson_uci/type/DamageCategoryEnum.h"
#include "extjson_uci/type/DamageCauseEnum.h"
#include "extjson_uci/type/DamageConfidenceEnum.h"
#include "extjson_uci/type/DamageEstimateContentsEnum.h"
#include "extjson_uci/type/DamageLevelEnum.h"
#include "extjson_uci/type/DamageObservationEnum.h"
#include "extjson_uci/type/DamageSignificanceEnum.h"
#include "extjson_uci/type/DamagedFunctionEnum.h"
#include "extjson_uci/type/DataPlanActivationStateEnum.h"
#include "extjson_uci/type/DataPlanApprovalStatusEnum.h"
#include "extjson_uci/type/DataStoreActionEnum.h"
#include "extjson_uci/type/DataUpdateRequestCategoryEnum.h"
#include "extjson_uci/type/DatalinkControlStatusEnum.h"
#include "extjson_uci/type/DefensiveJammerSystemStatusEnum.h"
#include "extjson_uci/type/DefensiveJammerSystemTypeEnum.h"
#include "extjson_uci/type/DepthContactEnum.h"
#include "extjson_uci/type/DesignationEnum.h"
#include "extjson_uci/type/DestinationCategoryEnum.h"
#include "extjson_uci/type/DisseminationStatusEnum.h"
#include "extjson_uci/type/DoorCommandEnum.h"
#include "extjson_uci/type/DoorStateEnum.h"
#include "extjson_uci/type/DownloadPriorityEnum.h"
#include "extjson_uci/type/DrogueCommandEnum.h"
#include "extjson_uci/type/DropRestrictionEnum.h"
#include "extjson_uci/type/DynamicImageProcessingEnum.h"
#include "extjson_uci/type/EA_ActivationEnum.h"
#include "extjson_uci/type/EA_IndicatorEnum.h"
#include "extjson_uci/type/EA_MessageOutputsEnum.h"
#include "extjson_uci/type/EA_ModeEnum.h"
#include "extjson_uci/type/EA_PointingEnum.h"
#include "extjson_uci/type/EOB_CorrelationTypeEnum.h"
#include "extjson_uci/type/EP_CommandedStateEnum.h"
#include "extjson_uci/type/EP_StateEnum.h"
#include "extjson_uci/type/EP_StatusEnum.h"
#include "extjson_uci/type/ESM_ActivationEnum.h"
#include "extjson_uci/type/ESM_DwellStateEnum.h"
#include "extjson_uci/type/ESM_DwellTypeEnum.h"
#include "extjson_uci/type/ESM_MessageOutputsEnum.h"
#include "extjson_uci/type/ESM_SubCapabilityEnum.h"
#include "extjson_uci/type/EW_FixEnum.h"
#include "extjson_uci/type/EW_MeasurementEnum.h"
#include "extjson_uci/type/EW_ParameterSourceEnum.h"
#include "extjson_uci/type/EffectMessageOutputsEnum.h"
#include "extjson_uci/type/EffectTypeEnum.h"
#include "extjson_uci/type/ElectronicWarfareRelationshipEnum.h"
#include "extjson_uci/type/ElevationScanStabilizationEnum.h"
#include "extjson_uci/type/ElevationVisibilityEnum.h"
#include "extjson_uci/type/EmconLevelEnum.h"
#include "extjson_uci/type/EmissionBalanceEnum.h"
#include "extjson_uci/type/EmitterUrgencyEnum.h"
#include "extjson_uci/type/EntityBasingEnum.h"
#include "extjson_uci/type/EntityDropPolicyEnum.h"
#include "extjson_uci/type/EntityFusionEligibilityEnum.h"
#include "extjson_uci/type/EntityFusionSimpleEligibilityEnum.h"
#include "extjson_uci/type/EntityManagementRequestAuthorityEnum.h"
#include "extjson_uci/type/EntityRemoveReasonEnum.h"
#include "extjson_uci/type/EntitySourceEnum.h"
#include "extjson_uci/type/EntityStatusEnum.h"
#include "extjson_uci/type/EnvironmentEnum.h"
#include "extjson_uci/type/EnvironmentPairingEnum.h"
#include "extjson_uci/type/EphemerisTypeEnum.h"
#include "extjson_uci/type/EqualityExpressionEnum.h"
#include "extjson_uci/type/EquipmentConditionEnum.h"
#include "extjson_uci/type/EstimationMessageEnum.h"
#include "extjson_uci/type/EventSeverityEnum.h"
#include "extjson_uci/type/ExerciseIdentityEnum.h"
#include "extjson_uci/type/ExternalCommandExecutionStateEnum.h"
#include "extjson_uci/type/ExternalDataRequestEnum.h"
#include "extjson_uci/type/FMOP_Enum.h"
#include "extjson_uci/type/FOR_Enum.h"
#include "extjson_uci/type/FailureGuidanceEnum.h"
#include "extjson_uci/type/FaultSeverityEnum.h"
#include "extjson_uci/type/FaultStateEnum.h"
#include "extjson_uci/type/FieldOfRegardTypeEnum.h"
#include "extjson_uci/type/FileDeclassificationEnum.h"
#include "extjson_uci/type/FileTypeEnum.h"
#include "extjson_uci/type/FilteredUnfilteredEnum.h"
#include "extjson_uci/type/FixedPointingEnum.h"
#include "extjson_uci/type/FlightCapabilityEnum.h"
#include "extjson_uci/type/FlightDeckStatusEnum.h"
#include "extjson_uci/type/FlightStageEnum.h"
#include "extjson_uci/type/FocalPlaneArrayNonUniformityCorrectionOffsetEnum.h"
#include "extjson_uci/type/FocalPlaneArrayNonUniformityCorrectionReferenceEnum.h"
#include "extjson_uci/type/FrameOriginEnum.h"
#include "extjson_uci/type/FrequencyAgilityPatternEnum.h"
#include "extjson_uci/type/FrequencyModulationVariationEnum.h"
#include "extjson_uci/type/FrequencyPatternPeriodicityEnum.h"
#include "extjson_uci/type/FrequencySwitchingEnum.h"
#include "extjson_uci/type/TLE_BaseType.h"
#include "extjson_uci/type/TLE_Type.h"
#include "extjson_uci/type/TLE_WithParametersType.h"
#include "extjson_uci/type/TaskCommandMDT.h"
#include "extjson_uci/type/TaskCommandMT.h"
#include "extjson_uci/type/TaskCommandStatusMDT.h"
#include "extjson_uci/type/TaskCommandStatusMT.h"
#include "extjson_uci/type/TaskCommandType.h"
#include "extjson_uci/type/TaskExecutionApprovalStatusMDT.h"
#include "extjson_uci/type/TaskExecutionApprovalStatusMT.h"
#include "extjson_uci/type/TaskID_InclusionType.h"
#include "extjson_uci/type/TaskID_Type.h"
#include "extjson_uci/type/TaskMDT.h"
#include "extjson_uci/type/TaskMT.h"
#include "extjson_uci/type/TaskPlanActivationType.h"
#include "extjson_uci/type/TaskPlanApprovalStatusMDT.h"
#include "extjson_uci/type/TaskPlanApprovalStatusMT.h"
#include "extjson_uci/type/TaskPlanCommandID_ChoiceType.h"
#include "extjson_uci/type/TaskPlanCommandID_Type.h"
#include "extjson_uci/type/TaskPlanCommandMDT.h"
#include "extjson_uci/type/TaskPlanCommandMT.h"
#include "extjson_uci/type/TaskPlanCommandStatusMDT.h"
#include "extjson_uci/type/TaskPlanCommandStatusMT.h"
#include "extjson_uci/type/TaskPlanConstraintType.h"
#include "extjson_uci/type/TaskPlanExecutionStateType.h"
#include "extjson_uci/type/TaskPlanExecutionStatusMDT.h"
#include "extjson_uci/type/TaskPlanExecutionStatusMT.h"
#include "extjson_uci/type/TaskPlanID_Type.h"
#include "extjson_uci/type/TaskPlanInputsType.h"
#include "extjson_uci/type/TaskPlanInvalidType.h"
#include "extjson_uci/type/TaskPlanMDT.h"
#include "extjson_uci/type/TaskPlanMT.h"
#include "extjson_uci/type/TaskPlanPartsType.h"
#include "extjson_uci/type/TaskPlanProcessDescriptionType.h"
#include "extjson_uci/type/TaskPlanProcessType.h"
#include "extjson_uci/type/TaskPlanStatusMDT.h"
#include "extjson_uci/type/TaskPlanStatusMT.h"
#include "extjson_uci/type/TaskPlanType.h"
#include "extjson_uci/type/TaskPlanValidationCommandMDT.h"
#include "extjson_uci/type/TaskPlanValidationCommandMT.h"
#include "extjson_uci/type/TaskPlanValidationCommandStatusMDT.h"
#include "extjson_uci/type/TaskPlanValidationCommandStatusMT.h"
#include "extjson_uci/type/TaskPlanValidationID_Type.h"
#include "extjson_uci/type/TaskPlanValidationInputsType.h"
#include "extjson_uci/type/TaskPlanValidationMDT.h"
#include "extjson_uci/type/TaskPlanValidationMT.h"
#include "extjson_uci/type/TaskPlanningResultType.h"
#include "extjson_uci/type/TaskPlanningStatusMDT.h"
#include "extjson_uci/type/TaskPlanningStatusMT.h"
#include "extjson_uci/type/TaskResponseType.h"
#include "extjson_uci/type/TaskStatusMDT.h"
#include "extjson_uci/type/TaskStatusMT.h"
#include "extjson_uci/type/TaskType.h"
#include "extjson_uci/type/TemperatureRangeType.h"
#include "extjson_uci/type/TemperatureStatusType.h"
#include "extjson_uci/type/ThirdBodyGravityType.h"
#include "extjson_uci/type/ThreadConfigurationRF_Type.h"
#include "extjson_uci/type/ThreatAssessmentMetricsType.h"
#include "extjson_uci/type/ThreatAssessmentProbabilityType.h"
#include "extjson_uci/type/ThreatAssessmentRequestType.h"
#include "extjson_uci/type/ThreatAssessmentSystemType.h"
#include "extjson_uci/type/ThreatExposureProbabilityType.h"
#include "extjson_uci/type/ThreatExposureType.h"
#include "extjson_uci/type/ThreatNominationAssessmentDataType.h"
#include "extjson_uci/type/ThreatNominationAssessmentRequestType.h"
#include "extjson_uci/type/ThreatNominationAssessmentType.h"
#include "extjson_uci/type/ThreatNominationResultType.h"
#include "extjson_uci/type/ThreatVulnerabilityByCapabilityType.h"
#include "extjson_uci/type/ThreatZoneType.h"
#include "extjson_uci/type/ThresholdOffOrbitTriggerDataType.h"
#include "extjson_uci/type/ThresholdOffRouteTriggerDataType.h"
#include "extjson_uci/type/ThresholdVulnerabilityType.h"
#include "extjson_uci/type/ThumbnailType.h"
#include "extjson_uci/type/TimeAndPolarDataType.h"
#include "extjson_uci/type/TimeAndPolarRecordType.h"
#include "extjson_uci/type/TimeCoverageType.h"
#include "extjson_uci/type/TimeErrorType.h"
#include "extjson_uci/type/TimeFunctionType.h"
#include "extjson_uci/type/TimeWindowType.h"
#include "extjson_uci/type/TimedZoneType.h"
#include "extjson_uci/type/TimingConstraintsType.h"
#include "extjson_uci/type/TraceabilityType.h"
#include "extjson_uci/type/TrackNumberOrEntityType.h"
#include "extjson_uci/type/TrackOptionsID_Type.h"
#include "extjson_uci/type/TrackingOpZoneFilterAreaType.h"
#include "extjson_uci/type/TransceiverType.h"
#include "extjson_uci/type/TransitionStatusType.h"
#include "extjson_uci/type/TurnGeometryChoiceType.h"
#include "extjson_uci/type/TurnPointType.h"
#include "extjson_uci/type/TurretCommandChoiceType.h"
#include "extjson_uci/type/TurretCommandMDT.h"
#include "extjson_uci/type/TurretCommandMT.h"
#include "extjson_uci/type/TurretCommandPositionType.h"
#include "extjson_uci/type/TurretCommandStatusMDT.h"
#include "extjson_uci/type/TurretCommandStatusMT.h"
#include "extjson_uci/type/TurretCommandType.h"
#include "extjson_uci/type/TurretReportDynamicPointingType.h"
#include "extjson_uci/type/TurretReportID_Type.h"
#include "extjson_uci/type/TurretReportMDT.h"
#include "extjson_uci/type/TurretReportMT.h"
#include "extjson_uci/type/TurretReportPointingType.h"
#include "extjson_uci/type/TurretStatusMDT.h"
#include "extjson_uci/type/TurretStatusMT.h"
#include "extjson_uci/type/TxBeamType.h"
#include "extjson_uci/type/UMID_AudioID_Type.h"
#include "extjson_uci/type/UMID_DataID_Type.h"
#include "extjson_uci/type/UMID_SystemID_Type.h"
#include "extjson_uci/type/UMID_VideoID_Type.h"
#include "extjson_uci/type/UnachievableRequirementType.h"
#include "extjson_uci/type/UnallocatedReasonType.h"
#include "extjson_uci/type/UncertaintyType.h"
#include "extjson_uci/type/UnitID_Type.h"
#include "extjson_uci/type/UnitIdentityType.h"
#include "extjson_uci/type/UnitType.h"
#include "extjson_uci/type/UnitVectorType.h"
#include "extjson_uci/type/UnsignedIntegerMinMaxType.h"
#include "extjson_uci/type/UserLinkStatusType.h"
#include "extjson_uci/type/VCM_DataType.h"
#include "extjson_uci/type/VCM_DragParametersType.h"
#include "extjson_uci/type/VCM_ForceModelOptionsType.h"
#include "extjson_uci/type/VCM_IntegratorSettingsType.h"
#include "extjson_uci/type/VCM_PropagatorType.h"
#include "extjson_uci/type/ValidationCommandBaseType.h"
#include "extjson_uci/type/ValidationCommandStatusBaseType.h"
#include "extjson_uci/type/ValidatorType.h"
#include "extjson_uci/type/ValveDataStatusType.h"
#include "extjson_uci/type/VariableSubsystemsType.h"
#include "extjson_uci/type/VehicleCommandDataType.h"
#include "extjson_uci/type/VehicleConfigurationType.h"
#include "extjson_uci/type/VehicleIdentificationType.h"
#include "extjson_uci/type/VehicleThreatAssessmentDataType.h"
#include "extjson_uci/type/VehicleThreatAssessmentRequestType.h"
#include "extjson_uci/type/VehicleThreatAssessmentType.h"
#include "extjson_uci/type/VehicleUniqueIdentifierType.h"
#include "extjson_uci/type/Velocity2D_Type.h"
#include "extjson_uci/type/Velocity2D_UncertaintyType.h"
#include "extjson_uci/type/Velocity3D_Type.h"
#include "extjson_uci/type/VelocityAccelerationCovarianceType.h"
#include "extjson_uci/type/VelocityOrientationCovarianceType.h"
#include "extjson_uci/type/VelocityVelocityCovarianceCartesianType.h"
#include "extjson_uci/type/VelocityVelocityCovarianceType.h"
#include "extjson_uci/type/VerboseStatusType.h"
#include "extjson_uci/type/VersionedID_Type.h"
#include "extjson_uci/type/VideoAugmentationParametersType.h"
#include "extjson_uci/type/VideoEncoderOutputType.h"
#include "extjson_uci/type/VideoEncoderSettingsType.h"
#include "extjson_uci/type/VideoOutputSettingsType.h"
#include "extjson_uci/type/VisMagParamsType.h"
#include "extjson_uci/type/VisualMagnitudeLimitsType.h"
#include "extjson_uci/type/VisualMagnitudeWithDeviationType.h"
#include "extjson_uci/type/VoiceControlType.h"
#include "extjson_uci/type/VolumeChoiceType.h"
#include "extjson_uci/type/VulnerabilityLevelsCombinedType.h"
#include "extjson_uci/type/VulnerabilityLevelsType.h"
#include "extjson_uci/type/VulnerabilityMetricsType.h"
#include "extjson_uci/type/WayPointPointChoiceType.h"
#include "extjson_uci/type/WayPointType.h"
#include "extjson_uci/type/WeaponEffectIndicatorsType.h"
#include "extjson_uci/type/WeaponRestrictionType.h"
#include "extjson_uci/type/WeaponStoreType.h"
#include "extjson_uci/type/WeaponTargetPairingChoiceType.h"
#include "extjson_uci/type/WeaponeeringLocationType.h"
#include "extjson_uci/type/WeaponeeringStoreType.h"
#include "extjson_uci/type/WeaponeeringTargetInfoType.h"
#include "extjson_uci/type/WeaponeeringTargetType.h"
#include "extjson_uci/type/WeaponeeringType.h"
#include "extjson_uci/type/WeatherAreaDataType.h"
#include "extjson_uci/type/WeatherAugmentationParametersType.h"
#include "extjson_uci/type/WeatherDataType.h"
#include "extjson_uci/type/WeatherDatasetID_Type.h"
#include "extjson_uci/type/WeatherDatasetMDT.h"
#include "extjson_uci/type/WeatherDatasetMT.h"
#include "extjson_uci/type/WeatherEffectsType.h"
#include "extjson_uci/type/WeatherMDT.h"
#include "extjson_uci/type/WeatherMT.h"
#include "extjson_uci/type/WeatherObservationMDT.h"
#include "extjson_uci/type/WeatherObservationMT.h"
#include "extjson_uci/type/WeatherRadarActivityMDT.h"
#include "extjson_uci/type/WeatherRadarActivityMT.h"
#include "extjson_uci/type/WeatherRadarActivityStatusDetailType.h"
#include "extjson_uci/type/WeatherRadarActivityType.h"
#include "extjson_uci/type/WeatherRadarCapabilityCommandType.h"
#include "extjson_uci/type/WeatherRadarCapabilityMDT.h"
#include "extjson_uci/type/WeatherRadarCapabilityMT.h"
#include "extjson_uci/type/WeatherRadarCapabilityStatusMDT.h"
#include "extjson_uci/type/WeatherRadarCapabilityStatusMT.h"
#include "extjson_uci/type/WeatherRadarCapabilityType.h"
#include "extjson_uci/type/WeatherRadarCellLocationType.h"
#include "extjson_uci/type/WeatherRadarCellSizeType.h"
#include "extjson_uci/type/WeatherRadarCellType.h"
#include "extjson_uci/type/WeatherRadarCommandMDT.h"
#include "extjson_uci/type/WeatherRadarCommandMT.h"
#include "extjson_uci/type/WeatherRadarCommandStatusMDT.h"
#include "extjson_uci/type/WeatherRadarCommandStatusMT.h"
#include "extjson_uci/type/WeatherRadarCommandType.h"
#include "extjson_uci/type/WeatherRadarObservationMDT.h"
#include "extjson_uci/type/WeatherRadarObservationMT.h"
#include "extjson_uci/type/WeatherRadarOptionsType.h"
#include "extjson_uci/type/WeatherRadarSettingsCommandMDT.h"
#include "extjson_uci/type/WeatherRadarSettingsCommandMT.h"
#include "extjson_uci/type/WeatherRadarSettingsCommandStatusMDT.h"
#include "extjson_uci/type/WeatherRadarSettingsCommandStatusMT.h"
#include "extjson_uci/type/WeatherRadarTaskType.h"
#include "extjson_uci/type/WeatherReportDataType.h"
#include "extjson_uci/type/WeatherReportGridDataType.h"
#include "extjson_uci/type/WeatherReportType.h"
#include "extjson_uci/type/WeatherWarningDataType.h"
#include "extjson_uci/type/WeekdayIntervalType.h"
#include "extjson_uci/type/Wideband_SOI_ParamsType.h"
#include "extjson_uci/type/WildcardElementType.h"
#include "extjson_uci/type/WindDataChoiceType.h"
#include "extjson_uci/type/WindDataType.h"
#include "extjson_uci/type/WindMagnitudeType.h"
#include "extjson_uci/type/WorkingEOB_ID_Type.h"
#include "extjson_uci/type/WorkingEOB_MDT.h"
#include "extjson_uci/type/WorkingEOB_MT.h"
#include "extjson_uci/type/WorkingEOB_RequestMDT.h"
#include "extjson_uci/type/WorkingEOB_RequestMT.h"
#include "extjson_uci/type/WorkingEOB_RequestStatusMDT.h"
#include "extjson_uci/type/WorkingEOB_RequestStatusMT.h"
#include "extjson_uci/type/WorkingEOB_SourceID_ChoiceType.h"
#include "extjson_uci/type/WorkingSOB_ID_Type.h"
#include "extjson_uci/type/WorkingSOB_MDT.h"
#include "extjson_uci/type/WorkingSOB_MT.h"
#include "extjson_uci/type/WorkingSOB_RequestMDT.h"
#include "extjson_uci/type/WorkingSOB_RequestMT.h"
#include "extjson_uci/type/WorkingSOB_RequestStatusMDT.h"
#include "extjson_uci/type/WorkingSOB_RequestStatusMT.h"
#include "extjson_uci/type/WorkingSOB_SourceID_ChoiceType.h"
#include "extjson_uci/type/Z_ChoiceType.h"
#include "extjson_uci/type/ZoneChoiceType.h"
#include "extjson_uci/type/ZoneExternalType.h"
#include "extjson_uci/type/ZoneInclusionType.h"
#include "extjson_uci/type/ZoneType.h"
#include "extjson_uci/type/ZoneViolationTriggerDataType.h"
#include "uci/base/accessorType.h"
#include "uci/type/AMTI_CapabilityEnum.h"
#include "uci/type/AMTI_MessageOutputsEnum.h"
#include "uci/type/AMTI_SubCapabilityEnum.h"
#include "uci/type/AO_CapabilityEnum.h"
#include "uci/type/AO_MessageOutputsEnum.h"
#include "uci/type/AS_IntegratorModeEnum.h"
#include "uci/type/AS_IntegratorStepModeEnum.h"
#include "uci/type/AS_PartialDerivativesEnum.h"
#include "uci/type/AccessEffortEnum.h"
#include "uci/type/AchievabilityEnum.h"
#include "uci/type/ActionMessageOutputsEnum.h"
#include "uci/type/ActionTypeEnum.h"
#include "uci/type/ActivityBasisEnum.h"
#include "uci/type/ActivityExecutionStatusEnum.h"
#include "uci/type/ActivityPlanPartsEnum.h"
#include "uci/type/ActivityStateEnum.h"
#include "uci/type/ActivitySubCategoryEnum.h"
#include "uci/type/ActivityTransitionEnum.h"
#include "uci/type/AirRaidStateEnum.h"
#include "uci/type/AirSampleCapabilityEnum.h"
#include "uci/type/AirSampleMessageOutputsEnum.h"
#include "uci/type/AirfieldStoresEnum.h"
#include "uci/type/AltitudeReferenceEnum.h"
#include "uci/type/AltitudeSourceEnum.h"
#include "uci/type/AmbiguityOrderingEnum.h"
#include "uci/type/AntennaTypeEnum.h"
#include "uci/type/ApproachConditionStatusEnum.h"
#include "uci/type/ApproachLightingEnum.h"
#include "uci/type/ApprovalRequirementEnum.h"
#include "uci/type/ApprovalResponseEnum.h"
#include "uci/type/ApprovalStateEnum.h"
#include "uci/type/ApprovalStatusEnum.h"
#include "uci/type/ArresterWiresEnum.h"
#include "uci/type/AssessmentStatusEnum.h"
#include "uci/type/AssessmentSuppressionEnum.h"
#include "uci/type/AssociatedAccessAssessmentInfoEnum.h"
#include "uci/type/AtmosphereModelEnum.h"
#include "uci/type/AutonomousActionStatusEnum.h"
#include "uci/type/AutopilotModeEnum.h"
#include "uci/type/BeamPowerModeEnum.h"
#include "uci/type/BeamWeightingEnum.h"
#include "uci/type/BehavioralChangeEnum.h"
#include "uci/type/BodyFaceEnum.h"
#include "uci/type/BodyReferenceEnum.h"
#include "uci/type/BrakingActionEnum.h"
#include "uci/type/COARPS_SAR_CollectionOptionsEnum.h"
#include "uci/type/COARPS_SMTI_CollectionOptionsEnum.h"
#include "uci/type/COMINT_DwellStateEnum.h"
#include "uci/type/COMINT_DwellTypeEnum.h"
#include "uci/type/COMINT_SubCapabilityEnum.h"
#include "uci/type/CSO_StateEnum.h"
#include "uci/type/CS_CapabilityEnum.h"
#include "uci/type/CS_KindEnum.h"
#include "uci/type/CS_PostureEnum.h"
#include "uci/type/CS_SensorPointingEnum.h"
#include "uci/type/CS_SensorTargetingEnum.h"
#include "uci/type/CS_SensorTypeEnum.h"
#include "uci/type/CTR_StateEnum.h"
#include "uci/type/CannotComplyEnum.h"
#include "uci/type/CapabilityAvailabilityEnum.h"
#include "uci/type/CapabilityCommandStateEnum.h"
#include "uci/type/CapabilityControlInterfacesEnum.h"
#include "uci/type/CapabilityCoverageAreaBasisEnum.h"
#include "uci/type/CapabilityCoverageAreaFactorEnum.h"
#include "uci/type/CapabilityInitiationEnum.h"
#include "uci/type/CapabilityTypeEnum.h"
#include "uci/type/CargoDeliveryCapabilityEnum.h"
#include "uci/type/CargoDeliverySubCapabilityEnum.h"
#include "uci/type/CargoPackagingEnum.h"
#include "uci/type/CelestialBodyEphemerisSourceEnum.h"
#include "uci/type/CelestialBodyNameEnum.h"
#include "uci/type/CharacterizationProductTypeEnum.h"
#include "uci/type/CharacterizationTypeEnum.h"
#include "uci/type/ClearIdentityValuesEnum.h"
#include "uci/type/ClimbOptimizationEnum.h"
#include "uci/type/CollectionObjectiveEnum.h"
#include "uci/type/CollectionPatternEnum.h"
#include "uci/type/CollectionPolicyEnum.h"
#include "uci/type/CommAcquisitionModeTypeEnum.h"
#include "uci/type/CommAllocationTransitionEnum.h"
#include "uci/type/CommAssetCategoryEnum.h"
#include "uci/type/CommAssetEstimationMessageEnum.h"
#include "uci/type/CommCDL_LinkFallbackStateEnum.h"
#include "uci/type/CommCDL_RemoteMessageProcessingEnum.h"
#include "uci/type/CommCapabilityEnum.h"
#include "uci/type/CommComsecModeTypeEnum.h"
#include "uci/type/CommComsecModeTypeRequestEnum.h"
#include "uci/type/CommConfigurationStateEnum.h"
#include "uci/type/CommConnectionCommandEnum.h"
#include "uci/type/CommConnectionStateEnum.h"
#include "uci/type/CommCountermeasureSetEnum.h"
#include "uci/type/CommDataDirectionFiltrationEnum.h"
#include "uci/type/CommDataFormatEnum.h"
#include "uci/type/CommIFDL_AcqControlEnum.h"
#include "uci/type/CommIFDL_CommModeEnum.h"
#include "uci/type/CommIFDL_FlightSizeEnum.h"
#include "uci/type/CommIFDL_TxRateEnum.h"
#include "uci/type/CommLink16EnhancedThroughputCodeRateEnum.h"
#include "uci/type/CommLink16InitialEntryGroupEnum.h"
#include "uci/type/CommLink16InterferenceProtModeEnum.h"
#include "uci/type/CommLink16RangeModeEnum.h"
#include "uci/type/CommLink16TransmitAntennaEnum.h"
#include "uci/type/CommLink16TransmitModeEnum.h"
#include "uci/type/CommLink16TxPackingLimitEnum.h"
#include "uci/type/CommLink16TxPowerSelectionEnum.h"
#include "uci/type/CommLink16_AdvanceSlotNotificationModeEnum.h"
#include "uci/type/CommLink16_PPLI_PoolEnum.h"
#include "uci/type/CommMADL_AircraftTypeEnum.h"
#include "uci/type/CommMADL_DataRateTypeEnum.h"
#include "uci/type/CommMADL_LinkStateEnum.h"
#include "uci/type/CommMADL_NetChangeOpEnum.h"
#include "uci/type/CommMADL_NetChangeStatusEnum.h"
#include "uci/type/CommMADL_NetLinkOpStateEnum.h"
#include "uci/type/CommMADL_NetLinkSearchModeEnum.h"
#include "uci/type/CommMADL_NodeDataValidityEnum.h"
#include "uci/type/CommMADL_SearchTypeEnum.h"
#include "uci/type/CommMADL_TimeSlotOE_PhaseTypeEnum.h"
#include "uci/type/CommMADL_TimeSlotTxPhaseTypeEnum.h"
#include "uci/type/CommMADL_TimeSourceEnum.h"
#include "uci/type/CommMADL_VoiceRxIndicatorTypeEnum.h"
#include "uci/type/CommModeEnum.h"
#include "uci/type/CommModulationTypeEnum.h"
#include "uci/type/CommPointingAssessmentEnum.h"
#include "uci/type/CommPointingRequestEnum.h"
#include "uci/type/CommRangeModeTypeEnum.h"
#include "uci/type/CommReceiverStateEnum.h"
#include "uci/type/CommRelayMessageOutputsEnum.h"
#include "uci/type/CommRelayStateEnum.h"
#include "uci/type/CommRequestActionEnum.h"
#include "uci/type/CommSATCOM_ServiceTypeEnum.h"
#include "uci/type/CommSINCGARS_FreqModeEnum.h"
#include "uci/type/CommSchedulingRequestApprovalStatusEnum.h"
#include "uci/type/CommSchedulingRequirementStateEnum.h"
#include "uci/type/CommSchedulingScopeEnum.h"
#include "uci/type/CommTerminalPlanActivationStateEnum.h"
#include "uci/type/CommTerminalPlanApprovalStatusEnum.h"
#include "uci/type/CommTransmitterStateEnum.h"
#include "uci/type/CommandProcessingStateEnum.h"
#include "uci/type/CommandStateEnum.h"
#include "uci/type/CommunicationsImpairmentEnum.h"
#include "uci/type/ComponentControlInterfacesEnum.h"
#include "uci/type/ComponentElementStateEnum.h"
#include "uci/type/ComponentSettingEnum.h"
#include "uci/type/ComponentStateCommandEnum.h"
#include "uci/type/ComponentStateEnum.h"
#include "uci/type/ComponentStatusRequestEnum.h"
#include "uci/type/ComponentTypeEnum.h"
#include "uci/type/ConfidenceLevelEnum.h"
#include "uci/type/ConflictStateEnum.h"
#include "uci/type/ConnectionStatusEnum.h"
#include "uci/type/ConsentEnum.h"
#include "uci/type/ConstrainedPlanIncorporationEnum.h"
#include "uci/type/ControlInterfaceEnum.h"
#include "uci/type/ControlRequestEnum.h"
#include "uci/type/ControlTypeEnum.h"
#include "uci/type/CoordinationRiskEnum.h"
#include "uci/type/CorrelationIndicatorEnum.h"
#include "uci/type/CovarianceMatrixCategoryEnum.h"
#include "uci/type/CoverageEffortEnum.h"
#include "uci/type/CrashServiceEnum.h"
#include "uci/type/CreationSourceEnum.h"
#include "uci/type/CryptoDS101_Enum.h"
#include "uci/type/CryptoKeyStatusEnum.h"
#include "uci/type/CryptoLoadStateEnum.h"
#include "uci/type/CryptoLoadTypeEnum.h"
#include "uci/type/CryptoOTAM_Enum.h"
#include "uci/type/CryptoRolloverActionEnum.h"
#include "uci/type/CryptoRolloverMethodEnum.h"
#include "uci/type/CryptoRolloverStateEnum.h"
#include "uci/type/CryptoSlotGroupStateEnum.h"
#include "uci/type/CryptoTypeEnum.h"
#include "uci/type/CyberTypeEnum.h"
#include "uci/type/DF_ModeEnum.h"
#include "uci/type/DLZ_RelationEnum.h"
#include "uci/type/DMPI_StateEnum.h"
#include "uci/type/DMPI_StoreStateEnum.h"
#include "uci/type/DVR_OperationEnum.h"
#include "uci/type/DamageCategoryEnum.h"
#include "uci/type/DamageCauseEnum.h"
#include "uci/type/DamageConfidenceEnum.h"
#include "uci/type/DamageEstimateContentsEnum.h"
#include "uci/type/DamageLevelEnum.h"
#include "uci/type/DamageObservationEnum.h"
#include "uci/type/DamageSignificanceEnum.h"
#include "uci/type/DamagedFunctionEnum.h"
#include "uci/type/DataPlanActivationStateEnum.h"
#include "uci/type/DataPlanApprovalStatusEnum.h"
#include "uci/type/DataStoreActionEnum.h"
#include "uci/type/DataUpdateRequestCategoryEnum.h"
#include "uci/type/DatalinkControlStatusEnum.h"
#include "uci/type/DefensiveJammerSystemStatusEnum.h"
#include "uci/type/DefensiveJammerSystemTypeEnum.h"
#include "uci/type/DepthContactEnum.h"
#include "uci/type/DesignationEnum.h"
#include "uci/type/DestinationCategoryEnum.h"
#include "uci/type/DisseminationStatusEnum.h"
#include "uci/type/DoorCommandEnum.h"
#include "uci/type/DoorStateEnum.h"
#include "uci/type/DownloadPriorityEnum.h"
#include "uci/type/DrogueCommandEnum.h"
#include "uci/type/DropRestrictionEnum.h"
#include "uci/type/DynamicImageProcessingEnum.h"
#include "uci/type/EA_ActivationEnum.h"
#include "uci/type/EA_IndicatorEnum.h"
#include "uci/type/EA_MessageOutputsEnum.h"
#include "uci/type/EA_ModeEnum.h"
#include "uci/type/EA_PointingEnum.h"
#include "uci/type/EOB_CorrelationTypeEnum.h"
#include "uci/type/EP_CommandedStateEnum.h"
#include "uci/type/EP_StateEnum.h"
#include "uci/type/EP_StatusEnum.h"
#include "uci/type/ESM_ActivationEnum.h"
#include "uci/type/ESM_DwellStateEnum.h"
#include "uci/type/ESM_DwellTypeEnum.h"
#include "uci/type/ESM_MessageOutputsEnum.h"
#include "uci/type/ESM_SubCapabilityEnum.h"
#include "uci/type/EW_FixEnum.h"
#include "uci/type/EW_MeasurementEnum.h"
#include "uci/type/EW_ParameterSourceEnum.h"
#include "uci/type/EffectMessageOutputsEnum.h"
#include "uci/type/EffectTypeEnum.h"
#include "uci/type/ElectronicWarfareRelationshipEnum.h"
#include "uci/type/ElevationScanStabilizationEnum.h"
#include "uci/type/ElevationVisibilityEnum.h"
#include "uci/type/EmconLevelEnum.h"
#include "uci/type/EmissionBalanceEnum.h"
#include "uci/type/EmitterUrgencyEnum.h"
#include "uci/type/EntityBasingEnum.h"
#include "uci/type/EntityDropPolicyEnum.h"
#include "uci/type/EntityFusionEligibilityEnum.h"
#include "uci/type/EntityFusionSimpleEligibilityEnum.h"
#include "uci/type/EntityManagementRequestAuthorityEnum.h"
#include "uci/type/EntityRemoveReasonEnum.h"
#include "uci/type/EntitySourceEnum.h"
#include "uci/type/EntityStatusEnum.h"
#include "uci/type/EnvironmentEnum.h"
#include "uci/type/EnvironmentPairingEnum.h"
#include "uci/type/EphemerisTypeEnum.h"
#include "uci/type/EqualityExpressionEnum.h"
#include "uci/type/EquipmentConditionEnum.h"
#include "uci/type/EstimationMessageEnum.h"
#include "uci/type/EventSeverityEnum.h"
#include "uci/type/ExerciseIdentityEnum.h"
#include "uci/type/ExternalCommandExecutionStateEnum.h"
#include "uci/type/ExternalDataRequestEnum.h"
#include "uci/type/FMOP_Enum.h"
#include "uci/type/FOR_Enum.h"
#include "uci/type/FailureGuidanceEnum.h"
#include "uci/type/FaultSeverityEnum.h"
#include "uci/type/FaultStateEnum.h"
#include "uci/type/FieldOfRegardTypeEnum.h"
#include "uci/type/FileDeclassificationEnum.h"
#include "uci/type/FileTypeEnum.h"
#include "uci/type/FilteredUnfilteredEnum.h"
#include "uci/type/FixedPointingEnum.h"
#include "uci/type/FlightCapabilityEnum.h"
#include "uci/type/FlightDeckStatusEnum.h"
#include "uci/type/FlightStageEnum.h"
#include "uci/type/FocalPlaneArrayNonUniformityCorrectionOffsetEnum.h"
#include "uci/type/FocalPlaneArrayNonUniformityCorrectionReferenceEnum.h"
#include "uci/type/FrameOriginEnum.h"
#include "uci/type/FrequencyAgilityPatternEnum.h"
#include "uci/type/FrequencyModulationVariationEnum.h"
#include "uci/type/FrequencyPatternPeriodicityEnum.h"
#include "uci/type/FrequencySwitchingEnum.h"
#include "uci/type/TLE_BaseType.h"
#include "uci/type/TLE_Type.h"
#include "uci/type/TLE_WithParametersType.h"
#include "uci/type/TaskCommandMDT.h"
#include "uci/type/TaskCommandMT.h"
#include "uci/type/TaskCommandStatusMDT.h"
#include "uci/type/TaskCommandStatusMT.h"
#include "uci/type/TaskCommandType.h"
#include "uci/type/TaskExecutionApprovalStatusMDT.h"
#include "uci/type/TaskExecutionApprovalStatusMT.h"
#include "uci/type/TaskID_InclusionType.h"
#include "uci/type/TaskID_Type.h"
#include "uci/type/TaskMDT.h"
#include "uci/type/TaskMT.h"
#include "uci/type/TaskPlanActivationType.h"
#include "uci/type/TaskPlanApprovalStatusMDT.h"
#include "uci/type/TaskPlanApprovalStatusMT.h"
#include "uci/type/TaskPlanCommandID_ChoiceType.h"
#include "uci/type/TaskPlanCommandID_Type.h"
#include "uci/type/TaskPlanCommandMDT.h"
#include "uci/type/TaskPlanCommandMT.h"
#include "uci/type/TaskPlanCommandStatusMDT.h"
#include "uci/type/TaskPlanCommandStatusMT.h"
#include "uci/type/TaskPlanConstraintType.h"
#include "uci/type/TaskPlanExecutionStateType.h"
#include "uci/type/TaskPlanExecutionStatusMDT.h"
#include "uci/type/TaskPlanExecutionStatusMT.h"
#include "uci/type/TaskPlanID_Type.h"
#include "uci/type/TaskPlanInputsType.h"
#include "uci/type/TaskPlanInvalidType.h"
#include "uci/type/TaskPlanMDT.h"
#include "uci/type/TaskPlanMT.h"
#include "uci/type/TaskPlanPartsType.h"
#include "uci/type/TaskPlanProcessDescriptionType.h"
#include "uci/type/TaskPlanProcessType.h"
#include "uci/type/TaskPlanStatusMDT.h"
#include "uci/type/TaskPlanStatusMT.h"
#include "uci/type/TaskPlanType.h"
#include "uci/type/TaskPlanValidationCommandMDT.h"
#include "uci/type/TaskPlanValidationCommandMT.h"
#include "uci/type/TaskPlanValidationCommandStatusMDT.h"
#include "uci/type/TaskPlanValidationCommandStatusMT.h"
#include "uci/type/TaskPlanValidationID_Type.h"
#include "uci/type/TaskPlanValidationInputsType.h"
#include "uci/type/TaskPlanValidationMDT.h"
#include "uci/type/TaskPlanValidationMT.h"
#include "uci/type/TaskPlanningResultType.h"
#include "uci/type/TaskPlanningStatusMDT.h"
#include "uci/type/TaskPlanningStatusMT.h"
#include "uci/type/TaskResponseType.h"
#include "uci/type/TaskStatusMDT.h"
#include "uci/type/TaskStatusMT.h"
#include "uci/type/TaskType.h"
#include "uci/type/TemperatureRangeType.h"
#include "uci/type/TemperatureStatusType.h"
#include "uci/type/ThirdBodyGravityType.h"
#include "uci/type/ThreadConfigurationRF_Type.h"
#include "uci/type/ThreatAssessmentMetricsType.h"
#include "uci/type/ThreatAssessmentProbabilityType.h"
#include "uci/type/ThreatAssessmentRequestType.h"
#include "uci/type/ThreatAssessmentSystemType.h"
#include "uci/type/ThreatExposureProbabilityType.h"
#include "uci/type/ThreatExposureType.h"
#include "uci/type/ThreatNominationAssessmentDataType.h"
#include "uci/type/ThreatNominationAssessmentRequestType.h"
#include "uci/type/ThreatNominationAssessmentType.h"
#include "uci/type/ThreatNominationResultType.h"
#include "uci/type/ThreatVulnerabilityByCapabilityType.h"
#include "uci/type/ThreatZoneType.h"
#include "uci/type/ThresholdOffOrbitTriggerDataType.h"
#include "uci/type/ThresholdOffRouteTriggerDataType.h"
#include "uci/type/ThresholdVulnerabilityType.h"
#include "uci/type/ThumbnailType.h"
#include "uci/type/TimeAndPolarDataType.h"
#include "uci/type/TimeAndPolarRecordType.h"
#include "uci/type/TimeCoverageType.h"
#include "uci/type/TimeErrorType.h"
#include "uci/type/TimeFunctionType.h"
#include "uci/type/TimeWindowType.h"
#include "uci/type/TimedZoneType.h"
#include "uci/type/TimingConstraintsType.h"
#include "uci/type/TraceabilityType.h"
#include "uci/type/TrackNumberOrEntityType.h"
#include "uci/type/TrackOptionsID_Type.h"
#include "uci/type/TrackingOpZoneFilterAreaType.h"
#include "uci/type/TransceiverType.h"
#include "uci/type/TransitionStatusType.h"
#include "uci/type/TurnGeometryChoiceType.h"
#include "uci/type/TurnPointType.h"
#include "uci/type/TurretCommandChoiceType.h"
#include "uci/type/TurretCommandMDT.h"
#include "uci/type/TurretCommandMT.h"
#include "uci/type/TurretCommandPositionType.h"
#include "uci/type/TurretCommandStatusMDT.h"
#include "uci/type/TurretCommandStatusMT.h"
#include "uci/type/TurretCommandType.h"
#include "uci/type/TurretReportDynamicPointingType.h"
#include "uci/type/TurretReportID_Type.h"
#include "uci/type/TurretReportMDT.h"
#include "uci/type/TurretReportMT.h"
#include "uci/type/TurretReportPointingType.h"
#include "uci/type/TurretStatusMDT.h"
#include "uci/type/TurretStatusMT.h"
#include "uci/type/TxBeamType.h"
#include "uci/type/UMID_AudioID_Type.h"
#include "uci/type/UMID_DataID_Type.h"
#include "uci/type/UMID_SystemID_Type.h"
#include "uci/type/UMID_VideoID_Type.h"
#include "uci/type/UnachievableRequirementType.h"
#include "uci/type/UnallocatedReasonType.h"
#include "uci/type/UncertaintyType.h"
#include "uci/type/UnitID_Type.h"
#include "uci/type/UnitIdentityType.h"
#include "uci/type/UnitType.h"
#include "uci/type/UnitVectorType.h"
#include "uci/type/UnsignedIntegerMinMaxType.h"
#include "uci/type/UserLinkStatusType.h"
#include "uci/type/VCM_DataType.h"
#include "uci/type/VCM_DragParametersType.h"
#include "uci/type/VCM_ForceModelOptionsType.h"
#include "uci/type/VCM_IntegratorSettingsType.h"
#include "uci/type/VCM_PropagatorType.h"
#include "uci/type/ValidationCommandBaseType.h"
#include "uci/type/ValidationCommandStatusBaseType.h"
#include "uci/type/ValidatorType.h"
#include "uci/type/ValveDataStatusType.h"
#include "uci/type/VariableSubsystemsType.h"
#include "uci/type/VehicleCommandDataType.h"
#include "uci/type/VehicleConfigurationType.h"
#include "uci/type/VehicleIdentificationType.h"
#include "uci/type/VehicleThreatAssessmentDataType.h"
#include "uci/type/VehicleThreatAssessmentRequestType.h"
#include "uci/type/VehicleThreatAssessmentType.h"
#include "uci/type/VehicleUniqueIdentifierType.h"
#include "uci/type/Velocity2D_Type.h"
#include "uci/type/Velocity2D_UncertaintyType.h"
#include "uci/type/Velocity3D_Type.h"
#include "uci/type/VelocityAccelerationCovarianceType.h"
#include "uci/type/VelocityOrientationCovarianceType.h"
#include "uci/type/VelocityVelocityCovarianceCartesianType.h"
#include "uci/type/VelocityVelocityCovarianceType.h"
#include "uci/type/VerboseStatusType.h"
#include "uci/type/VersionedID_Type.h"
#include "uci/type/VideoAugmentationParametersType.h"
#include "uci/type/VideoEncoderOutputType.h"
#include "uci/type/VideoEncoderSettingsType.h"
#include "uci/type/VideoOutputSettingsType.h"
#include "uci/type/VisMagParamsType.h"
#include "uci/type/VisualMagnitudeLimitsType.h"
#include "uci/type/VisualMagnitudeWithDeviationType.h"
#include "uci/type/VoiceControlType.h"
#include "uci/type/VolumeChoiceType.h"
#include "uci/type/VulnerabilityLevelsCombinedType.h"
#include "uci/type/VulnerabilityLevelsType.h"
#include "uci/type/VulnerabilityMetricsType.h"
#include "uci/type/WayPointPointChoiceType.h"
#include "uci/type/WayPointType.h"
#include "uci/type/WeaponEffectIndicatorsType.h"
#include "uci/type/WeaponRestrictionType.h"
#include "uci/type/WeaponStoreType.h"
#include "uci/type/WeaponTargetPairingChoiceType.h"
#include "uci/type/WeaponeeringLocationType.h"
#include "uci/type/WeaponeeringStoreType.h"
#include "uci/type/WeaponeeringTargetInfoType.h"
#include "uci/type/WeaponeeringTargetType.h"
#include "uci/type/WeaponeeringType.h"
#include "uci/type/WeatherAreaDataType.h"
#include "uci/type/WeatherAugmentationParametersType.h"
#include "uci/type/WeatherDataType.h"
#include "uci/type/WeatherDatasetID_Type.h"
#include "uci/type/WeatherDatasetMDT.h"
#include "uci/type/WeatherDatasetMT.h"
#include "uci/type/WeatherEffectsType.h"
#include "uci/type/WeatherMDT.h"
#include "uci/type/WeatherMT.h"
#include "uci/type/WeatherObservationMDT.h"
#include "uci/type/WeatherObservationMT.h"
#include "uci/type/WeatherRadarActivityMDT.h"
#include "uci/type/WeatherRadarActivityMT.h"
#include "uci/type/WeatherRadarActivityStatusDetailType.h"
#include "uci/type/WeatherRadarActivityType.h"
#include "uci/type/WeatherRadarCapabilityCommandType.h"
#include "uci/type/WeatherRadarCapabilityMDT.h"
#include "uci/type/WeatherRadarCapabilityMT.h"
#include "uci/type/WeatherRadarCapabilityStatusMDT.h"
#include "uci/type/WeatherRadarCapabilityStatusMT.h"
#include "uci/type/WeatherRadarCapabilityType.h"
#include "uci/type/WeatherRadarCellLocationType.h"
#include "uci/type/WeatherRadarCellSizeType.h"
#include "uci/type/WeatherRadarCellType.h"
#include "uci/type/WeatherRadarCommandMDT.h"
#include "uci/type/WeatherRadarCommandMT.h"
#include "uci/type/WeatherRadarCommandStatusMDT.h"
#include "uci/type/WeatherRadarCommandStatusMT.h"
#include "uci/type/WeatherRadarCommandType.h"
#include "uci/type/WeatherRadarObservationMDT.h"
#include "uci/type/WeatherRadarObservationMT.h"
#include "uci/type/WeatherRadarOptionsType.h"
#include "uci/type/WeatherRadarSettingsCommandMDT.h"
#include "uci/type/WeatherRadarSettingsCommandMT.h"
#include "uci/type/WeatherRadarSettingsCommandStatusMDT.h"
#include "uci/type/WeatherRadarSettingsCommandStatusMT.h"
#include "uci/type/WeatherRadarTaskType.h"
#include "uci/type/WeatherReportDataType.h"
#include "uci/type/WeatherReportGridDataType.h"
#include "uci/type/WeatherReportType.h"
#include "uci/type/WeatherWarningDataType.h"
#include "uci/type/WeekdayIntervalType.h"
#include "uci/type/Wideband_SOI_ParamsType.h"
#include "uci/type/WildcardElementType.h"
#include "uci/type/WindDataChoiceType.h"
#include "uci/type/WindDataType.h"
#include "uci/type/WindMagnitudeType.h"
#include "uci/type/WorkingEOB_ID_Type.h"
#include "uci/type/WorkingEOB_MDT.h"
#include "uci/type/WorkingEOB_MT.h"
#include "uci/type/WorkingEOB_RequestMDT.h"
#include "uci/type/WorkingEOB_RequestMT.h"
#include "uci/type/WorkingEOB_RequestStatusMDT.h"
#include "uci/type/WorkingEOB_RequestStatusMT.h"
#include "uci/type/WorkingEOB_SourceID_ChoiceType.h"
#include "uci/type/WorkingSOB_ID_Type.h"
#include "uci/type/WorkingSOB_MDT.h"
#include "uci/type/WorkingSOB_MT.h"
#include "uci/type/WorkingSOB_RequestMDT.h"
#include "uci/type/WorkingSOB_RequestMT.h"
#include "uci/type/WorkingSOB_RequestStatusMDT.h"
#include "uci/type/WorkingSOB_RequestStatusMT.h"
#include "uci/type/WorkingSOB_SourceID_ChoiceType.h"
#include "uci/type/Z_ChoiceType.h"
#include "uci/type/ZoneChoiceType.h"
#include "uci/type/ZoneExternalType.h"
#include "uci/type/ZoneInclusionType.h"
#include "uci/type/ZoneType.h"
#include "uci/type/ZoneViolationTriggerDataType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all base data types are declared */
namespace base {

boost::optional<std::string> ExternalizerWrite9::write(const uci::base::Accessor& accessor, boost::property_tree::ptree& propTree) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::taskCommandMDT:
      return extjson_uci::type::TaskCommandMDT::serialize(dynamic_cast<const uci::type::TaskCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskCommandMT:
      return extjson_uci::type::TaskCommandMT::serialize(dynamic_cast<const uci::type::TaskCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskCommandStatusMDT:
      return extjson_uci::type::TaskCommandStatusMDT::serialize(dynamic_cast<const uci::type::TaskCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskCommandStatusMT:
      return extjson_uci::type::TaskCommandStatusMT::serialize(dynamic_cast<const uci::type::TaskCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskCommandType:
      return extjson_uci::type::TaskCommandType::serialize(dynamic_cast<const uci::type::TaskCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskExecutionApprovalStatusMDT:
      return extjson_uci::type::TaskExecutionApprovalStatusMDT::serialize(dynamic_cast<const uci::type::TaskExecutionApprovalStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskExecutionApprovalStatusMT:
      return extjson_uci::type::TaskExecutionApprovalStatusMT::serialize(dynamic_cast<const uci::type::TaskExecutionApprovalStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskID_InclusionType:
      return extjson_uci::type::TaskID_InclusionType::serialize(dynamic_cast<const uci::type::TaskID_InclusionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskID_Type:
      return extjson_uci::type::TaskID_Type::serialize(dynamic_cast<const uci::type::TaskID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskMDT:
      return extjson_uci::type::TaskMDT::serialize(dynamic_cast<const uci::type::TaskMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskMT:
      return extjson_uci::type::TaskMT::serialize(dynamic_cast<const uci::type::TaskMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanActivationType:
      return extjson_uci::type::TaskPlanActivationType::serialize(dynamic_cast<const uci::type::TaskPlanActivationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanApprovalStatusMDT:
      return extjson_uci::type::TaskPlanApprovalStatusMDT::serialize(dynamic_cast<const uci::type::TaskPlanApprovalStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanApprovalStatusMT:
      return extjson_uci::type::TaskPlanApprovalStatusMT::serialize(dynamic_cast<const uci::type::TaskPlanApprovalStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanCommandID_ChoiceType:
      return extjson_uci::type::TaskPlanCommandID_ChoiceType::serialize(dynamic_cast<const uci::type::TaskPlanCommandID_ChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanCommandID_Type:
      return extjson_uci::type::TaskPlanCommandID_Type::serialize(dynamic_cast<const uci::type::TaskPlanCommandID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanCommandMDT:
      return extjson_uci::type::TaskPlanCommandMDT::serialize(dynamic_cast<const uci::type::TaskPlanCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanCommandMT:
      return extjson_uci::type::TaskPlanCommandMT::serialize(dynamic_cast<const uci::type::TaskPlanCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanCommandStatusMDT:
      return extjson_uci::type::TaskPlanCommandStatusMDT::serialize(dynamic_cast<const uci::type::TaskPlanCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanCommandStatusMT:
      return extjson_uci::type::TaskPlanCommandStatusMT::serialize(dynamic_cast<const uci::type::TaskPlanCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanConstraintType:
      return extjson_uci::type::TaskPlanConstraintType::serialize(dynamic_cast<const uci::type::TaskPlanConstraintType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanExecutionStateType:
      return extjson_uci::type::TaskPlanExecutionStateType::serialize(dynamic_cast<const uci::type::TaskPlanExecutionStateType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanExecutionStatusMDT:
      return extjson_uci::type::TaskPlanExecutionStatusMDT::serialize(dynamic_cast<const uci::type::TaskPlanExecutionStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanExecutionStatusMT:
      return extjson_uci::type::TaskPlanExecutionStatusMT::serialize(dynamic_cast<const uci::type::TaskPlanExecutionStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanID_Type:
      return extjson_uci::type::TaskPlanID_Type::serialize(dynamic_cast<const uci::type::TaskPlanID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanInputsType:
      return extjson_uci::type::TaskPlanInputsType::serialize(dynamic_cast<const uci::type::TaskPlanInputsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanInvalidType:
      return extjson_uci::type::TaskPlanInvalidType::serialize(dynamic_cast<const uci::type::TaskPlanInvalidType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanMDT:
      return extjson_uci::type::TaskPlanMDT::serialize(dynamic_cast<const uci::type::TaskPlanMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanMT:
      return extjson_uci::type::TaskPlanMT::serialize(dynamic_cast<const uci::type::TaskPlanMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanningResultType:
      return extjson_uci::type::TaskPlanningResultType::serialize(dynamic_cast<const uci::type::TaskPlanningResultType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanningStatusMDT:
      return extjson_uci::type::TaskPlanningStatusMDT::serialize(dynamic_cast<const uci::type::TaskPlanningStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanningStatusMT:
      return extjson_uci::type::TaskPlanningStatusMT::serialize(dynamic_cast<const uci::type::TaskPlanningStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanPartsType:
      return extjson_uci::type::TaskPlanPartsType::serialize(dynamic_cast<const uci::type::TaskPlanPartsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanProcessDescriptionType:
      return extjson_uci::type::TaskPlanProcessDescriptionType::serialize(dynamic_cast<const uci::type::TaskPlanProcessDescriptionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanProcessType:
      return extjson_uci::type::TaskPlanProcessType::serialize(dynamic_cast<const uci::type::TaskPlanProcessType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanStatusMDT:
      return extjson_uci::type::TaskPlanStatusMDT::serialize(dynamic_cast<const uci::type::TaskPlanStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanStatusMT:
      return extjson_uci::type::TaskPlanStatusMT::serialize(dynamic_cast<const uci::type::TaskPlanStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanType:
      return extjson_uci::type::TaskPlanType::serialize(dynamic_cast<const uci::type::TaskPlanType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanValidationCommandMDT:
      return extjson_uci::type::TaskPlanValidationCommandMDT::serialize(dynamic_cast<const uci::type::TaskPlanValidationCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanValidationCommandMT:
      return extjson_uci::type::TaskPlanValidationCommandMT::serialize(dynamic_cast<const uci::type::TaskPlanValidationCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanValidationCommandStatusMDT:
      return extjson_uci::type::TaskPlanValidationCommandStatusMDT::serialize(dynamic_cast<const uci::type::TaskPlanValidationCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanValidationCommandStatusMT:
      return extjson_uci::type::TaskPlanValidationCommandStatusMT::serialize(dynamic_cast<const uci::type::TaskPlanValidationCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanValidationID_Type:
      return extjson_uci::type::TaskPlanValidationID_Type::serialize(dynamic_cast<const uci::type::TaskPlanValidationID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanValidationInputsType:
      return extjson_uci::type::TaskPlanValidationInputsType::serialize(dynamic_cast<const uci::type::TaskPlanValidationInputsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanValidationMDT:
      return extjson_uci::type::TaskPlanValidationMDT::serialize(dynamic_cast<const uci::type::TaskPlanValidationMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskPlanValidationMT:
      return extjson_uci::type::TaskPlanValidationMT::serialize(dynamic_cast<const uci::type::TaskPlanValidationMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskResponseType:
      return extjson_uci::type::TaskResponseType::serialize(dynamic_cast<const uci::type::TaskResponseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskStatusMDT:
      return extjson_uci::type::TaskStatusMDT::serialize(dynamic_cast<const uci::type::TaskStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskStatusMT:
      return extjson_uci::type::TaskStatusMT::serialize(dynamic_cast<const uci::type::TaskStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::taskType:
      return extjson_uci::type::TaskType::serialize(dynamic_cast<const uci::type::TaskType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::temperatureRangeType:
      return extjson_uci::type::TemperatureRangeType::serialize(dynamic_cast<const uci::type::TemperatureRangeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::temperatureStatusType:
      return extjson_uci::type::TemperatureStatusType::serialize(dynamic_cast<const uci::type::TemperatureStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::thirdBodyGravityType:
      return extjson_uci::type::ThirdBodyGravityType::serialize(dynamic_cast<const uci::type::ThirdBodyGravityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::threadConfigurationRF_Type:
      return extjson_uci::type::ThreadConfigurationRF_Type::serialize(dynamic_cast<const uci::type::ThreadConfigurationRF_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::threatAssessmentMetricsType:
      return extjson_uci::type::ThreatAssessmentMetricsType::serialize(dynamic_cast<const uci::type::ThreatAssessmentMetricsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::threatAssessmentProbabilityType:
      return extjson_uci::type::ThreatAssessmentProbabilityType::serialize(dynamic_cast<const uci::type::ThreatAssessmentProbabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::threatAssessmentRequestType:
      return extjson_uci::type::ThreatAssessmentRequestType::serialize(dynamic_cast<const uci::type::ThreatAssessmentRequestType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::threatAssessmentSystemType:
      return extjson_uci::type::ThreatAssessmentSystemType::serialize(dynamic_cast<const uci::type::ThreatAssessmentSystemType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::threatExposureProbabilityType:
      return extjson_uci::type::ThreatExposureProbabilityType::serialize(dynamic_cast<const uci::type::ThreatExposureProbabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::threatExposureType:
      return extjson_uci::type::ThreatExposureType::serialize(dynamic_cast<const uci::type::ThreatExposureType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::threatNominationAssessmentDataType:
      return extjson_uci::type::ThreatNominationAssessmentDataType::serialize(dynamic_cast<const uci::type::ThreatNominationAssessmentDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::threatNominationAssessmentRequestType:
      return extjson_uci::type::ThreatNominationAssessmentRequestType::serialize(dynamic_cast<const uci::type::ThreatNominationAssessmentRequestType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::threatNominationAssessmentType:
      return extjson_uci::type::ThreatNominationAssessmentType::serialize(dynamic_cast<const uci::type::ThreatNominationAssessmentType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::threatNominationResultType:
      return extjson_uci::type::ThreatNominationResultType::serialize(dynamic_cast<const uci::type::ThreatNominationResultType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::threatVulnerabilityByCapabilityType:
      return extjson_uci::type::ThreatVulnerabilityByCapabilityType::serialize(dynamic_cast<const uci::type::ThreatVulnerabilityByCapabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::threatZoneType:
      return extjson_uci::type::ThreatZoneType::serialize(dynamic_cast<const uci::type::ThreatZoneType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::thresholdOffOrbitTriggerDataType:
      return extjson_uci::type::ThresholdOffOrbitTriggerDataType::serialize(dynamic_cast<const uci::type::ThresholdOffOrbitTriggerDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::thresholdOffRouteTriggerDataType:
      return extjson_uci::type::ThresholdOffRouteTriggerDataType::serialize(dynamic_cast<const uci::type::ThresholdOffRouteTriggerDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::thresholdVulnerabilityType:
      return extjson_uci::type::ThresholdVulnerabilityType::serialize(dynamic_cast<const uci::type::ThresholdVulnerabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::thumbnailType:
      return extjson_uci::type::ThumbnailType::serialize(dynamic_cast<const uci::type::ThumbnailType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::timeAndPolarDataType:
      return extjson_uci::type::TimeAndPolarDataType::serialize(dynamic_cast<const uci::type::TimeAndPolarDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::timeAndPolarRecordType:
      return extjson_uci::type::TimeAndPolarRecordType::serialize(dynamic_cast<const uci::type::TimeAndPolarRecordType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::timeCoverageType:
      return extjson_uci::type::TimeCoverageType::serialize(dynamic_cast<const uci::type::TimeCoverageType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::timedZoneType:
      return extjson_uci::type::TimedZoneType::serialize(dynamic_cast<const uci::type::TimedZoneType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::timeErrorType:
      return extjson_uci::type::TimeErrorType::serialize(dynamic_cast<const uci::type::TimeErrorType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::timeFunctionType:
      return extjson_uci::type::TimeFunctionType::serialize(dynamic_cast<const uci::type::TimeFunctionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::timeWindowType:
      return extjson_uci::type::TimeWindowType::serialize(dynamic_cast<const uci::type::TimeWindowType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::timingConstraintsType:
      return extjson_uci::type::TimingConstraintsType::serialize(dynamic_cast<const uci::type::TimingConstraintsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::tLE_BaseType:
      return extjson_uci::type::TLE_BaseType::serialize(dynamic_cast<const uci::type::TLE_BaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::tLE_Type:
      return extjson_uci::type::TLE_Type::serialize(dynamic_cast<const uci::type::TLE_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::tLE_WithParametersType:
      return extjson_uci::type::TLE_WithParametersType::serialize(dynamic_cast<const uci::type::TLE_WithParametersType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::traceabilityType:
      return extjson_uci::type::TraceabilityType::serialize(dynamic_cast<const uci::type::TraceabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::trackingOpZoneFilterAreaType:
      return extjson_uci::type::TrackingOpZoneFilterAreaType::serialize(dynamic_cast<const uci::type::TrackingOpZoneFilterAreaType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::trackNumberOrEntityType:
      return extjson_uci::type::TrackNumberOrEntityType::serialize(dynamic_cast<const uci::type::TrackNumberOrEntityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::trackOptionsID_Type:
      return extjson_uci::type::TrackOptionsID_Type::serialize(dynamic_cast<const uci::type::TrackOptionsID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::transceiverType:
      return extjson_uci::type::TransceiverType::serialize(dynamic_cast<const uci::type::TransceiverType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::transitionStatusType:
      return extjson_uci::type::TransitionStatusType::serialize(dynamic_cast<const uci::type::TransitionStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turnGeometryChoiceType:
      return extjson_uci::type::TurnGeometryChoiceType::serialize(dynamic_cast<const uci::type::TurnGeometryChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turnPointType:
      return extjson_uci::type::TurnPointType::serialize(dynamic_cast<const uci::type::TurnPointType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turretCommandChoiceType:
      return extjson_uci::type::TurretCommandChoiceType::serialize(dynamic_cast<const uci::type::TurretCommandChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turretCommandMDT:
      return extjson_uci::type::TurretCommandMDT::serialize(dynamic_cast<const uci::type::TurretCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turretCommandMT:
      return extjson_uci::type::TurretCommandMT::serialize(dynamic_cast<const uci::type::TurretCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turretCommandPositionType:
      return extjson_uci::type::TurretCommandPositionType::serialize(dynamic_cast<const uci::type::TurretCommandPositionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turretCommandStatusMDT:
      return extjson_uci::type::TurretCommandStatusMDT::serialize(dynamic_cast<const uci::type::TurretCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turretCommandStatusMT:
      return extjson_uci::type::TurretCommandStatusMT::serialize(dynamic_cast<const uci::type::TurretCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turretCommandType:
      return extjson_uci::type::TurretCommandType::serialize(dynamic_cast<const uci::type::TurretCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turretReportDynamicPointingType:
      return extjson_uci::type::TurretReportDynamicPointingType::serialize(dynamic_cast<const uci::type::TurretReportDynamicPointingType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turretReportID_Type:
      return extjson_uci::type::TurretReportID_Type::serialize(dynamic_cast<const uci::type::TurretReportID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turretReportMDT:
      return extjson_uci::type::TurretReportMDT::serialize(dynamic_cast<const uci::type::TurretReportMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turretReportMT:
      return extjson_uci::type::TurretReportMT::serialize(dynamic_cast<const uci::type::TurretReportMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turretReportPointingType:
      return extjson_uci::type::TurretReportPointingType::serialize(dynamic_cast<const uci::type::TurretReportPointingType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turretStatusMDT:
      return extjson_uci::type::TurretStatusMDT::serialize(dynamic_cast<const uci::type::TurretStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::turretStatusMT:
      return extjson_uci::type::TurretStatusMT::serialize(dynamic_cast<const uci::type::TurretStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::txBeamType:
      return extjson_uci::type::TxBeamType::serialize(dynamic_cast<const uci::type::TxBeamType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::uMID_AudioID_Type:
      return extjson_uci::type::UMID_AudioID_Type::serialize(dynamic_cast<const uci::type::UMID_AudioID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::uMID_DataID_Type:
      return extjson_uci::type::UMID_DataID_Type::serialize(dynamic_cast<const uci::type::UMID_DataID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::uMID_SystemID_Type:
      return extjson_uci::type::UMID_SystemID_Type::serialize(dynamic_cast<const uci::type::UMID_SystemID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::uMID_VideoID_Type:
      return extjson_uci::type::UMID_VideoID_Type::serialize(dynamic_cast<const uci::type::UMID_VideoID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::unachievableRequirementType:
      return extjson_uci::type::UnachievableRequirementType::serialize(dynamic_cast<const uci::type::UnachievableRequirementType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::unallocatedReasonType:
      return extjson_uci::type::UnallocatedReasonType::serialize(dynamic_cast<const uci::type::UnallocatedReasonType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::uncertaintyType:
      return extjson_uci::type::UncertaintyType::serialize(dynamic_cast<const uci::type::UncertaintyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::unitID_Type:
      return extjson_uci::type::UnitID_Type::serialize(dynamic_cast<const uci::type::UnitID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::unitIdentityType:
      return extjson_uci::type::UnitIdentityType::serialize(dynamic_cast<const uci::type::UnitIdentityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::unitType:
      return extjson_uci::type::UnitType::serialize(dynamic_cast<const uci::type::UnitType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::unitVectorType:
      return extjson_uci::type::UnitVectorType::serialize(dynamic_cast<const uci::type::UnitVectorType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::unsignedIntegerMinMaxType:
      return extjson_uci::type::UnsignedIntegerMinMaxType::serialize(dynamic_cast<const uci::type::UnsignedIntegerMinMaxType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::userLinkStatusType:
      return extjson_uci::type::UserLinkStatusType::serialize(dynamic_cast<const uci::type::UserLinkStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::validationCommandBaseType:
      return extjson_uci::type::ValidationCommandBaseType::serialize(dynamic_cast<const uci::type::ValidationCommandBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::validationCommandStatusBaseType:
      return extjson_uci::type::ValidationCommandStatusBaseType::serialize(dynamic_cast<const uci::type::ValidationCommandStatusBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::validatorType:
      return extjson_uci::type::ValidatorType::serialize(dynamic_cast<const uci::type::ValidatorType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::valveDataStatusType:
      return extjson_uci::type::ValveDataStatusType::serialize(dynamic_cast<const uci::type::ValveDataStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::variableSubsystemsType:
      return extjson_uci::type::VariableSubsystemsType::serialize(dynamic_cast<const uci::type::VariableSubsystemsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::vCM_DataType:
      return extjson_uci::type::VCM_DataType::serialize(dynamic_cast<const uci::type::VCM_DataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::vCM_DragParametersType:
      return extjson_uci::type::VCM_DragParametersType::serialize(dynamic_cast<const uci::type::VCM_DragParametersType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::vCM_ForceModelOptionsType:
      return extjson_uci::type::VCM_ForceModelOptionsType::serialize(dynamic_cast<const uci::type::VCM_ForceModelOptionsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::vCM_IntegratorSettingsType:
      return extjson_uci::type::VCM_IntegratorSettingsType::serialize(dynamic_cast<const uci::type::VCM_IntegratorSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::vCM_PropagatorType:
      return extjson_uci::type::VCM_PropagatorType::serialize(dynamic_cast<const uci::type::VCM_PropagatorType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::vehicleCommandDataType:
      return extjson_uci::type::VehicleCommandDataType::serialize(dynamic_cast<const uci::type::VehicleCommandDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::vehicleConfigurationType:
      return extjson_uci::type::VehicleConfigurationType::serialize(dynamic_cast<const uci::type::VehicleConfigurationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::vehicleIdentificationType:
      return extjson_uci::type::VehicleIdentificationType::serialize(dynamic_cast<const uci::type::VehicleIdentificationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::vehicleThreatAssessmentDataType:
      return extjson_uci::type::VehicleThreatAssessmentDataType::serialize(dynamic_cast<const uci::type::VehicleThreatAssessmentDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::vehicleThreatAssessmentRequestType:
      return extjson_uci::type::VehicleThreatAssessmentRequestType::serialize(dynamic_cast<const uci::type::VehicleThreatAssessmentRequestType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::vehicleThreatAssessmentType:
      return extjson_uci::type::VehicleThreatAssessmentType::serialize(dynamic_cast<const uci::type::VehicleThreatAssessmentType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::vehicleUniqueIdentifierType:
      return extjson_uci::type::VehicleUniqueIdentifierType::serialize(dynamic_cast<const uci::type::VehicleUniqueIdentifierType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::velocity2D_Type:
      return extjson_uci::type::Velocity2D_Type::serialize(dynamic_cast<const uci::type::Velocity2D_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::velocity2D_UncertaintyType:
      return extjson_uci::type::Velocity2D_UncertaintyType::serialize(dynamic_cast<const uci::type::Velocity2D_UncertaintyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::velocity3D_Type:
      return extjson_uci::type::Velocity3D_Type::serialize(dynamic_cast<const uci::type::Velocity3D_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::velocityAccelerationCovarianceType:
      return extjson_uci::type::VelocityAccelerationCovarianceType::serialize(dynamic_cast<const uci::type::VelocityAccelerationCovarianceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::velocityOrientationCovarianceType:
      return extjson_uci::type::VelocityOrientationCovarianceType::serialize(dynamic_cast<const uci::type::VelocityOrientationCovarianceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::velocityVelocityCovarianceCartesianType:
      return extjson_uci::type::VelocityVelocityCovarianceCartesianType::serialize(dynamic_cast<const uci::type::VelocityVelocityCovarianceCartesianType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::velocityVelocityCovarianceType:
      return extjson_uci::type::VelocityVelocityCovarianceType::serialize(dynamic_cast<const uci::type::VelocityVelocityCovarianceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::verboseStatusType:
      return extjson_uci::type::VerboseStatusType::serialize(dynamic_cast<const uci::type::VerboseStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::versionedID_Type:
      return extjson_uci::type::VersionedID_Type::serialize(dynamic_cast<const uci::type::VersionedID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::videoAugmentationParametersType:
      return extjson_uci::type::VideoAugmentationParametersType::serialize(dynamic_cast<const uci::type::VideoAugmentationParametersType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::videoEncoderOutputType:
      return extjson_uci::type::VideoEncoderOutputType::serialize(dynamic_cast<const uci::type::VideoEncoderOutputType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::videoEncoderSettingsType:
      return extjson_uci::type::VideoEncoderSettingsType::serialize(dynamic_cast<const uci::type::VideoEncoderSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::videoOutputSettingsType:
      return extjson_uci::type::VideoOutputSettingsType::serialize(dynamic_cast<const uci::type::VideoOutputSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::visMagParamsType:
      return extjson_uci::type::VisMagParamsType::serialize(dynamic_cast<const uci::type::VisMagParamsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::visualMagnitudeLimitsType:
      return extjson_uci::type::VisualMagnitudeLimitsType::serialize(dynamic_cast<const uci::type::VisualMagnitudeLimitsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::visualMagnitudeWithDeviationType:
      return extjson_uci::type::VisualMagnitudeWithDeviationType::serialize(dynamic_cast<const uci::type::VisualMagnitudeWithDeviationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::voiceControlType:
      return extjson_uci::type::VoiceControlType::serialize(dynamic_cast<const uci::type::VoiceControlType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::volumeChoiceType:
      return extjson_uci::type::VolumeChoiceType::serialize(dynamic_cast<const uci::type::VolumeChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::vulnerabilityLevelsCombinedType:
      return extjson_uci::type::VulnerabilityLevelsCombinedType::serialize(dynamic_cast<const uci::type::VulnerabilityLevelsCombinedType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::vulnerabilityLevelsType:
      return extjson_uci::type::VulnerabilityLevelsType::serialize(dynamic_cast<const uci::type::VulnerabilityLevelsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::vulnerabilityMetricsType:
      return extjson_uci::type::VulnerabilityMetricsType::serialize(dynamic_cast<const uci::type::VulnerabilityMetricsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::wayPointPointChoiceType:
      return extjson_uci::type::WayPointPointChoiceType::serialize(dynamic_cast<const uci::type::WayPointPointChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::wayPointType:
      return extjson_uci::type::WayPointType::serialize(dynamic_cast<const uci::type::WayPointType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weaponeeringLocationType:
      return extjson_uci::type::WeaponeeringLocationType::serialize(dynamic_cast<const uci::type::WeaponeeringLocationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weaponeeringStoreType:
      return extjson_uci::type::WeaponeeringStoreType::serialize(dynamic_cast<const uci::type::WeaponeeringStoreType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weaponeeringTargetInfoType:
      return extjson_uci::type::WeaponeeringTargetInfoType::serialize(dynamic_cast<const uci::type::WeaponeeringTargetInfoType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weaponeeringTargetType:
      return extjson_uci::type::WeaponeeringTargetType::serialize(dynamic_cast<const uci::type::WeaponeeringTargetType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weaponeeringType:
      return extjson_uci::type::WeaponeeringType::serialize(dynamic_cast<const uci::type::WeaponeeringType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weaponEffectIndicatorsType:
      return extjson_uci::type::WeaponEffectIndicatorsType::serialize(dynamic_cast<const uci::type::WeaponEffectIndicatorsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weaponRestrictionType:
      return extjson_uci::type::WeaponRestrictionType::serialize(dynamic_cast<const uci::type::WeaponRestrictionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weaponStoreType:
      return extjson_uci::type::WeaponStoreType::serialize(dynamic_cast<const uci::type::WeaponStoreType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weaponTargetPairingChoiceType:
      return extjson_uci::type::WeaponTargetPairingChoiceType::serialize(dynamic_cast<const uci::type::WeaponTargetPairingChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherAreaDataType:
      return extjson_uci::type::WeatherAreaDataType::serialize(dynamic_cast<const uci::type::WeatherAreaDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherAugmentationParametersType:
      return extjson_uci::type::WeatherAugmentationParametersType::serialize(dynamic_cast<const uci::type::WeatherAugmentationParametersType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherDatasetID_Type:
      return extjson_uci::type::WeatherDatasetID_Type::serialize(dynamic_cast<const uci::type::WeatherDatasetID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherDatasetMDT:
      return extjson_uci::type::WeatherDatasetMDT::serialize(dynamic_cast<const uci::type::WeatherDatasetMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherDatasetMT:
      return extjson_uci::type::WeatherDatasetMT::serialize(dynamic_cast<const uci::type::WeatherDatasetMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherDataType:
      return extjson_uci::type::WeatherDataType::serialize(dynamic_cast<const uci::type::WeatherDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherEffectsType:
      return extjson_uci::type::WeatherEffectsType::serialize(dynamic_cast<const uci::type::WeatherEffectsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherMDT:
      return extjson_uci::type::WeatherMDT::serialize(dynamic_cast<const uci::type::WeatherMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherMT:
      return extjson_uci::type::WeatherMT::serialize(dynamic_cast<const uci::type::WeatherMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherObservationMDT:
      return extjson_uci::type::WeatherObservationMDT::serialize(dynamic_cast<const uci::type::WeatherObservationMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherObservationMT:
      return extjson_uci::type::WeatherObservationMT::serialize(dynamic_cast<const uci::type::WeatherObservationMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarActivityMDT:
      return extjson_uci::type::WeatherRadarActivityMDT::serialize(dynamic_cast<const uci::type::WeatherRadarActivityMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarActivityMT:
      return extjson_uci::type::WeatherRadarActivityMT::serialize(dynamic_cast<const uci::type::WeatherRadarActivityMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarActivityStatusDetailType:
      return extjson_uci::type::WeatherRadarActivityStatusDetailType::serialize(dynamic_cast<const uci::type::WeatherRadarActivityStatusDetailType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarActivityType:
      return extjson_uci::type::WeatherRadarActivityType::serialize(dynamic_cast<const uci::type::WeatherRadarActivityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarCapabilityCommandType:
      return extjson_uci::type::WeatherRadarCapabilityCommandType::serialize(dynamic_cast<const uci::type::WeatherRadarCapabilityCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarCapabilityMDT:
      return extjson_uci::type::WeatherRadarCapabilityMDT::serialize(dynamic_cast<const uci::type::WeatherRadarCapabilityMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarCapabilityMT:
      return extjson_uci::type::WeatherRadarCapabilityMT::serialize(dynamic_cast<const uci::type::WeatherRadarCapabilityMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarCapabilityStatusMDT:
      return extjson_uci::type::WeatherRadarCapabilityStatusMDT::serialize(dynamic_cast<const uci::type::WeatherRadarCapabilityStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarCapabilityStatusMT:
      return extjson_uci::type::WeatherRadarCapabilityStatusMT::serialize(dynamic_cast<const uci::type::WeatherRadarCapabilityStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarCapabilityType:
      return extjson_uci::type::WeatherRadarCapabilityType::serialize(dynamic_cast<const uci::type::WeatherRadarCapabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarCellLocationType:
      return extjson_uci::type::WeatherRadarCellLocationType::serialize(dynamic_cast<const uci::type::WeatherRadarCellLocationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarCellSizeType:
      return extjson_uci::type::WeatherRadarCellSizeType::serialize(dynamic_cast<const uci::type::WeatherRadarCellSizeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarCellType:
      return extjson_uci::type::WeatherRadarCellType::serialize(dynamic_cast<const uci::type::WeatherRadarCellType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarCommandMDT:
      return extjson_uci::type::WeatherRadarCommandMDT::serialize(dynamic_cast<const uci::type::WeatherRadarCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarCommandMT:
      return extjson_uci::type::WeatherRadarCommandMT::serialize(dynamic_cast<const uci::type::WeatherRadarCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarCommandStatusMDT:
      return extjson_uci::type::WeatherRadarCommandStatusMDT::serialize(dynamic_cast<const uci::type::WeatherRadarCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarCommandStatusMT:
      return extjson_uci::type::WeatherRadarCommandStatusMT::serialize(dynamic_cast<const uci::type::WeatherRadarCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarCommandType:
      return extjson_uci::type::WeatherRadarCommandType::serialize(dynamic_cast<const uci::type::WeatherRadarCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarObservationMDT:
      return extjson_uci::type::WeatherRadarObservationMDT::serialize(dynamic_cast<const uci::type::WeatherRadarObservationMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarObservationMT:
      return extjson_uci::type::WeatherRadarObservationMT::serialize(dynamic_cast<const uci::type::WeatherRadarObservationMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarOptionsType:
      return extjson_uci::type::WeatherRadarOptionsType::serialize(dynamic_cast<const uci::type::WeatherRadarOptionsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarSettingsCommandMDT:
      return extjson_uci::type::WeatherRadarSettingsCommandMDT::serialize(dynamic_cast<const uci::type::WeatherRadarSettingsCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarSettingsCommandMT:
      return extjson_uci::type::WeatherRadarSettingsCommandMT::serialize(dynamic_cast<const uci::type::WeatherRadarSettingsCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarSettingsCommandStatusMDT:
      return extjson_uci::type::WeatherRadarSettingsCommandStatusMDT::serialize(dynamic_cast<const uci::type::WeatherRadarSettingsCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarSettingsCommandStatusMT:
      return extjson_uci::type::WeatherRadarSettingsCommandStatusMT::serialize(dynamic_cast<const uci::type::WeatherRadarSettingsCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherRadarTaskType:
      return extjson_uci::type::WeatherRadarTaskType::serialize(dynamic_cast<const uci::type::WeatherRadarTaskType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherReportDataType:
      return extjson_uci::type::WeatherReportDataType::serialize(dynamic_cast<const uci::type::WeatherReportDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherReportGridDataType:
      return extjson_uci::type::WeatherReportGridDataType::serialize(dynamic_cast<const uci::type::WeatherReportGridDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherReportType:
      return extjson_uci::type::WeatherReportType::serialize(dynamic_cast<const uci::type::WeatherReportType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weatherWarningDataType:
      return extjson_uci::type::WeatherWarningDataType::serialize(dynamic_cast<const uci::type::WeatherWarningDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::weekdayIntervalType:
      return extjson_uci::type::WeekdayIntervalType::serialize(dynamic_cast<const uci::type::WeekdayIntervalType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::wideband_SOI_ParamsType:
      return extjson_uci::type::Wideband_SOI_ParamsType::serialize(dynamic_cast<const uci::type::Wideband_SOI_ParamsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::wildcardElementType:
      return extjson_uci::type::WildcardElementType::serialize(dynamic_cast<const uci::type::WildcardElementType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::windDataChoiceType:
      return extjson_uci::type::WindDataChoiceType::serialize(dynamic_cast<const uci::type::WindDataChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::windDataType:
      return extjson_uci::type::WindDataType::serialize(dynamic_cast<const uci::type::WindDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::windMagnitudeType:
      return extjson_uci::type::WindMagnitudeType::serialize(dynamic_cast<const uci::type::WindMagnitudeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingEOB_ID_Type:
      return extjson_uci::type::WorkingEOB_ID_Type::serialize(dynamic_cast<const uci::type::WorkingEOB_ID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingEOB_MDT:
      return extjson_uci::type::WorkingEOB_MDT::serialize(dynamic_cast<const uci::type::WorkingEOB_MDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingEOB_MT:
      return extjson_uci::type::WorkingEOB_MT::serialize(dynamic_cast<const uci::type::WorkingEOB_MT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingEOB_RequestMDT:
      return extjson_uci::type::WorkingEOB_RequestMDT::serialize(dynamic_cast<const uci::type::WorkingEOB_RequestMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingEOB_RequestMT:
      return extjson_uci::type::WorkingEOB_RequestMT::serialize(dynamic_cast<const uci::type::WorkingEOB_RequestMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingEOB_RequestStatusMDT:
      return extjson_uci::type::WorkingEOB_RequestStatusMDT::serialize(dynamic_cast<const uci::type::WorkingEOB_RequestStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingEOB_RequestStatusMT:
      return extjson_uci::type::WorkingEOB_RequestStatusMT::serialize(dynamic_cast<const uci::type::WorkingEOB_RequestStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingEOB_SourceID_ChoiceType:
      return extjson_uci::type::WorkingEOB_SourceID_ChoiceType::serialize(dynamic_cast<const uci::type::WorkingEOB_SourceID_ChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingSOB_ID_Type:
      return extjson_uci::type::WorkingSOB_ID_Type::serialize(dynamic_cast<const uci::type::WorkingSOB_ID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingSOB_MDT:
      return extjson_uci::type::WorkingSOB_MDT::serialize(dynamic_cast<const uci::type::WorkingSOB_MDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingSOB_MT:
      return extjson_uci::type::WorkingSOB_MT::serialize(dynamic_cast<const uci::type::WorkingSOB_MT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingSOB_RequestMDT:
      return extjson_uci::type::WorkingSOB_RequestMDT::serialize(dynamic_cast<const uci::type::WorkingSOB_RequestMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingSOB_RequestMT:
      return extjson_uci::type::WorkingSOB_RequestMT::serialize(dynamic_cast<const uci::type::WorkingSOB_RequestMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingSOB_RequestStatusMDT:
      return extjson_uci::type::WorkingSOB_RequestStatusMDT::serialize(dynamic_cast<const uci::type::WorkingSOB_RequestStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingSOB_RequestStatusMT:
      return extjson_uci::type::WorkingSOB_RequestStatusMT::serialize(dynamic_cast<const uci::type::WorkingSOB_RequestStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::workingSOB_SourceID_ChoiceType:
      return extjson_uci::type::WorkingSOB_SourceID_ChoiceType::serialize(dynamic_cast<const uci::type::WorkingSOB_SourceID_ChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::z_ChoiceType:
      return extjson_uci::type::Z_ChoiceType::serialize(dynamic_cast<const uci::type::Z_ChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::zoneChoiceType:
      return extjson_uci::type::ZoneChoiceType::serialize(dynamic_cast<const uci::type::ZoneChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::zoneExternalType:
      return extjson_uci::type::ZoneExternalType::serialize(dynamic_cast<const uci::type::ZoneExternalType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::zoneInclusionType:
      return extjson_uci::type::ZoneInclusionType::serialize(dynamic_cast<const uci::type::ZoneInclusionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::zoneType:
      return extjson_uci::type::ZoneType::serialize(dynamic_cast<const uci::type::ZoneType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::zoneViolationTriggerDataType:
      return extjson_uci::type::ZoneViolationTriggerDataType::serialize(dynamic_cast<const uci::type::ZoneViolationTriggerDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::accessEffortEnum:
      return extjson_uci::type::AccessEffortEnum::serialize(dynamic_cast<const uci::type::AccessEffortEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::achievabilityEnum:
      return extjson_uci::type::AchievabilityEnum::serialize(dynamic_cast<const uci::type::AchievabilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::actionMessageOutputsEnum:
      return extjson_uci::type::ActionMessageOutputsEnum::serialize(dynamic_cast<const uci::type::ActionMessageOutputsEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::actionTypeEnum:
      return extjson_uci::type::ActionTypeEnum::serialize(dynamic_cast<const uci::type::ActionTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::activityBasisEnum:
      return extjson_uci::type::ActivityBasisEnum::serialize(dynamic_cast<const uci::type::ActivityBasisEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::activityExecutionStatusEnum:
      return extjson_uci::type::ActivityExecutionStatusEnum::serialize(dynamic_cast<const uci::type::ActivityExecutionStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::activityPlanPartsEnum:
      return extjson_uci::type::ActivityPlanPartsEnum::serialize(dynamic_cast<const uci::type::ActivityPlanPartsEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::activityStateEnum:
      return extjson_uci::type::ActivityStateEnum::serialize(dynamic_cast<const uci::type::ActivityStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::activitySubCategoryEnum:
      return extjson_uci::type::ActivitySubCategoryEnum::serialize(dynamic_cast<const uci::type::ActivitySubCategoryEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::activityTransitionEnum:
      return extjson_uci::type::ActivityTransitionEnum::serialize(dynamic_cast<const uci::type::ActivityTransitionEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::airfieldStoresEnum:
      return extjson_uci::type::AirfieldStoresEnum::serialize(dynamic_cast<const uci::type::AirfieldStoresEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::airRaidStateEnum:
      return extjson_uci::type::AirRaidStateEnum::serialize(dynamic_cast<const uci::type::AirRaidStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::airSampleCapabilityEnum:
      return extjson_uci::type::AirSampleCapabilityEnum::serialize(dynamic_cast<const uci::type::AirSampleCapabilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::airSampleMessageOutputsEnum:
      return extjson_uci::type::AirSampleMessageOutputsEnum::serialize(dynamic_cast<const uci::type::AirSampleMessageOutputsEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::altitudeReferenceEnum:
      return extjson_uci::type::AltitudeReferenceEnum::serialize(dynamic_cast<const uci::type::AltitudeReferenceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::altitudeSourceEnum:
      return extjson_uci::type::AltitudeSourceEnum::serialize(dynamic_cast<const uci::type::AltitudeSourceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::ambiguityOrderingEnum:
      return extjson_uci::type::AmbiguityOrderingEnum::serialize(dynamic_cast<const uci::type::AmbiguityOrderingEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::aMTI_CapabilityEnum:
      return extjson_uci::type::AMTI_CapabilityEnum::serialize(dynamic_cast<const uci::type::AMTI_CapabilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::aMTI_MessageOutputsEnum:
      return extjson_uci::type::AMTI_MessageOutputsEnum::serialize(dynamic_cast<const uci::type::AMTI_MessageOutputsEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::aMTI_SubCapabilityEnum:
      return extjson_uci::type::AMTI_SubCapabilityEnum::serialize(dynamic_cast<const uci::type::AMTI_SubCapabilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::antennaTypeEnum:
      return extjson_uci::type::AntennaTypeEnum::serialize(dynamic_cast<const uci::type::AntennaTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::aO_CapabilityEnum:
      return extjson_uci::type::AO_CapabilityEnum::serialize(dynamic_cast<const uci::type::AO_CapabilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::aO_MessageOutputsEnum:
      return extjson_uci::type::AO_MessageOutputsEnum::serialize(dynamic_cast<const uci::type::AO_MessageOutputsEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::approachConditionStatusEnum:
      return extjson_uci::type::ApproachConditionStatusEnum::serialize(dynamic_cast<const uci::type::ApproachConditionStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::approachLightingEnum:
      return extjson_uci::type::ApproachLightingEnum::serialize(dynamic_cast<const uci::type::ApproachLightingEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::approvalRequirementEnum:
      return extjson_uci::type::ApprovalRequirementEnum::serialize(dynamic_cast<const uci::type::ApprovalRequirementEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::approvalResponseEnum:
      return extjson_uci::type::ApprovalResponseEnum::serialize(dynamic_cast<const uci::type::ApprovalResponseEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::approvalStateEnum:
      return extjson_uci::type::ApprovalStateEnum::serialize(dynamic_cast<const uci::type::ApprovalStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::approvalStatusEnum:
      return extjson_uci::type::ApprovalStatusEnum::serialize(dynamic_cast<const uci::type::ApprovalStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::arresterWiresEnum:
      return extjson_uci::type::ArresterWiresEnum::serialize(dynamic_cast<const uci::type::ArresterWiresEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::aS_IntegratorModeEnum:
      return extjson_uci::type::AS_IntegratorModeEnum::serialize(dynamic_cast<const uci::type::AS_IntegratorModeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::aS_IntegratorStepModeEnum:
      return extjson_uci::type::AS_IntegratorStepModeEnum::serialize(dynamic_cast<const uci::type::AS_IntegratorStepModeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::aS_PartialDerivativesEnum:
      return extjson_uci::type::AS_PartialDerivativesEnum::serialize(dynamic_cast<const uci::type::AS_PartialDerivativesEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::assessmentStatusEnum:
      return extjson_uci::type::AssessmentStatusEnum::serialize(dynamic_cast<const uci::type::AssessmentStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::assessmentSuppressionEnum:
      return extjson_uci::type::AssessmentSuppressionEnum::serialize(dynamic_cast<const uci::type::AssessmentSuppressionEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::associatedAccessAssessmentInfoEnum:
      return extjson_uci::type::AssociatedAccessAssessmentInfoEnum::serialize(dynamic_cast<const uci::type::AssociatedAccessAssessmentInfoEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::atmosphereModelEnum:
      return extjson_uci::type::AtmosphereModelEnum::serialize(dynamic_cast<const uci::type::AtmosphereModelEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::autonomousActionStatusEnum:
      return extjson_uci::type::AutonomousActionStatusEnum::serialize(dynamic_cast<const uci::type::AutonomousActionStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::autopilotModeEnum:
      return extjson_uci::type::AutopilotModeEnum::serialize(dynamic_cast<const uci::type::AutopilotModeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::beamPowerModeEnum:
      return extjson_uci::type::BeamPowerModeEnum::serialize(dynamic_cast<const uci::type::BeamPowerModeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::beamWeightingEnum:
      return extjson_uci::type::BeamWeightingEnum::serialize(dynamic_cast<const uci::type::BeamWeightingEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::behavioralChangeEnum:
      return extjson_uci::type::BehavioralChangeEnum::serialize(dynamic_cast<const uci::type::BehavioralChangeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::bodyFaceEnum:
      return extjson_uci::type::BodyFaceEnum::serialize(dynamic_cast<const uci::type::BodyFaceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::bodyReferenceEnum:
      return extjson_uci::type::BodyReferenceEnum::serialize(dynamic_cast<const uci::type::BodyReferenceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::brakingActionEnum:
      return extjson_uci::type::BrakingActionEnum::serialize(dynamic_cast<const uci::type::BrakingActionEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cannotComplyEnum:
      return extjson_uci::type::CannotComplyEnum::serialize(dynamic_cast<const uci::type::CannotComplyEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::capabilityAvailabilityEnum:
      return extjson_uci::type::CapabilityAvailabilityEnum::serialize(dynamic_cast<const uci::type::CapabilityAvailabilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::capabilityCommandStateEnum:
      return extjson_uci::type::CapabilityCommandStateEnum::serialize(dynamic_cast<const uci::type::CapabilityCommandStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::capabilityControlInterfacesEnum:
      return extjson_uci::type::CapabilityControlInterfacesEnum::serialize(dynamic_cast<const uci::type::CapabilityControlInterfacesEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::capabilityCoverageAreaBasisEnum:
      return extjson_uci::type::CapabilityCoverageAreaBasisEnum::serialize(dynamic_cast<const uci::type::CapabilityCoverageAreaBasisEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::capabilityCoverageAreaFactorEnum:
      return extjson_uci::type::CapabilityCoverageAreaFactorEnum::serialize(dynamic_cast<const uci::type::CapabilityCoverageAreaFactorEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::capabilityInitiationEnum:
      return extjson_uci::type::CapabilityInitiationEnum::serialize(dynamic_cast<const uci::type::CapabilityInitiationEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::capabilityTypeEnum:
      return extjson_uci::type::CapabilityTypeEnum::serialize(dynamic_cast<const uci::type::CapabilityTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cargoDeliveryCapabilityEnum:
      return extjson_uci::type::CargoDeliveryCapabilityEnum::serialize(dynamic_cast<const uci::type::CargoDeliveryCapabilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cargoDeliverySubCapabilityEnum:
      return extjson_uci::type::CargoDeliverySubCapabilityEnum::serialize(dynamic_cast<const uci::type::CargoDeliverySubCapabilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cargoPackagingEnum:
      return extjson_uci::type::CargoPackagingEnum::serialize(dynamic_cast<const uci::type::CargoPackagingEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::celestialBodyEphemerisSourceEnum:
      return extjson_uci::type::CelestialBodyEphemerisSourceEnum::serialize(dynamic_cast<const uci::type::CelestialBodyEphemerisSourceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::celestialBodyNameEnum:
      return extjson_uci::type::CelestialBodyNameEnum::serialize(dynamic_cast<const uci::type::CelestialBodyNameEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::characterizationProductTypeEnum:
      return extjson_uci::type::CharacterizationProductTypeEnum::serialize(dynamic_cast<const uci::type::CharacterizationProductTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::characterizationTypeEnum:
      return extjson_uci::type::CharacterizationTypeEnum::serialize(dynamic_cast<const uci::type::CharacterizationTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::clearIdentityValuesEnum:
      return extjson_uci::type::ClearIdentityValuesEnum::serialize(dynamic_cast<const uci::type::ClearIdentityValuesEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::climbOptimizationEnum:
      return extjson_uci::type::ClimbOptimizationEnum::serialize(dynamic_cast<const uci::type::ClimbOptimizationEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cOARPS_SAR_CollectionOptionsEnum:
      return extjson_uci::type::COARPS_SAR_CollectionOptionsEnum::serialize(dynamic_cast<const uci::type::COARPS_SAR_CollectionOptionsEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cOARPS_SMTI_CollectionOptionsEnum:
      return extjson_uci::type::COARPS_SMTI_CollectionOptionsEnum::serialize(dynamic_cast<const uci::type::COARPS_SMTI_CollectionOptionsEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::collectionObjectiveEnum:
      return extjson_uci::type::CollectionObjectiveEnum::serialize(dynamic_cast<const uci::type::CollectionObjectiveEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::collectionPatternEnum:
      return extjson_uci::type::CollectionPatternEnum::serialize(dynamic_cast<const uci::type::CollectionPatternEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::collectionPolicyEnum:
      return extjson_uci::type::CollectionPolicyEnum::serialize(dynamic_cast<const uci::type::CollectionPolicyEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cOMINT_DwellStateEnum:
      return extjson_uci::type::COMINT_DwellStateEnum::serialize(dynamic_cast<const uci::type::COMINT_DwellStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cOMINT_DwellTypeEnum:
      return extjson_uci::type::COMINT_DwellTypeEnum::serialize(dynamic_cast<const uci::type::COMINT_DwellTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cOMINT_SubCapabilityEnum:
      return extjson_uci::type::COMINT_SubCapabilityEnum::serialize(dynamic_cast<const uci::type::COMINT_SubCapabilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commAcquisitionModeTypeEnum:
      return extjson_uci::type::CommAcquisitionModeTypeEnum::serialize(dynamic_cast<const uci::type::CommAcquisitionModeTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commAllocationTransitionEnum:
      return extjson_uci::type::CommAllocationTransitionEnum::serialize(dynamic_cast<const uci::type::CommAllocationTransitionEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commandProcessingStateEnum:
      return extjson_uci::type::CommandProcessingStateEnum::serialize(dynamic_cast<const uci::type::CommandProcessingStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commandStateEnum:
      return extjson_uci::type::CommandStateEnum::serialize(dynamic_cast<const uci::type::CommandStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commAssetCategoryEnum:
      return extjson_uci::type::CommAssetCategoryEnum::serialize(dynamic_cast<const uci::type::CommAssetCategoryEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commAssetEstimationMessageEnum:
      return extjson_uci::type::CommAssetEstimationMessageEnum::serialize(dynamic_cast<const uci::type::CommAssetEstimationMessageEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commCapabilityEnum:
      return extjson_uci::type::CommCapabilityEnum::serialize(dynamic_cast<const uci::type::CommCapabilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commCDL_LinkFallbackStateEnum:
      return extjson_uci::type::CommCDL_LinkFallbackStateEnum::serialize(dynamic_cast<const uci::type::CommCDL_LinkFallbackStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commCDL_RemoteMessageProcessingEnum:
      return extjson_uci::type::CommCDL_RemoteMessageProcessingEnum::serialize(dynamic_cast<const uci::type::CommCDL_RemoteMessageProcessingEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commComsecModeTypeEnum:
      return extjson_uci::type::CommComsecModeTypeEnum::serialize(dynamic_cast<const uci::type::CommComsecModeTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commComsecModeTypeRequestEnum:
      return extjson_uci::type::CommComsecModeTypeRequestEnum::serialize(dynamic_cast<const uci::type::CommComsecModeTypeRequestEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commConfigurationStateEnum:
      return extjson_uci::type::CommConfigurationStateEnum::serialize(dynamic_cast<const uci::type::CommConfigurationStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commConnectionCommandEnum:
      return extjson_uci::type::CommConnectionCommandEnum::serialize(dynamic_cast<const uci::type::CommConnectionCommandEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commConnectionStateEnum:
      return extjson_uci::type::CommConnectionStateEnum::serialize(dynamic_cast<const uci::type::CommConnectionStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commCountermeasureSetEnum:
      return extjson_uci::type::CommCountermeasureSetEnum::serialize(dynamic_cast<const uci::type::CommCountermeasureSetEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commDataDirectionFiltrationEnum:
      return extjson_uci::type::CommDataDirectionFiltrationEnum::serialize(dynamic_cast<const uci::type::CommDataDirectionFiltrationEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commDataFormatEnum:
      return extjson_uci::type::CommDataFormatEnum::serialize(dynamic_cast<const uci::type::CommDataFormatEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commIFDL_AcqControlEnum:
      return extjson_uci::type::CommIFDL_AcqControlEnum::serialize(dynamic_cast<const uci::type::CommIFDL_AcqControlEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commIFDL_CommModeEnum:
      return extjson_uci::type::CommIFDL_CommModeEnum::serialize(dynamic_cast<const uci::type::CommIFDL_CommModeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commIFDL_FlightSizeEnum:
      return extjson_uci::type::CommIFDL_FlightSizeEnum::serialize(dynamic_cast<const uci::type::CommIFDL_FlightSizeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commIFDL_TxRateEnum:
      return extjson_uci::type::CommIFDL_TxRateEnum::serialize(dynamic_cast<const uci::type::CommIFDL_TxRateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commLink16_AdvanceSlotNotificationModeEnum:
      return extjson_uci::type::CommLink16_AdvanceSlotNotificationModeEnum::serialize(dynamic_cast<const uci::type::CommLink16_AdvanceSlotNotificationModeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commLink16_PPLI_PoolEnum:
      return extjson_uci::type::CommLink16_PPLI_PoolEnum::serialize(dynamic_cast<const uci::type::CommLink16_PPLI_PoolEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commLink16EnhancedThroughputCodeRateEnum:
      return extjson_uci::type::CommLink16EnhancedThroughputCodeRateEnum::serialize(dynamic_cast<const uci::type::CommLink16EnhancedThroughputCodeRateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commLink16InitialEntryGroupEnum:
      return extjson_uci::type::CommLink16InitialEntryGroupEnum::serialize(dynamic_cast<const uci::type::CommLink16InitialEntryGroupEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commLink16InterferenceProtModeEnum:
      return extjson_uci::type::CommLink16InterferenceProtModeEnum::serialize(dynamic_cast<const uci::type::CommLink16InterferenceProtModeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commLink16RangeModeEnum:
      return extjson_uci::type::CommLink16RangeModeEnum::serialize(dynamic_cast<const uci::type::CommLink16RangeModeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commLink16TransmitAntennaEnum:
      return extjson_uci::type::CommLink16TransmitAntennaEnum::serialize(dynamic_cast<const uci::type::CommLink16TransmitAntennaEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commLink16TransmitModeEnum:
      return extjson_uci::type::CommLink16TransmitModeEnum::serialize(dynamic_cast<const uci::type::CommLink16TransmitModeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commLink16TxPackingLimitEnum:
      return extjson_uci::type::CommLink16TxPackingLimitEnum::serialize(dynamic_cast<const uci::type::CommLink16TxPackingLimitEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commLink16TxPowerSelectionEnum:
      return extjson_uci::type::CommLink16TxPowerSelectionEnum::serialize(dynamic_cast<const uci::type::CommLink16TxPowerSelectionEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commMADL_AircraftTypeEnum:
      return extjson_uci::type::CommMADL_AircraftTypeEnum::serialize(dynamic_cast<const uci::type::CommMADL_AircraftTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commMADL_DataRateTypeEnum:
      return extjson_uci::type::CommMADL_DataRateTypeEnum::serialize(dynamic_cast<const uci::type::CommMADL_DataRateTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commMADL_LinkStateEnum:
      return extjson_uci::type::CommMADL_LinkStateEnum::serialize(dynamic_cast<const uci::type::CommMADL_LinkStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commMADL_NetChangeOpEnum:
      return extjson_uci::type::CommMADL_NetChangeOpEnum::serialize(dynamic_cast<const uci::type::CommMADL_NetChangeOpEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commMADL_NetChangeStatusEnum:
      return extjson_uci::type::CommMADL_NetChangeStatusEnum::serialize(dynamic_cast<const uci::type::CommMADL_NetChangeStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commMADL_NetLinkOpStateEnum:
      return extjson_uci::type::CommMADL_NetLinkOpStateEnum::serialize(dynamic_cast<const uci::type::CommMADL_NetLinkOpStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commMADL_NetLinkSearchModeEnum:
      return extjson_uci::type::CommMADL_NetLinkSearchModeEnum::serialize(dynamic_cast<const uci::type::CommMADL_NetLinkSearchModeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commMADL_NodeDataValidityEnum:
      return extjson_uci::type::CommMADL_NodeDataValidityEnum::serialize(dynamic_cast<const uci::type::CommMADL_NodeDataValidityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commMADL_SearchTypeEnum:
      return extjson_uci::type::CommMADL_SearchTypeEnum::serialize(dynamic_cast<const uci::type::CommMADL_SearchTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commMADL_TimeSlotOE_PhaseTypeEnum:
      return extjson_uci::type::CommMADL_TimeSlotOE_PhaseTypeEnum::serialize(dynamic_cast<const uci::type::CommMADL_TimeSlotOE_PhaseTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commMADL_TimeSlotTxPhaseTypeEnum:
      return extjson_uci::type::CommMADL_TimeSlotTxPhaseTypeEnum::serialize(dynamic_cast<const uci::type::CommMADL_TimeSlotTxPhaseTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commMADL_TimeSourceEnum:
      return extjson_uci::type::CommMADL_TimeSourceEnum::serialize(dynamic_cast<const uci::type::CommMADL_TimeSourceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commMADL_VoiceRxIndicatorTypeEnum:
      return extjson_uci::type::CommMADL_VoiceRxIndicatorTypeEnum::serialize(dynamic_cast<const uci::type::CommMADL_VoiceRxIndicatorTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commModeEnum:
      return extjson_uci::type::CommModeEnum::serialize(dynamic_cast<const uci::type::CommModeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commModulationTypeEnum:
      return extjson_uci::type::CommModulationTypeEnum::serialize(dynamic_cast<const uci::type::CommModulationTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commPointingAssessmentEnum:
      return extjson_uci::type::CommPointingAssessmentEnum::serialize(dynamic_cast<const uci::type::CommPointingAssessmentEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commPointingRequestEnum:
      return extjson_uci::type::CommPointingRequestEnum::serialize(dynamic_cast<const uci::type::CommPointingRequestEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commRangeModeTypeEnum:
      return extjson_uci::type::CommRangeModeTypeEnum::serialize(dynamic_cast<const uci::type::CommRangeModeTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commReceiverStateEnum:
      return extjson_uci::type::CommReceiverStateEnum::serialize(dynamic_cast<const uci::type::CommReceiverStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commRelayMessageOutputsEnum:
      return extjson_uci::type::CommRelayMessageOutputsEnum::serialize(dynamic_cast<const uci::type::CommRelayMessageOutputsEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commRelayStateEnum:
      return extjson_uci::type::CommRelayStateEnum::serialize(dynamic_cast<const uci::type::CommRelayStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commRequestActionEnum:
      return extjson_uci::type::CommRequestActionEnum::serialize(dynamic_cast<const uci::type::CommRequestActionEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commSATCOM_ServiceTypeEnum:
      return extjson_uci::type::CommSATCOM_ServiceTypeEnum::serialize(dynamic_cast<const uci::type::CommSATCOM_ServiceTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commSchedulingRequestApprovalStatusEnum:
      return extjson_uci::type::CommSchedulingRequestApprovalStatusEnum::serialize(dynamic_cast<const uci::type::CommSchedulingRequestApprovalStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commSchedulingRequirementStateEnum:
      return extjson_uci::type::CommSchedulingRequirementStateEnum::serialize(dynamic_cast<const uci::type::CommSchedulingRequirementStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commSchedulingScopeEnum:
      return extjson_uci::type::CommSchedulingScopeEnum::serialize(dynamic_cast<const uci::type::CommSchedulingScopeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commSINCGARS_FreqModeEnum:
      return extjson_uci::type::CommSINCGARS_FreqModeEnum::serialize(dynamic_cast<const uci::type::CommSINCGARS_FreqModeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commTerminalPlanActivationStateEnum:
      return extjson_uci::type::CommTerminalPlanActivationStateEnum::serialize(dynamic_cast<const uci::type::CommTerminalPlanActivationStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commTerminalPlanApprovalStatusEnum:
      return extjson_uci::type::CommTerminalPlanApprovalStatusEnum::serialize(dynamic_cast<const uci::type::CommTerminalPlanApprovalStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::commTransmitterStateEnum:
      return extjson_uci::type::CommTransmitterStateEnum::serialize(dynamic_cast<const uci::type::CommTransmitterStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::communicationsImpairmentEnum:
      return extjson_uci::type::CommunicationsImpairmentEnum::serialize(dynamic_cast<const uci::type::CommunicationsImpairmentEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::componentControlInterfacesEnum:
      return extjson_uci::type::ComponentControlInterfacesEnum::serialize(dynamic_cast<const uci::type::ComponentControlInterfacesEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::componentElementStateEnum:
      return extjson_uci::type::ComponentElementStateEnum::serialize(dynamic_cast<const uci::type::ComponentElementStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::componentSettingEnum:
      return extjson_uci::type::ComponentSettingEnum::serialize(dynamic_cast<const uci::type::ComponentSettingEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::componentStateCommandEnum:
      return extjson_uci::type::ComponentStateCommandEnum::serialize(dynamic_cast<const uci::type::ComponentStateCommandEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::componentStateEnum:
      return extjson_uci::type::ComponentStateEnum::serialize(dynamic_cast<const uci::type::ComponentStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::componentStatusRequestEnum:
      return extjson_uci::type::ComponentStatusRequestEnum::serialize(dynamic_cast<const uci::type::ComponentStatusRequestEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::componentTypeEnum:
      return extjson_uci::type::ComponentTypeEnum::serialize(dynamic_cast<const uci::type::ComponentTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::confidenceLevelEnum:
      return extjson_uci::type::ConfidenceLevelEnum::serialize(dynamic_cast<const uci::type::ConfidenceLevelEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::conflictStateEnum:
      return extjson_uci::type::ConflictStateEnum::serialize(dynamic_cast<const uci::type::ConflictStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::connectionStatusEnum:
      return extjson_uci::type::ConnectionStatusEnum::serialize(dynamic_cast<const uci::type::ConnectionStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::consentEnum:
      return extjson_uci::type::ConsentEnum::serialize(dynamic_cast<const uci::type::ConsentEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::constrainedPlanIncorporationEnum:
      return extjson_uci::type::ConstrainedPlanIncorporationEnum::serialize(dynamic_cast<const uci::type::ConstrainedPlanIncorporationEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::controlInterfaceEnum:
      return extjson_uci::type::ControlInterfaceEnum::serialize(dynamic_cast<const uci::type::ControlInterfaceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::controlRequestEnum:
      return extjson_uci::type::ControlRequestEnum::serialize(dynamic_cast<const uci::type::ControlRequestEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::controlTypeEnum:
      return extjson_uci::type::ControlTypeEnum::serialize(dynamic_cast<const uci::type::ControlTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::coordinationRiskEnum:
      return extjson_uci::type::CoordinationRiskEnum::serialize(dynamic_cast<const uci::type::CoordinationRiskEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::correlationIndicatorEnum:
      return extjson_uci::type::CorrelationIndicatorEnum::serialize(dynamic_cast<const uci::type::CorrelationIndicatorEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::covarianceMatrixCategoryEnum:
      return extjson_uci::type::CovarianceMatrixCategoryEnum::serialize(dynamic_cast<const uci::type::CovarianceMatrixCategoryEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::coverageEffortEnum:
      return extjson_uci::type::CoverageEffortEnum::serialize(dynamic_cast<const uci::type::CoverageEffortEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::crashServiceEnum:
      return extjson_uci::type::CrashServiceEnum::serialize(dynamic_cast<const uci::type::CrashServiceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::creationSourceEnum:
      return extjson_uci::type::CreationSourceEnum::serialize(dynamic_cast<const uci::type::CreationSourceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cryptoDS101_Enum:
      return extjson_uci::type::CryptoDS101_Enum::serialize(dynamic_cast<const uci::type::CryptoDS101_Enum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cryptoKeyStatusEnum:
      return extjson_uci::type::CryptoKeyStatusEnum::serialize(dynamic_cast<const uci::type::CryptoKeyStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cryptoLoadStateEnum:
      return extjson_uci::type::CryptoLoadStateEnum::serialize(dynamic_cast<const uci::type::CryptoLoadStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cryptoLoadTypeEnum:
      return extjson_uci::type::CryptoLoadTypeEnum::serialize(dynamic_cast<const uci::type::CryptoLoadTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cryptoOTAM_Enum:
      return extjson_uci::type::CryptoOTAM_Enum::serialize(dynamic_cast<const uci::type::CryptoOTAM_Enum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cryptoRolloverActionEnum:
      return extjson_uci::type::CryptoRolloverActionEnum::serialize(dynamic_cast<const uci::type::CryptoRolloverActionEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cryptoRolloverMethodEnum:
      return extjson_uci::type::CryptoRolloverMethodEnum::serialize(dynamic_cast<const uci::type::CryptoRolloverMethodEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cryptoRolloverStateEnum:
      return extjson_uci::type::CryptoRolloverStateEnum::serialize(dynamic_cast<const uci::type::CryptoRolloverStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cryptoSlotGroupStateEnum:
      return extjson_uci::type::CryptoSlotGroupStateEnum::serialize(dynamic_cast<const uci::type::CryptoSlotGroupStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cryptoTypeEnum:
      return extjson_uci::type::CryptoTypeEnum::serialize(dynamic_cast<const uci::type::CryptoTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cS_CapabilityEnum:
      return extjson_uci::type::CS_CapabilityEnum::serialize(dynamic_cast<const uci::type::CS_CapabilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cS_KindEnum:
      return extjson_uci::type::CS_KindEnum::serialize(dynamic_cast<const uci::type::CS_KindEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cS_PostureEnum:
      return extjson_uci::type::CS_PostureEnum::serialize(dynamic_cast<const uci::type::CS_PostureEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cS_SensorPointingEnum:
      return extjson_uci::type::CS_SensorPointingEnum::serialize(dynamic_cast<const uci::type::CS_SensorPointingEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cS_SensorTargetingEnum:
      return extjson_uci::type::CS_SensorTargetingEnum::serialize(dynamic_cast<const uci::type::CS_SensorTargetingEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cS_SensorTypeEnum:
      return extjson_uci::type::CS_SensorTypeEnum::serialize(dynamic_cast<const uci::type::CS_SensorTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cSO_StateEnum:
      return extjson_uci::type::CSO_StateEnum::serialize(dynamic_cast<const uci::type::CSO_StateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cTR_StateEnum:
      return extjson_uci::type::CTR_StateEnum::serialize(dynamic_cast<const uci::type::CTR_StateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::cyberTypeEnum:
      return extjson_uci::type::CyberTypeEnum::serialize(dynamic_cast<const uci::type::CyberTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::damageCategoryEnum:
      return extjson_uci::type::DamageCategoryEnum::serialize(dynamic_cast<const uci::type::DamageCategoryEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::damageCauseEnum:
      return extjson_uci::type::DamageCauseEnum::serialize(dynamic_cast<const uci::type::DamageCauseEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::damageConfidenceEnum:
      return extjson_uci::type::DamageConfidenceEnum::serialize(dynamic_cast<const uci::type::DamageConfidenceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::damagedFunctionEnum:
      return extjson_uci::type::DamagedFunctionEnum::serialize(dynamic_cast<const uci::type::DamagedFunctionEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::damageEstimateContentsEnum:
      return extjson_uci::type::DamageEstimateContentsEnum::serialize(dynamic_cast<const uci::type::DamageEstimateContentsEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::damageLevelEnum:
      return extjson_uci::type::DamageLevelEnum::serialize(dynamic_cast<const uci::type::DamageLevelEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::damageObservationEnum:
      return extjson_uci::type::DamageObservationEnum::serialize(dynamic_cast<const uci::type::DamageObservationEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::damageSignificanceEnum:
      return extjson_uci::type::DamageSignificanceEnum::serialize(dynamic_cast<const uci::type::DamageSignificanceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::datalinkControlStatusEnum:
      return extjson_uci::type::DatalinkControlStatusEnum::serialize(dynamic_cast<const uci::type::DatalinkControlStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::dataPlanActivationStateEnum:
      return extjson_uci::type::DataPlanActivationStateEnum::serialize(dynamic_cast<const uci::type::DataPlanActivationStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::dataPlanApprovalStatusEnum:
      return extjson_uci::type::DataPlanApprovalStatusEnum::serialize(dynamic_cast<const uci::type::DataPlanApprovalStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::dataStoreActionEnum:
      return extjson_uci::type::DataStoreActionEnum::serialize(dynamic_cast<const uci::type::DataStoreActionEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::dataUpdateRequestCategoryEnum:
      return extjson_uci::type::DataUpdateRequestCategoryEnum::serialize(dynamic_cast<const uci::type::DataUpdateRequestCategoryEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::defensiveJammerSystemStatusEnum:
      return extjson_uci::type::DefensiveJammerSystemStatusEnum::serialize(dynamic_cast<const uci::type::DefensiveJammerSystemStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::defensiveJammerSystemTypeEnum:
      return extjson_uci::type::DefensiveJammerSystemTypeEnum::serialize(dynamic_cast<const uci::type::DefensiveJammerSystemTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::depthContactEnum:
      return extjson_uci::type::DepthContactEnum::serialize(dynamic_cast<const uci::type::DepthContactEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::designationEnum:
      return extjson_uci::type::DesignationEnum::serialize(dynamic_cast<const uci::type::DesignationEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::destinationCategoryEnum:
      return extjson_uci::type::DestinationCategoryEnum::serialize(dynamic_cast<const uci::type::DestinationCategoryEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::dF_ModeEnum:
      return extjson_uci::type::DF_ModeEnum::serialize(dynamic_cast<const uci::type::DF_ModeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::disseminationStatusEnum:
      return extjson_uci::type::DisseminationStatusEnum::serialize(dynamic_cast<const uci::type::DisseminationStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::dLZ_RelationEnum:
      return extjson_uci::type::DLZ_RelationEnum::serialize(dynamic_cast<const uci::type::DLZ_RelationEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::dMPI_StateEnum:
      return extjson_uci::type::DMPI_StateEnum::serialize(dynamic_cast<const uci::type::DMPI_StateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::dMPI_StoreStateEnum:
      return extjson_uci::type::DMPI_StoreStateEnum::serialize(dynamic_cast<const uci::type::DMPI_StoreStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::doorCommandEnum:
      return extjson_uci::type::DoorCommandEnum::serialize(dynamic_cast<const uci::type::DoorCommandEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::doorStateEnum:
      return extjson_uci::type::DoorStateEnum::serialize(dynamic_cast<const uci::type::DoorStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::downloadPriorityEnum:
      return extjson_uci::type::DownloadPriorityEnum::serialize(dynamic_cast<const uci::type::DownloadPriorityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::drogueCommandEnum:
      return extjson_uci::type::DrogueCommandEnum::serialize(dynamic_cast<const uci::type::DrogueCommandEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::dropRestrictionEnum:
      return extjson_uci::type::DropRestrictionEnum::serialize(dynamic_cast<const uci::type::DropRestrictionEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::dVR_OperationEnum:
      return extjson_uci::type::DVR_OperationEnum::serialize(dynamic_cast<const uci::type::DVR_OperationEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::dynamicImageProcessingEnum:
      return extjson_uci::type::DynamicImageProcessingEnum::serialize(dynamic_cast<const uci::type::DynamicImageProcessingEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eA_ActivationEnum:
      return extjson_uci::type::EA_ActivationEnum::serialize(dynamic_cast<const uci::type::EA_ActivationEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eA_IndicatorEnum:
      return extjson_uci::type::EA_IndicatorEnum::serialize(dynamic_cast<const uci::type::EA_IndicatorEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eA_MessageOutputsEnum:
      return extjson_uci::type::EA_MessageOutputsEnum::serialize(dynamic_cast<const uci::type::EA_MessageOutputsEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eA_ModeEnum:
      return extjson_uci::type::EA_ModeEnum::serialize(dynamic_cast<const uci::type::EA_ModeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eA_PointingEnum:
      return extjson_uci::type::EA_PointingEnum::serialize(dynamic_cast<const uci::type::EA_PointingEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::effectMessageOutputsEnum:
      return extjson_uci::type::EffectMessageOutputsEnum::serialize(dynamic_cast<const uci::type::EffectMessageOutputsEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::effectTypeEnum:
      return extjson_uci::type::EffectTypeEnum::serialize(dynamic_cast<const uci::type::EffectTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::electronicWarfareRelationshipEnum:
      return extjson_uci::type::ElectronicWarfareRelationshipEnum::serialize(dynamic_cast<const uci::type::ElectronicWarfareRelationshipEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::elevationScanStabilizationEnum:
      return extjson_uci::type::ElevationScanStabilizationEnum::serialize(dynamic_cast<const uci::type::ElevationScanStabilizationEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::elevationVisibilityEnum:
      return extjson_uci::type::ElevationVisibilityEnum::serialize(dynamic_cast<const uci::type::ElevationVisibilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::emconLevelEnum:
      return extjson_uci::type::EmconLevelEnum::serialize(dynamic_cast<const uci::type::EmconLevelEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::emissionBalanceEnum:
      return extjson_uci::type::EmissionBalanceEnum::serialize(dynamic_cast<const uci::type::EmissionBalanceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::emitterUrgencyEnum:
      return extjson_uci::type::EmitterUrgencyEnum::serialize(dynamic_cast<const uci::type::EmitterUrgencyEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::entityBasingEnum:
      return extjson_uci::type::EntityBasingEnum::serialize(dynamic_cast<const uci::type::EntityBasingEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::entityDropPolicyEnum:
      return extjson_uci::type::EntityDropPolicyEnum::serialize(dynamic_cast<const uci::type::EntityDropPolicyEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::entityFusionEligibilityEnum:
      return extjson_uci::type::EntityFusionEligibilityEnum::serialize(dynamic_cast<const uci::type::EntityFusionEligibilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::entityFusionSimpleEligibilityEnum:
      return extjson_uci::type::EntityFusionSimpleEligibilityEnum::serialize(dynamic_cast<const uci::type::EntityFusionSimpleEligibilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::entityManagementRequestAuthorityEnum:
      return extjson_uci::type::EntityManagementRequestAuthorityEnum::serialize(dynamic_cast<const uci::type::EntityManagementRequestAuthorityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::entityRemoveReasonEnum:
      return extjson_uci::type::EntityRemoveReasonEnum::serialize(dynamic_cast<const uci::type::EntityRemoveReasonEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::entitySourceEnum:
      return extjson_uci::type::EntitySourceEnum::serialize(dynamic_cast<const uci::type::EntitySourceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::entityStatusEnum:
      return extjson_uci::type::EntityStatusEnum::serialize(dynamic_cast<const uci::type::EntityStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::environmentEnum:
      return extjson_uci::type::EnvironmentEnum::serialize(dynamic_cast<const uci::type::EnvironmentEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::environmentPairingEnum:
      return extjson_uci::type::EnvironmentPairingEnum::serialize(dynamic_cast<const uci::type::EnvironmentPairingEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eOB_CorrelationTypeEnum:
      return extjson_uci::type::EOB_CorrelationTypeEnum::serialize(dynamic_cast<const uci::type::EOB_CorrelationTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eP_CommandedStateEnum:
      return extjson_uci::type::EP_CommandedStateEnum::serialize(dynamic_cast<const uci::type::EP_CommandedStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eP_StateEnum:
      return extjson_uci::type::EP_StateEnum::serialize(dynamic_cast<const uci::type::EP_StateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eP_StatusEnum:
      return extjson_uci::type::EP_StatusEnum::serialize(dynamic_cast<const uci::type::EP_StatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::ephemerisTypeEnum:
      return extjson_uci::type::EphemerisTypeEnum::serialize(dynamic_cast<const uci::type::EphemerisTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::equalityExpressionEnum:
      return extjson_uci::type::EqualityExpressionEnum::serialize(dynamic_cast<const uci::type::EqualityExpressionEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::equipmentConditionEnum:
      return extjson_uci::type::EquipmentConditionEnum::serialize(dynamic_cast<const uci::type::EquipmentConditionEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eSM_ActivationEnum:
      return extjson_uci::type::ESM_ActivationEnum::serialize(dynamic_cast<const uci::type::ESM_ActivationEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eSM_DwellStateEnum:
      return extjson_uci::type::ESM_DwellStateEnum::serialize(dynamic_cast<const uci::type::ESM_DwellStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eSM_DwellTypeEnum:
      return extjson_uci::type::ESM_DwellTypeEnum::serialize(dynamic_cast<const uci::type::ESM_DwellTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eSM_MessageOutputsEnum:
      return extjson_uci::type::ESM_MessageOutputsEnum::serialize(dynamic_cast<const uci::type::ESM_MessageOutputsEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eSM_SubCapabilityEnum:
      return extjson_uci::type::ESM_SubCapabilityEnum::serialize(dynamic_cast<const uci::type::ESM_SubCapabilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::estimationMessageEnum:
      return extjson_uci::type::EstimationMessageEnum::serialize(dynamic_cast<const uci::type::EstimationMessageEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eventSeverityEnum:
      return extjson_uci::type::EventSeverityEnum::serialize(dynamic_cast<const uci::type::EventSeverityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eW_FixEnum:
      return extjson_uci::type::EW_FixEnum::serialize(dynamic_cast<const uci::type::EW_FixEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eW_MeasurementEnum:
      return extjson_uci::type::EW_MeasurementEnum::serialize(dynamic_cast<const uci::type::EW_MeasurementEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eW_ParameterSourceEnum:
      return extjson_uci::type::EW_ParameterSourceEnum::serialize(dynamic_cast<const uci::type::EW_ParameterSourceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::exerciseIdentityEnum:
      return extjson_uci::type::ExerciseIdentityEnum::serialize(dynamic_cast<const uci::type::ExerciseIdentityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::externalCommandExecutionStateEnum:
      return extjson_uci::type::ExternalCommandExecutionStateEnum::serialize(dynamic_cast<const uci::type::ExternalCommandExecutionStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::externalDataRequestEnum:
      return extjson_uci::type::ExternalDataRequestEnum::serialize(dynamic_cast<const uci::type::ExternalDataRequestEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::failureGuidanceEnum:
      return extjson_uci::type::FailureGuidanceEnum::serialize(dynamic_cast<const uci::type::FailureGuidanceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::faultSeverityEnum:
      return extjson_uci::type::FaultSeverityEnum::serialize(dynamic_cast<const uci::type::FaultSeverityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::faultStateEnum:
      return extjson_uci::type::FaultStateEnum::serialize(dynamic_cast<const uci::type::FaultStateEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fieldOfRegardTypeEnum:
      return extjson_uci::type::FieldOfRegardTypeEnum::serialize(dynamic_cast<const uci::type::FieldOfRegardTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fileDeclassificationEnum:
      return extjson_uci::type::FileDeclassificationEnum::serialize(dynamic_cast<const uci::type::FileDeclassificationEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fileTypeEnum:
      return extjson_uci::type::FileTypeEnum::serialize(dynamic_cast<const uci::type::FileTypeEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::filteredUnfilteredEnum:
      return extjson_uci::type::FilteredUnfilteredEnum::serialize(dynamic_cast<const uci::type::FilteredUnfilteredEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fixedPointingEnum:
      return extjson_uci::type::FixedPointingEnum::serialize(dynamic_cast<const uci::type::FixedPointingEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::flightCapabilityEnum:
      return extjson_uci::type::FlightCapabilityEnum::serialize(dynamic_cast<const uci::type::FlightCapabilityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::flightDeckStatusEnum:
      return extjson_uci::type::FlightDeckStatusEnum::serialize(dynamic_cast<const uci::type::FlightDeckStatusEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::flightStageEnum:
      return extjson_uci::type::FlightStageEnum::serialize(dynamic_cast<const uci::type::FlightStageEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fMOP_Enum:
      return extjson_uci::type::FMOP_Enum::serialize(dynamic_cast<const uci::type::FMOP_Enum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::focalPlaneArrayNonUniformityCorrectionOffsetEnum:
      return extjson_uci::type::FocalPlaneArrayNonUniformityCorrectionOffsetEnum::serialize(dynamic_cast<const uci::type::FocalPlaneArrayNonUniformityCorrectionOffsetEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::focalPlaneArrayNonUniformityCorrectionReferenceEnum:
      return extjson_uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceEnum::serialize(dynamic_cast<const uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fOR_Enum:
      return extjson_uci::type::FOR_Enum::serialize(dynamic_cast<const uci::type::FOR_Enum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::frameOriginEnum:
      return extjson_uci::type::FrameOriginEnum::serialize(dynamic_cast<const uci::type::FrameOriginEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::frequencyAgilityPatternEnum:
      return extjson_uci::type::FrequencyAgilityPatternEnum::serialize(dynamic_cast<const uci::type::FrequencyAgilityPatternEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::frequencyModulationVariationEnum:
      return extjson_uci::type::FrequencyModulationVariationEnum::serialize(dynamic_cast<const uci::type::FrequencyModulationVariationEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::frequencyPatternPeriodicityEnum:
      return extjson_uci::type::FrequencyPatternPeriodicityEnum::serialize(dynamic_cast<const uci::type::FrequencyPatternPeriodicityEnum&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::frequencySwitchingEnum:
      return extjson_uci::type::FrequencySwitchingEnum::serialize(dynamic_cast<const uci::type::FrequencySwitchingEnum&>(accessor), propTree, "", true, false, true, true);
    default:
      return boost::none;
  }
}

} // namespace base

} // namespace extjson_uci

