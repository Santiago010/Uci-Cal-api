/** @file ExternalizerWrite4.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/base/ExternalizerWrite4.h"

#include <string>

#include <boost/none.hpp>
#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/ESM_SettingsCommandMT.h"
#include "extjson_uci/type/ESM_SettingsCommandStatusMDT.h"
#include "extjson_uci/type/ESM_SettingsCommandStatusMT.h"
#include "extjson_uci/type/ESM_SpecificDataType.h"
#include "extjson_uci/type/ESM_SubcapabilityGeolocationType.h"
#include "extjson_uci/type/ESM_SubcapabilityTargetLocationDataType.h"
#include "extjson_uci/type/ESM_TargetType.h"
#include "extjson_uci/type/ESM_TaskBaseType.h"
#include "extjson_uci/type/ESM_TaskType.h"
#include "extjson_uci/type/EW_ConfigurationID_Type.h"
#include "extjson_uci/type/EW_ConfigurationMDT.h"
#include "extjson_uci/type/EW_ConfigurationMT.h"
#include "extjson_uci/type/EW_CoordinationDataLinkIdentifierType.h"
#include "extjson_uci/type/EW_IndexNumberDataLinkIdentifierType.h"
#include "extjson_uci/type/EXPLTB_Type.h"
#include "extjson_uci/type/EstimatedPerformanceType.h"
#include "extjson_uci/type/EstimationResultType.h"
#include "extjson_uci/type/EstimationStartType.h"
#include "extjson_uci/type/EthernetSettingsType.h"
#include "extjson_uci/type/EventOffsetChoiceType.h"
#include "extjson_uci/type/EventWindowChoiceType.h"
#include "extjson_uci/type/ExecutionPlanSetBaseType.h"
#include "extjson_uci/type/ExecutionPlanSetID_Type.h"
#include "extjson_uci/type/ExecutionSequenceInsertionType.h"
#include "extjson_uci/type/ExecutionSequenceInsertionTypeChoiceType.h"
#include "extjson_uci/type/ExecutionSequenceModificationDetailsType.h"
#include "extjson_uci/type/ExecutionSequencePlanSetsType.h"
#include "extjson_uci/type/ExecutionSequenceReplaceOrModifyChoiceType.h"
#include "extjson_uci/type/ExecutionSequenceTrimType.h"
#include "extjson_uci/type/ExecutionSequenceType.h"
#include "extjson_uci/type/ExerciseIdentityType.h"
#include "extjson_uci/type/ExpendableType.h"
#include "extjson_uci/type/ExternalDataRequestMDT.h"
#include "extjson_uci/type/ExternalDataRequestMT.h"
#include "extjson_uci/type/ExternalDataRequestStatusMDT.h"
#include "extjson_uci/type/ExternalDataRequestStatusMT.h"
#include "extjson_uci/type/ExternalRequestedDataID_Type.h"
#include "extjson_uci/type/ExtrapolatedEntityType.h"
#include "extjson_uci/type/FOR_Type.h"
#include "extjson_uci/type/FOV_ActivityType.h"
#include "extjson_uci/type/FOV_ExtentType.h"
#include "extjson_uci/type/FOV_Type.h"
#include "extjson_uci/type/FOV_VolumeType.h"
#include "extjson_uci/type/FacilityIdentificationType.h"
#include "extjson_uci/type/FalseAlarmType.h"
#include "extjson_uci/type/FaultDataType.h"
#include "extjson_uci/type/FaultID_Type.h"
#include "extjson_uci/type/FaultMDT.h"
#include "extjson_uci/type/FaultMT.h"
#include "extjson_uci/type/FieldOfRegardExtentsType.h"
#include "extjson_uci/type/FieldOfRegardType.h"
#include "extjson_uci/type/FileFormatType.h"
#include "extjson_uci/type/FileHeaderRevA_Type.h"
#include "extjson_uci/type/FileHeaderType.h"
#include "extjson_uci/type/FileLocationID_Type.h"
#include "extjson_uci/type/FileLocationMDT.h"
#include "extjson_uci/type/FileLocationMT.h"
#include "extjson_uci/type/FileMetadataID_Type.h"
#include "extjson_uci/type/FileMetadataMDT.h"
#include "extjson_uci/type/FileMetadataMT.h"
#include "extjson_uci/type/FileNameAndOutputType.h"
#include "extjson_uci/type/FileOutputType.h"
#include "extjson_uci/type/FilterID_Type.h"
#include "extjson_uci/type/FixedPositionType.h"
#include "extjson_uci/type/FlightActivityMDT.h"
#include "extjson_uci/type/FlightActivityMT.h"
#include "extjson_uci/type/FlightActivityType.h"
#include "extjson_uci/type/FlightCapabilityMDT.h"
#include "extjson_uci/type/FlightCapabilityMT.h"
#include "extjson_uci/type/FlightCapabilityStatusMDT.h"
#include "extjson_uci/type/FlightCapabilityStatusMT.h"
#include "extjson_uci/type/FlightCapabilityType.h"
#include "extjson_uci/type/FlightTaskBaseType.h"
#include "extjson_uci/type/FlightTaskType.h"
#include "extjson_uci/type/FloatMinMaxType.h"
#include "extjson_uci/type/FocalPlaneArrayNonUniformityCorrectionReferenceType.h"
#include "extjson_uci/type/FocalPlaneArrayOperationNonUniformityCorrectionType.h"
#include "extjson_uci/type/ForceModelType.h"
#include "extjson_uci/type/ForeignKeyMapDRL.h"
#include "extjson_uci/type/ForeignKeyMapID_Type.h"
#include "extjson_uci/type/ForeignKeyMapMDT.h"
#include "extjson_uci/type/ForeignKeyMapML.h"
#include "extjson_uci/type/ForeignKeyMapMT.h"
#include "extjson_uci/type/ForeignKeyPairDRLE.h"
#include "extjson_uci/type/ForeignKeyPairID_Type.h"
#include "extjson_uci/type/ForeignKeyPairMDT.h"
#include "extjson_uci/type/ForeignKeyPairMT.h"
#include "extjson_uci/type/ForeignKeyType.h"
#include "extjson_uci/type/FrequencyControlType.h"
#include "extjson_uci/type/FrequencyDataBaseType.h"
#include "extjson_uci/type/FrequencyDataType.h"
#include "extjson_uci/type/FrequencyMultiChannelType.h"
#include "extjson_uci/type/FrequencyParamsType.h"
#include "extjson_uci/type/FrequencyRangeType.h"
#include "extjson_uci/type/FrequencySetType.h"
#include "extjson_uci/type/FuelCenterOfGravityType.h"
#include "extjson_uci/type/FuelSubsystemExtendedStatusType.h"
#include "extjson_uci/type/FuelTankComponentExtendedStatusType.h"
#include "extjson_uci/type/FuelUsageType.h"
#include "extjson_uci/type/FunctionID_Type.h"
#include "extjson_uci/type/FunctionalDamageConfidenceType.h"
#include "extjson_uci/type/FunctionalDamageProbabilityType.h"
#include "extjson_uci/type/FusionSettingsMDT.h"
#include "extjson_uci/type/FusionSettingsMT.h"
#include "extjson_uci/type/FusionSettingsRequestMDT.h"
#include "extjson_uci/type/FusionSettingsRequestMT.h"
#include "extjson_uci/type/FusionSettingsRequestStatusMDT.h"
#include "extjson_uci/type/FusionSettingsRequestStatusMT.h"
#include "extjson_uci/type/FusionSettingsRequestType.h"
#include "extjson_uci/type/FusionSettingsType.h"
#include "extjson_uci/type/FusionSourceType.h"
#include "extjson_uci/type/FusionSourcesType.h"
#include "extjson_uci/type/FuzeTriggerType.h"
#include "extjson_uci/type/FuzeType.h"
#include "extjson_uci/type/GCRS_KinematicsType.h"
#include "extjson_uci/type/GCRS_PositionType.h"
#include "extjson_uci/type/GainRangeType.h"
#include "extjson_uci/type/GatewayActivityCommandType.h"
#include "extjson_uci/type/GatewayActivityMDT.h"
#include "extjson_uci/type/GatewayActivityMT.h"
#include "extjson_uci/type/GatewayActivityType.h"
#include "extjson_uci/type/GatewayCapabilityCommandType.h"
#include "extjson_uci/type/GatewayCapabilityMDT.h"
#include "extjson_uci/type/GatewayCapabilityMT.h"
#include "extjson_uci/type/GatewayCapabilityOptionsType.h"
#include "extjson_uci/type/GatewayCapabilitySettingsCommandBaseType.h"
#include "extjson_uci/type/GatewayCapabilityStatusMDT.h"
#include "extjson_uci/type/GatewayCapabilityStatusMT.h"
#include "extjson_uci/type/GatewayCapabilityStatusType.h"
#include "extjson_uci/type/GatewayCapabilityType.h"
#include "extjson_uci/type/GatewayCommandMDT.h"
#include "extjson_uci/type/GatewayCommandMT.h"
#include "extjson_uci/type/GatewayCommandStatusMDT.h"
#include "extjson_uci/type/GatewayCommandStatusMT.h"
#include "extjson_uci/type/GatewayCommandType.h"
#include "extjson_uci/type/GatewayConfigurationPET.h"
#include "extjson_uci/type/GatewayConfigurationType.h"
#include "extjson_uci/type/GatewayControlType.h"
#include "extjson_uci/type/GatewayLink16ConfigurationAnnulusType.h"
#include "extjson_uci/type/GatewayLink16ConfigurationAreaType.h"
#include "extjson_uci/type/GatewayLink16ConfigurationCircleType.h"
#include "extjson_uci/type/GatewayLink16ConfigurationCircularSectorType.h"
#include "extjson_uci/type/GatewayLink16ConfigurationClosedAreaType.h"
#include "extjson_uci/type/GatewayLink16ConfigurationEnvironmentType.h"
#include "extjson_uci/type/GatewayLink16ConfigurationIdentityType.h"
#include "extjson_uci/type/GatewayLink16ConfigurationLineType.h"
#include "extjson_uci/type/GatewayLink16ConfigurationMotionType.h"
#include "extjson_uci/type/GatewayLink16ConfigurationMovementVectorType.h"
#include "extjson_uci/type/GatewayLink16ConfigurationRectangleType.h"
#include "extjson_uci/type/GatewayLink16ConfigurationSlaveType.h"
#include "extjson_uci/type/GatewayLinkDestinationType.h"
#include "extjson_uci/type/GatewayLinkStatisticsType.h"
#include "extjson_uci/type/GatewayNativeStatisticsPET.h"
#include "extjson_uci/type/GatewaySettingsCommandMDT.h"
#include "extjson_uci/type/GatewaySettingsCommandMT.h"
#include "extjson_uci/type/GatewaySettingsCommandStatusMDT.h"
#include "extjson_uci/type/GatewaySettingsCommandStatusMT.h"
#include "extjson_uci/type/GenericDataLinkNativeInfoType.h"
#include "extjson_uci/type/GeoFiltersQueryType.h"
#include "extjson_uci/type/GeoLocatedObjectType.h"
#include "extjson_uci/type/GeoLocatedStoredObjectType.h"
#include "extjson_uci/type/GeocentricVolumeType.h"
#include "extjson_uci/type/GeomagneticApRecordType.h"
#include "extjson_uci/type/GeomagneticKpRecordType.h"
#include "extjson_uci/type/GeomagneticStormApType.h"
#include "extjson_uci/type/GeomagneticStormKpType.h"
#include "extjson_uci/type/GeometricVolumeType.h"
#include "extjson_uci/type/GimbalAxisControlStatusType.h"
#include "extjson_uci/type/GimbalAxisControlType.h"
#include "extjson_uci/type/GimbalAxisID_Type.h"
#include "extjson_uci/type/GimbalAxisPairType.h"
#include "extjson_uci/type/GimbalOrientationPairType.h"
#include "extjson_uci/type/GravityModelType.h"
#include "extjson_uci/type/HRR_ChipSizeType.h"
#include "extjson_uci/type/HRR_OptionsType.h"
#include "extjson_uci/type/HSB_ColorControlType.h"
#include "extjson_uci/type/HeaderType.h"
#include "extjson_uci/type/HierarchyModificationType.h"
#include "extjson_uci/type/HoverType.h"
#include "extjson_uci/type/ID_Type.h"
#include "extjson_uci/type/IFF_ActiveModesType.h"
#include "extjson_uci/type/IFF_ActivityCommandType.h"
#include "extjson_uci/type/IFF_ActivityMDT.h"
#include "extjson_uci/type/IFF_ActivityMT.h"
#include "extjson_uci/type/IFF_ActivityTransponderType.h"
#include "extjson_uci/type/IFF_ActivityType.h"
#include "extjson_uci/type/IFF_CapabilityCommandType.h"
#include "extjson_uci/type/IFF_CapabilityMDT.h"
#include "extjson_uci/type/IFF_CapabilityMT.h"
#include "extjson_uci/type/IFF_CapabilityOptionsType.h"
#include "extjson_uci/type/IFF_CapabilityStatusMDT.h"
#include "extjson_uci/type/IFF_CapabilityStatusMT.h"
#include "extjson_uci/type/IFF_CapabilityType.h"
#include "extjson_uci/type/IFF_CollectionConstraintsType.h"
#include "extjson_uci/type/IFF_CommandMDT.h"
#include "extjson_uci/type/IFF_CommandMT.h"
#include "extjson_uci/type/IFF_CommandStatusMDT.h"
#include "extjson_uci/type/IFF_CommandStatusMT.h"
#include "extjson_uci/type/IFF_CommandType.h"
#include "extjson_uci/type/IFF_ConsentRequestMDT.h"
#include "extjson_uci/type/IFF_ConsentRequestMT.h"
#include "extjson_uci/type/IFF_ConsentRequestStatusMDT.h"
#include "extjson_uci/type/IFF_ConsentRequestStatusMT.h"
#include "extjson_uci/type/IFF_ConsentRequestType.h"
#include "extjson_uci/type/IFF_InterrogatorModesEnableType.h"
#include "extjson_uci/type/IFF_InterrogatorTransponderModesType.h"
#include "extjson_uci/type/IFF_Mode1Type.h"
#include "extjson_uci/type/IFF_Mode4Type.h"
#include "extjson_uci/type/IFF_Mode5DetailsType.h"
#include "extjson_uci/type/IFF_Mode5Type.h"
#include "extjson_uci/type/IFF_ModeControlType.h"
#include "extjson_uci/type/IFF_ModeS_Type.h"
#include "extjson_uci/type/IFF_ModeSelectionType.h"
#include "extjson_uci/type/IFF_ModesAvailableType.h"
#include "extjson_uci/type/IFF_OctalModeType.h"
#include "extjson_uci/type/IFF_SettingsCommandMDT.h"
#include "extjson_uci/type/IFF_SettingsCommandMT.h"
#include "extjson_uci/type/IFF_SettingsCommandStatusMDT.h"
#include "extjson_uci/type/IFF_SettingsCommandStatusMT.h"
#include "extjson_uci/type/IFF_SimultaneousSelectionType.h"
#include "extjson_uci/type/IFF_SubmodesType.h"
#include "extjson_uci/type/IFF_TransponderModeControlType.h"
#include "extjson_uci/type/IFF_TransponderModesSelectionType.h"
#include "extjson_uci/type/IFF_Type.h"
#include "extjson_uci/type/IID2_ChoiceType.h"
#include "extjson_uci/type/IJMS_DataLinkIdentifierType.h"
#include "extjson_uci/type/IJMS_QuerySpecificDataType.h"
#include "extjson_uci/type/IO_PortCommandMDT.h"
#include "extjson_uci/type/IO_PortCommandMT.h"
#include "extjson_uci/type/IO_PortCommandStatusMDT.h"
#include "extjson_uci/type/IO_PortCommandStatusMT.h"
#include "extjson_uci/type/IO_PortCommandType.h"
#include "extjson_uci/type/IO_PortConfigurationStatusType.h"
#include "extjson_uci/type/IO_PortStatusMDT.h"
#include "extjson_uci/type/IO_PortStatusMT.h"
#include "extjson_uci/type/IO_PortStatusType.h"
#include "extjson_uci/type/IO_PortType.h"
#include "extjson_uci/type/IPON_IID2_Type.h"
#include "extjson_uci/type/IP_ConnectionChoiceType.h"
#include "extjson_uci/type/IP_ConnectionType.h"
#include "extjson_uci/type/IP_DataLinkNativeInfoType.h"
#include "extjson_uci/type/IPv4_ConnectionType.h"
#include "extjson_uci/type/IPv4_DataLinkNativeInfoType.h"
#include "extjson_uci/type/IPv4_EndpointType.h"
#include "extjson_uci/type/IPv4_SettingsType.h"
#include "extjson_uci/type/IPv6_ConnectionType.h"
#include "extjson_uci/type/IPv6_DataLinkNativeInfoType.h"
#include "extjson_uci/type/IPv6_EndpointType.h"
#include "extjson_uci/type/IPv6_SettingsType.h"
#include "extjson_uci/type/IR_ImageParamsType.h"
#include "extjson_uci/type/ISAR_SubCapabilityType.h"
#include "extjson_uci/type/ISAR_TargetType.h"
#include "extjson_uci/type/IdentificationVerificationCharacterizationType.h"
#include "extjson_uci/type/IdentificationVerificationType.h"
#include "extjson_uci/type/IdentityBasicType.h"
#include "extjson_uci/type/IdentityComparisonType.h"
#include "extjson_uci/type/IdentityConfidenceType.h"
#include "extjson_uci/type/IdentityKindAssetType.h"
#include "extjson_uci/type/IdentityKindInstanceType.h"
#include "extjson_uci/type/IdentityType.h"
#include "extjson_uci/type/ImageAugmentationParametersType.h"
#include "extjson_uci/type/ImageGeoRegistrationProcessingResultsType.h"
#include "extjson_uci/type/ImagePixelGeoLocationProcessingParametersType.h"
#include "extjson_uci/type/ImagePixelGeoLocationProcessingResultsType.h"
#include "extjson_uci/type/ImageRegionOfInterestPET.h"
#include "extjson_uci/type/ImageSubheaderRevA_Type.h"
#include "extjson_uci/type/ImageSubheaderType.h"
#include "extjson_uci/type/ImpactConditionsType.h"
#include "extjson_uci/type/ImpactDetailsType.h"
#include "extjson_uci/type/ImpactPointType.h"
#include "extjson_uci/type/IncRaPeriodVolumeType.h"
#include "extjson_uci/type/IncompleteProcessingType.h"
#include "extjson_uci/type/IncrementalChangeType.h"
#include "extjson_uci/type/InertialStateRelativeType.h"
#include "extjson_uci/type/InertialStateType.h"
#include "extjson_uci/type/IngressEgressType.h"
#include "extjson_uci/type/InputProductType.h"
#include "extjson_uci/type/InstallationDetailsType.h"
#include "extjson_uci/type/IntegerMinMaxType.h"
#include "extjson_uci/type/IntegratorSettingsType.h"
#include "extjson_uci/type/InternationalDesignatorType.h"
#include "extjson_uci/type/IntervalChoiceType.h"
#include "extjson_uci/type/InvalidActivityType.h"
#include "extjson_uci/type/J2K_KinematicsType.h"
#include "extjson_uci/type/J2K_PositionType.h"
#include "extjson_uci/type/JPEG_SettingsType.h"
#include "extjson_uci/type/JPEG_WaveletTransformType.h"
#include "extjson_uci/type/JREAP_CommonTimeReferenceType.h"
#include "extjson_uci/type/JREAP_GatewayNativeStatisticsType.h"
#include "extjson_uci/type/JammerEmitterIdentityType.h"
#include "extjson_uci/type/JammerStationType.h"
#include "extjson_uci/type/KinematicsChoiceType.h"
#include "extjson_uci/type/KinematicsFixedPositionType.h"
#include "extjson_uci/type/KinematicsFixedType.h"
#include "extjson_uci/type/KinematicsMultiStandardType.h"
#include "extjson_uci/type/KinematicsOptionsType.h"
#include "extjson_uci/type/KinematicsType.h"
#include "extjson_uci/type/LAR_AnalysisType.h"
#include "extjson_uci/type/LAR_CalculationWindType.h"
#include "extjson_uci/type/LAR_DetailsType.h"
#include "extjson_uci/type/LAR_ID_Type.h"
#include "extjson_uci/type/LAR_MDT.h"
#include "extjson_uci/type/LAR_MT.h"
#include "extjson_uci/type/LAR_ReleaseConditionsType.h"
#include "extjson_uci/type/LAR_ReportMDT.h"
#include "extjson_uci/type/LAR_ReportMT.h"
#include "extjson_uci/type/LAR_RequestMDT.h"
#include "extjson_uci/type/LAR_RequestMT.h"
#include "extjson_uci/type/LAR_RequestStatusMDT.h"
#include "extjson_uci/type/LAR_RequestStatusMT.h"
#include "extjson_uci/type/LOS3D_CovarianceType.h"
#include "extjson_uci/type/LOS3D_KinematicsType.h"
#include "extjson_uci/type/LOS_AzElRatesType.h"
#include "extjson_uci/type/LOS_AzElType.h"
#include "extjson_uci/type/LOS_CovarianceType.h"
#include "extjson_uci/type/LOS_CovariancesRatesType.h"
#include "extjson_uci/type/LOS_D_Type.h"
#include "extjson_uci/type/LOS_InertialA_Type.h"
#include "extjson_uci/type/LOS_InertialB_Type.h"
#include "extjson_uci/type/LOS_MeasurementAndUncertaintyType.h"
#include "extjson_uci/type/LOS_MeasurementType.h"
#include "extjson_uci/type/LOS_MeasurementUncertaintyErrorSourcesType.h"
#include "extjson_uci/type/LOS_MeasurementUncertaintyType.h"
#include "extjson_uci/type/LOS_MeasurementWithUncertaintyType.h"
#include "extjson_uci/type/LOS_RatesType.h"
#include "extjson_uci/type/LOS_SlantRangeCovarianceRatesType.h"
#include "extjson_uci/type/LOS_SlantRangeCovarianceType.h"
#include "extjson_uci/type/LOS_SlantRangeUncertaintyType.h"
#include "extjson_uci/type/LOS_Type.h"
#include "extjson_uci/type/LOS_UncertaintyType.h"
#include "extjson_uci/type/LOS_VariableA_Type.h"
#include "extjson_uci/type/LOS_VariableB_Type.h"
#include "extjson_uci/type/LOS_VarianceAndCovarianceType.h"
#include "extjson_uci/type/LOS_VarianceRatesType.h"
#include "extjson_uci/type/LOS_VarianceType.h"
#include "extjson_uci/type/LaunchObjectID_Type.h"
#include "extjson_uci/type/LaunchObjectType.h"
#include "extjson_uci/type/LaunchObservationID_Type.h"
#include "extjson_uci/type/LaunchObservationMDT.h"
#include "extjson_uci/type/LaunchObservationMT.h"
#include "extjson_uci/type/LaunchStageConfidenceType.h"
#include "extjson_uci/type/LaunchStaticDetailsType.h"
#include "extjson_uci/type/Level2Type.h"
#include "extjson_uci/type/LineDataStatusType.h"
#include "extjson_uci/type/LineOfSightChoiceType.h"
#include "extjson_uci/type/LinePoint2D_Type.h"
#include "extjson_uci/type/LinePointChoiceType.h"
#include "extjson_uci/type/LineRelativeType.h"
#include "extjson_uci/type/LineTargetType.h"
#include "extjson_uci/type/LineType.h"
#include "extjson_uci/type/Link11DataLinkIdentifierType.h"
#include "extjson_uci/type/Link11QuerySpecificDataType.h"
#include "extjson_uci/type/Link16ActiveRelayIndicatorsType.h"
#include "extjson_uci/type/Link16AmplificationDataStoreActionType.h"
#include "extjson_uci/type/Link16DataLinkIdentifierType.h"
#include "extjson_uci/type/Link16DataLinkNativeInfoType.h"
#include "extjson_uci/type/Link16DataStoreManagementType.h"
#include "extjson_uci/type/Link16EW_DataStoreActionType.h"
#include "extjson_uci/type/Link16EW_DataStoreID_ChoiceType.h"
#include "extjson_uci/type/Link16EngagementStatusDataStoreActionType.h"
#include "extjson_uci/type/Link16EntityDataLinkNativeFilterType.h"
#include "extjson_uci/type/Link16EntityMetadataType.h"
#include "extjson_uci/type/Link16FriendlyTargetofInterestDataStoreActionType.h"
#include "extjson_uci/type/Link16FriendlyTargetofInterestDataStoreID_ChoiceType.h"
#include "extjson_uci/type/Link16GatewayConfigurationType.h"
#include "extjson_uci/type/Link16HazardType.h"
#include "extjson_uci/type/Link16InterfaceDataLinkNativeInfoType.h"
#include "extjson_uci/type/Link16MetadataType.h"
#include "extjson_uci/type/Link16ReferencePointDataStoreActionType.h"
#include "extjson_uci/type/Link16ReferencePointDataStoreID_ChoiceType.h"
#include "extjson_uci/type/Link16SystemMetadataType.h"
#include "extjson_uci/type/Link16TN_QuerySpecificDataType.h"
#include "extjson_uci/type/Link16TextReportDataStoreActionType.h"
#include "extjson_uci/type/Link16ThreatWarningDataStoreActionType.h"
#include "extjson_uci/type/Link16TrackBlockType.h"
#include "extjson_uci/type/Link16TrackIdentifierType.h"
#include "extjson_uci/type/LinkConnectionRequestType.h"
#include "extjson_uci/type/LinkMetricsType.h"
#include "extjson_uci/type/LinkRatesType.h"
#include "extjson_uci/type/LinkedRequirementType.h"
#include "extjson_uci/type/LobeType.h"
#include "extjson_uci/type/LocatedEllipseType.h"
#include "extjson_uci/type/LocatedRectangleType.h"
#include "extjson_uci/type/LocationAndStatusBaseType.h"
#include "extjson_uci/type/LocationAndStatusExpireType.h"
#include "extjson_uci/type/LocationFilterType.h"
#include "extjson_uci/type/LocationType.h"
#include "extjson_uci/type/LogMDT.h"
#include "extjson_uci/type/LogMT.h"
#include "extjson_uci/type/LoiterPointType.h"
#include "extjson_uci/type/LoiterProgressType.h"
#include "extjson_uci/type/LoiterType.h"
#include "extjson_uci/type/LongBaselineInterferometerInfoType.h"
#include "extjson_uci/type/LostLinkSourceID_ChoiceType.h"
#include "extjson_uci/type/MDF_CommandSubCategoryType.h"
#include "extjson_uci/type/MDF_CommandType.h"
#include "extjson_uci/type/MDF_FileType.h"
#include "extjson_uci/type/MDF_ID_Type.h"
#include "extjson_uci/type/MDF_ReferenceType.h"
#include "extjson_uci/type/MDF_StatusType.h"
#include "extjson_uci/type/MDF_SubCategoryFileID_Type.h"
#include "extjson_uci/type/MDF_SubCategoryID_Type.h"
#include "extjson_uci/type/MDF_SubCategoryType.h"
#include "extjson_uci/type/MDF_Type.h"
#include "extjson_uci/type/MFA_AddressType.h"
#include "extjson_uci/type/MFP_AddressType.h"
#include "extjson_uci/type/MISP_PackingPlanType.h"
#include "extjson_uci/type/ManagedListBaseType.h"
#include "extjson_uci/type/ManeuverConstraintsChoiceType.h"
#include "extjson_uci/type/ManeuverDetectionType.h"
#include "extjson_uci/type/ManeuverMultiStandardType.h"
#include "extjson_uci/type/ManeuverSummaryType.h"
#include "extjson_uci/type/MeasurementCharacteristicsType.h"
#include "extjson_uci/type/MeasurementDurationType.h"
#include "extjson_uci/type/MeasurementGroupID_Type.h"
#include "extjson_uci/type/MeasurementID_Type.h"
#include "extjson_uci/type/MeasurementKinematicsChoiceType.h"
#include "extjson_uci/type/MeasurementSourceIdentityType.h"
#include "extjson_uci/type/MeasurementType.h"
#include "extjson_uci/type/MessageConfigurationID_Type.h"
#include "extjson_uci/type/MessageConfigurationType.h"
#include "extjson_uci/type/MessageDestinationType.h"
#include "extjson_uci/type/MessageTransmissionFilterRecordDRLE.h"
#include "extjson_uci/type/MessageTransmissionFilterRecordID_Type.h"
#include "extjson_uci/type/MessageTransmissionFilterRecordMDT.h"
#include "extjson_uci/type/MessageTransmissionFilterRecordMT.h"
#include "extjson_uci/type/MessageTransmissionListDRL.h"
#include "extjson_uci/type/MessageTransmissionListID_Type.h"
#include "extjson_uci/type/MessageTransmissionListMDT.h"
#include "extjson_uci/type/MessageTransmissionListML.h"
#include "extjson_uci/type/MessageTransmissionListMT.h"
#include "extjson_uci/type/MessageType.h"
#include "extjson_uci/type/MetadataID_Type.h"
#include "extjson_uci/type/MetricCollectionType.h"
#include "extjson_uci/type/MetricParamsType.h"
#include "extjson_uci/type/MetricValueType.h"
#include "extjson_uci/type/MetricsType.h"
#include "extjson_uci/type/MilliwattPowerRatioRangeType.h"
#include "extjson_uci/type/MissileEmitterIdentityType.h"
#include "extjson_uci/type/MissionActivationRequestMDT.h"
#include "extjson_uci/type/MissionActivationRequestMT.h"
#include "extjson_uci/type/MissionActivationRequestStatusMDT.h"
#include "extjson_uci/type/MissionActivationRequestStatusMT.h"
#include "extjson_uci/type/MissionContingencyAlertID_Type.h"
#include "extjson_uci/type/MissionContingencyAlertMDT.h"
#include "extjson_uci/type/MissionContingencyAlertMT.h"
#include "extjson_uci/type/MissionContingencyConditionType.h"
#include "extjson_uci/type/MissionControlInterfacesCommandType.h"
#include "extjson_uci/type/MissionDefinitionID_Type.h"
#include "extjson_uci/type/MissionDefinitionMDT.h"
#include "extjson_uci/type/MissionDefinitionMT.h"
#include "extjson_uci/type/MissionEnvironmentConstraintType.h"
#include "extjson_uci/type/MissionEnvironmentObjectActionType.h"
#include "extjson_uci/type/MissionEnvironmentObjectBaseType.h"
#include "extjson_uci/type/MissionEnvironmentObjectClassType.h"
#include "extjson_uci/type/MissionEnvironmentObjectEffectType.h"
#include "extjson_uci/type/MissionEnvironmentObjectEntityType.h"
#include "extjson_uci/type/MissionEnvironmentObjectOpLineType.h"
#include "extjson_uci/type/MissionEnvironmentObjectOpPointType.h"
#include "extjson_uci/type/MissionEnvironmentObjectOpVolumeType.h"
#include "extjson_uci/type/MissionEnvironmentObjectOpZoneType.h"
#include "extjson_uci/type/MissionEnvironmentObjectResponseType.h"
#include "extjson_uci/type/MissionEnvironmentObjectSystemType.h"
#include "extjson_uci/type/MissionEnvironmentObjectTaskType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueActionType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueEffectType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueEntityType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueOpLineType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueOpPointType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueOpVolumeType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueOpZoneType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueResponseType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueSystemType.h"
#include "extjson_uci/type/MissionEnvironmentObjectValueTaskType.h"
#include "extjson_uci/type/MissionEnvironmentOverrideID_Type.h"
#include "extjson_uci/type/MissionEnvironmentOverrideMDT.h"
#include "extjson_uci/type/MissionEnvironmentOverrideMT.h"
#include "extjson_uci/type/MissionID_Type.h"
#include "extjson_uci/type/MissionInformationType.h"
#include "extjson_uci/type/MissionPlanActivationApprovalStatusMDT.h"
#include "extjson_uci/type/MissionPlanActivationApprovalStatusMT.h"
#include "extjson_uci/type/MissionPlanActivationCommandID_Type.h"
#include "extjson_uci/type/MissionPlanActivationCommandMDT.h"
#include "extjson_uci/type/MissionPlanActivationCommandMT.h"
#include "extjson_uci/type/MissionPlanActivationCommandStatusMDT.h"
#include "extjson_uci/type/MissionPlanActivationCommandStatusMT.h"
#include "extjson_uci/type/MissionPlanActivationCommandType.h"
#include "extjson_uci/type/MissionPlanActivationDetailsType.h"
#include "extjson_uci/type/MissionPlanActivationSettingType.h"
#include "extjson_uci/type/MissionPlanActivationStatusMDT.h"
#include "extjson_uci/type/MissionPlanActivationStatusMT.h"
#include "extjson_uci/type/MissionPlanActivationType.h"
#include "extjson_uci/type/MissionPlanApprovalStatusMDT.h"
#include "extjson_uci/type/MissionPlanApprovalStatusMT.h"
#include "extjson_uci/type/MissionPlanCommandID_ChoiceType.h"
#include "extjson_uci/type/MissionPlanCommandID_Type.h"
#include "extjson_uci/type/MissionPlanCommandMDT.h"
#include "extjson_uci/type/MissionPlanCommandMT.h"
#include "extjson_uci/type/MissionPlanCommandStatusMDT.h"
#include "extjson_uci/type/MissionPlanCommandStatusMT.h"
#include "uci/base/accessorType.h"
#include "uci/type/ESM_SettingsCommandMT.h"
#include "uci/type/ESM_SettingsCommandStatusMDT.h"
#include "uci/type/ESM_SettingsCommandStatusMT.h"
#include "uci/type/ESM_SpecificDataType.h"
#include "uci/type/ESM_SubcapabilityGeolocationType.h"
#include "uci/type/ESM_SubcapabilityTargetLocationDataType.h"
#include "uci/type/ESM_TargetType.h"
#include "uci/type/ESM_TaskBaseType.h"
#include "uci/type/ESM_TaskType.h"
#include "uci/type/EW_ConfigurationID_Type.h"
#include "uci/type/EW_ConfigurationMDT.h"
#include "uci/type/EW_ConfigurationMT.h"
#include "uci/type/EW_CoordinationDataLinkIdentifierType.h"
#include "uci/type/EW_IndexNumberDataLinkIdentifierType.h"
#include "uci/type/EXPLTB_Type.h"
#include "uci/type/EstimatedPerformanceType.h"
#include "uci/type/EstimationResultType.h"
#include "uci/type/EstimationStartType.h"
#include "uci/type/EthernetSettingsType.h"
#include "uci/type/EventOffsetChoiceType.h"
#include "uci/type/EventWindowChoiceType.h"
#include "uci/type/ExecutionPlanSetBaseType.h"
#include "uci/type/ExecutionPlanSetID_Type.h"
#include "uci/type/ExecutionSequenceInsertionType.h"
#include "uci/type/ExecutionSequenceInsertionTypeChoiceType.h"
#include "uci/type/ExecutionSequenceModificationDetailsType.h"
#include "uci/type/ExecutionSequencePlanSetsType.h"
#include "uci/type/ExecutionSequenceReplaceOrModifyChoiceType.h"
#include "uci/type/ExecutionSequenceTrimType.h"
#include "uci/type/ExecutionSequenceType.h"
#include "uci/type/ExerciseIdentityType.h"
#include "uci/type/ExpendableType.h"
#include "uci/type/ExternalDataRequestMDT.h"
#include "uci/type/ExternalDataRequestMT.h"
#include "uci/type/ExternalDataRequestStatusMDT.h"
#include "uci/type/ExternalDataRequestStatusMT.h"
#include "uci/type/ExternalRequestedDataID_Type.h"
#include "uci/type/ExtrapolatedEntityType.h"
#include "uci/type/FOR_Type.h"
#include "uci/type/FOV_ActivityType.h"
#include "uci/type/FOV_ExtentType.h"
#include "uci/type/FOV_Type.h"
#include "uci/type/FOV_VolumeType.h"
#include "uci/type/FacilityIdentificationType.h"
#include "uci/type/FalseAlarmType.h"
#include "uci/type/FaultDataType.h"
#include "uci/type/FaultID_Type.h"
#include "uci/type/FaultMDT.h"
#include "uci/type/FaultMT.h"
#include "uci/type/FieldOfRegardExtentsType.h"
#include "uci/type/FieldOfRegardType.h"
#include "uci/type/FileFormatType.h"
#include "uci/type/FileHeaderRevA_Type.h"
#include "uci/type/FileHeaderType.h"
#include "uci/type/FileLocationID_Type.h"
#include "uci/type/FileLocationMDT.h"
#include "uci/type/FileLocationMT.h"
#include "uci/type/FileMetadataID_Type.h"
#include "uci/type/FileMetadataMDT.h"
#include "uci/type/FileMetadataMT.h"
#include "uci/type/FileNameAndOutputType.h"
#include "uci/type/FileOutputType.h"
#include "uci/type/FilterID_Type.h"
#include "uci/type/FixedPositionType.h"
#include "uci/type/FlightActivityMDT.h"
#include "uci/type/FlightActivityMT.h"
#include "uci/type/FlightActivityType.h"
#include "uci/type/FlightCapabilityMDT.h"
#include "uci/type/FlightCapabilityMT.h"
#include "uci/type/FlightCapabilityStatusMDT.h"
#include "uci/type/FlightCapabilityStatusMT.h"
#include "uci/type/FlightCapabilityType.h"
#include "uci/type/FlightTaskBaseType.h"
#include "uci/type/FlightTaskType.h"
#include "uci/type/FloatMinMaxType.h"
#include "uci/type/FocalPlaneArrayNonUniformityCorrectionReferenceType.h"
#include "uci/type/FocalPlaneArrayOperationNonUniformityCorrectionType.h"
#include "uci/type/ForceModelType.h"
#include "uci/type/ForeignKeyMapDRL.h"
#include "uci/type/ForeignKeyMapID_Type.h"
#include "uci/type/ForeignKeyMapMDT.h"
#include "uci/type/ForeignKeyMapML.h"
#include "uci/type/ForeignKeyMapMT.h"
#include "uci/type/ForeignKeyPairDRLE.h"
#include "uci/type/ForeignKeyPairID_Type.h"
#include "uci/type/ForeignKeyPairMDT.h"
#include "uci/type/ForeignKeyPairMT.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/FrequencyControlType.h"
#include "uci/type/FrequencyDataBaseType.h"
#include "uci/type/FrequencyDataType.h"
#include "uci/type/FrequencyMultiChannelType.h"
#include "uci/type/FrequencyParamsType.h"
#include "uci/type/FrequencyRangeType.h"
#include "uci/type/FrequencySetType.h"
#include "uci/type/FuelCenterOfGravityType.h"
#include "uci/type/FuelSubsystemExtendedStatusType.h"
#include "uci/type/FuelTankComponentExtendedStatusType.h"
#include "uci/type/FuelUsageType.h"
#include "uci/type/FunctionID_Type.h"
#include "uci/type/FunctionalDamageConfidenceType.h"
#include "uci/type/FunctionalDamageProbabilityType.h"
#include "uci/type/FusionSettingsMDT.h"
#include "uci/type/FusionSettingsMT.h"
#include "uci/type/FusionSettingsRequestMDT.h"
#include "uci/type/FusionSettingsRequestMT.h"
#include "uci/type/FusionSettingsRequestStatusMDT.h"
#include "uci/type/FusionSettingsRequestStatusMT.h"
#include "uci/type/FusionSettingsRequestType.h"
#include "uci/type/FusionSettingsType.h"
#include "uci/type/FusionSourceType.h"
#include "uci/type/FusionSourcesType.h"
#include "uci/type/FuzeTriggerType.h"
#include "uci/type/FuzeType.h"
#include "uci/type/GCRS_KinematicsType.h"
#include "uci/type/GCRS_PositionType.h"
#include "uci/type/GainRangeType.h"
#include "uci/type/GatewayActivityCommandType.h"
#include "uci/type/GatewayActivityMDT.h"
#include "uci/type/GatewayActivityMT.h"
#include "uci/type/GatewayActivityType.h"
#include "uci/type/GatewayCapabilityCommandType.h"
#include "uci/type/GatewayCapabilityMDT.h"
#include "uci/type/GatewayCapabilityMT.h"
#include "uci/type/GatewayCapabilityOptionsType.h"
#include "uci/type/GatewayCapabilitySettingsCommandBaseType.h"
#include "uci/type/GatewayCapabilityStatusMDT.h"
#include "uci/type/GatewayCapabilityStatusMT.h"
#include "uci/type/GatewayCapabilityStatusType.h"
#include "uci/type/GatewayCapabilityType.h"
#include "uci/type/GatewayCommandMDT.h"
#include "uci/type/GatewayCommandMT.h"
#include "uci/type/GatewayCommandStatusMDT.h"
#include "uci/type/GatewayCommandStatusMT.h"
#include "uci/type/GatewayCommandType.h"
#include "uci/type/GatewayConfigurationPET.h"
#include "uci/type/GatewayConfigurationType.h"
#include "uci/type/GatewayControlType.h"
#include "uci/type/GatewayLink16ConfigurationAnnulusType.h"
#include "uci/type/GatewayLink16ConfigurationAreaType.h"
#include "uci/type/GatewayLink16ConfigurationCircleType.h"
#include "uci/type/GatewayLink16ConfigurationCircularSectorType.h"
#include "uci/type/GatewayLink16ConfigurationClosedAreaType.h"
#include "uci/type/GatewayLink16ConfigurationEnvironmentType.h"
#include "uci/type/GatewayLink16ConfigurationIdentityType.h"
#include "uci/type/GatewayLink16ConfigurationLineType.h"
#include "uci/type/GatewayLink16ConfigurationMotionType.h"
#include "uci/type/GatewayLink16ConfigurationMovementVectorType.h"
#include "uci/type/GatewayLink16ConfigurationRectangleType.h"
#include "uci/type/GatewayLink16ConfigurationSlaveType.h"
#include "uci/type/GatewayLinkDestinationType.h"
#include "uci/type/GatewayLinkStatisticsType.h"
#include "uci/type/GatewayNativeStatisticsPET.h"
#include "uci/type/GatewaySettingsCommandMDT.h"
#include "uci/type/GatewaySettingsCommandMT.h"
#include "uci/type/GatewaySettingsCommandStatusMDT.h"
#include "uci/type/GatewaySettingsCommandStatusMT.h"
#include "uci/type/GenericDataLinkNativeInfoType.h"
#include "uci/type/GeoFiltersQueryType.h"
#include "uci/type/GeoLocatedObjectType.h"
#include "uci/type/GeoLocatedStoredObjectType.h"
#include "uci/type/GeocentricVolumeType.h"
#include "uci/type/GeomagneticApRecordType.h"
#include "uci/type/GeomagneticKpRecordType.h"
#include "uci/type/GeomagneticStormApType.h"
#include "uci/type/GeomagneticStormKpType.h"
#include "uci/type/GeometricVolumeType.h"
#include "uci/type/GimbalAxisControlStatusType.h"
#include "uci/type/GimbalAxisControlType.h"
#include "uci/type/GimbalAxisID_Type.h"
#include "uci/type/GimbalAxisPairType.h"
#include "uci/type/GimbalOrientationPairType.h"
#include "uci/type/GravityModelType.h"
#include "uci/type/HRR_ChipSizeType.h"
#include "uci/type/HRR_OptionsType.h"
#include "uci/type/HSB_ColorControlType.h"
#include "uci/type/HeaderType.h"
#include "uci/type/HierarchyModificationType.h"
#include "uci/type/HoverType.h"
#include "uci/type/ID_Type.h"
#include "uci/type/IFF_ActiveModesType.h"
#include "uci/type/IFF_ActivityCommandType.h"
#include "uci/type/IFF_ActivityMDT.h"
#include "uci/type/IFF_ActivityMT.h"
#include "uci/type/IFF_ActivityTransponderType.h"
#include "uci/type/IFF_ActivityType.h"
#include "uci/type/IFF_CapabilityCommandType.h"
#include "uci/type/IFF_CapabilityMDT.h"
#include "uci/type/IFF_CapabilityMT.h"
#include "uci/type/IFF_CapabilityOptionsType.h"
#include "uci/type/IFF_CapabilityStatusMDT.h"
#include "uci/type/IFF_CapabilityStatusMT.h"
#include "uci/type/IFF_CapabilityType.h"
#include "uci/type/IFF_CollectionConstraintsType.h"
#include "uci/type/IFF_CommandMDT.h"
#include "uci/type/IFF_CommandMT.h"
#include "uci/type/IFF_CommandStatusMDT.h"
#include "uci/type/IFF_CommandStatusMT.h"
#include "uci/type/IFF_CommandType.h"
#include "uci/type/IFF_ConsentRequestMDT.h"
#include "uci/type/IFF_ConsentRequestMT.h"
#include "uci/type/IFF_ConsentRequestStatusMDT.h"
#include "uci/type/IFF_ConsentRequestStatusMT.h"
#include "uci/type/IFF_ConsentRequestType.h"
#include "uci/type/IFF_InterrogatorModesEnableType.h"
#include "uci/type/IFF_InterrogatorTransponderModesType.h"
#include "uci/type/IFF_Mode1Type.h"
#include "uci/type/IFF_Mode4Type.h"
#include "uci/type/IFF_Mode5DetailsType.h"
#include "uci/type/IFF_Mode5Type.h"
#include "uci/type/IFF_ModeControlType.h"
#include "uci/type/IFF_ModeS_Type.h"
#include "uci/type/IFF_ModeSelectionType.h"
#include "uci/type/IFF_ModesAvailableType.h"
#include "uci/type/IFF_OctalModeType.h"
#include "uci/type/IFF_SettingsCommandMDT.h"
#include "uci/type/IFF_SettingsCommandMT.h"
#include "uci/type/IFF_SettingsCommandStatusMDT.h"
#include "uci/type/IFF_SettingsCommandStatusMT.h"
#include "uci/type/IFF_SimultaneousSelectionType.h"
#include "uci/type/IFF_SubmodesType.h"
#include "uci/type/IFF_TransponderModeControlType.h"
#include "uci/type/IFF_TransponderModesSelectionType.h"
#include "uci/type/IFF_Type.h"
#include "uci/type/IID2_ChoiceType.h"
#include "uci/type/IJMS_DataLinkIdentifierType.h"
#include "uci/type/IJMS_QuerySpecificDataType.h"
#include "uci/type/IO_PortCommandMDT.h"
#include "uci/type/IO_PortCommandMT.h"
#include "uci/type/IO_PortCommandStatusMDT.h"
#include "uci/type/IO_PortCommandStatusMT.h"
#include "uci/type/IO_PortCommandType.h"
#include "uci/type/IO_PortConfigurationStatusType.h"
#include "uci/type/IO_PortStatusMDT.h"
#include "uci/type/IO_PortStatusMT.h"
#include "uci/type/IO_PortStatusType.h"
#include "uci/type/IO_PortType.h"
#include "uci/type/IPON_IID2_Type.h"
#include "uci/type/IP_ConnectionChoiceType.h"
#include "uci/type/IP_ConnectionType.h"
#include "uci/type/IP_DataLinkNativeInfoType.h"
#include "uci/type/IPv4_ConnectionType.h"
#include "uci/type/IPv4_DataLinkNativeInfoType.h"
#include "uci/type/IPv4_EndpointType.h"
#include "uci/type/IPv4_SettingsType.h"
#include "uci/type/IPv6_ConnectionType.h"
#include "uci/type/IPv6_DataLinkNativeInfoType.h"
#include "uci/type/IPv6_EndpointType.h"
#include "uci/type/IPv6_SettingsType.h"
#include "uci/type/IR_ImageParamsType.h"
#include "uci/type/ISAR_SubCapabilityType.h"
#include "uci/type/ISAR_TargetType.h"
#include "uci/type/IdentificationVerificationCharacterizationType.h"
#include "uci/type/IdentificationVerificationType.h"
#include "uci/type/IdentityBasicType.h"
#include "uci/type/IdentityComparisonType.h"
#include "uci/type/IdentityConfidenceType.h"
#include "uci/type/IdentityKindAssetType.h"
#include "uci/type/IdentityKindInstanceType.h"
#include "uci/type/IdentityType.h"
#include "uci/type/ImageAugmentationParametersType.h"
#include "uci/type/ImageGeoRegistrationProcessingResultsType.h"
#include "uci/type/ImagePixelGeoLocationProcessingParametersType.h"
#include "uci/type/ImagePixelGeoLocationProcessingResultsType.h"
#include "uci/type/ImageRegionOfInterestPET.h"
#include "uci/type/ImageSubheaderRevA_Type.h"
#include "uci/type/ImageSubheaderType.h"
#include "uci/type/ImpactConditionsType.h"
#include "uci/type/ImpactDetailsType.h"
#include "uci/type/ImpactPointType.h"
#include "uci/type/IncRaPeriodVolumeType.h"
#include "uci/type/IncompleteProcessingType.h"
#include "uci/type/IncrementalChangeType.h"
#include "uci/type/InertialStateRelativeType.h"
#include "uci/type/InertialStateType.h"
#include "uci/type/IngressEgressType.h"
#include "uci/type/InputProductType.h"
#include "uci/type/InstallationDetailsType.h"
#include "uci/type/IntegerMinMaxType.h"
#include "uci/type/IntegratorSettingsType.h"
#include "uci/type/InternationalDesignatorType.h"
#include "uci/type/IntervalChoiceType.h"
#include "uci/type/InvalidActivityType.h"
#include "uci/type/J2K_KinematicsType.h"
#include "uci/type/J2K_PositionType.h"
#include "uci/type/JPEG_SettingsType.h"
#include "uci/type/JPEG_WaveletTransformType.h"
#include "uci/type/JREAP_CommonTimeReferenceType.h"
#include "uci/type/JREAP_GatewayNativeStatisticsType.h"
#include "uci/type/JammerEmitterIdentityType.h"
#include "uci/type/JammerStationType.h"
#include "uci/type/KinematicsChoiceType.h"
#include "uci/type/KinematicsFixedPositionType.h"
#include "uci/type/KinematicsFixedType.h"
#include "uci/type/KinematicsMultiStandardType.h"
#include "uci/type/KinematicsOptionsType.h"
#include "uci/type/KinematicsType.h"
#include "uci/type/LAR_AnalysisType.h"
#include "uci/type/LAR_CalculationWindType.h"
#include "uci/type/LAR_DetailsType.h"
#include "uci/type/LAR_ID_Type.h"
#include "uci/type/LAR_MDT.h"
#include "uci/type/LAR_MT.h"
#include "uci/type/LAR_ReleaseConditionsType.h"
#include "uci/type/LAR_ReportMDT.h"
#include "uci/type/LAR_ReportMT.h"
#include "uci/type/LAR_RequestMDT.h"
#include "uci/type/LAR_RequestMT.h"
#include "uci/type/LAR_RequestStatusMDT.h"
#include "uci/type/LAR_RequestStatusMT.h"
#include "uci/type/LOS3D_CovarianceType.h"
#include "uci/type/LOS3D_KinematicsType.h"
#include "uci/type/LOS_AzElRatesType.h"
#include "uci/type/LOS_AzElType.h"
#include "uci/type/LOS_CovarianceType.h"
#include "uci/type/LOS_CovariancesRatesType.h"
#include "uci/type/LOS_D_Type.h"
#include "uci/type/LOS_InertialA_Type.h"
#include "uci/type/LOS_InertialB_Type.h"
#include "uci/type/LOS_MeasurementAndUncertaintyType.h"
#include "uci/type/LOS_MeasurementType.h"
#include "uci/type/LOS_MeasurementUncertaintyErrorSourcesType.h"
#include "uci/type/LOS_MeasurementUncertaintyType.h"
#include "uci/type/LOS_MeasurementWithUncertaintyType.h"
#include "uci/type/LOS_RatesType.h"
#include "uci/type/LOS_SlantRangeCovarianceRatesType.h"
#include "uci/type/LOS_SlantRangeCovarianceType.h"
#include "uci/type/LOS_SlantRangeUncertaintyType.h"
#include "uci/type/LOS_Type.h"
#include "uci/type/LOS_UncertaintyType.h"
#include "uci/type/LOS_VariableA_Type.h"
#include "uci/type/LOS_VariableB_Type.h"
#include "uci/type/LOS_VarianceAndCovarianceType.h"
#include "uci/type/LOS_VarianceRatesType.h"
#include "uci/type/LOS_VarianceType.h"
#include "uci/type/LaunchObjectID_Type.h"
#include "uci/type/LaunchObjectType.h"
#include "uci/type/LaunchObservationID_Type.h"
#include "uci/type/LaunchObservationMDT.h"
#include "uci/type/LaunchObservationMT.h"
#include "uci/type/LaunchStageConfidenceType.h"
#include "uci/type/LaunchStaticDetailsType.h"
#include "uci/type/Level2Type.h"
#include "uci/type/LineDataStatusType.h"
#include "uci/type/LineOfSightChoiceType.h"
#include "uci/type/LinePoint2D_Type.h"
#include "uci/type/LinePointChoiceType.h"
#include "uci/type/LineRelativeType.h"
#include "uci/type/LineTargetType.h"
#include "uci/type/LineType.h"
#include "uci/type/Link11DataLinkIdentifierType.h"
#include "uci/type/Link11QuerySpecificDataType.h"
#include "uci/type/Link16ActiveRelayIndicatorsType.h"
#include "uci/type/Link16AmplificationDataStoreActionType.h"
#include "uci/type/Link16DataLinkIdentifierType.h"
#include "uci/type/Link16DataLinkNativeInfoType.h"
#include "uci/type/Link16DataStoreManagementType.h"
#include "uci/type/Link16EW_DataStoreActionType.h"
#include "uci/type/Link16EW_DataStoreID_ChoiceType.h"
#include "uci/type/Link16EngagementStatusDataStoreActionType.h"
#include "uci/type/Link16EntityDataLinkNativeFilterType.h"
#include "uci/type/Link16EntityMetadataType.h"
#include "uci/type/Link16FriendlyTargetofInterestDataStoreActionType.h"
#include "uci/type/Link16FriendlyTargetofInterestDataStoreID_ChoiceType.h"
#include "uci/type/Link16GatewayConfigurationType.h"
#include "uci/type/Link16HazardType.h"
#include "uci/type/Link16InterfaceDataLinkNativeInfoType.h"
#include "uci/type/Link16MetadataType.h"
#include "uci/type/Link16ReferencePointDataStoreActionType.h"
#include "uci/type/Link16ReferencePointDataStoreID_ChoiceType.h"
#include "uci/type/Link16SystemMetadataType.h"
#include "uci/type/Link16TN_QuerySpecificDataType.h"
#include "uci/type/Link16TextReportDataStoreActionType.h"
#include "uci/type/Link16ThreatWarningDataStoreActionType.h"
#include "uci/type/Link16TrackBlockType.h"
#include "uci/type/Link16TrackIdentifierType.h"
#include "uci/type/LinkConnectionRequestType.h"
#include "uci/type/LinkMetricsType.h"
#include "uci/type/LinkRatesType.h"
#include "uci/type/LinkedRequirementType.h"
#include "uci/type/LobeType.h"
#include "uci/type/LocatedEllipseType.h"
#include "uci/type/LocatedRectangleType.h"
#include "uci/type/LocationAndStatusBaseType.h"
#include "uci/type/LocationAndStatusExpireType.h"
#include "uci/type/LocationFilterType.h"
#include "uci/type/LocationType.h"
#include "uci/type/LogMDT.h"
#include "uci/type/LogMT.h"
#include "uci/type/LoiterPointType.h"
#include "uci/type/LoiterProgressType.h"
#include "uci/type/LoiterType.h"
#include "uci/type/LongBaselineInterferometerInfoType.h"
#include "uci/type/LostLinkSourceID_ChoiceType.h"
#include "uci/type/MDF_CommandSubCategoryType.h"
#include "uci/type/MDF_CommandType.h"
#include "uci/type/MDF_FileType.h"
#include "uci/type/MDF_ID_Type.h"
#include "uci/type/MDF_ReferenceType.h"
#include "uci/type/MDF_StatusType.h"
#include "uci/type/MDF_SubCategoryFileID_Type.h"
#include "uci/type/MDF_SubCategoryID_Type.h"
#include "uci/type/MDF_SubCategoryType.h"
#include "uci/type/MDF_Type.h"
#include "uci/type/MFA_AddressType.h"
#include "uci/type/MFP_AddressType.h"
#include "uci/type/MISP_PackingPlanType.h"
#include "uci/type/ManagedListBaseType.h"
#include "uci/type/ManeuverConstraintsChoiceType.h"
#include "uci/type/ManeuverDetectionType.h"
#include "uci/type/ManeuverMultiStandardType.h"
#include "uci/type/ManeuverSummaryType.h"
#include "uci/type/MeasurementCharacteristicsType.h"
#include "uci/type/MeasurementDurationType.h"
#include "uci/type/MeasurementGroupID_Type.h"
#include "uci/type/MeasurementID_Type.h"
#include "uci/type/MeasurementKinematicsChoiceType.h"
#include "uci/type/MeasurementSourceIdentityType.h"
#include "uci/type/MeasurementType.h"
#include "uci/type/MessageConfigurationID_Type.h"
#include "uci/type/MessageConfigurationType.h"
#include "uci/type/MessageDestinationType.h"
#include "uci/type/MessageTransmissionFilterRecordDRLE.h"
#include "uci/type/MessageTransmissionFilterRecordID_Type.h"
#include "uci/type/MessageTransmissionFilterRecordMDT.h"
#include "uci/type/MessageTransmissionFilterRecordMT.h"
#include "uci/type/MessageTransmissionListDRL.h"
#include "uci/type/MessageTransmissionListID_Type.h"
#include "uci/type/MessageTransmissionListMDT.h"
#include "uci/type/MessageTransmissionListML.h"
#include "uci/type/MessageTransmissionListMT.h"
#include "uci/type/MessageType.h"
#include "uci/type/MetadataID_Type.h"
#include "uci/type/MetricCollectionType.h"
#include "uci/type/MetricParamsType.h"
#include "uci/type/MetricValueType.h"
#include "uci/type/MetricsType.h"
#include "uci/type/MilliwattPowerRatioRangeType.h"
#include "uci/type/MissileEmitterIdentityType.h"
#include "uci/type/MissionActivationRequestMDT.h"
#include "uci/type/MissionActivationRequestMT.h"
#include "uci/type/MissionActivationRequestStatusMDT.h"
#include "uci/type/MissionActivationRequestStatusMT.h"
#include "uci/type/MissionContingencyAlertID_Type.h"
#include "uci/type/MissionContingencyAlertMDT.h"
#include "uci/type/MissionContingencyAlertMT.h"
#include "uci/type/MissionContingencyConditionType.h"
#include "uci/type/MissionControlInterfacesCommandType.h"
#include "uci/type/MissionDefinitionID_Type.h"
#include "uci/type/MissionDefinitionMDT.h"
#include "uci/type/MissionDefinitionMT.h"
#include "uci/type/MissionEnvironmentConstraintType.h"
#include "uci/type/MissionEnvironmentObjectActionType.h"
#include "uci/type/MissionEnvironmentObjectBaseType.h"
#include "uci/type/MissionEnvironmentObjectClassType.h"
#include "uci/type/MissionEnvironmentObjectEffectType.h"
#include "uci/type/MissionEnvironmentObjectEntityType.h"
#include "uci/type/MissionEnvironmentObjectOpLineType.h"
#include "uci/type/MissionEnvironmentObjectOpPointType.h"
#include "uci/type/MissionEnvironmentObjectOpVolumeType.h"
#include "uci/type/MissionEnvironmentObjectOpZoneType.h"
#include "uci/type/MissionEnvironmentObjectResponseType.h"
#include "uci/type/MissionEnvironmentObjectSystemType.h"
#include "uci/type/MissionEnvironmentObjectTaskType.h"
#include "uci/type/MissionEnvironmentObjectValueActionType.h"
#include "uci/type/MissionEnvironmentObjectValueEffectType.h"
#include "uci/type/MissionEnvironmentObjectValueEntityType.h"
#include "uci/type/MissionEnvironmentObjectValueOpLineType.h"
#include "uci/type/MissionEnvironmentObjectValueOpPointType.h"
#include "uci/type/MissionEnvironmentObjectValueOpVolumeType.h"
#include "uci/type/MissionEnvironmentObjectValueOpZoneType.h"
#include "uci/type/MissionEnvironmentObjectValueResponseType.h"
#include "uci/type/MissionEnvironmentObjectValueSystemType.h"
#include "uci/type/MissionEnvironmentObjectValueTaskType.h"
#include "uci/type/MissionEnvironmentOverrideID_Type.h"
#include "uci/type/MissionEnvironmentOverrideMDT.h"
#include "uci/type/MissionEnvironmentOverrideMT.h"
#include "uci/type/MissionID_Type.h"
#include "uci/type/MissionInformationType.h"
#include "uci/type/MissionPlanActivationApprovalStatusMDT.h"
#include "uci/type/MissionPlanActivationApprovalStatusMT.h"
#include "uci/type/MissionPlanActivationCommandID_Type.h"
#include "uci/type/MissionPlanActivationCommandMDT.h"
#include "uci/type/MissionPlanActivationCommandMT.h"
#include "uci/type/MissionPlanActivationCommandStatusMDT.h"
#include "uci/type/MissionPlanActivationCommandStatusMT.h"
#include "uci/type/MissionPlanActivationCommandType.h"
#include "uci/type/MissionPlanActivationDetailsType.h"
#include "uci/type/MissionPlanActivationSettingType.h"
#include "uci/type/MissionPlanActivationStatusMDT.h"
#include "uci/type/MissionPlanActivationStatusMT.h"
#include "uci/type/MissionPlanActivationType.h"
#include "uci/type/MissionPlanApprovalStatusMDT.h"
#include "uci/type/MissionPlanApprovalStatusMT.h"
#include "uci/type/MissionPlanCommandID_ChoiceType.h"
#include "uci/type/MissionPlanCommandID_Type.h"
#include "uci/type/MissionPlanCommandMDT.h"
#include "uci/type/MissionPlanCommandMT.h"
#include "uci/type/MissionPlanCommandStatusMDT.h"
#include "uci/type/MissionPlanCommandStatusMT.h"

/**  */
namespace extjson_uci {

/** The namespace in which all base data types are declared */
namespace base {

boost::optional<std::string> ExternalizerWrite4::write(const uci::base::Accessor& accessor, boost::property_tree::ptree& propTree) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::eSM_SettingsCommandMT:
      return extjson_uci::type::ESM_SettingsCommandMT::serialize(dynamic_cast<const uci::type::ESM_SettingsCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eSM_SettingsCommandStatusMDT:
      return extjson_uci::type::ESM_SettingsCommandStatusMDT::serialize(dynamic_cast<const uci::type::ESM_SettingsCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eSM_SettingsCommandStatusMT:
      return extjson_uci::type::ESM_SettingsCommandStatusMT::serialize(dynamic_cast<const uci::type::ESM_SettingsCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eSM_SpecificDataType:
      return extjson_uci::type::ESM_SpecificDataType::serialize(dynamic_cast<const uci::type::ESM_SpecificDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eSM_SubcapabilityGeolocationType:
      return extjson_uci::type::ESM_SubcapabilityGeolocationType::serialize(dynamic_cast<const uci::type::ESM_SubcapabilityGeolocationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eSM_SubcapabilityTargetLocationDataType:
      return extjson_uci::type::ESM_SubcapabilityTargetLocationDataType::serialize(dynamic_cast<const uci::type::ESM_SubcapabilityTargetLocationDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eSM_TargetType:
      return extjson_uci::type::ESM_TargetType::serialize(dynamic_cast<const uci::type::ESM_TargetType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eSM_TaskBaseType:
      return extjson_uci::type::ESM_TaskBaseType::serialize(dynamic_cast<const uci::type::ESM_TaskBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eSM_TaskType:
      return extjson_uci::type::ESM_TaskType::serialize(dynamic_cast<const uci::type::ESM_TaskType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::estimatedPerformanceType:
      return extjson_uci::type::EstimatedPerformanceType::serialize(dynamic_cast<const uci::type::EstimatedPerformanceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::estimationResultType:
      return extjson_uci::type::EstimationResultType::serialize(dynamic_cast<const uci::type::EstimationResultType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::estimationStartType:
      return extjson_uci::type::EstimationStartType::serialize(dynamic_cast<const uci::type::EstimationStartType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::ethernetSettingsType:
      return extjson_uci::type::EthernetSettingsType::serialize(dynamic_cast<const uci::type::EthernetSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eventOffsetChoiceType:
      return extjson_uci::type::EventOffsetChoiceType::serialize(dynamic_cast<const uci::type::EventOffsetChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eventWindowChoiceType:
      return extjson_uci::type::EventWindowChoiceType::serialize(dynamic_cast<const uci::type::EventWindowChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eW_ConfigurationID_Type:
      return extjson_uci::type::EW_ConfigurationID_Type::serialize(dynamic_cast<const uci::type::EW_ConfigurationID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eW_ConfigurationMDT:
      return extjson_uci::type::EW_ConfigurationMDT::serialize(dynamic_cast<const uci::type::EW_ConfigurationMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eW_ConfigurationMT:
      return extjson_uci::type::EW_ConfigurationMT::serialize(dynamic_cast<const uci::type::EW_ConfigurationMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eW_CoordinationDataLinkIdentifierType:
      return extjson_uci::type::EW_CoordinationDataLinkIdentifierType::serialize(dynamic_cast<const uci::type::EW_CoordinationDataLinkIdentifierType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eW_IndexNumberDataLinkIdentifierType:
      return extjson_uci::type::EW_IndexNumberDataLinkIdentifierType::serialize(dynamic_cast<const uci::type::EW_IndexNumberDataLinkIdentifierType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::executionPlanSetBaseType:
      return extjson_uci::type::ExecutionPlanSetBaseType::serialize(dynamic_cast<const uci::type::ExecutionPlanSetBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::executionPlanSetID_Type:
      return extjson_uci::type::ExecutionPlanSetID_Type::serialize(dynamic_cast<const uci::type::ExecutionPlanSetID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::executionSequenceInsertionType:
      return extjson_uci::type::ExecutionSequenceInsertionType::serialize(dynamic_cast<const uci::type::ExecutionSequenceInsertionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::executionSequenceInsertionTypeChoiceType:
      return extjson_uci::type::ExecutionSequenceInsertionTypeChoiceType::serialize(dynamic_cast<const uci::type::ExecutionSequenceInsertionTypeChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::executionSequenceModificationDetailsType:
      return extjson_uci::type::ExecutionSequenceModificationDetailsType::serialize(dynamic_cast<const uci::type::ExecutionSequenceModificationDetailsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::executionSequencePlanSetsType:
      return extjson_uci::type::ExecutionSequencePlanSetsType::serialize(dynamic_cast<const uci::type::ExecutionSequencePlanSetsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::executionSequenceReplaceOrModifyChoiceType:
      return extjson_uci::type::ExecutionSequenceReplaceOrModifyChoiceType::serialize(dynamic_cast<const uci::type::ExecutionSequenceReplaceOrModifyChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::executionSequenceTrimType:
      return extjson_uci::type::ExecutionSequenceTrimType::serialize(dynamic_cast<const uci::type::ExecutionSequenceTrimType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::executionSequenceType:
      return extjson_uci::type::ExecutionSequenceType::serialize(dynamic_cast<const uci::type::ExecutionSequenceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::exerciseIdentityType:
      return extjson_uci::type::ExerciseIdentityType::serialize(dynamic_cast<const uci::type::ExerciseIdentityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::expendableType:
      return extjson_uci::type::ExpendableType::serialize(dynamic_cast<const uci::type::ExpendableType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::eXPLTB_Type:
      return extjson_uci::type::EXPLTB_Type::serialize(dynamic_cast<const uci::type::EXPLTB_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::externalDataRequestMDT:
      return extjson_uci::type::ExternalDataRequestMDT::serialize(dynamic_cast<const uci::type::ExternalDataRequestMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::externalDataRequestMT:
      return extjson_uci::type::ExternalDataRequestMT::serialize(dynamic_cast<const uci::type::ExternalDataRequestMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::externalDataRequestStatusMDT:
      return extjson_uci::type::ExternalDataRequestStatusMDT::serialize(dynamic_cast<const uci::type::ExternalDataRequestStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::externalDataRequestStatusMT:
      return extjson_uci::type::ExternalDataRequestStatusMT::serialize(dynamic_cast<const uci::type::ExternalDataRequestStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::externalRequestedDataID_Type:
      return extjson_uci::type::ExternalRequestedDataID_Type::serialize(dynamic_cast<const uci::type::ExternalRequestedDataID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::extrapolatedEntityType:
      return extjson_uci::type::ExtrapolatedEntityType::serialize(dynamic_cast<const uci::type::ExtrapolatedEntityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::facilityIdentificationType:
      return extjson_uci::type::FacilityIdentificationType::serialize(dynamic_cast<const uci::type::FacilityIdentificationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::falseAlarmType:
      return extjson_uci::type::FalseAlarmType::serialize(dynamic_cast<const uci::type::FalseAlarmType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::faultDataType:
      return extjson_uci::type::FaultDataType::serialize(dynamic_cast<const uci::type::FaultDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::faultID_Type:
      return extjson_uci::type::FaultID_Type::serialize(dynamic_cast<const uci::type::FaultID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::faultMDT:
      return extjson_uci::type::FaultMDT::serialize(dynamic_cast<const uci::type::FaultMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::faultMT:
      return extjson_uci::type::FaultMT::serialize(dynamic_cast<const uci::type::FaultMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fieldOfRegardExtentsType:
      return extjson_uci::type::FieldOfRegardExtentsType::serialize(dynamic_cast<const uci::type::FieldOfRegardExtentsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fieldOfRegardType:
      return extjson_uci::type::FieldOfRegardType::serialize(dynamic_cast<const uci::type::FieldOfRegardType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fileFormatType:
      return extjson_uci::type::FileFormatType::serialize(dynamic_cast<const uci::type::FileFormatType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fileHeaderRevA_Type:
      return extjson_uci::type::FileHeaderRevA_Type::serialize(dynamic_cast<const uci::type::FileHeaderRevA_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fileHeaderType:
      return extjson_uci::type::FileHeaderType::serialize(dynamic_cast<const uci::type::FileHeaderType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fileLocationID_Type:
      return extjson_uci::type::FileLocationID_Type::serialize(dynamic_cast<const uci::type::FileLocationID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fileLocationMDT:
      return extjson_uci::type::FileLocationMDT::serialize(dynamic_cast<const uci::type::FileLocationMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fileLocationMT:
      return extjson_uci::type::FileLocationMT::serialize(dynamic_cast<const uci::type::FileLocationMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fileMetadataID_Type:
      return extjson_uci::type::FileMetadataID_Type::serialize(dynamic_cast<const uci::type::FileMetadataID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fileMetadataMDT:
      return extjson_uci::type::FileMetadataMDT::serialize(dynamic_cast<const uci::type::FileMetadataMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fileMetadataMT:
      return extjson_uci::type::FileMetadataMT::serialize(dynamic_cast<const uci::type::FileMetadataMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fileNameAndOutputType:
      return extjson_uci::type::FileNameAndOutputType::serialize(dynamic_cast<const uci::type::FileNameAndOutputType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fileOutputType:
      return extjson_uci::type::FileOutputType::serialize(dynamic_cast<const uci::type::FileOutputType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::filterID_Type:
      return extjson_uci::type::FilterID_Type::serialize(dynamic_cast<const uci::type::FilterID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fixedPositionType:
      return extjson_uci::type::FixedPositionType::serialize(dynamic_cast<const uci::type::FixedPositionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::flightActivityMDT:
      return extjson_uci::type::FlightActivityMDT::serialize(dynamic_cast<const uci::type::FlightActivityMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::flightActivityMT:
      return extjson_uci::type::FlightActivityMT::serialize(dynamic_cast<const uci::type::FlightActivityMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::flightActivityType:
      return extjson_uci::type::FlightActivityType::serialize(dynamic_cast<const uci::type::FlightActivityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::flightCapabilityMDT:
      return extjson_uci::type::FlightCapabilityMDT::serialize(dynamic_cast<const uci::type::FlightCapabilityMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::flightCapabilityMT:
      return extjson_uci::type::FlightCapabilityMT::serialize(dynamic_cast<const uci::type::FlightCapabilityMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::flightCapabilityStatusMDT:
      return extjson_uci::type::FlightCapabilityStatusMDT::serialize(dynamic_cast<const uci::type::FlightCapabilityStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::flightCapabilityStatusMT:
      return extjson_uci::type::FlightCapabilityStatusMT::serialize(dynamic_cast<const uci::type::FlightCapabilityStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::flightCapabilityType:
      return extjson_uci::type::FlightCapabilityType::serialize(dynamic_cast<const uci::type::FlightCapabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::flightTaskBaseType:
      return extjson_uci::type::FlightTaskBaseType::serialize(dynamic_cast<const uci::type::FlightTaskBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::flightTaskType:
      return extjson_uci::type::FlightTaskType::serialize(dynamic_cast<const uci::type::FlightTaskType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::floatMinMaxType:
      return extjson_uci::type::FloatMinMaxType::serialize(dynamic_cast<const uci::type::FloatMinMaxType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::focalPlaneArrayNonUniformityCorrectionReferenceType:
      return extjson_uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType::serialize(dynamic_cast<const uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::focalPlaneArrayOperationNonUniformityCorrectionType:
      return extjson_uci::type::FocalPlaneArrayOperationNonUniformityCorrectionType::serialize(dynamic_cast<const uci::type::FocalPlaneArrayOperationNonUniformityCorrectionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fOR_Type:
      return extjson_uci::type::FOR_Type::serialize(dynamic_cast<const uci::type::FOR_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::forceModelType:
      return extjson_uci::type::ForceModelType::serialize(dynamic_cast<const uci::type::ForceModelType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::foreignKeyMapDRL:
      return extjson_uci::type::ForeignKeyMapDRL::serialize(dynamic_cast<const uci::type::ForeignKeyMapDRL&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::foreignKeyMapID_Type:
      return extjson_uci::type::ForeignKeyMapID_Type::serialize(dynamic_cast<const uci::type::ForeignKeyMapID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::foreignKeyMapMDT:
      return extjson_uci::type::ForeignKeyMapMDT::serialize(dynamic_cast<const uci::type::ForeignKeyMapMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::foreignKeyMapML:
      return extjson_uci::type::ForeignKeyMapML::serialize(dynamic_cast<const uci::type::ForeignKeyMapML&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::foreignKeyMapMT:
      return extjson_uci::type::ForeignKeyMapMT::serialize(dynamic_cast<const uci::type::ForeignKeyMapMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::foreignKeyPairDRLE:
      return extjson_uci::type::ForeignKeyPairDRLE::serialize(dynamic_cast<const uci::type::ForeignKeyPairDRLE&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::foreignKeyPairID_Type:
      return extjson_uci::type::ForeignKeyPairID_Type::serialize(dynamic_cast<const uci::type::ForeignKeyPairID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::foreignKeyPairMDT:
      return extjson_uci::type::ForeignKeyPairMDT::serialize(dynamic_cast<const uci::type::ForeignKeyPairMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::foreignKeyPairMT:
      return extjson_uci::type::ForeignKeyPairMT::serialize(dynamic_cast<const uci::type::ForeignKeyPairMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::foreignKeyType:
      return extjson_uci::type::ForeignKeyType::serialize(dynamic_cast<const uci::type::ForeignKeyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fOV_ActivityType:
      return extjson_uci::type::FOV_ActivityType::serialize(dynamic_cast<const uci::type::FOV_ActivityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fOV_ExtentType:
      return extjson_uci::type::FOV_ExtentType::serialize(dynamic_cast<const uci::type::FOV_ExtentType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fOV_Type:
      return extjson_uci::type::FOV_Type::serialize(dynamic_cast<const uci::type::FOV_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fOV_VolumeType:
      return extjson_uci::type::FOV_VolumeType::serialize(dynamic_cast<const uci::type::FOV_VolumeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::frequencyControlType:
      return extjson_uci::type::FrequencyControlType::serialize(dynamic_cast<const uci::type::FrequencyControlType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::frequencyDataBaseType:
      return extjson_uci::type::FrequencyDataBaseType::serialize(dynamic_cast<const uci::type::FrequencyDataBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::frequencyDataType:
      return extjson_uci::type::FrequencyDataType::serialize(dynamic_cast<const uci::type::FrequencyDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::frequencyMultiChannelType:
      return extjson_uci::type::FrequencyMultiChannelType::serialize(dynamic_cast<const uci::type::FrequencyMultiChannelType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::frequencyParamsType:
      return extjson_uci::type::FrequencyParamsType::serialize(dynamic_cast<const uci::type::FrequencyParamsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::frequencyRangeType:
      return extjson_uci::type::FrequencyRangeType::serialize(dynamic_cast<const uci::type::FrequencyRangeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::frequencySetType:
      return extjson_uci::type::FrequencySetType::serialize(dynamic_cast<const uci::type::FrequencySetType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fuelCenterOfGravityType:
      return extjson_uci::type::FuelCenterOfGravityType::serialize(dynamic_cast<const uci::type::FuelCenterOfGravityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fuelSubsystemExtendedStatusType:
      return extjson_uci::type::FuelSubsystemExtendedStatusType::serialize(dynamic_cast<const uci::type::FuelSubsystemExtendedStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fuelTankComponentExtendedStatusType:
      return extjson_uci::type::FuelTankComponentExtendedStatusType::serialize(dynamic_cast<const uci::type::FuelTankComponentExtendedStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fuelUsageType:
      return extjson_uci::type::FuelUsageType::serialize(dynamic_cast<const uci::type::FuelUsageType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::functionalDamageConfidenceType:
      return extjson_uci::type::FunctionalDamageConfidenceType::serialize(dynamic_cast<const uci::type::FunctionalDamageConfidenceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::functionalDamageProbabilityType:
      return extjson_uci::type::FunctionalDamageProbabilityType::serialize(dynamic_cast<const uci::type::FunctionalDamageProbabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::functionID_Type:
      return extjson_uci::type::FunctionID_Type::serialize(dynamic_cast<const uci::type::FunctionID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fusionSettingsMDT:
      return extjson_uci::type::FusionSettingsMDT::serialize(dynamic_cast<const uci::type::FusionSettingsMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fusionSettingsMT:
      return extjson_uci::type::FusionSettingsMT::serialize(dynamic_cast<const uci::type::FusionSettingsMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fusionSettingsRequestMDT:
      return extjson_uci::type::FusionSettingsRequestMDT::serialize(dynamic_cast<const uci::type::FusionSettingsRequestMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fusionSettingsRequestMT:
      return extjson_uci::type::FusionSettingsRequestMT::serialize(dynamic_cast<const uci::type::FusionSettingsRequestMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fusionSettingsRequestStatusMDT:
      return extjson_uci::type::FusionSettingsRequestStatusMDT::serialize(dynamic_cast<const uci::type::FusionSettingsRequestStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fusionSettingsRequestStatusMT:
      return extjson_uci::type::FusionSettingsRequestStatusMT::serialize(dynamic_cast<const uci::type::FusionSettingsRequestStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fusionSettingsRequestType:
      return extjson_uci::type::FusionSettingsRequestType::serialize(dynamic_cast<const uci::type::FusionSettingsRequestType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fusionSettingsType:
      return extjson_uci::type::FusionSettingsType::serialize(dynamic_cast<const uci::type::FusionSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fusionSourcesType:
      return extjson_uci::type::FusionSourcesType::serialize(dynamic_cast<const uci::type::FusionSourcesType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fusionSourceType:
      return extjson_uci::type::FusionSourceType::serialize(dynamic_cast<const uci::type::FusionSourceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fuzeTriggerType:
      return extjson_uci::type::FuzeTriggerType::serialize(dynamic_cast<const uci::type::FuzeTriggerType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::fuzeType:
      return extjson_uci::type::FuzeType::serialize(dynamic_cast<const uci::type::FuzeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gainRangeType:
      return extjson_uci::type::GainRangeType::serialize(dynamic_cast<const uci::type::GainRangeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayActivityCommandType:
      return extjson_uci::type::GatewayActivityCommandType::serialize(dynamic_cast<const uci::type::GatewayActivityCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayActivityMDT:
      return extjson_uci::type::GatewayActivityMDT::serialize(dynamic_cast<const uci::type::GatewayActivityMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayActivityMT:
      return extjson_uci::type::GatewayActivityMT::serialize(dynamic_cast<const uci::type::GatewayActivityMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayActivityType:
      return extjson_uci::type::GatewayActivityType::serialize(dynamic_cast<const uci::type::GatewayActivityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayCapabilityCommandType:
      return extjson_uci::type::GatewayCapabilityCommandType::serialize(dynamic_cast<const uci::type::GatewayCapabilityCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayCapabilityMDT:
      return extjson_uci::type::GatewayCapabilityMDT::serialize(dynamic_cast<const uci::type::GatewayCapabilityMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayCapabilityMT:
      return extjson_uci::type::GatewayCapabilityMT::serialize(dynamic_cast<const uci::type::GatewayCapabilityMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayCapabilityOptionsType:
      return extjson_uci::type::GatewayCapabilityOptionsType::serialize(dynamic_cast<const uci::type::GatewayCapabilityOptionsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayCapabilitySettingsCommandBaseType:
      return extjson_uci::type::GatewayCapabilitySettingsCommandBaseType::serialize(dynamic_cast<const uci::type::GatewayCapabilitySettingsCommandBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayCapabilityStatusMDT:
      return extjson_uci::type::GatewayCapabilityStatusMDT::serialize(dynamic_cast<const uci::type::GatewayCapabilityStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayCapabilityStatusMT:
      return extjson_uci::type::GatewayCapabilityStatusMT::serialize(dynamic_cast<const uci::type::GatewayCapabilityStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayCapabilityStatusType:
      return extjson_uci::type::GatewayCapabilityStatusType::serialize(dynamic_cast<const uci::type::GatewayCapabilityStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayCapabilityType:
      return extjson_uci::type::GatewayCapabilityType::serialize(dynamic_cast<const uci::type::GatewayCapabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayCommandMDT:
      return extjson_uci::type::GatewayCommandMDT::serialize(dynamic_cast<const uci::type::GatewayCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayCommandMT:
      return extjson_uci::type::GatewayCommandMT::serialize(dynamic_cast<const uci::type::GatewayCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayCommandStatusMDT:
      return extjson_uci::type::GatewayCommandStatusMDT::serialize(dynamic_cast<const uci::type::GatewayCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayCommandStatusMT:
      return extjson_uci::type::GatewayCommandStatusMT::serialize(dynamic_cast<const uci::type::GatewayCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayCommandType:
      return extjson_uci::type::GatewayCommandType::serialize(dynamic_cast<const uci::type::GatewayCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayConfigurationPET:
      return extjson_uci::type::GatewayConfigurationPET::serialize(dynamic_cast<const uci::type::GatewayConfigurationPET&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayConfigurationType:
      return extjson_uci::type::GatewayConfigurationType::serialize(dynamic_cast<const uci::type::GatewayConfigurationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayControlType:
      return extjson_uci::type::GatewayControlType::serialize(dynamic_cast<const uci::type::GatewayControlType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayLink16ConfigurationAnnulusType:
      return extjson_uci::type::GatewayLink16ConfigurationAnnulusType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationAnnulusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayLink16ConfigurationAreaType:
      return extjson_uci::type::GatewayLink16ConfigurationAreaType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationAreaType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayLink16ConfigurationCircleType:
      return extjson_uci::type::GatewayLink16ConfigurationCircleType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationCircleType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayLink16ConfigurationCircularSectorType:
      return extjson_uci::type::GatewayLink16ConfigurationCircularSectorType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationCircularSectorType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayLink16ConfigurationClosedAreaType:
      return extjson_uci::type::GatewayLink16ConfigurationClosedAreaType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationClosedAreaType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayLink16ConfigurationEnvironmentType:
      return extjson_uci::type::GatewayLink16ConfigurationEnvironmentType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationEnvironmentType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayLink16ConfigurationIdentityType:
      return extjson_uci::type::GatewayLink16ConfigurationIdentityType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationIdentityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayLink16ConfigurationLineType:
      return extjson_uci::type::GatewayLink16ConfigurationLineType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationLineType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayLink16ConfigurationMotionType:
      return extjson_uci::type::GatewayLink16ConfigurationMotionType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationMotionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayLink16ConfigurationMovementVectorType:
      return extjson_uci::type::GatewayLink16ConfigurationMovementVectorType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationMovementVectorType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayLink16ConfigurationRectangleType:
      return extjson_uci::type::GatewayLink16ConfigurationRectangleType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationRectangleType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayLink16ConfigurationSlaveType:
      return extjson_uci::type::GatewayLink16ConfigurationSlaveType::serialize(dynamic_cast<const uci::type::GatewayLink16ConfigurationSlaveType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayLinkDestinationType:
      return extjson_uci::type::GatewayLinkDestinationType::serialize(dynamic_cast<const uci::type::GatewayLinkDestinationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayLinkStatisticsType:
      return extjson_uci::type::GatewayLinkStatisticsType::serialize(dynamic_cast<const uci::type::GatewayLinkStatisticsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewayNativeStatisticsPET:
      return extjson_uci::type::GatewayNativeStatisticsPET::serialize(dynamic_cast<const uci::type::GatewayNativeStatisticsPET&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewaySettingsCommandMDT:
      return extjson_uci::type::GatewaySettingsCommandMDT::serialize(dynamic_cast<const uci::type::GatewaySettingsCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewaySettingsCommandMT:
      return extjson_uci::type::GatewaySettingsCommandMT::serialize(dynamic_cast<const uci::type::GatewaySettingsCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewaySettingsCommandStatusMDT:
      return extjson_uci::type::GatewaySettingsCommandStatusMDT::serialize(dynamic_cast<const uci::type::GatewaySettingsCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gatewaySettingsCommandStatusMT:
      return extjson_uci::type::GatewaySettingsCommandStatusMT::serialize(dynamic_cast<const uci::type::GatewaySettingsCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gCRS_KinematicsType:
      return extjson_uci::type::GCRS_KinematicsType::serialize(dynamic_cast<const uci::type::GCRS_KinematicsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gCRS_PositionType:
      return extjson_uci::type::GCRS_PositionType::serialize(dynamic_cast<const uci::type::GCRS_PositionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::genericDataLinkNativeInfoType:
      return extjson_uci::type::GenericDataLinkNativeInfoType::serialize(dynamic_cast<const uci::type::GenericDataLinkNativeInfoType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::geocentricVolumeType:
      return extjson_uci::type::GeocentricVolumeType::serialize(dynamic_cast<const uci::type::GeocentricVolumeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::geoFiltersQueryType:
      return extjson_uci::type::GeoFiltersQueryType::serialize(dynamic_cast<const uci::type::GeoFiltersQueryType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::geoLocatedObjectType:
      return extjson_uci::type::GeoLocatedObjectType::serialize(dynamic_cast<const uci::type::GeoLocatedObjectType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::geoLocatedStoredObjectType:
      return extjson_uci::type::GeoLocatedStoredObjectType::serialize(dynamic_cast<const uci::type::GeoLocatedStoredObjectType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::geomagneticApRecordType:
      return extjson_uci::type::GeomagneticApRecordType::serialize(dynamic_cast<const uci::type::GeomagneticApRecordType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::geomagneticKpRecordType:
      return extjson_uci::type::GeomagneticKpRecordType::serialize(dynamic_cast<const uci::type::GeomagneticKpRecordType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::geomagneticStormApType:
      return extjson_uci::type::GeomagneticStormApType::serialize(dynamic_cast<const uci::type::GeomagneticStormApType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::geomagneticStormKpType:
      return extjson_uci::type::GeomagneticStormKpType::serialize(dynamic_cast<const uci::type::GeomagneticStormKpType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::geometricVolumeType:
      return extjson_uci::type::GeometricVolumeType::serialize(dynamic_cast<const uci::type::GeometricVolumeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gimbalAxisControlStatusType:
      return extjson_uci::type::GimbalAxisControlStatusType::serialize(dynamic_cast<const uci::type::GimbalAxisControlStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gimbalAxisControlType:
      return extjson_uci::type::GimbalAxisControlType::serialize(dynamic_cast<const uci::type::GimbalAxisControlType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gimbalAxisID_Type:
      return extjson_uci::type::GimbalAxisID_Type::serialize(dynamic_cast<const uci::type::GimbalAxisID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gimbalAxisPairType:
      return extjson_uci::type::GimbalAxisPairType::serialize(dynamic_cast<const uci::type::GimbalAxisPairType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gimbalOrientationPairType:
      return extjson_uci::type::GimbalOrientationPairType::serialize(dynamic_cast<const uci::type::GimbalOrientationPairType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::gravityModelType:
      return extjson_uci::type::GravityModelType::serialize(dynamic_cast<const uci::type::GravityModelType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::headerType:
      return extjson_uci::type::HeaderType::serialize(dynamic_cast<const uci::type::HeaderType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::hierarchyModificationType:
      return extjson_uci::type::HierarchyModificationType::serialize(dynamic_cast<const uci::type::HierarchyModificationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::hoverType:
      return extjson_uci::type::HoverType::serialize(dynamic_cast<const uci::type::HoverType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::hRR_ChipSizeType:
      return extjson_uci::type::HRR_ChipSizeType::serialize(dynamic_cast<const uci::type::HRR_ChipSizeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::hRR_OptionsType:
      return extjson_uci::type::HRR_OptionsType::serialize(dynamic_cast<const uci::type::HRR_OptionsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::hSB_ColorControlType:
      return extjson_uci::type::HSB_ColorControlType::serialize(dynamic_cast<const uci::type::HSB_ColorControlType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iD_Type:
      return extjson_uci::type::ID_Type::serialize(dynamic_cast<const uci::type::ID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::identificationVerificationCharacterizationType:
      return extjson_uci::type::IdentificationVerificationCharacterizationType::serialize(dynamic_cast<const uci::type::IdentificationVerificationCharacterizationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::identificationVerificationType:
      return extjson_uci::type::IdentificationVerificationType::serialize(dynamic_cast<const uci::type::IdentificationVerificationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::identityBasicType:
      return extjson_uci::type::IdentityBasicType::serialize(dynamic_cast<const uci::type::IdentityBasicType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::identityComparisonType:
      return extjson_uci::type::IdentityComparisonType::serialize(dynamic_cast<const uci::type::IdentityComparisonType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::identityConfidenceType:
      return extjson_uci::type::IdentityConfidenceType::serialize(dynamic_cast<const uci::type::IdentityConfidenceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::identityKindAssetType:
      return extjson_uci::type::IdentityKindAssetType::serialize(dynamic_cast<const uci::type::IdentityKindAssetType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::identityKindInstanceType:
      return extjson_uci::type::IdentityKindInstanceType::serialize(dynamic_cast<const uci::type::IdentityKindInstanceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::identityType:
      return extjson_uci::type::IdentityType::serialize(dynamic_cast<const uci::type::IdentityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_ActiveModesType:
      return extjson_uci::type::IFF_ActiveModesType::serialize(dynamic_cast<const uci::type::IFF_ActiveModesType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_ActivityCommandType:
      return extjson_uci::type::IFF_ActivityCommandType::serialize(dynamic_cast<const uci::type::IFF_ActivityCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_ActivityMDT:
      return extjson_uci::type::IFF_ActivityMDT::serialize(dynamic_cast<const uci::type::IFF_ActivityMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_ActivityMT:
      return extjson_uci::type::IFF_ActivityMT::serialize(dynamic_cast<const uci::type::IFF_ActivityMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_ActivityTransponderType:
      return extjson_uci::type::IFF_ActivityTransponderType::serialize(dynamic_cast<const uci::type::IFF_ActivityTransponderType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_ActivityType:
      return extjson_uci::type::IFF_ActivityType::serialize(dynamic_cast<const uci::type::IFF_ActivityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_CapabilityCommandType:
      return extjson_uci::type::IFF_CapabilityCommandType::serialize(dynamic_cast<const uci::type::IFF_CapabilityCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_CapabilityMDT:
      return extjson_uci::type::IFF_CapabilityMDT::serialize(dynamic_cast<const uci::type::IFF_CapabilityMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_CapabilityMT:
      return extjson_uci::type::IFF_CapabilityMT::serialize(dynamic_cast<const uci::type::IFF_CapabilityMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_CapabilityOptionsType:
      return extjson_uci::type::IFF_CapabilityOptionsType::serialize(dynamic_cast<const uci::type::IFF_CapabilityOptionsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_CapabilityStatusMDT:
      return extjson_uci::type::IFF_CapabilityStatusMDT::serialize(dynamic_cast<const uci::type::IFF_CapabilityStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_CapabilityStatusMT:
      return extjson_uci::type::IFF_CapabilityStatusMT::serialize(dynamic_cast<const uci::type::IFF_CapabilityStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_CapabilityType:
      return extjson_uci::type::IFF_CapabilityType::serialize(dynamic_cast<const uci::type::IFF_CapabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_CollectionConstraintsType:
      return extjson_uci::type::IFF_CollectionConstraintsType::serialize(dynamic_cast<const uci::type::IFF_CollectionConstraintsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_CommandMDT:
      return extjson_uci::type::IFF_CommandMDT::serialize(dynamic_cast<const uci::type::IFF_CommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_CommandMT:
      return extjson_uci::type::IFF_CommandMT::serialize(dynamic_cast<const uci::type::IFF_CommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_CommandStatusMDT:
      return extjson_uci::type::IFF_CommandStatusMDT::serialize(dynamic_cast<const uci::type::IFF_CommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_CommandStatusMT:
      return extjson_uci::type::IFF_CommandStatusMT::serialize(dynamic_cast<const uci::type::IFF_CommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_CommandType:
      return extjson_uci::type::IFF_CommandType::serialize(dynamic_cast<const uci::type::IFF_CommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_ConsentRequestMDT:
      return extjson_uci::type::IFF_ConsentRequestMDT::serialize(dynamic_cast<const uci::type::IFF_ConsentRequestMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_ConsentRequestMT:
      return extjson_uci::type::IFF_ConsentRequestMT::serialize(dynamic_cast<const uci::type::IFF_ConsentRequestMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_ConsentRequestStatusMDT:
      return extjson_uci::type::IFF_ConsentRequestStatusMDT::serialize(dynamic_cast<const uci::type::IFF_ConsentRequestStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_ConsentRequestStatusMT:
      return extjson_uci::type::IFF_ConsentRequestStatusMT::serialize(dynamic_cast<const uci::type::IFF_ConsentRequestStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_ConsentRequestType:
      return extjson_uci::type::IFF_ConsentRequestType::serialize(dynamic_cast<const uci::type::IFF_ConsentRequestType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_InterrogatorModesEnableType:
      return extjson_uci::type::IFF_InterrogatorModesEnableType::serialize(dynamic_cast<const uci::type::IFF_InterrogatorModesEnableType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_InterrogatorTransponderModesType:
      return extjson_uci::type::IFF_InterrogatorTransponderModesType::serialize(dynamic_cast<const uci::type::IFF_InterrogatorTransponderModesType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_Mode1Type:
      return extjson_uci::type::IFF_Mode1Type::serialize(dynamic_cast<const uci::type::IFF_Mode1Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_Mode4Type:
      return extjson_uci::type::IFF_Mode4Type::serialize(dynamic_cast<const uci::type::IFF_Mode4Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_Mode5DetailsType:
      return extjson_uci::type::IFF_Mode5DetailsType::serialize(dynamic_cast<const uci::type::IFF_Mode5DetailsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_Mode5Type:
      return extjson_uci::type::IFF_Mode5Type::serialize(dynamic_cast<const uci::type::IFF_Mode5Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_ModeControlType:
      return extjson_uci::type::IFF_ModeControlType::serialize(dynamic_cast<const uci::type::IFF_ModeControlType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_ModeS_Type:
      return extjson_uci::type::IFF_ModeS_Type::serialize(dynamic_cast<const uci::type::IFF_ModeS_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_ModesAvailableType:
      return extjson_uci::type::IFF_ModesAvailableType::serialize(dynamic_cast<const uci::type::IFF_ModesAvailableType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_ModeSelectionType:
      return extjson_uci::type::IFF_ModeSelectionType::serialize(dynamic_cast<const uci::type::IFF_ModeSelectionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_OctalModeType:
      return extjson_uci::type::IFF_OctalModeType::serialize(dynamic_cast<const uci::type::IFF_OctalModeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_SettingsCommandMDT:
      return extjson_uci::type::IFF_SettingsCommandMDT::serialize(dynamic_cast<const uci::type::IFF_SettingsCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_SettingsCommandMT:
      return extjson_uci::type::IFF_SettingsCommandMT::serialize(dynamic_cast<const uci::type::IFF_SettingsCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_SettingsCommandStatusMDT:
      return extjson_uci::type::IFF_SettingsCommandStatusMDT::serialize(dynamic_cast<const uci::type::IFF_SettingsCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_SettingsCommandStatusMT:
      return extjson_uci::type::IFF_SettingsCommandStatusMT::serialize(dynamic_cast<const uci::type::IFF_SettingsCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_SimultaneousSelectionType:
      return extjson_uci::type::IFF_SimultaneousSelectionType::serialize(dynamic_cast<const uci::type::IFF_SimultaneousSelectionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_SubmodesType:
      return extjson_uci::type::IFF_SubmodesType::serialize(dynamic_cast<const uci::type::IFF_SubmodesType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_TransponderModeControlType:
      return extjson_uci::type::IFF_TransponderModeControlType::serialize(dynamic_cast<const uci::type::IFF_TransponderModeControlType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_TransponderModesSelectionType:
      return extjson_uci::type::IFF_TransponderModesSelectionType::serialize(dynamic_cast<const uci::type::IFF_TransponderModesSelectionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iFF_Type:
      return extjson_uci::type::IFF_Type::serialize(dynamic_cast<const uci::type::IFF_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iID2_ChoiceType:
      return extjson_uci::type::IID2_ChoiceType::serialize(dynamic_cast<const uci::type::IID2_ChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iJMS_DataLinkIdentifierType:
      return extjson_uci::type::IJMS_DataLinkIdentifierType::serialize(dynamic_cast<const uci::type::IJMS_DataLinkIdentifierType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iJMS_QuerySpecificDataType:
      return extjson_uci::type::IJMS_QuerySpecificDataType::serialize(dynamic_cast<const uci::type::IJMS_QuerySpecificDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::imageAugmentationParametersType:
      return extjson_uci::type::ImageAugmentationParametersType::serialize(dynamic_cast<const uci::type::ImageAugmentationParametersType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::imageGeoRegistrationProcessingResultsType:
      return extjson_uci::type::ImageGeoRegistrationProcessingResultsType::serialize(dynamic_cast<const uci::type::ImageGeoRegistrationProcessingResultsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::imagePixelGeoLocationProcessingParametersType:
      return extjson_uci::type::ImagePixelGeoLocationProcessingParametersType::serialize(dynamic_cast<const uci::type::ImagePixelGeoLocationProcessingParametersType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::imagePixelGeoLocationProcessingResultsType:
      return extjson_uci::type::ImagePixelGeoLocationProcessingResultsType::serialize(dynamic_cast<const uci::type::ImagePixelGeoLocationProcessingResultsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::imageRegionOfInterestPET:
      return extjson_uci::type::ImageRegionOfInterestPET::serialize(dynamic_cast<const uci::type::ImageRegionOfInterestPET&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::imageSubheaderRevA_Type:
      return extjson_uci::type::ImageSubheaderRevA_Type::serialize(dynamic_cast<const uci::type::ImageSubheaderRevA_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::imageSubheaderType:
      return extjson_uci::type::ImageSubheaderType::serialize(dynamic_cast<const uci::type::ImageSubheaderType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::impactConditionsType:
      return extjson_uci::type::ImpactConditionsType::serialize(dynamic_cast<const uci::type::ImpactConditionsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::impactDetailsType:
      return extjson_uci::type::ImpactDetailsType::serialize(dynamic_cast<const uci::type::ImpactDetailsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::impactPointType:
      return extjson_uci::type::ImpactPointType::serialize(dynamic_cast<const uci::type::ImpactPointType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::incompleteProcessingType:
      return extjson_uci::type::IncompleteProcessingType::serialize(dynamic_cast<const uci::type::IncompleteProcessingType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::incRaPeriodVolumeType:
      return extjson_uci::type::IncRaPeriodVolumeType::serialize(dynamic_cast<const uci::type::IncRaPeriodVolumeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::incrementalChangeType:
      return extjson_uci::type::IncrementalChangeType::serialize(dynamic_cast<const uci::type::IncrementalChangeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::inertialStateRelativeType:
      return extjson_uci::type::InertialStateRelativeType::serialize(dynamic_cast<const uci::type::InertialStateRelativeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::inertialStateType:
      return extjson_uci::type::InertialStateType::serialize(dynamic_cast<const uci::type::InertialStateType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::ingressEgressType:
      return extjson_uci::type::IngressEgressType::serialize(dynamic_cast<const uci::type::IngressEgressType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::inputProductType:
      return extjson_uci::type::InputProductType::serialize(dynamic_cast<const uci::type::InputProductType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::installationDetailsType:
      return extjson_uci::type::InstallationDetailsType::serialize(dynamic_cast<const uci::type::InstallationDetailsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::integerMinMaxType:
      return extjson_uci::type::IntegerMinMaxType::serialize(dynamic_cast<const uci::type::IntegerMinMaxType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::integratorSettingsType:
      return extjson_uci::type::IntegratorSettingsType::serialize(dynamic_cast<const uci::type::IntegratorSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::internationalDesignatorType:
      return extjson_uci::type::InternationalDesignatorType::serialize(dynamic_cast<const uci::type::InternationalDesignatorType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::intervalChoiceType:
      return extjson_uci::type::IntervalChoiceType::serialize(dynamic_cast<const uci::type::IntervalChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::invalidActivityType:
      return extjson_uci::type::InvalidActivityType::serialize(dynamic_cast<const uci::type::InvalidActivityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iO_PortCommandMDT:
      return extjson_uci::type::IO_PortCommandMDT::serialize(dynamic_cast<const uci::type::IO_PortCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iO_PortCommandMT:
      return extjson_uci::type::IO_PortCommandMT::serialize(dynamic_cast<const uci::type::IO_PortCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iO_PortCommandStatusMDT:
      return extjson_uci::type::IO_PortCommandStatusMDT::serialize(dynamic_cast<const uci::type::IO_PortCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iO_PortCommandStatusMT:
      return extjson_uci::type::IO_PortCommandStatusMT::serialize(dynamic_cast<const uci::type::IO_PortCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iO_PortCommandType:
      return extjson_uci::type::IO_PortCommandType::serialize(dynamic_cast<const uci::type::IO_PortCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iO_PortConfigurationStatusType:
      return extjson_uci::type::IO_PortConfigurationStatusType::serialize(dynamic_cast<const uci::type::IO_PortConfigurationStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iO_PortStatusMDT:
      return extjson_uci::type::IO_PortStatusMDT::serialize(dynamic_cast<const uci::type::IO_PortStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iO_PortStatusMT:
      return extjson_uci::type::IO_PortStatusMT::serialize(dynamic_cast<const uci::type::IO_PortStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iO_PortStatusType:
      return extjson_uci::type::IO_PortStatusType::serialize(dynamic_cast<const uci::type::IO_PortStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iO_PortType:
      return extjson_uci::type::IO_PortType::serialize(dynamic_cast<const uci::type::IO_PortType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iP_ConnectionChoiceType:
      return extjson_uci::type::IP_ConnectionChoiceType::serialize(dynamic_cast<const uci::type::IP_ConnectionChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iP_ConnectionType:
      return extjson_uci::type::IP_ConnectionType::serialize(dynamic_cast<const uci::type::IP_ConnectionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iP_DataLinkNativeInfoType:
      return extjson_uci::type::IP_DataLinkNativeInfoType::serialize(dynamic_cast<const uci::type::IP_DataLinkNativeInfoType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iPON_IID2_Type:
      return extjson_uci::type::IPON_IID2_Type::serialize(dynamic_cast<const uci::type::IPON_IID2_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iPv4_ConnectionType:
      return extjson_uci::type::IPv4_ConnectionType::serialize(dynamic_cast<const uci::type::IPv4_ConnectionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iPv4_DataLinkNativeInfoType:
      return extjson_uci::type::IPv4_DataLinkNativeInfoType::serialize(dynamic_cast<const uci::type::IPv4_DataLinkNativeInfoType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iPv4_EndpointType:
      return extjson_uci::type::IPv4_EndpointType::serialize(dynamic_cast<const uci::type::IPv4_EndpointType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iPv4_SettingsType:
      return extjson_uci::type::IPv4_SettingsType::serialize(dynamic_cast<const uci::type::IPv4_SettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iPv6_ConnectionType:
      return extjson_uci::type::IPv6_ConnectionType::serialize(dynamic_cast<const uci::type::IPv6_ConnectionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iPv6_DataLinkNativeInfoType:
      return extjson_uci::type::IPv6_DataLinkNativeInfoType::serialize(dynamic_cast<const uci::type::IPv6_DataLinkNativeInfoType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iPv6_EndpointType:
      return extjson_uci::type::IPv6_EndpointType::serialize(dynamic_cast<const uci::type::IPv6_EndpointType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iPv6_SettingsType:
      return extjson_uci::type::IPv6_SettingsType::serialize(dynamic_cast<const uci::type::IPv6_SettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iR_ImageParamsType:
      return extjson_uci::type::IR_ImageParamsType::serialize(dynamic_cast<const uci::type::IR_ImageParamsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iSAR_SubCapabilityType:
      return extjson_uci::type::ISAR_SubCapabilityType::serialize(dynamic_cast<const uci::type::ISAR_SubCapabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::iSAR_TargetType:
      return extjson_uci::type::ISAR_TargetType::serialize(dynamic_cast<const uci::type::ISAR_TargetType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::j2K_KinematicsType:
      return extjson_uci::type::J2K_KinematicsType::serialize(dynamic_cast<const uci::type::J2K_KinematicsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::j2K_PositionType:
      return extjson_uci::type::J2K_PositionType::serialize(dynamic_cast<const uci::type::J2K_PositionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::jammerEmitterIdentityType:
      return extjson_uci::type::JammerEmitterIdentityType::serialize(dynamic_cast<const uci::type::JammerEmitterIdentityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::jammerStationType:
      return extjson_uci::type::JammerStationType::serialize(dynamic_cast<const uci::type::JammerStationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::jPEG_SettingsType:
      return extjson_uci::type::JPEG_SettingsType::serialize(dynamic_cast<const uci::type::JPEG_SettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::jPEG_WaveletTransformType:
      return extjson_uci::type::JPEG_WaveletTransformType::serialize(dynamic_cast<const uci::type::JPEG_WaveletTransformType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::jREAP_CommonTimeReferenceType:
      return extjson_uci::type::JREAP_CommonTimeReferenceType::serialize(dynamic_cast<const uci::type::JREAP_CommonTimeReferenceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::jREAP_GatewayNativeStatisticsType:
      return extjson_uci::type::JREAP_GatewayNativeStatisticsType::serialize(dynamic_cast<const uci::type::JREAP_GatewayNativeStatisticsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::kinematicsChoiceType:
      return extjson_uci::type::KinematicsChoiceType::serialize(dynamic_cast<const uci::type::KinematicsChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::kinematicsFixedPositionType:
      return extjson_uci::type::KinematicsFixedPositionType::serialize(dynamic_cast<const uci::type::KinematicsFixedPositionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::kinematicsFixedType:
      return extjson_uci::type::KinematicsFixedType::serialize(dynamic_cast<const uci::type::KinematicsFixedType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::kinematicsMultiStandardType:
      return extjson_uci::type::KinematicsMultiStandardType::serialize(dynamic_cast<const uci::type::KinematicsMultiStandardType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::kinematicsOptionsType:
      return extjson_uci::type::KinematicsOptionsType::serialize(dynamic_cast<const uci::type::KinematicsOptionsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::kinematicsType:
      return extjson_uci::type::KinematicsType::serialize(dynamic_cast<const uci::type::KinematicsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lAR_AnalysisType:
      return extjson_uci::type::LAR_AnalysisType::serialize(dynamic_cast<const uci::type::LAR_AnalysisType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lAR_CalculationWindType:
      return extjson_uci::type::LAR_CalculationWindType::serialize(dynamic_cast<const uci::type::LAR_CalculationWindType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lAR_DetailsType:
      return extjson_uci::type::LAR_DetailsType::serialize(dynamic_cast<const uci::type::LAR_DetailsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lAR_ID_Type:
      return extjson_uci::type::LAR_ID_Type::serialize(dynamic_cast<const uci::type::LAR_ID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lAR_MDT:
      return extjson_uci::type::LAR_MDT::serialize(dynamic_cast<const uci::type::LAR_MDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lAR_MT:
      return extjson_uci::type::LAR_MT::serialize(dynamic_cast<const uci::type::LAR_MT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lAR_ReleaseConditionsType:
      return extjson_uci::type::LAR_ReleaseConditionsType::serialize(dynamic_cast<const uci::type::LAR_ReleaseConditionsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lAR_ReportMDT:
      return extjson_uci::type::LAR_ReportMDT::serialize(dynamic_cast<const uci::type::LAR_ReportMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lAR_ReportMT:
      return extjson_uci::type::LAR_ReportMT::serialize(dynamic_cast<const uci::type::LAR_ReportMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lAR_RequestMDT:
      return extjson_uci::type::LAR_RequestMDT::serialize(dynamic_cast<const uci::type::LAR_RequestMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lAR_RequestMT:
      return extjson_uci::type::LAR_RequestMT::serialize(dynamic_cast<const uci::type::LAR_RequestMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lAR_RequestStatusMDT:
      return extjson_uci::type::LAR_RequestStatusMDT::serialize(dynamic_cast<const uci::type::LAR_RequestStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lAR_RequestStatusMT:
      return extjson_uci::type::LAR_RequestStatusMT::serialize(dynamic_cast<const uci::type::LAR_RequestStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::launchObjectID_Type:
      return extjson_uci::type::LaunchObjectID_Type::serialize(dynamic_cast<const uci::type::LaunchObjectID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::launchObjectType:
      return extjson_uci::type::LaunchObjectType::serialize(dynamic_cast<const uci::type::LaunchObjectType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::launchObservationID_Type:
      return extjson_uci::type::LaunchObservationID_Type::serialize(dynamic_cast<const uci::type::LaunchObservationID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::launchObservationMDT:
      return extjson_uci::type::LaunchObservationMDT::serialize(dynamic_cast<const uci::type::LaunchObservationMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::launchObservationMT:
      return extjson_uci::type::LaunchObservationMT::serialize(dynamic_cast<const uci::type::LaunchObservationMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::launchStageConfidenceType:
      return extjson_uci::type::LaunchStageConfidenceType::serialize(dynamic_cast<const uci::type::LaunchStageConfidenceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::launchStaticDetailsType:
      return extjson_uci::type::LaunchStaticDetailsType::serialize(dynamic_cast<const uci::type::LaunchStaticDetailsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::level2Type:
      return extjson_uci::type::Level2Type::serialize(dynamic_cast<const uci::type::Level2Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lineDataStatusType:
      return extjson_uci::type::LineDataStatusType::serialize(dynamic_cast<const uci::type::LineDataStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lineOfSightChoiceType:
      return extjson_uci::type::LineOfSightChoiceType::serialize(dynamic_cast<const uci::type::LineOfSightChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::linePoint2D_Type:
      return extjson_uci::type::LinePoint2D_Type::serialize(dynamic_cast<const uci::type::LinePoint2D_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::linePointChoiceType:
      return extjson_uci::type::LinePointChoiceType::serialize(dynamic_cast<const uci::type::LinePointChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lineRelativeType:
      return extjson_uci::type::LineRelativeType::serialize(dynamic_cast<const uci::type::LineRelativeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lineTargetType:
      return extjson_uci::type::LineTargetType::serialize(dynamic_cast<const uci::type::LineTargetType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lineType:
      return extjson_uci::type::LineType::serialize(dynamic_cast<const uci::type::LineType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link11DataLinkIdentifierType:
      return extjson_uci::type::Link11DataLinkIdentifierType::serialize(dynamic_cast<const uci::type::Link11DataLinkIdentifierType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link11QuerySpecificDataType:
      return extjson_uci::type::Link11QuerySpecificDataType::serialize(dynamic_cast<const uci::type::Link11QuerySpecificDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16ActiveRelayIndicatorsType:
      return extjson_uci::type::Link16ActiveRelayIndicatorsType::serialize(dynamic_cast<const uci::type::Link16ActiveRelayIndicatorsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16AmplificationDataStoreActionType:
      return extjson_uci::type::Link16AmplificationDataStoreActionType::serialize(dynamic_cast<const uci::type::Link16AmplificationDataStoreActionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16DataLinkIdentifierType:
      return extjson_uci::type::Link16DataLinkIdentifierType::serialize(dynamic_cast<const uci::type::Link16DataLinkIdentifierType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16DataLinkNativeInfoType:
      return extjson_uci::type::Link16DataLinkNativeInfoType::serialize(dynamic_cast<const uci::type::Link16DataLinkNativeInfoType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16DataStoreManagementType:
      return extjson_uci::type::Link16DataStoreManagementType::serialize(dynamic_cast<const uci::type::Link16DataStoreManagementType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16EngagementStatusDataStoreActionType:
      return extjson_uci::type::Link16EngagementStatusDataStoreActionType::serialize(dynamic_cast<const uci::type::Link16EngagementStatusDataStoreActionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16EntityDataLinkNativeFilterType:
      return extjson_uci::type::Link16EntityDataLinkNativeFilterType::serialize(dynamic_cast<const uci::type::Link16EntityDataLinkNativeFilterType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16EntityMetadataType:
      return extjson_uci::type::Link16EntityMetadataType::serialize(dynamic_cast<const uci::type::Link16EntityMetadataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16EW_DataStoreActionType:
      return extjson_uci::type::Link16EW_DataStoreActionType::serialize(dynamic_cast<const uci::type::Link16EW_DataStoreActionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16EW_DataStoreID_ChoiceType:
      return extjson_uci::type::Link16EW_DataStoreID_ChoiceType::serialize(dynamic_cast<const uci::type::Link16EW_DataStoreID_ChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16FriendlyTargetofInterestDataStoreActionType:
      return extjson_uci::type::Link16FriendlyTargetofInterestDataStoreActionType::serialize(dynamic_cast<const uci::type::Link16FriendlyTargetofInterestDataStoreActionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16FriendlyTargetofInterestDataStoreID_ChoiceType:
      return extjson_uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType::serialize(dynamic_cast<const uci::type::Link16FriendlyTargetofInterestDataStoreID_ChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16GatewayConfigurationType:
      return extjson_uci::type::Link16GatewayConfigurationType::serialize(dynamic_cast<const uci::type::Link16GatewayConfigurationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16HazardType:
      return extjson_uci::type::Link16HazardType::serialize(dynamic_cast<const uci::type::Link16HazardType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16InterfaceDataLinkNativeInfoType:
      return extjson_uci::type::Link16InterfaceDataLinkNativeInfoType::serialize(dynamic_cast<const uci::type::Link16InterfaceDataLinkNativeInfoType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16MetadataType:
      return extjson_uci::type::Link16MetadataType::serialize(dynamic_cast<const uci::type::Link16MetadataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16ReferencePointDataStoreActionType:
      return extjson_uci::type::Link16ReferencePointDataStoreActionType::serialize(dynamic_cast<const uci::type::Link16ReferencePointDataStoreActionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16ReferencePointDataStoreID_ChoiceType:
      return extjson_uci::type::Link16ReferencePointDataStoreID_ChoiceType::serialize(dynamic_cast<const uci::type::Link16ReferencePointDataStoreID_ChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16SystemMetadataType:
      return extjson_uci::type::Link16SystemMetadataType::serialize(dynamic_cast<const uci::type::Link16SystemMetadataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16TextReportDataStoreActionType:
      return extjson_uci::type::Link16TextReportDataStoreActionType::serialize(dynamic_cast<const uci::type::Link16TextReportDataStoreActionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16ThreatWarningDataStoreActionType:
      return extjson_uci::type::Link16ThreatWarningDataStoreActionType::serialize(dynamic_cast<const uci::type::Link16ThreatWarningDataStoreActionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16TN_QuerySpecificDataType:
      return extjson_uci::type::Link16TN_QuerySpecificDataType::serialize(dynamic_cast<const uci::type::Link16TN_QuerySpecificDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16TrackBlockType:
      return extjson_uci::type::Link16TrackBlockType::serialize(dynamic_cast<const uci::type::Link16TrackBlockType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::link16TrackIdentifierType:
      return extjson_uci::type::Link16TrackIdentifierType::serialize(dynamic_cast<const uci::type::Link16TrackIdentifierType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::linkConnectionRequestType:
      return extjson_uci::type::LinkConnectionRequestType::serialize(dynamic_cast<const uci::type::LinkConnectionRequestType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::linkedRequirementType:
      return extjson_uci::type::LinkedRequirementType::serialize(dynamic_cast<const uci::type::LinkedRequirementType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::linkMetricsType:
      return extjson_uci::type::LinkMetricsType::serialize(dynamic_cast<const uci::type::LinkMetricsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::linkRatesType:
      return extjson_uci::type::LinkRatesType::serialize(dynamic_cast<const uci::type::LinkRatesType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lobeType:
      return extjson_uci::type::LobeType::serialize(dynamic_cast<const uci::type::LobeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::locatedEllipseType:
      return extjson_uci::type::LocatedEllipseType::serialize(dynamic_cast<const uci::type::LocatedEllipseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::locatedRectangleType:
      return extjson_uci::type::LocatedRectangleType::serialize(dynamic_cast<const uci::type::LocatedRectangleType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::locationAndStatusBaseType:
      return extjson_uci::type::LocationAndStatusBaseType::serialize(dynamic_cast<const uci::type::LocationAndStatusBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::locationAndStatusExpireType:
      return extjson_uci::type::LocationAndStatusExpireType::serialize(dynamic_cast<const uci::type::LocationAndStatusExpireType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::locationFilterType:
      return extjson_uci::type::LocationFilterType::serialize(dynamic_cast<const uci::type::LocationFilterType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::locationType:
      return extjson_uci::type::LocationType::serialize(dynamic_cast<const uci::type::LocationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::logMDT:
      return extjson_uci::type::LogMDT::serialize(dynamic_cast<const uci::type::LogMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::logMT:
      return extjson_uci::type::LogMT::serialize(dynamic_cast<const uci::type::LogMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::loiterPointType:
      return extjson_uci::type::LoiterPointType::serialize(dynamic_cast<const uci::type::LoiterPointType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::loiterProgressType:
      return extjson_uci::type::LoiterProgressType::serialize(dynamic_cast<const uci::type::LoiterProgressType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::loiterType:
      return extjson_uci::type::LoiterType::serialize(dynamic_cast<const uci::type::LoiterType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::longBaselineInterferometerInfoType:
      return extjson_uci::type::LongBaselineInterferometerInfoType::serialize(dynamic_cast<const uci::type::LongBaselineInterferometerInfoType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_AzElRatesType:
      return extjson_uci::type::LOS_AzElRatesType::serialize(dynamic_cast<const uci::type::LOS_AzElRatesType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_AzElType:
      return extjson_uci::type::LOS_AzElType::serialize(dynamic_cast<const uci::type::LOS_AzElType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_CovariancesRatesType:
      return extjson_uci::type::LOS_CovariancesRatesType::serialize(dynamic_cast<const uci::type::LOS_CovariancesRatesType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_CovarianceType:
      return extjson_uci::type::LOS_CovarianceType::serialize(dynamic_cast<const uci::type::LOS_CovarianceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_D_Type:
      return extjson_uci::type::LOS_D_Type::serialize(dynamic_cast<const uci::type::LOS_D_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_InertialA_Type:
      return extjson_uci::type::LOS_InertialA_Type::serialize(dynamic_cast<const uci::type::LOS_InertialA_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_InertialB_Type:
      return extjson_uci::type::LOS_InertialB_Type::serialize(dynamic_cast<const uci::type::LOS_InertialB_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_MeasurementAndUncertaintyType:
      return extjson_uci::type::LOS_MeasurementAndUncertaintyType::serialize(dynamic_cast<const uci::type::LOS_MeasurementAndUncertaintyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_MeasurementType:
      return extjson_uci::type::LOS_MeasurementType::serialize(dynamic_cast<const uci::type::LOS_MeasurementType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_MeasurementUncertaintyErrorSourcesType:
      return extjson_uci::type::LOS_MeasurementUncertaintyErrorSourcesType::serialize(dynamic_cast<const uci::type::LOS_MeasurementUncertaintyErrorSourcesType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_MeasurementUncertaintyType:
      return extjson_uci::type::LOS_MeasurementUncertaintyType::serialize(dynamic_cast<const uci::type::LOS_MeasurementUncertaintyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_MeasurementWithUncertaintyType:
      return extjson_uci::type::LOS_MeasurementWithUncertaintyType::serialize(dynamic_cast<const uci::type::LOS_MeasurementWithUncertaintyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_RatesType:
      return extjson_uci::type::LOS_RatesType::serialize(dynamic_cast<const uci::type::LOS_RatesType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_SlantRangeCovarianceRatesType:
      return extjson_uci::type::LOS_SlantRangeCovarianceRatesType::serialize(dynamic_cast<const uci::type::LOS_SlantRangeCovarianceRatesType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_SlantRangeCovarianceType:
      return extjson_uci::type::LOS_SlantRangeCovarianceType::serialize(dynamic_cast<const uci::type::LOS_SlantRangeCovarianceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_SlantRangeUncertaintyType:
      return extjson_uci::type::LOS_SlantRangeUncertaintyType::serialize(dynamic_cast<const uci::type::LOS_SlantRangeUncertaintyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_Type:
      return extjson_uci::type::LOS_Type::serialize(dynamic_cast<const uci::type::LOS_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_UncertaintyType:
      return extjson_uci::type::LOS_UncertaintyType::serialize(dynamic_cast<const uci::type::LOS_UncertaintyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_VariableA_Type:
      return extjson_uci::type::LOS_VariableA_Type::serialize(dynamic_cast<const uci::type::LOS_VariableA_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_VariableB_Type:
      return extjson_uci::type::LOS_VariableB_Type::serialize(dynamic_cast<const uci::type::LOS_VariableB_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_VarianceAndCovarianceType:
      return extjson_uci::type::LOS_VarianceAndCovarianceType::serialize(dynamic_cast<const uci::type::LOS_VarianceAndCovarianceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_VarianceRatesType:
      return extjson_uci::type::LOS_VarianceRatesType::serialize(dynamic_cast<const uci::type::LOS_VarianceRatesType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS_VarianceType:
      return extjson_uci::type::LOS_VarianceType::serialize(dynamic_cast<const uci::type::LOS_VarianceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS3D_CovarianceType:
      return extjson_uci::type::LOS3D_CovarianceType::serialize(dynamic_cast<const uci::type::LOS3D_CovarianceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lOS3D_KinematicsType:
      return extjson_uci::type::LOS3D_KinematicsType::serialize(dynamic_cast<const uci::type::LOS3D_KinematicsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::lostLinkSourceID_ChoiceType:
      return extjson_uci::type::LostLinkSourceID_ChoiceType::serialize(dynamic_cast<const uci::type::LostLinkSourceID_ChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::managedListBaseType:
      return extjson_uci::type::ManagedListBaseType::serialize(dynamic_cast<const uci::type::ManagedListBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::maneuverConstraintsChoiceType:
      return extjson_uci::type::ManeuverConstraintsChoiceType::serialize(dynamic_cast<const uci::type::ManeuverConstraintsChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::maneuverDetectionType:
      return extjson_uci::type::ManeuverDetectionType::serialize(dynamic_cast<const uci::type::ManeuverDetectionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::maneuverMultiStandardType:
      return extjson_uci::type::ManeuverMultiStandardType::serialize(dynamic_cast<const uci::type::ManeuverMultiStandardType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::maneuverSummaryType:
      return extjson_uci::type::ManeuverSummaryType::serialize(dynamic_cast<const uci::type::ManeuverSummaryType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::mDF_CommandSubCategoryType:
      return extjson_uci::type::MDF_CommandSubCategoryType::serialize(dynamic_cast<const uci::type::MDF_CommandSubCategoryType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::mDF_CommandType:
      return extjson_uci::type::MDF_CommandType::serialize(dynamic_cast<const uci::type::MDF_CommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::mDF_FileType:
      return extjson_uci::type::MDF_FileType::serialize(dynamic_cast<const uci::type::MDF_FileType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::mDF_ID_Type:
      return extjson_uci::type::MDF_ID_Type::serialize(dynamic_cast<const uci::type::MDF_ID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::mDF_ReferenceType:
      return extjson_uci::type::MDF_ReferenceType::serialize(dynamic_cast<const uci::type::MDF_ReferenceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::mDF_StatusType:
      return extjson_uci::type::MDF_StatusType::serialize(dynamic_cast<const uci::type::MDF_StatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::mDF_SubCategoryFileID_Type:
      return extjson_uci::type::MDF_SubCategoryFileID_Type::serialize(dynamic_cast<const uci::type::MDF_SubCategoryFileID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::mDF_SubCategoryID_Type:
      return extjson_uci::type::MDF_SubCategoryID_Type::serialize(dynamic_cast<const uci::type::MDF_SubCategoryID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::mDF_SubCategoryType:
      return extjson_uci::type::MDF_SubCategoryType::serialize(dynamic_cast<const uci::type::MDF_SubCategoryType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::mDF_Type:
      return extjson_uci::type::MDF_Type::serialize(dynamic_cast<const uci::type::MDF_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::measurementCharacteristicsType:
      return extjson_uci::type::MeasurementCharacteristicsType::serialize(dynamic_cast<const uci::type::MeasurementCharacteristicsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::measurementDurationType:
      return extjson_uci::type::MeasurementDurationType::serialize(dynamic_cast<const uci::type::MeasurementDurationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::measurementGroupID_Type:
      return extjson_uci::type::MeasurementGroupID_Type::serialize(dynamic_cast<const uci::type::MeasurementGroupID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::measurementID_Type:
      return extjson_uci::type::MeasurementID_Type::serialize(dynamic_cast<const uci::type::MeasurementID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::measurementKinematicsChoiceType:
      return extjson_uci::type::MeasurementKinematicsChoiceType::serialize(dynamic_cast<const uci::type::MeasurementKinematicsChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::measurementSourceIdentityType:
      return extjson_uci::type::MeasurementSourceIdentityType::serialize(dynamic_cast<const uci::type::MeasurementSourceIdentityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::measurementType:
      return extjson_uci::type::MeasurementType::serialize(dynamic_cast<const uci::type::MeasurementType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::messageConfigurationID_Type:
      return extjson_uci::type::MessageConfigurationID_Type::serialize(dynamic_cast<const uci::type::MessageConfigurationID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::messageConfigurationType:
      return extjson_uci::type::MessageConfigurationType::serialize(dynamic_cast<const uci::type::MessageConfigurationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::messageDestinationType:
      return extjson_uci::type::MessageDestinationType::serialize(dynamic_cast<const uci::type::MessageDestinationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::messageTransmissionFilterRecordDRLE:
      return extjson_uci::type::MessageTransmissionFilterRecordDRLE::serialize(dynamic_cast<const uci::type::MessageTransmissionFilterRecordDRLE&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::messageTransmissionFilterRecordID_Type:
      return extjson_uci::type::MessageTransmissionFilterRecordID_Type::serialize(dynamic_cast<const uci::type::MessageTransmissionFilterRecordID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::messageTransmissionFilterRecordMDT:
      return extjson_uci::type::MessageTransmissionFilterRecordMDT::serialize(dynamic_cast<const uci::type::MessageTransmissionFilterRecordMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::messageTransmissionFilterRecordMT:
      return extjson_uci::type::MessageTransmissionFilterRecordMT::serialize(dynamic_cast<const uci::type::MessageTransmissionFilterRecordMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::messageTransmissionListDRL:
      return extjson_uci::type::MessageTransmissionListDRL::serialize(dynamic_cast<const uci::type::MessageTransmissionListDRL&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::messageTransmissionListID_Type:
      return extjson_uci::type::MessageTransmissionListID_Type::serialize(dynamic_cast<const uci::type::MessageTransmissionListID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::messageTransmissionListMDT:
      return extjson_uci::type::MessageTransmissionListMDT::serialize(dynamic_cast<const uci::type::MessageTransmissionListMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::messageTransmissionListML:
      return extjson_uci::type::MessageTransmissionListML::serialize(dynamic_cast<const uci::type::MessageTransmissionListML&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::messageTransmissionListMT:
      return extjson_uci::type::MessageTransmissionListMT::serialize(dynamic_cast<const uci::type::MessageTransmissionListMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::messageType:
      return extjson_uci::type::MessageType::serialize(dynamic_cast<const uci::type::MessageType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::metadataID_Type:
      return extjson_uci::type::MetadataID_Type::serialize(dynamic_cast<const uci::type::MetadataID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::metricCollectionType:
      return extjson_uci::type::MetricCollectionType::serialize(dynamic_cast<const uci::type::MetricCollectionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::metricParamsType:
      return extjson_uci::type::MetricParamsType::serialize(dynamic_cast<const uci::type::MetricParamsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::metricsType:
      return extjson_uci::type::MetricsType::serialize(dynamic_cast<const uci::type::MetricsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::metricValueType:
      return extjson_uci::type::MetricValueType::serialize(dynamic_cast<const uci::type::MetricValueType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::mFA_AddressType:
      return extjson_uci::type::MFA_AddressType::serialize(dynamic_cast<const uci::type::MFA_AddressType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::mFP_AddressType:
      return extjson_uci::type::MFP_AddressType::serialize(dynamic_cast<const uci::type::MFP_AddressType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::milliwattPowerRatioRangeType:
      return extjson_uci::type::MilliwattPowerRatioRangeType::serialize(dynamic_cast<const uci::type::MilliwattPowerRatioRangeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::mISP_PackingPlanType:
      return extjson_uci::type::MISP_PackingPlanType::serialize(dynamic_cast<const uci::type::MISP_PackingPlanType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missileEmitterIdentityType:
      return extjson_uci::type::MissileEmitterIdentityType::serialize(dynamic_cast<const uci::type::MissileEmitterIdentityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionActivationRequestMDT:
      return extjson_uci::type::MissionActivationRequestMDT::serialize(dynamic_cast<const uci::type::MissionActivationRequestMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionActivationRequestMT:
      return extjson_uci::type::MissionActivationRequestMT::serialize(dynamic_cast<const uci::type::MissionActivationRequestMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionActivationRequestStatusMDT:
      return extjson_uci::type::MissionActivationRequestStatusMDT::serialize(dynamic_cast<const uci::type::MissionActivationRequestStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionActivationRequestStatusMT:
      return extjson_uci::type::MissionActivationRequestStatusMT::serialize(dynamic_cast<const uci::type::MissionActivationRequestStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionContingencyAlertID_Type:
      return extjson_uci::type::MissionContingencyAlertID_Type::serialize(dynamic_cast<const uci::type::MissionContingencyAlertID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionContingencyAlertMDT:
      return extjson_uci::type::MissionContingencyAlertMDT::serialize(dynamic_cast<const uci::type::MissionContingencyAlertMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionContingencyAlertMT:
      return extjson_uci::type::MissionContingencyAlertMT::serialize(dynamic_cast<const uci::type::MissionContingencyAlertMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionContingencyConditionType:
      return extjson_uci::type::MissionContingencyConditionType::serialize(dynamic_cast<const uci::type::MissionContingencyConditionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionControlInterfacesCommandType:
      return extjson_uci::type::MissionControlInterfacesCommandType::serialize(dynamic_cast<const uci::type::MissionControlInterfacesCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionDefinitionID_Type:
      return extjson_uci::type::MissionDefinitionID_Type::serialize(dynamic_cast<const uci::type::MissionDefinitionID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionDefinitionMDT:
      return extjson_uci::type::MissionDefinitionMDT::serialize(dynamic_cast<const uci::type::MissionDefinitionMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionDefinitionMT:
      return extjson_uci::type::MissionDefinitionMT::serialize(dynamic_cast<const uci::type::MissionDefinitionMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentConstraintType:
      return extjson_uci::type::MissionEnvironmentConstraintType::serialize(dynamic_cast<const uci::type::MissionEnvironmentConstraintType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectActionType:
      return extjson_uci::type::MissionEnvironmentObjectActionType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectActionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectBaseType:
      return extjson_uci::type::MissionEnvironmentObjectBaseType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectClassType:
      return extjson_uci::type::MissionEnvironmentObjectClassType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectClassType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectEffectType:
      return extjson_uci::type::MissionEnvironmentObjectEffectType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectEffectType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectEntityType:
      return extjson_uci::type::MissionEnvironmentObjectEntityType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectEntityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectOpLineType:
      return extjson_uci::type::MissionEnvironmentObjectOpLineType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectOpLineType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectOpPointType:
      return extjson_uci::type::MissionEnvironmentObjectOpPointType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectOpPointType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectOpVolumeType:
      return extjson_uci::type::MissionEnvironmentObjectOpVolumeType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectOpVolumeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectOpZoneType:
      return extjson_uci::type::MissionEnvironmentObjectOpZoneType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectOpZoneType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectResponseType:
      return extjson_uci::type::MissionEnvironmentObjectResponseType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectResponseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectSystemType:
      return extjson_uci::type::MissionEnvironmentObjectSystemType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectSystemType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectTaskType:
      return extjson_uci::type::MissionEnvironmentObjectTaskType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectTaskType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectValueActionType:
      return extjson_uci::type::MissionEnvironmentObjectValueActionType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectValueActionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectValueEffectType:
      return extjson_uci::type::MissionEnvironmentObjectValueEffectType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectValueEffectType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectValueEntityType:
      return extjson_uci::type::MissionEnvironmentObjectValueEntityType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectValueEntityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectValueOpLineType:
      return extjson_uci::type::MissionEnvironmentObjectValueOpLineType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectValueOpLineType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectValueOpPointType:
      return extjson_uci::type::MissionEnvironmentObjectValueOpPointType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectValueOpPointType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectValueOpVolumeType:
      return extjson_uci::type::MissionEnvironmentObjectValueOpVolumeType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectValueOpVolumeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectValueOpZoneType:
      return extjson_uci::type::MissionEnvironmentObjectValueOpZoneType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectValueOpZoneType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectValueResponseType:
      return extjson_uci::type::MissionEnvironmentObjectValueResponseType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectValueResponseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectValueSystemType:
      return extjson_uci::type::MissionEnvironmentObjectValueSystemType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectValueSystemType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentObjectValueTaskType:
      return extjson_uci::type::MissionEnvironmentObjectValueTaskType::serialize(dynamic_cast<const uci::type::MissionEnvironmentObjectValueTaskType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentOverrideID_Type:
      return extjson_uci::type::MissionEnvironmentOverrideID_Type::serialize(dynamic_cast<const uci::type::MissionEnvironmentOverrideID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentOverrideMDT:
      return extjson_uci::type::MissionEnvironmentOverrideMDT::serialize(dynamic_cast<const uci::type::MissionEnvironmentOverrideMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionEnvironmentOverrideMT:
      return extjson_uci::type::MissionEnvironmentOverrideMT::serialize(dynamic_cast<const uci::type::MissionEnvironmentOverrideMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionID_Type:
      return extjson_uci::type::MissionID_Type::serialize(dynamic_cast<const uci::type::MissionID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionInformationType:
      return extjson_uci::type::MissionInformationType::serialize(dynamic_cast<const uci::type::MissionInformationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanActivationApprovalStatusMDT:
      return extjson_uci::type::MissionPlanActivationApprovalStatusMDT::serialize(dynamic_cast<const uci::type::MissionPlanActivationApprovalStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanActivationApprovalStatusMT:
      return extjson_uci::type::MissionPlanActivationApprovalStatusMT::serialize(dynamic_cast<const uci::type::MissionPlanActivationApprovalStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanActivationCommandID_Type:
      return extjson_uci::type::MissionPlanActivationCommandID_Type::serialize(dynamic_cast<const uci::type::MissionPlanActivationCommandID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanActivationCommandMDT:
      return extjson_uci::type::MissionPlanActivationCommandMDT::serialize(dynamic_cast<const uci::type::MissionPlanActivationCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanActivationCommandMT:
      return extjson_uci::type::MissionPlanActivationCommandMT::serialize(dynamic_cast<const uci::type::MissionPlanActivationCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanActivationCommandStatusMDT:
      return extjson_uci::type::MissionPlanActivationCommandStatusMDT::serialize(dynamic_cast<const uci::type::MissionPlanActivationCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanActivationCommandStatusMT:
      return extjson_uci::type::MissionPlanActivationCommandStatusMT::serialize(dynamic_cast<const uci::type::MissionPlanActivationCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanActivationCommandType:
      return extjson_uci::type::MissionPlanActivationCommandType::serialize(dynamic_cast<const uci::type::MissionPlanActivationCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanActivationDetailsType:
      return extjson_uci::type::MissionPlanActivationDetailsType::serialize(dynamic_cast<const uci::type::MissionPlanActivationDetailsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanActivationSettingType:
      return extjson_uci::type::MissionPlanActivationSettingType::serialize(dynamic_cast<const uci::type::MissionPlanActivationSettingType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanActivationStatusMDT:
      return extjson_uci::type::MissionPlanActivationStatusMDT::serialize(dynamic_cast<const uci::type::MissionPlanActivationStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanActivationStatusMT:
      return extjson_uci::type::MissionPlanActivationStatusMT::serialize(dynamic_cast<const uci::type::MissionPlanActivationStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanActivationType:
      return extjson_uci::type::MissionPlanActivationType::serialize(dynamic_cast<const uci::type::MissionPlanActivationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanApprovalStatusMDT:
      return extjson_uci::type::MissionPlanApprovalStatusMDT::serialize(dynamic_cast<const uci::type::MissionPlanApprovalStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanApprovalStatusMT:
      return extjson_uci::type::MissionPlanApprovalStatusMT::serialize(dynamic_cast<const uci::type::MissionPlanApprovalStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanCommandID_ChoiceType:
      return extjson_uci::type::MissionPlanCommandID_ChoiceType::serialize(dynamic_cast<const uci::type::MissionPlanCommandID_ChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanCommandID_Type:
      return extjson_uci::type::MissionPlanCommandID_Type::serialize(dynamic_cast<const uci::type::MissionPlanCommandID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanCommandMDT:
      return extjson_uci::type::MissionPlanCommandMDT::serialize(dynamic_cast<const uci::type::MissionPlanCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanCommandMT:
      return extjson_uci::type::MissionPlanCommandMT::serialize(dynamic_cast<const uci::type::MissionPlanCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanCommandStatusMDT:
      return extjson_uci::type::MissionPlanCommandStatusMDT::serialize(dynamic_cast<const uci::type::MissionPlanCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::missionPlanCommandStatusMT:
      return extjson_uci::type::MissionPlanCommandStatusMT::serialize(dynamic_cast<const uci::type::MissionPlanCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    default:
      return boost::none;
  }
}

} // namespace base

} // namespace extjson_uci

