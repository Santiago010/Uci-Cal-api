/** @file ExternalizerRead8.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/base/ExternalizerRead8.h"

#include <string>

#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/SMTI_ActivityCommandType.h"
#include "extjson_uci/type/SMTI_ActivityMDT.h"
#include "extjson_uci/type/SMTI_ActivityMT.h"
#include "extjson_uci/type/SMTI_ActivityType.h"
#include "extjson_uci/type/SMTI_CapabilityCommandType.h"
#include "extjson_uci/type/SMTI_CapabilityMDT.h"
#include "extjson_uci/type/SMTI_CapabilityMT.h"
#include "extjson_uci/type/SMTI_CapabilityOptionsType.h"
#include "extjson_uci/type/SMTI_CapabilityStatusMDT.h"
#include "extjson_uci/type/SMTI_CapabilityStatusMT.h"
#include "extjson_uci/type/SMTI_CapabilityType.h"
#include "extjson_uci/type/SMTI_CollectionConstraintsQualityType.h"
#include "extjson_uci/type/SMTI_CollectionConstraintsType.h"
#include "extjson_uci/type/SMTI_CollectionOptionsType.h"
#include "extjson_uci/type/SMTI_CommandMDT.h"
#include "extjson_uci/type/SMTI_CommandMT.h"
#include "extjson_uci/type/SMTI_CommandResponseType.h"
#include "extjson_uci/type/SMTI_CommandStatusMDT.h"
#include "extjson_uci/type/SMTI_CommandStatusMT.h"
#include "extjson_uci/type/SMTI_CommandType.h"
#include "extjson_uci/type/SMTI_PredictedCollectionsType.h"
#include "extjson_uci/type/SMTI_SettingsCommandMDT.h"
#include "extjson_uci/type/SMTI_SettingsCommandMT.h"
#include "extjson_uci/type/SMTI_SettingsCommandStatusMDT.h"
#include "extjson_uci/type/SMTI_SettingsCommandStatusMT.h"
#include "extjson_uci/type/SMTI_SpecificDataType.h"
#include "extjson_uci/type/SMTI_TaskBaseType.h"
#include "extjson_uci/type/SMTI_TaskType.h"
#include "extjson_uci/type/SOB_C2_RecordBaseType.h"
#include "extjson_uci/type/SOB_C2_RecordID_Type.h"
#include "extjson_uci/type/SOB_C2_RecordMDT.h"
#include "extjson_uci/type/SOB_C2_RecordMT.h"
#include "extjson_uci/type/SOB_C2_RecordRemoveInfoType.h"
#include "extjson_uci/type/SOB_C2_RecordType.h"
#include "extjson_uci/type/SOB_CorrelatedToType.h"
#include "extjson_uci/type/SOB_CorrelationRecordID_Type.h"
#include "extjson_uci/type/SOB_CorrelationRecordMDT.h"
#include "extjson_uci/type/SOB_CorrelationRecordMT.h"
#include "extjson_uci/type/SOB_CorrelationRecordType.h"
#include "extjson_uci/type/SOB_EquipmentType.h"
#include "extjson_uci/type/SOB_RecordSourceIdentityType.h"
#include "extjson_uci/type/SOB_RecordSourceType.h"
#include "extjson_uci/type/SOB_SatelliteRecordBaseType.h"
#include "extjson_uci/type/SOB_SatelliteRecordID_Type.h"
#include "extjson_uci/type/SOB_SatelliteRecordMDT.h"
#include "extjson_uci/type/SOB_SatelliteRecordMT.h"
#include "extjson_uci/type/SOB_SatelliteRecordRemoveInfoType.h"
#include "extjson_uci/type/SOB_SatelliteRecordType.h"
#include "extjson_uci/type/STANAG_4607_MissionType.h"
#include "extjson_uci/type/STANAG_4607_PackingPlanPET.h"
#include "extjson_uci/type/STANAG_4607_PackingPlanRevA_Type.h"
#include "extjson_uci/type/STANAG_4607_PackingPlanType.h"
#include "extjson_uci/type/SensorConstraintsType.h"
#include "extjson_uci/type/SensorCountConstraintType.h"
#include "extjson_uci/type/SensorFieldOfRegardType.h"
#include "extjson_uci/type/SensorFieldOfViewType.h"
#include "extjson_uci/type/SensorFunctionalityType.h"
#include "extjson_uci/type/SensorKinematicsChoiceType.h"
#include "extjson_uci/type/SensorKinematicsOrbitalType.h"
#include "extjson_uci/type/SensorKinematicsType.h"
#include "extjson_uci/type/SensorPointListType.h"
#include "extjson_uci/type/SensorReferencedCoverageAreaType.h"
#include "extjson_uci/type/SeparationParametersType.h"
#include "extjson_uci/type/ServiceConfigurationChangeRequestMDT.h"
#include "extjson_uci/type/ServiceConfigurationChangeRequestMT.h"
#include "extjson_uci/type/ServiceConfigurationChangeRequestStatusMDT.h"
#include "extjson_uci/type/ServiceConfigurationChangeRequestStatusMT.h"
#include "extjson_uci/type/ServiceConfigurationChangeType.h"
#include "extjson_uci/type/ServiceConfigurationParamsDataRequestMDT.h"
#include "extjson_uci/type/ServiceConfigurationParamsDataRequestMT.h"
#include "extjson_uci/type/ServiceConfigurationParamsDataRequestStatusMDT.h"
#include "extjson_uci/type/ServiceConfigurationParamsDataRequestStatusMT.h"
#include "extjson_uci/type/ServiceConfigurationParamsMDT.h"
#include "extjson_uci/type/ServiceConfigurationParamsMT.h"
#include "extjson_uci/type/ServiceErrorReportID_Type.h"
#include "extjson_uci/type/ServiceErrorReportMDT.h"
#include "extjson_uci/type/ServiceErrorReportMT.h"
#include "extjson_uci/type/ServiceID_Type.h"
#include "extjson_uci/type/ServiceLifecycleCommandMDT.h"
#include "extjson_uci/type/ServiceLifecycleCommandMT.h"
#include "extjson_uci/type/ServiceLifecycleCommandStatusMDT.h"
#include "extjson_uci/type/ServiceLifecycleCommandStatusMT.h"
#include "extjson_uci/type/ServiceRegistrationPurposeType.h"
#include "extjson_uci/type/ServiceRegistrationRequestMDT.h"
#include "extjson_uci/type/ServiceRegistrationRequestMT.h"
#include "extjson_uci/type/ServiceRegistrationRequestStatusMDT.h"
#include "extjson_uci/type/ServiceRegistrationRequestStatusMT.h"
#include "extjson_uci/type/ServiceSettingType.h"
#include "extjson_uci/type/ServiceSettingsCommandMDT.h"
#include "extjson_uci/type/ServiceSettingsCommandMT.h"
#include "extjson_uci/type/ServiceSettingsCommandStatusMDT.h"
#include "extjson_uci/type/ServiceSettingsCommandStatusMT.h"
#include "extjson_uci/type/ServiceSettingsParameterType.h"
#include "extjson_uci/type/ServiceStatusDataRequestMDT.h"
#include "extjson_uci/type/ServiceStatusDataRequestMT.h"
#include "extjson_uci/type/ServiceStatusDataRequestStatusMDT.h"
#include "extjson_uci/type/ServiceStatusDataRequestStatusMT.h"
#include "extjson_uci/type/ServiceStatusMDT.h"
#include "extjson_uci/type/ServiceStatusMT.h"
#include "extjson_uci/type/SetupBeamConfigurationInstanceType.h"
#include "extjson_uci/type/SetupRF_ThreadInstanceType.h"
#include "extjson_uci/type/Shape3D_ChoiceType.h"
#include "extjson_uci/type/SharedApertureSupportCapabilityStatusItemType.h"
#include "extjson_uci/type/SharedApertureSupportCapabilityStatusMDT.h"
#include "extjson_uci/type/SharedApertureSupportCapabilityStatusMT.h"
#include "extjson_uci/type/SharedRF_ApertureActivityBaseType.h"
#include "extjson_uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "extjson_uci/type/SharedRF_ApertureCapabilityCommandBaseType.h"
#include "extjson_uci/type/SharedSourceEmitterPriorityBinDetailType.h"
#include "extjson_uci/type/SignalAmplitudeType.h"
#include "extjson_uci/type/SignalEmitterKinematicsFixedGeolocationStatusType.h"
#include "extjson_uci/type/SignalEmitterKinematicsFixedType.h"
#include "extjson_uci/type/SignalEmitterKinematicsPositionType.h"
#include "extjson_uci/type/SignalEmitterKinematicsType.h"
#include "extjson_uci/type/SignalID_Type.h"
#include "extjson_uci/type/SignalIdentityType.h"
#include "extjson_uci/type/SignalNavDataType.h"
#include "extjson_uci/type/SignalParametricsType.h"
#include "extjson_uci/type/SignalPulseWidthBaseType.h"
#include "extjson_uci/type/SignalPulseWidthType.h"
#include "extjson_uci/type/SignalRelativeType.h"
#include "extjson_uci/type/SignalRemoveInfoType.h"
#include "extjson_uci/type/SignalReportID_Type.h"
#include "extjson_uci/type/SignalReportMDT.h"
#include "extjson_uci/type/SignalReportMT.h"
#include "extjson_uci/type/SignalSourceType.h"
#include "extjson_uci/type/SignalSummaryType.h"
#include "extjson_uci/type/SignalType.h"
#include "extjson_uci/type/SizeEstimationCharacterizationType.h"
#include "extjson_uci/type/SizeEstimationType.h"
#include "extjson_uci/type/SizeType.h"
#include "extjson_uci/type/SizeUncertaintyType.h"
#include "extjson_uci/type/SlantRangeAreaType.h"
#include "extjson_uci/type/SlantRangeConstraintsType.h"
#include "extjson_uci/type/SlantRangeCovarianceType.h"
#include "extjson_uci/type/SlantRangeRatesAndAccelerationType.h"
#include "extjson_uci/type/SlantRangeType.h"
#include "extjson_uci/type/SlantRangeUncertaintyType.h"
#include "extjson_uci/type/SlantRangeVarianceRatesAndAccelerationType.h"
#include "extjson_uci/type/SlantRangeVarianceType.h"
#include "extjson_uci/type/SlavedNavigationType.h"
#include "extjson_uci/type/SolarFluxType.h"
#include "extjson_uci/type/SolarRadiationPressureCoefficientChoiceType.h"
#include "extjson_uci/type/SolarRadiationPressureModelType.h"
#include "extjson_uci/type/SolarWeatherRecordType.h"
#include "extjson_uci/type/SolarWindRecordType.h"
#include "extjson_uci/type/SourceCharacteristicsType.h"
#include "extjson_uci/type/SourceCommandEXT.h"
#include "extjson_uci/type/SourceCoverageType.h"
#include "extjson_uci/type/SourceFilterType.h"
#include "extjson_uci/type/SourceFiltersType.h"
#include "extjson_uci/type/SourceID_ChoiceType.h"
#include "extjson_uci/type/SourceKinematicsElementIdentityType.h"
#include "extjson_uci/type/SourceLocationFilterType.h"
#include "extjson_uci/type/SourceResolutionType.h"
#include "extjson_uci/type/SpaceObjectVisualDataType.h"
#include "extjson_uci/type/SpaceWeatherDataChoiceType.h"
#include "extjson_uci/type/SpaceWeatherID_Type.h"
#include "extjson_uci/type/SpaceWeatherKpApChoiceType.h"
#include "extjson_uci/type/SpaceWeatherMDT.h"
#include "extjson_uci/type/SpaceWeatherMT.h"
#include "extjson_uci/type/SpaceWeatherParameterType.h"
#include "extjson_uci/type/SpaceWeatherRecordType.h"
#include "extjson_uci/type/SpecialCodeDataLinkIdentifierType.h"
#include "extjson_uci/type/SpecificBDS_RegistersType.h"
#include "extjson_uci/type/SpecificBlueSeparationType.h"
#include "extjson_uci/type/SpecificEmitterIdentityConfidenceType.h"
#include "extjson_uci/type/SpecificEmitterIdentityType.h"
#include "extjson_uci/type/SpecificEmitterMultipleType.h"
#include "extjson_uci/type/SpecificFacilityIdentityConfidenceType.h"
#include "extjson_uci/type/SpecificIdentityConfidenceType.h"
#include "extjson_uci/type/SpecificIdentityType.h"
#include "extjson_uci/type/SpecificRedSeparationType.h"
#include "extjson_uci/type/SpecificVehicleIdentityConfidenceType.h"
#include "extjson_uci/type/SpectralBandType.h"
#include "extjson_uci/type/SpectralDensityReportID_Type.h"
#include "extjson_uci/type/SpectralDensityReportMDT.h"
#include "extjson_uci/type/SpectralDensityReportMT.h"
#include "extjson_uci/type/SpeedRangeType.h"
#include "extjson_uci/type/SphereType.h"
#include "extjson_uci/type/StabilityCharacterizationType.h"
#include "extjson_uci/type/StalenessDomainMobilityType.h"
#include "extjson_uci/type/StandardIdentityConfidenceType.h"
#include "extjson_uci/type/StandardIdentityType.h"
#include "extjson_uci/type/StateCovarianceNED_Type.h"
#include "extjson_uci/type/SteeringUnitVectorType.h"
#include "extjson_uci/type/StorageDetailType.h"
#include "extjson_uci/type/StoreCarriageCapabilityStatusBaseType.h"
#include "extjson_uci/type/StoreCarriageCapabilityStatusMDT.h"
#include "extjson_uci/type/StoreCarriageCapabilityStatusMT.h"
#include "extjson_uci/type/StoreCarriageCapabilityStatusType.h"
#include "extjson_uci/type/StoreCarriageCapabilityType.h"
#include "extjson_uci/type/StoreCarriageStatusType.h"
#include "extjson_uci/type/StoreCommandType.h"
#include "extjson_uci/type/StoreConfidenceType.h"
#include "extjson_uci/type/StoreInformationBaseType.h"
#include "extjson_uci/type/StoreInformationType.h"
#include "extjson_uci/type/StoreItemType.h"
#include "extjson_uci/type/StoreLoadoutCarriageType.h"
#include "extjson_uci/type/StoreLoadoutChoiceType.h"
#include "extjson_uci/type/StoreLoadoutConfigurationID_Type.h"
#include "extjson_uci/type/StoreLoadoutConfigurationMDT.h"
#include "extjson_uci/type/StoreLoadoutConfigurationMT.h"
#include "extjson_uci/type/StoreLoadoutConfigurationType.h"
#include "extjson_uci/type/StoreLoadoutItemPET.h"
#include "extjson_uci/type/StoreLoadoutItemType.h"
#include "extjson_uci/type/StoreLoadoutMissionType.h"
#include "extjson_uci/type/StoreManagementCommandMDT.h"
#include "extjson_uci/type/StoreManagementCommandMT.h"
#include "extjson_uci/type/StoreManagementCommandStatusMDT.h"
#include "extjson_uci/type/StoreManagementCommandStatusMT.h"
#include "extjson_uci/type/StoreManagementCommandType.h"
#include "extjson_uci/type/StoreManagementReportID_Type.h"
#include "extjson_uci/type/StoreManagementReportMDT.h"
#include "extjson_uci/type/StoreManagementReportMT.h"
#include "extjson_uci/type/StoreManagementStatusMDT.h"
#include "extjson_uci/type/StoreManagementStatusMT.h"
#include "extjson_uci/type/StoreMultipleType.h"
#include "extjson_uci/type/StoreStationType.h"
#include "extjson_uci/type/StoreStatusBaseType.h"
#include "extjson_uci/type/StoreStatusDetailsType.h"
#include "extjson_uci/type/StoreStatusType.h"
#include "extjson_uci/type/StoreType.h"
#include "extjson_uci/type/StoreVerificationStatusType.h"
#include "extjson_uci/type/StrengthRangeType.h"
#include "extjson_uci/type/StrengthType.h"
#include "extjson_uci/type/StrikeActivityCommandType.h"
#include "extjson_uci/type/StrikeActivityMDT.h"
#include "extjson_uci/type/StrikeActivityMT.h"
#include "extjson_uci/type/StrikeActivityType.h"
#include "extjson_uci/type/StrikeCapabilityCommandType.h"
#include "extjson_uci/type/StrikeCapabilityMDT.h"
#include "extjson_uci/type/StrikeCapabilityMT.h"
#include "extjson_uci/type/StrikeCapabilityOptionsType.h"
#include "extjson_uci/type/StrikeCapabilityStatusMDT.h"
#include "extjson_uci/type/StrikeCapabilityStatusMT.h"
#include "extjson_uci/type/StrikeCapabilityStatusType.h"
#include "extjson_uci/type/StrikeCapabilityType.h"
#include "extjson_uci/type/StrikeCommandMDT.h"
#include "extjson_uci/type/StrikeCommandMT.h"
#include "extjson_uci/type/StrikeCommandStatusMDT.h"
#include "extjson_uci/type/StrikeCommandStatusMT.h"
#include "extjson_uci/type/StrikeCommandType.h"
#include "extjson_uci/type/StrikeConsentRequestMDT.h"
#include "extjson_uci/type/StrikeConsentRequestMT.h"
#include "extjson_uci/type/StrikeConsentRequestStatusMDT.h"
#include "extjson_uci/type/StrikeConsentRequestStatusMT.h"
#include "extjson_uci/type/StrikeConsentRequestType.h"
#include "extjson_uci/type/StrikeSettingsCommandMDT.h"
#include "extjson_uci/type/StrikeSettingsCommandMT.h"
#include "extjson_uci/type/StrikeSettingsCommandStatusMDT.h"
#include "extjson_uci/type/StrikeSettingsCommandStatusMT.h"
#include "extjson_uci/type/StrikeTaskAchievabilityAssessmentRequestType.h"
#include "extjson_uci/type/StrikeTaskAchievabilityAssessmentType.h"
#include "extjson_uci/type/StrikeTaskMetricsTargetingType.h"
#include "extjson_uci/type/StrikeTaskMetricsType.h"
#include "extjson_uci/type/StrikeTaskReleaseConstraintsType.h"
#include "extjson_uci/type/StrikeTaskType.h"
#include "extjson_uci/type/StrikeTaskWeaponListType.h"
#include "extjson_uci/type/StrikeTaskWeaponType.h"
#include "extjson_uci/type/StrikeWeaponCommandType.h"
#include "extjson_uci/type/StructureAssessmentCharacterizationType.h"
#include "extjson_uci/type/StructureAssessmentType.h"
#include "extjson_uci/type/SubCapabilityDetailsType.h"
#include "extjson_uci/type/SubCapabilityID_Type.h"
#include "extjson_uci/type/SubCapabilitySelectionType.h"
#include "extjson_uci/type/SubPlanActivationSettingType.h"
#include "extjson_uci/type/SubPlansModificationType.h"
#include "extjson_uci/type/SubjectType.h"
#include "extjson_uci/type/SubordinatePlanningProcessType.h"
#include "extjson_uci/type/SubsystemActiveBIT_Type.h"
#include "extjson_uci/type/SubsystemActiveCalibrationType.h"
#include "extjson_uci/type/SubsystemBIT_CommandMDT.h"
#include "extjson_uci/type/SubsystemBIT_CommandMT.h"
#include "extjson_uci/type/SubsystemBIT_CommandStatusMDT.h"
#include "extjson_uci/type/SubsystemBIT_CommandStatusMT.h"
#include "extjson_uci/type/SubsystemBIT_CommandType.h"
#include "extjson_uci/type/SubsystemBIT_ConfigurationID_Type.h"
#include "extjson_uci/type/SubsystemBIT_ConfigurationMDT.h"
#include "extjson_uci/type/SubsystemBIT_ConfigurationMT.h"
#include "extjson_uci/type/SubsystemBIT_StatusMDT.h"
#include "extjson_uci/type/SubsystemBIT_StatusMT.h"
#include "extjson_uci/type/SubsystemBIT_Type.h"
#include "extjson_uci/type/SubsystemCalibrationCommandID_ChoiceType.h"
#include "extjson_uci/type/SubsystemCalibrationCommandMDT.h"
#include "extjson_uci/type/SubsystemCalibrationCommandMT.h"
#include "extjson_uci/type/SubsystemCalibrationCommandStatusMDT.h"
#include "extjson_uci/type/SubsystemCalibrationCommandStatusMT.h"
#include "extjson_uci/type/SubsystemCalibrationConfigurationID_Type.h"
#include "extjson_uci/type/SubsystemCalibrationConfigurationMDT.h"
#include "extjson_uci/type/SubsystemCalibrationConfigurationMT.h"
#include "extjson_uci/type/SubsystemCalibrationStatusMDT.h"
#include "extjson_uci/type/SubsystemCalibrationStatusMT.h"
#include "extjson_uci/type/SubsystemCalibrationType.h"
#include "extjson_uci/type/SubsystemCommandStatusBaseType.h"
#include "extjson_uci/type/SubsystemCommandType.h"
#include "extjson_uci/type/SubsystemCompletedBIT_ItemType.h"
#include "extjson_uci/type/SubsystemCompletedBIT_Type.h"
#include "extjson_uci/type/SubsystemCompletedCalibrationItemType.h"
#include "extjson_uci/type/SubsystemCompletedCalibrationType.h"
#include "extjson_uci/type/SubsystemConfigurationDataRequestMDT.h"
#include "extjson_uci/type/SubsystemConfigurationDataRequestMT.h"
#include "extjson_uci/type/SubsystemConfigurationDataRequestStatusMDT.h"
#include "extjson_uci/type/SubsystemConfigurationDataRequestStatusMT.h"
#include "extjson_uci/type/SubsystemConfigurationID_Type.h"
#include "extjson_uci/type/SubsystemConfigurationMDT.h"
#include "extjson_uci/type/SubsystemConfigurationMT.h"
#include "extjson_uci/type/SubsystemConfigurationType.h"
#include "extjson_uci/type/SubsystemEnabledSettingType.h"
#include "extjson_uci/type/SubsystemEraseCommandMDT.h"
#include "extjson_uci/type/SubsystemEraseCommandMT.h"
#include "extjson_uci/type/SubsystemEraseCommandStatusMDT.h"
#include "extjson_uci/type/SubsystemEraseCommandStatusMT.h"
#include "extjson_uci/type/SubsystemExtendedStatusPET.h"
#include "extjson_uci/type/SubsystemFaultAmbiguityGroupType.h"
#include "extjson_uci/type/SubsystemFaultType.h"
#include "extjson_uci/type/SubsystemID_Type.h"
#include "extjson_uci/type/SubsystemMaintenanceCommandMDT.h"
#include "extjson_uci/type/SubsystemMaintenanceCommandMT.h"
#include "extjson_uci/type/SubsystemMaintenanceCommandStatusMDT.h"
#include "extjson_uci/type/SubsystemMaintenanceCommandStatusMT.h"
#include "extjson_uci/type/SubsystemMaintenanceConfigurationID_Type.h"
#include "extjson_uci/type/SubsystemMaintenanceConfigurationMDT.h"
#include "extjson_uci/type/SubsystemMaintenanceConfigurationMT.h"
#include "extjson_uci/type/SubsystemMaintenanceEventSettingsConfigurationType.h"
#include "extjson_uci/type/SubsystemMaintenanceEventSettingsType.h"
#include "extjson_uci/type/SubsystemMaintenanceID_Type.h"
#include "extjson_uci/type/SubsystemMaintenanceResultEventType.h"
#include "extjson_uci/type/SubsystemMaintenanceResultStatusType.h"
#include "extjson_uci/type/SubsystemMaintenanceStatusMDT.h"
#include "extjson_uci/type/SubsystemMaintenanceStatusMT.h"
#include "extjson_uci/type/SubsystemMaintenanceStatusType.h"
#include "extjson_uci/type/SubsystemMaintenanceSubtestChoiceType.h"
#include "extjson_uci/type/SubsystemMaintenanceSubtestCommandChoiceType.h"
#include "extjson_uci/type/SubsystemMaintenanceSubtestResultChoiceType.h"
#include "extjson_uci/type/SubsystemMaintenanceTestCommandPET.h"
#include "extjson_uci/type/SubsystemMaintenanceTestCommandType.h"
#include "extjson_uci/type/SubsystemMaintenanceTestPET.h"
#include "extjson_uci/type/SubsystemMaintenanceTestResultPET.h"
#include "extjson_uci/type/SubsystemMaintenanceTestResultType.h"
#include "extjson_uci/type/SubsystemMaintenanceTestType.h"
#include "extjson_uci/type/SubsystemSettingParameterType.h"
#include "extjson_uci/type/SubsystemSettingsCommandMDT.h"
#include "extjson_uci/type/SubsystemSettingsCommandMT.h"
#include "extjson_uci/type/SubsystemSettingsCommandStatusMDT.h"
#include "extjson_uci/type/SubsystemSettingsCommandStatusMT.h"
#include "extjson_uci/type/SubsystemSpecificationType.h"
#include "extjson_uci/type/SubsystemStateCommandMDT.h"
#include "extjson_uci/type/SubsystemStateCommandMT.h"
#include "extjson_uci/type/SubsystemStateCommandStatusMDT.h"
#include "extjson_uci/type/SubsystemStateCommandStatusMT.h"
#include "extjson_uci/type/SubsystemStatusDataRequestMDT.h"
#include "extjson_uci/type/SubsystemStatusDataRequestMT.h"
#include "extjson_uci/type/SubsystemStatusDataRequestStatusMDT.h"
#include "extjson_uci/type/SubsystemStatusDataRequestStatusMT.h"
#include "extjson_uci/type/SubsystemStatusDetailedDataRequestMDT.h"
#include "extjson_uci/type/SubsystemStatusDetailedDataRequestMT.h"
#include "extjson_uci/type/SubsystemStatusDetailedDataRequestStatusMDT.h"
#include "extjson_uci/type/SubsystemStatusDetailedDataRequestStatusMT.h"
#include "extjson_uci/type/SubsystemStatusDetailedMDT.h"
#include "extjson_uci/type/SubsystemStatusDetailedMT.h"
#include "extjson_uci/type/SubsystemStatusMDT.h"
#include "extjson_uci/type/SubsystemStatusMT.h"
#include "extjson_uci/type/SubsystemStreamMDT.h"
#include "extjson_uci/type/SubsystemStreamMT.h"
#include "extjson_uci/type/SubsystemSupportedSettingType.h"
#include "extjson_uci/type/SupportCapabilityCommandBaseType.h"
#include "extjson_uci/type/SupportCapabilityCommandStatusBaseType.h"
#include "extjson_uci/type/SupportCapabilityID_Type.h"
#include "extjson_uci/type/SupportCapabilityStatusBaseType.h"
#include "extjson_uci/type/SupportedModeType.h"
#include "extjson_uci/type/SupportedOutputType.h"
#include "extjson_uci/type/SupportedPlanActivationAutonomyType.h"
#include "extjson_uci/type/SupportedProcessingType.h"
#include "extjson_uci/type/SupportedResolutionAvailabilityType.h"
#include "extjson_uci/type/SupportedResolutionID_Type.h"
#include "extjson_uci/type/SupportedResolutionType.h"
#include "extjson_uci/type/SurfaceRecoveryType.h"
#include "extjson_uci/type/SurvivabilityRiskLevelID_Type.h"
#include "extjson_uci/type/SurvivabilityRiskLevelMDT.h"
#include "extjson_uci/type/SurvivabilityRiskLevelMT.h"
#include "extjson_uci/type/SurvivabilityRiskSettingType.h"
#include "extjson_uci/type/SystemApprovalPolicyType.h"
#include "extjson_uci/type/SystemCandidateType.h"
#include "extjson_uci/type/SystemCapabilitySpecificationType.h"
#include "extjson_uci/type/SystemCharacteristicType.h"
#include "extjson_uci/type/SystemCommunicationsType.h"
#include "extjson_uci/type/SystemComparativeType.h"
#include "extjson_uci/type/SystemConfigurationType.h"
#include "extjson_uci/type/SystemDataType.h"
#include "extjson_uci/type/SystemDeploymentActivityMDT.h"
#include "extjson_uci/type/SystemDeploymentActivityMT.h"
#include "extjson_uci/type/SystemDeploymentActivityType.h"
#include "extjson_uci/type/SystemDeploymentCapabilityMDT.h"
#include "extjson_uci/type/SystemDeploymentCapabilityMT.h"
#include "extjson_uci/type/SystemDeploymentCapabilityStatusMDT.h"
#include "extjson_uci/type/SystemDeploymentCapabilityStatusMT.h"
#include "extjson_uci/type/SystemDeploymentCapabilityStatusType.h"
#include "extjson_uci/type/SystemDeploymentCapabilityType.h"
#include "extjson_uci/type/SystemDeploymentOptionsType.h"
#include "extjson_uci/type/SystemDeploymentTaskBaseType.h"
#include "extjson_uci/type/SystemDeploymentTaskType.h"
#include "extjson_uci/type/SystemEphemerisBasisChoiceType.h"
#include "extjson_uci/type/SystemEphemerisRequestParametersType.h"
#include "extjson_uci/type/SystemEstimationRequestMDT.h"
#include "extjson_uci/type/SystemEstimationRequestMT.h"
#include "extjson_uci/type/SystemEstimationRequestStatusMDT.h"
#include "extjson_uci/type/SystemEstimationRequestStatusMT.h"
#include "extjson_uci/type/SystemEstimationStartType.h"
#include "extjson_uci/type/SystemEstimationStopType.h"
#include "extjson_uci/type/SystemFilterType.h"
#include "extjson_uci/type/SystemID_Type.h"
#include "extjson_uci/type/SystemIdentityType.h"
#include "extjson_uci/type/SystemManagementRequestMDT.h"
#include "extjson_uci/type/SystemManagementRequestMT.h"
#include "extjson_uci/type/SystemManagementRequestStatusMDT.h"
#include "extjson_uci/type/SystemManagementRequestStatusMT.h"
#include "extjson_uci/type/SystemManagementRequestType.h"
#include "extjson_uci/type/SystemMessageIdentifierType.h"
#include "extjson_uci/type/SystemMetadataMDT.h"
#include "extjson_uci/type/SystemMetadataMT.h"
#include "extjson_uci/type/SystemMetadataPET.h"
#include "extjson_uci/type/SystemNotificationMDT.h"
#include "extjson_uci/type/SystemNotificationMT.h"
#include "extjson_uci/type/SystemOrbitReportMDT.h"
#include "extjson_uci/type/SystemOrbitReportMT.h"
#include "extjson_uci/type/SystemOrbitalElementSetID_Type.h"
#include "extjson_uci/type/SystemOrbitalElementSetMDT.h"
#include "extjson_uci/type/SystemOrbitalElementSetMT.h"
#include "extjson_uci/type/SystemOrbitalElementSetRequestMDT.h"
#include "extjson_uci/type/SystemOrbitalElementSetRequestMT.h"
#include "extjson_uci/type/SystemOrbitalElementSetRequestStatusMDT.h"
#include "extjson_uci/type/SystemOrbitalElementSetRequestStatusMT.h"
#include "extjson_uci/type/SystemOrbitalElementSetType.h"
#include "extjson_uci/type/SystemOrbitalEphemerisID_Type.h"
#include "extjson_uci/type/SystemOrbitalEphemerisMDT.h"
#include "extjson_uci/type/SystemOrbitalEphemerisMT.h"
#include "extjson_uci/type/SystemOrbitalEphemerisRequestMDT.h"
#include "extjson_uci/type/SystemOrbitalEphemerisRequestMT.h"
#include "extjson_uci/type/SystemOrbitalEphemerisRequestStatusMDT.h"
#include "extjson_uci/type/SystemOrbitalEphemerisRequestStatusMT.h"
#include "extjson_uci/type/SystemOrbitalEphemerisType.h"
#include "extjson_uci/type/SystemOrbitalPositionReportMDT.h"
#include "extjson_uci/type/SystemOrbitalPositionReportMT.h"
#include "extjson_uci/type/SystemOrbitalVCM_ID_Type.h"
#include "extjson_uci/type/SystemOrbitalVCM_MDT.h"
#include "extjson_uci/type/SystemOrbitalVCM_MT.h"
#include "extjson_uci/type/SystemOrbitalVCM_RequestMDT.h"
#include "extjson_uci/type/SystemOrbitalVCM_RequestMT.h"
#include "extjson_uci/type/SystemOrbitalVCM_RequestStatusMDT.h"
#include "extjson_uci/type/SystemOrbitalVCM_RequestStatusMT.h"
#include "extjson_uci/type/SystemOrbitalVCM_Type.h"
#include "extjson_uci/type/SystemPositionSpecificationType.h"
#include "extjson_uci/type/SystemReadinessID_Type.h"
#include "extjson_uci/type/SystemReadinessMDT.h"
#include "extjson_uci/type/SystemReadinessMT.h"
#include "extjson_uci/type/SystemReadinessType.h"
#include "extjson_uci/type/SystemRoutePlanSpecificationType.h"
#include "extjson_uci/type/SystemScheduleStateType.h"
#include "extjson_uci/type/SystemServiceType.h"
#include "extjson_uci/type/SystemStateFilterType.h"
#include "extjson_uci/type/SystemStatusMDT.h"
#include "extjson_uci/type/SystemStatusMT.h"
#include "extjson_uci/type/SystemTimeAtReferenceMDT.h"
#include "extjson_uci/type/SystemTimeAtReferenceMT.h"
#include "extjson_uci/type/SystemsNeededOptionType.h"
#include "extjson_uci/type/SystemsNeededRequestMDT.h"
#include "extjson_uci/type/SystemsNeededRequestMT.h"
#include "extjson_uci/type/SystemsNeededRequestStatusMDT.h"
#include "extjson_uci/type/SystemsNeededRequestStatusMT.h"
#include "extjson_uci/type/SystemsNeededResultsType.h"
#include "extjson_uci/type/TacticalOrderActivityMDT.h"
#include "extjson_uci/type/TacticalOrderActivityMT.h"
#include "extjson_uci/type/TacticalOrderActivityType.h"
#include "extjson_uci/type/TacticalOrderCapabilityMDT.h"
#include "extjson_uci/type/TacticalOrderCapabilityMT.h"
#include "extjson_uci/type/TacticalOrderCapabilityStatusMDT.h"
#include "extjson_uci/type/TacticalOrderCapabilityStatusMT.h"
#include "extjson_uci/type/TacticalOrderCapabilityType.h"
#include "extjson_uci/type/TacticalOrderTaskBaseType.h"
#include "extjson_uci/type/TacticalOrderTaskType.h"
#include "extjson_uci/type/TagAssociationID_Type.h"
#include "extjson_uci/type/TagAssociationMDT.h"
#include "extjson_uci/type/TagAssociationMT.h"
#include "extjson_uci/type/TagAssociationTargetType.h"
#include "extjson_uci/type/TargetFinalApproachType.h"
#include "extjson_uci/type/TargetInformationType.h"
#include "extjson_uci/type/TargetMobilityAssessmentDataType.h"
#include "extjson_uci/type/TargetMobilityAssessmentType.h"
#include "extjson_uci/type/TargetMobilityRequestType.h"
#include "extjson_uci/type/TargetType.h"
#include "extjson_uci/type/TaskAchievabilityAssessmentPET.h"
#include "extjson_uci/type/TaskAchievabilityAssessmentRequestPET.h"
#include "extjson_uci/type/TaskAllocationInvalidType.h"
#include "extjson_uci/type/TaskAllocationType.h"
#include "extjson_uci/type/TaskCancelCommandMDT.h"
#include "extjson_uci/type/TaskCancelCommandMT.h"
#include "extjson_uci/type/TaskCancelCommandStatusMDT.h"
#include "extjson_uci/type/TaskCancelCommandStatusMT.h"
#include "extjson_uci/type/TaskCapabilityCommandType.h"
#include "uci/base/accessorType.h"
#include "uci/type/SMTI_ActivityCommandType.h"
#include "uci/type/SMTI_ActivityMDT.h"
#include "uci/type/SMTI_ActivityMT.h"
#include "uci/type/SMTI_ActivityType.h"
#include "uci/type/SMTI_CapabilityCommandType.h"
#include "uci/type/SMTI_CapabilityMDT.h"
#include "uci/type/SMTI_CapabilityMT.h"
#include "uci/type/SMTI_CapabilityOptionsType.h"
#include "uci/type/SMTI_CapabilityStatusMDT.h"
#include "uci/type/SMTI_CapabilityStatusMT.h"
#include "uci/type/SMTI_CapabilityType.h"
#include "uci/type/SMTI_CollectionConstraintsQualityType.h"
#include "uci/type/SMTI_CollectionConstraintsType.h"
#include "uci/type/SMTI_CollectionOptionsType.h"
#include "uci/type/SMTI_CommandMDT.h"
#include "uci/type/SMTI_CommandMT.h"
#include "uci/type/SMTI_CommandResponseType.h"
#include "uci/type/SMTI_CommandStatusMDT.h"
#include "uci/type/SMTI_CommandStatusMT.h"
#include "uci/type/SMTI_CommandType.h"
#include "uci/type/SMTI_PredictedCollectionsType.h"
#include "uci/type/SMTI_SettingsCommandMDT.h"
#include "uci/type/SMTI_SettingsCommandMT.h"
#include "uci/type/SMTI_SettingsCommandStatusMDT.h"
#include "uci/type/SMTI_SettingsCommandStatusMT.h"
#include "uci/type/SMTI_SpecificDataType.h"
#include "uci/type/SMTI_TaskBaseType.h"
#include "uci/type/SMTI_TaskType.h"
#include "uci/type/SOB_C2_RecordBaseType.h"
#include "uci/type/SOB_C2_RecordID_Type.h"
#include "uci/type/SOB_C2_RecordMDT.h"
#include "uci/type/SOB_C2_RecordMT.h"
#include "uci/type/SOB_C2_RecordRemoveInfoType.h"
#include "uci/type/SOB_C2_RecordType.h"
#include "uci/type/SOB_CorrelatedToType.h"
#include "uci/type/SOB_CorrelationRecordID_Type.h"
#include "uci/type/SOB_CorrelationRecordMDT.h"
#include "uci/type/SOB_CorrelationRecordMT.h"
#include "uci/type/SOB_CorrelationRecordType.h"
#include "uci/type/SOB_EquipmentType.h"
#include "uci/type/SOB_RecordSourceIdentityType.h"
#include "uci/type/SOB_RecordSourceType.h"
#include "uci/type/SOB_SatelliteRecordBaseType.h"
#include "uci/type/SOB_SatelliteRecordID_Type.h"
#include "uci/type/SOB_SatelliteRecordMDT.h"
#include "uci/type/SOB_SatelliteRecordMT.h"
#include "uci/type/SOB_SatelliteRecordRemoveInfoType.h"
#include "uci/type/SOB_SatelliteRecordType.h"
#include "uci/type/STANAG_4607_MissionType.h"
#include "uci/type/STANAG_4607_PackingPlanPET.h"
#include "uci/type/STANAG_4607_PackingPlanRevA_Type.h"
#include "uci/type/STANAG_4607_PackingPlanType.h"
#include "uci/type/SensorConstraintsType.h"
#include "uci/type/SensorCountConstraintType.h"
#include "uci/type/SensorFieldOfRegardType.h"
#include "uci/type/SensorFieldOfViewType.h"
#include "uci/type/SensorFunctionalityType.h"
#include "uci/type/SensorKinematicsChoiceType.h"
#include "uci/type/SensorKinematicsOrbitalType.h"
#include "uci/type/SensorKinematicsType.h"
#include "uci/type/SensorPointListType.h"
#include "uci/type/SensorReferencedCoverageAreaType.h"
#include "uci/type/SeparationParametersType.h"
#include "uci/type/ServiceConfigurationChangeRequestMDT.h"
#include "uci/type/ServiceConfigurationChangeRequestMT.h"
#include "uci/type/ServiceConfigurationChangeRequestStatusMDT.h"
#include "uci/type/ServiceConfigurationChangeRequestStatusMT.h"
#include "uci/type/ServiceConfigurationChangeType.h"
#include "uci/type/ServiceConfigurationParamsDataRequestMDT.h"
#include "uci/type/ServiceConfigurationParamsDataRequestMT.h"
#include "uci/type/ServiceConfigurationParamsDataRequestStatusMDT.h"
#include "uci/type/ServiceConfigurationParamsDataRequestStatusMT.h"
#include "uci/type/ServiceConfigurationParamsMDT.h"
#include "uci/type/ServiceConfigurationParamsMT.h"
#include "uci/type/ServiceErrorReportID_Type.h"
#include "uci/type/ServiceErrorReportMDT.h"
#include "uci/type/ServiceErrorReportMT.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/ServiceLifecycleCommandMDT.h"
#include "uci/type/ServiceLifecycleCommandMT.h"
#include "uci/type/ServiceLifecycleCommandStatusMDT.h"
#include "uci/type/ServiceLifecycleCommandStatusMT.h"
#include "uci/type/ServiceRegistrationPurposeType.h"
#include "uci/type/ServiceRegistrationRequestMDT.h"
#include "uci/type/ServiceRegistrationRequestMT.h"
#include "uci/type/ServiceRegistrationRequestStatusMDT.h"
#include "uci/type/ServiceRegistrationRequestStatusMT.h"
#include "uci/type/ServiceSettingType.h"
#include "uci/type/ServiceSettingsCommandMDT.h"
#include "uci/type/ServiceSettingsCommandMT.h"
#include "uci/type/ServiceSettingsCommandStatusMDT.h"
#include "uci/type/ServiceSettingsCommandStatusMT.h"
#include "uci/type/ServiceSettingsParameterType.h"
#include "uci/type/ServiceStatusDataRequestMDT.h"
#include "uci/type/ServiceStatusDataRequestMT.h"
#include "uci/type/ServiceStatusDataRequestStatusMDT.h"
#include "uci/type/ServiceStatusDataRequestStatusMT.h"
#include "uci/type/ServiceStatusMDT.h"
#include "uci/type/ServiceStatusMT.h"
#include "uci/type/SetupBeamConfigurationInstanceType.h"
#include "uci/type/SetupRF_ThreadInstanceType.h"
#include "uci/type/Shape3D_ChoiceType.h"
#include "uci/type/SharedApertureSupportCapabilityStatusItemType.h"
#include "uci/type/SharedApertureSupportCapabilityStatusMDT.h"
#include "uci/type/SharedApertureSupportCapabilityStatusMT.h"
#include "uci/type/SharedRF_ApertureActivityBaseType.h"
#include "uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "uci/type/SharedRF_ApertureCapabilityCommandBaseType.h"
#include "uci/type/SharedSourceEmitterPriorityBinDetailType.h"
#include "uci/type/SignalAmplitudeType.h"
#include "uci/type/SignalEmitterKinematicsFixedGeolocationStatusType.h"
#include "uci/type/SignalEmitterKinematicsFixedType.h"
#include "uci/type/SignalEmitterKinematicsPositionType.h"
#include "uci/type/SignalEmitterKinematicsType.h"
#include "uci/type/SignalID_Type.h"
#include "uci/type/SignalIdentityType.h"
#include "uci/type/SignalNavDataType.h"
#include "uci/type/SignalParametricsType.h"
#include "uci/type/SignalPulseWidthBaseType.h"
#include "uci/type/SignalPulseWidthType.h"
#include "uci/type/SignalRelativeType.h"
#include "uci/type/SignalRemoveInfoType.h"
#include "uci/type/SignalReportID_Type.h"
#include "uci/type/SignalReportMDT.h"
#include "uci/type/SignalReportMT.h"
#include "uci/type/SignalSourceType.h"
#include "uci/type/SignalSummaryType.h"
#include "uci/type/SignalType.h"
#include "uci/type/SizeEstimationCharacterizationType.h"
#include "uci/type/SizeEstimationType.h"
#include "uci/type/SizeType.h"
#include "uci/type/SizeUncertaintyType.h"
#include "uci/type/SlantRangeAreaType.h"
#include "uci/type/SlantRangeConstraintsType.h"
#include "uci/type/SlantRangeCovarianceType.h"
#include "uci/type/SlantRangeRatesAndAccelerationType.h"
#include "uci/type/SlantRangeType.h"
#include "uci/type/SlantRangeUncertaintyType.h"
#include "uci/type/SlantRangeVarianceRatesAndAccelerationType.h"
#include "uci/type/SlantRangeVarianceType.h"
#include "uci/type/SlavedNavigationType.h"
#include "uci/type/SolarFluxType.h"
#include "uci/type/SolarRadiationPressureCoefficientChoiceType.h"
#include "uci/type/SolarRadiationPressureModelType.h"
#include "uci/type/SolarWeatherRecordType.h"
#include "uci/type/SolarWindRecordType.h"
#include "uci/type/SourceCharacteristicsType.h"
#include "uci/type/SourceCommandEXT.h"
#include "uci/type/SourceCoverageType.h"
#include "uci/type/SourceFilterType.h"
#include "uci/type/SourceFiltersType.h"
#include "uci/type/SourceID_ChoiceType.h"
#include "uci/type/SourceKinematicsElementIdentityType.h"
#include "uci/type/SourceLocationFilterType.h"
#include "uci/type/SourceResolutionType.h"
#include "uci/type/SpaceObjectVisualDataType.h"
#include "uci/type/SpaceWeatherDataChoiceType.h"
#include "uci/type/SpaceWeatherID_Type.h"
#include "uci/type/SpaceWeatherKpApChoiceType.h"
#include "uci/type/SpaceWeatherMDT.h"
#include "uci/type/SpaceWeatherMT.h"
#include "uci/type/SpaceWeatherParameterType.h"
#include "uci/type/SpaceWeatherRecordType.h"
#include "uci/type/SpecialCodeDataLinkIdentifierType.h"
#include "uci/type/SpecificBDS_RegistersType.h"
#include "uci/type/SpecificBlueSeparationType.h"
#include "uci/type/SpecificEmitterIdentityConfidenceType.h"
#include "uci/type/SpecificEmitterIdentityType.h"
#include "uci/type/SpecificEmitterMultipleType.h"
#include "uci/type/SpecificFacilityIdentityConfidenceType.h"
#include "uci/type/SpecificIdentityConfidenceType.h"
#include "uci/type/SpecificIdentityType.h"
#include "uci/type/SpecificRedSeparationType.h"
#include "uci/type/SpecificVehicleIdentityConfidenceType.h"
#include "uci/type/SpectralBandType.h"
#include "uci/type/SpectralDensityReportID_Type.h"
#include "uci/type/SpectralDensityReportMDT.h"
#include "uci/type/SpectralDensityReportMT.h"
#include "uci/type/SpeedRangeType.h"
#include "uci/type/SphereType.h"
#include "uci/type/StabilityCharacterizationType.h"
#include "uci/type/StalenessDomainMobilityType.h"
#include "uci/type/StandardIdentityConfidenceType.h"
#include "uci/type/StandardIdentityType.h"
#include "uci/type/StateCovarianceNED_Type.h"
#include "uci/type/SteeringUnitVectorType.h"
#include "uci/type/StorageDetailType.h"
#include "uci/type/StoreCarriageCapabilityStatusBaseType.h"
#include "uci/type/StoreCarriageCapabilityStatusMDT.h"
#include "uci/type/StoreCarriageCapabilityStatusMT.h"
#include "uci/type/StoreCarriageCapabilityStatusType.h"
#include "uci/type/StoreCarriageCapabilityType.h"
#include "uci/type/StoreCarriageStatusType.h"
#include "uci/type/StoreCommandType.h"
#include "uci/type/StoreConfidenceType.h"
#include "uci/type/StoreInformationBaseType.h"
#include "uci/type/StoreInformationType.h"
#include "uci/type/StoreItemType.h"
#include "uci/type/StoreLoadoutCarriageType.h"
#include "uci/type/StoreLoadoutChoiceType.h"
#include "uci/type/StoreLoadoutConfigurationID_Type.h"
#include "uci/type/StoreLoadoutConfigurationMDT.h"
#include "uci/type/StoreLoadoutConfigurationMT.h"
#include "uci/type/StoreLoadoutConfigurationType.h"
#include "uci/type/StoreLoadoutItemPET.h"
#include "uci/type/StoreLoadoutItemType.h"
#include "uci/type/StoreLoadoutMissionType.h"
#include "uci/type/StoreManagementCommandMDT.h"
#include "uci/type/StoreManagementCommandMT.h"
#include "uci/type/StoreManagementCommandStatusMDT.h"
#include "uci/type/StoreManagementCommandStatusMT.h"
#include "uci/type/StoreManagementCommandType.h"
#include "uci/type/StoreManagementReportID_Type.h"
#include "uci/type/StoreManagementReportMDT.h"
#include "uci/type/StoreManagementReportMT.h"
#include "uci/type/StoreManagementStatusMDT.h"
#include "uci/type/StoreManagementStatusMT.h"
#include "uci/type/StoreMultipleType.h"
#include "uci/type/StoreStationType.h"
#include "uci/type/StoreStatusBaseType.h"
#include "uci/type/StoreStatusDetailsType.h"
#include "uci/type/StoreStatusType.h"
#include "uci/type/StoreType.h"
#include "uci/type/StoreVerificationStatusType.h"
#include "uci/type/StrengthRangeType.h"
#include "uci/type/StrengthType.h"
#include "uci/type/StrikeActivityCommandType.h"
#include "uci/type/StrikeActivityMDT.h"
#include "uci/type/StrikeActivityMT.h"
#include "uci/type/StrikeActivityType.h"
#include "uci/type/StrikeCapabilityCommandType.h"
#include "uci/type/StrikeCapabilityMDT.h"
#include "uci/type/StrikeCapabilityMT.h"
#include "uci/type/StrikeCapabilityOptionsType.h"
#include "uci/type/StrikeCapabilityStatusMDT.h"
#include "uci/type/StrikeCapabilityStatusMT.h"
#include "uci/type/StrikeCapabilityStatusType.h"
#include "uci/type/StrikeCapabilityType.h"
#include "uci/type/StrikeCommandMDT.h"
#include "uci/type/StrikeCommandMT.h"
#include "uci/type/StrikeCommandStatusMDT.h"
#include "uci/type/StrikeCommandStatusMT.h"
#include "uci/type/StrikeCommandType.h"
#include "uci/type/StrikeConsentRequestMDT.h"
#include "uci/type/StrikeConsentRequestMT.h"
#include "uci/type/StrikeConsentRequestStatusMDT.h"
#include "uci/type/StrikeConsentRequestStatusMT.h"
#include "uci/type/StrikeConsentRequestType.h"
#include "uci/type/StrikeSettingsCommandMDT.h"
#include "uci/type/StrikeSettingsCommandMT.h"
#include "uci/type/StrikeSettingsCommandStatusMDT.h"
#include "uci/type/StrikeSettingsCommandStatusMT.h"
#include "uci/type/StrikeTaskAchievabilityAssessmentRequestType.h"
#include "uci/type/StrikeTaskAchievabilityAssessmentType.h"
#include "uci/type/StrikeTaskMetricsTargetingType.h"
#include "uci/type/StrikeTaskMetricsType.h"
#include "uci/type/StrikeTaskReleaseConstraintsType.h"
#include "uci/type/StrikeTaskType.h"
#include "uci/type/StrikeTaskWeaponListType.h"
#include "uci/type/StrikeTaskWeaponType.h"
#include "uci/type/StrikeWeaponCommandType.h"
#include "uci/type/StructureAssessmentCharacterizationType.h"
#include "uci/type/StructureAssessmentType.h"
#include "uci/type/SubCapabilityDetailsType.h"
#include "uci/type/SubCapabilityID_Type.h"
#include "uci/type/SubCapabilitySelectionType.h"
#include "uci/type/SubPlanActivationSettingType.h"
#include "uci/type/SubPlansModificationType.h"
#include "uci/type/SubjectType.h"
#include "uci/type/SubordinatePlanningProcessType.h"
#include "uci/type/SubsystemActiveBIT_Type.h"
#include "uci/type/SubsystemActiveCalibrationType.h"
#include "uci/type/SubsystemBIT_CommandMDT.h"
#include "uci/type/SubsystemBIT_CommandMT.h"
#include "uci/type/SubsystemBIT_CommandStatusMDT.h"
#include "uci/type/SubsystemBIT_CommandStatusMT.h"
#include "uci/type/SubsystemBIT_CommandType.h"
#include "uci/type/SubsystemBIT_ConfigurationID_Type.h"
#include "uci/type/SubsystemBIT_ConfigurationMDT.h"
#include "uci/type/SubsystemBIT_ConfigurationMT.h"
#include "uci/type/SubsystemBIT_StatusMDT.h"
#include "uci/type/SubsystemBIT_StatusMT.h"
#include "uci/type/SubsystemBIT_Type.h"
#include "uci/type/SubsystemCalibrationCommandID_ChoiceType.h"
#include "uci/type/SubsystemCalibrationCommandMDT.h"
#include "uci/type/SubsystemCalibrationCommandMT.h"
#include "uci/type/SubsystemCalibrationCommandStatusMDT.h"
#include "uci/type/SubsystemCalibrationCommandStatusMT.h"
#include "uci/type/SubsystemCalibrationConfigurationID_Type.h"
#include "uci/type/SubsystemCalibrationConfigurationMDT.h"
#include "uci/type/SubsystemCalibrationConfigurationMT.h"
#include "uci/type/SubsystemCalibrationStatusMDT.h"
#include "uci/type/SubsystemCalibrationStatusMT.h"
#include "uci/type/SubsystemCalibrationType.h"
#include "uci/type/SubsystemCommandStatusBaseType.h"
#include "uci/type/SubsystemCommandType.h"
#include "uci/type/SubsystemCompletedBIT_ItemType.h"
#include "uci/type/SubsystemCompletedBIT_Type.h"
#include "uci/type/SubsystemCompletedCalibrationItemType.h"
#include "uci/type/SubsystemCompletedCalibrationType.h"
#include "uci/type/SubsystemConfigurationDataRequestMDT.h"
#include "uci/type/SubsystemConfigurationDataRequestMT.h"
#include "uci/type/SubsystemConfigurationDataRequestStatusMDT.h"
#include "uci/type/SubsystemConfigurationDataRequestStatusMT.h"
#include "uci/type/SubsystemConfigurationID_Type.h"
#include "uci/type/SubsystemConfigurationMDT.h"
#include "uci/type/SubsystemConfigurationMT.h"
#include "uci/type/SubsystemConfigurationType.h"
#include "uci/type/SubsystemEnabledSettingType.h"
#include "uci/type/SubsystemEraseCommandMDT.h"
#include "uci/type/SubsystemEraseCommandMT.h"
#include "uci/type/SubsystemEraseCommandStatusMDT.h"
#include "uci/type/SubsystemEraseCommandStatusMT.h"
#include "uci/type/SubsystemExtendedStatusPET.h"
#include "uci/type/SubsystemFaultAmbiguityGroupType.h"
#include "uci/type/SubsystemFaultType.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/SubsystemMaintenanceCommandMDT.h"
#include "uci/type/SubsystemMaintenanceCommandMT.h"
#include "uci/type/SubsystemMaintenanceCommandStatusMDT.h"
#include "uci/type/SubsystemMaintenanceCommandStatusMT.h"
#include "uci/type/SubsystemMaintenanceConfigurationID_Type.h"
#include "uci/type/SubsystemMaintenanceConfigurationMDT.h"
#include "uci/type/SubsystemMaintenanceConfigurationMT.h"
#include "uci/type/SubsystemMaintenanceEventSettingsConfigurationType.h"
#include "uci/type/SubsystemMaintenanceEventSettingsType.h"
#include "uci/type/SubsystemMaintenanceID_Type.h"
#include "uci/type/SubsystemMaintenanceResultEventType.h"
#include "uci/type/SubsystemMaintenanceResultStatusType.h"
#include "uci/type/SubsystemMaintenanceStatusMDT.h"
#include "uci/type/SubsystemMaintenanceStatusMT.h"
#include "uci/type/SubsystemMaintenanceStatusType.h"
#include "uci/type/SubsystemMaintenanceSubtestChoiceType.h"
#include "uci/type/SubsystemMaintenanceSubtestCommandChoiceType.h"
#include "uci/type/SubsystemMaintenanceSubtestResultChoiceType.h"
#include "uci/type/SubsystemMaintenanceTestCommandPET.h"
#include "uci/type/SubsystemMaintenanceTestCommandType.h"
#include "uci/type/SubsystemMaintenanceTestPET.h"
#include "uci/type/SubsystemMaintenanceTestResultPET.h"
#include "uci/type/SubsystemMaintenanceTestResultType.h"
#include "uci/type/SubsystemMaintenanceTestType.h"
#include "uci/type/SubsystemSettingParameterType.h"
#include "uci/type/SubsystemSettingsCommandMDT.h"
#include "uci/type/SubsystemSettingsCommandMT.h"
#include "uci/type/SubsystemSettingsCommandStatusMDT.h"
#include "uci/type/SubsystemSettingsCommandStatusMT.h"
#include "uci/type/SubsystemSpecificationType.h"
#include "uci/type/SubsystemStateCommandMDT.h"
#include "uci/type/SubsystemStateCommandMT.h"
#include "uci/type/SubsystemStateCommandStatusMDT.h"
#include "uci/type/SubsystemStateCommandStatusMT.h"
#include "uci/type/SubsystemStatusDataRequestMDT.h"
#include "uci/type/SubsystemStatusDataRequestMT.h"
#include "uci/type/SubsystemStatusDataRequestStatusMDT.h"
#include "uci/type/SubsystemStatusDataRequestStatusMT.h"
#include "uci/type/SubsystemStatusDetailedDataRequestMDT.h"
#include "uci/type/SubsystemStatusDetailedDataRequestMT.h"
#include "uci/type/SubsystemStatusDetailedDataRequestStatusMDT.h"
#include "uci/type/SubsystemStatusDetailedDataRequestStatusMT.h"
#include "uci/type/SubsystemStatusDetailedMDT.h"
#include "uci/type/SubsystemStatusDetailedMT.h"
#include "uci/type/SubsystemStatusMDT.h"
#include "uci/type/SubsystemStatusMT.h"
#include "uci/type/SubsystemStreamMDT.h"
#include "uci/type/SubsystemStreamMT.h"
#include "uci/type/SubsystemSupportedSettingType.h"
#include "uci/type/SupportCapabilityCommandBaseType.h"
#include "uci/type/SupportCapabilityCommandStatusBaseType.h"
#include "uci/type/SupportCapabilityID_Type.h"
#include "uci/type/SupportCapabilityStatusBaseType.h"
#include "uci/type/SupportedModeType.h"
#include "uci/type/SupportedOutputType.h"
#include "uci/type/SupportedPlanActivationAutonomyType.h"
#include "uci/type/SupportedProcessingType.h"
#include "uci/type/SupportedResolutionAvailabilityType.h"
#include "uci/type/SupportedResolutionID_Type.h"
#include "uci/type/SupportedResolutionType.h"
#include "uci/type/SurfaceRecoveryType.h"
#include "uci/type/SurvivabilityRiskLevelID_Type.h"
#include "uci/type/SurvivabilityRiskLevelMDT.h"
#include "uci/type/SurvivabilityRiskLevelMT.h"
#include "uci/type/SurvivabilityRiskSettingType.h"
#include "uci/type/SystemApprovalPolicyType.h"
#include "uci/type/SystemCandidateType.h"
#include "uci/type/SystemCapabilitySpecificationType.h"
#include "uci/type/SystemCharacteristicType.h"
#include "uci/type/SystemCommunicationsType.h"
#include "uci/type/SystemComparativeType.h"
#include "uci/type/SystemConfigurationType.h"
#include "uci/type/SystemDataType.h"
#include "uci/type/SystemDeploymentActivityMDT.h"
#include "uci/type/SystemDeploymentActivityMT.h"
#include "uci/type/SystemDeploymentActivityType.h"
#include "uci/type/SystemDeploymentCapabilityMDT.h"
#include "uci/type/SystemDeploymentCapabilityMT.h"
#include "uci/type/SystemDeploymentCapabilityStatusMDT.h"
#include "uci/type/SystemDeploymentCapabilityStatusMT.h"
#include "uci/type/SystemDeploymentCapabilityStatusType.h"
#include "uci/type/SystemDeploymentCapabilityType.h"
#include "uci/type/SystemDeploymentOptionsType.h"
#include "uci/type/SystemDeploymentTaskBaseType.h"
#include "uci/type/SystemDeploymentTaskType.h"
#include "uci/type/SystemEphemerisBasisChoiceType.h"
#include "uci/type/SystemEphemerisRequestParametersType.h"
#include "uci/type/SystemEstimationRequestMDT.h"
#include "uci/type/SystemEstimationRequestMT.h"
#include "uci/type/SystemEstimationRequestStatusMDT.h"
#include "uci/type/SystemEstimationRequestStatusMT.h"
#include "uci/type/SystemEstimationStartType.h"
#include "uci/type/SystemEstimationStopType.h"
#include "uci/type/SystemFilterType.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/SystemIdentityType.h"
#include "uci/type/SystemManagementRequestMDT.h"
#include "uci/type/SystemManagementRequestMT.h"
#include "uci/type/SystemManagementRequestStatusMDT.h"
#include "uci/type/SystemManagementRequestStatusMT.h"
#include "uci/type/SystemManagementRequestType.h"
#include "uci/type/SystemMessageIdentifierType.h"
#include "uci/type/SystemMetadataMDT.h"
#include "uci/type/SystemMetadataMT.h"
#include "uci/type/SystemMetadataPET.h"
#include "uci/type/SystemNotificationMDT.h"
#include "uci/type/SystemNotificationMT.h"
#include "uci/type/SystemOrbitReportMDT.h"
#include "uci/type/SystemOrbitReportMT.h"
#include "uci/type/SystemOrbitalElementSetID_Type.h"
#include "uci/type/SystemOrbitalElementSetMDT.h"
#include "uci/type/SystemOrbitalElementSetMT.h"
#include "uci/type/SystemOrbitalElementSetRequestMDT.h"
#include "uci/type/SystemOrbitalElementSetRequestMT.h"
#include "uci/type/SystemOrbitalElementSetRequestStatusMDT.h"
#include "uci/type/SystemOrbitalElementSetRequestStatusMT.h"
#include "uci/type/SystemOrbitalElementSetType.h"
#include "uci/type/SystemOrbitalEphemerisID_Type.h"
#include "uci/type/SystemOrbitalEphemerisMDT.h"
#include "uci/type/SystemOrbitalEphemerisMT.h"
#include "uci/type/SystemOrbitalEphemerisRequestMDT.h"
#include "uci/type/SystemOrbitalEphemerisRequestMT.h"
#include "uci/type/SystemOrbitalEphemerisRequestStatusMDT.h"
#include "uci/type/SystemOrbitalEphemerisRequestStatusMT.h"
#include "uci/type/SystemOrbitalEphemerisType.h"
#include "uci/type/SystemOrbitalPositionReportMDT.h"
#include "uci/type/SystemOrbitalPositionReportMT.h"
#include "uci/type/SystemOrbitalVCM_ID_Type.h"
#include "uci/type/SystemOrbitalVCM_MDT.h"
#include "uci/type/SystemOrbitalVCM_MT.h"
#include "uci/type/SystemOrbitalVCM_RequestMDT.h"
#include "uci/type/SystemOrbitalVCM_RequestMT.h"
#include "uci/type/SystemOrbitalVCM_RequestStatusMDT.h"
#include "uci/type/SystemOrbitalVCM_RequestStatusMT.h"
#include "uci/type/SystemOrbitalVCM_Type.h"
#include "uci/type/SystemPositionSpecificationType.h"
#include "uci/type/SystemReadinessID_Type.h"
#include "uci/type/SystemReadinessMDT.h"
#include "uci/type/SystemReadinessMT.h"
#include "uci/type/SystemReadinessType.h"
#include "uci/type/SystemRoutePlanSpecificationType.h"
#include "uci/type/SystemScheduleStateType.h"
#include "uci/type/SystemServiceType.h"
#include "uci/type/SystemStateFilterType.h"
#include "uci/type/SystemStatusMDT.h"
#include "uci/type/SystemStatusMT.h"
#include "uci/type/SystemTimeAtReferenceMDT.h"
#include "uci/type/SystemTimeAtReferenceMT.h"
#include "uci/type/SystemsNeededOptionType.h"
#include "uci/type/SystemsNeededRequestMDT.h"
#include "uci/type/SystemsNeededRequestMT.h"
#include "uci/type/SystemsNeededRequestStatusMDT.h"
#include "uci/type/SystemsNeededRequestStatusMT.h"
#include "uci/type/SystemsNeededResultsType.h"
#include "uci/type/TacticalOrderActivityMDT.h"
#include "uci/type/TacticalOrderActivityMT.h"
#include "uci/type/TacticalOrderActivityType.h"
#include "uci/type/TacticalOrderCapabilityMDT.h"
#include "uci/type/TacticalOrderCapabilityMT.h"
#include "uci/type/TacticalOrderCapabilityStatusMDT.h"
#include "uci/type/TacticalOrderCapabilityStatusMT.h"
#include "uci/type/TacticalOrderCapabilityType.h"
#include "uci/type/TacticalOrderTaskBaseType.h"
#include "uci/type/TacticalOrderTaskType.h"
#include "uci/type/TagAssociationID_Type.h"
#include "uci/type/TagAssociationMDT.h"
#include "uci/type/TagAssociationMT.h"
#include "uci/type/TagAssociationTargetType.h"
#include "uci/type/TargetFinalApproachType.h"
#include "uci/type/TargetInformationType.h"
#include "uci/type/TargetMobilityAssessmentDataType.h"
#include "uci/type/TargetMobilityAssessmentType.h"
#include "uci/type/TargetMobilityRequestType.h"
#include "uci/type/TargetType.h"
#include "uci/type/TaskAchievabilityAssessmentPET.h"
#include "uci/type/TaskAchievabilityAssessmentRequestPET.h"
#include "uci/type/TaskAllocationInvalidType.h"
#include "uci/type/TaskAllocationType.h"
#include "uci/type/TaskCancelCommandMDT.h"
#include "uci/type/TaskCancelCommandMT.h"
#include "uci/type/TaskCancelCommandStatusMDT.h"
#include "uci/type/TaskCancelCommandStatusMT.h"
#include "uci/type/TaskCapabilityCommandType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all base data types are declared */
namespace base {

bool extjson_uci::base::ExternalizerRead8::read(const boost::property_tree::ptree& propTree, uci::base::Accessor& accessor, std::string& nodeName, std::string& nsPrefix) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::sensorConstraintsType:
      return extjson_uci::type::SensorConstraintsType::deserialize(propTree, dynamic_cast<uci::type::SensorConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorCountConstraintType:
      return extjson_uci::type::SensorCountConstraintType::deserialize(propTree, dynamic_cast<uci::type::SensorCountConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorFieldOfRegardType:
      return extjson_uci::type::SensorFieldOfRegardType::deserialize(propTree, dynamic_cast<uci::type::SensorFieldOfRegardType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorFieldOfViewType:
      return extjson_uci::type::SensorFieldOfViewType::deserialize(propTree, dynamic_cast<uci::type::SensorFieldOfViewType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorFunctionalityType:
      return extjson_uci::type::SensorFunctionalityType::deserialize(propTree, dynamic_cast<uci::type::SensorFunctionalityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorKinematicsChoiceType:
      return extjson_uci::type::SensorKinematicsChoiceType::deserialize(propTree, dynamic_cast<uci::type::SensorKinematicsChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorKinematicsOrbitalType:
      return extjson_uci::type::SensorKinematicsOrbitalType::deserialize(propTree, dynamic_cast<uci::type::SensorKinematicsOrbitalType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorKinematicsType:
      return extjson_uci::type::SensorKinematicsType::deserialize(propTree, dynamic_cast<uci::type::SensorKinematicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorPointListType:
      return extjson_uci::type::SensorPointListType::deserialize(propTree, dynamic_cast<uci::type::SensorPointListType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorReferencedCoverageAreaType:
      return extjson_uci::type::SensorReferencedCoverageAreaType::deserialize(propTree, dynamic_cast<uci::type::SensorReferencedCoverageAreaType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::separationParametersType:
      return extjson_uci::type::SeparationParametersType::deserialize(propTree, dynamic_cast<uci::type::SeparationParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceConfigurationChangeRequestMDT:
      return extjson_uci::type::ServiceConfigurationChangeRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationChangeRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceConfigurationChangeRequestMT:
      return extjson_uci::type::ServiceConfigurationChangeRequestMT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationChangeRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceConfigurationChangeRequestStatusMDT:
      return extjson_uci::type::ServiceConfigurationChangeRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationChangeRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceConfigurationChangeRequestStatusMT:
      return extjson_uci::type::ServiceConfigurationChangeRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationChangeRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceConfigurationChangeType:
      return extjson_uci::type::ServiceConfigurationChangeType::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationChangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceConfigurationParamsDataRequestMDT:
      return extjson_uci::type::ServiceConfigurationParamsDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationParamsDataRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceConfigurationParamsDataRequestMT:
      return extjson_uci::type::ServiceConfigurationParamsDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationParamsDataRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceConfigurationParamsDataRequestStatusMDT:
      return extjson_uci::type::ServiceConfigurationParamsDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationParamsDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceConfigurationParamsDataRequestStatusMT:
      return extjson_uci::type::ServiceConfigurationParamsDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationParamsDataRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceConfigurationParamsMDT:
      return extjson_uci::type::ServiceConfigurationParamsMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationParamsMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceConfigurationParamsMT:
      return extjson_uci::type::ServiceConfigurationParamsMT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationParamsMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceErrorReportID_Type:
      return extjson_uci::type::ServiceErrorReportID_Type::deserialize(propTree, dynamic_cast<uci::type::ServiceErrorReportID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceErrorReportMDT:
      return extjson_uci::type::ServiceErrorReportMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceErrorReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceErrorReportMT:
      return extjson_uci::type::ServiceErrorReportMT::deserialize(propTree, dynamic_cast<uci::type::ServiceErrorReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceID_Type:
      return extjson_uci::type::ServiceID_Type::deserialize(propTree, dynamic_cast<uci::type::ServiceID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceLifecycleCommandMDT:
      return extjson_uci::type::ServiceLifecycleCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceLifecycleCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceLifecycleCommandMT:
      return extjson_uci::type::ServiceLifecycleCommandMT::deserialize(propTree, dynamic_cast<uci::type::ServiceLifecycleCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceLifecycleCommandStatusMDT:
      return extjson_uci::type::ServiceLifecycleCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceLifecycleCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceLifecycleCommandStatusMT:
      return extjson_uci::type::ServiceLifecycleCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ServiceLifecycleCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceRegistrationPurposeType:
      return extjson_uci::type::ServiceRegistrationPurposeType::deserialize(propTree, dynamic_cast<uci::type::ServiceRegistrationPurposeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceRegistrationRequestMDT:
      return extjson_uci::type::ServiceRegistrationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceRegistrationRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceRegistrationRequestMT:
      return extjson_uci::type::ServiceRegistrationRequestMT::deserialize(propTree, dynamic_cast<uci::type::ServiceRegistrationRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceRegistrationRequestStatusMDT:
      return extjson_uci::type::ServiceRegistrationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceRegistrationRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceRegistrationRequestStatusMT:
      return extjson_uci::type::ServiceRegistrationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ServiceRegistrationRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceSettingsCommandMDT:
      return extjson_uci::type::ServiceSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceSettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceSettingsCommandMT:
      return extjson_uci::type::ServiceSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::ServiceSettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceSettingsCommandStatusMDT:
      return extjson_uci::type::ServiceSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceSettingsCommandStatusMT:
      return extjson_uci::type::ServiceSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ServiceSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceSettingsParameterType:
      return extjson_uci::type::ServiceSettingsParameterType::deserialize(propTree, dynamic_cast<uci::type::ServiceSettingsParameterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceSettingType:
      return extjson_uci::type::ServiceSettingType::deserialize(propTree, dynamic_cast<uci::type::ServiceSettingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceStatusDataRequestMDT:
      return extjson_uci::type::ServiceStatusDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceStatusDataRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceStatusDataRequestMT:
      return extjson_uci::type::ServiceStatusDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::ServiceStatusDataRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceStatusDataRequestStatusMDT:
      return extjson_uci::type::ServiceStatusDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceStatusDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceStatusDataRequestStatusMT:
      return extjson_uci::type::ServiceStatusDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ServiceStatusDataRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceStatusMDT:
      return extjson_uci::type::ServiceStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceStatusMT:
      return extjson_uci::type::ServiceStatusMT::deserialize(propTree, dynamic_cast<uci::type::ServiceStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::setupBeamConfigurationInstanceType:
      return extjson_uci::type::SetupBeamConfigurationInstanceType::deserialize(propTree, dynamic_cast<uci::type::SetupBeamConfigurationInstanceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::setupRF_ThreadInstanceType:
      return extjson_uci::type::SetupRF_ThreadInstanceType::deserialize(propTree, dynamic_cast<uci::type::SetupRF_ThreadInstanceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::shape3D_ChoiceType:
      return extjson_uci::type::Shape3D_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::Shape3D_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sharedApertureSupportCapabilityStatusItemType:
      return extjson_uci::type::SharedApertureSupportCapabilityStatusItemType::deserialize(propTree, dynamic_cast<uci::type::SharedApertureSupportCapabilityStatusItemType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sharedApertureSupportCapabilityStatusMDT:
      return extjson_uci::type::SharedApertureSupportCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SharedApertureSupportCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sharedApertureSupportCapabilityStatusMT:
      return extjson_uci::type::SharedApertureSupportCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::SharedApertureSupportCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sharedRF_ApertureActivityBaseType:
      return extjson_uci::type::SharedRF_ApertureActivityBaseType::deserialize(propTree, dynamic_cast<uci::type::SharedRF_ApertureActivityBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sharedRF_ApertureActivityCommandBaseType:
      return extjson_uci::type::SharedRF_ApertureActivityCommandBaseType::deserialize(propTree, dynamic_cast<uci::type::SharedRF_ApertureActivityCommandBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sharedRF_ApertureCapabilityCommandBaseType:
      return extjson_uci::type::SharedRF_ApertureCapabilityCommandBaseType::deserialize(propTree, dynamic_cast<uci::type::SharedRF_ApertureCapabilityCommandBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sharedSourceEmitterPriorityBinDetailType:
      return extjson_uci::type::SharedSourceEmitterPriorityBinDetailType::deserialize(propTree, dynamic_cast<uci::type::SharedSourceEmitterPriorityBinDetailType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalAmplitudeType:
      return extjson_uci::type::SignalAmplitudeType::deserialize(propTree, dynamic_cast<uci::type::SignalAmplitudeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalEmitterKinematicsFixedGeolocationStatusType:
      return extjson_uci::type::SignalEmitterKinematicsFixedGeolocationStatusType::deserialize(propTree, dynamic_cast<uci::type::SignalEmitterKinematicsFixedGeolocationStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalEmitterKinematicsFixedType:
      return extjson_uci::type::SignalEmitterKinematicsFixedType::deserialize(propTree, dynamic_cast<uci::type::SignalEmitterKinematicsFixedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalEmitterKinematicsPositionType:
      return extjson_uci::type::SignalEmitterKinematicsPositionType::deserialize(propTree, dynamic_cast<uci::type::SignalEmitterKinematicsPositionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalEmitterKinematicsType:
      return extjson_uci::type::SignalEmitterKinematicsType::deserialize(propTree, dynamic_cast<uci::type::SignalEmitterKinematicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalID_Type:
      return extjson_uci::type::SignalID_Type::deserialize(propTree, dynamic_cast<uci::type::SignalID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalIdentityType:
      return extjson_uci::type::SignalIdentityType::deserialize(propTree, dynamic_cast<uci::type::SignalIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalNavDataType:
      return extjson_uci::type::SignalNavDataType::deserialize(propTree, dynamic_cast<uci::type::SignalNavDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalParametricsType:
      return extjson_uci::type::SignalParametricsType::deserialize(propTree, dynamic_cast<uci::type::SignalParametricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalPulseWidthBaseType:
      return extjson_uci::type::SignalPulseWidthBaseType::deserialize(propTree, dynamic_cast<uci::type::SignalPulseWidthBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalPulseWidthType:
      return extjson_uci::type::SignalPulseWidthType::deserialize(propTree, dynamic_cast<uci::type::SignalPulseWidthType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalRelativeType:
      return extjson_uci::type::SignalRelativeType::deserialize(propTree, dynamic_cast<uci::type::SignalRelativeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalRemoveInfoType:
      return extjson_uci::type::SignalRemoveInfoType::deserialize(propTree, dynamic_cast<uci::type::SignalRemoveInfoType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalReportID_Type:
      return extjson_uci::type::SignalReportID_Type::deserialize(propTree, dynamic_cast<uci::type::SignalReportID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalReportMDT:
      return extjson_uci::type::SignalReportMDT::deserialize(propTree, dynamic_cast<uci::type::SignalReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalReportMT:
      return extjson_uci::type::SignalReportMT::deserialize(propTree, dynamic_cast<uci::type::SignalReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalSourceType:
      return extjson_uci::type::SignalSourceType::deserialize(propTree, dynamic_cast<uci::type::SignalSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalSummaryType:
      return extjson_uci::type::SignalSummaryType::deserialize(propTree, dynamic_cast<uci::type::SignalSummaryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalType:
      return extjson_uci::type::SignalType::deserialize(propTree, dynamic_cast<uci::type::SignalType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sizeEstimationCharacterizationType:
      return extjson_uci::type::SizeEstimationCharacterizationType::deserialize(propTree, dynamic_cast<uci::type::SizeEstimationCharacterizationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sizeEstimationType:
      return extjson_uci::type::SizeEstimationType::deserialize(propTree, dynamic_cast<uci::type::SizeEstimationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sizeType:
      return extjson_uci::type::SizeType::deserialize(propTree, dynamic_cast<uci::type::SizeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sizeUncertaintyType:
      return extjson_uci::type::SizeUncertaintyType::deserialize(propTree, dynamic_cast<uci::type::SizeUncertaintyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::slantRangeAreaType:
      return extjson_uci::type::SlantRangeAreaType::deserialize(propTree, dynamic_cast<uci::type::SlantRangeAreaType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::slantRangeConstraintsType:
      return extjson_uci::type::SlantRangeConstraintsType::deserialize(propTree, dynamic_cast<uci::type::SlantRangeConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::slantRangeCovarianceType:
      return extjson_uci::type::SlantRangeCovarianceType::deserialize(propTree, dynamic_cast<uci::type::SlantRangeCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::slantRangeRatesAndAccelerationType:
      return extjson_uci::type::SlantRangeRatesAndAccelerationType::deserialize(propTree, dynamic_cast<uci::type::SlantRangeRatesAndAccelerationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::slantRangeType:
      return extjson_uci::type::SlantRangeType::deserialize(propTree, dynamic_cast<uci::type::SlantRangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::slantRangeUncertaintyType:
      return extjson_uci::type::SlantRangeUncertaintyType::deserialize(propTree, dynamic_cast<uci::type::SlantRangeUncertaintyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::slantRangeVarianceRatesAndAccelerationType:
      return extjson_uci::type::SlantRangeVarianceRatesAndAccelerationType::deserialize(propTree, dynamic_cast<uci::type::SlantRangeVarianceRatesAndAccelerationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::slantRangeVarianceType:
      return extjson_uci::type::SlantRangeVarianceType::deserialize(propTree, dynamic_cast<uci::type::SlantRangeVarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::slavedNavigationType:
      return extjson_uci::type::SlavedNavigationType::deserialize(propTree, dynamic_cast<uci::type::SlavedNavigationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_ActivityCommandType:
      return extjson_uci::type::SMTI_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::SMTI_ActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_ActivityMDT:
      return extjson_uci::type::SMTI_ActivityMDT::deserialize(propTree, dynamic_cast<uci::type::SMTI_ActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_ActivityMT:
      return extjson_uci::type::SMTI_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::SMTI_ActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_ActivityType:
      return extjson_uci::type::SMTI_ActivityType::deserialize(propTree, dynamic_cast<uci::type::SMTI_ActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CapabilityCommandType:
      return extjson_uci::type::SMTI_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::SMTI_CapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CapabilityMDT:
      return extjson_uci::type::SMTI_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::SMTI_CapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CapabilityMT:
      return extjson_uci::type::SMTI_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::SMTI_CapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CapabilityOptionsType:
      return extjson_uci::type::SMTI_CapabilityOptionsType::deserialize(propTree, dynamic_cast<uci::type::SMTI_CapabilityOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CapabilityStatusMDT:
      return extjson_uci::type::SMTI_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SMTI_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CapabilityStatusMT:
      return extjson_uci::type::SMTI_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::SMTI_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CapabilityType:
      return extjson_uci::type::SMTI_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::SMTI_CapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CollectionConstraintsQualityType:
      return extjson_uci::type::SMTI_CollectionConstraintsQualityType::deserialize(propTree, dynamic_cast<uci::type::SMTI_CollectionConstraintsQualityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CollectionConstraintsType:
      return extjson_uci::type::SMTI_CollectionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::SMTI_CollectionConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CollectionOptionsType:
      return extjson_uci::type::SMTI_CollectionOptionsType::deserialize(propTree, dynamic_cast<uci::type::SMTI_CollectionOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CommandMDT:
      return extjson_uci::type::SMTI_CommandMDT::deserialize(propTree, dynamic_cast<uci::type::SMTI_CommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CommandMT:
      return extjson_uci::type::SMTI_CommandMT::deserialize(propTree, dynamic_cast<uci::type::SMTI_CommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CommandResponseType:
      return extjson_uci::type::SMTI_CommandResponseType::deserialize(propTree, dynamic_cast<uci::type::SMTI_CommandResponseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CommandStatusMDT:
      return extjson_uci::type::SMTI_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SMTI_CommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CommandStatusMT:
      return extjson_uci::type::SMTI_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SMTI_CommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CommandType:
      return extjson_uci::type::SMTI_CommandType::deserialize(propTree, dynamic_cast<uci::type::SMTI_CommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_PredictedCollectionsType:
      return extjson_uci::type::SMTI_PredictedCollectionsType::deserialize(propTree, dynamic_cast<uci::type::SMTI_PredictedCollectionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_SettingsCommandMDT:
      return extjson_uci::type::SMTI_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SMTI_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_SettingsCommandMT:
      return extjson_uci::type::SMTI_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::SMTI_SettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_SettingsCommandStatusMDT:
      return extjson_uci::type::SMTI_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SMTI_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_SettingsCommandStatusMT:
      return extjson_uci::type::SMTI_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SMTI_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_SpecificDataType:
      return extjson_uci::type::SMTI_SpecificDataType::deserialize(propTree, dynamic_cast<uci::type::SMTI_SpecificDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_TaskBaseType:
      return extjson_uci::type::SMTI_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::SMTI_TaskBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_TaskType:
      return extjson_uci::type::SMTI_TaskType::deserialize(propTree, dynamic_cast<uci::type::SMTI_TaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_C2_RecordBaseType:
      return extjson_uci::type::SOB_C2_RecordBaseType::deserialize(propTree, dynamic_cast<uci::type::SOB_C2_RecordBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_C2_RecordID_Type:
      return extjson_uci::type::SOB_C2_RecordID_Type::deserialize(propTree, dynamic_cast<uci::type::SOB_C2_RecordID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_C2_RecordMDT:
      return extjson_uci::type::SOB_C2_RecordMDT::deserialize(propTree, dynamic_cast<uci::type::SOB_C2_RecordMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_C2_RecordMT:
      return extjson_uci::type::SOB_C2_RecordMT::deserialize(propTree, dynamic_cast<uci::type::SOB_C2_RecordMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_C2_RecordRemoveInfoType:
      return extjson_uci::type::SOB_C2_RecordRemoveInfoType::deserialize(propTree, dynamic_cast<uci::type::SOB_C2_RecordRemoveInfoType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_C2_RecordType:
      return extjson_uci::type::SOB_C2_RecordType::deserialize(propTree, dynamic_cast<uci::type::SOB_C2_RecordType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_CorrelatedToType:
      return extjson_uci::type::SOB_CorrelatedToType::deserialize(propTree, dynamic_cast<uci::type::SOB_CorrelatedToType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_CorrelationRecordID_Type:
      return extjson_uci::type::SOB_CorrelationRecordID_Type::deserialize(propTree, dynamic_cast<uci::type::SOB_CorrelationRecordID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_CorrelationRecordMDT:
      return extjson_uci::type::SOB_CorrelationRecordMDT::deserialize(propTree, dynamic_cast<uci::type::SOB_CorrelationRecordMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_CorrelationRecordMT:
      return extjson_uci::type::SOB_CorrelationRecordMT::deserialize(propTree, dynamic_cast<uci::type::SOB_CorrelationRecordMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_CorrelationRecordType:
      return extjson_uci::type::SOB_CorrelationRecordType::deserialize(propTree, dynamic_cast<uci::type::SOB_CorrelationRecordType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_EquipmentType:
      return extjson_uci::type::SOB_EquipmentType::deserialize(propTree, dynamic_cast<uci::type::SOB_EquipmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_RecordSourceIdentityType:
      return extjson_uci::type::SOB_RecordSourceIdentityType::deserialize(propTree, dynamic_cast<uci::type::SOB_RecordSourceIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_RecordSourceType:
      return extjson_uci::type::SOB_RecordSourceType::deserialize(propTree, dynamic_cast<uci::type::SOB_RecordSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_SatelliteRecordBaseType:
      return extjson_uci::type::SOB_SatelliteRecordBaseType::deserialize(propTree, dynamic_cast<uci::type::SOB_SatelliteRecordBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_SatelliteRecordID_Type:
      return extjson_uci::type::SOB_SatelliteRecordID_Type::deserialize(propTree, dynamic_cast<uci::type::SOB_SatelliteRecordID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_SatelliteRecordMDT:
      return extjson_uci::type::SOB_SatelliteRecordMDT::deserialize(propTree, dynamic_cast<uci::type::SOB_SatelliteRecordMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_SatelliteRecordMT:
      return extjson_uci::type::SOB_SatelliteRecordMT::deserialize(propTree, dynamic_cast<uci::type::SOB_SatelliteRecordMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_SatelliteRecordRemoveInfoType:
      return extjson_uci::type::SOB_SatelliteRecordRemoveInfoType::deserialize(propTree, dynamic_cast<uci::type::SOB_SatelliteRecordRemoveInfoType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_SatelliteRecordType:
      return extjson_uci::type::SOB_SatelliteRecordType::deserialize(propTree, dynamic_cast<uci::type::SOB_SatelliteRecordType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::solarFluxType:
      return extjson_uci::type::SolarFluxType::deserialize(propTree, dynamic_cast<uci::type::SolarFluxType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::solarRadiationPressureCoefficientChoiceType:
      return extjson_uci::type::SolarRadiationPressureCoefficientChoiceType::deserialize(propTree, dynamic_cast<uci::type::SolarRadiationPressureCoefficientChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::solarRadiationPressureModelType:
      return extjson_uci::type::SolarRadiationPressureModelType::deserialize(propTree, dynamic_cast<uci::type::SolarRadiationPressureModelType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::solarWeatherRecordType:
      return extjson_uci::type::SolarWeatherRecordType::deserialize(propTree, dynamic_cast<uci::type::SolarWeatherRecordType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::solarWindRecordType:
      return extjson_uci::type::SolarWindRecordType::deserialize(propTree, dynamic_cast<uci::type::SolarWindRecordType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sourceCharacteristicsType:
      return extjson_uci::type::SourceCharacteristicsType::deserialize(propTree, dynamic_cast<uci::type::SourceCharacteristicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sourceCommandEXT:
      return extjson_uci::type::SourceCommandEXT::deserialize(propTree, dynamic_cast<uci::type::SourceCommandEXT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sourceCoverageType:
      return extjson_uci::type::SourceCoverageType::deserialize(propTree, dynamic_cast<uci::type::SourceCoverageType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sourceFiltersType:
      return extjson_uci::type::SourceFiltersType::deserialize(propTree, dynamic_cast<uci::type::SourceFiltersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sourceFilterType:
      return extjson_uci::type::SourceFilterType::deserialize(propTree, dynamic_cast<uci::type::SourceFilterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sourceID_ChoiceType:
      return extjson_uci::type::SourceID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::SourceID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sourceKinematicsElementIdentityType:
      return extjson_uci::type::SourceKinematicsElementIdentityType::deserialize(propTree, dynamic_cast<uci::type::SourceKinematicsElementIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sourceLocationFilterType:
      return extjson_uci::type::SourceLocationFilterType::deserialize(propTree, dynamic_cast<uci::type::SourceLocationFilterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sourceResolutionType:
      return extjson_uci::type::SourceResolutionType::deserialize(propTree, dynamic_cast<uci::type::SourceResolutionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::spaceObjectVisualDataType:
      return extjson_uci::type::SpaceObjectVisualDataType::deserialize(propTree, dynamic_cast<uci::type::SpaceObjectVisualDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::spaceWeatherDataChoiceType:
      return extjson_uci::type::SpaceWeatherDataChoiceType::deserialize(propTree, dynamic_cast<uci::type::SpaceWeatherDataChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::spaceWeatherID_Type:
      return extjson_uci::type::SpaceWeatherID_Type::deserialize(propTree, dynamic_cast<uci::type::SpaceWeatherID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::spaceWeatherKpApChoiceType:
      return extjson_uci::type::SpaceWeatherKpApChoiceType::deserialize(propTree, dynamic_cast<uci::type::SpaceWeatherKpApChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::spaceWeatherMDT:
      return extjson_uci::type::SpaceWeatherMDT::deserialize(propTree, dynamic_cast<uci::type::SpaceWeatherMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::spaceWeatherMT:
      return extjson_uci::type::SpaceWeatherMT::deserialize(propTree, dynamic_cast<uci::type::SpaceWeatherMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::spaceWeatherParameterType:
      return extjson_uci::type::SpaceWeatherParameterType::deserialize(propTree, dynamic_cast<uci::type::SpaceWeatherParameterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::spaceWeatherRecordType:
      return extjson_uci::type::SpaceWeatherRecordType::deserialize(propTree, dynamic_cast<uci::type::SpaceWeatherRecordType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::specialCodeDataLinkIdentifierType:
      return extjson_uci::type::SpecialCodeDataLinkIdentifierType::deserialize(propTree, dynamic_cast<uci::type::SpecialCodeDataLinkIdentifierType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::specificBDS_RegistersType:
      return extjson_uci::type::SpecificBDS_RegistersType::deserialize(propTree, dynamic_cast<uci::type::SpecificBDS_RegistersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::specificBlueSeparationType:
      return extjson_uci::type::SpecificBlueSeparationType::deserialize(propTree, dynamic_cast<uci::type::SpecificBlueSeparationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::specificEmitterIdentityConfidenceType:
      return extjson_uci::type::SpecificEmitterIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::SpecificEmitterIdentityConfidenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::specificEmitterIdentityType:
      return extjson_uci::type::SpecificEmitterIdentityType::deserialize(propTree, dynamic_cast<uci::type::SpecificEmitterIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::specificEmitterMultipleType:
      return extjson_uci::type::SpecificEmitterMultipleType::deserialize(propTree, dynamic_cast<uci::type::SpecificEmitterMultipleType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::specificFacilityIdentityConfidenceType:
      return extjson_uci::type::SpecificFacilityIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::SpecificFacilityIdentityConfidenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::specificIdentityConfidenceType:
      return extjson_uci::type::SpecificIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::SpecificIdentityConfidenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::specificIdentityType:
      return extjson_uci::type::SpecificIdentityType::deserialize(propTree, dynamic_cast<uci::type::SpecificIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::specificRedSeparationType:
      return extjson_uci::type::SpecificRedSeparationType::deserialize(propTree, dynamic_cast<uci::type::SpecificRedSeparationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::specificVehicleIdentityConfidenceType:
      return extjson_uci::type::SpecificVehicleIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::SpecificVehicleIdentityConfidenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::spectralBandType:
      return extjson_uci::type::SpectralBandType::deserialize(propTree, dynamic_cast<uci::type::SpectralBandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::spectralDensityReportID_Type:
      return extjson_uci::type::SpectralDensityReportID_Type::deserialize(propTree, dynamic_cast<uci::type::SpectralDensityReportID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::spectralDensityReportMDT:
      return extjson_uci::type::SpectralDensityReportMDT::deserialize(propTree, dynamic_cast<uci::type::SpectralDensityReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::spectralDensityReportMT:
      return extjson_uci::type::SpectralDensityReportMT::deserialize(propTree, dynamic_cast<uci::type::SpectralDensityReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::speedRangeType:
      return extjson_uci::type::SpeedRangeType::deserialize(propTree, dynamic_cast<uci::type::SpeedRangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sphereType:
      return extjson_uci::type::SphereType::deserialize(propTree, dynamic_cast<uci::type::SphereType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::stabilityCharacterizationType:
      return extjson_uci::type::StabilityCharacterizationType::deserialize(propTree, dynamic_cast<uci::type::StabilityCharacterizationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::stalenessDomainMobilityType:
      return extjson_uci::type::StalenessDomainMobilityType::deserialize(propTree, dynamic_cast<uci::type::StalenessDomainMobilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sTANAG_4607_MissionType:
      return extjson_uci::type::STANAG_4607_MissionType::deserialize(propTree, dynamic_cast<uci::type::STANAG_4607_MissionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sTANAG_4607_PackingPlanPET:
      return extjson_uci::type::STANAG_4607_PackingPlanPET::deserialize(propTree, dynamic_cast<uci::type::STANAG_4607_PackingPlanPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sTANAG_4607_PackingPlanRevA_Type:
      return extjson_uci::type::STANAG_4607_PackingPlanRevA_Type::deserialize(propTree, dynamic_cast<uci::type::STANAG_4607_PackingPlanRevA_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sTANAG_4607_PackingPlanType:
      return extjson_uci::type::STANAG_4607_PackingPlanType::deserialize(propTree, dynamic_cast<uci::type::STANAG_4607_PackingPlanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::standardIdentityConfidenceType:
      return extjson_uci::type::StandardIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::StandardIdentityConfidenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::standardIdentityType:
      return extjson_uci::type::StandardIdentityType::deserialize(propTree, dynamic_cast<uci::type::StandardIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::stateCovarianceNED_Type:
      return extjson_uci::type::StateCovarianceNED_Type::deserialize(propTree, dynamic_cast<uci::type::StateCovarianceNED_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::steeringUnitVectorType:
      return extjson_uci::type::SteeringUnitVectorType::deserialize(propTree, dynamic_cast<uci::type::SteeringUnitVectorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storageDetailType:
      return extjson_uci::type::StorageDetailType::deserialize(propTree, dynamic_cast<uci::type::StorageDetailType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeCarriageCapabilityStatusBaseType:
      return extjson_uci::type::StoreCarriageCapabilityStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::StoreCarriageCapabilityStatusBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeCarriageCapabilityStatusMDT:
      return extjson_uci::type::StoreCarriageCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StoreCarriageCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeCarriageCapabilityStatusMT:
      return extjson_uci::type::StoreCarriageCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::StoreCarriageCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeCarriageCapabilityStatusType:
      return extjson_uci::type::StoreCarriageCapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::StoreCarriageCapabilityStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeCarriageCapabilityType:
      return extjson_uci::type::StoreCarriageCapabilityType::deserialize(propTree, dynamic_cast<uci::type::StoreCarriageCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeCarriageStatusType:
      return extjson_uci::type::StoreCarriageStatusType::deserialize(propTree, dynamic_cast<uci::type::StoreCarriageStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeCommandType:
      return extjson_uci::type::StoreCommandType::deserialize(propTree, dynamic_cast<uci::type::StoreCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeConfidenceType:
      return extjson_uci::type::StoreConfidenceType::deserialize(propTree, dynamic_cast<uci::type::StoreConfidenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeInformationBaseType:
      return extjson_uci::type::StoreInformationBaseType::deserialize(propTree, dynamic_cast<uci::type::StoreInformationBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeInformationType:
      return extjson_uci::type::StoreInformationType::deserialize(propTree, dynamic_cast<uci::type::StoreInformationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeItemType:
      return extjson_uci::type::StoreItemType::deserialize(propTree, dynamic_cast<uci::type::StoreItemType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeLoadoutCarriageType:
      return extjson_uci::type::StoreLoadoutCarriageType::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutCarriageType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeLoadoutChoiceType:
      return extjson_uci::type::StoreLoadoutChoiceType::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeLoadoutConfigurationID_Type:
      return extjson_uci::type::StoreLoadoutConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutConfigurationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeLoadoutConfigurationMDT:
      return extjson_uci::type::StoreLoadoutConfigurationMDT::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutConfigurationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeLoadoutConfigurationMT:
      return extjson_uci::type::StoreLoadoutConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutConfigurationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeLoadoutConfigurationType:
      return extjson_uci::type::StoreLoadoutConfigurationType::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutConfigurationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeLoadoutItemPET:
      return extjson_uci::type::StoreLoadoutItemPET::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutItemPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeLoadoutItemType:
      return extjson_uci::type::StoreLoadoutItemType::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutItemType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeLoadoutMissionType:
      return extjson_uci::type::StoreLoadoutMissionType::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutMissionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeManagementCommandMDT:
      return extjson_uci::type::StoreManagementCommandMDT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeManagementCommandMT:
      return extjson_uci::type::StoreManagementCommandMT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeManagementCommandStatusMDT:
      return extjson_uci::type::StoreManagementCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeManagementCommandStatusMT:
      return extjson_uci::type::StoreManagementCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeManagementCommandType:
      return extjson_uci::type::StoreManagementCommandType::deserialize(propTree, dynamic_cast<uci::type::StoreManagementCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeManagementReportID_Type:
      return extjson_uci::type::StoreManagementReportID_Type::deserialize(propTree, dynamic_cast<uci::type::StoreManagementReportID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeManagementReportMDT:
      return extjson_uci::type::StoreManagementReportMDT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeManagementReportMT:
      return extjson_uci::type::StoreManagementReportMT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeManagementStatusMDT:
      return extjson_uci::type::StoreManagementStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeManagementStatusMT:
      return extjson_uci::type::StoreManagementStatusMT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeMultipleType:
      return extjson_uci::type::StoreMultipleType::deserialize(propTree, dynamic_cast<uci::type::StoreMultipleType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeStationType:
      return extjson_uci::type::StoreStationType::deserialize(propTree, dynamic_cast<uci::type::StoreStationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeStatusBaseType:
      return extjson_uci::type::StoreStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::StoreStatusBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeStatusDetailsType:
      return extjson_uci::type::StoreStatusDetailsType::deserialize(propTree, dynamic_cast<uci::type::StoreStatusDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeStatusType:
      return extjson_uci::type::StoreStatusType::deserialize(propTree, dynamic_cast<uci::type::StoreStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeType:
      return extjson_uci::type::StoreType::deserialize(propTree, dynamic_cast<uci::type::StoreType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeVerificationStatusType:
      return extjson_uci::type::StoreVerificationStatusType::deserialize(propTree, dynamic_cast<uci::type::StoreVerificationStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strengthRangeType:
      return extjson_uci::type::StrengthRangeType::deserialize(propTree, dynamic_cast<uci::type::StrengthRangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strengthType:
      return extjson_uci::type::StrengthType::deserialize(propTree, dynamic_cast<uci::type::StrengthType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeActivityCommandType:
      return extjson_uci::type::StrikeActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::StrikeActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeActivityMDT:
      return extjson_uci::type::StrikeActivityMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeActivityMT:
      return extjson_uci::type::StrikeActivityMT::deserialize(propTree, dynamic_cast<uci::type::StrikeActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeActivityType:
      return extjson_uci::type::StrikeActivityType::deserialize(propTree, dynamic_cast<uci::type::StrikeActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeCapabilityCommandType:
      return extjson_uci::type::StrikeCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeCapabilityMDT:
      return extjson_uci::type::StrikeCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeCapabilityMT:
      return extjson_uci::type::StrikeCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeCapabilityOptionsType:
      return extjson_uci::type::StrikeCapabilityOptionsType::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeCapabilityStatusMDT:
      return extjson_uci::type::StrikeCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeCapabilityStatusMT:
      return extjson_uci::type::StrikeCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeCapabilityStatusType:
      return extjson_uci::type::StrikeCapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeCapabilityType:
      return extjson_uci::type::StrikeCapabilityType::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeCommandMDT:
      return extjson_uci::type::StrikeCommandMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeCommandMT:
      return extjson_uci::type::StrikeCommandMT::deserialize(propTree, dynamic_cast<uci::type::StrikeCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeCommandStatusMDT:
      return extjson_uci::type::StrikeCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeCommandStatusMT:
      return extjson_uci::type::StrikeCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::StrikeCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeCommandType:
      return extjson_uci::type::StrikeCommandType::deserialize(propTree, dynamic_cast<uci::type::StrikeCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeConsentRequestMDT:
      return extjson_uci::type::StrikeConsentRequestMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeConsentRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeConsentRequestMT:
      return extjson_uci::type::StrikeConsentRequestMT::deserialize(propTree, dynamic_cast<uci::type::StrikeConsentRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeConsentRequestStatusMDT:
      return extjson_uci::type::StrikeConsentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeConsentRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeConsentRequestStatusMT:
      return extjson_uci::type::StrikeConsentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::StrikeConsentRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeConsentRequestType:
      return extjson_uci::type::StrikeConsentRequestType::deserialize(propTree, dynamic_cast<uci::type::StrikeConsentRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeSettingsCommandMDT:
      return extjson_uci::type::StrikeSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeSettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeSettingsCommandMT:
      return extjson_uci::type::StrikeSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::StrikeSettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeSettingsCommandStatusMDT:
      return extjson_uci::type::StrikeSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeSettingsCommandStatusMT:
      return extjson_uci::type::StrikeSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::StrikeSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeTaskAchievabilityAssessmentRequestType:
      return extjson_uci::type::StrikeTaskAchievabilityAssessmentRequestType::deserialize(propTree, dynamic_cast<uci::type::StrikeTaskAchievabilityAssessmentRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeTaskAchievabilityAssessmentType:
      return extjson_uci::type::StrikeTaskAchievabilityAssessmentType::deserialize(propTree, dynamic_cast<uci::type::StrikeTaskAchievabilityAssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeTaskMetricsTargetingType:
      return extjson_uci::type::StrikeTaskMetricsTargetingType::deserialize(propTree, dynamic_cast<uci::type::StrikeTaskMetricsTargetingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeTaskMetricsType:
      return extjson_uci::type::StrikeTaskMetricsType::deserialize(propTree, dynamic_cast<uci::type::StrikeTaskMetricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeTaskReleaseConstraintsType:
      return extjson_uci::type::StrikeTaskReleaseConstraintsType::deserialize(propTree, dynamic_cast<uci::type::StrikeTaskReleaseConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeTaskType:
      return extjson_uci::type::StrikeTaskType::deserialize(propTree, dynamic_cast<uci::type::StrikeTaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeTaskWeaponListType:
      return extjson_uci::type::StrikeTaskWeaponListType::deserialize(propTree, dynamic_cast<uci::type::StrikeTaskWeaponListType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeTaskWeaponType:
      return extjson_uci::type::StrikeTaskWeaponType::deserialize(propTree, dynamic_cast<uci::type::StrikeTaskWeaponType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeWeaponCommandType:
      return extjson_uci::type::StrikeWeaponCommandType::deserialize(propTree, dynamic_cast<uci::type::StrikeWeaponCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::structureAssessmentCharacterizationType:
      return extjson_uci::type::StructureAssessmentCharacterizationType::deserialize(propTree, dynamic_cast<uci::type::StructureAssessmentCharacterizationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::structureAssessmentType:
      return extjson_uci::type::StructureAssessmentType::deserialize(propTree, dynamic_cast<uci::type::StructureAssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subCapabilityDetailsType:
      return extjson_uci::type::SubCapabilityDetailsType::deserialize(propTree, dynamic_cast<uci::type::SubCapabilityDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subCapabilityID_Type:
      return extjson_uci::type::SubCapabilityID_Type::deserialize(propTree, dynamic_cast<uci::type::SubCapabilityID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subCapabilitySelectionType:
      return extjson_uci::type::SubCapabilitySelectionType::deserialize(propTree, dynamic_cast<uci::type::SubCapabilitySelectionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subjectType:
      return extjson_uci::type::SubjectType::deserialize(propTree, dynamic_cast<uci::type::SubjectType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subordinatePlanningProcessType:
      return extjson_uci::type::SubordinatePlanningProcessType::deserialize(propTree, dynamic_cast<uci::type::SubordinatePlanningProcessType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subPlanActivationSettingType:
      return extjson_uci::type::SubPlanActivationSettingType::deserialize(propTree, dynamic_cast<uci::type::SubPlanActivationSettingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subPlansModificationType:
      return extjson_uci::type::SubPlansModificationType::deserialize(propTree, dynamic_cast<uci::type::SubPlansModificationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemActiveBIT_Type:
      return extjson_uci::type::SubsystemActiveBIT_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemActiveBIT_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemActiveCalibrationType:
      return extjson_uci::type::SubsystemActiveCalibrationType::deserialize(propTree, dynamic_cast<uci::type::SubsystemActiveCalibrationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemBIT_CommandMDT:
      return extjson_uci::type::SubsystemBIT_CommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_CommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemBIT_CommandMT:
      return extjson_uci::type::SubsystemBIT_CommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_CommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemBIT_CommandStatusMDT:
      return extjson_uci::type::SubsystemBIT_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_CommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemBIT_CommandStatusMT:
      return extjson_uci::type::SubsystemBIT_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_CommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemBIT_CommandType:
      return extjson_uci::type::SubsystemBIT_CommandType::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_CommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemBIT_ConfigurationID_Type:
      return extjson_uci::type::SubsystemBIT_ConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_ConfigurationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemBIT_ConfigurationMDT:
      return extjson_uci::type::SubsystemBIT_ConfigurationMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_ConfigurationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemBIT_ConfigurationMT:
      return extjson_uci::type::SubsystemBIT_ConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_ConfigurationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemBIT_StatusMDT:
      return extjson_uci::type::SubsystemBIT_StatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_StatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemBIT_StatusMT:
      return extjson_uci::type::SubsystemBIT_StatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_StatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemBIT_Type:
      return extjson_uci::type::SubsystemBIT_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCalibrationCommandID_ChoiceType:
      return extjson_uci::type::SubsystemCalibrationCommandID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationCommandID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCalibrationCommandMDT:
      return extjson_uci::type::SubsystemCalibrationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCalibrationCommandMT:
      return extjson_uci::type::SubsystemCalibrationCommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCalibrationCommandStatusMDT:
      return extjson_uci::type::SubsystemCalibrationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCalibrationCommandStatusMT:
      return extjson_uci::type::SubsystemCalibrationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCalibrationConfigurationID_Type:
      return extjson_uci::type::SubsystemCalibrationConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationConfigurationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCalibrationConfigurationMDT:
      return extjson_uci::type::SubsystemCalibrationConfigurationMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationConfigurationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCalibrationConfigurationMT:
      return extjson_uci::type::SubsystemCalibrationConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationConfigurationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCalibrationStatusMDT:
      return extjson_uci::type::SubsystemCalibrationStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCalibrationStatusMT:
      return extjson_uci::type::SubsystemCalibrationStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCalibrationType:
      return extjson_uci::type::SubsystemCalibrationType::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCommandStatusBaseType:
      return extjson_uci::type::SubsystemCommandStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::SubsystemCommandStatusBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCommandType:
      return extjson_uci::type::SubsystemCommandType::deserialize(propTree, dynamic_cast<uci::type::SubsystemCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCompletedBIT_ItemType:
      return extjson_uci::type::SubsystemCompletedBIT_ItemType::deserialize(propTree, dynamic_cast<uci::type::SubsystemCompletedBIT_ItemType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCompletedBIT_Type:
      return extjson_uci::type::SubsystemCompletedBIT_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemCompletedBIT_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCompletedCalibrationItemType:
      return extjson_uci::type::SubsystemCompletedCalibrationItemType::deserialize(propTree, dynamic_cast<uci::type::SubsystemCompletedCalibrationItemType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCompletedCalibrationType:
      return extjson_uci::type::SubsystemCompletedCalibrationType::deserialize(propTree, dynamic_cast<uci::type::SubsystemCompletedCalibrationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemConfigurationDataRequestMDT:
      return extjson_uci::type::SubsystemConfigurationDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationDataRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemConfigurationDataRequestMT:
      return extjson_uci::type::SubsystemConfigurationDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationDataRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemConfigurationDataRequestStatusMDT:
      return extjson_uci::type::SubsystemConfigurationDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemConfigurationDataRequestStatusMT:
      return extjson_uci::type::SubsystemConfigurationDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationDataRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemConfigurationID_Type:
      return extjson_uci::type::SubsystemConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemConfigurationMDT:
      return extjson_uci::type::SubsystemConfigurationMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemConfigurationMT:
      return extjson_uci::type::SubsystemConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemConfigurationType:
      return extjson_uci::type::SubsystemConfigurationType::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemEnabledSettingType:
      return extjson_uci::type::SubsystemEnabledSettingType::deserialize(propTree, dynamic_cast<uci::type::SubsystemEnabledSettingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemEraseCommandMDT:
      return extjson_uci::type::SubsystemEraseCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemEraseCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemEraseCommandMT:
      return extjson_uci::type::SubsystemEraseCommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemEraseCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemEraseCommandStatusMDT:
      return extjson_uci::type::SubsystemEraseCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemEraseCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemEraseCommandStatusMT:
      return extjson_uci::type::SubsystemEraseCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemEraseCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemExtendedStatusPET:
      return extjson_uci::type::SubsystemExtendedStatusPET::deserialize(propTree, dynamic_cast<uci::type::SubsystemExtendedStatusPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemFaultAmbiguityGroupType:
      return extjson_uci::type::SubsystemFaultAmbiguityGroupType::deserialize(propTree, dynamic_cast<uci::type::SubsystemFaultAmbiguityGroupType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemFaultType:
      return extjson_uci::type::SubsystemFaultType::deserialize(propTree, dynamic_cast<uci::type::SubsystemFaultType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemID_Type:
      return extjson_uci::type::SubsystemID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceCommandMDT:
      return extjson_uci::type::SubsystemMaintenanceCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceCommandMT:
      return extjson_uci::type::SubsystemMaintenanceCommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceCommandStatusMDT:
      return extjson_uci::type::SubsystemMaintenanceCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceCommandStatusMT:
      return extjson_uci::type::SubsystemMaintenanceCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceConfigurationID_Type:
      return extjson_uci::type::SubsystemMaintenanceConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceConfigurationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceConfigurationMDT:
      return extjson_uci::type::SubsystemMaintenanceConfigurationMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceConfigurationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceConfigurationMT:
      return extjson_uci::type::SubsystemMaintenanceConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceConfigurationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceEventSettingsConfigurationType:
      return extjson_uci::type::SubsystemMaintenanceEventSettingsConfigurationType::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceEventSettingsConfigurationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceEventSettingsType:
      return extjson_uci::type::SubsystemMaintenanceEventSettingsType::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceEventSettingsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceID_Type:
      return extjson_uci::type::SubsystemMaintenanceID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceResultEventType:
      return extjson_uci::type::SubsystemMaintenanceResultEventType::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceResultEventType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceResultStatusType:
      return extjson_uci::type::SubsystemMaintenanceResultStatusType::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceResultStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceStatusMDT:
      return extjson_uci::type::SubsystemMaintenanceStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceStatusMT:
      return extjson_uci::type::SubsystemMaintenanceStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceStatusType:
      return extjson_uci::type::SubsystemMaintenanceStatusType::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceSubtestChoiceType:
      return extjson_uci::type::SubsystemMaintenanceSubtestChoiceType::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceSubtestChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceSubtestCommandChoiceType:
      return extjson_uci::type::SubsystemMaintenanceSubtestCommandChoiceType::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceSubtestCommandChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceSubtestResultChoiceType:
      return extjson_uci::type::SubsystemMaintenanceSubtestResultChoiceType::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceSubtestResultChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceTestCommandPET:
      return extjson_uci::type::SubsystemMaintenanceTestCommandPET::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceTestCommandPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceTestCommandType:
      return extjson_uci::type::SubsystemMaintenanceTestCommandType::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceTestCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceTestPET:
      return extjson_uci::type::SubsystemMaintenanceTestPET::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceTestPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceTestResultPET:
      return extjson_uci::type::SubsystemMaintenanceTestResultPET::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceTestResultPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceTestResultType:
      return extjson_uci::type::SubsystemMaintenanceTestResultType::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceTestResultType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceTestType:
      return extjson_uci::type::SubsystemMaintenanceTestType::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceTestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemSettingParameterType:
      return extjson_uci::type::SubsystemSettingParameterType::deserialize(propTree, dynamic_cast<uci::type::SubsystemSettingParameterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemSettingsCommandMDT:
      return extjson_uci::type::SubsystemSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemSettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemSettingsCommandMT:
      return extjson_uci::type::SubsystemSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemSettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemSettingsCommandStatusMDT:
      return extjson_uci::type::SubsystemSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemSettingsCommandStatusMT:
      return extjson_uci::type::SubsystemSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemSpecificationType:
      return extjson_uci::type::SubsystemSpecificationType::deserialize(propTree, dynamic_cast<uci::type::SubsystemSpecificationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStateCommandMDT:
      return extjson_uci::type::SubsystemStateCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStateCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStateCommandMT:
      return extjson_uci::type::SubsystemStateCommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStateCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStateCommandStatusMDT:
      return extjson_uci::type::SubsystemStateCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStateCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStateCommandStatusMT:
      return extjson_uci::type::SubsystemStateCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStateCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStatusDataRequestMDT:
      return extjson_uci::type::SubsystemStatusDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDataRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStatusDataRequestMT:
      return extjson_uci::type::SubsystemStatusDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDataRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStatusDataRequestStatusMDT:
      return extjson_uci::type::SubsystemStatusDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStatusDataRequestStatusMT:
      return extjson_uci::type::SubsystemStatusDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDataRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStatusDetailedDataRequestMDT:
      return extjson_uci::type::SubsystemStatusDetailedDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDetailedDataRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStatusDetailedDataRequestMT:
      return extjson_uci::type::SubsystemStatusDetailedDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDetailedDataRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStatusDetailedDataRequestStatusMDT:
      return extjson_uci::type::SubsystemStatusDetailedDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDetailedDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStatusDetailedDataRequestStatusMT:
      return extjson_uci::type::SubsystemStatusDetailedDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDetailedDataRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStatusDetailedMDT:
      return extjson_uci::type::SubsystemStatusDetailedMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDetailedMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStatusDetailedMT:
      return extjson_uci::type::SubsystemStatusDetailedMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDetailedMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStatusMDT:
      return extjson_uci::type::SubsystemStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStatusMT:
      return extjson_uci::type::SubsystemStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStreamMDT:
      return extjson_uci::type::SubsystemStreamMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStreamMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStreamMT:
      return extjson_uci::type::SubsystemStreamMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStreamMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemSupportedSettingType:
      return extjson_uci::type::SubsystemSupportedSettingType::deserialize(propTree, dynamic_cast<uci::type::SubsystemSupportedSettingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::supportCapabilityCommandBaseType:
      return extjson_uci::type::SupportCapabilityCommandBaseType::deserialize(propTree, dynamic_cast<uci::type::SupportCapabilityCommandBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::supportCapabilityCommandStatusBaseType:
      return extjson_uci::type::SupportCapabilityCommandStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::SupportCapabilityCommandStatusBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::supportCapabilityID_Type:
      return extjson_uci::type::SupportCapabilityID_Type::deserialize(propTree, dynamic_cast<uci::type::SupportCapabilityID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::supportCapabilityStatusBaseType:
      return extjson_uci::type::SupportCapabilityStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::SupportCapabilityStatusBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::supportedModeType:
      return extjson_uci::type::SupportedModeType::deserialize(propTree, dynamic_cast<uci::type::SupportedModeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::supportedOutputType:
      return extjson_uci::type::SupportedOutputType::deserialize(propTree, dynamic_cast<uci::type::SupportedOutputType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::supportedPlanActivationAutonomyType:
      return extjson_uci::type::SupportedPlanActivationAutonomyType::deserialize(propTree, dynamic_cast<uci::type::SupportedPlanActivationAutonomyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::supportedProcessingType:
      return extjson_uci::type::SupportedProcessingType::deserialize(propTree, dynamic_cast<uci::type::SupportedProcessingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::supportedResolutionAvailabilityType:
      return extjson_uci::type::SupportedResolutionAvailabilityType::deserialize(propTree, dynamic_cast<uci::type::SupportedResolutionAvailabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::supportedResolutionID_Type:
      return extjson_uci::type::SupportedResolutionID_Type::deserialize(propTree, dynamic_cast<uci::type::SupportedResolutionID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::supportedResolutionType:
      return extjson_uci::type::SupportedResolutionType::deserialize(propTree, dynamic_cast<uci::type::SupportedResolutionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::surfaceRecoveryType:
      return extjson_uci::type::SurfaceRecoveryType::deserialize(propTree, dynamic_cast<uci::type::SurfaceRecoveryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::survivabilityRiskLevelID_Type:
      return extjson_uci::type::SurvivabilityRiskLevelID_Type::deserialize(propTree, dynamic_cast<uci::type::SurvivabilityRiskLevelID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::survivabilityRiskLevelMDT:
      return extjson_uci::type::SurvivabilityRiskLevelMDT::deserialize(propTree, dynamic_cast<uci::type::SurvivabilityRiskLevelMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::survivabilityRiskLevelMT:
      return extjson_uci::type::SurvivabilityRiskLevelMT::deserialize(propTree, dynamic_cast<uci::type::SurvivabilityRiskLevelMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::survivabilityRiskSettingType:
      return extjson_uci::type::SurvivabilityRiskSettingType::deserialize(propTree, dynamic_cast<uci::type::SurvivabilityRiskSettingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemApprovalPolicyType:
      return extjson_uci::type::SystemApprovalPolicyType::deserialize(propTree, dynamic_cast<uci::type::SystemApprovalPolicyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemCandidateType:
      return extjson_uci::type::SystemCandidateType::deserialize(propTree, dynamic_cast<uci::type::SystemCandidateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemCapabilitySpecificationType:
      return extjson_uci::type::SystemCapabilitySpecificationType::deserialize(propTree, dynamic_cast<uci::type::SystemCapabilitySpecificationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemCharacteristicType:
      return extjson_uci::type::SystemCharacteristicType::deserialize(propTree, dynamic_cast<uci::type::SystemCharacteristicType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemCommunicationsType:
      return extjson_uci::type::SystemCommunicationsType::deserialize(propTree, dynamic_cast<uci::type::SystemCommunicationsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemComparativeType:
      return extjson_uci::type::SystemComparativeType::deserialize(propTree, dynamic_cast<uci::type::SystemComparativeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemConfigurationType:
      return extjson_uci::type::SystemConfigurationType::deserialize(propTree, dynamic_cast<uci::type::SystemConfigurationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemDataType:
      return extjson_uci::type::SystemDataType::deserialize(propTree, dynamic_cast<uci::type::SystemDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemDeploymentActivityMDT:
      return extjson_uci::type::SystemDeploymentActivityMDT::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemDeploymentActivityMT:
      return extjson_uci::type::SystemDeploymentActivityMT::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemDeploymentActivityType:
      return extjson_uci::type::SystemDeploymentActivityType::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemDeploymentCapabilityMDT:
      return extjson_uci::type::SystemDeploymentCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemDeploymentCapabilityMT:
      return extjson_uci::type::SystemDeploymentCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemDeploymentCapabilityStatusMDT:
      return extjson_uci::type::SystemDeploymentCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemDeploymentCapabilityStatusMT:
      return extjson_uci::type::SystemDeploymentCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemDeploymentCapabilityStatusType:
      return extjson_uci::type::SystemDeploymentCapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentCapabilityStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemDeploymentCapabilityType:
      return extjson_uci::type::SystemDeploymentCapabilityType::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemDeploymentOptionsType:
      return extjson_uci::type::SystemDeploymentOptionsType::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemDeploymentTaskBaseType:
      return extjson_uci::type::SystemDeploymentTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentTaskBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemDeploymentTaskType:
      return extjson_uci::type::SystemDeploymentTaskType::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentTaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemEphemerisBasisChoiceType:
      return extjson_uci::type::SystemEphemerisBasisChoiceType::deserialize(propTree, dynamic_cast<uci::type::SystemEphemerisBasisChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemEphemerisRequestParametersType:
      return extjson_uci::type::SystemEphemerisRequestParametersType::deserialize(propTree, dynamic_cast<uci::type::SystemEphemerisRequestParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemEstimationRequestMDT:
      return extjson_uci::type::SystemEstimationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SystemEstimationRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemEstimationRequestMT:
      return extjson_uci::type::SystemEstimationRequestMT::deserialize(propTree, dynamic_cast<uci::type::SystemEstimationRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemEstimationRequestStatusMDT:
      return extjson_uci::type::SystemEstimationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SystemEstimationRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemEstimationRequestStatusMT:
      return extjson_uci::type::SystemEstimationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemEstimationRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemEstimationStartType:
      return extjson_uci::type::SystemEstimationStartType::deserialize(propTree, dynamic_cast<uci::type::SystemEstimationStartType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemEstimationStopType:
      return extjson_uci::type::SystemEstimationStopType::deserialize(propTree, dynamic_cast<uci::type::SystemEstimationStopType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemFilterType:
      return extjson_uci::type::SystemFilterType::deserialize(propTree, dynamic_cast<uci::type::SystemFilterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemID_Type:
      return extjson_uci::type::SystemID_Type::deserialize(propTree, dynamic_cast<uci::type::SystemID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemIdentityType:
      return extjson_uci::type::SystemIdentityType::deserialize(propTree, dynamic_cast<uci::type::SystemIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemManagementRequestMDT:
      return extjson_uci::type::SystemManagementRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SystemManagementRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemManagementRequestMT:
      return extjson_uci::type::SystemManagementRequestMT::deserialize(propTree, dynamic_cast<uci::type::SystemManagementRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemManagementRequestStatusMDT:
      return extjson_uci::type::SystemManagementRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SystemManagementRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemManagementRequestStatusMT:
      return extjson_uci::type::SystemManagementRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemManagementRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemManagementRequestType:
      return extjson_uci::type::SystemManagementRequestType::deserialize(propTree, dynamic_cast<uci::type::SystemManagementRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemMessageIdentifierType:
      return extjson_uci::type::SystemMessageIdentifierType::deserialize(propTree, dynamic_cast<uci::type::SystemMessageIdentifierType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemMetadataMDT:
      return extjson_uci::type::SystemMetadataMDT::deserialize(propTree, dynamic_cast<uci::type::SystemMetadataMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemMetadataMT:
      return extjson_uci::type::SystemMetadataMT::deserialize(propTree, dynamic_cast<uci::type::SystemMetadataMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemMetadataPET:
      return extjson_uci::type::SystemMetadataPET::deserialize(propTree, dynamic_cast<uci::type::SystemMetadataPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemNotificationMDT:
      return extjson_uci::type::SystemNotificationMDT::deserialize(propTree, dynamic_cast<uci::type::SystemNotificationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemNotificationMT:
      return extjson_uci::type::SystemNotificationMT::deserialize(propTree, dynamic_cast<uci::type::SystemNotificationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalElementSetID_Type:
      return extjson_uci::type::SystemOrbitalElementSetID_Type::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalElementSetMDT:
      return extjson_uci::type::SystemOrbitalElementSetMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalElementSetMT:
      return extjson_uci::type::SystemOrbitalElementSetMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalElementSetRequestMDT:
      return extjson_uci::type::SystemOrbitalElementSetRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalElementSetRequestMT:
      return extjson_uci::type::SystemOrbitalElementSetRequestMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalElementSetRequestStatusMDT:
      return extjson_uci::type::SystemOrbitalElementSetRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalElementSetRequestStatusMT:
      return extjson_uci::type::SystemOrbitalElementSetRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalElementSetType:
      return extjson_uci::type::SystemOrbitalElementSetType::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalEphemerisID_Type:
      return extjson_uci::type::SystemOrbitalEphemerisID_Type::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalEphemerisMDT:
      return extjson_uci::type::SystemOrbitalEphemerisMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalEphemerisMT:
      return extjson_uci::type::SystemOrbitalEphemerisMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalEphemerisRequestMDT:
      return extjson_uci::type::SystemOrbitalEphemerisRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalEphemerisRequestMT:
      return extjson_uci::type::SystemOrbitalEphemerisRequestMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalEphemerisRequestStatusMDT:
      return extjson_uci::type::SystemOrbitalEphemerisRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalEphemerisRequestStatusMT:
      return extjson_uci::type::SystemOrbitalEphemerisRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalEphemerisType:
      return extjson_uci::type::SystemOrbitalEphemerisType::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalPositionReportMDT:
      return extjson_uci::type::SystemOrbitalPositionReportMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalPositionReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalPositionReportMT:
      return extjson_uci::type::SystemOrbitalPositionReportMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalPositionReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalVCM_ID_Type:
      return extjson_uci::type::SystemOrbitalVCM_ID_Type::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_ID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalVCM_MDT:
      return extjson_uci::type::SystemOrbitalVCM_MDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_MDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalVCM_MT:
      return extjson_uci::type::SystemOrbitalVCM_MT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_MT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalVCM_RequestMDT:
      return extjson_uci::type::SystemOrbitalVCM_RequestMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_RequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalVCM_RequestMT:
      return extjson_uci::type::SystemOrbitalVCM_RequestMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_RequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalVCM_RequestStatusMDT:
      return extjson_uci::type::SystemOrbitalVCM_RequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_RequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalVCM_RequestStatusMT:
      return extjson_uci::type::SystemOrbitalVCM_RequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_RequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitalVCM_Type:
      return extjson_uci::type::SystemOrbitalVCM_Type::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitReportMDT:
      return extjson_uci::type::SystemOrbitReportMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemOrbitReportMT:
      return extjson_uci::type::SystemOrbitReportMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemPositionSpecificationType:
      return extjson_uci::type::SystemPositionSpecificationType::deserialize(propTree, dynamic_cast<uci::type::SystemPositionSpecificationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemReadinessID_Type:
      return extjson_uci::type::SystemReadinessID_Type::deserialize(propTree, dynamic_cast<uci::type::SystemReadinessID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemReadinessMDT:
      return extjson_uci::type::SystemReadinessMDT::deserialize(propTree, dynamic_cast<uci::type::SystemReadinessMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemReadinessMT:
      return extjson_uci::type::SystemReadinessMT::deserialize(propTree, dynamic_cast<uci::type::SystemReadinessMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemReadinessType:
      return extjson_uci::type::SystemReadinessType::deserialize(propTree, dynamic_cast<uci::type::SystemReadinessType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemRoutePlanSpecificationType:
      return extjson_uci::type::SystemRoutePlanSpecificationType::deserialize(propTree, dynamic_cast<uci::type::SystemRoutePlanSpecificationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemScheduleStateType:
      return extjson_uci::type::SystemScheduleStateType::deserialize(propTree, dynamic_cast<uci::type::SystemScheduleStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemServiceType:
      return extjson_uci::type::SystemServiceType::deserialize(propTree, dynamic_cast<uci::type::SystemServiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemsNeededOptionType:
      return extjson_uci::type::SystemsNeededOptionType::deserialize(propTree, dynamic_cast<uci::type::SystemsNeededOptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemsNeededRequestMDT:
      return extjson_uci::type::SystemsNeededRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SystemsNeededRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemsNeededRequestMT:
      return extjson_uci::type::SystemsNeededRequestMT::deserialize(propTree, dynamic_cast<uci::type::SystemsNeededRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemsNeededRequestStatusMDT:
      return extjson_uci::type::SystemsNeededRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SystemsNeededRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemsNeededRequestStatusMT:
      return extjson_uci::type::SystemsNeededRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemsNeededRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemsNeededResultsType:
      return extjson_uci::type::SystemsNeededResultsType::deserialize(propTree, dynamic_cast<uci::type::SystemsNeededResultsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemStateFilterType:
      return extjson_uci::type::SystemStateFilterType::deserialize(propTree, dynamic_cast<uci::type::SystemStateFilterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemStatusMDT:
      return extjson_uci::type::SystemStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SystemStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemStatusMT:
      return extjson_uci::type::SystemStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemTimeAtReferenceMDT:
      return extjson_uci::type::SystemTimeAtReferenceMDT::deserialize(propTree, dynamic_cast<uci::type::SystemTimeAtReferenceMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemTimeAtReferenceMT:
      return extjson_uci::type::SystemTimeAtReferenceMT::deserialize(propTree, dynamic_cast<uci::type::SystemTimeAtReferenceMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tacticalOrderActivityMDT:
      return extjson_uci::type::TacticalOrderActivityMDT::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tacticalOrderActivityMT:
      return extjson_uci::type::TacticalOrderActivityMT::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tacticalOrderActivityType:
      return extjson_uci::type::TacticalOrderActivityType::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tacticalOrderCapabilityMDT:
      return extjson_uci::type::TacticalOrderCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tacticalOrderCapabilityMT:
      return extjson_uci::type::TacticalOrderCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tacticalOrderCapabilityStatusMDT:
      return extjson_uci::type::TacticalOrderCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tacticalOrderCapabilityStatusMT:
      return extjson_uci::type::TacticalOrderCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tacticalOrderCapabilityType:
      return extjson_uci::type::TacticalOrderCapabilityType::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tacticalOrderTaskBaseType:
      return extjson_uci::type::TacticalOrderTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderTaskBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tacticalOrderTaskType:
      return extjson_uci::type::TacticalOrderTaskType::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderTaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tagAssociationID_Type:
      return extjson_uci::type::TagAssociationID_Type::deserialize(propTree, dynamic_cast<uci::type::TagAssociationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tagAssociationMDT:
      return extjson_uci::type::TagAssociationMDT::deserialize(propTree, dynamic_cast<uci::type::TagAssociationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tagAssociationMT:
      return extjson_uci::type::TagAssociationMT::deserialize(propTree, dynamic_cast<uci::type::TagAssociationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tagAssociationTargetType:
      return extjson_uci::type::TagAssociationTargetType::deserialize(propTree, dynamic_cast<uci::type::TagAssociationTargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::targetFinalApproachType:
      return extjson_uci::type::TargetFinalApproachType::deserialize(propTree, dynamic_cast<uci::type::TargetFinalApproachType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::targetInformationType:
      return extjson_uci::type::TargetInformationType::deserialize(propTree, dynamic_cast<uci::type::TargetInformationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::targetMobilityAssessmentDataType:
      return extjson_uci::type::TargetMobilityAssessmentDataType::deserialize(propTree, dynamic_cast<uci::type::TargetMobilityAssessmentDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::targetMobilityAssessmentType:
      return extjson_uci::type::TargetMobilityAssessmentType::deserialize(propTree, dynamic_cast<uci::type::TargetMobilityAssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::targetMobilityRequestType:
      return extjson_uci::type::TargetMobilityRequestType::deserialize(propTree, dynamic_cast<uci::type::TargetMobilityRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::targetType:
      return extjson_uci::type::TargetType::deserialize(propTree, dynamic_cast<uci::type::TargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskAchievabilityAssessmentPET:
      return extjson_uci::type::TaskAchievabilityAssessmentPET::deserialize(propTree, dynamic_cast<uci::type::TaskAchievabilityAssessmentPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskAchievabilityAssessmentRequestPET:
      return extjson_uci::type::TaskAchievabilityAssessmentRequestPET::deserialize(propTree, dynamic_cast<uci::type::TaskAchievabilityAssessmentRequestPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskAllocationInvalidType:
      return extjson_uci::type::TaskAllocationInvalidType::deserialize(propTree, dynamic_cast<uci::type::TaskAllocationInvalidType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskAllocationType:
      return extjson_uci::type::TaskAllocationType::deserialize(propTree, dynamic_cast<uci::type::TaskAllocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskCancelCommandMDT:
      return extjson_uci::type::TaskCancelCommandMDT::deserialize(propTree, dynamic_cast<uci::type::TaskCancelCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskCancelCommandMT:
      return extjson_uci::type::TaskCancelCommandMT::deserialize(propTree, dynamic_cast<uci::type::TaskCancelCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskCancelCommandStatusMDT:
      return extjson_uci::type::TaskCancelCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskCancelCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskCancelCommandStatusMT:
      return extjson_uci::type::TaskCancelCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskCancelCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskCapabilityCommandType:
      return extjson_uci::type::TaskCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::TaskCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    default:
      return false;
  }
}

} // namespace base

} // namespace extjson_uci

