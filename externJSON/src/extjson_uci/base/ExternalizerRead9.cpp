/** @file ExternalizerRead9.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/base/ExternalizerRead9.h"

#include <string>

#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/AMTI_CapabilityEnum.h"
#include "extjson_uci/type/AMTI_MessageOutputsEnum.h"
#include "extjson_uci/type/AMTI_SubCapabilityEnum.h"
#include "extjson_uci/type/AO_CapabilityEnum.h"
#include "extjson_uci/type/AO_MessageOutputsEnum.h"
#include "extjson_uci/type/AS_IntegratorModeEnum.h"
#include "extjson_uci/type/AS_IntegratorStepModeEnum.h"
#include "extjson_uci/type/AS_PartialDerivativesEnum.h"
#include "extjson_uci/type/AccessEffortEnum.h"
#include "extjson_uci/type/AchievabilityEnum.h"
#include "extjson_uci/type/ActionMessageOutputsEnum.h"
#include "extjson_uci/type/ActionTypeEnum.h"
#include "extjson_uci/type/ActivityBasisEnum.h"
#include "extjson_uci/type/ActivityExecutionStatusEnum.h"
#include "extjson_uci/type/ActivityPlanPartsEnum.h"
#include "extjson_uci/type/ActivityStateEnum.h"
#include "extjson_uci/type/ActivitySubCategoryEnum.h"
#include "extjson_uci/type/ActivityTransitionEnum.h"
#include "extjson_uci/type/AirRaidStateEnum.h"
#include "extjson_uci/type/AirSampleCapabilityEnum.h"
#include "extjson_uci/type/AirSampleMessageOutputsEnum.h"
#include "extjson_uci/type/AirfieldStoresEnum.h"
#include "extjson_uci/type/AltitudeReferenceEnum.h"
#include "extjson_uci/type/AltitudeSourceEnum.h"
#include "extjson_uci/type/AmbiguityOrderingEnum.h"
#include "extjson_uci/type/AntennaTypeEnum.h"
#include "extjson_uci/type/ApproachConditionStatusEnum.h"
#include "extjson_uci/type/ApproachLightingEnum.h"
#include "extjson_uci/type/ApprovalRequirementEnum.h"
#include "extjson_uci/type/ApprovalResponseEnum.h"
#include "extjson_uci/type/ApprovalStateEnum.h"
#include "extjson_uci/type/ApprovalStatusEnum.h"
#include "extjson_uci/type/ArresterWiresEnum.h"
#include "extjson_uci/type/AssessmentStatusEnum.h"
#include "extjson_uci/type/AssessmentSuppressionEnum.h"
#include "extjson_uci/type/AssociatedAccessAssessmentInfoEnum.h"
#include "extjson_uci/type/AtmosphereModelEnum.h"
#include "extjson_uci/type/AutonomousActionStatusEnum.h"
#include "extjson_uci/type/AutopilotModeEnum.h"
#include "extjson_uci/type/BeamPowerModeEnum.h"
#include "extjson_uci/type/BeamWeightingEnum.h"
#include "extjson_uci/type/BehavioralChangeEnum.h"
#include "extjson_uci/type/BodyFaceEnum.h"
#include "extjson_uci/type/BodyReferenceEnum.h"
#include "extjson_uci/type/BrakingActionEnum.h"
#include "extjson_uci/type/COARPS_SAR_CollectionOptionsEnum.h"
#include "extjson_uci/type/COARPS_SMTI_CollectionOptionsEnum.h"
#include "extjson_uci/type/COMINT_DwellStateEnum.h"
#include "extjson_uci/type/COMINT_DwellTypeEnum.h"
#include "extjson_uci/type/COMINT_SubCapabilityEnum.h"
#include "extjson_uci/type/CSO_StateEnum.h"
#include "extjson_uci/type/CS_CapabilityEnum.h"
#include "extjson_uci/type/CS_KindEnum.h"
#include "extjson_uci/type/CS_PostureEnum.h"
#include "extjson_uci/type/CS_SensorPointingEnum.h"
#include "extjson_uci/type/CS_SensorTargetingEnum.h"
#include "extjson_uci/type/CS_SensorTypeEnum.h"
#include "extjson_uci/type/CTR_StateEnum.h"
#include "extjson_uci/type/CannotComplyEnum.h"
#include "extjson_uci/type/CapabilityAvailabilityEnum.h"
#include "extjson_uci/type/CapabilityCommandStateEnum.h"
#include "extjson_uci/type/CapabilityControlInterfacesEnum.h"
#include "extjson_uci/type/CapabilityCoverageAreaBasisEnum.h"
#include "extjson_uci/type/CapabilityCoverageAreaFactorEnum.h"
#include "extjson_uci/type/CapabilityInitiationEnum.h"
#include "extjson_uci/type/CapabilityTypeEnum.h"
#include "extjson_uci/type/CargoDeliveryCapabilityEnum.h"
#include "extjson_uci/type/CargoDeliverySubCapabilityEnum.h"
#include "extjson_uci/type/CargoPackagingEnum.h"
#include "extjson_uci/type/CelestialBodyEphemerisSourceEnum.h"
#include "extjson_uci/type/CelestialBodyNameEnum.h"
#include "extjson_uci/type/CharacterizationProductTypeEnum.h"
#include "extjson_uci/type/CharacterizationTypeEnum.h"
#include "extjson_uci/type/ClearIdentityValuesEnum.h"
#include "extjson_uci/type/ClimbOptimizationEnum.h"
#include "extjson_uci/type/CollectionObjectiveEnum.h"
#include "extjson_uci/type/CollectionPatternEnum.h"
#include "extjson_uci/type/CollectionPolicyEnum.h"
#include "extjson_uci/type/CommAcquisitionModeTypeEnum.h"
#include "extjson_uci/type/CommAllocationTransitionEnum.h"
#include "extjson_uci/type/CommAssetCategoryEnum.h"
#include "extjson_uci/type/CommAssetEstimationMessageEnum.h"
#include "extjson_uci/type/CommCDL_LinkFallbackStateEnum.h"
#include "extjson_uci/type/CommCDL_RemoteMessageProcessingEnum.h"
#include "extjson_uci/type/CommCapabilityEnum.h"
#include "extjson_uci/type/CommComsecModeTypeEnum.h"
#include "extjson_uci/type/CommComsecModeTypeRequestEnum.h"
#include "extjson_uci/type/CommConfigurationStateEnum.h"
#include "extjson_uci/type/CommConnectionCommandEnum.h"
#include "extjson_uci/type/CommConnectionStateEnum.h"
#include "extjson_uci/type/CommCountermeasureSetEnum.h"
#include "extjson_uci/type/CommDataDirectionFiltrationEnum.h"
#include "extjson_uci/type/CommDataFormatEnum.h"
#include "extjson_uci/type/CommIFDL_AcqControlEnum.h"
#include "extjson_uci/type/CommIFDL_CommModeEnum.h"
#include "extjson_uci/type/CommIFDL_FlightSizeEnum.h"
#include "extjson_uci/type/CommIFDL_TxRateEnum.h"
#include "extjson_uci/type/CommLink16EnhancedThroughputCodeRateEnum.h"
#include "extjson_uci/type/CommLink16InitialEntryGroupEnum.h"
#include "extjson_uci/type/CommLink16InterferenceProtModeEnum.h"
#include "extjson_uci/type/CommLink16RangeModeEnum.h"
#include "extjson_uci/type/CommLink16TransmitAntennaEnum.h"
#include "extjson_uci/type/CommLink16TransmitModeEnum.h"
#include "extjson_uci/type/CommLink16TxPackingLimitEnum.h"
#include "extjson_uci/type/CommLink16TxPowerSelectionEnum.h"
#include "extjson_uci/type/CommLink16_AdvanceSlotNotificationModeEnum.h"
#include "extjson_uci/type/CommLink16_PPLI_PoolEnum.h"
#include "extjson_uci/type/CommMADL_AircraftTypeEnum.h"
#include "extjson_uci/type/CommMADL_DataRateTypeEnum.h"
#include "extjson_uci/type/CommMADL_LinkStateEnum.h"
#include "extjson_uci/type/CommMADL_NetChangeOpEnum.h"
#include "extjson_uci/type/CommMADL_NetChangeStatusEnum.h"
#include "extjson_uci/type/CommMADL_NetLinkOpStateEnum.h"
#include "extjson_uci/type/CommMADL_NetLinkSearchModeEnum.h"
#include "extjson_uci/type/CommMADL_NodeDataValidityEnum.h"
#include "extjson_uci/type/CommMADL_SearchTypeEnum.h"
#include "extjson_uci/type/CommMADL_TimeSlotOE_PhaseTypeEnum.h"
#include "extjson_uci/type/CommMADL_TimeSlotTxPhaseTypeEnum.h"
#include "extjson_uci/type/CommMADL_TimeSourceEnum.h"
#include "extjson_uci/type/CommMADL_VoiceRxIndicatorTypeEnum.h"
#include "extjson_uci/type/CommModeEnum.h"
#include "extjson_uci/type/CommModulationTypeEnum.h"
#include "extjson_uci/type/CommPointingAssessmentEnum.h"
#include "extjson_uci/type/CommPointingRequestEnum.h"
#include "extjson_uci/type/CommRangeModeTypeEnum.h"
#include "extjson_uci/type/CommReceiverStateEnum.h"
#include "extjson_uci/type/CommRelayMessageOutputsEnum.h"
#include "extjson_uci/type/CommRelayStateEnum.h"
#include "extjson_uci/type/CommRequestActionEnum.h"
#include "extjson_uci/type/CommSATCOM_ServiceTypeEnum.h"
#include "extjson_uci/type/CommSINCGARS_FreqModeEnum.h"
#include "extjson_uci/type/CommSchedulingRequestApprovalStatusEnum.h"
#include "extjson_uci/type/CommSchedulingRequirementStateEnum.h"
#include "extjson_uci/type/CommSchedulingScopeEnum.h"
#include "extjson_uci/type/CommTerminalPlanActivationStateEnum.h"
#include "extjson_uci/type/CommTerminalPlanApprovalStatusEnum.h"
#include "extjson_uci/type/CommTransmitterStateEnum.h"
#include "extjson_uci/type/CommandProcessingStateEnum.h"
#include "extjson_uci/type/CommandStateEnum.h"
#include "extjson_uci/type/CommunicationsImpairmentEnum.h"
#include "extjson_uci/type/ComponentControlInterfacesEnum.h"
#include "extjson_uci/type/ComponentElementStateEnum.h"
#include "extjson_uci/type/ComponentSettingEnum.h"
#include "extjson_uci/type/ComponentStateCommandEnum.h"
#include "extjson_uci/type/ComponentStateEnum.h"
#include "extjson_uci/type/ComponentStatusRequestEnum.h"
#include "extjson_uci/type/ComponentTypeEnum.h"
#include "extjson_uci/type/ConfidenceLevelEnum.h"
#include "extjson_uci/type/ConflictStateEnum.h"
#include "extjson_uci/type/ConnectionStatusEnum.h"
#include "extjson_uci/type/ConsentEnum.h"
#include "extjson_uci/type/ConstrainedPlanIncorporationEnum.h"
#include "extjson_uci/type/ControlInterfaceEnum.h"
#include "extjson_uci/type/ControlRequestEnum.h"
#include "extjson_uci/type/ControlTypeEnum.h"
#include "extjson_uci/type/CoordinationRiskEnum.h"
#include "extjson_uci/type/CorrelationIndicatorEnum.h"
#include "extjson_uci/type/CovarianceMatrixCategoryEnum.h"
#include "extjson_uci/type/CoverageEffortEnum.h"
#include "extjson_uci/type/CrashServiceEnum.h"
#include "extjson_uci/type/CreationSourceEnum.h"
#include "extjson_uci/type/CryptoDS101_Enum.h"
#include "extjson_uci/type/CryptoKeyStatusEnum.h"
#include "extjson_uci/type/CryptoLoadStateEnum.h"
#include "extjson_uci/type/CryptoLoadTypeEnum.h"
#include "extjson_uci/type/CryptoOTAM_Enum.h"
#include "extjson_uci/type/CryptoRolloverActionEnum.h"
#include "extjson_uci/type/CryptoRolloverMethodEnum.h"
#include "extjson_uci/type/CryptoRolloverStateEnum.h"
#include "extjson_uci/type/CryptoSlotGroupStateEnum.h"
#include "extjson_uci/type/CryptoTypeEnum.h"
#include "extjson_uci/type/CyberTypeEnum.h"
#include "extjson_uci/type/DF_ModeEnum.h"
#include "extjson_uci/type/DLZ_RelationEnum.h"
#include "extjson_uci/type/DMPI_StateEnum.h"
#include "extjson_uci/type/DMPI_StoreStateEnum.h"
#include "extjson_uci/type/DVR_OperationEnum.h"
#include "extjson_uci/type/DamageCategoryEnum.h"
#include "extjson_uci/type/DamageCauseEnum.h"
#include "extjson_uci/type/DamageConfidenceEnum.h"
#include "extjson_uci/type/DamageEstimateContentsEnum.h"
#include "extjson_uci/type/DamageLevelEnum.h"
#include "extjson_uci/type/DamageObservationEnum.h"
#include "extjson_uci/type/DamageSignificanceEnum.h"
#include "extjson_uci/type/DamagedFunctionEnum.h"
#include "extjson_uci/type/DataPlanActivationStateEnum.h"
#include "extjson_uci/type/DataPlanApprovalStatusEnum.h"
#include "extjson_uci/type/DataStoreActionEnum.h"
#include "extjson_uci/type/DataUpdateRequestCategoryEnum.h"
#include "extjson_uci/type/DatalinkControlStatusEnum.h"
#include "extjson_uci/type/DefensiveJammerSystemStatusEnum.h"
#include "extjson_uci/type/DefensiveJammerSystemTypeEnum.h"
#include "extjson_uci/type/DepthContactEnum.h"
#include "extjson_uci/type/DesignationEnum.h"
#include "extjson_uci/type/DestinationCategoryEnum.h"
#include "extjson_uci/type/DisseminationStatusEnum.h"
#include "extjson_uci/type/DoorCommandEnum.h"
#include "extjson_uci/type/DoorStateEnum.h"
#include "extjson_uci/type/DownloadPriorityEnum.h"
#include "extjson_uci/type/DrogueCommandEnum.h"
#include "extjson_uci/type/DropRestrictionEnum.h"
#include "extjson_uci/type/DynamicImageProcessingEnum.h"
#include "extjson_uci/type/EA_ActivationEnum.h"
#include "extjson_uci/type/EA_IndicatorEnum.h"
#include "extjson_uci/type/EA_MessageOutputsEnum.h"
#include "extjson_uci/type/EA_ModeEnum.h"
#include "extjson_uci/type/EA_PointingEnum.h"
#include "extjson_uci/type/EOB_CorrelationTypeEnum.h"
#include "extjson_uci/type/EP_CommandedStateEnum.h"
#include "extjson_uci/type/EP_StateEnum.h"
#include "extjson_uci/type/EP_StatusEnum.h"
#include "extjson_uci/type/ESM_ActivationEnum.h"
#include "extjson_uci/type/ESM_DwellStateEnum.h"
#include "extjson_uci/type/ESM_DwellTypeEnum.h"
#include "extjson_uci/type/ESM_MessageOutputsEnum.h"
#include "extjson_uci/type/ESM_SubCapabilityEnum.h"
#include "extjson_uci/type/EW_FixEnum.h"
#include "extjson_uci/type/EW_MeasurementEnum.h"
#include "extjson_uci/type/EW_ParameterSourceEnum.h"
#include "extjson_uci/type/EffectMessageOutputsEnum.h"
#include "extjson_uci/type/EffectTypeEnum.h"
#include "extjson_uci/type/ElectronicWarfareRelationshipEnum.h"
#include "extjson_uci/type/ElevationScanStabilizationEnum.h"
#include "extjson_uci/type/ElevationVisibilityEnum.h"
#include "extjson_uci/type/EmconLevelEnum.h"
#include "extjson_uci/type/EmissionBalanceEnum.h"
#include "extjson_uci/type/EmitterUrgencyEnum.h"
#include "extjson_uci/type/EntityBasingEnum.h"
#include "extjson_uci/type/EntityDropPolicyEnum.h"
#include "extjson_uci/type/EntityFusionEligibilityEnum.h"
#include "extjson_uci/type/EntityFusionSimpleEligibilityEnum.h"
#include "extjson_uci/type/EntityManagementRequestAuthorityEnum.h"
#include "extjson_uci/type/EntityRemoveReasonEnum.h"
#include "extjson_uci/type/EntitySourceEnum.h"
#include "extjson_uci/type/EntityStatusEnum.h"
#include "extjson_uci/type/EnvironmentEnum.h"
#include "extjson_uci/type/EnvironmentPairingEnum.h"
#include "extjson_uci/type/EphemerisTypeEnum.h"
#include "extjson_uci/type/EqualityExpressionEnum.h"
#include "extjson_uci/type/EquipmentConditionEnum.h"
#include "extjson_uci/type/EstimationMessageEnum.h"
#include "extjson_uci/type/EventSeverityEnum.h"
#include "extjson_uci/type/ExerciseIdentityEnum.h"
#include "extjson_uci/type/ExternalCommandExecutionStateEnum.h"
#include "extjson_uci/type/ExternalDataRequestEnum.h"
#include "extjson_uci/type/FMOP_Enum.h"
#include "extjson_uci/type/FOR_Enum.h"
#include "extjson_uci/type/FailureGuidanceEnum.h"
#include "extjson_uci/type/FaultSeverityEnum.h"
#include "extjson_uci/type/FaultStateEnum.h"
#include "extjson_uci/type/FieldOfRegardTypeEnum.h"
#include "extjson_uci/type/FileDeclassificationEnum.h"
#include "extjson_uci/type/FileTypeEnum.h"
#include "extjson_uci/type/FilteredUnfilteredEnum.h"
#include "extjson_uci/type/FixedPointingEnum.h"
#include "extjson_uci/type/FlightCapabilityEnum.h"
#include "extjson_uci/type/FlightDeckStatusEnum.h"
#include "extjson_uci/type/FlightStageEnum.h"
#include "extjson_uci/type/FocalPlaneArrayNonUniformityCorrectionOffsetEnum.h"
#include "extjson_uci/type/FocalPlaneArrayNonUniformityCorrectionReferenceEnum.h"
#include "extjson_uci/type/FrameOriginEnum.h"
#include "extjson_uci/type/FrequencyAgilityPatternEnum.h"
#include "extjson_uci/type/FrequencyModulationVariationEnum.h"
#include "extjson_uci/type/FrequencyPatternPeriodicityEnum.h"
#include "extjson_uci/type/FrequencySwitchingEnum.h"
#include "extjson_uci/type/TLE_BaseType.h"
#include "extjson_uci/type/TLE_Type.h"
#include "extjson_uci/type/TLE_WithParametersType.h"
#include "extjson_uci/type/TaskCommandMDT.h"
#include "extjson_uci/type/TaskCommandMT.h"
#include "extjson_uci/type/TaskCommandStatusMDT.h"
#include "extjson_uci/type/TaskCommandStatusMT.h"
#include "extjson_uci/type/TaskCommandType.h"
#include "extjson_uci/type/TaskExecutionApprovalStatusMDT.h"
#include "extjson_uci/type/TaskExecutionApprovalStatusMT.h"
#include "extjson_uci/type/TaskID_InclusionType.h"
#include "extjson_uci/type/TaskID_Type.h"
#include "extjson_uci/type/TaskMDT.h"
#include "extjson_uci/type/TaskMT.h"
#include "extjson_uci/type/TaskPlanActivationType.h"
#include "extjson_uci/type/TaskPlanApprovalStatusMDT.h"
#include "extjson_uci/type/TaskPlanApprovalStatusMT.h"
#include "extjson_uci/type/TaskPlanCommandID_ChoiceType.h"
#include "extjson_uci/type/TaskPlanCommandID_Type.h"
#include "extjson_uci/type/TaskPlanCommandMDT.h"
#include "extjson_uci/type/TaskPlanCommandMT.h"
#include "extjson_uci/type/TaskPlanCommandStatusMDT.h"
#include "extjson_uci/type/TaskPlanCommandStatusMT.h"
#include "extjson_uci/type/TaskPlanConstraintType.h"
#include "extjson_uci/type/TaskPlanExecutionStateType.h"
#include "extjson_uci/type/TaskPlanExecutionStatusMDT.h"
#include "extjson_uci/type/TaskPlanExecutionStatusMT.h"
#include "extjson_uci/type/TaskPlanID_Type.h"
#include "extjson_uci/type/TaskPlanInputsType.h"
#include "extjson_uci/type/TaskPlanInvalidType.h"
#include "extjson_uci/type/TaskPlanMDT.h"
#include "extjson_uci/type/TaskPlanMT.h"
#include "extjson_uci/type/TaskPlanPartsType.h"
#include "extjson_uci/type/TaskPlanProcessDescriptionType.h"
#include "extjson_uci/type/TaskPlanProcessType.h"
#include "extjson_uci/type/TaskPlanStatusMDT.h"
#include "extjson_uci/type/TaskPlanStatusMT.h"
#include "extjson_uci/type/TaskPlanType.h"
#include "extjson_uci/type/TaskPlanValidationCommandMDT.h"
#include "extjson_uci/type/TaskPlanValidationCommandMT.h"
#include "extjson_uci/type/TaskPlanValidationCommandStatusMDT.h"
#include "extjson_uci/type/TaskPlanValidationCommandStatusMT.h"
#include "extjson_uci/type/TaskPlanValidationID_Type.h"
#include "extjson_uci/type/TaskPlanValidationInputsType.h"
#include "extjson_uci/type/TaskPlanValidationMDT.h"
#include "extjson_uci/type/TaskPlanValidationMT.h"
#include "extjson_uci/type/TaskPlanningResultType.h"
#include "extjson_uci/type/TaskPlanningStatusMDT.h"
#include "extjson_uci/type/TaskPlanningStatusMT.h"
#include "extjson_uci/type/TaskResponseType.h"
#include "extjson_uci/type/TaskStatusMDT.h"
#include "extjson_uci/type/TaskStatusMT.h"
#include "extjson_uci/type/TaskType.h"
#include "extjson_uci/type/TemperatureRangeType.h"
#include "extjson_uci/type/TemperatureStatusType.h"
#include "extjson_uci/type/ThirdBodyGravityType.h"
#include "extjson_uci/type/ThreadConfigurationRF_Type.h"
#include "extjson_uci/type/ThreatAssessmentMetricsType.h"
#include "extjson_uci/type/ThreatAssessmentProbabilityType.h"
#include "extjson_uci/type/ThreatAssessmentRequestType.h"
#include "extjson_uci/type/ThreatAssessmentSystemType.h"
#include "extjson_uci/type/ThreatExposureProbabilityType.h"
#include "extjson_uci/type/ThreatExposureType.h"
#include "extjson_uci/type/ThreatNominationAssessmentDataType.h"
#include "extjson_uci/type/ThreatNominationAssessmentRequestType.h"
#include "extjson_uci/type/ThreatNominationAssessmentType.h"
#include "extjson_uci/type/ThreatNominationResultType.h"
#include "extjson_uci/type/ThreatVulnerabilityByCapabilityType.h"
#include "extjson_uci/type/ThreatZoneType.h"
#include "extjson_uci/type/ThresholdOffOrbitTriggerDataType.h"
#include "extjson_uci/type/ThresholdOffRouteTriggerDataType.h"
#include "extjson_uci/type/ThresholdVulnerabilityType.h"
#include "extjson_uci/type/ThumbnailType.h"
#include "extjson_uci/type/TimeAndPolarDataType.h"
#include "extjson_uci/type/TimeAndPolarRecordType.h"
#include "extjson_uci/type/TimeCoverageType.h"
#include "extjson_uci/type/TimeErrorType.h"
#include "extjson_uci/type/TimeFunctionType.h"
#include "extjson_uci/type/TimeWindowType.h"
#include "extjson_uci/type/TimedZoneType.h"
#include "extjson_uci/type/TimingConstraintsType.h"
#include "extjson_uci/type/TraceabilityType.h"
#include "extjson_uci/type/TrackNumberOrEntityType.h"
#include "extjson_uci/type/TrackOptionsID_Type.h"
#include "extjson_uci/type/TrackingOpZoneFilterAreaType.h"
#include "extjson_uci/type/TransceiverType.h"
#include "extjson_uci/type/TransitionStatusType.h"
#include "extjson_uci/type/TurnGeometryChoiceType.h"
#include "extjson_uci/type/TurnPointType.h"
#include "extjson_uci/type/TurretCommandChoiceType.h"
#include "extjson_uci/type/TurretCommandMDT.h"
#include "extjson_uci/type/TurretCommandMT.h"
#include "extjson_uci/type/TurretCommandPositionType.h"
#include "extjson_uci/type/TurretCommandStatusMDT.h"
#include "extjson_uci/type/TurretCommandStatusMT.h"
#include "extjson_uci/type/TurretCommandType.h"
#include "extjson_uci/type/TurretReportDynamicPointingType.h"
#include "extjson_uci/type/TurretReportID_Type.h"
#include "extjson_uci/type/TurretReportMDT.h"
#include "extjson_uci/type/TurretReportMT.h"
#include "extjson_uci/type/TurretReportPointingType.h"
#include "extjson_uci/type/TurretStatusMDT.h"
#include "extjson_uci/type/TurretStatusMT.h"
#include "extjson_uci/type/TxBeamType.h"
#include "extjson_uci/type/UMID_AudioID_Type.h"
#include "extjson_uci/type/UMID_DataID_Type.h"
#include "extjson_uci/type/UMID_SystemID_Type.h"
#include "extjson_uci/type/UMID_VideoID_Type.h"
#include "extjson_uci/type/UnachievableRequirementType.h"
#include "extjson_uci/type/UnallocatedReasonType.h"
#include "extjson_uci/type/UncertaintyType.h"
#include "extjson_uci/type/UnitID_Type.h"
#include "extjson_uci/type/UnitIdentityType.h"
#include "extjson_uci/type/UnitType.h"
#include "extjson_uci/type/UnitVectorType.h"
#include "extjson_uci/type/UnsignedIntegerMinMaxType.h"
#include "extjson_uci/type/UserLinkStatusType.h"
#include "extjson_uci/type/VCM_DataType.h"
#include "extjson_uci/type/VCM_DragParametersType.h"
#include "extjson_uci/type/VCM_ForceModelOptionsType.h"
#include "extjson_uci/type/VCM_IntegratorSettingsType.h"
#include "extjson_uci/type/VCM_PropagatorType.h"
#include "extjson_uci/type/ValidationCommandBaseType.h"
#include "extjson_uci/type/ValidationCommandStatusBaseType.h"
#include "extjson_uci/type/ValidatorType.h"
#include "extjson_uci/type/ValveDataStatusType.h"
#include "extjson_uci/type/VariableSubsystemsType.h"
#include "extjson_uci/type/VehicleCommandDataType.h"
#include "extjson_uci/type/VehicleConfigurationType.h"
#include "extjson_uci/type/VehicleIdentificationType.h"
#include "extjson_uci/type/VehicleThreatAssessmentDataType.h"
#include "extjson_uci/type/VehicleThreatAssessmentRequestType.h"
#include "extjson_uci/type/VehicleThreatAssessmentType.h"
#include "extjson_uci/type/VehicleUniqueIdentifierType.h"
#include "extjson_uci/type/Velocity2D_Type.h"
#include "extjson_uci/type/Velocity2D_UncertaintyType.h"
#include "extjson_uci/type/Velocity3D_Type.h"
#include "extjson_uci/type/VelocityAccelerationCovarianceType.h"
#include "extjson_uci/type/VelocityOrientationCovarianceType.h"
#include "extjson_uci/type/VelocityVelocityCovarianceCartesianType.h"
#include "extjson_uci/type/VelocityVelocityCovarianceType.h"
#include "extjson_uci/type/VerboseStatusType.h"
#include "extjson_uci/type/VersionedID_Type.h"
#include "extjson_uci/type/VideoAugmentationParametersType.h"
#include "extjson_uci/type/VideoEncoderOutputType.h"
#include "extjson_uci/type/VideoEncoderSettingsType.h"
#include "extjson_uci/type/VideoOutputSettingsType.h"
#include "extjson_uci/type/VisMagParamsType.h"
#include "extjson_uci/type/VisualMagnitudeLimitsType.h"
#include "extjson_uci/type/VisualMagnitudeWithDeviationType.h"
#include "extjson_uci/type/VoiceControlType.h"
#include "extjson_uci/type/VolumeChoiceType.h"
#include "extjson_uci/type/VulnerabilityLevelsCombinedType.h"
#include "extjson_uci/type/VulnerabilityLevelsType.h"
#include "extjson_uci/type/VulnerabilityMetricsType.h"
#include "extjson_uci/type/WayPointPointChoiceType.h"
#include "extjson_uci/type/WayPointType.h"
#include "extjson_uci/type/WeaponEffectIndicatorsType.h"
#include "extjson_uci/type/WeaponRestrictionType.h"
#include "extjson_uci/type/WeaponStoreType.h"
#include "extjson_uci/type/WeaponTargetPairingChoiceType.h"
#include "extjson_uci/type/WeaponeeringLocationType.h"
#include "extjson_uci/type/WeaponeeringStoreType.h"
#include "extjson_uci/type/WeaponeeringTargetInfoType.h"
#include "extjson_uci/type/WeaponeeringTargetType.h"
#include "extjson_uci/type/WeaponeeringType.h"
#include "extjson_uci/type/WeatherAreaDataType.h"
#include "extjson_uci/type/WeatherAugmentationParametersType.h"
#include "extjson_uci/type/WeatherDataType.h"
#include "extjson_uci/type/WeatherDatasetID_Type.h"
#include "extjson_uci/type/WeatherDatasetMDT.h"
#include "extjson_uci/type/WeatherDatasetMT.h"
#include "extjson_uci/type/WeatherEffectsType.h"
#include "extjson_uci/type/WeatherMDT.h"
#include "extjson_uci/type/WeatherMT.h"
#include "extjson_uci/type/WeatherObservationMDT.h"
#include "extjson_uci/type/WeatherObservationMT.h"
#include "extjson_uci/type/WeatherRadarActivityMDT.h"
#include "extjson_uci/type/WeatherRadarActivityMT.h"
#include "extjson_uci/type/WeatherRadarActivityStatusDetailType.h"
#include "extjson_uci/type/WeatherRadarActivityType.h"
#include "extjson_uci/type/WeatherRadarCapabilityCommandType.h"
#include "extjson_uci/type/WeatherRadarCapabilityMDT.h"
#include "extjson_uci/type/WeatherRadarCapabilityMT.h"
#include "extjson_uci/type/WeatherRadarCapabilityStatusMDT.h"
#include "extjson_uci/type/WeatherRadarCapabilityStatusMT.h"
#include "extjson_uci/type/WeatherRadarCapabilityType.h"
#include "extjson_uci/type/WeatherRadarCellLocationType.h"
#include "extjson_uci/type/WeatherRadarCellSizeType.h"
#include "extjson_uci/type/WeatherRadarCellType.h"
#include "extjson_uci/type/WeatherRadarCommandMDT.h"
#include "extjson_uci/type/WeatherRadarCommandMT.h"
#include "extjson_uci/type/WeatherRadarCommandStatusMDT.h"
#include "extjson_uci/type/WeatherRadarCommandStatusMT.h"
#include "extjson_uci/type/WeatherRadarCommandType.h"
#include "extjson_uci/type/WeatherRadarObservationMDT.h"
#include "extjson_uci/type/WeatherRadarObservationMT.h"
#include "extjson_uci/type/WeatherRadarOptionsType.h"
#include "extjson_uci/type/WeatherRadarSettingsCommandMDT.h"
#include "extjson_uci/type/WeatherRadarSettingsCommandMT.h"
#include "extjson_uci/type/WeatherRadarSettingsCommandStatusMDT.h"
#include "extjson_uci/type/WeatherRadarSettingsCommandStatusMT.h"
#include "extjson_uci/type/WeatherRadarTaskType.h"
#include "extjson_uci/type/WeatherReportDataType.h"
#include "extjson_uci/type/WeatherReportGridDataType.h"
#include "extjson_uci/type/WeatherReportType.h"
#include "extjson_uci/type/WeatherWarningDataType.h"
#include "extjson_uci/type/WeekdayIntervalType.h"
#include "extjson_uci/type/Wideband_SOI_ParamsType.h"
#include "extjson_uci/type/WildcardElementType.h"
#include "extjson_uci/type/WindDataChoiceType.h"
#include "extjson_uci/type/WindDataType.h"
#include "extjson_uci/type/WindMagnitudeType.h"
#include "extjson_uci/type/WorkingEOB_ID_Type.h"
#include "extjson_uci/type/WorkingEOB_MDT.h"
#include "extjson_uci/type/WorkingEOB_MT.h"
#include "extjson_uci/type/WorkingEOB_RequestMDT.h"
#include "extjson_uci/type/WorkingEOB_RequestMT.h"
#include "extjson_uci/type/WorkingEOB_RequestStatusMDT.h"
#include "extjson_uci/type/WorkingEOB_RequestStatusMT.h"
#include "extjson_uci/type/WorkingEOB_SourceID_ChoiceType.h"
#include "extjson_uci/type/WorkingSOB_ID_Type.h"
#include "extjson_uci/type/WorkingSOB_MDT.h"
#include "extjson_uci/type/WorkingSOB_MT.h"
#include "extjson_uci/type/WorkingSOB_RequestMDT.h"
#include "extjson_uci/type/WorkingSOB_RequestMT.h"
#include "extjson_uci/type/WorkingSOB_RequestStatusMDT.h"
#include "extjson_uci/type/WorkingSOB_RequestStatusMT.h"
#include "extjson_uci/type/WorkingSOB_SourceID_ChoiceType.h"
#include "extjson_uci/type/Z_ChoiceType.h"
#include "extjson_uci/type/ZoneChoiceType.h"
#include "extjson_uci/type/ZoneExternalType.h"
#include "extjson_uci/type/ZoneInclusionType.h"
#include "extjson_uci/type/ZoneType.h"
#include "extjson_uci/type/ZoneViolationTriggerDataType.h"
#include "uci/base/accessorType.h"
#include "uci/type/AMTI_CapabilityEnum.h"
#include "uci/type/AMTI_MessageOutputsEnum.h"
#include "uci/type/AMTI_SubCapabilityEnum.h"
#include "uci/type/AO_CapabilityEnum.h"
#include "uci/type/AO_MessageOutputsEnum.h"
#include "uci/type/AS_IntegratorModeEnum.h"
#include "uci/type/AS_IntegratorStepModeEnum.h"
#include "uci/type/AS_PartialDerivativesEnum.h"
#include "uci/type/AccessEffortEnum.h"
#include "uci/type/AchievabilityEnum.h"
#include "uci/type/ActionMessageOutputsEnum.h"
#include "uci/type/ActionTypeEnum.h"
#include "uci/type/ActivityBasisEnum.h"
#include "uci/type/ActivityExecutionStatusEnum.h"
#include "uci/type/ActivityPlanPartsEnum.h"
#include "uci/type/ActivityStateEnum.h"
#include "uci/type/ActivitySubCategoryEnum.h"
#include "uci/type/ActivityTransitionEnum.h"
#include "uci/type/AirRaidStateEnum.h"
#include "uci/type/AirSampleCapabilityEnum.h"
#include "uci/type/AirSampleMessageOutputsEnum.h"
#include "uci/type/AirfieldStoresEnum.h"
#include "uci/type/AltitudeReferenceEnum.h"
#include "uci/type/AltitudeSourceEnum.h"
#include "uci/type/AmbiguityOrderingEnum.h"
#include "uci/type/AntennaTypeEnum.h"
#include "uci/type/ApproachConditionStatusEnum.h"
#include "uci/type/ApproachLightingEnum.h"
#include "uci/type/ApprovalRequirementEnum.h"
#include "uci/type/ApprovalResponseEnum.h"
#include "uci/type/ApprovalStateEnum.h"
#include "uci/type/ApprovalStatusEnum.h"
#include "uci/type/ArresterWiresEnum.h"
#include "uci/type/AssessmentStatusEnum.h"
#include "uci/type/AssessmentSuppressionEnum.h"
#include "uci/type/AssociatedAccessAssessmentInfoEnum.h"
#include "uci/type/AtmosphereModelEnum.h"
#include "uci/type/AutonomousActionStatusEnum.h"
#include "uci/type/AutopilotModeEnum.h"
#include "uci/type/BeamPowerModeEnum.h"
#include "uci/type/BeamWeightingEnum.h"
#include "uci/type/BehavioralChangeEnum.h"
#include "uci/type/BodyFaceEnum.h"
#include "uci/type/BodyReferenceEnum.h"
#include "uci/type/BrakingActionEnum.h"
#include "uci/type/COARPS_SAR_CollectionOptionsEnum.h"
#include "uci/type/COARPS_SMTI_CollectionOptionsEnum.h"
#include "uci/type/COMINT_DwellStateEnum.h"
#include "uci/type/COMINT_DwellTypeEnum.h"
#include "uci/type/COMINT_SubCapabilityEnum.h"
#include "uci/type/CSO_StateEnum.h"
#include "uci/type/CS_CapabilityEnum.h"
#include "uci/type/CS_KindEnum.h"
#include "uci/type/CS_PostureEnum.h"
#include "uci/type/CS_SensorPointingEnum.h"
#include "uci/type/CS_SensorTargetingEnum.h"
#include "uci/type/CS_SensorTypeEnum.h"
#include "uci/type/CTR_StateEnum.h"
#include "uci/type/CannotComplyEnum.h"
#include "uci/type/CapabilityAvailabilityEnum.h"
#include "uci/type/CapabilityCommandStateEnum.h"
#include "uci/type/CapabilityControlInterfacesEnum.h"
#include "uci/type/CapabilityCoverageAreaBasisEnum.h"
#include "uci/type/CapabilityCoverageAreaFactorEnum.h"
#include "uci/type/CapabilityInitiationEnum.h"
#include "uci/type/CapabilityTypeEnum.h"
#include "uci/type/CargoDeliveryCapabilityEnum.h"
#include "uci/type/CargoDeliverySubCapabilityEnum.h"
#include "uci/type/CargoPackagingEnum.h"
#include "uci/type/CelestialBodyEphemerisSourceEnum.h"
#include "uci/type/CelestialBodyNameEnum.h"
#include "uci/type/CharacterizationProductTypeEnum.h"
#include "uci/type/CharacterizationTypeEnum.h"
#include "uci/type/ClearIdentityValuesEnum.h"
#include "uci/type/ClimbOptimizationEnum.h"
#include "uci/type/CollectionObjectiveEnum.h"
#include "uci/type/CollectionPatternEnum.h"
#include "uci/type/CollectionPolicyEnum.h"
#include "uci/type/CommAcquisitionModeTypeEnum.h"
#include "uci/type/CommAllocationTransitionEnum.h"
#include "uci/type/CommAssetCategoryEnum.h"
#include "uci/type/CommAssetEstimationMessageEnum.h"
#include "uci/type/CommCDL_LinkFallbackStateEnum.h"
#include "uci/type/CommCDL_RemoteMessageProcessingEnum.h"
#include "uci/type/CommCapabilityEnum.h"
#include "uci/type/CommComsecModeTypeEnum.h"
#include "uci/type/CommComsecModeTypeRequestEnum.h"
#include "uci/type/CommConfigurationStateEnum.h"
#include "uci/type/CommConnectionCommandEnum.h"
#include "uci/type/CommConnectionStateEnum.h"
#include "uci/type/CommCountermeasureSetEnum.h"
#include "uci/type/CommDataDirectionFiltrationEnum.h"
#include "uci/type/CommDataFormatEnum.h"
#include "uci/type/CommIFDL_AcqControlEnum.h"
#include "uci/type/CommIFDL_CommModeEnum.h"
#include "uci/type/CommIFDL_FlightSizeEnum.h"
#include "uci/type/CommIFDL_TxRateEnum.h"
#include "uci/type/CommLink16EnhancedThroughputCodeRateEnum.h"
#include "uci/type/CommLink16InitialEntryGroupEnum.h"
#include "uci/type/CommLink16InterferenceProtModeEnum.h"
#include "uci/type/CommLink16RangeModeEnum.h"
#include "uci/type/CommLink16TransmitAntennaEnum.h"
#include "uci/type/CommLink16TransmitModeEnum.h"
#include "uci/type/CommLink16TxPackingLimitEnum.h"
#include "uci/type/CommLink16TxPowerSelectionEnum.h"
#include "uci/type/CommLink16_AdvanceSlotNotificationModeEnum.h"
#include "uci/type/CommLink16_PPLI_PoolEnum.h"
#include "uci/type/CommMADL_AircraftTypeEnum.h"
#include "uci/type/CommMADL_DataRateTypeEnum.h"
#include "uci/type/CommMADL_LinkStateEnum.h"
#include "uci/type/CommMADL_NetChangeOpEnum.h"
#include "uci/type/CommMADL_NetChangeStatusEnum.h"
#include "uci/type/CommMADL_NetLinkOpStateEnum.h"
#include "uci/type/CommMADL_NetLinkSearchModeEnum.h"
#include "uci/type/CommMADL_NodeDataValidityEnum.h"
#include "uci/type/CommMADL_SearchTypeEnum.h"
#include "uci/type/CommMADL_TimeSlotOE_PhaseTypeEnum.h"
#include "uci/type/CommMADL_TimeSlotTxPhaseTypeEnum.h"
#include "uci/type/CommMADL_TimeSourceEnum.h"
#include "uci/type/CommMADL_VoiceRxIndicatorTypeEnum.h"
#include "uci/type/CommModeEnum.h"
#include "uci/type/CommModulationTypeEnum.h"
#include "uci/type/CommPointingAssessmentEnum.h"
#include "uci/type/CommPointingRequestEnum.h"
#include "uci/type/CommRangeModeTypeEnum.h"
#include "uci/type/CommReceiverStateEnum.h"
#include "uci/type/CommRelayMessageOutputsEnum.h"
#include "uci/type/CommRelayStateEnum.h"
#include "uci/type/CommRequestActionEnum.h"
#include "uci/type/CommSATCOM_ServiceTypeEnum.h"
#include "uci/type/CommSINCGARS_FreqModeEnum.h"
#include "uci/type/CommSchedulingRequestApprovalStatusEnum.h"
#include "uci/type/CommSchedulingRequirementStateEnum.h"
#include "uci/type/CommSchedulingScopeEnum.h"
#include "uci/type/CommTerminalPlanActivationStateEnum.h"
#include "uci/type/CommTerminalPlanApprovalStatusEnum.h"
#include "uci/type/CommTransmitterStateEnum.h"
#include "uci/type/CommandProcessingStateEnum.h"
#include "uci/type/CommandStateEnum.h"
#include "uci/type/CommunicationsImpairmentEnum.h"
#include "uci/type/ComponentControlInterfacesEnum.h"
#include "uci/type/ComponentElementStateEnum.h"
#include "uci/type/ComponentSettingEnum.h"
#include "uci/type/ComponentStateCommandEnum.h"
#include "uci/type/ComponentStateEnum.h"
#include "uci/type/ComponentStatusRequestEnum.h"
#include "uci/type/ComponentTypeEnum.h"
#include "uci/type/ConfidenceLevelEnum.h"
#include "uci/type/ConflictStateEnum.h"
#include "uci/type/ConnectionStatusEnum.h"
#include "uci/type/ConsentEnum.h"
#include "uci/type/ConstrainedPlanIncorporationEnum.h"
#include "uci/type/ControlInterfaceEnum.h"
#include "uci/type/ControlRequestEnum.h"
#include "uci/type/ControlTypeEnum.h"
#include "uci/type/CoordinationRiskEnum.h"
#include "uci/type/CorrelationIndicatorEnum.h"
#include "uci/type/CovarianceMatrixCategoryEnum.h"
#include "uci/type/CoverageEffortEnum.h"
#include "uci/type/CrashServiceEnum.h"
#include "uci/type/CreationSourceEnum.h"
#include "uci/type/CryptoDS101_Enum.h"
#include "uci/type/CryptoKeyStatusEnum.h"
#include "uci/type/CryptoLoadStateEnum.h"
#include "uci/type/CryptoLoadTypeEnum.h"
#include "uci/type/CryptoOTAM_Enum.h"
#include "uci/type/CryptoRolloverActionEnum.h"
#include "uci/type/CryptoRolloverMethodEnum.h"
#include "uci/type/CryptoRolloverStateEnum.h"
#include "uci/type/CryptoSlotGroupStateEnum.h"
#include "uci/type/CryptoTypeEnum.h"
#include "uci/type/CyberTypeEnum.h"
#include "uci/type/DF_ModeEnum.h"
#include "uci/type/DLZ_RelationEnum.h"
#include "uci/type/DMPI_StateEnum.h"
#include "uci/type/DMPI_StoreStateEnum.h"
#include "uci/type/DVR_OperationEnum.h"
#include "uci/type/DamageCategoryEnum.h"
#include "uci/type/DamageCauseEnum.h"
#include "uci/type/DamageConfidenceEnum.h"
#include "uci/type/DamageEstimateContentsEnum.h"
#include "uci/type/DamageLevelEnum.h"
#include "uci/type/DamageObservationEnum.h"
#include "uci/type/DamageSignificanceEnum.h"
#include "uci/type/DamagedFunctionEnum.h"
#include "uci/type/DataPlanActivationStateEnum.h"
#include "uci/type/DataPlanApprovalStatusEnum.h"
#include "uci/type/DataStoreActionEnum.h"
#include "uci/type/DataUpdateRequestCategoryEnum.h"
#include "uci/type/DatalinkControlStatusEnum.h"
#include "uci/type/DefensiveJammerSystemStatusEnum.h"
#include "uci/type/DefensiveJammerSystemTypeEnum.h"
#include "uci/type/DepthContactEnum.h"
#include "uci/type/DesignationEnum.h"
#include "uci/type/DestinationCategoryEnum.h"
#include "uci/type/DisseminationStatusEnum.h"
#include "uci/type/DoorCommandEnum.h"
#include "uci/type/DoorStateEnum.h"
#include "uci/type/DownloadPriorityEnum.h"
#include "uci/type/DrogueCommandEnum.h"
#include "uci/type/DropRestrictionEnum.h"
#include "uci/type/DynamicImageProcessingEnum.h"
#include "uci/type/EA_ActivationEnum.h"
#include "uci/type/EA_IndicatorEnum.h"
#include "uci/type/EA_MessageOutputsEnum.h"
#include "uci/type/EA_ModeEnum.h"
#include "uci/type/EA_PointingEnum.h"
#include "uci/type/EOB_CorrelationTypeEnum.h"
#include "uci/type/EP_CommandedStateEnum.h"
#include "uci/type/EP_StateEnum.h"
#include "uci/type/EP_StatusEnum.h"
#include "uci/type/ESM_ActivationEnum.h"
#include "uci/type/ESM_DwellStateEnum.h"
#include "uci/type/ESM_DwellTypeEnum.h"
#include "uci/type/ESM_MessageOutputsEnum.h"
#include "uci/type/ESM_SubCapabilityEnum.h"
#include "uci/type/EW_FixEnum.h"
#include "uci/type/EW_MeasurementEnum.h"
#include "uci/type/EW_ParameterSourceEnum.h"
#include "uci/type/EffectMessageOutputsEnum.h"
#include "uci/type/EffectTypeEnum.h"
#include "uci/type/ElectronicWarfareRelationshipEnum.h"
#include "uci/type/ElevationScanStabilizationEnum.h"
#include "uci/type/ElevationVisibilityEnum.h"
#include "uci/type/EmconLevelEnum.h"
#include "uci/type/EmissionBalanceEnum.h"
#include "uci/type/EmitterUrgencyEnum.h"
#include "uci/type/EntityBasingEnum.h"
#include "uci/type/EntityDropPolicyEnum.h"
#include "uci/type/EntityFusionEligibilityEnum.h"
#include "uci/type/EntityFusionSimpleEligibilityEnum.h"
#include "uci/type/EntityManagementRequestAuthorityEnum.h"
#include "uci/type/EntityRemoveReasonEnum.h"
#include "uci/type/EntitySourceEnum.h"
#include "uci/type/EntityStatusEnum.h"
#include "uci/type/EnvironmentEnum.h"
#include "uci/type/EnvironmentPairingEnum.h"
#include "uci/type/EphemerisTypeEnum.h"
#include "uci/type/EqualityExpressionEnum.h"
#include "uci/type/EquipmentConditionEnum.h"
#include "uci/type/EstimationMessageEnum.h"
#include "uci/type/EventSeverityEnum.h"
#include "uci/type/ExerciseIdentityEnum.h"
#include "uci/type/ExternalCommandExecutionStateEnum.h"
#include "uci/type/ExternalDataRequestEnum.h"
#include "uci/type/FMOP_Enum.h"
#include "uci/type/FOR_Enum.h"
#include "uci/type/FailureGuidanceEnum.h"
#include "uci/type/FaultSeverityEnum.h"
#include "uci/type/FaultStateEnum.h"
#include "uci/type/FieldOfRegardTypeEnum.h"
#include "uci/type/FileDeclassificationEnum.h"
#include "uci/type/FileTypeEnum.h"
#include "uci/type/FilteredUnfilteredEnum.h"
#include "uci/type/FixedPointingEnum.h"
#include "uci/type/FlightCapabilityEnum.h"
#include "uci/type/FlightDeckStatusEnum.h"
#include "uci/type/FlightStageEnum.h"
#include "uci/type/FocalPlaneArrayNonUniformityCorrectionOffsetEnum.h"
#include "uci/type/FocalPlaneArrayNonUniformityCorrectionReferenceEnum.h"
#include "uci/type/FrameOriginEnum.h"
#include "uci/type/FrequencyAgilityPatternEnum.h"
#include "uci/type/FrequencyModulationVariationEnum.h"
#include "uci/type/FrequencyPatternPeriodicityEnum.h"
#include "uci/type/FrequencySwitchingEnum.h"
#include "uci/type/TLE_BaseType.h"
#include "uci/type/TLE_Type.h"
#include "uci/type/TLE_WithParametersType.h"
#include "uci/type/TaskCommandMDT.h"
#include "uci/type/TaskCommandMT.h"
#include "uci/type/TaskCommandStatusMDT.h"
#include "uci/type/TaskCommandStatusMT.h"
#include "uci/type/TaskCommandType.h"
#include "uci/type/TaskExecutionApprovalStatusMDT.h"
#include "uci/type/TaskExecutionApprovalStatusMT.h"
#include "uci/type/TaskID_InclusionType.h"
#include "uci/type/TaskID_Type.h"
#include "uci/type/TaskMDT.h"
#include "uci/type/TaskMT.h"
#include "uci/type/TaskPlanActivationType.h"
#include "uci/type/TaskPlanApprovalStatusMDT.h"
#include "uci/type/TaskPlanApprovalStatusMT.h"
#include "uci/type/TaskPlanCommandID_ChoiceType.h"
#include "uci/type/TaskPlanCommandID_Type.h"
#include "uci/type/TaskPlanCommandMDT.h"
#include "uci/type/TaskPlanCommandMT.h"
#include "uci/type/TaskPlanCommandStatusMDT.h"
#include "uci/type/TaskPlanCommandStatusMT.h"
#include "uci/type/TaskPlanConstraintType.h"
#include "uci/type/TaskPlanExecutionStateType.h"
#include "uci/type/TaskPlanExecutionStatusMDT.h"
#include "uci/type/TaskPlanExecutionStatusMT.h"
#include "uci/type/TaskPlanID_Type.h"
#include "uci/type/TaskPlanInputsType.h"
#include "uci/type/TaskPlanInvalidType.h"
#include "uci/type/TaskPlanMDT.h"
#include "uci/type/TaskPlanMT.h"
#include "uci/type/TaskPlanPartsType.h"
#include "uci/type/TaskPlanProcessDescriptionType.h"
#include "uci/type/TaskPlanProcessType.h"
#include "uci/type/TaskPlanStatusMDT.h"
#include "uci/type/TaskPlanStatusMT.h"
#include "uci/type/TaskPlanType.h"
#include "uci/type/TaskPlanValidationCommandMDT.h"
#include "uci/type/TaskPlanValidationCommandMT.h"
#include "uci/type/TaskPlanValidationCommandStatusMDT.h"
#include "uci/type/TaskPlanValidationCommandStatusMT.h"
#include "uci/type/TaskPlanValidationID_Type.h"
#include "uci/type/TaskPlanValidationInputsType.h"
#include "uci/type/TaskPlanValidationMDT.h"
#include "uci/type/TaskPlanValidationMT.h"
#include "uci/type/TaskPlanningResultType.h"
#include "uci/type/TaskPlanningStatusMDT.h"
#include "uci/type/TaskPlanningStatusMT.h"
#include "uci/type/TaskResponseType.h"
#include "uci/type/TaskStatusMDT.h"
#include "uci/type/TaskStatusMT.h"
#include "uci/type/TaskType.h"
#include "uci/type/TemperatureRangeType.h"
#include "uci/type/TemperatureStatusType.h"
#include "uci/type/ThirdBodyGravityType.h"
#include "uci/type/ThreadConfigurationRF_Type.h"
#include "uci/type/ThreatAssessmentMetricsType.h"
#include "uci/type/ThreatAssessmentProbabilityType.h"
#include "uci/type/ThreatAssessmentRequestType.h"
#include "uci/type/ThreatAssessmentSystemType.h"
#include "uci/type/ThreatExposureProbabilityType.h"
#include "uci/type/ThreatExposureType.h"
#include "uci/type/ThreatNominationAssessmentDataType.h"
#include "uci/type/ThreatNominationAssessmentRequestType.h"
#include "uci/type/ThreatNominationAssessmentType.h"
#include "uci/type/ThreatNominationResultType.h"
#include "uci/type/ThreatVulnerabilityByCapabilityType.h"
#include "uci/type/ThreatZoneType.h"
#include "uci/type/ThresholdOffOrbitTriggerDataType.h"
#include "uci/type/ThresholdOffRouteTriggerDataType.h"
#include "uci/type/ThresholdVulnerabilityType.h"
#include "uci/type/ThumbnailType.h"
#include "uci/type/TimeAndPolarDataType.h"
#include "uci/type/TimeAndPolarRecordType.h"
#include "uci/type/TimeCoverageType.h"
#include "uci/type/TimeErrorType.h"
#include "uci/type/TimeFunctionType.h"
#include "uci/type/TimeWindowType.h"
#include "uci/type/TimedZoneType.h"
#include "uci/type/TimingConstraintsType.h"
#include "uci/type/TraceabilityType.h"
#include "uci/type/TrackNumberOrEntityType.h"
#include "uci/type/TrackOptionsID_Type.h"
#include "uci/type/TrackingOpZoneFilterAreaType.h"
#include "uci/type/TransceiverType.h"
#include "uci/type/TransitionStatusType.h"
#include "uci/type/TurnGeometryChoiceType.h"
#include "uci/type/TurnPointType.h"
#include "uci/type/TurretCommandChoiceType.h"
#include "uci/type/TurretCommandMDT.h"
#include "uci/type/TurretCommandMT.h"
#include "uci/type/TurretCommandPositionType.h"
#include "uci/type/TurretCommandStatusMDT.h"
#include "uci/type/TurretCommandStatusMT.h"
#include "uci/type/TurretCommandType.h"
#include "uci/type/TurretReportDynamicPointingType.h"
#include "uci/type/TurretReportID_Type.h"
#include "uci/type/TurretReportMDT.h"
#include "uci/type/TurretReportMT.h"
#include "uci/type/TurretReportPointingType.h"
#include "uci/type/TurretStatusMDT.h"
#include "uci/type/TurretStatusMT.h"
#include "uci/type/TxBeamType.h"
#include "uci/type/UMID_AudioID_Type.h"
#include "uci/type/UMID_DataID_Type.h"
#include "uci/type/UMID_SystemID_Type.h"
#include "uci/type/UMID_VideoID_Type.h"
#include "uci/type/UnachievableRequirementType.h"
#include "uci/type/UnallocatedReasonType.h"
#include "uci/type/UncertaintyType.h"
#include "uci/type/UnitID_Type.h"
#include "uci/type/UnitIdentityType.h"
#include "uci/type/UnitType.h"
#include "uci/type/UnitVectorType.h"
#include "uci/type/UnsignedIntegerMinMaxType.h"
#include "uci/type/UserLinkStatusType.h"
#include "uci/type/VCM_DataType.h"
#include "uci/type/VCM_DragParametersType.h"
#include "uci/type/VCM_ForceModelOptionsType.h"
#include "uci/type/VCM_IntegratorSettingsType.h"
#include "uci/type/VCM_PropagatorType.h"
#include "uci/type/ValidationCommandBaseType.h"
#include "uci/type/ValidationCommandStatusBaseType.h"
#include "uci/type/ValidatorType.h"
#include "uci/type/ValveDataStatusType.h"
#include "uci/type/VariableSubsystemsType.h"
#include "uci/type/VehicleCommandDataType.h"
#include "uci/type/VehicleConfigurationType.h"
#include "uci/type/VehicleIdentificationType.h"
#include "uci/type/VehicleThreatAssessmentDataType.h"
#include "uci/type/VehicleThreatAssessmentRequestType.h"
#include "uci/type/VehicleThreatAssessmentType.h"
#include "uci/type/VehicleUniqueIdentifierType.h"
#include "uci/type/Velocity2D_Type.h"
#include "uci/type/Velocity2D_UncertaintyType.h"
#include "uci/type/Velocity3D_Type.h"
#include "uci/type/VelocityAccelerationCovarianceType.h"
#include "uci/type/VelocityOrientationCovarianceType.h"
#include "uci/type/VelocityVelocityCovarianceCartesianType.h"
#include "uci/type/VelocityVelocityCovarianceType.h"
#include "uci/type/VerboseStatusType.h"
#include "uci/type/VersionedID_Type.h"
#include "uci/type/VideoAugmentationParametersType.h"
#include "uci/type/VideoEncoderOutputType.h"
#include "uci/type/VideoEncoderSettingsType.h"
#include "uci/type/VideoOutputSettingsType.h"
#include "uci/type/VisMagParamsType.h"
#include "uci/type/VisualMagnitudeLimitsType.h"
#include "uci/type/VisualMagnitudeWithDeviationType.h"
#include "uci/type/VoiceControlType.h"
#include "uci/type/VolumeChoiceType.h"
#include "uci/type/VulnerabilityLevelsCombinedType.h"
#include "uci/type/VulnerabilityLevelsType.h"
#include "uci/type/VulnerabilityMetricsType.h"
#include "uci/type/WayPointPointChoiceType.h"
#include "uci/type/WayPointType.h"
#include "uci/type/WeaponEffectIndicatorsType.h"
#include "uci/type/WeaponRestrictionType.h"
#include "uci/type/WeaponStoreType.h"
#include "uci/type/WeaponTargetPairingChoiceType.h"
#include "uci/type/WeaponeeringLocationType.h"
#include "uci/type/WeaponeeringStoreType.h"
#include "uci/type/WeaponeeringTargetInfoType.h"
#include "uci/type/WeaponeeringTargetType.h"
#include "uci/type/WeaponeeringType.h"
#include "uci/type/WeatherAreaDataType.h"
#include "uci/type/WeatherAugmentationParametersType.h"
#include "uci/type/WeatherDataType.h"
#include "uci/type/WeatherDatasetID_Type.h"
#include "uci/type/WeatherDatasetMDT.h"
#include "uci/type/WeatherDatasetMT.h"
#include "uci/type/WeatherEffectsType.h"
#include "uci/type/WeatherMDT.h"
#include "uci/type/WeatherMT.h"
#include "uci/type/WeatherObservationMDT.h"
#include "uci/type/WeatherObservationMT.h"
#include "uci/type/WeatherRadarActivityMDT.h"
#include "uci/type/WeatherRadarActivityMT.h"
#include "uci/type/WeatherRadarActivityStatusDetailType.h"
#include "uci/type/WeatherRadarActivityType.h"
#include "uci/type/WeatherRadarCapabilityCommandType.h"
#include "uci/type/WeatherRadarCapabilityMDT.h"
#include "uci/type/WeatherRadarCapabilityMT.h"
#include "uci/type/WeatherRadarCapabilityStatusMDT.h"
#include "uci/type/WeatherRadarCapabilityStatusMT.h"
#include "uci/type/WeatherRadarCapabilityType.h"
#include "uci/type/WeatherRadarCellLocationType.h"
#include "uci/type/WeatherRadarCellSizeType.h"
#include "uci/type/WeatherRadarCellType.h"
#include "uci/type/WeatherRadarCommandMDT.h"
#include "uci/type/WeatherRadarCommandMT.h"
#include "uci/type/WeatherRadarCommandStatusMDT.h"
#include "uci/type/WeatherRadarCommandStatusMT.h"
#include "uci/type/WeatherRadarCommandType.h"
#include "uci/type/WeatherRadarObservationMDT.h"
#include "uci/type/WeatherRadarObservationMT.h"
#include "uci/type/WeatherRadarOptionsType.h"
#include "uci/type/WeatherRadarSettingsCommandMDT.h"
#include "uci/type/WeatherRadarSettingsCommandMT.h"
#include "uci/type/WeatherRadarSettingsCommandStatusMDT.h"
#include "uci/type/WeatherRadarSettingsCommandStatusMT.h"
#include "uci/type/WeatherRadarTaskType.h"
#include "uci/type/WeatherReportDataType.h"
#include "uci/type/WeatherReportGridDataType.h"
#include "uci/type/WeatherReportType.h"
#include "uci/type/WeatherWarningDataType.h"
#include "uci/type/WeekdayIntervalType.h"
#include "uci/type/Wideband_SOI_ParamsType.h"
#include "uci/type/WildcardElementType.h"
#include "uci/type/WindDataChoiceType.h"
#include "uci/type/WindDataType.h"
#include "uci/type/WindMagnitudeType.h"
#include "uci/type/WorkingEOB_ID_Type.h"
#include "uci/type/WorkingEOB_MDT.h"
#include "uci/type/WorkingEOB_MT.h"
#include "uci/type/WorkingEOB_RequestMDT.h"
#include "uci/type/WorkingEOB_RequestMT.h"
#include "uci/type/WorkingEOB_RequestStatusMDT.h"
#include "uci/type/WorkingEOB_RequestStatusMT.h"
#include "uci/type/WorkingEOB_SourceID_ChoiceType.h"
#include "uci/type/WorkingSOB_ID_Type.h"
#include "uci/type/WorkingSOB_MDT.h"
#include "uci/type/WorkingSOB_MT.h"
#include "uci/type/WorkingSOB_RequestMDT.h"
#include "uci/type/WorkingSOB_RequestMT.h"
#include "uci/type/WorkingSOB_RequestStatusMDT.h"
#include "uci/type/WorkingSOB_RequestStatusMT.h"
#include "uci/type/WorkingSOB_SourceID_ChoiceType.h"
#include "uci/type/Z_ChoiceType.h"
#include "uci/type/ZoneChoiceType.h"
#include "uci/type/ZoneExternalType.h"
#include "uci/type/ZoneInclusionType.h"
#include "uci/type/ZoneType.h"
#include "uci/type/ZoneViolationTriggerDataType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all base data types are declared */
namespace base {

bool extjson_uci::base::ExternalizerRead9::read(const boost::property_tree::ptree& propTree, uci::base::Accessor& accessor, std::string& nodeName, std::string& nsPrefix) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::taskCommandMDT:
      return extjson_uci::type::TaskCommandMDT::deserialize(propTree, dynamic_cast<uci::type::TaskCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskCommandMT:
      return extjson_uci::type::TaskCommandMT::deserialize(propTree, dynamic_cast<uci::type::TaskCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskCommandStatusMDT:
      return extjson_uci::type::TaskCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskCommandStatusMT:
      return extjson_uci::type::TaskCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskCommandType:
      return extjson_uci::type::TaskCommandType::deserialize(propTree, dynamic_cast<uci::type::TaskCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskExecutionApprovalStatusMDT:
      return extjson_uci::type::TaskExecutionApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskExecutionApprovalStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskExecutionApprovalStatusMT:
      return extjson_uci::type::TaskExecutionApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskExecutionApprovalStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskID_InclusionType:
      return extjson_uci::type::TaskID_InclusionType::deserialize(propTree, dynamic_cast<uci::type::TaskID_InclusionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskID_Type:
      return extjson_uci::type::TaskID_Type::deserialize(propTree, dynamic_cast<uci::type::TaskID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskMDT:
      return extjson_uci::type::TaskMDT::deserialize(propTree, dynamic_cast<uci::type::TaskMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskMT:
      return extjson_uci::type::TaskMT::deserialize(propTree, dynamic_cast<uci::type::TaskMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanActivationType:
      return extjson_uci::type::TaskPlanActivationType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanApprovalStatusMDT:
      return extjson_uci::type::TaskPlanApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanApprovalStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanApprovalStatusMT:
      return extjson_uci::type::TaskPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanCommandID_ChoiceType:
      return extjson_uci::type::TaskPlanCommandID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanCommandID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanCommandID_Type:
      return extjson_uci::type::TaskPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::TaskPlanCommandID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanCommandMDT:
      return extjson_uci::type::TaskPlanCommandMDT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanCommandMT:
      return extjson_uci::type::TaskPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanCommandStatusMDT:
      return extjson_uci::type::TaskPlanCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanCommandStatusMT:
      return extjson_uci::type::TaskPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanConstraintType:
      return extjson_uci::type::TaskPlanConstraintType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanExecutionStateType:
      return extjson_uci::type::TaskPlanExecutionStateType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanExecutionStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanExecutionStatusMDT:
      return extjson_uci::type::TaskPlanExecutionStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanExecutionStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanExecutionStatusMT:
      return extjson_uci::type::TaskPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanID_Type:
      return extjson_uci::type::TaskPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::TaskPlanID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanInputsType:
      return extjson_uci::type::TaskPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanInvalidType:
      return extjson_uci::type::TaskPlanInvalidType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanInvalidType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanMDT:
      return extjson_uci::type::TaskPlanMDT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanMT:
      return extjson_uci::type::TaskPlanMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanningResultType:
      return extjson_uci::type::TaskPlanningResultType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanningResultType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanningStatusMDT:
      return extjson_uci::type::TaskPlanningStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanningStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanningStatusMT:
      return extjson_uci::type::TaskPlanningStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanningStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanPartsType:
      return extjson_uci::type::TaskPlanPartsType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanPartsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanProcessDescriptionType:
      return extjson_uci::type::TaskPlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanProcessType:
      return extjson_uci::type::TaskPlanProcessType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanProcessType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanStatusMDT:
      return extjson_uci::type::TaskPlanStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanStatusMT:
      return extjson_uci::type::TaskPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanType:
      return extjson_uci::type::TaskPlanType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanValidationCommandMDT:
      return extjson_uci::type::TaskPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanValidationCommandMT:
      return extjson_uci::type::TaskPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanValidationCommandStatusMDT:
      return extjson_uci::type::TaskPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanValidationCommandStatusMT:
      return extjson_uci::type::TaskPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanValidationID_Type:
      return extjson_uci::type::TaskPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::TaskPlanValidationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanValidationInputsType:
      return extjson_uci::type::TaskPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanValidationInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanValidationMDT:
      return extjson_uci::type::TaskPlanValidationMDT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanValidationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskPlanValidationMT:
      return extjson_uci::type::TaskPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanValidationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskResponseType:
      return extjson_uci::type::TaskResponseType::deserialize(propTree, dynamic_cast<uci::type::TaskResponseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskStatusMDT:
      return extjson_uci::type::TaskStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskStatusMT:
      return extjson_uci::type::TaskStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskType:
      return extjson_uci::type::TaskType::deserialize(propTree, dynamic_cast<uci::type::TaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::temperatureRangeType:
      return extjson_uci::type::TemperatureRangeType::deserialize(propTree, dynamic_cast<uci::type::TemperatureRangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::temperatureStatusType:
      return extjson_uci::type::TemperatureStatusType::deserialize(propTree, dynamic_cast<uci::type::TemperatureStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::thirdBodyGravityType:
      return extjson_uci::type::ThirdBodyGravityType::deserialize(propTree, dynamic_cast<uci::type::ThirdBodyGravityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threadConfigurationRF_Type:
      return extjson_uci::type::ThreadConfigurationRF_Type::deserialize(propTree, dynamic_cast<uci::type::ThreadConfigurationRF_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatAssessmentMetricsType:
      return extjson_uci::type::ThreatAssessmentMetricsType::deserialize(propTree, dynamic_cast<uci::type::ThreatAssessmentMetricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatAssessmentProbabilityType:
      return extjson_uci::type::ThreatAssessmentProbabilityType::deserialize(propTree, dynamic_cast<uci::type::ThreatAssessmentProbabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatAssessmentRequestType:
      return extjson_uci::type::ThreatAssessmentRequestType::deserialize(propTree, dynamic_cast<uci::type::ThreatAssessmentRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatAssessmentSystemType:
      return extjson_uci::type::ThreatAssessmentSystemType::deserialize(propTree, dynamic_cast<uci::type::ThreatAssessmentSystemType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatExposureProbabilityType:
      return extjson_uci::type::ThreatExposureProbabilityType::deserialize(propTree, dynamic_cast<uci::type::ThreatExposureProbabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatExposureType:
      return extjson_uci::type::ThreatExposureType::deserialize(propTree, dynamic_cast<uci::type::ThreatExposureType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatNominationAssessmentDataType:
      return extjson_uci::type::ThreatNominationAssessmentDataType::deserialize(propTree, dynamic_cast<uci::type::ThreatNominationAssessmentDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatNominationAssessmentRequestType:
      return extjson_uci::type::ThreatNominationAssessmentRequestType::deserialize(propTree, dynamic_cast<uci::type::ThreatNominationAssessmentRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatNominationAssessmentType:
      return extjson_uci::type::ThreatNominationAssessmentType::deserialize(propTree, dynamic_cast<uci::type::ThreatNominationAssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatNominationResultType:
      return extjson_uci::type::ThreatNominationResultType::deserialize(propTree, dynamic_cast<uci::type::ThreatNominationResultType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatVulnerabilityByCapabilityType:
      return extjson_uci::type::ThreatVulnerabilityByCapabilityType::deserialize(propTree, dynamic_cast<uci::type::ThreatVulnerabilityByCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatZoneType:
      return extjson_uci::type::ThreatZoneType::deserialize(propTree, dynamic_cast<uci::type::ThreatZoneType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::thresholdOffOrbitTriggerDataType:
      return extjson_uci::type::ThresholdOffOrbitTriggerDataType::deserialize(propTree, dynamic_cast<uci::type::ThresholdOffOrbitTriggerDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::thresholdOffRouteTriggerDataType:
      return extjson_uci::type::ThresholdOffRouteTriggerDataType::deserialize(propTree, dynamic_cast<uci::type::ThresholdOffRouteTriggerDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::thresholdVulnerabilityType:
      return extjson_uci::type::ThresholdVulnerabilityType::deserialize(propTree, dynamic_cast<uci::type::ThresholdVulnerabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::thumbnailType:
      return extjson_uci::type::ThumbnailType::deserialize(propTree, dynamic_cast<uci::type::ThumbnailType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::timeAndPolarDataType:
      return extjson_uci::type::TimeAndPolarDataType::deserialize(propTree, dynamic_cast<uci::type::TimeAndPolarDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::timeAndPolarRecordType:
      return extjson_uci::type::TimeAndPolarRecordType::deserialize(propTree, dynamic_cast<uci::type::TimeAndPolarRecordType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::timeCoverageType:
      return extjson_uci::type::TimeCoverageType::deserialize(propTree, dynamic_cast<uci::type::TimeCoverageType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::timedZoneType:
      return extjson_uci::type::TimedZoneType::deserialize(propTree, dynamic_cast<uci::type::TimedZoneType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::timeErrorType:
      return extjson_uci::type::TimeErrorType::deserialize(propTree, dynamic_cast<uci::type::TimeErrorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::timeFunctionType:
      return extjson_uci::type::TimeFunctionType::deserialize(propTree, dynamic_cast<uci::type::TimeFunctionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::timeWindowType:
      return extjson_uci::type::TimeWindowType::deserialize(propTree, dynamic_cast<uci::type::TimeWindowType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::timingConstraintsType:
      return extjson_uci::type::TimingConstraintsType::deserialize(propTree, dynamic_cast<uci::type::TimingConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tLE_BaseType:
      return extjson_uci::type::TLE_BaseType::deserialize(propTree, dynamic_cast<uci::type::TLE_BaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tLE_Type:
      return extjson_uci::type::TLE_Type::deserialize(propTree, dynamic_cast<uci::type::TLE_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tLE_WithParametersType:
      return extjson_uci::type::TLE_WithParametersType::deserialize(propTree, dynamic_cast<uci::type::TLE_WithParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::traceabilityType:
      return extjson_uci::type::TraceabilityType::deserialize(propTree, dynamic_cast<uci::type::TraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::trackingOpZoneFilterAreaType:
      return extjson_uci::type::TrackingOpZoneFilterAreaType::deserialize(propTree, dynamic_cast<uci::type::TrackingOpZoneFilterAreaType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::trackNumberOrEntityType:
      return extjson_uci::type::TrackNumberOrEntityType::deserialize(propTree, dynamic_cast<uci::type::TrackNumberOrEntityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::trackOptionsID_Type:
      return extjson_uci::type::TrackOptionsID_Type::deserialize(propTree, dynamic_cast<uci::type::TrackOptionsID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::transceiverType:
      return extjson_uci::type::TransceiverType::deserialize(propTree, dynamic_cast<uci::type::TransceiverType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::transitionStatusType:
      return extjson_uci::type::TransitionStatusType::deserialize(propTree, dynamic_cast<uci::type::TransitionStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turnGeometryChoiceType:
      return extjson_uci::type::TurnGeometryChoiceType::deserialize(propTree, dynamic_cast<uci::type::TurnGeometryChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turnPointType:
      return extjson_uci::type::TurnPointType::deserialize(propTree, dynamic_cast<uci::type::TurnPointType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turretCommandChoiceType:
      return extjson_uci::type::TurretCommandChoiceType::deserialize(propTree, dynamic_cast<uci::type::TurretCommandChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turretCommandMDT:
      return extjson_uci::type::TurretCommandMDT::deserialize(propTree, dynamic_cast<uci::type::TurretCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turretCommandMT:
      return extjson_uci::type::TurretCommandMT::deserialize(propTree, dynamic_cast<uci::type::TurretCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turretCommandPositionType:
      return extjson_uci::type::TurretCommandPositionType::deserialize(propTree, dynamic_cast<uci::type::TurretCommandPositionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turretCommandStatusMDT:
      return extjson_uci::type::TurretCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TurretCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turretCommandStatusMT:
      return extjson_uci::type::TurretCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::TurretCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turretCommandType:
      return extjson_uci::type::TurretCommandType::deserialize(propTree, dynamic_cast<uci::type::TurretCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turretReportDynamicPointingType:
      return extjson_uci::type::TurretReportDynamicPointingType::deserialize(propTree, dynamic_cast<uci::type::TurretReportDynamicPointingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turretReportID_Type:
      return extjson_uci::type::TurretReportID_Type::deserialize(propTree, dynamic_cast<uci::type::TurretReportID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turretReportMDT:
      return extjson_uci::type::TurretReportMDT::deserialize(propTree, dynamic_cast<uci::type::TurretReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turretReportMT:
      return extjson_uci::type::TurretReportMT::deserialize(propTree, dynamic_cast<uci::type::TurretReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turretReportPointingType:
      return extjson_uci::type::TurretReportPointingType::deserialize(propTree, dynamic_cast<uci::type::TurretReportPointingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turretStatusMDT:
      return extjson_uci::type::TurretStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TurretStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turretStatusMT:
      return extjson_uci::type::TurretStatusMT::deserialize(propTree, dynamic_cast<uci::type::TurretStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::txBeamType:
      return extjson_uci::type::TxBeamType::deserialize(propTree, dynamic_cast<uci::type::TxBeamType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::uMID_AudioID_Type:
      return extjson_uci::type::UMID_AudioID_Type::deserialize(propTree, dynamic_cast<uci::type::UMID_AudioID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::uMID_DataID_Type:
      return extjson_uci::type::UMID_DataID_Type::deserialize(propTree, dynamic_cast<uci::type::UMID_DataID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::uMID_SystemID_Type:
      return extjson_uci::type::UMID_SystemID_Type::deserialize(propTree, dynamic_cast<uci::type::UMID_SystemID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::uMID_VideoID_Type:
      return extjson_uci::type::UMID_VideoID_Type::deserialize(propTree, dynamic_cast<uci::type::UMID_VideoID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::unachievableRequirementType:
      return extjson_uci::type::UnachievableRequirementType::deserialize(propTree, dynamic_cast<uci::type::UnachievableRequirementType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::unallocatedReasonType:
      return extjson_uci::type::UnallocatedReasonType::deserialize(propTree, dynamic_cast<uci::type::UnallocatedReasonType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::uncertaintyType:
      return extjson_uci::type::UncertaintyType::deserialize(propTree, dynamic_cast<uci::type::UncertaintyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::unitID_Type:
      return extjson_uci::type::UnitID_Type::deserialize(propTree, dynamic_cast<uci::type::UnitID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::unitIdentityType:
      return extjson_uci::type::UnitIdentityType::deserialize(propTree, dynamic_cast<uci::type::UnitIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::unitType:
      return extjson_uci::type::UnitType::deserialize(propTree, dynamic_cast<uci::type::UnitType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::unitVectorType:
      return extjson_uci::type::UnitVectorType::deserialize(propTree, dynamic_cast<uci::type::UnitVectorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::unsignedIntegerMinMaxType:
      return extjson_uci::type::UnsignedIntegerMinMaxType::deserialize(propTree, dynamic_cast<uci::type::UnsignedIntegerMinMaxType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::userLinkStatusType:
      return extjson_uci::type::UserLinkStatusType::deserialize(propTree, dynamic_cast<uci::type::UserLinkStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::validationCommandBaseType:
      return extjson_uci::type::ValidationCommandBaseType::deserialize(propTree, dynamic_cast<uci::type::ValidationCommandBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::validationCommandStatusBaseType:
      return extjson_uci::type::ValidationCommandStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::ValidationCommandStatusBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::validatorType:
      return extjson_uci::type::ValidatorType::deserialize(propTree, dynamic_cast<uci::type::ValidatorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::valveDataStatusType:
      return extjson_uci::type::ValveDataStatusType::deserialize(propTree, dynamic_cast<uci::type::ValveDataStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::variableSubsystemsType:
      return extjson_uci::type::VariableSubsystemsType::deserialize(propTree, dynamic_cast<uci::type::VariableSubsystemsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vCM_DataType:
      return extjson_uci::type::VCM_DataType::deserialize(propTree, dynamic_cast<uci::type::VCM_DataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vCM_DragParametersType:
      return extjson_uci::type::VCM_DragParametersType::deserialize(propTree, dynamic_cast<uci::type::VCM_DragParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vCM_ForceModelOptionsType:
      return extjson_uci::type::VCM_ForceModelOptionsType::deserialize(propTree, dynamic_cast<uci::type::VCM_ForceModelOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vCM_IntegratorSettingsType:
      return extjson_uci::type::VCM_IntegratorSettingsType::deserialize(propTree, dynamic_cast<uci::type::VCM_IntegratorSettingsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vCM_PropagatorType:
      return extjson_uci::type::VCM_PropagatorType::deserialize(propTree, dynamic_cast<uci::type::VCM_PropagatorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vehicleCommandDataType:
      return extjson_uci::type::VehicleCommandDataType::deserialize(propTree, dynamic_cast<uci::type::VehicleCommandDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vehicleConfigurationType:
      return extjson_uci::type::VehicleConfigurationType::deserialize(propTree, dynamic_cast<uci::type::VehicleConfigurationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vehicleIdentificationType:
      return extjson_uci::type::VehicleIdentificationType::deserialize(propTree, dynamic_cast<uci::type::VehicleIdentificationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vehicleThreatAssessmentDataType:
      return extjson_uci::type::VehicleThreatAssessmentDataType::deserialize(propTree, dynamic_cast<uci::type::VehicleThreatAssessmentDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vehicleThreatAssessmentRequestType:
      return extjson_uci::type::VehicleThreatAssessmentRequestType::deserialize(propTree, dynamic_cast<uci::type::VehicleThreatAssessmentRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vehicleThreatAssessmentType:
      return extjson_uci::type::VehicleThreatAssessmentType::deserialize(propTree, dynamic_cast<uci::type::VehicleThreatAssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vehicleUniqueIdentifierType:
      return extjson_uci::type::VehicleUniqueIdentifierType::deserialize(propTree, dynamic_cast<uci::type::VehicleUniqueIdentifierType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::velocity2D_Type:
      return extjson_uci::type::Velocity2D_Type::deserialize(propTree, dynamic_cast<uci::type::Velocity2D_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::velocity2D_UncertaintyType:
      return extjson_uci::type::Velocity2D_UncertaintyType::deserialize(propTree, dynamic_cast<uci::type::Velocity2D_UncertaintyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::velocity3D_Type:
      return extjson_uci::type::Velocity3D_Type::deserialize(propTree, dynamic_cast<uci::type::Velocity3D_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::velocityAccelerationCovarianceType:
      return extjson_uci::type::VelocityAccelerationCovarianceType::deserialize(propTree, dynamic_cast<uci::type::VelocityAccelerationCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::velocityOrientationCovarianceType:
      return extjson_uci::type::VelocityOrientationCovarianceType::deserialize(propTree, dynamic_cast<uci::type::VelocityOrientationCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::velocityVelocityCovarianceCartesianType:
      return extjson_uci::type::VelocityVelocityCovarianceCartesianType::deserialize(propTree, dynamic_cast<uci::type::VelocityVelocityCovarianceCartesianType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::velocityVelocityCovarianceType:
      return extjson_uci::type::VelocityVelocityCovarianceType::deserialize(propTree, dynamic_cast<uci::type::VelocityVelocityCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::verboseStatusType:
      return extjson_uci::type::VerboseStatusType::deserialize(propTree, dynamic_cast<uci::type::VerboseStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::versionedID_Type:
      return extjson_uci::type::VersionedID_Type::deserialize(propTree, dynamic_cast<uci::type::VersionedID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::videoAugmentationParametersType:
      return extjson_uci::type::VideoAugmentationParametersType::deserialize(propTree, dynamic_cast<uci::type::VideoAugmentationParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::videoEncoderOutputType:
      return extjson_uci::type::VideoEncoderOutputType::deserialize(propTree, dynamic_cast<uci::type::VideoEncoderOutputType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::videoEncoderSettingsType:
      return extjson_uci::type::VideoEncoderSettingsType::deserialize(propTree, dynamic_cast<uci::type::VideoEncoderSettingsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::videoOutputSettingsType:
      return extjson_uci::type::VideoOutputSettingsType::deserialize(propTree, dynamic_cast<uci::type::VideoOutputSettingsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::visMagParamsType:
      return extjson_uci::type::VisMagParamsType::deserialize(propTree, dynamic_cast<uci::type::VisMagParamsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::visualMagnitudeLimitsType:
      return extjson_uci::type::VisualMagnitudeLimitsType::deserialize(propTree, dynamic_cast<uci::type::VisualMagnitudeLimitsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::visualMagnitudeWithDeviationType:
      return extjson_uci::type::VisualMagnitudeWithDeviationType::deserialize(propTree, dynamic_cast<uci::type::VisualMagnitudeWithDeviationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::voiceControlType:
      return extjson_uci::type::VoiceControlType::deserialize(propTree, dynamic_cast<uci::type::VoiceControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::volumeChoiceType:
      return extjson_uci::type::VolumeChoiceType::deserialize(propTree, dynamic_cast<uci::type::VolumeChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vulnerabilityLevelsCombinedType:
      return extjson_uci::type::VulnerabilityLevelsCombinedType::deserialize(propTree, dynamic_cast<uci::type::VulnerabilityLevelsCombinedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vulnerabilityLevelsType:
      return extjson_uci::type::VulnerabilityLevelsType::deserialize(propTree, dynamic_cast<uci::type::VulnerabilityLevelsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vulnerabilityMetricsType:
      return extjson_uci::type::VulnerabilityMetricsType::deserialize(propTree, dynamic_cast<uci::type::VulnerabilityMetricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::wayPointPointChoiceType:
      return extjson_uci::type::WayPointPointChoiceType::deserialize(propTree, dynamic_cast<uci::type::WayPointPointChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::wayPointType:
      return extjson_uci::type::WayPointType::deserialize(propTree, dynamic_cast<uci::type::WayPointType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weaponeeringLocationType:
      return extjson_uci::type::WeaponeeringLocationType::deserialize(propTree, dynamic_cast<uci::type::WeaponeeringLocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weaponeeringStoreType:
      return extjson_uci::type::WeaponeeringStoreType::deserialize(propTree, dynamic_cast<uci::type::WeaponeeringStoreType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weaponeeringTargetInfoType:
      return extjson_uci::type::WeaponeeringTargetInfoType::deserialize(propTree, dynamic_cast<uci::type::WeaponeeringTargetInfoType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weaponeeringTargetType:
      return extjson_uci::type::WeaponeeringTargetType::deserialize(propTree, dynamic_cast<uci::type::WeaponeeringTargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weaponeeringType:
      return extjson_uci::type::WeaponeeringType::deserialize(propTree, dynamic_cast<uci::type::WeaponeeringType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weaponEffectIndicatorsType:
      return extjson_uci::type::WeaponEffectIndicatorsType::deserialize(propTree, dynamic_cast<uci::type::WeaponEffectIndicatorsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weaponRestrictionType:
      return extjson_uci::type::WeaponRestrictionType::deserialize(propTree, dynamic_cast<uci::type::WeaponRestrictionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weaponStoreType:
      return extjson_uci::type::WeaponStoreType::deserialize(propTree, dynamic_cast<uci::type::WeaponStoreType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weaponTargetPairingChoiceType:
      return extjson_uci::type::WeaponTargetPairingChoiceType::deserialize(propTree, dynamic_cast<uci::type::WeaponTargetPairingChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherAreaDataType:
      return extjson_uci::type::WeatherAreaDataType::deserialize(propTree, dynamic_cast<uci::type::WeatherAreaDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherAugmentationParametersType:
      return extjson_uci::type::WeatherAugmentationParametersType::deserialize(propTree, dynamic_cast<uci::type::WeatherAugmentationParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherDatasetID_Type:
      return extjson_uci::type::WeatherDatasetID_Type::deserialize(propTree, dynamic_cast<uci::type::WeatherDatasetID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherDatasetMDT:
      return extjson_uci::type::WeatherDatasetMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherDatasetMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherDatasetMT:
      return extjson_uci::type::WeatherDatasetMT::deserialize(propTree, dynamic_cast<uci::type::WeatherDatasetMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherDataType:
      return extjson_uci::type::WeatherDataType::deserialize(propTree, dynamic_cast<uci::type::WeatherDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherEffectsType:
      return extjson_uci::type::WeatherEffectsType::deserialize(propTree, dynamic_cast<uci::type::WeatherEffectsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherMDT:
      return extjson_uci::type::WeatherMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherMT:
      return extjson_uci::type::WeatherMT::deserialize(propTree, dynamic_cast<uci::type::WeatherMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherObservationMDT:
      return extjson_uci::type::WeatherObservationMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherObservationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherObservationMT:
      return extjson_uci::type::WeatherObservationMT::deserialize(propTree, dynamic_cast<uci::type::WeatherObservationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarActivityMDT:
      return extjson_uci::type::WeatherRadarActivityMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarActivityMT:
      return extjson_uci::type::WeatherRadarActivityMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarActivityStatusDetailType:
      return extjson_uci::type::WeatherRadarActivityStatusDetailType::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarActivityStatusDetailType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarActivityType:
      return extjson_uci::type::WeatherRadarActivityType::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarCapabilityCommandType:
      return extjson_uci::type::WeatherRadarCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarCapabilityMDT:
      return extjson_uci::type::WeatherRadarCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarCapabilityMT:
      return extjson_uci::type::WeatherRadarCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarCapabilityStatusMDT:
      return extjson_uci::type::WeatherRadarCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarCapabilityStatusMT:
      return extjson_uci::type::WeatherRadarCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarCapabilityType:
      return extjson_uci::type::WeatherRadarCapabilityType::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarCellLocationType:
      return extjson_uci::type::WeatherRadarCellLocationType::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCellLocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarCellSizeType:
      return extjson_uci::type::WeatherRadarCellSizeType::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCellSizeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarCellType:
      return extjson_uci::type::WeatherRadarCellType::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCellType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarCommandMDT:
      return extjson_uci::type::WeatherRadarCommandMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarCommandMT:
      return extjson_uci::type::WeatherRadarCommandMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarCommandStatusMDT:
      return extjson_uci::type::WeatherRadarCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarCommandStatusMT:
      return extjson_uci::type::WeatherRadarCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarCommandType:
      return extjson_uci::type::WeatherRadarCommandType::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarObservationMDT:
      return extjson_uci::type::WeatherRadarObservationMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarObservationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarObservationMT:
      return extjson_uci::type::WeatherRadarObservationMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarObservationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarOptionsType:
      return extjson_uci::type::WeatherRadarOptionsType::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarSettingsCommandMDT:
      return extjson_uci::type::WeatherRadarSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarSettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarSettingsCommandMT:
      return extjson_uci::type::WeatherRadarSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarSettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarSettingsCommandStatusMDT:
      return extjson_uci::type::WeatherRadarSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarSettingsCommandStatusMT:
      return extjson_uci::type::WeatherRadarSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarTaskType:
      return extjson_uci::type::WeatherRadarTaskType::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarTaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherReportDataType:
      return extjson_uci::type::WeatherReportDataType::deserialize(propTree, dynamic_cast<uci::type::WeatherReportDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherReportGridDataType:
      return extjson_uci::type::WeatherReportGridDataType::deserialize(propTree, dynamic_cast<uci::type::WeatherReportGridDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherReportType:
      return extjson_uci::type::WeatherReportType::deserialize(propTree, dynamic_cast<uci::type::WeatherReportType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherWarningDataType:
      return extjson_uci::type::WeatherWarningDataType::deserialize(propTree, dynamic_cast<uci::type::WeatherWarningDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weekdayIntervalType:
      return extjson_uci::type::WeekdayIntervalType::deserialize(propTree, dynamic_cast<uci::type::WeekdayIntervalType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::wideband_SOI_ParamsType:
      return extjson_uci::type::Wideband_SOI_ParamsType::deserialize(propTree, dynamic_cast<uci::type::Wideband_SOI_ParamsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::wildcardElementType:
      return extjson_uci::type::WildcardElementType::deserialize(propTree, dynamic_cast<uci::type::WildcardElementType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::windDataChoiceType:
      return extjson_uci::type::WindDataChoiceType::deserialize(propTree, dynamic_cast<uci::type::WindDataChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::windDataType:
      return extjson_uci::type::WindDataType::deserialize(propTree, dynamic_cast<uci::type::WindDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::windMagnitudeType:
      return extjson_uci::type::WindMagnitudeType::deserialize(propTree, dynamic_cast<uci::type::WindMagnitudeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingEOB_ID_Type:
      return extjson_uci::type::WorkingEOB_ID_Type::deserialize(propTree, dynamic_cast<uci::type::WorkingEOB_ID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingEOB_MDT:
      return extjson_uci::type::WorkingEOB_MDT::deserialize(propTree, dynamic_cast<uci::type::WorkingEOB_MDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingEOB_MT:
      return extjson_uci::type::WorkingEOB_MT::deserialize(propTree, dynamic_cast<uci::type::WorkingEOB_MT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingEOB_RequestMDT:
      return extjson_uci::type::WorkingEOB_RequestMDT::deserialize(propTree, dynamic_cast<uci::type::WorkingEOB_RequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingEOB_RequestMT:
      return extjson_uci::type::WorkingEOB_RequestMT::deserialize(propTree, dynamic_cast<uci::type::WorkingEOB_RequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingEOB_RequestStatusMDT:
      return extjson_uci::type::WorkingEOB_RequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::WorkingEOB_RequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingEOB_RequestStatusMT:
      return extjson_uci::type::WorkingEOB_RequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::WorkingEOB_RequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingEOB_SourceID_ChoiceType:
      return extjson_uci::type::WorkingEOB_SourceID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::WorkingEOB_SourceID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingSOB_ID_Type:
      return extjson_uci::type::WorkingSOB_ID_Type::deserialize(propTree, dynamic_cast<uci::type::WorkingSOB_ID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingSOB_MDT:
      return extjson_uci::type::WorkingSOB_MDT::deserialize(propTree, dynamic_cast<uci::type::WorkingSOB_MDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingSOB_MT:
      return extjson_uci::type::WorkingSOB_MT::deserialize(propTree, dynamic_cast<uci::type::WorkingSOB_MT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingSOB_RequestMDT:
      return extjson_uci::type::WorkingSOB_RequestMDT::deserialize(propTree, dynamic_cast<uci::type::WorkingSOB_RequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingSOB_RequestMT:
      return extjson_uci::type::WorkingSOB_RequestMT::deserialize(propTree, dynamic_cast<uci::type::WorkingSOB_RequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingSOB_RequestStatusMDT:
      return extjson_uci::type::WorkingSOB_RequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::WorkingSOB_RequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingSOB_RequestStatusMT:
      return extjson_uci::type::WorkingSOB_RequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::WorkingSOB_RequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::workingSOB_SourceID_ChoiceType:
      return extjson_uci::type::WorkingSOB_SourceID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::WorkingSOB_SourceID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::z_ChoiceType:
      return extjson_uci::type::Z_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::Z_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::zoneChoiceType:
      return extjson_uci::type::ZoneChoiceType::deserialize(propTree, dynamic_cast<uci::type::ZoneChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::zoneExternalType:
      return extjson_uci::type::ZoneExternalType::deserialize(propTree, dynamic_cast<uci::type::ZoneExternalType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::zoneInclusionType:
      return extjson_uci::type::ZoneInclusionType::deserialize(propTree, dynamic_cast<uci::type::ZoneInclusionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::zoneType:
      return extjson_uci::type::ZoneType::deserialize(propTree, dynamic_cast<uci::type::ZoneType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::zoneViolationTriggerDataType:
      return extjson_uci::type::ZoneViolationTriggerDataType::deserialize(propTree, dynamic_cast<uci::type::ZoneViolationTriggerDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accessEffortEnum:
      return extjson_uci::type::AccessEffortEnum::deserialize(propTree, dynamic_cast<uci::type::AccessEffortEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::achievabilityEnum:
      return extjson_uci::type::AchievabilityEnum::deserialize(propTree, dynamic_cast<uci::type::AchievabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionMessageOutputsEnum:
      return extjson_uci::type::ActionMessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::ActionMessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionTypeEnum:
      return extjson_uci::type::ActionTypeEnum::deserialize(propTree, dynamic_cast<uci::type::ActionTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityBasisEnum:
      return extjson_uci::type::ActivityBasisEnum::deserialize(propTree, dynamic_cast<uci::type::ActivityBasisEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityExecutionStatusEnum:
      return extjson_uci::type::ActivityExecutionStatusEnum::deserialize(propTree, dynamic_cast<uci::type::ActivityExecutionStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanPartsEnum:
      return extjson_uci::type::ActivityPlanPartsEnum::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanPartsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityStateEnum:
      return extjson_uci::type::ActivityStateEnum::deserialize(propTree, dynamic_cast<uci::type::ActivityStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activitySubCategoryEnum:
      return extjson_uci::type::ActivitySubCategoryEnum::deserialize(propTree, dynamic_cast<uci::type::ActivitySubCategoryEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityTransitionEnum:
      return extjson_uci::type::ActivityTransitionEnum::deserialize(propTree, dynamic_cast<uci::type::ActivityTransitionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airfieldStoresEnum:
      return extjson_uci::type::AirfieldStoresEnum::deserialize(propTree, dynamic_cast<uci::type::AirfieldStoresEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airRaidStateEnum:
      return extjson_uci::type::AirRaidStateEnum::deserialize(propTree, dynamic_cast<uci::type::AirRaidStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleCapabilityEnum:
      return extjson_uci::type::AirSampleCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::AirSampleCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleMessageOutputsEnum:
      return extjson_uci::type::AirSampleMessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::AirSampleMessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::altitudeReferenceEnum:
      return extjson_uci::type::AltitudeReferenceEnum::deserialize(propTree, dynamic_cast<uci::type::AltitudeReferenceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::altitudeSourceEnum:
      return extjson_uci::type::AltitudeSourceEnum::deserialize(propTree, dynamic_cast<uci::type::AltitudeSourceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::ambiguityOrderingEnum:
      return extjson_uci::type::AmbiguityOrderingEnum::deserialize(propTree, dynamic_cast<uci::type::AmbiguityOrderingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_CapabilityEnum:
      return extjson_uci::type::AMTI_CapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_MessageOutputsEnum:
      return extjson_uci::type::AMTI_MessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::AMTI_MessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_SubCapabilityEnum:
      return extjson_uci::type::AMTI_SubCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::AMTI_SubCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::antennaTypeEnum:
      return extjson_uci::type::AntennaTypeEnum::deserialize(propTree, dynamic_cast<uci::type::AntennaTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_CapabilityEnum:
      return extjson_uci::type::AO_CapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_MessageOutputsEnum:
      return extjson_uci::type::AO_MessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::AO_MessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approachConditionStatusEnum:
      return extjson_uci::type::ApproachConditionStatusEnum::deserialize(propTree, dynamic_cast<uci::type::ApproachConditionStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approachLightingEnum:
      return extjson_uci::type::ApproachLightingEnum::deserialize(propTree, dynamic_cast<uci::type::ApproachLightingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalRequirementEnum:
      return extjson_uci::type::ApprovalRequirementEnum::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequirementEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalResponseEnum:
      return extjson_uci::type::ApprovalResponseEnum::deserialize(propTree, dynamic_cast<uci::type::ApprovalResponseEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalStateEnum:
      return extjson_uci::type::ApprovalStateEnum::deserialize(propTree, dynamic_cast<uci::type::ApprovalStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalStatusEnum:
      return extjson_uci::type::ApprovalStatusEnum::deserialize(propTree, dynamic_cast<uci::type::ApprovalStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::arresterWiresEnum:
      return extjson_uci::type::ArresterWiresEnum::deserialize(propTree, dynamic_cast<uci::type::ArresterWiresEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aS_IntegratorModeEnum:
      return extjson_uci::type::AS_IntegratorModeEnum::deserialize(propTree, dynamic_cast<uci::type::AS_IntegratorModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aS_IntegratorStepModeEnum:
      return extjson_uci::type::AS_IntegratorStepModeEnum::deserialize(propTree, dynamic_cast<uci::type::AS_IntegratorStepModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aS_PartialDerivativesEnum:
      return extjson_uci::type::AS_PartialDerivativesEnum::deserialize(propTree, dynamic_cast<uci::type::AS_PartialDerivativesEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::assessmentStatusEnum:
      return extjson_uci::type::AssessmentStatusEnum::deserialize(propTree, dynamic_cast<uci::type::AssessmentStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::assessmentSuppressionEnum:
      return extjson_uci::type::AssessmentSuppressionEnum::deserialize(propTree, dynamic_cast<uci::type::AssessmentSuppressionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::associatedAccessAssessmentInfoEnum:
      return extjson_uci::type::AssociatedAccessAssessmentInfoEnum::deserialize(propTree, dynamic_cast<uci::type::AssociatedAccessAssessmentInfoEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::atmosphereModelEnum:
      return extjson_uci::type::AtmosphereModelEnum::deserialize(propTree, dynamic_cast<uci::type::AtmosphereModelEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::autonomousActionStatusEnum:
      return extjson_uci::type::AutonomousActionStatusEnum::deserialize(propTree, dynamic_cast<uci::type::AutonomousActionStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::autopilotModeEnum:
      return extjson_uci::type::AutopilotModeEnum::deserialize(propTree, dynamic_cast<uci::type::AutopilotModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::beamPowerModeEnum:
      return extjson_uci::type::BeamPowerModeEnum::deserialize(propTree, dynamic_cast<uci::type::BeamPowerModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::beamWeightingEnum:
      return extjson_uci::type::BeamWeightingEnum::deserialize(propTree, dynamic_cast<uci::type::BeamWeightingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::behavioralChangeEnum:
      return extjson_uci::type::BehavioralChangeEnum::deserialize(propTree, dynamic_cast<uci::type::BehavioralChangeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::bodyFaceEnum:
      return extjson_uci::type::BodyFaceEnum::deserialize(propTree, dynamic_cast<uci::type::BodyFaceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::bodyReferenceEnum:
      return extjson_uci::type::BodyReferenceEnum::deserialize(propTree, dynamic_cast<uci::type::BodyReferenceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::brakingActionEnum:
      return extjson_uci::type::BrakingActionEnum::deserialize(propTree, dynamic_cast<uci::type::BrakingActionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cannotComplyEnum:
      return extjson_uci::type::CannotComplyEnum::deserialize(propTree, dynamic_cast<uci::type::CannotComplyEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityAvailabilityEnum:
      return extjson_uci::type::CapabilityAvailabilityEnum::deserialize(propTree, dynamic_cast<uci::type::CapabilityAvailabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCommandStateEnum:
      return extjson_uci::type::CapabilityCommandStateEnum::deserialize(propTree, dynamic_cast<uci::type::CapabilityCommandStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityControlInterfacesEnum:
      return extjson_uci::type::CapabilityControlInterfacesEnum::deserialize(propTree, dynamic_cast<uci::type::CapabilityControlInterfacesEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCoverageAreaBasisEnum:
      return extjson_uci::type::CapabilityCoverageAreaBasisEnum::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaBasisEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCoverageAreaFactorEnum:
      return extjson_uci::type::CapabilityCoverageAreaFactorEnum::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaFactorEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityInitiationEnum:
      return extjson_uci::type::CapabilityInitiationEnum::deserialize(propTree, dynamic_cast<uci::type::CapabilityInitiationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityTypeEnum:
      return extjson_uci::type::CapabilityTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CapabilityTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoDeliveryCapabilityEnum:
      return extjson_uci::type::CargoDeliveryCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::CargoDeliveryCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoDeliverySubCapabilityEnum:
      return extjson_uci::type::CargoDeliverySubCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::CargoDeliverySubCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoPackagingEnum:
      return extjson_uci::type::CargoPackagingEnum::deserialize(propTree, dynamic_cast<uci::type::CargoPackagingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::celestialBodyEphemerisSourceEnum:
      return extjson_uci::type::CelestialBodyEphemerisSourceEnum::deserialize(propTree, dynamic_cast<uci::type::CelestialBodyEphemerisSourceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::celestialBodyNameEnum:
      return extjson_uci::type::CelestialBodyNameEnum::deserialize(propTree, dynamic_cast<uci::type::CelestialBodyNameEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::characterizationProductTypeEnum:
      return extjson_uci::type::CharacterizationProductTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CharacterizationProductTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::characterizationTypeEnum:
      return extjson_uci::type::CharacterizationTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CharacterizationTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::clearIdentityValuesEnum:
      return extjson_uci::type::ClearIdentityValuesEnum::deserialize(propTree, dynamic_cast<uci::type::ClearIdentityValuesEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::climbOptimizationEnum:
      return extjson_uci::type::ClimbOptimizationEnum::deserialize(propTree, dynamic_cast<uci::type::ClimbOptimizationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOARPS_SAR_CollectionOptionsEnum:
      return extjson_uci::type::COARPS_SAR_CollectionOptionsEnum::deserialize(propTree, dynamic_cast<uci::type::COARPS_SAR_CollectionOptionsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOARPS_SMTI_CollectionOptionsEnum:
      return extjson_uci::type::COARPS_SMTI_CollectionOptionsEnum::deserialize(propTree, dynamic_cast<uci::type::COARPS_SMTI_CollectionOptionsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::collectionObjectiveEnum:
      return extjson_uci::type::CollectionObjectiveEnum::deserialize(propTree, dynamic_cast<uci::type::CollectionObjectiveEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::collectionPatternEnum:
      return extjson_uci::type::CollectionPatternEnum::deserialize(propTree, dynamic_cast<uci::type::CollectionPatternEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::collectionPolicyEnum:
      return extjson_uci::type::CollectionPolicyEnum::deserialize(propTree, dynamic_cast<uci::type::CollectionPolicyEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_DwellStateEnum:
      return extjson_uci::type::COMINT_DwellStateEnum::deserialize(propTree, dynamic_cast<uci::type::COMINT_DwellStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_DwellTypeEnum:
      return extjson_uci::type::COMINT_DwellTypeEnum::deserialize(propTree, dynamic_cast<uci::type::COMINT_DwellTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_SubCapabilityEnum:
      return extjson_uci::type::COMINT_SubCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::COMINT_SubCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAcquisitionModeTypeEnum:
      return extjson_uci::type::CommAcquisitionModeTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CommAcquisitionModeTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAllocationTransitionEnum:
      return extjson_uci::type::CommAllocationTransitionEnum::deserialize(propTree, dynamic_cast<uci::type::CommAllocationTransitionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commandProcessingStateEnum:
      return extjson_uci::type::CommandProcessingStateEnum::deserialize(propTree, dynamic_cast<uci::type::CommandProcessingStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commandStateEnum:
      return extjson_uci::type::CommandStateEnum::deserialize(propTree, dynamic_cast<uci::type::CommandStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAssetCategoryEnum:
      return extjson_uci::type::CommAssetCategoryEnum::deserialize(propTree, dynamic_cast<uci::type::CommAssetCategoryEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAssetEstimationMessageEnum:
      return extjson_uci::type::CommAssetEstimationMessageEnum::deserialize(propTree, dynamic_cast<uci::type::CommAssetEstimationMessageEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commCapabilityEnum:
      return extjson_uci::type::CommCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::CommCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commCDL_LinkFallbackStateEnum:
      return extjson_uci::type::CommCDL_LinkFallbackStateEnum::deserialize(propTree, dynamic_cast<uci::type::CommCDL_LinkFallbackStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commCDL_RemoteMessageProcessingEnum:
      return extjson_uci::type::CommCDL_RemoteMessageProcessingEnum::deserialize(propTree, dynamic_cast<uci::type::CommCDL_RemoteMessageProcessingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commComsecModeTypeEnum:
      return extjson_uci::type::CommComsecModeTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CommComsecModeTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commComsecModeTypeRequestEnum:
      return extjson_uci::type::CommComsecModeTypeRequestEnum::deserialize(propTree, dynamic_cast<uci::type::CommComsecModeTypeRequestEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commConfigurationStateEnum:
      return extjson_uci::type::CommConfigurationStateEnum::deserialize(propTree, dynamic_cast<uci::type::CommConfigurationStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commConnectionCommandEnum:
      return extjson_uci::type::CommConnectionCommandEnum::deserialize(propTree, dynamic_cast<uci::type::CommConnectionCommandEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commConnectionStateEnum:
      return extjson_uci::type::CommConnectionStateEnum::deserialize(propTree, dynamic_cast<uci::type::CommConnectionStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commCountermeasureSetEnum:
      return extjson_uci::type::CommCountermeasureSetEnum::deserialize(propTree, dynamic_cast<uci::type::CommCountermeasureSetEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commDataDirectionFiltrationEnum:
      return extjson_uci::type::CommDataDirectionFiltrationEnum::deserialize(propTree, dynamic_cast<uci::type::CommDataDirectionFiltrationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commDataFormatEnum:
      return extjson_uci::type::CommDataFormatEnum::deserialize(propTree, dynamic_cast<uci::type::CommDataFormatEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commIFDL_AcqControlEnum:
      return extjson_uci::type::CommIFDL_AcqControlEnum::deserialize(propTree, dynamic_cast<uci::type::CommIFDL_AcqControlEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commIFDL_CommModeEnum:
      return extjson_uci::type::CommIFDL_CommModeEnum::deserialize(propTree, dynamic_cast<uci::type::CommIFDL_CommModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commIFDL_FlightSizeEnum:
      return extjson_uci::type::CommIFDL_FlightSizeEnum::deserialize(propTree, dynamic_cast<uci::type::CommIFDL_FlightSizeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commIFDL_TxRateEnum:
      return extjson_uci::type::CommIFDL_TxRateEnum::deserialize(propTree, dynamic_cast<uci::type::CommIFDL_TxRateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16_AdvanceSlotNotificationModeEnum:
      return extjson_uci::type::CommLink16_AdvanceSlotNotificationModeEnum::deserialize(propTree, dynamic_cast<uci::type::CommLink16_AdvanceSlotNotificationModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16_PPLI_PoolEnum:
      return extjson_uci::type::CommLink16_PPLI_PoolEnum::deserialize(propTree, dynamic_cast<uci::type::CommLink16_PPLI_PoolEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16EnhancedThroughputCodeRateEnum:
      return extjson_uci::type::CommLink16EnhancedThroughputCodeRateEnum::deserialize(propTree, dynamic_cast<uci::type::CommLink16EnhancedThroughputCodeRateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16InitialEntryGroupEnum:
      return extjson_uci::type::CommLink16InitialEntryGroupEnum::deserialize(propTree, dynamic_cast<uci::type::CommLink16InitialEntryGroupEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16InterferenceProtModeEnum:
      return extjson_uci::type::CommLink16InterferenceProtModeEnum::deserialize(propTree, dynamic_cast<uci::type::CommLink16InterferenceProtModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16RangeModeEnum:
      return extjson_uci::type::CommLink16RangeModeEnum::deserialize(propTree, dynamic_cast<uci::type::CommLink16RangeModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16TransmitAntennaEnum:
      return extjson_uci::type::CommLink16TransmitAntennaEnum::deserialize(propTree, dynamic_cast<uci::type::CommLink16TransmitAntennaEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16TransmitModeEnum:
      return extjson_uci::type::CommLink16TransmitModeEnum::deserialize(propTree, dynamic_cast<uci::type::CommLink16TransmitModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16TxPackingLimitEnum:
      return extjson_uci::type::CommLink16TxPackingLimitEnum::deserialize(propTree, dynamic_cast<uci::type::CommLink16TxPackingLimitEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16TxPowerSelectionEnum:
      return extjson_uci::type::CommLink16TxPowerSelectionEnum::deserialize(propTree, dynamic_cast<uci::type::CommLink16TxPowerSelectionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_AircraftTypeEnum:
      return extjson_uci::type::CommMADL_AircraftTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CommMADL_AircraftTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_DataRateTypeEnum:
      return extjson_uci::type::CommMADL_DataRateTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CommMADL_DataRateTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_LinkStateEnum:
      return extjson_uci::type::CommMADL_LinkStateEnum::deserialize(propTree, dynamic_cast<uci::type::CommMADL_LinkStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_NetChangeOpEnum:
      return extjson_uci::type::CommMADL_NetChangeOpEnum::deserialize(propTree, dynamic_cast<uci::type::CommMADL_NetChangeOpEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_NetChangeStatusEnum:
      return extjson_uci::type::CommMADL_NetChangeStatusEnum::deserialize(propTree, dynamic_cast<uci::type::CommMADL_NetChangeStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_NetLinkOpStateEnum:
      return extjson_uci::type::CommMADL_NetLinkOpStateEnum::deserialize(propTree, dynamic_cast<uci::type::CommMADL_NetLinkOpStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_NetLinkSearchModeEnum:
      return extjson_uci::type::CommMADL_NetLinkSearchModeEnum::deserialize(propTree, dynamic_cast<uci::type::CommMADL_NetLinkSearchModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_NodeDataValidityEnum:
      return extjson_uci::type::CommMADL_NodeDataValidityEnum::deserialize(propTree, dynamic_cast<uci::type::CommMADL_NodeDataValidityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_SearchTypeEnum:
      return extjson_uci::type::CommMADL_SearchTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CommMADL_SearchTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_TimeSlotOE_PhaseTypeEnum:
      return extjson_uci::type::CommMADL_TimeSlotOE_PhaseTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CommMADL_TimeSlotOE_PhaseTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_TimeSlotTxPhaseTypeEnum:
      return extjson_uci::type::CommMADL_TimeSlotTxPhaseTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CommMADL_TimeSlotTxPhaseTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_TimeSourceEnum:
      return extjson_uci::type::CommMADL_TimeSourceEnum::deserialize(propTree, dynamic_cast<uci::type::CommMADL_TimeSourceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_VoiceRxIndicatorTypeEnum:
      return extjson_uci::type::CommMADL_VoiceRxIndicatorTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CommMADL_VoiceRxIndicatorTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commModeEnum:
      return extjson_uci::type::CommModeEnum::deserialize(propTree, dynamic_cast<uci::type::CommModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commModulationTypeEnum:
      return extjson_uci::type::CommModulationTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CommModulationTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingAssessmentEnum:
      return extjson_uci::type::CommPointingAssessmentEnum::deserialize(propTree, dynamic_cast<uci::type::CommPointingAssessmentEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingRequestEnum:
      return extjson_uci::type::CommPointingRequestEnum::deserialize(propTree, dynamic_cast<uci::type::CommPointingRequestEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRangeModeTypeEnum:
      return extjson_uci::type::CommRangeModeTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CommRangeModeTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commReceiverStateEnum:
      return extjson_uci::type::CommReceiverStateEnum::deserialize(propTree, dynamic_cast<uci::type::CommReceiverStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayMessageOutputsEnum:
      return extjson_uci::type::CommRelayMessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::CommRelayMessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayStateEnum:
      return extjson_uci::type::CommRelayStateEnum::deserialize(propTree, dynamic_cast<uci::type::CommRelayStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRequestActionEnum:
      return extjson_uci::type::CommRequestActionEnum::deserialize(propTree, dynamic_cast<uci::type::CommRequestActionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSATCOM_ServiceTypeEnum:
      return extjson_uci::type::CommSATCOM_ServiceTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CommSATCOM_ServiceTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSchedulingRequestApprovalStatusEnum:
      return extjson_uci::type::CommSchedulingRequestApprovalStatusEnum::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingRequestApprovalStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSchedulingRequirementStateEnum:
      return extjson_uci::type::CommSchedulingRequirementStateEnum::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingRequirementStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSchedulingScopeEnum:
      return extjson_uci::type::CommSchedulingScopeEnum::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingScopeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSINCGARS_FreqModeEnum:
      return extjson_uci::type::CommSINCGARS_FreqModeEnum::deserialize(propTree, dynamic_cast<uci::type::CommSINCGARS_FreqModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanActivationStateEnum:
      return extjson_uci::type::CommTerminalPlanActivationStateEnum::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanActivationStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanApprovalStatusEnum:
      return extjson_uci::type::CommTerminalPlanApprovalStatusEnum::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanApprovalStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTransmitterStateEnum:
      return extjson_uci::type::CommTransmitterStateEnum::deserialize(propTree, dynamic_cast<uci::type::CommTransmitterStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::communicationsImpairmentEnum:
      return extjson_uci::type::CommunicationsImpairmentEnum::deserialize(propTree, dynamic_cast<uci::type::CommunicationsImpairmentEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentControlInterfacesEnum:
      return extjson_uci::type::ComponentControlInterfacesEnum::deserialize(propTree, dynamic_cast<uci::type::ComponentControlInterfacesEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentElementStateEnum:
      return extjson_uci::type::ComponentElementStateEnum::deserialize(propTree, dynamic_cast<uci::type::ComponentElementStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentSettingEnum:
      return extjson_uci::type::ComponentSettingEnum::deserialize(propTree, dynamic_cast<uci::type::ComponentSettingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentStateCommandEnum:
      return extjson_uci::type::ComponentStateCommandEnum::deserialize(propTree, dynamic_cast<uci::type::ComponentStateCommandEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentStateEnum:
      return extjson_uci::type::ComponentStateEnum::deserialize(propTree, dynamic_cast<uci::type::ComponentStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentStatusRequestEnum:
      return extjson_uci::type::ComponentStatusRequestEnum::deserialize(propTree, dynamic_cast<uci::type::ComponentStatusRequestEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentTypeEnum:
      return extjson_uci::type::ComponentTypeEnum::deserialize(propTree, dynamic_cast<uci::type::ComponentTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::confidenceLevelEnum:
      return extjson_uci::type::ConfidenceLevelEnum::deserialize(propTree, dynamic_cast<uci::type::ConfidenceLevelEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::conflictStateEnum:
      return extjson_uci::type::ConflictStateEnum::deserialize(propTree, dynamic_cast<uci::type::ConflictStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::connectionStatusEnum:
      return extjson_uci::type::ConnectionStatusEnum::deserialize(propTree, dynamic_cast<uci::type::ConnectionStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::consentEnum:
      return extjson_uci::type::ConsentEnum::deserialize(propTree, dynamic_cast<uci::type::ConsentEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::constrainedPlanIncorporationEnum:
      return extjson_uci::type::ConstrainedPlanIncorporationEnum::deserialize(propTree, dynamic_cast<uci::type::ConstrainedPlanIncorporationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlInterfaceEnum:
      return extjson_uci::type::ControlInterfaceEnum::deserialize(propTree, dynamic_cast<uci::type::ControlInterfaceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlRequestEnum:
      return extjson_uci::type::ControlRequestEnum::deserialize(propTree, dynamic_cast<uci::type::ControlRequestEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlTypeEnum:
      return extjson_uci::type::ControlTypeEnum::deserialize(propTree, dynamic_cast<uci::type::ControlTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coordinationRiskEnum:
      return extjson_uci::type::CoordinationRiskEnum::deserialize(propTree, dynamic_cast<uci::type::CoordinationRiskEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::correlationIndicatorEnum:
      return extjson_uci::type::CorrelationIndicatorEnum::deserialize(propTree, dynamic_cast<uci::type::CorrelationIndicatorEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::covarianceMatrixCategoryEnum:
      return extjson_uci::type::CovarianceMatrixCategoryEnum::deserialize(propTree, dynamic_cast<uci::type::CovarianceMatrixCategoryEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coverageEffortEnum:
      return extjson_uci::type::CoverageEffortEnum::deserialize(propTree, dynamic_cast<uci::type::CoverageEffortEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::crashServiceEnum:
      return extjson_uci::type::CrashServiceEnum::deserialize(propTree, dynamic_cast<uci::type::CrashServiceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::creationSourceEnum:
      return extjson_uci::type::CreationSourceEnum::deserialize(propTree, dynamic_cast<uci::type::CreationSourceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoDS101_Enum:
      return extjson_uci::type::CryptoDS101_Enum::deserialize(propTree, dynamic_cast<uci::type::CryptoDS101_Enum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoKeyStatusEnum:
      return extjson_uci::type::CryptoKeyStatusEnum::deserialize(propTree, dynamic_cast<uci::type::CryptoKeyStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoLoadStateEnum:
      return extjson_uci::type::CryptoLoadStateEnum::deserialize(propTree, dynamic_cast<uci::type::CryptoLoadStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoLoadTypeEnum:
      return extjson_uci::type::CryptoLoadTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CryptoLoadTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoOTAM_Enum:
      return extjson_uci::type::CryptoOTAM_Enum::deserialize(propTree, dynamic_cast<uci::type::CryptoOTAM_Enum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoRolloverActionEnum:
      return extjson_uci::type::CryptoRolloverActionEnum::deserialize(propTree, dynamic_cast<uci::type::CryptoRolloverActionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoRolloverMethodEnum:
      return extjson_uci::type::CryptoRolloverMethodEnum::deserialize(propTree, dynamic_cast<uci::type::CryptoRolloverMethodEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoRolloverStateEnum:
      return extjson_uci::type::CryptoRolloverStateEnum::deserialize(propTree, dynamic_cast<uci::type::CryptoRolloverStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoSlotGroupStateEnum:
      return extjson_uci::type::CryptoSlotGroupStateEnum::deserialize(propTree, dynamic_cast<uci::type::CryptoSlotGroupStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoTypeEnum:
      return extjson_uci::type::CryptoTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CryptoTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_CapabilityEnum:
      return extjson_uci::type::CS_CapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::CS_CapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_KindEnum:
      return extjson_uci::type::CS_KindEnum::deserialize(propTree, dynamic_cast<uci::type::CS_KindEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_PostureEnum:
      return extjson_uci::type::CS_PostureEnum::deserialize(propTree, dynamic_cast<uci::type::CS_PostureEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_SensorPointingEnum:
      return extjson_uci::type::CS_SensorPointingEnum::deserialize(propTree, dynamic_cast<uci::type::CS_SensorPointingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_SensorTargetingEnum:
      return extjson_uci::type::CS_SensorTargetingEnum::deserialize(propTree, dynamic_cast<uci::type::CS_SensorTargetingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_SensorTypeEnum:
      return extjson_uci::type::CS_SensorTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CS_SensorTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cSO_StateEnum:
      return extjson_uci::type::CSO_StateEnum::deserialize(propTree, dynamic_cast<uci::type::CSO_StateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cTR_StateEnum:
      return extjson_uci::type::CTR_StateEnum::deserialize(propTree, dynamic_cast<uci::type::CTR_StateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cyberTypeEnum:
      return extjson_uci::type::CyberTypeEnum::deserialize(propTree, dynamic_cast<uci::type::CyberTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageCategoryEnum:
      return extjson_uci::type::DamageCategoryEnum::deserialize(propTree, dynamic_cast<uci::type::DamageCategoryEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageCauseEnum:
      return extjson_uci::type::DamageCauseEnum::deserialize(propTree, dynamic_cast<uci::type::DamageCauseEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageConfidenceEnum:
      return extjson_uci::type::DamageConfidenceEnum::deserialize(propTree, dynamic_cast<uci::type::DamageConfidenceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damagedFunctionEnum:
      return extjson_uci::type::DamagedFunctionEnum::deserialize(propTree, dynamic_cast<uci::type::DamagedFunctionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageEstimateContentsEnum:
      return extjson_uci::type::DamageEstimateContentsEnum::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateContentsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageLevelEnum:
      return extjson_uci::type::DamageLevelEnum::deserialize(propTree, dynamic_cast<uci::type::DamageLevelEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageObservationEnum:
      return extjson_uci::type::DamageObservationEnum::deserialize(propTree, dynamic_cast<uci::type::DamageObservationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageSignificanceEnum:
      return extjson_uci::type::DamageSignificanceEnum::deserialize(propTree, dynamic_cast<uci::type::DamageSignificanceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::datalinkControlStatusEnum:
      return extjson_uci::type::DatalinkControlStatusEnum::deserialize(propTree, dynamic_cast<uci::type::DatalinkControlStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanActivationStateEnum:
      return extjson_uci::type::DataPlanActivationStateEnum::deserialize(propTree, dynamic_cast<uci::type::DataPlanActivationStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanApprovalStatusEnum:
      return extjson_uci::type::DataPlanApprovalStatusEnum::deserialize(propTree, dynamic_cast<uci::type::DataPlanApprovalStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataStoreActionEnum:
      return extjson_uci::type::DataStoreActionEnum::deserialize(propTree, dynamic_cast<uci::type::DataStoreActionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataUpdateRequestCategoryEnum:
      return extjson_uci::type::DataUpdateRequestCategoryEnum::deserialize(propTree, dynamic_cast<uci::type::DataUpdateRequestCategoryEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::defensiveJammerSystemStatusEnum:
      return extjson_uci::type::DefensiveJammerSystemStatusEnum::deserialize(propTree, dynamic_cast<uci::type::DefensiveJammerSystemStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::defensiveJammerSystemTypeEnum:
      return extjson_uci::type::DefensiveJammerSystemTypeEnum::deserialize(propTree, dynamic_cast<uci::type::DefensiveJammerSystemTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::depthContactEnum:
      return extjson_uci::type::DepthContactEnum::deserialize(propTree, dynamic_cast<uci::type::DepthContactEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::designationEnum:
      return extjson_uci::type::DesignationEnum::deserialize(propTree, dynamic_cast<uci::type::DesignationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::destinationCategoryEnum:
      return extjson_uci::type::DestinationCategoryEnum::deserialize(propTree, dynamic_cast<uci::type::DestinationCategoryEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dF_ModeEnum:
      return extjson_uci::type::DF_ModeEnum::deserialize(propTree, dynamic_cast<uci::type::DF_ModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::disseminationStatusEnum:
      return extjson_uci::type::DisseminationStatusEnum::deserialize(propTree, dynamic_cast<uci::type::DisseminationStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dLZ_RelationEnum:
      return extjson_uci::type::DLZ_RelationEnum::deserialize(propTree, dynamic_cast<uci::type::DLZ_RelationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_StateEnum:
      return extjson_uci::type::DMPI_StateEnum::deserialize(propTree, dynamic_cast<uci::type::DMPI_StateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_StoreStateEnum:
      return extjson_uci::type::DMPI_StoreStateEnum::deserialize(propTree, dynamic_cast<uci::type::DMPI_StoreStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::doorCommandEnum:
      return extjson_uci::type::DoorCommandEnum::deserialize(propTree, dynamic_cast<uci::type::DoorCommandEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::doorStateEnum:
      return extjson_uci::type::DoorStateEnum::deserialize(propTree, dynamic_cast<uci::type::DoorStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::downloadPriorityEnum:
      return extjson_uci::type::DownloadPriorityEnum::deserialize(propTree, dynamic_cast<uci::type::DownloadPriorityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::drogueCommandEnum:
      return extjson_uci::type::DrogueCommandEnum::deserialize(propTree, dynamic_cast<uci::type::DrogueCommandEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dropRestrictionEnum:
      return extjson_uci::type::DropRestrictionEnum::deserialize(propTree, dynamic_cast<uci::type::DropRestrictionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dVR_OperationEnum:
      return extjson_uci::type::DVR_OperationEnum::deserialize(propTree, dynamic_cast<uci::type::DVR_OperationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dynamicImageProcessingEnum:
      return extjson_uci::type::DynamicImageProcessingEnum::deserialize(propTree, dynamic_cast<uci::type::DynamicImageProcessingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ActivationEnum:
      return extjson_uci::type::EA_ActivationEnum::deserialize(propTree, dynamic_cast<uci::type::EA_ActivationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_IndicatorEnum:
      return extjson_uci::type::EA_IndicatorEnum::deserialize(propTree, dynamic_cast<uci::type::EA_IndicatorEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_MessageOutputsEnum:
      return extjson_uci::type::EA_MessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::EA_MessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ModeEnum:
      return extjson_uci::type::EA_ModeEnum::deserialize(propTree, dynamic_cast<uci::type::EA_ModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_PointingEnum:
      return extjson_uci::type::EA_PointingEnum::deserialize(propTree, dynamic_cast<uci::type::EA_PointingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectMessageOutputsEnum:
      return extjson_uci::type::EffectMessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::EffectMessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectTypeEnum:
      return extjson_uci::type::EffectTypeEnum::deserialize(propTree, dynamic_cast<uci::type::EffectTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::electronicWarfareRelationshipEnum:
      return extjson_uci::type::ElectronicWarfareRelationshipEnum::deserialize(propTree, dynamic_cast<uci::type::ElectronicWarfareRelationshipEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elevationScanStabilizationEnum:
      return extjson_uci::type::ElevationScanStabilizationEnum::deserialize(propTree, dynamic_cast<uci::type::ElevationScanStabilizationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elevationVisibilityEnum:
      return extjson_uci::type::ElevationVisibilityEnum::deserialize(propTree, dynamic_cast<uci::type::ElevationVisibilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emconLevelEnum:
      return extjson_uci::type::EmconLevelEnum::deserialize(propTree, dynamic_cast<uci::type::EmconLevelEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emissionBalanceEnum:
      return extjson_uci::type::EmissionBalanceEnum::deserialize(propTree, dynamic_cast<uci::type::EmissionBalanceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emitterUrgencyEnum:
      return extjson_uci::type::EmitterUrgencyEnum::deserialize(propTree, dynamic_cast<uci::type::EmitterUrgencyEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityBasingEnum:
      return extjson_uci::type::EntityBasingEnum::deserialize(propTree, dynamic_cast<uci::type::EntityBasingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityDropPolicyEnum:
      return extjson_uci::type::EntityDropPolicyEnum::deserialize(propTree, dynamic_cast<uci::type::EntityDropPolicyEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityFusionEligibilityEnum:
      return extjson_uci::type::EntityFusionEligibilityEnum::deserialize(propTree, dynamic_cast<uci::type::EntityFusionEligibilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityFusionSimpleEligibilityEnum:
      return extjson_uci::type::EntityFusionSimpleEligibilityEnum::deserialize(propTree, dynamic_cast<uci::type::EntityFusionSimpleEligibilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementRequestAuthorityEnum:
      return extjson_uci::type::EntityManagementRequestAuthorityEnum::deserialize(propTree, dynamic_cast<uci::type::EntityManagementRequestAuthorityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityRemoveReasonEnum:
      return extjson_uci::type::EntityRemoveReasonEnum::deserialize(propTree, dynamic_cast<uci::type::EntityRemoveReasonEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entitySourceEnum:
      return extjson_uci::type::EntitySourceEnum::deserialize(propTree, dynamic_cast<uci::type::EntitySourceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityStatusEnum:
      return extjson_uci::type::EntityStatusEnum::deserialize(propTree, dynamic_cast<uci::type::EntityStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::environmentEnum:
      return extjson_uci::type::EnvironmentEnum::deserialize(propTree, dynamic_cast<uci::type::EnvironmentEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::environmentPairingEnum:
      return extjson_uci::type::EnvironmentPairingEnum::deserialize(propTree, dynamic_cast<uci::type::EnvironmentPairingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_CorrelationTypeEnum:
      return extjson_uci::type::EOB_CorrelationTypeEnum::deserialize(propTree, dynamic_cast<uci::type::EOB_CorrelationTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eP_CommandedStateEnum:
      return extjson_uci::type::EP_CommandedStateEnum::deserialize(propTree, dynamic_cast<uci::type::EP_CommandedStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eP_StateEnum:
      return extjson_uci::type::EP_StateEnum::deserialize(propTree, dynamic_cast<uci::type::EP_StateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eP_StatusEnum:
      return extjson_uci::type::EP_StatusEnum::deserialize(propTree, dynamic_cast<uci::type::EP_StatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::ephemerisTypeEnum:
      return extjson_uci::type::EphemerisTypeEnum::deserialize(propTree, dynamic_cast<uci::type::EphemerisTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::equalityExpressionEnum:
      return extjson_uci::type::EqualityExpressionEnum::deserialize(propTree, dynamic_cast<uci::type::EqualityExpressionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::equipmentConditionEnum:
      return extjson_uci::type::EquipmentConditionEnum::deserialize(propTree, dynamic_cast<uci::type::EquipmentConditionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_ActivationEnum:
      return extjson_uci::type::ESM_ActivationEnum::deserialize(propTree, dynamic_cast<uci::type::ESM_ActivationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_DwellStateEnum:
      return extjson_uci::type::ESM_DwellStateEnum::deserialize(propTree, dynamic_cast<uci::type::ESM_DwellStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_DwellTypeEnum:
      return extjson_uci::type::ESM_DwellTypeEnum::deserialize(propTree, dynamic_cast<uci::type::ESM_DwellTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_MessageOutputsEnum:
      return extjson_uci::type::ESM_MessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::ESM_MessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_SubCapabilityEnum:
      return extjson_uci::type::ESM_SubCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::ESM_SubCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::estimationMessageEnum:
      return extjson_uci::type::EstimationMessageEnum::deserialize(propTree, dynamic_cast<uci::type::EstimationMessageEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eventSeverityEnum:
      return extjson_uci::type::EventSeverityEnum::deserialize(propTree, dynamic_cast<uci::type::EventSeverityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eW_FixEnum:
      return extjson_uci::type::EW_FixEnum::deserialize(propTree, dynamic_cast<uci::type::EW_FixEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eW_MeasurementEnum:
      return extjson_uci::type::EW_MeasurementEnum::deserialize(propTree, dynamic_cast<uci::type::EW_MeasurementEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eW_ParameterSourceEnum:
      return extjson_uci::type::EW_ParameterSourceEnum::deserialize(propTree, dynamic_cast<uci::type::EW_ParameterSourceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::exerciseIdentityEnum:
      return extjson_uci::type::ExerciseIdentityEnum::deserialize(propTree, dynamic_cast<uci::type::ExerciseIdentityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::externalCommandExecutionStateEnum:
      return extjson_uci::type::ExternalCommandExecutionStateEnum::deserialize(propTree, dynamic_cast<uci::type::ExternalCommandExecutionStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::externalDataRequestEnum:
      return extjson_uci::type::ExternalDataRequestEnum::deserialize(propTree, dynamic_cast<uci::type::ExternalDataRequestEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::failureGuidanceEnum:
      return extjson_uci::type::FailureGuidanceEnum::deserialize(propTree, dynamic_cast<uci::type::FailureGuidanceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::faultSeverityEnum:
      return extjson_uci::type::FaultSeverityEnum::deserialize(propTree, dynamic_cast<uci::type::FaultSeverityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::faultStateEnum:
      return extjson_uci::type::FaultStateEnum::deserialize(propTree, dynamic_cast<uci::type::FaultStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::fieldOfRegardTypeEnum:
      return extjson_uci::type::FieldOfRegardTypeEnum::deserialize(propTree, dynamic_cast<uci::type::FieldOfRegardTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::fileDeclassificationEnum:
      return extjson_uci::type::FileDeclassificationEnum::deserialize(propTree, dynamic_cast<uci::type::FileDeclassificationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::fileTypeEnum:
      return extjson_uci::type::FileTypeEnum::deserialize(propTree, dynamic_cast<uci::type::FileTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::filteredUnfilteredEnum:
      return extjson_uci::type::FilteredUnfilteredEnum::deserialize(propTree, dynamic_cast<uci::type::FilteredUnfilteredEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::fixedPointingEnum:
      return extjson_uci::type::FixedPointingEnum::deserialize(propTree, dynamic_cast<uci::type::FixedPointingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::flightCapabilityEnum:
      return extjson_uci::type::FlightCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::FlightCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::flightDeckStatusEnum:
      return extjson_uci::type::FlightDeckStatusEnum::deserialize(propTree, dynamic_cast<uci::type::FlightDeckStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::flightStageEnum:
      return extjson_uci::type::FlightStageEnum::deserialize(propTree, dynamic_cast<uci::type::FlightStageEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::fMOP_Enum:
      return extjson_uci::type::FMOP_Enum::deserialize(propTree, dynamic_cast<uci::type::FMOP_Enum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::focalPlaneArrayNonUniformityCorrectionOffsetEnum:
      return extjson_uci::type::FocalPlaneArrayNonUniformityCorrectionOffsetEnum::deserialize(propTree, dynamic_cast<uci::type::FocalPlaneArrayNonUniformityCorrectionOffsetEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::focalPlaneArrayNonUniformityCorrectionReferenceEnum:
      return extjson_uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceEnum::deserialize(propTree, dynamic_cast<uci::type::FocalPlaneArrayNonUniformityCorrectionReferenceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::fOR_Enum:
      return extjson_uci::type::FOR_Enum::deserialize(propTree, dynamic_cast<uci::type::FOR_Enum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::frameOriginEnum:
      return extjson_uci::type::FrameOriginEnum::deserialize(propTree, dynamic_cast<uci::type::FrameOriginEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::frequencyAgilityPatternEnum:
      return extjson_uci::type::FrequencyAgilityPatternEnum::deserialize(propTree, dynamic_cast<uci::type::FrequencyAgilityPatternEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::frequencyModulationVariationEnum:
      return extjson_uci::type::FrequencyModulationVariationEnum::deserialize(propTree, dynamic_cast<uci::type::FrequencyModulationVariationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::frequencyPatternPeriodicityEnum:
      return extjson_uci::type::FrequencyPatternPeriodicityEnum::deserialize(propTree, dynamic_cast<uci::type::FrequencyPatternPeriodicityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::frequencySwitchingEnum:
      return extjson_uci::type::FrequencySwitchingEnum::deserialize(propTree, dynamic_cast<uci::type::FrequencySwitchingEnum&>(accessor), nodeName, nsPrefix, true);
    default:
      return false;
  }
}

} // namespace base

} // namespace extjson_uci

