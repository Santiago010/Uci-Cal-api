/** @file ExternalizerWrite6.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/base/ExternalizerWrite6.h"

#include <string>

#include <boost/none.hpp>
#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/PMOP_SequenceType.h"
#include "extjson_uci/type/PO_ActivityCommandType.h"
#include "extjson_uci/type/PO_ActivityMDT.h"
#include "extjson_uci/type/PO_ActivityMT.h"
#include "extjson_uci/type/PO_ActivityType.h"
#include "extjson_uci/type/PO_AirTargetVolumeCommandType.h"
#include "extjson_uci/type/PO_AirTargetVolumeType.h"
#include "extjson_uci/type/PO_AirVolumeSensorReferencedType.h"
#include "extjson_uci/type/PO_AngleConstraintControlsStatusType.h"
#include "extjson_uci/type/PO_AngleConstraintControlsType.h"
#include "extjson_uci/type/PO_ApertureID_Type.h"
#include "extjson_uci/type/PO_CapabilityCommandType.h"
#include "extjson_uci/type/PO_CapabilityMDT.h"
#include "extjson_uci/type/PO_CapabilityMT.h"
#include "extjson_uci/type/PO_CapabilityOptionsType.h"
#include "extjson_uci/type/PO_CapabilityStatusMDT.h"
#include "extjson_uci/type/PO_CapabilityStatusMT.h"
#include "extjson_uci/type/PO_CapabilityStatusType.h"
#include "extjson_uci/type/PO_CapabilityType.h"
#include "extjson_uci/type/PO_CoastSettingOptionsType.h"
#include "extjson_uci/type/PO_CoastSettingValueType.h"
#include "extjson_uci/type/PO_CollectionConstraintsSettingsType.h"
#include "extjson_uci/type/PO_CollectionConstraintsStatusType.h"
#include "extjson_uci/type/PO_CollectionConstraintsType.h"
#include "extjson_uci/type/PO_CollectionPatternConstraintControlsType.h"
#include "extjson_uci/type/PO_ColorPatternConstraintControlsStatusType.h"
#include "extjson_uci/type/PO_CommandMDT.h"
#include "extjson_uci/type/PO_CommandMT.h"
#include "extjson_uci/type/PO_CommandResponseType.h"
#include "extjson_uci/type/PO_CommandStatusMDT.h"
#include "extjson_uci/type/PO_CommandStatusMT.h"
#include "extjson_uci/type/PO_CommandType.h"
#include "extjson_uci/type/PO_ComponentApertureSettingsType.h"
#include "extjson_uci/type/PO_ComponentApertureType.h"
#include "extjson_uci/type/PO_ComponentF_StopSettingsType.h"
#include "extjson_uci/type/PO_ComponentF_StopType.h"
#include "extjson_uci/type/PO_ComponentF_StopVariableType.h"
#include "extjson_uci/type/PO_ComponentFilterType.h"
#include "extjson_uci/type/PO_ComponentFocalPlaneArrayChannelType.h"
#include "extjson_uci/type/PO_ComponentFocalPlaneArrayOperationType.h"
#include "extjson_uci/type/PO_ComponentFocalPlaneArrayOpticalBandType.h"
#include "extjson_uci/type/PO_ComponentFocalPlaneArrayType.h"
#include "extjson_uci/type/PO_ComponentLensAssemblyFieldOfViewType.h"
#include "extjson_uci/type/PO_ComponentLensAssemblyFocusType.h"
#include "extjson_uci/type/PO_ComponentLensAssemblyType.h"
#include "extjson_uci/type/PO_ComponentLensAssemblyZoomAbsoluteType.h"
#include "extjson_uci/type/PO_ComponentLensAssemblyZoomIncrementalType.h"
#include "extjson_uci/type/PO_ComponentLensAssemblyZoomType.h"
#include "extjson_uci/type/PO_ComponentProcessingStageType.h"
#include "extjson_uci/type/PO_ComponentProductGeneratorType.h"
#include "extjson_uci/type/PO_ComponentSettingsBandpassFrequencyType.h"
#include "extjson_uci/type/PO_ComponentSettingsFilterType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocalPlaneArrayChannelType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocalPlaneArrayCollectionType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocalPlaneArrayOpticalBandType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocalPlaneArrayPixelAggregationType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocalPlaneArrayPixelPolarityType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocalPlaneArrayPixelScalingType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocalPlaneArrayScanDirectionType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocalPlaneArrayType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocusSweepSettingsStartingPositionType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocusSweepSettingsStepIncrementType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocusSweepSettingsStepTimeType.h"
#include "extjson_uci/type/PO_ComponentSettingsFocusSweepSettingsType.h"
#include "extjson_uci/type/PO_ComponentSettingsGeneratorSettingsType.h"
#include "extjson_uci/type/PO_ComponentSettingsLensAssemblyFieldOfViewType.h"
#include "extjson_uci/type/PO_ComponentSettingsLensAssemblyFocusType.h"
#include "extjson_uci/type/PO_ComponentSettingsLensAssemblyType.h"
#include "extjson_uci/type/PO_ComponentSettingsOutputProductSettingsType.h"
#include "extjson_uci/type/PO_ComponentSettingsProcessingStagePixelScalingType.h"
#include "extjson_uci/type/PO_ComponentSettingsProcessingStageProcessingSettingsType.h"
#include "extjson_uci/type/PO_ComponentSettingsProcessingStageSettingsType.h"
#include "extjson_uci/type/PO_ComponentSettingsProcessingStageType.h"
#include "extjson_uci/type/PO_ComponentSettingsProductGeneratorSettingsType.h"
#include "extjson_uci/type/PO_ComponentSettingsProductGeneratorType.h"
#include "extjson_uci/type/PO_ComponentSettingsProductSettingsType.h"
#include "extjson_uci/type/PO_ComponentSettingsType.h"
#include "extjson_uci/type/PO_ComponentStatusApertureSettingsType.h"
#include "extjson_uci/type/PO_ComponentStatusBandpassFrequencyType.h"
#include "extjson_uci/type/PO_ComponentStatusFilterType.h"
#include "extjson_uci/type/PO_ComponentStatusFocalPlaneArrayChannelType.h"
#include "extjson_uci/type/PO_ComponentStatusFocalPlaneArrayCollectionTimeType.h"
#include "extjson_uci/type/PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionDataType.h"
#include "extjson_uci/type/PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType.h"
#include "extjson_uci/type/PO_ComponentStatusFocalPlaneArrayOpticalBandType.h"
#include "extjson_uci/type/PO_ComponentStatusFocalPlaneArrayPixelAggregationType.h"
#include "extjson_uci/type/PO_ComponentStatusFocalPlaneArrayPixelPolarityType.h"
#include "extjson_uci/type/PO_ComponentStatusFocalPlaneArrayPixelScalingType.h"
#include "extjson_uci/type/PO_ComponentStatusFocalPlaneArrayScanDirectionType.h"
#include "extjson_uci/type/PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType.h"
#include "extjson_uci/type/PO_ComponentStatusFocalPlaneArrayType.h"
#include "extjson_uci/type/PO_ComponentStatusFocusSweepSettingsType.h"
#include "extjson_uci/type/PO_ComponentStatusGeneratorSettingsType.h"
#include "extjson_uci/type/PO_ComponentStatusLensAssemblyFieldOfViewType.h"
#include "extjson_uci/type/PO_ComponentStatusLensAssemblyFocusType.h"
#include "extjson_uci/type/PO_ComponentStatusLensAssemblyType.h"
#include "extjson_uci/type/PO_ComponentStatusOutputProductSettingsType.h"
#include "extjson_uci/type/PO_ComponentStatusProcessingStagePixelScalingType.h"
#include "extjson_uci/type/PO_ComponentStatusProcessingStageProcessingSettingsType.h"
#include "extjson_uci/type/PO_ComponentStatusProcessingStageSettingsType.h"
#include "extjson_uci/type/PO_ComponentStatusProcessingStageType.h"
#include "extjson_uci/type/PO_ComponentStatusProductGeneratorSettingsType.h"
#include "extjson_uci/type/PO_ComponentStatusProductGeneratorType.h"
#include "extjson_uci/type/PO_ComponentStatusProductSettingsType.h"
#include "extjson_uci/type/PO_ComponentStatusType.h"
#include "extjson_uci/type/PO_ComponentType.h"
#include "extjson_uci/type/PO_ComponentWindowType.h"
#include "extjson_uci/type/PO_ConstraintControlsType.h"
#include "extjson_uci/type/PO_FPA_ChannelID_Type.h"
#include "extjson_uci/type/PO_FPA_ID_Type.h"
#include "extjson_uci/type/PO_FilterID_Type.h"
#include "extjson_uci/type/PO_GimbalOrientationConstraintControlsStatusType.h"
#include "extjson_uci/type/PO_GimbalOrientationConstraintType.h"
#include "extjson_uci/type/PO_LensID_Type.h"
#include "extjson_uci/type/PO_OffsetTrackSettingsType.h"
#include "extjson_uci/type/PO_ProcessingStageID_Type.h"
#include "extjson_uci/type/PO_ProductGeneratorID_Type.h"
#include "extjson_uci/type/PO_ProductGeneratorOutputID_Type.h"
#include "extjson_uci/type/PO_ProductOutputCommandImageryType.h"
#include "extjson_uci/type/PO_SettingsCommandMDT.h"
#include "extjson_uci/type/PO_SettingsCommandMT.h"
#include "extjson_uci/type/PO_SettingsCommandStatusMDT.h"
#include "extjson_uci/type/PO_SettingsCommandStatusMT.h"
#include "extjson_uci/type/PO_SlantRangeConstraintControlsStatusType.h"
#include "extjson_uci/type/PO_SlantRangeConstraintControlsType.h"
#include "extjson_uci/type/PO_SubCapabilitySettingsType.h"
#include "extjson_uci/type/PO_SubCapabilityType.h"
#include "extjson_uci/type/PO_SweepSpeedConstraintControlsStatusType.h"
#include "extjson_uci/type/PO_SweepSpeedConstraintControlsType.h"
#include "extjson_uci/type/PO_TargetType.h"
#include "extjson_uci/type/PO_TaskBaseType.h"
#include "extjson_uci/type/PO_TaskType.h"
#include "extjson_uci/type/PO_TechniqueCapabilityType.h"
#include "extjson_uci/type/PO_TechniqueSettingType.h"
#include "extjson_uci/type/PO_TrackActivityType.h"
#include "extjson_uci/type/PO_TrackCapabilityType.h"
#include "extjson_uci/type/PO_TrackDetailsType.h"
#include "extjson_uci/type/PO_TrackSettingsType.h"
#include "extjson_uci/type/PO_TrackStatusType.h"
#include "extjson_uci/type/PO_WindowID_Type.h"
#include "extjson_uci/type/PRI_DataBaseType.h"
#include "extjson_uci/type/PRI_DataType.h"
#include "extjson_uci/type/PRI_PW_Type.h"
#include "extjson_uci/type/PlanModificationRequestMT.h"
#include "extjson_uci/type/PlanModificationRequestStatusMDT.h"
#include "extjson_uci/type/PlanModificationRequestStatusMT.h"
#include "extjson_uci/type/PlanPartsBaseType.h"
#include "extjson_uci/type/PlanPartsInvalidType.h"
#include "extjson_uci/type/PlanPartsType.h"
#include "extjson_uci/type/PlanPolicyApplicablePlanType.h"
#include "extjson_uci/type/PlanPolicyType.h"
#include "extjson_uci/type/PlanReferenceID_ChoiceType.h"
#include "extjson_uci/type/PlanReferenceType.h"
#include "extjson_uci/type/PlanScoresID_Type.h"
#include "extjson_uci/type/PlanScoresMDT.h"
#include "extjson_uci/type/PlanScoresMT.h"
#include "extjson_uci/type/PlanScoresRequestMDT.h"
#include "extjson_uci/type/PlanScoresRequestMT.h"
#include "extjson_uci/type/PlanScoresRequestStatusMDT.h"
#include "extjson_uci/type/PlanScoresRequestStatusMT.h"
#include "extjson_uci/type/PlanScoringDescriptionType.h"
#include "extjson_uci/type/PlanScoringProcessType.h"
#include "extjson_uci/type/PlanStatusType.h"
#include "extjson_uci/type/PlanValidationInputsBaseType.h"
#include "extjson_uci/type/PlanVulnerabilityType.h"
#include "extjson_uci/type/PlanWindowModificationTypeChoiceType.h"
#include "extjson_uci/type/PlannedActivityBaseType.h"
#include "extjson_uci/type/PlannedActivityExecutionStatusType.h"
#include "extjson_uci/type/PlannedActivityID_Type.h"
#include "extjson_uci/type/PlannedActivityTriggerType.h"
#include "extjson_uci/type/PlannedActivityType.h"
#include "extjson_uci/type/PlannedCommActionExtendedType.h"
#include "extjson_uci/type/PlannedCommActionType.h"
#include "extjson_uci/type/PlannedCommCapabilityType.h"
#include "extjson_uci/type/PlannedControlInterfaceStateType.h"
#include "extjson_uci/type/PlannedControlInterfacesCommandType.h"
#include "extjson_uci/type/PlannedControlInterfacesType.h"
#include "extjson_uci/type/PlannedGatewayConfigurationType.h"
#include "extjson_uci/type/PlannedReleaseConditionsType.h"
#include "extjson_uci/type/PlannedSubsystemCommandType.h"
#include "extjson_uci/type/PlanningAllowedEscalationType.h"
#include "extjson_uci/type/PlanningAllowedType.h"
#include "extjson_uci/type/PlanningApplicabilitySystemType.h"
#include "extjson_uci/type/PlanningByCaseTriggerType.h"
#include "extjson_uci/type/PlanningByResultTriggerType.h"
#include "extjson_uci/type/PlanningCandidateBaseType.h"
#include "extjson_uci/type/PlanningDiscoveryBaseType.h"
#include "extjson_uci/type/PlanningFunctionID_Type.h"
#include "extjson_uci/type/PlanningFunctionMDT.h"
#include "extjson_uci/type/PlanningFunctionMT.h"
#include "extjson_uci/type/PlanningFunctionSettingsCommandMDT.h"
#include "extjson_uci/type/PlanningFunctionSettingsCommandMT.h"
#include "extjson_uci/type/PlanningFunctionSettingsCommandStatusMDT.h"
#include "extjson_uci/type/PlanningFunctionSettingsCommandStatusMT.h"
#include "extjson_uci/type/PlanningFunctionStatusMDT.h"
#include "extjson_uci/type/PlanningFunctionStatusMT.h"
#include "extjson_uci/type/PlanningGuidelineType.h"
#include "extjson_uci/type/PlanningInterfaceDetailsType.h"
#include "extjson_uci/type/PlanningInterfaceType.h"
#include "extjson_uci/type/PlanningInterfacesType.h"
#include "extjson_uci/type/PlanningLocationType.h"
#include "extjson_uci/type/PlanningPointPriorityType.h"
#include "extjson_uci/type/PlanningPointType.h"
#include "extjson_uci/type/PlanningProcessID_Type.h"
#include "extjson_uci/type/PlanningProcessTreeType.h"
#include "extjson_uci/type/PlanningTriggerType.h"
#include "extjson_uci/type/PlansActivationApprovalType.h"
#include "extjson_uci/type/PlansReferenceBaseType.h"
#include "extjson_uci/type/PlansReferenceType.h"
#include "extjson_uci/type/PlansRequirementsReferenceType.h"
#include "extjson_uci/type/PlatformFunctionStatusCategoryType.h"
#include "extjson_uci/type/PlatformFunctionStatusType.h"
#include "extjson_uci/type/PlatformIdentityConfidenceType.h"
#include "extjson_uci/type/PlatformIdentityType.h"
#include "extjson_uci/type/PlatformStatusSAM_Type.h"
#include "extjson_uci/type/PlatformStatusType.h"
#include "extjson_uci/type/Point2D_RangeType.h"
#include "extjson_uci/type/Point2D_ReferenceType.h"
#include "extjson_uci/type/Point2D_RelativeType.h"
#include "extjson_uci/type/Point2D_ReportedType.h"
#include "extjson_uci/type/Point2D_Type.h"
#include "extjson_uci/type/Point3D_RelativeType.h"
#include "extjson_uci/type/Point3D_Type.h"
#include "extjson_uci/type/Point4D_RelativeType.h"
#include "extjson_uci/type/Point4D_Type.h"
#include "extjson_uci/type/PointChoice3D_Type.h"
#include "extjson_uci/type/PointChoice4D_Type.h"
#include "extjson_uci/type/PointChoiceType.h"
#include "extjson_uci/type/PointTargetType.h"
#include "extjson_uci/type/PointingPlanWindowType.h"
#include "extjson_uci/type/PointingType.h"
#include "extjson_uci/type/PointingVectorParameterType.h"
#include "extjson_uci/type/PolarMotionType.h"
#include "extjson_uci/type/PolarizationControlType.h"
#include "extjson_uci/type/PolarizationType.h"
#include "extjson_uci/type/PolygonPointChoiceType.h"
#include "extjson_uci/type/PolygonRelativeType.h"
#include "extjson_uci/type/PolygonType.h"
#include "extjson_uci/type/PortConfigurationType.h"
#include "extjson_uci/type/PositionAccelerationCovarianceType.h"
#include "extjson_uci/type/PositionAndVelocityCovarianceType.h"
#include "extjson_uci/type/PositionLocationUncertaintyType.h"
#include "extjson_uci/type/PositionOrientationCovarianceType.h"
#include "extjson_uci/type/PositionPositionCovarianceType.h"
#include "extjson_uci/type/PositionReportDataType.h"
#include "extjson_uci/type/PositionReportDetailedMDT.h"
#include "extjson_uci/type/PositionReportDetailedMT.h"
#include "extjson_uci/type/PositionReportMDT.h"
#include "extjson_uci/type/PositionReportMT.h"
#include "extjson_uci/type/PositionSourceID_ChoiceType.h"
#include "extjson_uci/type/PositionVelocityCovarianceType.h"
#include "extjson_uci/type/PredictedThreatAssessmentRelativeType.h"
#include "extjson_uci/type/PredictedThreatAssessmentType.h"
#include "extjson_uci/type/PrimaryControllerType.h"
#include "extjson_uci/type/PrioritizationListID_Type.h"
#include "extjson_uci/type/PrioritizationListItemType.h"
#include "extjson_uci/type/PrioritizationListMDT.h"
#include "extjson_uci/type/PrioritizationListMT.h"
#include "extjson_uci/type/PrioritizationListValueType.h"
#include "extjson_uci/type/PrioritizationType.h"
#include "extjson_uci/type/ProcessingConstrainedSubPlanType.h"
#include "extjson_uci/type/ProcessingParametersPET.h"
#include "extjson_uci/type/ProcessingReportType.h"
#include "extjson_uci/type/ProcessingRequirementsType.h"
#include "extjson_uci/type/ProcessingResultsPET.h"
#include "extjson_uci/type/ProductClassificationPlanID_Type.h"
#include "extjson_uci/type/ProductClassificationPlanMDT.h"
#include "extjson_uci/type/ProductClassificationPlanMT.h"
#include "extjson_uci/type/ProductClassificationPlanType.h"
#include "extjson_uci/type/ProductClassificationReportID_Type.h"
#include "extjson_uci/type/ProductClassificationReportMDT.h"
#include "extjson_uci/type/ProductClassificationReportMT.h"
#include "extjson_uci/type/ProductClassificationRequestMDT.h"
#include "extjson_uci/type/ProductClassificationRequestMT.h"
#include "extjson_uci/type/ProductClassificationRequestStatusMDT.h"
#include "extjson_uci/type/ProductClassificationRequestStatusMT.h"
#include "extjson_uci/type/ProductClassificationStatusLabelType.h"
#include "extjson_uci/type/ProductClassificationStatusType.h"
#include "extjson_uci/type/ProductClassificationTaskMDT.h"
#include "extjson_uci/type/ProductClassificationTaskMT.h"
#include "extjson_uci/type/ProductClassificationTaskStatusMDT.h"
#include "extjson_uci/type/ProductClassificationTaskStatusMT.h"
#include "extjson_uci/type/ProductCollectionLocationType.h"
#include "extjson_uci/type/ProductCollectionPathType.h"
#include "extjson_uci/type/ProductDisseminationConfigurationID_Type.h"
#include "extjson_uci/type/ProductDisseminationConfigurationMDT.h"
#include "extjson_uci/type/ProductDisseminationConfigurationMT.h"
#include "extjson_uci/type/ProductDisseminationConfigurationType.h"
#include "extjson_uci/type/ProductDisseminationDestinationID_Type.h"
#include "extjson_uci/type/ProductDisseminationDestinationMDT.h"
#include "extjson_uci/type/ProductDisseminationDestinationMT.h"
#include "extjson_uci/type/ProductDisseminationGatewayType.h"
#include "extjson_uci/type/ProductDisseminationPlanID_Type.h"
#include "extjson_uci/type/ProductDisseminationPlanMDT.h"
#include "extjson_uci/type/ProductDisseminationPlanMT.h"
#include "extjson_uci/type/ProductDisseminationPlanType.h"
#include "extjson_uci/type/ProductDisseminationReportID_Type.h"
#include "extjson_uci/type/ProductDisseminationReportMDT.h"
#include "extjson_uci/type/ProductDisseminationReportMT.h"
#include "extjson_uci/type/ProductDisseminationRequestMDT.h"
#include "extjson_uci/type/ProductDisseminationRequestMT.h"
#include "extjson_uci/type/ProductDisseminationRequestStatusMDT.h"
#include "extjson_uci/type/ProductDisseminationRequestStatusMT.h"
#include "extjson_uci/type/ProductDisseminationStatusType.h"
#include "extjson_uci/type/ProductDisseminationTaskMDT.h"
#include "extjson_uci/type/ProductDisseminationTaskMT.h"
#include "extjson_uci/type/ProductDisseminationTaskStatusMDT.h"
#include "extjson_uci/type/ProductDisseminationTaskStatusMT.h"
#include "extjson_uci/type/ProductDownloadPlanID_Type.h"
#include "extjson_uci/type/ProductDownloadPlanMDT.h"
#include "extjson_uci/type/ProductDownloadPlanMT.h"
#include "extjson_uci/type/ProductDownloadPlanType.h"
#include "extjson_uci/type/ProductDownloadReportID_Type.h"
#include "extjson_uci/type/ProductDownloadReportMDT.h"
#include "extjson_uci/type/ProductDownloadReportMT.h"
#include "extjson_uci/type/ProductDownloadRequestMDT.h"
#include "extjson_uci/type/ProductDownloadRequestMT.h"
#include "extjson_uci/type/ProductDownloadRequestStatusMDT.h"
#include "extjson_uci/type/ProductDownloadRequestStatusMT.h"
#include "extjson_uci/type/ProductDownloadStatusType.h"
#include "extjson_uci/type/ProductDownloadTaskMDT.h"
#include "extjson_uci/type/ProductDownloadTaskMT.h"
#include "extjson_uci/type/ProductDownloadTaskStatusMDT.h"
#include "extjson_uci/type/ProductDownloadTaskStatusMT.h"
#include "extjson_uci/type/ProductFilterType.h"
#include "extjson_uci/type/ProductGeospatialLocationType.h"
#include "extjson_uci/type/ProductLocationID_Type.h"
#include "extjson_uci/type/ProductLocationMDT.h"
#include "extjson_uci/type/ProductLocationMT.h"
#include "extjson_uci/type/ProductLocationType.h"
#include "extjson_uci/type/ProductManagementTaskDataType.h"
#include "extjson_uci/type/ProductManagementTaskStatusDataType.h"
#include "extjson_uci/type/ProductMetadataID_Type.h"
#include "extjson_uci/type/ProductMetadataMDT.h"
#include "extjson_uci/type/ProductMetadataMT.h"
#include "extjson_uci/type/ProductNeededByType.h"
#include "extjson_uci/type/ProductOutputCapabilityImageryType.h"
#include "extjson_uci/type/ProductOutputCapabilityStatusImageryType.h"
#include "extjson_uci/type/ProductOutputCommandBasicType.h"
#include "extjson_uci/type/ProductOutputCommandImageryType.h"
#include "extjson_uci/type/ProductOutputCommandSMTI_Type.h"
#include "extjson_uci/type/ProductOutputStatusType.h"
#include "extjson_uci/type/ProductOutputType.h"
#include "extjson_uci/type/ProductParentType.h"
#include "extjson_uci/type/ProductProcessingClassificationType.h"
#include "extjson_uci/type/ProductProcessingFunctionMDT.h"
#include "extjson_uci/type/ProductProcessingFunctionMT.h"
#include "extjson_uci/type/ProductProcessingFunctionStatusMDT.h"
#include "extjson_uci/type/ProductProcessingFunctionStatusMT.h"
#include "extjson_uci/type/ProductProcessingFunctionStatusType.h"
#include "extjson_uci/type/ProductProcessingFunctionType.h"
#include "extjson_uci/type/ProductProcessingPlanID_Type.h"
#include "extjson_uci/type/ProductProcessingPlanMDT.h"
#include "extjson_uci/type/ProductProcessingPlanMT.h"
#include "extjson_uci/type/ProductProcessingPlanType.h"
#include "extjson_uci/type/ProductProcessingReportID_Type.h"
#include "extjson_uci/type/ProductProcessingReportMDT.h"
#include "extjson_uci/type/ProductProcessingReportMT.h"
#include "extjson_uci/type/ProductProcessingRequestMDT.h"
#include "extjson_uci/type/ProductProcessingRequestMT.h"
#include "extjson_uci/type/ProductProcessingRequestStatusMDT.h"
#include "extjson_uci/type/ProductProcessingRequestStatusMT.h"
#include "extjson_uci/type/ProductProcessingStatusType.h"
#include "extjson_uci/type/ProductProcessingTaskMDT.h"
#include "extjson_uci/type/ProductProcessingTaskMT.h"
#include "extjson_uci/type/ProductProcessingTaskStatusMDT.h"
#include "extjson_uci/type/ProductProcessingTaskStatusMT.h"
#include "extjson_uci/type/ProductProcessingType.h"
#include "extjson_uci/type/ProductRateSettingsType.h"
#include "extjson_uci/type/ProductReferenceByParentType.h"
#include "extjson_uci/type/ProductReferenceType.h"
#include "extjson_uci/type/ProductResolutionSettingsType.h"
#include "extjson_uci/type/ProductResolutionType.h"
#include "extjson_uci/type/ProductSizeSettingsType.h"
#include "extjson_uci/type/ProductSystemLocationType.h"
#include "extjson_uci/type/ProductTypeFilterType.h"
#include "extjson_uci/type/PropagatorChoiceType.h"
#include "extjson_uci/type/PropagatorSettingsChoiceType.h"
#include "extjson_uci/type/PropagatorSettingsDataRequestMDT.h"
#include "extjson_uci/type/PropagatorSettingsDataRequestMT.h"
#include "extjson_uci/type/PropagatorSettingsDataRequestStatusMDT.h"
#include "extjson_uci/type/PropagatorSettingsDataRequestStatusMT.h"
#include "extjson_uci/type/PropagatorSettingsID_Type.h"
#include "extjson_uci/type/PropagatorSettingsMDT.h"
#include "extjson_uci/type/PropagatorSettingsMT.h"
#include "extjson_uci/type/PropagatorType.h"
#include "extjson_uci/type/ProtectedAssetAndThreatType.h"
#include "extjson_uci/type/ProtectedAssetReturnPowerType.h"
#include "extjson_uci/type/ProtectedAssetType.h"
#include "extjson_uci/type/ProximityOperationsType.h"
#include "extjson_uci/type/ProximityOrbitChoiceType.h"
#include "extjson_uci/type/PulseDataCollectCommandType.h"
#include "extjson_uci/type/PulseDataID_Type.h"
#include "extjson_uci/type/PulseDataMDT.h"
#include "extjson_uci/type/PulseDataMT.h"
#include "extjson_uci/type/PulseDataSourceType.h"
#include "extjson_uci/type/PulseType.h"
#include "extjson_uci/type/PumpComponentExtendedStatusType.h"
#include "extjson_uci/type/QualifyingTagsType.h"
#include "extjson_uci/type/QuaternionAttitudeType.h"
#include "extjson_uci/type/QuaternionType.h"
#include "extjson_uci/type/QueryComparisonType.h"
#include "extjson_uci/type/QueryContainsType.h"
#include "extjson_uci/type/QueryCountType.h"
#include "extjson_uci/type/QueryCountValueType.h"
#include "extjson_uci/type/QueryDataRequestMDT.h"
#include "extjson_uci/type/QueryDataRequestMT.h"
#include "extjson_uci/type/QueryDataRequestStatusMDT.h"
#include "extjson_uci/type/QueryDataRequestStatusMT.h"
#include "extjson_uci/type/QueryEqualsType.h"
#include "extjson_uci/type/QueryExistsType.h"
#include "extjson_uci/type/QueryInstanceOfType.h"
#include "extjson_uci/type/QueryMatchType.h"
#include "extjson_uci/type/QueryMessageType.h"
#include "extjson_uci/type/QueryPET.h"
#include "extjson_uci/type/QueryPaginationType.h"
#include "extjson_uci/type/QueryResultType.h"
#include "extjson_uci/type/QuerySpecificDataPET.h"
#include "extjson_uci/type/QueryStepType.h"
#include "extjson_uci/type/QueryTopicPairType.h"
#include "extjson_uci/type/QueryType.h"
#include "extjson_uci/type/RCS_MedianType.h"
#include "extjson_uci/type/RCS_ParamsType.h"
#include "extjson_uci/type/RDMA_InitializeID_Type.h"
#include "extjson_uci/type/RDMA_InitializeMDT.h"
#include "extjson_uci/type/RDMA_InitializeMT.h"
#include "extjson_uci/type/RDMA_InitializeSetupID_Type.h"
#include "extjson_uci/type/RDMA_InitializeSetupMDT.h"
#include "extjson_uci/type/RDMA_InitializeSetupMT.h"
#include "extjson_uci/type/RaceTrackOrbitType.h"
#include "extjson_uci/type/RadarActivityCommandType.h"
#include "extjson_uci/type/RadarAltimeterActivityCommandType.h"
#include "extjson_uci/type/RadarAltimeterActivityEstimatedPerformanceType.h"
#include "extjson_uci/type/RadarAltimeterActivityMDT.h"
#include "extjson_uci/type/RadarAltimeterActivityMT.h"
#include "extjson_uci/type/RadarAltimeterActivityMetricsType.h"
#include "extjson_uci/type/RadarAltimeterActivityPredictedActivityDetailType.h"
#include "extjson_uci/type/RadarAltimeterActivityPredictedCollectionsType.h"
#include "extjson_uci/type/RadarAltimeterActivityType.h"
#include "extjson_uci/type/RadarAltimeterAngleConstraintsType.h"
#include "extjson_uci/type/RadarAltimeterCapabilityCommandType.h"
#include "extjson_uci/type/RadarAltimeterCapabilityMDT.h"
#include "extjson_uci/type/RadarAltimeterCapabilityMT.h"
#include "extjson_uci/type/RadarAltimeterCapabilityOptionsType.h"
#include "extjson_uci/type/RadarAltimeterCapabilityStatusMDT.h"
#include "extjson_uci/type/RadarAltimeterCapabilityStatusMT.h"
#include "extjson_uci/type/RadarAltimeterCapabilityType.h"
#include "extjson_uci/type/RadarAltimeterCollectionConstraintsType.h"
#include "extjson_uci/type/RadarAltimeterCollectionOptionsType.h"
#include "extjson_uci/type/RadarAltimeterCommandMDT.h"
#include "extjson_uci/type/RadarAltimeterCommandMT.h"
#include "extjson_uci/type/RadarAltimeterCommandStatusMDT.h"
#include "extjson_uci/type/RadarAltimeterCommandStatusMT.h"
#include "extjson_uci/type/RadarAltimeterCommandType.h"
#include "extjson_uci/type/RadarAltimeterReportAngularOffsetType.h"
#include "extjson_uci/type/RadarAltimeterReportCharacteristicsType.h"
#include "extjson_uci/type/RadarAltimeterReportID_Type.h"
#include "extjson_uci/type/RadarAltimeterReportMDT.h"
#include "extjson_uci/type/RadarAltimeterReportMT.h"
#include "extjson_uci/type/RadarAltimeterReportMeasurementType.h"
#include "extjson_uci/type/RadarAltimeterReportResolutionType.h"
#include "extjson_uci/type/RadarAltimeterReportUncertaintyType.h"
#include "extjson_uci/type/RadarAltimeterSettingsCommandMDT.h"
#include "extjson_uci/type/RadarAltimeterSettingsCommandMT.h"
#include "extjson_uci/type/RadarAltimeterSettingsCommandStatusMDT.h"
#include "extjson_uci/type/RadarAltimeterSettingsCommandStatusMT.h"
#include "extjson_uci/type/RadarCollectionOptionsType.h"
#include "extjson_uci/type/RadarEmitterIdentityType.h"
#include "extjson_uci/type/RadarPointingTargetType.h"
#include "extjson_uci/type/RadarSpoilTaperType.h"
#include "extjson_uci/type/RadarSpoilType.h"
#include "extjson_uci/type/RadarTaperType.h"
#include "extjson_uci/type/RadarTaperWeightingFunctionType.h"
#include "extjson_uci/type/RangeDopplerResolutionType.h"
#include "extjson_uci/type/RangeElevationExtentChoiceType.h"
#include "extjson_uci/type/RangeExtentType.h"
#include "extjson_uci/type/RangeResolutionType.h"
#include "extjson_uci/type/RankCompareType.h"
#include "extjson_uci/type/RatesSettingsType.h"
#include "extjson_uci/type/ReadinessItemStatusType.h"
#include "extjson_uci/type/ReadinessRecordType.h"
#include "extjson_uci/type/ReadinessTimeSpanType.h"
#include "extjson_uci/type/ReceiverIdentificationType.h"
#include "extjson_uci/type/RecommendedWeaponsType.h"
#include "extjson_uci/type/ReconnaissanceStatusType.h"
#include "extjson_uci/type/RectangleType.h"
#include "extjson_uci/type/RectangularConeType.h"
#include "extjson_uci/type/ReferenceActivityMDT.h"
#include "extjson_uci/type/ReferenceActivityMT.h"
#include "extjson_uci/type/ReferenceActivityType.h"
#include "extjson_uci/type/ReferenceAssetKinematicsType.h"
#include "extjson_uci/type/ReferenceCapabilityMDT.h"
#include "extjson_uci/type/ReferenceCapabilityMT.h"
#include "extjson_uci/type/ReferenceCapabilityStatusMDT.h"
#include "extjson_uci/type/ReferenceCapabilityStatusMT.h"
#include "extjson_uci/type/ReferenceCapabilityTaxonomyType.h"
#include "uci/base/accessorType.h"
#include "uci/type/PMOP_SequenceType.h"
#include "uci/type/PO_ActivityCommandType.h"
#include "uci/type/PO_ActivityMDT.h"
#include "uci/type/PO_ActivityMT.h"
#include "uci/type/PO_ActivityType.h"
#include "uci/type/PO_AirTargetVolumeCommandType.h"
#include "uci/type/PO_AirTargetVolumeType.h"
#include "uci/type/PO_AirVolumeSensorReferencedType.h"
#include "uci/type/PO_AngleConstraintControlsStatusType.h"
#include "uci/type/PO_AngleConstraintControlsType.h"
#include "uci/type/PO_ApertureID_Type.h"
#include "uci/type/PO_CapabilityCommandType.h"
#include "uci/type/PO_CapabilityMDT.h"
#include "uci/type/PO_CapabilityMT.h"
#include "uci/type/PO_CapabilityOptionsType.h"
#include "uci/type/PO_CapabilityStatusMDT.h"
#include "uci/type/PO_CapabilityStatusMT.h"
#include "uci/type/PO_CapabilityStatusType.h"
#include "uci/type/PO_CapabilityType.h"
#include "uci/type/PO_CoastSettingOptionsType.h"
#include "uci/type/PO_CoastSettingValueType.h"
#include "uci/type/PO_CollectionConstraintsSettingsType.h"
#include "uci/type/PO_CollectionConstraintsStatusType.h"
#include "uci/type/PO_CollectionConstraintsType.h"
#include "uci/type/PO_CollectionPatternConstraintControlsType.h"
#include "uci/type/PO_ColorPatternConstraintControlsStatusType.h"
#include "uci/type/PO_CommandMDT.h"
#include "uci/type/PO_CommandMT.h"
#include "uci/type/PO_CommandResponseType.h"
#include "uci/type/PO_CommandStatusMDT.h"
#include "uci/type/PO_CommandStatusMT.h"
#include "uci/type/PO_CommandType.h"
#include "uci/type/PO_ComponentApertureSettingsType.h"
#include "uci/type/PO_ComponentApertureType.h"
#include "uci/type/PO_ComponentF_StopSettingsType.h"
#include "uci/type/PO_ComponentF_StopType.h"
#include "uci/type/PO_ComponentF_StopVariableType.h"
#include "uci/type/PO_ComponentFilterType.h"
#include "uci/type/PO_ComponentFocalPlaneArrayChannelType.h"
#include "uci/type/PO_ComponentFocalPlaneArrayOperationType.h"
#include "uci/type/PO_ComponentFocalPlaneArrayOpticalBandType.h"
#include "uci/type/PO_ComponentFocalPlaneArrayType.h"
#include "uci/type/PO_ComponentLensAssemblyFieldOfViewType.h"
#include "uci/type/PO_ComponentLensAssemblyFocusType.h"
#include "uci/type/PO_ComponentLensAssemblyType.h"
#include "uci/type/PO_ComponentLensAssemblyZoomAbsoluteType.h"
#include "uci/type/PO_ComponentLensAssemblyZoomIncrementalType.h"
#include "uci/type/PO_ComponentLensAssemblyZoomType.h"
#include "uci/type/PO_ComponentProcessingStageType.h"
#include "uci/type/PO_ComponentProductGeneratorType.h"
#include "uci/type/PO_ComponentSettingsBandpassFrequencyType.h"
#include "uci/type/PO_ComponentSettingsFilterType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayChannelType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayCollectionType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayOpticalBandType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayPixelAggregationType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayPixelPolarityType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayPixelScalingType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayScanDirectionType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType.h"
#include "uci/type/PO_ComponentSettingsFocalPlaneArrayType.h"
#include "uci/type/PO_ComponentSettingsFocusSweepSettingsStartingPositionType.h"
#include "uci/type/PO_ComponentSettingsFocusSweepSettingsStepIncrementType.h"
#include "uci/type/PO_ComponentSettingsFocusSweepSettingsStepTimeType.h"
#include "uci/type/PO_ComponentSettingsFocusSweepSettingsType.h"
#include "uci/type/PO_ComponentSettingsGeneratorSettingsType.h"
#include "uci/type/PO_ComponentSettingsLensAssemblyFieldOfViewType.h"
#include "uci/type/PO_ComponentSettingsLensAssemblyFocusType.h"
#include "uci/type/PO_ComponentSettingsLensAssemblyType.h"
#include "uci/type/PO_ComponentSettingsOutputProductSettingsType.h"
#include "uci/type/PO_ComponentSettingsProcessingStagePixelScalingType.h"
#include "uci/type/PO_ComponentSettingsProcessingStageProcessingSettingsType.h"
#include "uci/type/PO_ComponentSettingsProcessingStageSettingsType.h"
#include "uci/type/PO_ComponentSettingsProcessingStageType.h"
#include "uci/type/PO_ComponentSettingsProductGeneratorSettingsType.h"
#include "uci/type/PO_ComponentSettingsProductGeneratorType.h"
#include "uci/type/PO_ComponentSettingsProductSettingsType.h"
#include "uci/type/PO_ComponentSettingsType.h"
#include "uci/type/PO_ComponentStatusApertureSettingsType.h"
#include "uci/type/PO_ComponentStatusBandpassFrequencyType.h"
#include "uci/type/PO_ComponentStatusFilterType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayChannelType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayCollectionTimeType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionDataType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayOpticalBandType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayPixelAggregationType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayPixelPolarityType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayPixelScalingType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayScanDirectionType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType.h"
#include "uci/type/PO_ComponentStatusFocalPlaneArrayType.h"
#include "uci/type/PO_ComponentStatusFocusSweepSettingsType.h"
#include "uci/type/PO_ComponentStatusGeneratorSettingsType.h"
#include "uci/type/PO_ComponentStatusLensAssemblyFieldOfViewType.h"
#include "uci/type/PO_ComponentStatusLensAssemblyFocusType.h"
#include "uci/type/PO_ComponentStatusLensAssemblyType.h"
#include "uci/type/PO_ComponentStatusOutputProductSettingsType.h"
#include "uci/type/PO_ComponentStatusProcessingStagePixelScalingType.h"
#include "uci/type/PO_ComponentStatusProcessingStageProcessingSettingsType.h"
#include "uci/type/PO_ComponentStatusProcessingStageSettingsType.h"
#include "uci/type/PO_ComponentStatusProcessingStageType.h"
#include "uci/type/PO_ComponentStatusProductGeneratorSettingsType.h"
#include "uci/type/PO_ComponentStatusProductGeneratorType.h"
#include "uci/type/PO_ComponentStatusProductSettingsType.h"
#include "uci/type/PO_ComponentStatusType.h"
#include "uci/type/PO_ComponentType.h"
#include "uci/type/PO_ComponentWindowType.h"
#include "uci/type/PO_ConstraintControlsType.h"
#include "uci/type/PO_FPA_ChannelID_Type.h"
#include "uci/type/PO_FPA_ID_Type.h"
#include "uci/type/PO_FilterID_Type.h"
#include "uci/type/PO_GimbalOrientationConstraintControlsStatusType.h"
#include "uci/type/PO_GimbalOrientationConstraintType.h"
#include "uci/type/PO_LensID_Type.h"
#include "uci/type/PO_OffsetTrackSettingsType.h"
#include "uci/type/PO_ProcessingStageID_Type.h"
#include "uci/type/PO_ProductGeneratorID_Type.h"
#include "uci/type/PO_ProductGeneratorOutputID_Type.h"
#include "uci/type/PO_ProductOutputCommandImageryType.h"
#include "uci/type/PO_SettingsCommandMDT.h"
#include "uci/type/PO_SettingsCommandMT.h"
#include "uci/type/PO_SettingsCommandStatusMDT.h"
#include "uci/type/PO_SettingsCommandStatusMT.h"
#include "uci/type/PO_SlantRangeConstraintControlsStatusType.h"
#include "uci/type/PO_SlantRangeConstraintControlsType.h"
#include "uci/type/PO_SubCapabilitySettingsType.h"
#include "uci/type/PO_SubCapabilityType.h"
#include "uci/type/PO_SweepSpeedConstraintControlsStatusType.h"
#include "uci/type/PO_SweepSpeedConstraintControlsType.h"
#include "uci/type/PO_TargetType.h"
#include "uci/type/PO_TaskBaseType.h"
#include "uci/type/PO_TaskType.h"
#include "uci/type/PO_TechniqueCapabilityType.h"
#include "uci/type/PO_TechniqueSettingType.h"
#include "uci/type/PO_TrackActivityType.h"
#include "uci/type/PO_TrackCapabilityType.h"
#include "uci/type/PO_TrackDetailsType.h"
#include "uci/type/PO_TrackSettingsType.h"
#include "uci/type/PO_TrackStatusType.h"
#include "uci/type/PO_WindowID_Type.h"
#include "uci/type/PRI_DataBaseType.h"
#include "uci/type/PRI_DataType.h"
#include "uci/type/PRI_PW_Type.h"
#include "uci/type/PlanModificationRequestMT.h"
#include "uci/type/PlanModificationRequestStatusMDT.h"
#include "uci/type/PlanModificationRequestStatusMT.h"
#include "uci/type/PlanPartsBaseType.h"
#include "uci/type/PlanPartsInvalidType.h"
#include "uci/type/PlanPartsType.h"
#include "uci/type/PlanPolicyApplicablePlanType.h"
#include "uci/type/PlanPolicyType.h"
#include "uci/type/PlanReferenceID_ChoiceType.h"
#include "uci/type/PlanReferenceType.h"
#include "uci/type/PlanScoresID_Type.h"
#include "uci/type/PlanScoresMDT.h"
#include "uci/type/PlanScoresMT.h"
#include "uci/type/PlanScoresRequestMDT.h"
#include "uci/type/PlanScoresRequestMT.h"
#include "uci/type/PlanScoresRequestStatusMDT.h"
#include "uci/type/PlanScoresRequestStatusMT.h"
#include "uci/type/PlanScoringDescriptionType.h"
#include "uci/type/PlanScoringProcessType.h"
#include "uci/type/PlanStatusType.h"
#include "uci/type/PlanValidationInputsBaseType.h"
#include "uci/type/PlanVulnerabilityType.h"
#include "uci/type/PlanWindowModificationTypeChoiceType.h"
#include "uci/type/PlannedActivityBaseType.h"
#include "uci/type/PlannedActivityExecutionStatusType.h"
#include "uci/type/PlannedActivityID_Type.h"
#include "uci/type/PlannedActivityTriggerType.h"
#include "uci/type/PlannedActivityType.h"
#include "uci/type/PlannedCommActionExtendedType.h"
#include "uci/type/PlannedCommActionType.h"
#include "uci/type/PlannedCommCapabilityType.h"
#include "uci/type/PlannedControlInterfaceStateType.h"
#include "uci/type/PlannedControlInterfacesCommandType.h"
#include "uci/type/PlannedControlInterfacesType.h"
#include "uci/type/PlannedGatewayConfigurationType.h"
#include "uci/type/PlannedReleaseConditionsType.h"
#include "uci/type/PlannedSubsystemCommandType.h"
#include "uci/type/PlanningAllowedEscalationType.h"
#include "uci/type/PlanningAllowedType.h"
#include "uci/type/PlanningApplicabilitySystemType.h"
#include "uci/type/PlanningByCaseTriggerType.h"
#include "uci/type/PlanningByResultTriggerType.h"
#include "uci/type/PlanningCandidateBaseType.h"
#include "uci/type/PlanningDiscoveryBaseType.h"
#include "uci/type/PlanningFunctionID_Type.h"
#include "uci/type/PlanningFunctionMDT.h"
#include "uci/type/PlanningFunctionMT.h"
#include "uci/type/PlanningFunctionSettingsCommandMDT.h"
#include "uci/type/PlanningFunctionSettingsCommandMT.h"
#include "uci/type/PlanningFunctionSettingsCommandStatusMDT.h"
#include "uci/type/PlanningFunctionSettingsCommandStatusMT.h"
#include "uci/type/PlanningFunctionStatusMDT.h"
#include "uci/type/PlanningFunctionStatusMT.h"
#include "uci/type/PlanningGuidelineType.h"
#include "uci/type/PlanningInterfaceDetailsType.h"
#include "uci/type/PlanningInterfaceType.h"
#include "uci/type/PlanningInterfacesType.h"
#include "uci/type/PlanningLocationType.h"
#include "uci/type/PlanningPointPriorityType.h"
#include "uci/type/PlanningPointType.h"
#include "uci/type/PlanningProcessID_Type.h"
#include "uci/type/PlanningProcessTreeType.h"
#include "uci/type/PlanningTriggerType.h"
#include "uci/type/PlansActivationApprovalType.h"
#include "uci/type/PlansReferenceBaseType.h"
#include "uci/type/PlansReferenceType.h"
#include "uci/type/PlansRequirementsReferenceType.h"
#include "uci/type/PlatformFunctionStatusCategoryType.h"
#include "uci/type/PlatformFunctionStatusType.h"
#include "uci/type/PlatformIdentityConfidenceType.h"
#include "uci/type/PlatformIdentityType.h"
#include "uci/type/PlatformStatusSAM_Type.h"
#include "uci/type/PlatformStatusType.h"
#include "uci/type/Point2D_RangeType.h"
#include "uci/type/Point2D_ReferenceType.h"
#include "uci/type/Point2D_RelativeType.h"
#include "uci/type/Point2D_ReportedType.h"
#include "uci/type/Point2D_Type.h"
#include "uci/type/Point3D_RelativeType.h"
#include "uci/type/Point3D_Type.h"
#include "uci/type/Point4D_RelativeType.h"
#include "uci/type/Point4D_Type.h"
#include "uci/type/PointChoice3D_Type.h"
#include "uci/type/PointChoice4D_Type.h"
#include "uci/type/PointChoiceType.h"
#include "uci/type/PointTargetType.h"
#include "uci/type/PointingPlanWindowType.h"
#include "uci/type/PointingType.h"
#include "uci/type/PointingVectorParameterType.h"
#include "uci/type/PolarMotionType.h"
#include "uci/type/PolarizationControlType.h"
#include "uci/type/PolarizationType.h"
#include "uci/type/PolygonPointChoiceType.h"
#include "uci/type/PolygonRelativeType.h"
#include "uci/type/PolygonType.h"
#include "uci/type/PortConfigurationType.h"
#include "uci/type/PositionAccelerationCovarianceType.h"
#include "uci/type/PositionAndVelocityCovarianceType.h"
#include "uci/type/PositionLocationUncertaintyType.h"
#include "uci/type/PositionOrientationCovarianceType.h"
#include "uci/type/PositionPositionCovarianceType.h"
#include "uci/type/PositionReportDataType.h"
#include "uci/type/PositionReportDetailedMDT.h"
#include "uci/type/PositionReportDetailedMT.h"
#include "uci/type/PositionReportMDT.h"
#include "uci/type/PositionReportMT.h"
#include "uci/type/PositionSourceID_ChoiceType.h"
#include "uci/type/PositionVelocityCovarianceType.h"
#include "uci/type/PredictedThreatAssessmentRelativeType.h"
#include "uci/type/PredictedThreatAssessmentType.h"
#include "uci/type/PrimaryControllerType.h"
#include "uci/type/PrioritizationListID_Type.h"
#include "uci/type/PrioritizationListItemType.h"
#include "uci/type/PrioritizationListMDT.h"
#include "uci/type/PrioritizationListMT.h"
#include "uci/type/PrioritizationListValueType.h"
#include "uci/type/PrioritizationType.h"
#include "uci/type/ProcessingConstrainedSubPlanType.h"
#include "uci/type/ProcessingParametersPET.h"
#include "uci/type/ProcessingReportType.h"
#include "uci/type/ProcessingRequirementsType.h"
#include "uci/type/ProcessingResultsPET.h"
#include "uci/type/ProductClassificationPlanID_Type.h"
#include "uci/type/ProductClassificationPlanMDT.h"
#include "uci/type/ProductClassificationPlanMT.h"
#include "uci/type/ProductClassificationPlanType.h"
#include "uci/type/ProductClassificationReportID_Type.h"
#include "uci/type/ProductClassificationReportMDT.h"
#include "uci/type/ProductClassificationReportMT.h"
#include "uci/type/ProductClassificationRequestMDT.h"
#include "uci/type/ProductClassificationRequestMT.h"
#include "uci/type/ProductClassificationRequestStatusMDT.h"
#include "uci/type/ProductClassificationRequestStatusMT.h"
#include "uci/type/ProductClassificationStatusLabelType.h"
#include "uci/type/ProductClassificationStatusType.h"
#include "uci/type/ProductClassificationTaskMDT.h"
#include "uci/type/ProductClassificationTaskMT.h"
#include "uci/type/ProductClassificationTaskStatusMDT.h"
#include "uci/type/ProductClassificationTaskStatusMT.h"
#include "uci/type/ProductCollectionLocationType.h"
#include "uci/type/ProductCollectionPathType.h"
#include "uci/type/ProductDisseminationConfigurationID_Type.h"
#include "uci/type/ProductDisseminationConfigurationMDT.h"
#include "uci/type/ProductDisseminationConfigurationMT.h"
#include "uci/type/ProductDisseminationConfigurationType.h"
#include "uci/type/ProductDisseminationDestinationID_Type.h"
#include "uci/type/ProductDisseminationDestinationMDT.h"
#include "uci/type/ProductDisseminationDestinationMT.h"
#include "uci/type/ProductDisseminationGatewayType.h"
#include "uci/type/ProductDisseminationPlanID_Type.h"
#include "uci/type/ProductDisseminationPlanMDT.h"
#include "uci/type/ProductDisseminationPlanMT.h"
#include "uci/type/ProductDisseminationPlanType.h"
#include "uci/type/ProductDisseminationReportID_Type.h"
#include "uci/type/ProductDisseminationReportMDT.h"
#include "uci/type/ProductDisseminationReportMT.h"
#include "uci/type/ProductDisseminationRequestMDT.h"
#include "uci/type/ProductDisseminationRequestMT.h"
#include "uci/type/ProductDisseminationRequestStatusMDT.h"
#include "uci/type/ProductDisseminationRequestStatusMT.h"
#include "uci/type/ProductDisseminationStatusType.h"
#include "uci/type/ProductDisseminationTaskMDT.h"
#include "uci/type/ProductDisseminationTaskMT.h"
#include "uci/type/ProductDisseminationTaskStatusMDT.h"
#include "uci/type/ProductDisseminationTaskStatusMT.h"
#include "uci/type/ProductDownloadPlanID_Type.h"
#include "uci/type/ProductDownloadPlanMDT.h"
#include "uci/type/ProductDownloadPlanMT.h"
#include "uci/type/ProductDownloadPlanType.h"
#include "uci/type/ProductDownloadReportID_Type.h"
#include "uci/type/ProductDownloadReportMDT.h"
#include "uci/type/ProductDownloadReportMT.h"
#include "uci/type/ProductDownloadRequestMDT.h"
#include "uci/type/ProductDownloadRequestMT.h"
#include "uci/type/ProductDownloadRequestStatusMDT.h"
#include "uci/type/ProductDownloadRequestStatusMT.h"
#include "uci/type/ProductDownloadStatusType.h"
#include "uci/type/ProductDownloadTaskMDT.h"
#include "uci/type/ProductDownloadTaskMT.h"
#include "uci/type/ProductDownloadTaskStatusMDT.h"
#include "uci/type/ProductDownloadTaskStatusMT.h"
#include "uci/type/ProductFilterType.h"
#include "uci/type/ProductGeospatialLocationType.h"
#include "uci/type/ProductLocationID_Type.h"
#include "uci/type/ProductLocationMDT.h"
#include "uci/type/ProductLocationMT.h"
#include "uci/type/ProductLocationType.h"
#include "uci/type/ProductManagementTaskDataType.h"
#include "uci/type/ProductManagementTaskStatusDataType.h"
#include "uci/type/ProductMetadataID_Type.h"
#include "uci/type/ProductMetadataMDT.h"
#include "uci/type/ProductMetadataMT.h"
#include "uci/type/ProductNeededByType.h"
#include "uci/type/ProductOutputCapabilityImageryType.h"
#include "uci/type/ProductOutputCapabilityStatusImageryType.h"
#include "uci/type/ProductOutputCommandBasicType.h"
#include "uci/type/ProductOutputCommandImageryType.h"
#include "uci/type/ProductOutputCommandSMTI_Type.h"
#include "uci/type/ProductOutputStatusType.h"
#include "uci/type/ProductOutputType.h"
#include "uci/type/ProductParentType.h"
#include "uci/type/ProductProcessingClassificationType.h"
#include "uci/type/ProductProcessingFunctionMDT.h"
#include "uci/type/ProductProcessingFunctionMT.h"
#include "uci/type/ProductProcessingFunctionStatusMDT.h"
#include "uci/type/ProductProcessingFunctionStatusMT.h"
#include "uci/type/ProductProcessingFunctionStatusType.h"
#include "uci/type/ProductProcessingFunctionType.h"
#include "uci/type/ProductProcessingPlanID_Type.h"
#include "uci/type/ProductProcessingPlanMDT.h"
#include "uci/type/ProductProcessingPlanMT.h"
#include "uci/type/ProductProcessingPlanType.h"
#include "uci/type/ProductProcessingReportID_Type.h"
#include "uci/type/ProductProcessingReportMDT.h"
#include "uci/type/ProductProcessingReportMT.h"
#include "uci/type/ProductProcessingRequestMDT.h"
#include "uci/type/ProductProcessingRequestMT.h"
#include "uci/type/ProductProcessingRequestStatusMDT.h"
#include "uci/type/ProductProcessingRequestStatusMT.h"
#include "uci/type/ProductProcessingStatusType.h"
#include "uci/type/ProductProcessingTaskMDT.h"
#include "uci/type/ProductProcessingTaskMT.h"
#include "uci/type/ProductProcessingTaskStatusMDT.h"
#include "uci/type/ProductProcessingTaskStatusMT.h"
#include "uci/type/ProductProcessingType.h"
#include "uci/type/ProductRateSettingsType.h"
#include "uci/type/ProductReferenceByParentType.h"
#include "uci/type/ProductReferenceType.h"
#include "uci/type/ProductResolutionSettingsType.h"
#include "uci/type/ProductResolutionType.h"
#include "uci/type/ProductSizeSettingsType.h"
#include "uci/type/ProductSystemLocationType.h"
#include "uci/type/ProductTypeFilterType.h"
#include "uci/type/PropagatorChoiceType.h"
#include "uci/type/PropagatorSettingsChoiceType.h"
#include "uci/type/PropagatorSettingsDataRequestMDT.h"
#include "uci/type/PropagatorSettingsDataRequestMT.h"
#include "uci/type/PropagatorSettingsDataRequestStatusMDT.h"
#include "uci/type/PropagatorSettingsDataRequestStatusMT.h"
#include "uci/type/PropagatorSettingsID_Type.h"
#include "uci/type/PropagatorSettingsMDT.h"
#include "uci/type/PropagatorSettingsMT.h"
#include "uci/type/PropagatorType.h"
#include "uci/type/ProtectedAssetAndThreatType.h"
#include "uci/type/ProtectedAssetReturnPowerType.h"
#include "uci/type/ProtectedAssetType.h"
#include "uci/type/ProximityOperationsType.h"
#include "uci/type/ProximityOrbitChoiceType.h"
#include "uci/type/PulseDataCollectCommandType.h"
#include "uci/type/PulseDataID_Type.h"
#include "uci/type/PulseDataMDT.h"
#include "uci/type/PulseDataMT.h"
#include "uci/type/PulseDataSourceType.h"
#include "uci/type/PulseType.h"
#include "uci/type/PumpComponentExtendedStatusType.h"
#include "uci/type/QualifyingTagsType.h"
#include "uci/type/QuaternionAttitudeType.h"
#include "uci/type/QuaternionType.h"
#include "uci/type/QueryComparisonType.h"
#include "uci/type/QueryContainsType.h"
#include "uci/type/QueryCountType.h"
#include "uci/type/QueryCountValueType.h"
#include "uci/type/QueryDataRequestMDT.h"
#include "uci/type/QueryDataRequestMT.h"
#include "uci/type/QueryDataRequestStatusMDT.h"
#include "uci/type/QueryDataRequestStatusMT.h"
#include "uci/type/QueryEqualsType.h"
#include "uci/type/QueryExistsType.h"
#include "uci/type/QueryInstanceOfType.h"
#include "uci/type/QueryMatchType.h"
#include "uci/type/QueryMessageType.h"
#include "uci/type/QueryPET.h"
#include "uci/type/QueryPaginationType.h"
#include "uci/type/QueryResultType.h"
#include "uci/type/QuerySpecificDataPET.h"
#include "uci/type/QueryStepType.h"
#include "uci/type/QueryTopicPairType.h"
#include "uci/type/QueryType.h"
#include "uci/type/RCS_MedianType.h"
#include "uci/type/RCS_ParamsType.h"
#include "uci/type/RDMA_InitializeID_Type.h"
#include "uci/type/RDMA_InitializeMDT.h"
#include "uci/type/RDMA_InitializeMT.h"
#include "uci/type/RDMA_InitializeSetupID_Type.h"
#include "uci/type/RDMA_InitializeSetupMDT.h"
#include "uci/type/RDMA_InitializeSetupMT.h"
#include "uci/type/RaceTrackOrbitType.h"
#include "uci/type/RadarActivityCommandType.h"
#include "uci/type/RadarAltimeterActivityCommandType.h"
#include "uci/type/RadarAltimeterActivityEstimatedPerformanceType.h"
#include "uci/type/RadarAltimeterActivityMDT.h"
#include "uci/type/RadarAltimeterActivityMT.h"
#include "uci/type/RadarAltimeterActivityMetricsType.h"
#include "uci/type/RadarAltimeterActivityPredictedActivityDetailType.h"
#include "uci/type/RadarAltimeterActivityPredictedCollectionsType.h"
#include "uci/type/RadarAltimeterActivityType.h"
#include "uci/type/RadarAltimeterAngleConstraintsType.h"
#include "uci/type/RadarAltimeterCapabilityCommandType.h"
#include "uci/type/RadarAltimeterCapabilityMDT.h"
#include "uci/type/RadarAltimeterCapabilityMT.h"
#include "uci/type/RadarAltimeterCapabilityOptionsType.h"
#include "uci/type/RadarAltimeterCapabilityStatusMDT.h"
#include "uci/type/RadarAltimeterCapabilityStatusMT.h"
#include "uci/type/RadarAltimeterCapabilityType.h"
#include "uci/type/RadarAltimeterCollectionConstraintsType.h"
#include "uci/type/RadarAltimeterCollectionOptionsType.h"
#include "uci/type/RadarAltimeterCommandMDT.h"
#include "uci/type/RadarAltimeterCommandMT.h"
#include "uci/type/RadarAltimeterCommandStatusMDT.h"
#include "uci/type/RadarAltimeterCommandStatusMT.h"
#include "uci/type/RadarAltimeterCommandType.h"
#include "uci/type/RadarAltimeterReportAngularOffsetType.h"
#include "uci/type/RadarAltimeterReportCharacteristicsType.h"
#include "uci/type/RadarAltimeterReportID_Type.h"
#include "uci/type/RadarAltimeterReportMDT.h"
#include "uci/type/RadarAltimeterReportMT.h"
#include "uci/type/RadarAltimeterReportMeasurementType.h"
#include "uci/type/RadarAltimeterReportResolutionType.h"
#include "uci/type/RadarAltimeterReportUncertaintyType.h"
#include "uci/type/RadarAltimeterSettingsCommandMDT.h"
#include "uci/type/RadarAltimeterSettingsCommandMT.h"
#include "uci/type/RadarAltimeterSettingsCommandStatusMDT.h"
#include "uci/type/RadarAltimeterSettingsCommandStatusMT.h"
#include "uci/type/RadarCollectionOptionsType.h"
#include "uci/type/RadarEmitterIdentityType.h"
#include "uci/type/RadarPointingTargetType.h"
#include "uci/type/RadarSpoilTaperType.h"
#include "uci/type/RadarSpoilType.h"
#include "uci/type/RadarTaperType.h"
#include "uci/type/RadarTaperWeightingFunctionType.h"
#include "uci/type/RangeDopplerResolutionType.h"
#include "uci/type/RangeElevationExtentChoiceType.h"
#include "uci/type/RangeExtentType.h"
#include "uci/type/RangeResolutionType.h"
#include "uci/type/RankCompareType.h"
#include "uci/type/RatesSettingsType.h"
#include "uci/type/ReadinessItemStatusType.h"
#include "uci/type/ReadinessRecordType.h"
#include "uci/type/ReadinessTimeSpanType.h"
#include "uci/type/ReceiverIdentificationType.h"
#include "uci/type/RecommendedWeaponsType.h"
#include "uci/type/ReconnaissanceStatusType.h"
#include "uci/type/RectangleType.h"
#include "uci/type/RectangularConeType.h"
#include "uci/type/ReferenceActivityMDT.h"
#include "uci/type/ReferenceActivityMT.h"
#include "uci/type/ReferenceActivityType.h"
#include "uci/type/ReferenceAssetKinematicsType.h"
#include "uci/type/ReferenceCapabilityMDT.h"
#include "uci/type/ReferenceCapabilityMT.h"
#include "uci/type/ReferenceCapabilityStatusMDT.h"
#include "uci/type/ReferenceCapabilityStatusMT.h"
#include "uci/type/ReferenceCapabilityTaxonomyType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all base data types are declared */
namespace base {

boost::optional<std::string> ExternalizerWrite6::write(const uci::base::Accessor& accessor, boost::property_tree::ptree& propTree) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::planModificationRequestMT:
      return extjson_uci::type::PlanModificationRequestMT::serialize(dynamic_cast<const uci::type::PlanModificationRequestMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planModificationRequestStatusMDT:
      return extjson_uci::type::PlanModificationRequestStatusMDT::serialize(dynamic_cast<const uci::type::PlanModificationRequestStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planModificationRequestStatusMT:
      return extjson_uci::type::PlanModificationRequestStatusMT::serialize(dynamic_cast<const uci::type::PlanModificationRequestStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plannedActivityBaseType:
      return extjson_uci::type::PlannedActivityBaseType::serialize(dynamic_cast<const uci::type::PlannedActivityBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plannedActivityExecutionStatusType:
      return extjson_uci::type::PlannedActivityExecutionStatusType::serialize(dynamic_cast<const uci::type::PlannedActivityExecutionStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plannedActivityID_Type:
      return extjson_uci::type::PlannedActivityID_Type::serialize(dynamic_cast<const uci::type::PlannedActivityID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plannedActivityTriggerType:
      return extjson_uci::type::PlannedActivityTriggerType::serialize(dynamic_cast<const uci::type::PlannedActivityTriggerType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plannedActivityType:
      return extjson_uci::type::PlannedActivityType::serialize(dynamic_cast<const uci::type::PlannedActivityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plannedCommActionExtendedType:
      return extjson_uci::type::PlannedCommActionExtendedType::serialize(dynamic_cast<const uci::type::PlannedCommActionExtendedType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plannedCommActionType:
      return extjson_uci::type::PlannedCommActionType::serialize(dynamic_cast<const uci::type::PlannedCommActionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plannedCommCapabilityType:
      return extjson_uci::type::PlannedCommCapabilityType::serialize(dynamic_cast<const uci::type::PlannedCommCapabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plannedControlInterfacesCommandType:
      return extjson_uci::type::PlannedControlInterfacesCommandType::serialize(dynamic_cast<const uci::type::PlannedControlInterfacesCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plannedControlInterfaceStateType:
      return extjson_uci::type::PlannedControlInterfaceStateType::serialize(dynamic_cast<const uci::type::PlannedControlInterfaceStateType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plannedControlInterfacesType:
      return extjson_uci::type::PlannedControlInterfacesType::serialize(dynamic_cast<const uci::type::PlannedControlInterfacesType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plannedGatewayConfigurationType:
      return extjson_uci::type::PlannedGatewayConfigurationType::serialize(dynamic_cast<const uci::type::PlannedGatewayConfigurationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plannedReleaseConditionsType:
      return extjson_uci::type::PlannedReleaseConditionsType::serialize(dynamic_cast<const uci::type::PlannedReleaseConditionsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plannedSubsystemCommandType:
      return extjson_uci::type::PlannedSubsystemCommandType::serialize(dynamic_cast<const uci::type::PlannedSubsystemCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningAllowedEscalationType:
      return extjson_uci::type::PlanningAllowedEscalationType::serialize(dynamic_cast<const uci::type::PlanningAllowedEscalationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningAllowedType:
      return extjson_uci::type::PlanningAllowedType::serialize(dynamic_cast<const uci::type::PlanningAllowedType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningApplicabilitySystemType:
      return extjson_uci::type::PlanningApplicabilitySystemType::serialize(dynamic_cast<const uci::type::PlanningApplicabilitySystemType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningByCaseTriggerType:
      return extjson_uci::type::PlanningByCaseTriggerType::serialize(dynamic_cast<const uci::type::PlanningByCaseTriggerType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningByResultTriggerType:
      return extjson_uci::type::PlanningByResultTriggerType::serialize(dynamic_cast<const uci::type::PlanningByResultTriggerType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningCandidateBaseType:
      return extjson_uci::type::PlanningCandidateBaseType::serialize(dynamic_cast<const uci::type::PlanningCandidateBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningDiscoveryBaseType:
      return extjson_uci::type::PlanningDiscoveryBaseType::serialize(dynamic_cast<const uci::type::PlanningDiscoveryBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningFunctionID_Type:
      return extjson_uci::type::PlanningFunctionID_Type::serialize(dynamic_cast<const uci::type::PlanningFunctionID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningFunctionMDT:
      return extjson_uci::type::PlanningFunctionMDT::serialize(dynamic_cast<const uci::type::PlanningFunctionMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningFunctionMT:
      return extjson_uci::type::PlanningFunctionMT::serialize(dynamic_cast<const uci::type::PlanningFunctionMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningFunctionSettingsCommandMDT:
      return extjson_uci::type::PlanningFunctionSettingsCommandMDT::serialize(dynamic_cast<const uci::type::PlanningFunctionSettingsCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningFunctionSettingsCommandMT:
      return extjson_uci::type::PlanningFunctionSettingsCommandMT::serialize(dynamic_cast<const uci::type::PlanningFunctionSettingsCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningFunctionSettingsCommandStatusMDT:
      return extjson_uci::type::PlanningFunctionSettingsCommandStatusMDT::serialize(dynamic_cast<const uci::type::PlanningFunctionSettingsCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningFunctionSettingsCommandStatusMT:
      return extjson_uci::type::PlanningFunctionSettingsCommandStatusMT::serialize(dynamic_cast<const uci::type::PlanningFunctionSettingsCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningFunctionStatusMDT:
      return extjson_uci::type::PlanningFunctionStatusMDT::serialize(dynamic_cast<const uci::type::PlanningFunctionStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningFunctionStatusMT:
      return extjson_uci::type::PlanningFunctionStatusMT::serialize(dynamic_cast<const uci::type::PlanningFunctionStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningGuidelineType:
      return extjson_uci::type::PlanningGuidelineType::serialize(dynamic_cast<const uci::type::PlanningGuidelineType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningInterfaceDetailsType:
      return extjson_uci::type::PlanningInterfaceDetailsType::serialize(dynamic_cast<const uci::type::PlanningInterfaceDetailsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningInterfacesType:
      return extjson_uci::type::PlanningInterfacesType::serialize(dynamic_cast<const uci::type::PlanningInterfacesType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningInterfaceType:
      return extjson_uci::type::PlanningInterfaceType::serialize(dynamic_cast<const uci::type::PlanningInterfaceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningLocationType:
      return extjson_uci::type::PlanningLocationType::serialize(dynamic_cast<const uci::type::PlanningLocationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningPointPriorityType:
      return extjson_uci::type::PlanningPointPriorityType::serialize(dynamic_cast<const uci::type::PlanningPointPriorityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningPointType:
      return extjson_uci::type::PlanningPointType::serialize(dynamic_cast<const uci::type::PlanningPointType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningProcessID_Type:
      return extjson_uci::type::PlanningProcessID_Type::serialize(dynamic_cast<const uci::type::PlanningProcessID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningProcessTreeType:
      return extjson_uci::type::PlanningProcessTreeType::serialize(dynamic_cast<const uci::type::PlanningProcessTreeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planningTriggerType:
      return extjson_uci::type::PlanningTriggerType::serialize(dynamic_cast<const uci::type::PlanningTriggerType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planPartsBaseType:
      return extjson_uci::type::PlanPartsBaseType::serialize(dynamic_cast<const uci::type::PlanPartsBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planPartsInvalidType:
      return extjson_uci::type::PlanPartsInvalidType::serialize(dynamic_cast<const uci::type::PlanPartsInvalidType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planPartsType:
      return extjson_uci::type::PlanPartsType::serialize(dynamic_cast<const uci::type::PlanPartsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planPolicyApplicablePlanType:
      return extjson_uci::type::PlanPolicyApplicablePlanType::serialize(dynamic_cast<const uci::type::PlanPolicyApplicablePlanType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planPolicyType:
      return extjson_uci::type::PlanPolicyType::serialize(dynamic_cast<const uci::type::PlanPolicyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planReferenceID_ChoiceType:
      return extjson_uci::type::PlanReferenceID_ChoiceType::serialize(dynamic_cast<const uci::type::PlanReferenceID_ChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planReferenceType:
      return extjson_uci::type::PlanReferenceType::serialize(dynamic_cast<const uci::type::PlanReferenceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plansActivationApprovalType:
      return extjson_uci::type::PlansActivationApprovalType::serialize(dynamic_cast<const uci::type::PlansActivationApprovalType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planScoresID_Type:
      return extjson_uci::type::PlanScoresID_Type::serialize(dynamic_cast<const uci::type::PlanScoresID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planScoresMDT:
      return extjson_uci::type::PlanScoresMDT::serialize(dynamic_cast<const uci::type::PlanScoresMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planScoresMT:
      return extjson_uci::type::PlanScoresMT::serialize(dynamic_cast<const uci::type::PlanScoresMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planScoresRequestMDT:
      return extjson_uci::type::PlanScoresRequestMDT::serialize(dynamic_cast<const uci::type::PlanScoresRequestMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planScoresRequestMT:
      return extjson_uci::type::PlanScoresRequestMT::serialize(dynamic_cast<const uci::type::PlanScoresRequestMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planScoresRequestStatusMDT:
      return extjson_uci::type::PlanScoresRequestStatusMDT::serialize(dynamic_cast<const uci::type::PlanScoresRequestStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planScoresRequestStatusMT:
      return extjson_uci::type::PlanScoresRequestStatusMT::serialize(dynamic_cast<const uci::type::PlanScoresRequestStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planScoringDescriptionType:
      return extjson_uci::type::PlanScoringDescriptionType::serialize(dynamic_cast<const uci::type::PlanScoringDescriptionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planScoringProcessType:
      return extjson_uci::type::PlanScoringProcessType::serialize(dynamic_cast<const uci::type::PlanScoringProcessType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plansReferenceBaseType:
      return extjson_uci::type::PlansReferenceBaseType::serialize(dynamic_cast<const uci::type::PlansReferenceBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plansReferenceType:
      return extjson_uci::type::PlansReferenceType::serialize(dynamic_cast<const uci::type::PlansReferenceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::plansRequirementsReferenceType:
      return extjson_uci::type::PlansRequirementsReferenceType::serialize(dynamic_cast<const uci::type::PlansRequirementsReferenceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planStatusType:
      return extjson_uci::type::PlanStatusType::serialize(dynamic_cast<const uci::type::PlanStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planValidationInputsBaseType:
      return extjson_uci::type::PlanValidationInputsBaseType::serialize(dynamic_cast<const uci::type::PlanValidationInputsBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planVulnerabilityType:
      return extjson_uci::type::PlanVulnerabilityType::serialize(dynamic_cast<const uci::type::PlanVulnerabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::planWindowModificationTypeChoiceType:
      return extjson_uci::type::PlanWindowModificationTypeChoiceType::serialize(dynamic_cast<const uci::type::PlanWindowModificationTypeChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::platformFunctionStatusCategoryType:
      return extjson_uci::type::PlatformFunctionStatusCategoryType::serialize(dynamic_cast<const uci::type::PlatformFunctionStatusCategoryType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::platformFunctionStatusType:
      return extjson_uci::type::PlatformFunctionStatusType::serialize(dynamic_cast<const uci::type::PlatformFunctionStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::platformIdentityConfidenceType:
      return extjson_uci::type::PlatformIdentityConfidenceType::serialize(dynamic_cast<const uci::type::PlatformIdentityConfidenceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::platformIdentityType:
      return extjson_uci::type::PlatformIdentityType::serialize(dynamic_cast<const uci::type::PlatformIdentityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::platformStatusSAM_Type:
      return extjson_uci::type::PlatformStatusSAM_Type::serialize(dynamic_cast<const uci::type::PlatformStatusSAM_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::platformStatusType:
      return extjson_uci::type::PlatformStatusType::serialize(dynamic_cast<const uci::type::PlatformStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pMOP_SequenceType:
      return extjson_uci::type::PMOP_SequenceType::serialize(dynamic_cast<const uci::type::PMOP_SequenceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ActivityCommandType:
      return extjson_uci::type::PO_ActivityCommandType::serialize(dynamic_cast<const uci::type::PO_ActivityCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ActivityMDT:
      return extjson_uci::type::PO_ActivityMDT::serialize(dynamic_cast<const uci::type::PO_ActivityMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ActivityMT:
      return extjson_uci::type::PO_ActivityMT::serialize(dynamic_cast<const uci::type::PO_ActivityMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ActivityType:
      return extjson_uci::type::PO_ActivityType::serialize(dynamic_cast<const uci::type::PO_ActivityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_AirTargetVolumeCommandType:
      return extjson_uci::type::PO_AirTargetVolumeCommandType::serialize(dynamic_cast<const uci::type::PO_AirTargetVolumeCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_AirTargetVolumeType:
      return extjson_uci::type::PO_AirTargetVolumeType::serialize(dynamic_cast<const uci::type::PO_AirTargetVolumeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_AirVolumeSensorReferencedType:
      return extjson_uci::type::PO_AirVolumeSensorReferencedType::serialize(dynamic_cast<const uci::type::PO_AirVolumeSensorReferencedType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_AngleConstraintControlsStatusType:
      return extjson_uci::type::PO_AngleConstraintControlsStatusType::serialize(dynamic_cast<const uci::type::PO_AngleConstraintControlsStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_AngleConstraintControlsType:
      return extjson_uci::type::PO_AngleConstraintControlsType::serialize(dynamic_cast<const uci::type::PO_AngleConstraintControlsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ApertureID_Type:
      return extjson_uci::type::PO_ApertureID_Type::serialize(dynamic_cast<const uci::type::PO_ApertureID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CapabilityCommandType:
      return extjson_uci::type::PO_CapabilityCommandType::serialize(dynamic_cast<const uci::type::PO_CapabilityCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CapabilityMDT:
      return extjson_uci::type::PO_CapabilityMDT::serialize(dynamic_cast<const uci::type::PO_CapabilityMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CapabilityMT:
      return extjson_uci::type::PO_CapabilityMT::serialize(dynamic_cast<const uci::type::PO_CapabilityMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CapabilityOptionsType:
      return extjson_uci::type::PO_CapabilityOptionsType::serialize(dynamic_cast<const uci::type::PO_CapabilityOptionsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CapabilityStatusMDT:
      return extjson_uci::type::PO_CapabilityStatusMDT::serialize(dynamic_cast<const uci::type::PO_CapabilityStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CapabilityStatusMT:
      return extjson_uci::type::PO_CapabilityStatusMT::serialize(dynamic_cast<const uci::type::PO_CapabilityStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CapabilityStatusType:
      return extjson_uci::type::PO_CapabilityStatusType::serialize(dynamic_cast<const uci::type::PO_CapabilityStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CapabilityType:
      return extjson_uci::type::PO_CapabilityType::serialize(dynamic_cast<const uci::type::PO_CapabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CoastSettingOptionsType:
      return extjson_uci::type::PO_CoastSettingOptionsType::serialize(dynamic_cast<const uci::type::PO_CoastSettingOptionsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CoastSettingValueType:
      return extjson_uci::type::PO_CoastSettingValueType::serialize(dynamic_cast<const uci::type::PO_CoastSettingValueType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CollectionConstraintsSettingsType:
      return extjson_uci::type::PO_CollectionConstraintsSettingsType::serialize(dynamic_cast<const uci::type::PO_CollectionConstraintsSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CollectionConstraintsStatusType:
      return extjson_uci::type::PO_CollectionConstraintsStatusType::serialize(dynamic_cast<const uci::type::PO_CollectionConstraintsStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CollectionConstraintsType:
      return extjson_uci::type::PO_CollectionConstraintsType::serialize(dynamic_cast<const uci::type::PO_CollectionConstraintsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CollectionPatternConstraintControlsType:
      return extjson_uci::type::PO_CollectionPatternConstraintControlsType::serialize(dynamic_cast<const uci::type::PO_CollectionPatternConstraintControlsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ColorPatternConstraintControlsStatusType:
      return extjson_uci::type::PO_ColorPatternConstraintControlsStatusType::serialize(dynamic_cast<const uci::type::PO_ColorPatternConstraintControlsStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CommandMDT:
      return extjson_uci::type::PO_CommandMDT::serialize(dynamic_cast<const uci::type::PO_CommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CommandMT:
      return extjson_uci::type::PO_CommandMT::serialize(dynamic_cast<const uci::type::PO_CommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CommandResponseType:
      return extjson_uci::type::PO_CommandResponseType::serialize(dynamic_cast<const uci::type::PO_CommandResponseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CommandStatusMDT:
      return extjson_uci::type::PO_CommandStatusMDT::serialize(dynamic_cast<const uci::type::PO_CommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CommandStatusMT:
      return extjson_uci::type::PO_CommandStatusMT::serialize(dynamic_cast<const uci::type::PO_CommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_CommandType:
      return extjson_uci::type::PO_CommandType::serialize(dynamic_cast<const uci::type::PO_CommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentApertureSettingsType:
      return extjson_uci::type::PO_ComponentApertureSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentApertureSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentApertureType:
      return extjson_uci::type::PO_ComponentApertureType::serialize(dynamic_cast<const uci::type::PO_ComponentApertureType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentF_StopSettingsType:
      return extjson_uci::type::PO_ComponentF_StopSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentF_StopSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentF_StopType:
      return extjson_uci::type::PO_ComponentF_StopType::serialize(dynamic_cast<const uci::type::PO_ComponentF_StopType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentF_StopVariableType:
      return extjson_uci::type::PO_ComponentF_StopVariableType::serialize(dynamic_cast<const uci::type::PO_ComponentF_StopVariableType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentFilterType:
      return extjson_uci::type::PO_ComponentFilterType::serialize(dynamic_cast<const uci::type::PO_ComponentFilterType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentFocalPlaneArrayChannelType:
      return extjson_uci::type::PO_ComponentFocalPlaneArrayChannelType::serialize(dynamic_cast<const uci::type::PO_ComponentFocalPlaneArrayChannelType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentFocalPlaneArrayOperationType:
      return extjson_uci::type::PO_ComponentFocalPlaneArrayOperationType::serialize(dynamic_cast<const uci::type::PO_ComponentFocalPlaneArrayOperationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentFocalPlaneArrayOpticalBandType:
      return extjson_uci::type::PO_ComponentFocalPlaneArrayOpticalBandType::serialize(dynamic_cast<const uci::type::PO_ComponentFocalPlaneArrayOpticalBandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentFocalPlaneArrayType:
      return extjson_uci::type::PO_ComponentFocalPlaneArrayType::serialize(dynamic_cast<const uci::type::PO_ComponentFocalPlaneArrayType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentLensAssemblyFieldOfViewType:
      return extjson_uci::type::PO_ComponentLensAssemblyFieldOfViewType::serialize(dynamic_cast<const uci::type::PO_ComponentLensAssemblyFieldOfViewType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentLensAssemblyFocusType:
      return extjson_uci::type::PO_ComponentLensAssemblyFocusType::serialize(dynamic_cast<const uci::type::PO_ComponentLensAssemblyFocusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentLensAssemblyType:
      return extjson_uci::type::PO_ComponentLensAssemblyType::serialize(dynamic_cast<const uci::type::PO_ComponentLensAssemblyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentLensAssemblyZoomAbsoluteType:
      return extjson_uci::type::PO_ComponentLensAssemblyZoomAbsoluteType::serialize(dynamic_cast<const uci::type::PO_ComponentLensAssemblyZoomAbsoluteType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentLensAssemblyZoomIncrementalType:
      return extjson_uci::type::PO_ComponentLensAssemblyZoomIncrementalType::serialize(dynamic_cast<const uci::type::PO_ComponentLensAssemblyZoomIncrementalType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentLensAssemblyZoomType:
      return extjson_uci::type::PO_ComponentLensAssemblyZoomType::serialize(dynamic_cast<const uci::type::PO_ComponentLensAssemblyZoomType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentProcessingStageType:
      return extjson_uci::type::PO_ComponentProcessingStageType::serialize(dynamic_cast<const uci::type::PO_ComponentProcessingStageType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentProductGeneratorType:
      return extjson_uci::type::PO_ComponentProductGeneratorType::serialize(dynamic_cast<const uci::type::PO_ComponentProductGeneratorType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsBandpassFrequencyType:
      return extjson_uci::type::PO_ComponentSettingsBandpassFrequencyType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsBandpassFrequencyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFilterType:
      return extjson_uci::type::PO_ComponentSettingsFilterType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFilterType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayChannelType:
      return extjson_uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocalPlaneArrayChannelType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayCollectionType:
      return extjson_uci::type::PO_ComponentSettingsFocalPlaneArrayCollectionType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocalPlaneArrayCollectionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType:
      return extjson_uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType:
      return extjson_uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocalPlaneArrayNonUniformityCorrectionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayOpticalBandType:
      return extjson_uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocalPlaneArrayOpticalBandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayPixelAggregationType:
      return extjson_uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelAggregationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayPixelPolarityType:
      return extjson_uci::type::PO_ComponentSettingsFocalPlaneArrayPixelPolarityType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelPolarityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType:
      return extjson_uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayPixelScalingType:
      return extjson_uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocalPlaneArrayPixelScalingType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayScanDirectionType:
      return extjson_uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocalPlaneArrayScanDirectionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType:
      return extjson_uci::type::PO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocalPlaneArrayTimeDelayIntegrationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayType:
      return extjson_uci::type::PO_ComponentSettingsFocalPlaneArrayType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocalPlaneArrayType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocusSweepSettingsStartingPositionType:
      return extjson_uci::type::PO_ComponentSettingsFocusSweepSettingsStartingPositionType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocusSweepSettingsStartingPositionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocusSweepSettingsStepIncrementType:
      return extjson_uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocusSweepSettingsStepIncrementType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocusSweepSettingsStepTimeType:
      return extjson_uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocusSweepSettingsStepTimeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsFocusSweepSettingsType:
      return extjson_uci::type::PO_ComponentSettingsFocusSweepSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsFocusSweepSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsGeneratorSettingsType:
      return extjson_uci::type::PO_ComponentSettingsGeneratorSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsGeneratorSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsLensAssemblyFieldOfViewType:
      return extjson_uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsLensAssemblyFieldOfViewType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsLensAssemblyFocusType:
      return extjson_uci::type::PO_ComponentSettingsLensAssemblyFocusType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsLensAssemblyFocusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsLensAssemblyType:
      return extjson_uci::type::PO_ComponentSettingsLensAssemblyType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsLensAssemblyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsOutputProductSettingsType:
      return extjson_uci::type::PO_ComponentSettingsOutputProductSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsOutputProductSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsProcessingStagePixelScalingType:
      return extjson_uci::type::PO_ComponentSettingsProcessingStagePixelScalingType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsProcessingStagePixelScalingType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsProcessingStageProcessingSettingsType:
      return extjson_uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsProcessingStageProcessingSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsProcessingStageSettingsType:
      return extjson_uci::type::PO_ComponentSettingsProcessingStageSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsProcessingStageSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsProcessingStageType:
      return extjson_uci::type::PO_ComponentSettingsProcessingStageType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsProcessingStageType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsProductGeneratorSettingsType:
      return extjson_uci::type::PO_ComponentSettingsProductGeneratorSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsProductGeneratorSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsProductGeneratorType:
      return extjson_uci::type::PO_ComponentSettingsProductGeneratorType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsProductGeneratorType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsProductSettingsType:
      return extjson_uci::type::PO_ComponentSettingsProductSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsProductSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentSettingsType:
      return extjson_uci::type::PO_ComponentSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusApertureSettingsType:
      return extjson_uci::type::PO_ComponentStatusApertureSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusApertureSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusBandpassFrequencyType:
      return extjson_uci::type::PO_ComponentStatusBandpassFrequencyType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusBandpassFrequencyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusFilterType:
      return extjson_uci::type::PO_ComponentStatusFilterType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusFilterType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayChannelType:
      return extjson_uci::type::PO_ComponentStatusFocalPlaneArrayChannelType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusFocalPlaneArrayChannelType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayCollectionTimeType:
      return extjson_uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionDataType:
      return extjson_uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionDataType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType:
      return extjson_uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayOpticalBandType:
      return extjson_uci::type::PO_ComponentStatusFocalPlaneArrayOpticalBandType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusFocalPlaneArrayOpticalBandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayPixelAggregationType:
      return extjson_uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayPixelPolarityType:
      return extjson_uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayPixelScalingType:
      return extjson_uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayScanDirectionType:
      return extjson_uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType:
      return extjson_uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayType:
      return extjson_uci::type::PO_ComponentStatusFocalPlaneArrayType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusFocalPlaneArrayType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusFocusSweepSettingsType:
      return extjson_uci::type::PO_ComponentStatusFocusSweepSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusFocusSweepSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusGeneratorSettingsType:
      return extjson_uci::type::PO_ComponentStatusGeneratorSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusGeneratorSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusLensAssemblyFieldOfViewType:
      return extjson_uci::type::PO_ComponentStatusLensAssemblyFieldOfViewType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusLensAssemblyFieldOfViewType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusLensAssemblyFocusType:
      return extjson_uci::type::PO_ComponentStatusLensAssemblyFocusType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusLensAssemblyFocusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusLensAssemblyType:
      return extjson_uci::type::PO_ComponentStatusLensAssemblyType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusLensAssemblyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusOutputProductSettingsType:
      return extjson_uci::type::PO_ComponentStatusOutputProductSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusOutputProductSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusProcessingStagePixelScalingType:
      return extjson_uci::type::PO_ComponentStatusProcessingStagePixelScalingType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusProcessingStagePixelScalingType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusProcessingStageProcessingSettingsType:
      return extjson_uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusProcessingStageSettingsType:
      return extjson_uci::type::PO_ComponentStatusProcessingStageSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusProcessingStageSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusProcessingStageType:
      return extjson_uci::type::PO_ComponentStatusProcessingStageType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusProcessingStageType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusProductGeneratorSettingsType:
      return extjson_uci::type::PO_ComponentStatusProductGeneratorSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusProductGeneratorSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusProductGeneratorType:
      return extjson_uci::type::PO_ComponentStatusProductGeneratorType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusProductGeneratorType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusProductSettingsType:
      return extjson_uci::type::PO_ComponentStatusProductSettingsType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusProductSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentStatusType:
      return extjson_uci::type::PO_ComponentStatusType::serialize(dynamic_cast<const uci::type::PO_ComponentStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentType:
      return extjson_uci::type::PO_ComponentType::serialize(dynamic_cast<const uci::type::PO_ComponentType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ComponentWindowType:
      return extjson_uci::type::PO_ComponentWindowType::serialize(dynamic_cast<const uci::type::PO_ComponentWindowType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ConstraintControlsType:
      return extjson_uci::type::PO_ConstraintControlsType::serialize(dynamic_cast<const uci::type::PO_ConstraintControlsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_FilterID_Type:
      return extjson_uci::type::PO_FilterID_Type::serialize(dynamic_cast<const uci::type::PO_FilterID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_FPA_ChannelID_Type:
      return extjson_uci::type::PO_FPA_ChannelID_Type::serialize(dynamic_cast<const uci::type::PO_FPA_ChannelID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_FPA_ID_Type:
      return extjson_uci::type::PO_FPA_ID_Type::serialize(dynamic_cast<const uci::type::PO_FPA_ID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_GimbalOrientationConstraintControlsStatusType:
      return extjson_uci::type::PO_GimbalOrientationConstraintControlsStatusType::serialize(dynamic_cast<const uci::type::PO_GimbalOrientationConstraintControlsStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_GimbalOrientationConstraintType:
      return extjson_uci::type::PO_GimbalOrientationConstraintType::serialize(dynamic_cast<const uci::type::PO_GimbalOrientationConstraintType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_LensID_Type:
      return extjson_uci::type::PO_LensID_Type::serialize(dynamic_cast<const uci::type::PO_LensID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_OffsetTrackSettingsType:
      return extjson_uci::type::PO_OffsetTrackSettingsType::serialize(dynamic_cast<const uci::type::PO_OffsetTrackSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ProcessingStageID_Type:
      return extjson_uci::type::PO_ProcessingStageID_Type::serialize(dynamic_cast<const uci::type::PO_ProcessingStageID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ProductGeneratorID_Type:
      return extjson_uci::type::PO_ProductGeneratorID_Type::serialize(dynamic_cast<const uci::type::PO_ProductGeneratorID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ProductGeneratorOutputID_Type:
      return extjson_uci::type::PO_ProductGeneratorOutputID_Type::serialize(dynamic_cast<const uci::type::PO_ProductGeneratorOutputID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_ProductOutputCommandImageryType:
      return extjson_uci::type::PO_ProductOutputCommandImageryType::serialize(dynamic_cast<const uci::type::PO_ProductOutputCommandImageryType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_SettingsCommandMDT:
      return extjson_uci::type::PO_SettingsCommandMDT::serialize(dynamic_cast<const uci::type::PO_SettingsCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_SettingsCommandMT:
      return extjson_uci::type::PO_SettingsCommandMT::serialize(dynamic_cast<const uci::type::PO_SettingsCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_SettingsCommandStatusMDT:
      return extjson_uci::type::PO_SettingsCommandStatusMDT::serialize(dynamic_cast<const uci::type::PO_SettingsCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_SettingsCommandStatusMT:
      return extjson_uci::type::PO_SettingsCommandStatusMT::serialize(dynamic_cast<const uci::type::PO_SettingsCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_SlantRangeConstraintControlsStatusType:
      return extjson_uci::type::PO_SlantRangeConstraintControlsStatusType::serialize(dynamic_cast<const uci::type::PO_SlantRangeConstraintControlsStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_SlantRangeConstraintControlsType:
      return extjson_uci::type::PO_SlantRangeConstraintControlsType::serialize(dynamic_cast<const uci::type::PO_SlantRangeConstraintControlsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_SubCapabilitySettingsType:
      return extjson_uci::type::PO_SubCapabilitySettingsType::serialize(dynamic_cast<const uci::type::PO_SubCapabilitySettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_SubCapabilityType:
      return extjson_uci::type::PO_SubCapabilityType::serialize(dynamic_cast<const uci::type::PO_SubCapabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_SweepSpeedConstraintControlsStatusType:
      return extjson_uci::type::PO_SweepSpeedConstraintControlsStatusType::serialize(dynamic_cast<const uci::type::PO_SweepSpeedConstraintControlsStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_SweepSpeedConstraintControlsType:
      return extjson_uci::type::PO_SweepSpeedConstraintControlsType::serialize(dynamic_cast<const uci::type::PO_SweepSpeedConstraintControlsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_TargetType:
      return extjson_uci::type::PO_TargetType::serialize(dynamic_cast<const uci::type::PO_TargetType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_TaskBaseType:
      return extjson_uci::type::PO_TaskBaseType::serialize(dynamic_cast<const uci::type::PO_TaskBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_TaskType:
      return extjson_uci::type::PO_TaskType::serialize(dynamic_cast<const uci::type::PO_TaskType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_TechniqueCapabilityType:
      return extjson_uci::type::PO_TechniqueCapabilityType::serialize(dynamic_cast<const uci::type::PO_TechniqueCapabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_TechniqueSettingType:
      return extjson_uci::type::PO_TechniqueSettingType::serialize(dynamic_cast<const uci::type::PO_TechniqueSettingType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_TrackActivityType:
      return extjson_uci::type::PO_TrackActivityType::serialize(dynamic_cast<const uci::type::PO_TrackActivityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_TrackCapabilityType:
      return extjson_uci::type::PO_TrackCapabilityType::serialize(dynamic_cast<const uci::type::PO_TrackCapabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_TrackDetailsType:
      return extjson_uci::type::PO_TrackDetailsType::serialize(dynamic_cast<const uci::type::PO_TrackDetailsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_TrackSettingsType:
      return extjson_uci::type::PO_TrackSettingsType::serialize(dynamic_cast<const uci::type::PO_TrackSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_TrackStatusType:
      return extjson_uci::type::PO_TrackStatusType::serialize(dynamic_cast<const uci::type::PO_TrackStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pO_WindowID_Type:
      return extjson_uci::type::PO_WindowID_Type::serialize(dynamic_cast<const uci::type::PO_WindowID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::point2D_RangeType:
      return extjson_uci::type::Point2D_RangeType::serialize(dynamic_cast<const uci::type::Point2D_RangeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::point2D_ReferenceType:
      return extjson_uci::type::Point2D_ReferenceType::serialize(dynamic_cast<const uci::type::Point2D_ReferenceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::point2D_RelativeType:
      return extjson_uci::type::Point2D_RelativeType::serialize(dynamic_cast<const uci::type::Point2D_RelativeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::point2D_ReportedType:
      return extjson_uci::type::Point2D_ReportedType::serialize(dynamic_cast<const uci::type::Point2D_ReportedType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::point2D_Type:
      return extjson_uci::type::Point2D_Type::serialize(dynamic_cast<const uci::type::Point2D_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::point3D_RelativeType:
      return extjson_uci::type::Point3D_RelativeType::serialize(dynamic_cast<const uci::type::Point3D_RelativeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::point3D_Type:
      return extjson_uci::type::Point3D_Type::serialize(dynamic_cast<const uci::type::Point3D_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::point4D_RelativeType:
      return extjson_uci::type::Point4D_RelativeType::serialize(dynamic_cast<const uci::type::Point4D_RelativeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::point4D_Type:
      return extjson_uci::type::Point4D_Type::serialize(dynamic_cast<const uci::type::Point4D_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pointChoice3D_Type:
      return extjson_uci::type::PointChoice3D_Type::serialize(dynamic_cast<const uci::type::PointChoice3D_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pointChoice4D_Type:
      return extjson_uci::type::PointChoice4D_Type::serialize(dynamic_cast<const uci::type::PointChoice4D_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pointChoiceType:
      return extjson_uci::type::PointChoiceType::serialize(dynamic_cast<const uci::type::PointChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pointingPlanWindowType:
      return extjson_uci::type::PointingPlanWindowType::serialize(dynamic_cast<const uci::type::PointingPlanWindowType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pointingType:
      return extjson_uci::type::PointingType::serialize(dynamic_cast<const uci::type::PointingType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pointingVectorParameterType:
      return extjson_uci::type::PointingVectorParameterType::serialize(dynamic_cast<const uci::type::PointingVectorParameterType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pointTargetType:
      return extjson_uci::type::PointTargetType::serialize(dynamic_cast<const uci::type::PointTargetType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::polarizationControlType:
      return extjson_uci::type::PolarizationControlType::serialize(dynamic_cast<const uci::type::PolarizationControlType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::polarizationType:
      return extjson_uci::type::PolarizationType::serialize(dynamic_cast<const uci::type::PolarizationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::polarMotionType:
      return extjson_uci::type::PolarMotionType::serialize(dynamic_cast<const uci::type::PolarMotionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::polygonPointChoiceType:
      return extjson_uci::type::PolygonPointChoiceType::serialize(dynamic_cast<const uci::type::PolygonPointChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::polygonRelativeType:
      return extjson_uci::type::PolygonRelativeType::serialize(dynamic_cast<const uci::type::PolygonRelativeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::polygonType:
      return extjson_uci::type::PolygonType::serialize(dynamic_cast<const uci::type::PolygonType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::portConfigurationType:
      return extjson_uci::type::PortConfigurationType::serialize(dynamic_cast<const uci::type::PortConfigurationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::positionAccelerationCovarianceType:
      return extjson_uci::type::PositionAccelerationCovarianceType::serialize(dynamic_cast<const uci::type::PositionAccelerationCovarianceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::positionAndVelocityCovarianceType:
      return extjson_uci::type::PositionAndVelocityCovarianceType::serialize(dynamic_cast<const uci::type::PositionAndVelocityCovarianceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::positionLocationUncertaintyType:
      return extjson_uci::type::PositionLocationUncertaintyType::serialize(dynamic_cast<const uci::type::PositionLocationUncertaintyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::positionOrientationCovarianceType:
      return extjson_uci::type::PositionOrientationCovarianceType::serialize(dynamic_cast<const uci::type::PositionOrientationCovarianceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::positionPositionCovarianceType:
      return extjson_uci::type::PositionPositionCovarianceType::serialize(dynamic_cast<const uci::type::PositionPositionCovarianceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::positionReportDataType:
      return extjson_uci::type::PositionReportDataType::serialize(dynamic_cast<const uci::type::PositionReportDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::positionReportDetailedMDT:
      return extjson_uci::type::PositionReportDetailedMDT::serialize(dynamic_cast<const uci::type::PositionReportDetailedMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::positionReportDetailedMT:
      return extjson_uci::type::PositionReportDetailedMT::serialize(dynamic_cast<const uci::type::PositionReportDetailedMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::positionReportMDT:
      return extjson_uci::type::PositionReportMDT::serialize(dynamic_cast<const uci::type::PositionReportMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::positionReportMT:
      return extjson_uci::type::PositionReportMT::serialize(dynamic_cast<const uci::type::PositionReportMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::positionSourceID_ChoiceType:
      return extjson_uci::type::PositionSourceID_ChoiceType::serialize(dynamic_cast<const uci::type::PositionSourceID_ChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::positionVelocityCovarianceType:
      return extjson_uci::type::PositionVelocityCovarianceType::serialize(dynamic_cast<const uci::type::PositionVelocityCovarianceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::predictedThreatAssessmentRelativeType:
      return extjson_uci::type::PredictedThreatAssessmentRelativeType::serialize(dynamic_cast<const uci::type::PredictedThreatAssessmentRelativeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::predictedThreatAssessmentType:
      return extjson_uci::type::PredictedThreatAssessmentType::serialize(dynamic_cast<const uci::type::PredictedThreatAssessmentType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pRI_DataBaseType:
      return extjson_uci::type::PRI_DataBaseType::serialize(dynamic_cast<const uci::type::PRI_DataBaseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pRI_DataType:
      return extjson_uci::type::PRI_DataType::serialize(dynamic_cast<const uci::type::PRI_DataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pRI_PW_Type:
      return extjson_uci::type::PRI_PW_Type::serialize(dynamic_cast<const uci::type::PRI_PW_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::primaryControllerType:
      return extjson_uci::type::PrimaryControllerType::serialize(dynamic_cast<const uci::type::PrimaryControllerType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::prioritizationListID_Type:
      return extjson_uci::type::PrioritizationListID_Type::serialize(dynamic_cast<const uci::type::PrioritizationListID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::prioritizationListItemType:
      return extjson_uci::type::PrioritizationListItemType::serialize(dynamic_cast<const uci::type::PrioritizationListItemType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::prioritizationListMDT:
      return extjson_uci::type::PrioritizationListMDT::serialize(dynamic_cast<const uci::type::PrioritizationListMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::prioritizationListMT:
      return extjson_uci::type::PrioritizationListMT::serialize(dynamic_cast<const uci::type::PrioritizationListMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::prioritizationListValueType:
      return extjson_uci::type::PrioritizationListValueType::serialize(dynamic_cast<const uci::type::PrioritizationListValueType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::prioritizationType:
      return extjson_uci::type::PrioritizationType::serialize(dynamic_cast<const uci::type::PrioritizationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::processingConstrainedSubPlanType:
      return extjson_uci::type::ProcessingConstrainedSubPlanType::serialize(dynamic_cast<const uci::type::ProcessingConstrainedSubPlanType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::processingParametersPET:
      return extjson_uci::type::ProcessingParametersPET::serialize(dynamic_cast<const uci::type::ProcessingParametersPET&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::processingReportType:
      return extjson_uci::type::ProcessingReportType::serialize(dynamic_cast<const uci::type::ProcessingReportType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::processingRequirementsType:
      return extjson_uci::type::ProcessingRequirementsType::serialize(dynamic_cast<const uci::type::ProcessingRequirementsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::processingResultsPET:
      return extjson_uci::type::ProcessingResultsPET::serialize(dynamic_cast<const uci::type::ProcessingResultsPET&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationPlanID_Type:
      return extjson_uci::type::ProductClassificationPlanID_Type::serialize(dynamic_cast<const uci::type::ProductClassificationPlanID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationPlanMDT:
      return extjson_uci::type::ProductClassificationPlanMDT::serialize(dynamic_cast<const uci::type::ProductClassificationPlanMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationPlanMT:
      return extjson_uci::type::ProductClassificationPlanMT::serialize(dynamic_cast<const uci::type::ProductClassificationPlanMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationPlanType:
      return extjson_uci::type::ProductClassificationPlanType::serialize(dynamic_cast<const uci::type::ProductClassificationPlanType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationReportID_Type:
      return extjson_uci::type::ProductClassificationReportID_Type::serialize(dynamic_cast<const uci::type::ProductClassificationReportID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationReportMDT:
      return extjson_uci::type::ProductClassificationReportMDT::serialize(dynamic_cast<const uci::type::ProductClassificationReportMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationReportMT:
      return extjson_uci::type::ProductClassificationReportMT::serialize(dynamic_cast<const uci::type::ProductClassificationReportMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationRequestMDT:
      return extjson_uci::type::ProductClassificationRequestMDT::serialize(dynamic_cast<const uci::type::ProductClassificationRequestMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationRequestMT:
      return extjson_uci::type::ProductClassificationRequestMT::serialize(dynamic_cast<const uci::type::ProductClassificationRequestMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationRequestStatusMDT:
      return extjson_uci::type::ProductClassificationRequestStatusMDT::serialize(dynamic_cast<const uci::type::ProductClassificationRequestStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationRequestStatusMT:
      return extjson_uci::type::ProductClassificationRequestStatusMT::serialize(dynamic_cast<const uci::type::ProductClassificationRequestStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationStatusLabelType:
      return extjson_uci::type::ProductClassificationStatusLabelType::serialize(dynamic_cast<const uci::type::ProductClassificationStatusLabelType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationStatusType:
      return extjson_uci::type::ProductClassificationStatusType::serialize(dynamic_cast<const uci::type::ProductClassificationStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationTaskMDT:
      return extjson_uci::type::ProductClassificationTaskMDT::serialize(dynamic_cast<const uci::type::ProductClassificationTaskMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationTaskMT:
      return extjson_uci::type::ProductClassificationTaskMT::serialize(dynamic_cast<const uci::type::ProductClassificationTaskMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationTaskStatusMDT:
      return extjson_uci::type::ProductClassificationTaskStatusMDT::serialize(dynamic_cast<const uci::type::ProductClassificationTaskStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productClassificationTaskStatusMT:
      return extjson_uci::type::ProductClassificationTaskStatusMT::serialize(dynamic_cast<const uci::type::ProductClassificationTaskStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productCollectionLocationType:
      return extjson_uci::type::ProductCollectionLocationType::serialize(dynamic_cast<const uci::type::ProductCollectionLocationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productCollectionPathType:
      return extjson_uci::type::ProductCollectionPathType::serialize(dynamic_cast<const uci::type::ProductCollectionPathType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationConfigurationID_Type:
      return extjson_uci::type::ProductDisseminationConfigurationID_Type::serialize(dynamic_cast<const uci::type::ProductDisseminationConfigurationID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationConfigurationMDT:
      return extjson_uci::type::ProductDisseminationConfigurationMDT::serialize(dynamic_cast<const uci::type::ProductDisseminationConfigurationMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationConfigurationMT:
      return extjson_uci::type::ProductDisseminationConfigurationMT::serialize(dynamic_cast<const uci::type::ProductDisseminationConfigurationMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationConfigurationType:
      return extjson_uci::type::ProductDisseminationConfigurationType::serialize(dynamic_cast<const uci::type::ProductDisseminationConfigurationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationDestinationID_Type:
      return extjson_uci::type::ProductDisseminationDestinationID_Type::serialize(dynamic_cast<const uci::type::ProductDisseminationDestinationID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationDestinationMDT:
      return extjson_uci::type::ProductDisseminationDestinationMDT::serialize(dynamic_cast<const uci::type::ProductDisseminationDestinationMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationDestinationMT:
      return extjson_uci::type::ProductDisseminationDestinationMT::serialize(dynamic_cast<const uci::type::ProductDisseminationDestinationMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationGatewayType:
      return extjson_uci::type::ProductDisseminationGatewayType::serialize(dynamic_cast<const uci::type::ProductDisseminationGatewayType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationPlanID_Type:
      return extjson_uci::type::ProductDisseminationPlanID_Type::serialize(dynamic_cast<const uci::type::ProductDisseminationPlanID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationPlanMDT:
      return extjson_uci::type::ProductDisseminationPlanMDT::serialize(dynamic_cast<const uci::type::ProductDisseminationPlanMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationPlanMT:
      return extjson_uci::type::ProductDisseminationPlanMT::serialize(dynamic_cast<const uci::type::ProductDisseminationPlanMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationPlanType:
      return extjson_uci::type::ProductDisseminationPlanType::serialize(dynamic_cast<const uci::type::ProductDisseminationPlanType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationReportID_Type:
      return extjson_uci::type::ProductDisseminationReportID_Type::serialize(dynamic_cast<const uci::type::ProductDisseminationReportID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationReportMDT:
      return extjson_uci::type::ProductDisseminationReportMDT::serialize(dynamic_cast<const uci::type::ProductDisseminationReportMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationReportMT:
      return extjson_uci::type::ProductDisseminationReportMT::serialize(dynamic_cast<const uci::type::ProductDisseminationReportMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationRequestMDT:
      return extjson_uci::type::ProductDisseminationRequestMDT::serialize(dynamic_cast<const uci::type::ProductDisseminationRequestMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationRequestMT:
      return extjson_uci::type::ProductDisseminationRequestMT::serialize(dynamic_cast<const uci::type::ProductDisseminationRequestMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationRequestStatusMDT:
      return extjson_uci::type::ProductDisseminationRequestStatusMDT::serialize(dynamic_cast<const uci::type::ProductDisseminationRequestStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationRequestStatusMT:
      return extjson_uci::type::ProductDisseminationRequestStatusMT::serialize(dynamic_cast<const uci::type::ProductDisseminationRequestStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationStatusType:
      return extjson_uci::type::ProductDisseminationStatusType::serialize(dynamic_cast<const uci::type::ProductDisseminationStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationTaskMDT:
      return extjson_uci::type::ProductDisseminationTaskMDT::serialize(dynamic_cast<const uci::type::ProductDisseminationTaskMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationTaskMT:
      return extjson_uci::type::ProductDisseminationTaskMT::serialize(dynamic_cast<const uci::type::ProductDisseminationTaskMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationTaskStatusMDT:
      return extjson_uci::type::ProductDisseminationTaskStatusMDT::serialize(dynamic_cast<const uci::type::ProductDisseminationTaskStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDisseminationTaskStatusMT:
      return extjson_uci::type::ProductDisseminationTaskStatusMT::serialize(dynamic_cast<const uci::type::ProductDisseminationTaskStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadPlanID_Type:
      return extjson_uci::type::ProductDownloadPlanID_Type::serialize(dynamic_cast<const uci::type::ProductDownloadPlanID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadPlanMDT:
      return extjson_uci::type::ProductDownloadPlanMDT::serialize(dynamic_cast<const uci::type::ProductDownloadPlanMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadPlanMT:
      return extjson_uci::type::ProductDownloadPlanMT::serialize(dynamic_cast<const uci::type::ProductDownloadPlanMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadPlanType:
      return extjson_uci::type::ProductDownloadPlanType::serialize(dynamic_cast<const uci::type::ProductDownloadPlanType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadReportID_Type:
      return extjson_uci::type::ProductDownloadReportID_Type::serialize(dynamic_cast<const uci::type::ProductDownloadReportID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadReportMDT:
      return extjson_uci::type::ProductDownloadReportMDT::serialize(dynamic_cast<const uci::type::ProductDownloadReportMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadReportMT:
      return extjson_uci::type::ProductDownloadReportMT::serialize(dynamic_cast<const uci::type::ProductDownloadReportMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadRequestMDT:
      return extjson_uci::type::ProductDownloadRequestMDT::serialize(dynamic_cast<const uci::type::ProductDownloadRequestMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadRequestMT:
      return extjson_uci::type::ProductDownloadRequestMT::serialize(dynamic_cast<const uci::type::ProductDownloadRequestMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadRequestStatusMDT:
      return extjson_uci::type::ProductDownloadRequestStatusMDT::serialize(dynamic_cast<const uci::type::ProductDownloadRequestStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadRequestStatusMT:
      return extjson_uci::type::ProductDownloadRequestStatusMT::serialize(dynamic_cast<const uci::type::ProductDownloadRequestStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadStatusType:
      return extjson_uci::type::ProductDownloadStatusType::serialize(dynamic_cast<const uci::type::ProductDownloadStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadTaskMDT:
      return extjson_uci::type::ProductDownloadTaskMDT::serialize(dynamic_cast<const uci::type::ProductDownloadTaskMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadTaskMT:
      return extjson_uci::type::ProductDownloadTaskMT::serialize(dynamic_cast<const uci::type::ProductDownloadTaskMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadTaskStatusMDT:
      return extjson_uci::type::ProductDownloadTaskStatusMDT::serialize(dynamic_cast<const uci::type::ProductDownloadTaskStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productDownloadTaskStatusMT:
      return extjson_uci::type::ProductDownloadTaskStatusMT::serialize(dynamic_cast<const uci::type::ProductDownloadTaskStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productFilterType:
      return extjson_uci::type::ProductFilterType::serialize(dynamic_cast<const uci::type::ProductFilterType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productGeospatialLocationType:
      return extjson_uci::type::ProductGeospatialLocationType::serialize(dynamic_cast<const uci::type::ProductGeospatialLocationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productLocationID_Type:
      return extjson_uci::type::ProductLocationID_Type::serialize(dynamic_cast<const uci::type::ProductLocationID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productLocationMDT:
      return extjson_uci::type::ProductLocationMDT::serialize(dynamic_cast<const uci::type::ProductLocationMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productLocationMT:
      return extjson_uci::type::ProductLocationMT::serialize(dynamic_cast<const uci::type::ProductLocationMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productLocationType:
      return extjson_uci::type::ProductLocationType::serialize(dynamic_cast<const uci::type::ProductLocationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productManagementTaskDataType:
      return extjson_uci::type::ProductManagementTaskDataType::serialize(dynamic_cast<const uci::type::ProductManagementTaskDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productManagementTaskStatusDataType:
      return extjson_uci::type::ProductManagementTaskStatusDataType::serialize(dynamic_cast<const uci::type::ProductManagementTaskStatusDataType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productMetadataID_Type:
      return extjson_uci::type::ProductMetadataID_Type::serialize(dynamic_cast<const uci::type::ProductMetadataID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productMetadataMDT:
      return extjson_uci::type::ProductMetadataMDT::serialize(dynamic_cast<const uci::type::ProductMetadataMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productMetadataMT:
      return extjson_uci::type::ProductMetadataMT::serialize(dynamic_cast<const uci::type::ProductMetadataMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productNeededByType:
      return extjson_uci::type::ProductNeededByType::serialize(dynamic_cast<const uci::type::ProductNeededByType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productOutputCapabilityImageryType:
      return extjson_uci::type::ProductOutputCapabilityImageryType::serialize(dynamic_cast<const uci::type::ProductOutputCapabilityImageryType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productOutputCapabilityStatusImageryType:
      return extjson_uci::type::ProductOutputCapabilityStatusImageryType::serialize(dynamic_cast<const uci::type::ProductOutputCapabilityStatusImageryType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productOutputCommandBasicType:
      return extjson_uci::type::ProductOutputCommandBasicType::serialize(dynamic_cast<const uci::type::ProductOutputCommandBasicType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productOutputCommandImageryType:
      return extjson_uci::type::ProductOutputCommandImageryType::serialize(dynamic_cast<const uci::type::ProductOutputCommandImageryType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productOutputCommandSMTI_Type:
      return extjson_uci::type::ProductOutputCommandSMTI_Type::serialize(dynamic_cast<const uci::type::ProductOutputCommandSMTI_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productOutputStatusType:
      return extjson_uci::type::ProductOutputStatusType::serialize(dynamic_cast<const uci::type::ProductOutputStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productOutputType:
      return extjson_uci::type::ProductOutputType::serialize(dynamic_cast<const uci::type::ProductOutputType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productParentType:
      return extjson_uci::type::ProductParentType::serialize(dynamic_cast<const uci::type::ProductParentType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingClassificationType:
      return extjson_uci::type::ProductProcessingClassificationType::serialize(dynamic_cast<const uci::type::ProductProcessingClassificationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingFunctionMDT:
      return extjson_uci::type::ProductProcessingFunctionMDT::serialize(dynamic_cast<const uci::type::ProductProcessingFunctionMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingFunctionMT:
      return extjson_uci::type::ProductProcessingFunctionMT::serialize(dynamic_cast<const uci::type::ProductProcessingFunctionMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingFunctionStatusMDT:
      return extjson_uci::type::ProductProcessingFunctionStatusMDT::serialize(dynamic_cast<const uci::type::ProductProcessingFunctionStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingFunctionStatusMT:
      return extjson_uci::type::ProductProcessingFunctionStatusMT::serialize(dynamic_cast<const uci::type::ProductProcessingFunctionStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingFunctionStatusType:
      return extjson_uci::type::ProductProcessingFunctionStatusType::serialize(dynamic_cast<const uci::type::ProductProcessingFunctionStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingFunctionType:
      return extjson_uci::type::ProductProcessingFunctionType::serialize(dynamic_cast<const uci::type::ProductProcessingFunctionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingPlanID_Type:
      return extjson_uci::type::ProductProcessingPlanID_Type::serialize(dynamic_cast<const uci::type::ProductProcessingPlanID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingPlanMDT:
      return extjson_uci::type::ProductProcessingPlanMDT::serialize(dynamic_cast<const uci::type::ProductProcessingPlanMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingPlanMT:
      return extjson_uci::type::ProductProcessingPlanMT::serialize(dynamic_cast<const uci::type::ProductProcessingPlanMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingPlanType:
      return extjson_uci::type::ProductProcessingPlanType::serialize(dynamic_cast<const uci::type::ProductProcessingPlanType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingReportID_Type:
      return extjson_uci::type::ProductProcessingReportID_Type::serialize(dynamic_cast<const uci::type::ProductProcessingReportID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingReportMDT:
      return extjson_uci::type::ProductProcessingReportMDT::serialize(dynamic_cast<const uci::type::ProductProcessingReportMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingReportMT:
      return extjson_uci::type::ProductProcessingReportMT::serialize(dynamic_cast<const uci::type::ProductProcessingReportMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingRequestMDT:
      return extjson_uci::type::ProductProcessingRequestMDT::serialize(dynamic_cast<const uci::type::ProductProcessingRequestMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingRequestMT:
      return extjson_uci::type::ProductProcessingRequestMT::serialize(dynamic_cast<const uci::type::ProductProcessingRequestMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingRequestStatusMDT:
      return extjson_uci::type::ProductProcessingRequestStatusMDT::serialize(dynamic_cast<const uci::type::ProductProcessingRequestStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingRequestStatusMT:
      return extjson_uci::type::ProductProcessingRequestStatusMT::serialize(dynamic_cast<const uci::type::ProductProcessingRequestStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingStatusType:
      return extjson_uci::type::ProductProcessingStatusType::serialize(dynamic_cast<const uci::type::ProductProcessingStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingTaskMDT:
      return extjson_uci::type::ProductProcessingTaskMDT::serialize(dynamic_cast<const uci::type::ProductProcessingTaskMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingTaskMT:
      return extjson_uci::type::ProductProcessingTaskMT::serialize(dynamic_cast<const uci::type::ProductProcessingTaskMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingTaskStatusMDT:
      return extjson_uci::type::ProductProcessingTaskStatusMDT::serialize(dynamic_cast<const uci::type::ProductProcessingTaskStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingTaskStatusMT:
      return extjson_uci::type::ProductProcessingTaskStatusMT::serialize(dynamic_cast<const uci::type::ProductProcessingTaskStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productProcessingType:
      return extjson_uci::type::ProductProcessingType::serialize(dynamic_cast<const uci::type::ProductProcessingType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productRateSettingsType:
      return extjson_uci::type::ProductRateSettingsType::serialize(dynamic_cast<const uci::type::ProductRateSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productReferenceByParentType:
      return extjson_uci::type::ProductReferenceByParentType::serialize(dynamic_cast<const uci::type::ProductReferenceByParentType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productReferenceType:
      return extjson_uci::type::ProductReferenceType::serialize(dynamic_cast<const uci::type::ProductReferenceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productResolutionSettingsType:
      return extjson_uci::type::ProductResolutionSettingsType::serialize(dynamic_cast<const uci::type::ProductResolutionSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productResolutionType:
      return extjson_uci::type::ProductResolutionType::serialize(dynamic_cast<const uci::type::ProductResolutionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productSizeSettingsType:
      return extjson_uci::type::ProductSizeSettingsType::serialize(dynamic_cast<const uci::type::ProductSizeSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productSystemLocationType:
      return extjson_uci::type::ProductSystemLocationType::serialize(dynamic_cast<const uci::type::ProductSystemLocationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::productTypeFilterType:
      return extjson_uci::type::ProductTypeFilterType::serialize(dynamic_cast<const uci::type::ProductTypeFilterType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::propagatorChoiceType:
      return extjson_uci::type::PropagatorChoiceType::serialize(dynamic_cast<const uci::type::PropagatorChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::propagatorSettingsChoiceType:
      return extjson_uci::type::PropagatorSettingsChoiceType::serialize(dynamic_cast<const uci::type::PropagatorSettingsChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::propagatorSettingsDataRequestMDT:
      return extjson_uci::type::PropagatorSettingsDataRequestMDT::serialize(dynamic_cast<const uci::type::PropagatorSettingsDataRequestMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::propagatorSettingsDataRequestMT:
      return extjson_uci::type::PropagatorSettingsDataRequestMT::serialize(dynamic_cast<const uci::type::PropagatorSettingsDataRequestMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::propagatorSettingsDataRequestStatusMDT:
      return extjson_uci::type::PropagatorSettingsDataRequestStatusMDT::serialize(dynamic_cast<const uci::type::PropagatorSettingsDataRequestStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::propagatorSettingsDataRequestStatusMT:
      return extjson_uci::type::PropagatorSettingsDataRequestStatusMT::serialize(dynamic_cast<const uci::type::PropagatorSettingsDataRequestStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::propagatorSettingsID_Type:
      return extjson_uci::type::PropagatorSettingsID_Type::serialize(dynamic_cast<const uci::type::PropagatorSettingsID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::propagatorSettingsMDT:
      return extjson_uci::type::PropagatorSettingsMDT::serialize(dynamic_cast<const uci::type::PropagatorSettingsMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::propagatorSettingsMT:
      return extjson_uci::type::PropagatorSettingsMT::serialize(dynamic_cast<const uci::type::PropagatorSettingsMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::propagatorType:
      return extjson_uci::type::PropagatorType::serialize(dynamic_cast<const uci::type::PropagatorType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::protectedAssetAndThreatType:
      return extjson_uci::type::ProtectedAssetAndThreatType::serialize(dynamic_cast<const uci::type::ProtectedAssetAndThreatType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::protectedAssetReturnPowerType:
      return extjson_uci::type::ProtectedAssetReturnPowerType::serialize(dynamic_cast<const uci::type::ProtectedAssetReturnPowerType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::protectedAssetType:
      return extjson_uci::type::ProtectedAssetType::serialize(dynamic_cast<const uci::type::ProtectedAssetType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::proximityOperationsType:
      return extjson_uci::type::ProximityOperationsType::serialize(dynamic_cast<const uci::type::ProximityOperationsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::proximityOrbitChoiceType:
      return extjson_uci::type::ProximityOrbitChoiceType::serialize(dynamic_cast<const uci::type::ProximityOrbitChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pulseDataCollectCommandType:
      return extjson_uci::type::PulseDataCollectCommandType::serialize(dynamic_cast<const uci::type::PulseDataCollectCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pulseDataID_Type:
      return extjson_uci::type::PulseDataID_Type::serialize(dynamic_cast<const uci::type::PulseDataID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pulseDataMDT:
      return extjson_uci::type::PulseDataMDT::serialize(dynamic_cast<const uci::type::PulseDataMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pulseDataMT:
      return extjson_uci::type::PulseDataMT::serialize(dynamic_cast<const uci::type::PulseDataMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pulseDataSourceType:
      return extjson_uci::type::PulseDataSourceType::serialize(dynamic_cast<const uci::type::PulseDataSourceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pulseType:
      return extjson_uci::type::PulseType::serialize(dynamic_cast<const uci::type::PulseType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::pumpComponentExtendedStatusType:
      return extjson_uci::type::PumpComponentExtendedStatusType::serialize(dynamic_cast<const uci::type::PumpComponentExtendedStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::qualifyingTagsType:
      return extjson_uci::type::QualifyingTagsType::serialize(dynamic_cast<const uci::type::QualifyingTagsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::quaternionAttitudeType:
      return extjson_uci::type::QuaternionAttitudeType::serialize(dynamic_cast<const uci::type::QuaternionAttitudeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::quaternionType:
      return extjson_uci::type::QuaternionType::serialize(dynamic_cast<const uci::type::QuaternionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryComparisonType:
      return extjson_uci::type::QueryComparisonType::serialize(dynamic_cast<const uci::type::QueryComparisonType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryContainsType:
      return extjson_uci::type::QueryContainsType::serialize(dynamic_cast<const uci::type::QueryContainsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryCountType:
      return extjson_uci::type::QueryCountType::serialize(dynamic_cast<const uci::type::QueryCountType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryCountValueType:
      return extjson_uci::type::QueryCountValueType::serialize(dynamic_cast<const uci::type::QueryCountValueType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryDataRequestMDT:
      return extjson_uci::type::QueryDataRequestMDT::serialize(dynamic_cast<const uci::type::QueryDataRequestMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryDataRequestMT:
      return extjson_uci::type::QueryDataRequestMT::serialize(dynamic_cast<const uci::type::QueryDataRequestMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryDataRequestStatusMDT:
      return extjson_uci::type::QueryDataRequestStatusMDT::serialize(dynamic_cast<const uci::type::QueryDataRequestStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryDataRequestStatusMT:
      return extjson_uci::type::QueryDataRequestStatusMT::serialize(dynamic_cast<const uci::type::QueryDataRequestStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryEqualsType:
      return extjson_uci::type::QueryEqualsType::serialize(dynamic_cast<const uci::type::QueryEqualsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryExistsType:
      return extjson_uci::type::QueryExistsType::serialize(dynamic_cast<const uci::type::QueryExistsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryInstanceOfType:
      return extjson_uci::type::QueryInstanceOfType::serialize(dynamic_cast<const uci::type::QueryInstanceOfType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryMatchType:
      return extjson_uci::type::QueryMatchType::serialize(dynamic_cast<const uci::type::QueryMatchType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryMessageType:
      return extjson_uci::type::QueryMessageType::serialize(dynamic_cast<const uci::type::QueryMessageType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryPaginationType:
      return extjson_uci::type::QueryPaginationType::serialize(dynamic_cast<const uci::type::QueryPaginationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryPET:
      return extjson_uci::type::QueryPET::serialize(dynamic_cast<const uci::type::QueryPET&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryResultType:
      return extjson_uci::type::QueryResultType::serialize(dynamic_cast<const uci::type::QueryResultType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::querySpecificDataPET:
      return extjson_uci::type::QuerySpecificDataPET::serialize(dynamic_cast<const uci::type::QuerySpecificDataPET&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryStepType:
      return extjson_uci::type::QueryStepType::serialize(dynamic_cast<const uci::type::QueryStepType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryTopicPairType:
      return extjson_uci::type::QueryTopicPairType::serialize(dynamic_cast<const uci::type::QueryTopicPairType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::queryType:
      return extjson_uci::type::QueryType::serialize(dynamic_cast<const uci::type::QueryType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::raceTrackOrbitType:
      return extjson_uci::type::RaceTrackOrbitType::serialize(dynamic_cast<const uci::type::RaceTrackOrbitType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarActivityCommandType:
      return extjson_uci::type::RadarActivityCommandType::serialize(dynamic_cast<const uci::type::RadarActivityCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterActivityCommandType:
      return extjson_uci::type::RadarAltimeterActivityCommandType::serialize(dynamic_cast<const uci::type::RadarAltimeterActivityCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterActivityEstimatedPerformanceType:
      return extjson_uci::type::RadarAltimeterActivityEstimatedPerformanceType::serialize(dynamic_cast<const uci::type::RadarAltimeterActivityEstimatedPerformanceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterActivityMDT:
      return extjson_uci::type::RadarAltimeterActivityMDT::serialize(dynamic_cast<const uci::type::RadarAltimeterActivityMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterActivityMetricsType:
      return extjson_uci::type::RadarAltimeterActivityMetricsType::serialize(dynamic_cast<const uci::type::RadarAltimeterActivityMetricsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterActivityMT:
      return extjson_uci::type::RadarAltimeterActivityMT::serialize(dynamic_cast<const uci::type::RadarAltimeterActivityMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterActivityPredictedActivityDetailType:
      return extjson_uci::type::RadarAltimeterActivityPredictedActivityDetailType::serialize(dynamic_cast<const uci::type::RadarAltimeterActivityPredictedActivityDetailType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterActivityPredictedCollectionsType:
      return extjson_uci::type::RadarAltimeterActivityPredictedCollectionsType::serialize(dynamic_cast<const uci::type::RadarAltimeterActivityPredictedCollectionsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterActivityType:
      return extjson_uci::type::RadarAltimeterActivityType::serialize(dynamic_cast<const uci::type::RadarAltimeterActivityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterAngleConstraintsType:
      return extjson_uci::type::RadarAltimeterAngleConstraintsType::serialize(dynamic_cast<const uci::type::RadarAltimeterAngleConstraintsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterCapabilityCommandType:
      return extjson_uci::type::RadarAltimeterCapabilityCommandType::serialize(dynamic_cast<const uci::type::RadarAltimeterCapabilityCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterCapabilityMDT:
      return extjson_uci::type::RadarAltimeterCapabilityMDT::serialize(dynamic_cast<const uci::type::RadarAltimeterCapabilityMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterCapabilityMT:
      return extjson_uci::type::RadarAltimeterCapabilityMT::serialize(dynamic_cast<const uci::type::RadarAltimeterCapabilityMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterCapabilityOptionsType:
      return extjson_uci::type::RadarAltimeterCapabilityOptionsType::serialize(dynamic_cast<const uci::type::RadarAltimeterCapabilityOptionsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterCapabilityStatusMDT:
      return extjson_uci::type::RadarAltimeterCapabilityStatusMDT::serialize(dynamic_cast<const uci::type::RadarAltimeterCapabilityStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterCapabilityStatusMT:
      return extjson_uci::type::RadarAltimeterCapabilityStatusMT::serialize(dynamic_cast<const uci::type::RadarAltimeterCapabilityStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterCapabilityType:
      return extjson_uci::type::RadarAltimeterCapabilityType::serialize(dynamic_cast<const uci::type::RadarAltimeterCapabilityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterCollectionConstraintsType:
      return extjson_uci::type::RadarAltimeterCollectionConstraintsType::serialize(dynamic_cast<const uci::type::RadarAltimeterCollectionConstraintsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterCollectionOptionsType:
      return extjson_uci::type::RadarAltimeterCollectionOptionsType::serialize(dynamic_cast<const uci::type::RadarAltimeterCollectionOptionsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterCommandMDT:
      return extjson_uci::type::RadarAltimeterCommandMDT::serialize(dynamic_cast<const uci::type::RadarAltimeterCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterCommandMT:
      return extjson_uci::type::RadarAltimeterCommandMT::serialize(dynamic_cast<const uci::type::RadarAltimeterCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterCommandStatusMDT:
      return extjson_uci::type::RadarAltimeterCommandStatusMDT::serialize(dynamic_cast<const uci::type::RadarAltimeterCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterCommandStatusMT:
      return extjson_uci::type::RadarAltimeterCommandStatusMT::serialize(dynamic_cast<const uci::type::RadarAltimeterCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterCommandType:
      return extjson_uci::type::RadarAltimeterCommandType::serialize(dynamic_cast<const uci::type::RadarAltimeterCommandType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterReportAngularOffsetType:
      return extjson_uci::type::RadarAltimeterReportAngularOffsetType::serialize(dynamic_cast<const uci::type::RadarAltimeterReportAngularOffsetType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterReportCharacteristicsType:
      return extjson_uci::type::RadarAltimeterReportCharacteristicsType::serialize(dynamic_cast<const uci::type::RadarAltimeterReportCharacteristicsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterReportID_Type:
      return extjson_uci::type::RadarAltimeterReportID_Type::serialize(dynamic_cast<const uci::type::RadarAltimeterReportID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterReportMDT:
      return extjson_uci::type::RadarAltimeterReportMDT::serialize(dynamic_cast<const uci::type::RadarAltimeterReportMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterReportMeasurementType:
      return extjson_uci::type::RadarAltimeterReportMeasurementType::serialize(dynamic_cast<const uci::type::RadarAltimeterReportMeasurementType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterReportMT:
      return extjson_uci::type::RadarAltimeterReportMT::serialize(dynamic_cast<const uci::type::RadarAltimeterReportMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterReportResolutionType:
      return extjson_uci::type::RadarAltimeterReportResolutionType::serialize(dynamic_cast<const uci::type::RadarAltimeterReportResolutionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterReportUncertaintyType:
      return extjson_uci::type::RadarAltimeterReportUncertaintyType::serialize(dynamic_cast<const uci::type::RadarAltimeterReportUncertaintyType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterSettingsCommandMDT:
      return extjson_uci::type::RadarAltimeterSettingsCommandMDT::serialize(dynamic_cast<const uci::type::RadarAltimeterSettingsCommandMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterSettingsCommandMT:
      return extjson_uci::type::RadarAltimeterSettingsCommandMT::serialize(dynamic_cast<const uci::type::RadarAltimeterSettingsCommandMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterSettingsCommandStatusMDT:
      return extjson_uci::type::RadarAltimeterSettingsCommandStatusMDT::serialize(dynamic_cast<const uci::type::RadarAltimeterSettingsCommandStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarAltimeterSettingsCommandStatusMT:
      return extjson_uci::type::RadarAltimeterSettingsCommandStatusMT::serialize(dynamic_cast<const uci::type::RadarAltimeterSettingsCommandStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarCollectionOptionsType:
      return extjson_uci::type::RadarCollectionOptionsType::serialize(dynamic_cast<const uci::type::RadarCollectionOptionsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarEmitterIdentityType:
      return extjson_uci::type::RadarEmitterIdentityType::serialize(dynamic_cast<const uci::type::RadarEmitterIdentityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarPointingTargetType:
      return extjson_uci::type::RadarPointingTargetType::serialize(dynamic_cast<const uci::type::RadarPointingTargetType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarSpoilTaperType:
      return extjson_uci::type::RadarSpoilTaperType::serialize(dynamic_cast<const uci::type::RadarSpoilTaperType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarSpoilType:
      return extjson_uci::type::RadarSpoilType::serialize(dynamic_cast<const uci::type::RadarSpoilType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarTaperType:
      return extjson_uci::type::RadarTaperType::serialize(dynamic_cast<const uci::type::RadarTaperType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::radarTaperWeightingFunctionType:
      return extjson_uci::type::RadarTaperWeightingFunctionType::serialize(dynamic_cast<const uci::type::RadarTaperWeightingFunctionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::rangeDopplerResolutionType:
      return extjson_uci::type::RangeDopplerResolutionType::serialize(dynamic_cast<const uci::type::RangeDopplerResolutionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::rangeElevationExtentChoiceType:
      return extjson_uci::type::RangeElevationExtentChoiceType::serialize(dynamic_cast<const uci::type::RangeElevationExtentChoiceType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::rangeExtentType:
      return extjson_uci::type::RangeExtentType::serialize(dynamic_cast<const uci::type::RangeExtentType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::rangeResolutionType:
      return extjson_uci::type::RangeResolutionType::serialize(dynamic_cast<const uci::type::RangeResolutionType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::rankCompareType:
      return extjson_uci::type::RankCompareType::serialize(dynamic_cast<const uci::type::RankCompareType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::ratesSettingsType:
      return extjson_uci::type::RatesSettingsType::serialize(dynamic_cast<const uci::type::RatesSettingsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::rCS_MedianType:
      return extjson_uci::type::RCS_MedianType::serialize(dynamic_cast<const uci::type::RCS_MedianType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::rCS_ParamsType:
      return extjson_uci::type::RCS_ParamsType::serialize(dynamic_cast<const uci::type::RCS_ParamsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::rDMA_InitializeID_Type:
      return extjson_uci::type::RDMA_InitializeID_Type::serialize(dynamic_cast<const uci::type::RDMA_InitializeID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::rDMA_InitializeMDT:
      return extjson_uci::type::RDMA_InitializeMDT::serialize(dynamic_cast<const uci::type::RDMA_InitializeMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::rDMA_InitializeMT:
      return extjson_uci::type::RDMA_InitializeMT::serialize(dynamic_cast<const uci::type::RDMA_InitializeMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::rDMA_InitializeSetupID_Type:
      return extjson_uci::type::RDMA_InitializeSetupID_Type::serialize(dynamic_cast<const uci::type::RDMA_InitializeSetupID_Type&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::rDMA_InitializeSetupMDT:
      return extjson_uci::type::RDMA_InitializeSetupMDT::serialize(dynamic_cast<const uci::type::RDMA_InitializeSetupMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::rDMA_InitializeSetupMT:
      return extjson_uci::type::RDMA_InitializeSetupMT::serialize(dynamic_cast<const uci::type::RDMA_InitializeSetupMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::readinessItemStatusType:
      return extjson_uci::type::ReadinessItemStatusType::serialize(dynamic_cast<const uci::type::ReadinessItemStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::readinessRecordType:
      return extjson_uci::type::ReadinessRecordType::serialize(dynamic_cast<const uci::type::ReadinessRecordType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::readinessTimeSpanType:
      return extjson_uci::type::ReadinessTimeSpanType::serialize(dynamic_cast<const uci::type::ReadinessTimeSpanType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::receiverIdentificationType:
      return extjson_uci::type::ReceiverIdentificationType::serialize(dynamic_cast<const uci::type::ReceiverIdentificationType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::recommendedWeaponsType:
      return extjson_uci::type::RecommendedWeaponsType::serialize(dynamic_cast<const uci::type::RecommendedWeaponsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::reconnaissanceStatusType:
      return extjson_uci::type::ReconnaissanceStatusType::serialize(dynamic_cast<const uci::type::ReconnaissanceStatusType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::rectangleType:
      return extjson_uci::type::RectangleType::serialize(dynamic_cast<const uci::type::RectangleType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::rectangularConeType:
      return extjson_uci::type::RectangularConeType::serialize(dynamic_cast<const uci::type::RectangularConeType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::referenceActivityMDT:
      return extjson_uci::type::ReferenceActivityMDT::serialize(dynamic_cast<const uci::type::ReferenceActivityMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::referenceActivityMT:
      return extjson_uci::type::ReferenceActivityMT::serialize(dynamic_cast<const uci::type::ReferenceActivityMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::referenceActivityType:
      return extjson_uci::type::ReferenceActivityType::serialize(dynamic_cast<const uci::type::ReferenceActivityType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::referenceAssetKinematicsType:
      return extjson_uci::type::ReferenceAssetKinematicsType::serialize(dynamic_cast<const uci::type::ReferenceAssetKinematicsType&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::referenceCapabilityMDT:
      return extjson_uci::type::ReferenceCapabilityMDT::serialize(dynamic_cast<const uci::type::ReferenceCapabilityMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::referenceCapabilityMT:
      return extjson_uci::type::ReferenceCapabilityMT::serialize(dynamic_cast<const uci::type::ReferenceCapabilityMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::referenceCapabilityStatusMDT:
      return extjson_uci::type::ReferenceCapabilityStatusMDT::serialize(dynamic_cast<const uci::type::ReferenceCapabilityStatusMDT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::referenceCapabilityStatusMT:
      return extjson_uci::type::ReferenceCapabilityStatusMT::serialize(dynamic_cast<const uci::type::ReferenceCapabilityStatusMT&>(accessor), propTree, "", true, false, true, true);
    case uci::type::accessorType::referenceCapabilityTaxonomyType:
      return extjson_uci::type::ReferenceCapabilityTaxonomyType::serialize(dynamic_cast<const uci::type::ReferenceCapabilityTaxonomyType&>(accessor), propTree, "", true, false, true, true);
    default:
      return boost::none;
  }
}

} // namespace base

} // namespace extjson_uci

