/** @file ExternalizerRead2.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/base/ExternalizerRead2.h"

#include <string>

#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/type/COMINT_AcquisitionTargetType.h"
#include "extjson_uci/type/COMINT_ActivityCommandType.h"
#include "extjson_uci/type/COMINT_ActivityMDT.h"
#include "extjson_uci/type/COMINT_ActivityMT.h"
#include "extjson_uci/type/COMINT_ActivityType.h"
#include "extjson_uci/type/COMINT_CapabilityCommandType.h"
#include "extjson_uci/type/COMINT_CapabilityMDT.h"
#include "extjson_uci/type/COMINT_CapabilityMT.h"
#include "extjson_uci/type/COMINT_CapabilityOptionsType.h"
#include "extjson_uci/type/COMINT_CapabilityStatusMDT.h"
#include "extjson_uci/type/COMINT_CapabilityStatusMT.h"
#include "extjson_uci/type/COMINT_CapabilityType.h"
#include "extjson_uci/type/COMINT_ChangeDwellType.h"
#include "extjson_uci/type/COMINT_ChangeGeolocationType.h"
#include "extjson_uci/type/COMINT_CommandMDT.h"
#include "extjson_uci/type/COMINT_CommandMT.h"
#include "extjson_uci/type/COMINT_CommandResponseType.h"
#include "extjson_uci/type/COMINT_CommandStatusMDT.h"
#include "extjson_uci/type/COMINT_CommandStatusMT.h"
#include "extjson_uci/type/COMINT_CommandType.h"
#include "extjson_uci/type/COMINT_ConsentRequestMDT.h"
#include "extjson_uci/type/COMINT_ConsentRequestMT.h"
#include "extjson_uci/type/COMINT_ConsentRequestStatusMDT.h"
#include "extjson_uci/type/COMINT_ConsentRequestStatusMT.h"
#include "extjson_uci/type/COMINT_ConsentRequestType.h"
#include "extjson_uci/type/COMINT_DataCollectCommandType.h"
#include "extjson_uci/type/COMINT_DirectionFindingType.h"
#include "extjson_uci/type/COMINT_GeolocationType.h"
#include "extjson_uci/type/COMINT_IdentificationType.h"
#include "extjson_uci/type/COMINT_InteractiveType.h"
#include "extjson_uci/type/COMINT_MeasurementResultsType.h"
#include "extjson_uci/type/COMINT_MeasurementType.h"
#include "extjson_uci/type/COMINT_ProcessingParametersType.h"
#include "extjson_uci/type/COMINT_ReceiveDwellType.h"
#include "extjson_uci/type/COMINT_SettingsCommandMDT.h"
#include "extjson_uci/type/COMINT_SettingsCommandMT.h"
#include "extjson_uci/type/COMINT_SettingsCommandStatusMDT.h"
#include "extjson_uci/type/COMINT_SettingsCommandStatusMT.h"
#include "extjson_uci/type/COMINT_SpecificDataType.h"
#include "extjson_uci/type/COMINT_SubCapabilityDetailsType.h"
#include "extjson_uci/type/COMINT_SubcapabilityAcquisitionType.h"
#include "extjson_uci/type/COMINT_SubcapabilityChoiceType.h"
#include "extjson_uci/type/COMINT_SubcapabilityDataCollectType.h"
#include "extjson_uci/type/COMINT_SubcapabilityGeolocationType.h"
#include "extjson_uci/type/COMINT_SubcapabilityIdentificationType.h"
#include "extjson_uci/type/COMINT_SubcapabilityMeasurementType.h"
#include "extjson_uci/type/COMINT_SubcapabilityTargetLocationDataType.h"
#include "extjson_uci/type/COMINT_TargetType.h"
#include "extjson_uci/type/COMINT_TaskBaseType.h"
#include "extjson_uci/type/COMINT_TaskType.h"
#include "extjson_uci/type/CSO_DetailsType.h"
#include "extjson_uci/type/CS_ActivityDetailType.h"
#include "extjson_uci/type/CS_ActivityType.h"
#include "extjson_uci/type/CS_AssessmentType.h"
#include "extjson_uci/type/CS_CapabilitiesType.h"
#include "extjson_uci/type/CS_CapabilityType.h"
#include "extjson_uci/type/CS_DetailDataType.h"
#include "extjson_uci/type/CS_EngagementDataType.h"
#include "extjson_uci/type/CS_ForceType.h"
#include "extjson_uci/type/CS_FreeFormatType.h"
#include "extjson_uci/type/CS_HeaderType.h"
#include "extjson_uci/type/CS_ObscuraDataType.h"
#include "extjson_uci/type/CS_ObscuraType.h"
#include "extjson_uci/type/CS_PostureType.h"
#include "extjson_uci/type/CS_STO_TraceabilityType.h"
#include "extjson_uci/type/CS_SatBandDeconType.h"
#include "extjson_uci/type/CS_SensorDataType.h"
#include "extjson_uci/type/CS_SignalType.h"
#include "extjson_uci/type/CS_SubDetailDataType.h"
#include "extjson_uci/type/ColorPhotometryParamsType.h"
#include "extjson_uci/type/CommActionExtendedType.h"
#include "extjson_uci/type/CommActionType.h"
#include "extjson_uci/type/CommAllocationActionType.h"
#include "extjson_uci/type/CommAllocationConstraintType.h"
#include "extjson_uci/type/CommAllocationPartsType.h"
#include "extjson_uci/type/CommAllocationStatusType.h"
#include "extjson_uci/type/CommAntennaModeType.h"
#include "extjson_uci/type/CommAssetEstimationRequestMDT.h"
#include "extjson_uci/type/CommAssetEstimationRequestMT.h"
#include "extjson_uci/type/CommAssetEstimationRequestStatusMDT.h"
#include "extjson_uci/type/CommAssetEstimationRequestStatusMT.h"
#include "extjson_uci/type/CommAssetEstimationResultType.h"
#include "extjson_uci/type/CommAssetID_Type.h"
#include "extjson_uci/type/CommAssetMDT.h"
#include "extjson_uci/type/CommAssetMT.h"
#include "extjson_uci/type/CommAssetOrbitID_Type.h"
#include "extjson_uci/type/CommAssetOrbitMDT.h"
#include "extjson_uci/type/CommAssetOrbitMT.h"
#include "extjson_uci/type/CommAssetPositionReportMDT.h"
#include "extjson_uci/type/CommAssetPositionReportMT.h"
#include "extjson_uci/type/CommBLOS_CommWaveformActivityCommandType.h"
#include "extjson_uci/type/CommBLOS_CommWaveformActivityType.h"
#include "extjson_uci/type/CommBLOS_CommWaveformCapabilityCommandType.h"
#include "extjson_uci/type/CommBLOS_ControlStatusType.h"
#include "extjson_uci/type/CommBLOS_ControlType.h"
#include "extjson_uci/type/CommBLOS_NetworkComsecModeRequestType.h"
#include "extjson_uci/type/CommBLOS_NetworkComsecModeType.h"
#include "extjson_uci/type/CommCDL_CommWaveformActivityCommandType.h"
#include "extjson_uci/type/CommCDL_CommWaveformActivityType.h"
#include "extjson_uci/type/CommCDL_CommWaveformCapabilityCommandType.h"
#include "extjson_uci/type/CommCDL_ControlType.h"
#include "extjson_uci/type/CommCapabilityOptionsType.h"
#include "extjson_uci/type/CommCapabilityType.h"
#include "extjson_uci/type/CommConfigurationID_Type.h"
#include "extjson_uci/type/CommConnectionType.h"
#include "extjson_uci/type/CommControlType.h"
#include "extjson_uci/type/CommCoverageDataType.h"
#include "extjson_uci/type/CommCoverageUserDataType.h"
#include "extjson_uci/type/CommDataType.h"
#include "extjson_uci/type/CommEffectivityID_Type.h"
#include "extjson_uci/type/CommEffectivityType.h"
#include "extjson_uci/type/CommFrequencyType.h"
#include "extjson_uci/type/CommIFDL_CommWaveformActivityCommandType.h"
#include "extjson_uci/type/CommIFDL_CommWaveformActivityType.h"
#include "extjson_uci/type/CommIFDL_CommWaveformCapabilityCommandType.h"
#include "extjson_uci/type/CommIFDL_ControlType.h"
#include "extjson_uci/type/CommIFDL_NetLinkStatusType.h"
#include "extjson_uci/type/CommLink16AdvancedSlotNotificationType.h"
#include "extjson_uci/type/CommLink16CommWaveformActivityCommandType.h"
#include "extjson_uci/type/CommLink16CommWaveformActivityType.h"
#include "extjson_uci/type/CommLink16CommWaveformCapabilityCommandType.h"
#include "extjson_uci/type/CommLink16ControlType.h"
#include "extjson_uci/type/CommLink16DelayReductionType.h"
#include "extjson_uci/type/CommLink16InitialEntryMessageType.h"
#include "extjson_uci/type/CommLink16MissionInfoWordsType.h"
#include "extjson_uci/type/CommLink16NetSelectionType.h"
#include "extjson_uci/type/CommLink16ReceiptComplianceWordsType.h"
#include "extjson_uci/type/CommLink16TxPG_Type.h"
#include "extjson_uci/type/CommLinkDetailsType.h"
#include "extjson_uci/type/CommLinkPortMapType.h"
#include "extjson_uci/type/CommLinkStatisticsType.h"
#include "extjson_uci/type/CommMADL_CommWaveformActivityCommandType.h"
#include "extjson_uci/type/CommMADL_CommWaveformActivityType.h"
#include "extjson_uci/type/CommMADL_CommWaveformCapabilityCommandType.h"
#include "extjson_uci/type/CommMADL_ControlType.h"
#include "extjson_uci/type/CommMADL_LinkCommandListType.h"
#include "extjson_uci/type/CommMADL_LinkCommandType.h"
#include "extjson_uci/type/CommMADL_LinkStatusListType.h"
#include "extjson_uci/type/CommMADL_LinkStatusType.h"
#include "extjson_uci/type/CommMADL_NetChangeRequestType.h"
#include "extjson_uci/type/CommMADL_NetChangeSelectionListType.h"
#include "extjson_uci/type/CommMADL_NetChangeSelectionType.h"
#include "extjson_uci/type/CommMADL_NetworkLayoutType.h"
#include "extjson_uci/type/CommMADL_NetworkType.h"
#include "extjson_uci/type/CommMADL_PeerNodeDataType.h"
#include "extjson_uci/type/CommMADL_SecurityKeyType.h"
#include "extjson_uci/type/CommMADL_TopologyEntryType.h"
#include "extjson_uci/type/CommModeUsageType.h"
#include "extjson_uci/type/CommOutageType.h"
#include "extjson_uci/type/CommPTW_CommWaveformActivityCommandType.h"
#include "extjson_uci/type/CommPTW_CommWaveformActivityType.h"
#include "extjson_uci/type/CommPTW_CommWaveformCapabilityCommandType.h"
#include "extjson_uci/type/CommPTW_ControlStatusType.h"
#include "extjson_uci/type/CommPTW_ControlType.h"
#include "extjson_uci/type/CommPointingCommandMDT.h"
#include "extjson_uci/type/CommPointingCommandMT.h"
#include "extjson_uci/type/CommPointingCommandStatusMDT.h"
#include "extjson_uci/type/CommPointingCommandStatusMT.h"
#include "extjson_uci/type/CommPointingID_Type.h"
#include "extjson_uci/type/CommPointingMDT.h"
#include "extjson_uci/type/CommPointingMT.h"
#include "extjson_uci/type/CommPointingPlanAssessmentType.h"
#include "extjson_uci/type/CommPointingPlanDataType.h"
#include "extjson_uci/type/CommPointingPlanRequestType.h"
#include "extjson_uci/type/CommPointingRequestMDT.h"
#include "extjson_uci/type/CommPointingRequestMT.h"
#include "extjson_uci/type/CommPointingRequestStatusMDT.h"
#include "extjson_uci/type/CommPointingRequestStatusMT.h"
#include "extjson_uci/type/CommPointingType.h"
#include "extjson_uci/type/CommPortSettingsType.h"
#include "extjson_uci/type/CommProfileID_Type.h"
#include "extjson_uci/type/CommRangeDelayChoiceType.h"
#include "extjson_uci/type/CommRelayActivityMDT.h"
#include "extjson_uci/type/CommRelayActivityMT.h"
#include "extjson_uci/type/CommRelayActivityType.h"
#include "extjson_uci/type/CommRelayCapabilityCommandType.h"
#include "extjson_uci/type/CommRelayCapabilityMDT.h"
#include "extjson_uci/type/CommRelayCapabilityMT.h"
#include "extjson_uci/type/CommRelayCapabilityStatusMDT.h"
#include "extjson_uci/type/CommRelayCapabilityStatusMT.h"
#include "extjson_uci/type/CommRelayCapabilityType.h"
#include "extjson_uci/type/CommRelayCommandMDT.h"
#include "extjson_uci/type/CommRelayCommandMT.h"
#include "extjson_uci/type/CommRelayCommandResponseType.h"
#include "extjson_uci/type/CommRelayCommandStatusMDT.h"
#include "extjson_uci/type/CommRelayCommandStatusMT.h"
#include "extjson_uci/type/CommRelayCommandType.h"
#include "extjson_uci/type/CommRelayOptionsType.h"
#include "extjson_uci/type/CommRelaySettingsCommandMDT.h"
#include "extjson_uci/type/CommRelaySettingsCommandMT.h"
#include "extjson_uci/type/CommRelaySettingsCommandStatusMDT.h"
#include "extjson_uci/type/CommRelaySettingsCommandStatusMT.h"
#include "extjson_uci/type/CommRelayTaskBaseType.h"
#include "extjson_uci/type/CommRelayTaskMetricsType.h"
#include "extjson_uci/type/CommRelayTaskType.h"
#include "extjson_uci/type/CommResourceType.h"
#include "extjson_uci/type/CommSINCGARS_CommWaveformActivityCommandType.h"
#include "extjson_uci/type/CommSINCGARS_CommWaveformActivityType.h"
#include "extjson_uci/type/CommSINCGARS_CommWaveformCapabilityCommandType.h"
#include "extjson_uci/type/CommSINCGARS_ControlType.h"
#include "extjson_uci/type/CommScheduleAllocationID_Type.h"
#include "extjson_uci/type/CommScheduleAllocationMDT.h"
#include "extjson_uci/type/CommScheduleAllocationMT.h"
#include "extjson_uci/type/CommScheduleAllocationType.h"
#include "extjson_uci/type/CommScheduleAllocationUpdateRequestMDT.h"
#include "extjson_uci/type/CommScheduleAllocationUpdateRequestMT.h"
#include "extjson_uci/type/CommScheduleAllocationUpdateRequestStatusMDT.h"
#include "extjson_uci/type/CommScheduleAllocationUpdateRequestStatusMT.h"
#include "extjson_uci/type/CommScheduleAvailabilityID_Type.h"
#include "extjson_uci/type/CommScheduleAvailabilityMDT.h"
#include "extjson_uci/type/CommScheduleAvailabilityMT.h"
#include "extjson_uci/type/CommSchedulingRequestMDT.h"
#include "extjson_uci/type/CommSchedulingRequestMT.h"
#include "extjson_uci/type/CommSchedulingRequestStatusMDT.h"
#include "extjson_uci/type/CommSchedulingRequestStatusMT.h"
#include "extjson_uci/type/CommSchedulingRequirementID_Type.h"
#include "extjson_uci/type/CommSchedulingRequirementMDT.h"
#include "extjson_uci/type/CommSchedulingRequirementMT.h"
#include "extjson_uci/type/CommSpecificRequestDataEXT.h"
#include "extjson_uci/type/CommStarlinkCommWaveformActivityCommandType.h"
#include "extjson_uci/type/CommStarlinkCommWaveformActivityType.h"
#include "extjson_uci/type/CommStarlinkCommWaveformCapabilityCommandType.h"
#include "extjson_uci/type/CommStarlinkControlStatusType.h"
#include "extjson_uci/type/CommStarlinkControlType.h"
#include "extjson_uci/type/CommSystemID_Type.h"
#include "extjson_uci/type/CommSystemMDT.h"
#include "extjson_uci/type/CommSystemMT.h"
#include "extjson_uci/type/CommSystemUsageType.h"
#include "extjson_uci/type/CommTerminalActivityCommandType.h"
#include "extjson_uci/type/CommTerminalActivityMDT.h"
#include "extjson_uci/type/CommTerminalActivityMT.h"
#include "extjson_uci/type/CommTerminalActivityType.h"
#include "extjson_uci/type/CommTerminalCapabilityCommandType.h"
#include "extjson_uci/type/CommTerminalCapabilityMDT.h"
#include "extjson_uci/type/CommTerminalCapabilityMT.h"
#include "extjson_uci/type/CommTerminalCapabilityStatusMDT.h"
#include "extjson_uci/type/CommTerminalCapabilityStatusMT.h"
#include "extjson_uci/type/CommTerminalCapabilityStatusType.h"
#include "extjson_uci/type/CommTerminalCapabilityType.h"
#include "extjson_uci/type/CommTerminalCommandMDT.h"
#include "extjson_uci/type/CommTerminalCommandMT.h"
#include "extjson_uci/type/CommTerminalCommandStatusMDT.h"
#include "extjson_uci/type/CommTerminalCommandStatusMT.h"
#include "extjson_uci/type/CommTerminalCommandType.h"
#include "extjson_uci/type/CommTerminalPlanActivationCommandMDT.h"
#include "extjson_uci/type/CommTerminalPlanActivationCommandMT.h"
#include "extjson_uci/type/CommTerminalPlanActivationCommandStatusMDT.h"
#include "extjson_uci/type/CommTerminalPlanActivationCommandStatusMT.h"
#include "extjson_uci/type/CommTerminalPlanActivationStatusMDT.h"
#include "extjson_uci/type/CommTerminalPlanActivationStatusMT.h"
#include "extjson_uci/type/CommTerminalPlanConfigurationActivationType.h"
#include "extjson_uci/type/CommTerminalPlanConfigurationStateType.h"
#include "extjson_uci/type/CommTerminalPlanDetailsType.h"
#include "extjson_uci/type/CommTerminalPlanEffectivityActivationStatusType.h"
#include "extjson_uci/type/CommTerminalPlanEffectivityActivationType.h"
#include "extjson_uci/type/CommTerminalPlanEffectivityStateType.h"
#include "extjson_uci/type/CommTerminalPlanID_Type.h"
#include "extjson_uci/type/CommTerminalPlanMDT.h"
#include "extjson_uci/type/CommTerminalPlanMT.h"
#include "extjson_uci/type/CommTerminalPlanOverrideActivationType.h"
#include "extjson_uci/type/CommTerminalPlanOverrideRequestMDT.h"
#include "extjson_uci/type/CommTerminalPlanOverrideRequestMT.h"
#include "extjson_uci/type/CommTerminalPlanOverrideRequestStatusMDT.h"
#include "extjson_uci/type/CommTerminalPlanOverrideRequestStatusMT.h"
#include "extjson_uci/type/CommTerminalPlanOverrideRequestType.h"
#include "extjson_uci/type/CommTerminalPlanTriggerType.h"
#include "extjson_uci/type/CommTerminalSettingsCommandMDT.h"
#include "extjson_uci/type/CommTerminalSettingsCommandMT.h"
#include "extjson_uci/type/CommTerminalSettingsCommandStatusMDT.h"
#include "extjson_uci/type/CommTerminalSettingsCommandStatusMT.h"
#include "extjson_uci/type/CommType.h"
#include "extjson_uci/type/CommUHF_SATCOM_CommWaveformActivityCommandType.h"
#include "extjson_uci/type/CommUHF_SATCOM_CommWaveformActivityType.h"
#include "extjson_uci/type/CommUHF_SATCOM_CommWaveformCapabilityCommandType.h"
#include "extjson_uci/type/CommUserIO_ID_Type.h"
#include "extjson_uci/type/CommUserLinkID_Type.h"
#include "extjson_uci/type/CommUserLinkType.h"
#include "extjson_uci/type/CommUtilizationRequestMDT.h"
#include "extjson_uci/type/CommUtilizationRequestMT.h"
#include "extjson_uci/type/CommUtilizationRequestStatusMDT.h"
#include "extjson_uci/type/CommUtilizationRequestStatusMT.h"
#include "extjson_uci/type/CommWaveformActivityCommandPET.h"
#include "extjson_uci/type/CommWaveformActivityPET.h"
#include "extjson_uci/type/CommWaveformCapabilityCommandPET.h"
#include "extjson_uci/type/CommandBaseType.h"
#include "extjson_uci/type/CommandID_Type.h"
#include "extjson_uci/type/CommandResponseType.h"
#include "extjson_uci/type/CommandStatusBaseType.h"
#include "extjson_uci/type/CommandableCapabilityDeclarationType.h"
#include "extjson_uci/type/CommsLostTriggerDataType.h"
#include "extjson_uci/type/CommunicationsEmitterIdentityType.h"
#include "extjson_uci/type/ComparableAtomicValueType.h"
#include "extjson_uci/type/ComparableRankingType.h"
#include "extjson_uci/type/CompletedRequirementMetricsType.h"
#include "extjson_uci/type/CompletionStatusType.h"
#include "extjson_uci/type/ComponentConfigurationChoiceType.h"
#include "extjson_uci/type/ComponentConfigurationDataRequestMDT.h"
#include "extjson_uci/type/ComponentConfigurationDataRequestMT.h"
#include "extjson_uci/type/ComponentConfigurationDataRequestStatusMDT.h"
#include "extjson_uci/type/ComponentConfigurationDataRequestStatusMT.h"
#include "extjson_uci/type/ComponentConfigurationID_Type.h"
#include "extjson_uci/type/ComponentConfigurationMDT.h"
#include "extjson_uci/type/ComponentConfigurationMT.h"
#include "extjson_uci/type/ComponentConfigurationPET.h"
#include "extjson_uci/type/ComponentConfigurationTreeType.h"
#include "extjson_uci/type/ComponentConfigurationType.h"
#include "extjson_uci/type/ComponentControllabilityA_Type.h"
#include "extjson_uci/type/ComponentControllabilityB_Type.h"
#include "extjson_uci/type/ComponentControlsA_Type.h"
#include "extjson_uci/type/ComponentControlsB_Type.h"
#include "extjson_uci/type/ComponentControlsStatusType.h"
#include "extjson_uci/type/ComponentDetailedStatusInfoType.h"
#include "extjson_uci/type/ComponentDetailedStatusType.h"
#include "extjson_uci/type/ComponentElementID_Type.h"
#include "extjson_uci/type/ComponentElementIdentifierChoiceType.h"
#include "extjson_uci/type/ComponentElementStateType.h"
#include "extjson_uci/type/ComponentExtendedStatusPET.h"
#include "extjson_uci/type/ComponentFieldOfRegardType.h"
#include "extjson_uci/type/ComponentID_Type.h"
#include "extjson_uci/type/ComponentOrientationType.h"
#include "extjson_uci/type/ComponentPressureType.h"
#include "extjson_uci/type/ComponentResourceType.h"
#include "extjson_uci/type/ComponentSettingsCommandMDT.h"
#include "extjson_uci/type/ComponentSettingsCommandMT.h"
#include "extjson_uci/type/ComponentSettingsCommandStatusMDT.h"
#include "extjson_uci/type/ComponentSettingsCommandStatusMT.h"
#include "extjson_uci/type/ComponentSettingsParameterType.h"
#include "extjson_uci/type/ComponentStatusDataRequestMDT.h"
#include "extjson_uci/type/ComponentStatusDataRequestMT.h"
#include "extjson_uci/type/ComponentStatusDataRequestStatusMDT.h"
#include "extjson_uci/type/ComponentStatusDataRequestStatusMT.h"
#include "extjson_uci/type/ComponentStatusMDT.h"
#include "extjson_uci/type/ComponentStatusMT.h"
#include "extjson_uci/type/ComponentTemperatureType.h"
#include "extjson_uci/type/ComponentType.h"
#include "extjson_uci/type/CompressionRatioSettingsType.h"
#include "extjson_uci/type/ConcurrentCollectionDetailsType.h"
#include "extjson_uci/type/ConcurrentTaskReferenceType.h"
#include "extjson_uci/type/ConditionalPathSegmentType.h"
#include "extjson_uci/type/ConeAngleCovarianceRatesType.h"
#include "extjson_uci/type/ConeAngleCovarianceType.h"
#include "extjson_uci/type/ConeAngleRatesType.h"
#include "extjson_uci/type/ConeAngleSlantRangeCovarianceRatesType.h"
#include "extjson_uci/type/ConeAngleSlantRangeCovarianceType.h"
#include "extjson_uci/type/ConeAngleSlantRangeUncertaintyType.h"
#include "extjson_uci/type/ConeAngleType.h"
#include "extjson_uci/type/ConeAngleUncertaintyType.h"
#include "extjson_uci/type/ConeAngleVarianceRatesType.h"
#include "extjson_uci/type/ConeAngleVarianceType.h"
#include "extjson_uci/type/ConeType.h"
#include "extjson_uci/type/ConfigurationParameterCategoryType.h"
#include "extjson_uci/type/ConfigurationParameterRangeType.h"
#include "extjson_uci/type/ConfigurationParameterType.h"
#include "extjson_uci/type/ConfigurationParameterValueRestrictionsType.h"
#include "extjson_uci/type/ConfigureInteroperabilityReportType.h"
#include "extjson_uci/type/ConflictLocationType.h"
#include "extjson_uci/type/ConflictType.h"
#include "extjson_uci/type/ConstrainedEntityType.h"
#include "extjson_uci/type/ConstrainedEntryExitType.h"
#include "extjson_uci/type/ConstrainedOpLineType.h"
#include "extjson_uci/type/ConstrainedOpPointType.h"
#include "extjson_uci/type/ConstrainedOpVolumeType.h"
#include "extjson_uci/type/ConstrainedOpZoneType.h"
#include "extjson_uci/type/ConstrainingPlanPartsType.h"
#include "extjson_uci/type/ConstrainingPlansType.h"
#include "extjson_uci/type/ContactDetailsType.h"
#include "extjson_uci/type/ContingencyPathAutonomyType.h"
#include "extjson_uci/type/ContingencyPathSpacingType.h"
#include "extjson_uci/type/ControlInterfacesCapabilityControlType.h"
#include "extjson_uci/type/ControlInterfacesCommandMDT.h"
#include "extjson_uci/type/ControlInterfacesCommandMT.h"
#include "extjson_uci/type/ControlInterfacesCommandStatusMDT.h"
#include "extjson_uci/type/ControlInterfacesCommandStatusMT.h"
#include "extjson_uci/type/ControlInterfacesControlType.h"
#include "extjson_uci/type/ControlRequestMDT.h"
#include "extjson_uci/type/ControlRequestMT.h"
#include "extjson_uci/type/ControlRequestStatusMDT.h"
#include "extjson_uci/type/ControlRequestStatusMT.h"
#include "extjson_uci/type/ControlSourcesCapabilityControlType.h"
#include "extjson_uci/type/ControlSourcesCommandMDT.h"
#include "extjson_uci/type/ControlSourcesCommandMT.h"
#include "extjson_uci/type/ControlSourcesCommandStatusMDT.h"
#include "extjson_uci/type/ControlSourcesCommandStatusMT.h"
#include "extjson_uci/type/ControlSourcesControlType.h"
#include "extjson_uci/type/ControlStatusCapabilityControlType.h"
#include "extjson_uci/type/ControlStatusControlType.h"
#include "extjson_uci/type/ControlStatusMDT.h"
#include "extjson_uci/type/ControlStatusMT.h"
#include "extjson_uci/type/ControlStatusMissionControlType.h"
#include "extjson_uci/type/ControlTransferChoiceType.h"
#include "extjson_uci/type/ControlleeType.h"
#include "extjson_uci/type/CoordinatedRequirementSetID_Type.h"
#include "extjson_uci/type/CoordinatedRequirementSetMDT.h"
#include "extjson_uci/type/CoordinatedRequirementSetMT.h"
#include "extjson_uci/type/CoordinatedRequirementSetStatusMDT.h"
#include "extjson_uci/type/CoordinatedRequirementSetStatusMT.h"
#include "extjson_uci/type/CoordinationConditionType.h"
#include "extjson_uci/type/CornerPointImageRegionOfInterestType.h"
#include "extjson_uci/type/CorrelatedEntityID_Type.h"
#include "extjson_uci/type/CounterSpaceActivityMDT.h"
#include "extjson_uci/type/CounterSpaceActivityMT.h"
#include "extjson_uci/type/CounterSpaceCapabilityMDT.h"
#include "extjson_uci/type/CounterSpaceCapabilityMT.h"
#include "extjson_uci/type/CounterSpaceCapabilityStatusMDT.h"
#include "extjson_uci/type/CounterSpaceCapabilityStatusMT.h"
#include "extjson_uci/type/CounterSpaceDeconflictionID_Type.h"
#include "extjson_uci/type/CounterSpaceDeconflictionMDT.h"
#include "extjson_uci/type/CounterSpaceDeconflictionMT.h"
#include "extjson_uci/type/CounterSpaceReportID_Type.h"
#include "extjson_uci/type/CounterSpaceReportMDT.h"
#include "extjson_uci/type/CounterSpaceReportMT.h"
#include "extjson_uci/type/CounterSpaceTaskType.h"
#include "extjson_uci/type/CountryCodeType.h"
#include "extjson_uci/type/CovarianceMatrixType.h"
#include "extjson_uci/type/CropSettingsType.h"
#include "extjson_uci/type/CropType.h"
#include "extjson_uci/type/CryptoCommandMDT.h"
#include "extjson_uci/type/CryptoCommandMT.h"
#include "extjson_uci/type/CryptoCommandStatusMDT.h"
#include "extjson_uci/type/CryptoCommandStatusMT.h"
#include "extjson_uci/type/CryptoCommandType.h"
#include "extjson_uci/type/CryptoKeySourceType.h"
#include "extjson_uci/type/CryptoLoadCommandType.h"
#include "extjson_uci/type/CryptoLoadStatusType.h"
#include "extjson_uci/type/CryptoLocationType.h"
#include "extjson_uci/type/CryptoPortID_Type.h"
#include "extjson_uci/type/CryptoPortStatusType.h"
#include "extjson_uci/type/CryptoRolloverCommandType.h"
#include "extjson_uci/type/CryptoRolloverStatusType.h"
#include "extjson_uci/type/CryptoSlotGroupID_Type.h"
#include "extjson_uci/type/CryptoSlotGroupType.h"
#include "extjson_uci/type/CryptoSlotType.h"
#include "extjson_uci/type/CryptoStatusMDT.h"
#include "extjson_uci/type/CryptoStatusMT.h"
#include "extjson_uci/type/CryptoStatusType.h"
#include "extjson_uci/type/CylinderType.h"
#include "extjson_uci/type/DamageAssessmentDetailType.h"
#include "extjson_uci/type/DamageAssessmentID_Type.h"
#include "extjson_uci/type/DamageAssessmentMDT.h"
#include "extjson_uci/type/DamageAssessmentMT.h"
#include "extjson_uci/type/DamageAssessmentRequestMDT.h"
#include "extjson_uci/type/DamageAssessmentRequestMT.h"
#include "extjson_uci/type/DamageAssessmentRequestStatusMDT.h"
#include "extjson_uci/type/DamageAssessmentRequestStatusMT.h"
#include "extjson_uci/type/DamageEstimateDetailsType.h"
#include "extjson_uci/type/DamageEstimateID_Type.h"
#include "extjson_uci/type/DamageEstimateMDT.h"
#include "extjson_uci/type/DamageEstimateMT.h"
#include "extjson_uci/type/DamageEstimateRequestMDT.h"
#include "extjson_uci/type/DamageEstimateRequestMT.h"
#include "extjson_uci/type/DamageEstimateRequestStatusMDT.h"
#include "extjson_uci/type/DamageEstimateRequestStatusMT.h"
#include "extjson_uci/type/DamageEstimateTargetType.h"
#include "extjson_uci/type/DamageInformationSourceType.h"
#include "extjson_uci/type/DamageInformationWeatherSourceType.h"
#include "extjson_uci/type/DamageObjectClassType.h"
#include "extjson_uci/type/DamageObservationSourceType.h"
#include "extjson_uci/type/DamageProbabilityZoneType.h"
#include "extjson_uci/type/DamageReportDetailType.h"
#include "extjson_uci/type/DamageReportID_Type.h"
#include "extjson_uci/type/DamageReportMDT.h"
#include "extjson_uci/type/DamageReportMT.h"
#include "extjson_uci/type/DamageSubjectType.h"
#include "extjson_uci/type/DamageSummaryID_Type.h"
#include "extjson_uci/type/DamageSummaryMDT.h"
#include "extjson_uci/type/DamageSummaryMT.h"
#include "extjson_uci/type/DamageSummaryType.h"
#include "extjson_uci/type/DamageType.h"
#include "extjson_uci/type/DamageWeaponEmploymentType.h"
#include "extjson_uci/type/DamagedFunctionType.h"
#include "extjson_uci/type/DamagedHumanType.h"
#include "extjson_uci/type/DamagedObjectIdentityType.h"
#include "extjson_uci/type/DamagedObjectNonEntityType.h"
#include "extjson_uci/type/DamagedObjectType.h"
#include "extjson_uci/type/DataDeleteChoiceType.h"
#include "extjson_uci/type/DataDeleteRequestMDT.h"
#include "extjson_uci/type/DataDeleteRequestMT.h"
#include "extjson_uci/type/DataDeleteRequestStatusMDT.h"
#include "extjson_uci/type/DataDeleteRequestStatusMT.h"
#include "extjson_uci/type/DataDeliveryMessageType.h"
#include "extjson_uci/type/DataDeliveryType.h"
#include "extjson_uci/type/DataDestinationID_Type.h"
#include "extjson_uci/type/DataEffectivityType.h"
#include "extjson_uci/type/DataLinkIdentifierPET.h"
#include "extjson_uci/type/DataLinkNativeFilterPET.h"
#include "extjson_uci/type/DataLinkNativeFilter_NetworkLinkType.h"
#include "extjson_uci/type/DataLinkNativeInfoPET.h"
#include "extjson_uci/type/DataManagementCategoryType.h"
#include "extjson_uci/type/DataManagementImportExportType.h"
#include "extjson_uci/type/DataManagementRequestMDT.h"
#include "extjson_uci/type/DataManagementRequestMT.h"
#include "extjson_uci/type/DataManagementRequestStatusMDT.h"
#include "extjson_uci/type/DataManagementRequestStatusMT.h"
#include "extjson_uci/type/DataManagementSaveAsType.h"
#include "extjson_uci/type/DataPlanActivationCommandMDT.h"
#include "extjson_uci/type/DataPlanActivationCommandMT.h"
#include "extjson_uci/type/DataPlanActivationCommandStatusMDT.h"
#include "extjson_uci/type/DataPlanActivationCommandStatusMT.h"
#include "extjson_uci/type/DataPlanActivationStatusMDT.h"
#include "extjson_uci/type/DatalinkControlType.h"
#include "uci/base/accessorType.h"
#include "uci/type/COMINT_AcquisitionTargetType.h"
#include "uci/type/COMINT_ActivityCommandType.h"
#include "uci/type/COMINT_ActivityMDT.h"
#include "uci/type/COMINT_ActivityMT.h"
#include "uci/type/COMINT_ActivityType.h"
#include "uci/type/COMINT_CapabilityCommandType.h"
#include "uci/type/COMINT_CapabilityMDT.h"
#include "uci/type/COMINT_CapabilityMT.h"
#include "uci/type/COMINT_CapabilityOptionsType.h"
#include "uci/type/COMINT_CapabilityStatusMDT.h"
#include "uci/type/COMINT_CapabilityStatusMT.h"
#include "uci/type/COMINT_CapabilityType.h"
#include "uci/type/COMINT_ChangeDwellType.h"
#include "uci/type/COMINT_ChangeGeolocationType.h"
#include "uci/type/COMINT_CommandMDT.h"
#include "uci/type/COMINT_CommandMT.h"
#include "uci/type/COMINT_CommandResponseType.h"
#include "uci/type/COMINT_CommandStatusMDT.h"
#include "uci/type/COMINT_CommandStatusMT.h"
#include "uci/type/COMINT_CommandType.h"
#include "uci/type/COMINT_ConsentRequestMDT.h"
#include "uci/type/COMINT_ConsentRequestMT.h"
#include "uci/type/COMINT_ConsentRequestStatusMDT.h"
#include "uci/type/COMINT_ConsentRequestStatusMT.h"
#include "uci/type/COMINT_ConsentRequestType.h"
#include "uci/type/COMINT_DataCollectCommandType.h"
#include "uci/type/COMINT_DirectionFindingType.h"
#include "uci/type/COMINT_GeolocationType.h"
#include "uci/type/COMINT_IdentificationType.h"
#include "uci/type/COMINT_InteractiveType.h"
#include "uci/type/COMINT_MeasurementResultsType.h"
#include "uci/type/COMINT_MeasurementType.h"
#include "uci/type/COMINT_ProcessingParametersType.h"
#include "uci/type/COMINT_ReceiveDwellType.h"
#include "uci/type/COMINT_SettingsCommandMDT.h"
#include "uci/type/COMINT_SettingsCommandMT.h"
#include "uci/type/COMINT_SettingsCommandStatusMDT.h"
#include "uci/type/COMINT_SettingsCommandStatusMT.h"
#include "uci/type/COMINT_SpecificDataType.h"
#include "uci/type/COMINT_SubCapabilityDetailsType.h"
#include "uci/type/COMINT_SubcapabilityAcquisitionType.h"
#include "uci/type/COMINT_SubcapabilityChoiceType.h"
#include "uci/type/COMINT_SubcapabilityDataCollectType.h"
#include "uci/type/COMINT_SubcapabilityGeolocationType.h"
#include "uci/type/COMINT_SubcapabilityIdentificationType.h"
#include "uci/type/COMINT_SubcapabilityMeasurementType.h"
#include "uci/type/COMINT_SubcapabilityTargetLocationDataType.h"
#include "uci/type/COMINT_TargetType.h"
#include "uci/type/COMINT_TaskBaseType.h"
#include "uci/type/COMINT_TaskType.h"
#include "uci/type/CSO_DetailsType.h"
#include "uci/type/CS_ActivityDetailType.h"
#include "uci/type/CS_ActivityType.h"
#include "uci/type/CS_AssessmentType.h"
#include "uci/type/CS_CapabilitiesType.h"
#include "uci/type/CS_CapabilityType.h"
#include "uci/type/CS_DetailDataType.h"
#include "uci/type/CS_EngagementDataType.h"
#include "uci/type/CS_ForceType.h"
#include "uci/type/CS_FreeFormatType.h"
#include "uci/type/CS_HeaderType.h"
#include "uci/type/CS_ObscuraDataType.h"
#include "uci/type/CS_ObscuraType.h"
#include "uci/type/CS_PostureType.h"
#include "uci/type/CS_STO_TraceabilityType.h"
#include "uci/type/CS_SatBandDeconType.h"
#include "uci/type/CS_SensorDataType.h"
#include "uci/type/CS_SignalType.h"
#include "uci/type/CS_SubDetailDataType.h"
#include "uci/type/ColorPhotometryParamsType.h"
#include "uci/type/CommActionExtendedType.h"
#include "uci/type/CommActionType.h"
#include "uci/type/CommAllocationActionType.h"
#include "uci/type/CommAllocationConstraintType.h"
#include "uci/type/CommAllocationPartsType.h"
#include "uci/type/CommAllocationStatusType.h"
#include "uci/type/CommAntennaModeType.h"
#include "uci/type/CommAssetEstimationRequestMDT.h"
#include "uci/type/CommAssetEstimationRequestMT.h"
#include "uci/type/CommAssetEstimationRequestStatusMDT.h"
#include "uci/type/CommAssetEstimationRequestStatusMT.h"
#include "uci/type/CommAssetEstimationResultType.h"
#include "uci/type/CommAssetID_Type.h"
#include "uci/type/CommAssetMDT.h"
#include "uci/type/CommAssetMT.h"
#include "uci/type/CommAssetOrbitID_Type.h"
#include "uci/type/CommAssetOrbitMDT.h"
#include "uci/type/CommAssetOrbitMT.h"
#include "uci/type/CommAssetPositionReportMDT.h"
#include "uci/type/CommAssetPositionReportMT.h"
#include "uci/type/CommBLOS_CommWaveformActivityCommandType.h"
#include "uci/type/CommBLOS_CommWaveformActivityType.h"
#include "uci/type/CommBLOS_CommWaveformCapabilityCommandType.h"
#include "uci/type/CommBLOS_ControlStatusType.h"
#include "uci/type/CommBLOS_ControlType.h"
#include "uci/type/CommBLOS_NetworkComsecModeRequestType.h"
#include "uci/type/CommBLOS_NetworkComsecModeType.h"
#include "uci/type/CommCDL_CommWaveformActivityCommandType.h"
#include "uci/type/CommCDL_CommWaveformActivityType.h"
#include "uci/type/CommCDL_CommWaveformCapabilityCommandType.h"
#include "uci/type/CommCDL_ControlType.h"
#include "uci/type/CommCapabilityOptionsType.h"
#include "uci/type/CommCapabilityType.h"
#include "uci/type/CommConfigurationID_Type.h"
#include "uci/type/CommConnectionType.h"
#include "uci/type/CommControlType.h"
#include "uci/type/CommCoverageDataType.h"
#include "uci/type/CommCoverageUserDataType.h"
#include "uci/type/CommDataType.h"
#include "uci/type/CommEffectivityID_Type.h"
#include "uci/type/CommEffectivityType.h"
#include "uci/type/CommFrequencyType.h"
#include "uci/type/CommIFDL_CommWaveformActivityCommandType.h"
#include "uci/type/CommIFDL_CommWaveformActivityType.h"
#include "uci/type/CommIFDL_CommWaveformCapabilityCommandType.h"
#include "uci/type/CommIFDL_ControlType.h"
#include "uci/type/CommIFDL_NetLinkStatusType.h"
#include "uci/type/CommLink16AdvancedSlotNotificationType.h"
#include "uci/type/CommLink16CommWaveformActivityCommandType.h"
#include "uci/type/CommLink16CommWaveformActivityType.h"
#include "uci/type/CommLink16CommWaveformCapabilityCommandType.h"
#include "uci/type/CommLink16ControlType.h"
#include "uci/type/CommLink16DelayReductionType.h"
#include "uci/type/CommLink16InitialEntryMessageType.h"
#include "uci/type/CommLink16MissionInfoWordsType.h"
#include "uci/type/CommLink16NetSelectionType.h"
#include "uci/type/CommLink16ReceiptComplianceWordsType.h"
#include "uci/type/CommLink16TxPG_Type.h"
#include "uci/type/CommLinkDetailsType.h"
#include "uci/type/CommLinkPortMapType.h"
#include "uci/type/CommLinkStatisticsType.h"
#include "uci/type/CommMADL_CommWaveformActivityCommandType.h"
#include "uci/type/CommMADL_CommWaveformActivityType.h"
#include "uci/type/CommMADL_CommWaveformCapabilityCommandType.h"
#include "uci/type/CommMADL_ControlType.h"
#include "uci/type/CommMADL_LinkCommandListType.h"
#include "uci/type/CommMADL_LinkCommandType.h"
#include "uci/type/CommMADL_LinkStatusListType.h"
#include "uci/type/CommMADL_LinkStatusType.h"
#include "uci/type/CommMADL_NetChangeRequestType.h"
#include "uci/type/CommMADL_NetChangeSelectionListType.h"
#include "uci/type/CommMADL_NetChangeSelectionType.h"
#include "uci/type/CommMADL_NetworkLayoutType.h"
#include "uci/type/CommMADL_NetworkType.h"
#include "uci/type/CommMADL_PeerNodeDataType.h"
#include "uci/type/CommMADL_SecurityKeyType.h"
#include "uci/type/CommMADL_TopologyEntryType.h"
#include "uci/type/CommModeUsageType.h"
#include "uci/type/CommOutageType.h"
#include "uci/type/CommPTW_CommWaveformActivityCommandType.h"
#include "uci/type/CommPTW_CommWaveformActivityType.h"
#include "uci/type/CommPTW_CommWaveformCapabilityCommandType.h"
#include "uci/type/CommPTW_ControlStatusType.h"
#include "uci/type/CommPTW_ControlType.h"
#include "uci/type/CommPointingCommandMDT.h"
#include "uci/type/CommPointingCommandMT.h"
#include "uci/type/CommPointingCommandStatusMDT.h"
#include "uci/type/CommPointingCommandStatusMT.h"
#include "uci/type/CommPointingID_Type.h"
#include "uci/type/CommPointingMDT.h"
#include "uci/type/CommPointingMT.h"
#include "uci/type/CommPointingPlanAssessmentType.h"
#include "uci/type/CommPointingPlanDataType.h"
#include "uci/type/CommPointingPlanRequestType.h"
#include "uci/type/CommPointingRequestMDT.h"
#include "uci/type/CommPointingRequestMT.h"
#include "uci/type/CommPointingRequestStatusMDT.h"
#include "uci/type/CommPointingRequestStatusMT.h"
#include "uci/type/CommPointingType.h"
#include "uci/type/CommPortSettingsType.h"
#include "uci/type/CommProfileID_Type.h"
#include "uci/type/CommRangeDelayChoiceType.h"
#include "uci/type/CommRelayActivityMDT.h"
#include "uci/type/CommRelayActivityMT.h"
#include "uci/type/CommRelayActivityType.h"
#include "uci/type/CommRelayCapabilityCommandType.h"
#include "uci/type/CommRelayCapabilityMDT.h"
#include "uci/type/CommRelayCapabilityMT.h"
#include "uci/type/CommRelayCapabilityStatusMDT.h"
#include "uci/type/CommRelayCapabilityStatusMT.h"
#include "uci/type/CommRelayCapabilityType.h"
#include "uci/type/CommRelayCommandMDT.h"
#include "uci/type/CommRelayCommandMT.h"
#include "uci/type/CommRelayCommandResponseType.h"
#include "uci/type/CommRelayCommandStatusMDT.h"
#include "uci/type/CommRelayCommandStatusMT.h"
#include "uci/type/CommRelayCommandType.h"
#include "uci/type/CommRelayOptionsType.h"
#include "uci/type/CommRelaySettingsCommandMDT.h"
#include "uci/type/CommRelaySettingsCommandMT.h"
#include "uci/type/CommRelaySettingsCommandStatusMDT.h"
#include "uci/type/CommRelaySettingsCommandStatusMT.h"
#include "uci/type/CommRelayTaskBaseType.h"
#include "uci/type/CommRelayTaskMetricsType.h"
#include "uci/type/CommRelayTaskType.h"
#include "uci/type/CommResourceType.h"
#include "uci/type/CommSINCGARS_CommWaveformActivityCommandType.h"
#include "uci/type/CommSINCGARS_CommWaveformActivityType.h"
#include "uci/type/CommSINCGARS_CommWaveformCapabilityCommandType.h"
#include "uci/type/CommSINCGARS_ControlType.h"
#include "uci/type/CommScheduleAllocationID_Type.h"
#include "uci/type/CommScheduleAllocationMDT.h"
#include "uci/type/CommScheduleAllocationMT.h"
#include "uci/type/CommScheduleAllocationType.h"
#include "uci/type/CommScheduleAllocationUpdateRequestMDT.h"
#include "uci/type/CommScheduleAllocationUpdateRequestMT.h"
#include "uci/type/CommScheduleAllocationUpdateRequestStatusMDT.h"
#include "uci/type/CommScheduleAllocationUpdateRequestStatusMT.h"
#include "uci/type/CommScheduleAvailabilityID_Type.h"
#include "uci/type/CommScheduleAvailabilityMDT.h"
#include "uci/type/CommScheduleAvailabilityMT.h"
#include "uci/type/CommSchedulingRequestMDT.h"
#include "uci/type/CommSchedulingRequestMT.h"
#include "uci/type/CommSchedulingRequestStatusMDT.h"
#include "uci/type/CommSchedulingRequestStatusMT.h"
#include "uci/type/CommSchedulingRequirementID_Type.h"
#include "uci/type/CommSchedulingRequirementMDT.h"
#include "uci/type/CommSchedulingRequirementMT.h"
#include "uci/type/CommSpecificRequestDataEXT.h"
#include "uci/type/CommStarlinkCommWaveformActivityCommandType.h"
#include "uci/type/CommStarlinkCommWaveformActivityType.h"
#include "uci/type/CommStarlinkCommWaveformCapabilityCommandType.h"
#include "uci/type/CommStarlinkControlStatusType.h"
#include "uci/type/CommStarlinkControlType.h"
#include "uci/type/CommSystemID_Type.h"
#include "uci/type/CommSystemMDT.h"
#include "uci/type/CommSystemMT.h"
#include "uci/type/CommSystemUsageType.h"
#include "uci/type/CommTerminalActivityCommandType.h"
#include "uci/type/CommTerminalActivityMDT.h"
#include "uci/type/CommTerminalActivityMT.h"
#include "uci/type/CommTerminalActivityType.h"
#include "uci/type/CommTerminalCapabilityCommandType.h"
#include "uci/type/CommTerminalCapabilityMDT.h"
#include "uci/type/CommTerminalCapabilityMT.h"
#include "uci/type/CommTerminalCapabilityStatusMDT.h"
#include "uci/type/CommTerminalCapabilityStatusMT.h"
#include "uci/type/CommTerminalCapabilityStatusType.h"
#include "uci/type/CommTerminalCapabilityType.h"
#include "uci/type/CommTerminalCommandMDT.h"
#include "uci/type/CommTerminalCommandMT.h"
#include "uci/type/CommTerminalCommandStatusMDT.h"
#include "uci/type/CommTerminalCommandStatusMT.h"
#include "uci/type/CommTerminalCommandType.h"
#include "uci/type/CommTerminalPlanActivationCommandMDT.h"
#include "uci/type/CommTerminalPlanActivationCommandMT.h"
#include "uci/type/CommTerminalPlanActivationCommandStatusMDT.h"
#include "uci/type/CommTerminalPlanActivationCommandStatusMT.h"
#include "uci/type/CommTerminalPlanActivationStatusMDT.h"
#include "uci/type/CommTerminalPlanActivationStatusMT.h"
#include "uci/type/CommTerminalPlanConfigurationActivationType.h"
#include "uci/type/CommTerminalPlanConfigurationStateType.h"
#include "uci/type/CommTerminalPlanDetailsType.h"
#include "uci/type/CommTerminalPlanEffectivityActivationStatusType.h"
#include "uci/type/CommTerminalPlanEffectivityActivationType.h"
#include "uci/type/CommTerminalPlanEffectivityStateType.h"
#include "uci/type/CommTerminalPlanID_Type.h"
#include "uci/type/CommTerminalPlanMDT.h"
#include "uci/type/CommTerminalPlanMT.h"
#include "uci/type/CommTerminalPlanOverrideActivationType.h"
#include "uci/type/CommTerminalPlanOverrideRequestMDT.h"
#include "uci/type/CommTerminalPlanOverrideRequestMT.h"
#include "uci/type/CommTerminalPlanOverrideRequestStatusMDT.h"
#include "uci/type/CommTerminalPlanOverrideRequestStatusMT.h"
#include "uci/type/CommTerminalPlanOverrideRequestType.h"
#include "uci/type/CommTerminalPlanTriggerType.h"
#include "uci/type/CommTerminalSettingsCommandMDT.h"
#include "uci/type/CommTerminalSettingsCommandMT.h"
#include "uci/type/CommTerminalSettingsCommandStatusMDT.h"
#include "uci/type/CommTerminalSettingsCommandStatusMT.h"
#include "uci/type/CommType.h"
#include "uci/type/CommUHF_SATCOM_CommWaveformActivityCommandType.h"
#include "uci/type/CommUHF_SATCOM_CommWaveformActivityType.h"
#include "uci/type/CommUHF_SATCOM_CommWaveformCapabilityCommandType.h"
#include "uci/type/CommUserIO_ID_Type.h"
#include "uci/type/CommUserLinkID_Type.h"
#include "uci/type/CommUserLinkType.h"
#include "uci/type/CommUtilizationRequestMDT.h"
#include "uci/type/CommUtilizationRequestMT.h"
#include "uci/type/CommUtilizationRequestStatusMDT.h"
#include "uci/type/CommUtilizationRequestStatusMT.h"
#include "uci/type/CommWaveformActivityCommandPET.h"
#include "uci/type/CommWaveformActivityPET.h"
#include "uci/type/CommWaveformCapabilityCommandPET.h"
#include "uci/type/CommandBaseType.h"
#include "uci/type/CommandID_Type.h"
#include "uci/type/CommandResponseType.h"
#include "uci/type/CommandStatusBaseType.h"
#include "uci/type/CommandableCapabilityDeclarationType.h"
#include "uci/type/CommsLostTriggerDataType.h"
#include "uci/type/CommunicationsEmitterIdentityType.h"
#include "uci/type/ComparableAtomicValueType.h"
#include "uci/type/ComparableRankingType.h"
#include "uci/type/CompletedRequirementMetricsType.h"
#include "uci/type/CompletionStatusType.h"
#include "uci/type/ComponentConfigurationChoiceType.h"
#include "uci/type/ComponentConfigurationDataRequestMDT.h"
#include "uci/type/ComponentConfigurationDataRequestMT.h"
#include "uci/type/ComponentConfigurationDataRequestStatusMDT.h"
#include "uci/type/ComponentConfigurationDataRequestStatusMT.h"
#include "uci/type/ComponentConfigurationID_Type.h"
#include "uci/type/ComponentConfigurationMDT.h"
#include "uci/type/ComponentConfigurationMT.h"
#include "uci/type/ComponentConfigurationPET.h"
#include "uci/type/ComponentConfigurationTreeType.h"
#include "uci/type/ComponentConfigurationType.h"
#include "uci/type/ComponentControllabilityA_Type.h"
#include "uci/type/ComponentControllabilityB_Type.h"
#include "uci/type/ComponentControlsA_Type.h"
#include "uci/type/ComponentControlsB_Type.h"
#include "uci/type/ComponentControlsStatusType.h"
#include "uci/type/ComponentDetailedStatusInfoType.h"
#include "uci/type/ComponentDetailedStatusType.h"
#include "uci/type/ComponentElementID_Type.h"
#include "uci/type/ComponentElementIdentifierChoiceType.h"
#include "uci/type/ComponentElementStateType.h"
#include "uci/type/ComponentExtendedStatusPET.h"
#include "uci/type/ComponentFieldOfRegardType.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/ComponentOrientationType.h"
#include "uci/type/ComponentPressureType.h"
#include "uci/type/ComponentResourceType.h"
#include "uci/type/ComponentSettingsCommandMDT.h"
#include "uci/type/ComponentSettingsCommandMT.h"
#include "uci/type/ComponentSettingsCommandStatusMDT.h"
#include "uci/type/ComponentSettingsCommandStatusMT.h"
#include "uci/type/ComponentSettingsParameterType.h"
#include "uci/type/ComponentStatusDataRequestMDT.h"
#include "uci/type/ComponentStatusDataRequestMT.h"
#include "uci/type/ComponentStatusDataRequestStatusMDT.h"
#include "uci/type/ComponentStatusDataRequestStatusMT.h"
#include "uci/type/ComponentStatusMDT.h"
#include "uci/type/ComponentStatusMT.h"
#include "uci/type/ComponentTemperatureType.h"
#include "uci/type/ComponentType.h"
#include "uci/type/CompressionRatioSettingsType.h"
#include "uci/type/ConcurrentCollectionDetailsType.h"
#include "uci/type/ConcurrentTaskReferenceType.h"
#include "uci/type/ConditionalPathSegmentType.h"
#include "uci/type/ConeAngleCovarianceRatesType.h"
#include "uci/type/ConeAngleCovarianceType.h"
#include "uci/type/ConeAngleRatesType.h"
#include "uci/type/ConeAngleSlantRangeCovarianceRatesType.h"
#include "uci/type/ConeAngleSlantRangeCovarianceType.h"
#include "uci/type/ConeAngleSlantRangeUncertaintyType.h"
#include "uci/type/ConeAngleType.h"
#include "uci/type/ConeAngleUncertaintyType.h"
#include "uci/type/ConeAngleVarianceRatesType.h"
#include "uci/type/ConeAngleVarianceType.h"
#include "uci/type/ConeType.h"
#include "uci/type/ConfigurationParameterCategoryType.h"
#include "uci/type/ConfigurationParameterRangeType.h"
#include "uci/type/ConfigurationParameterType.h"
#include "uci/type/ConfigurationParameterValueRestrictionsType.h"
#include "uci/type/ConfigureInteroperabilityReportType.h"
#include "uci/type/ConflictLocationType.h"
#include "uci/type/ConflictType.h"
#include "uci/type/ConstrainedEntityType.h"
#include "uci/type/ConstrainedEntryExitType.h"
#include "uci/type/ConstrainedOpLineType.h"
#include "uci/type/ConstrainedOpPointType.h"
#include "uci/type/ConstrainedOpVolumeType.h"
#include "uci/type/ConstrainedOpZoneType.h"
#include "uci/type/ConstrainingPlanPartsType.h"
#include "uci/type/ConstrainingPlansType.h"
#include "uci/type/ContactDetailsType.h"
#include "uci/type/ContingencyPathAutonomyType.h"
#include "uci/type/ContingencyPathSpacingType.h"
#include "uci/type/ControlInterfacesCapabilityControlType.h"
#include "uci/type/ControlInterfacesCommandMDT.h"
#include "uci/type/ControlInterfacesCommandMT.h"
#include "uci/type/ControlInterfacesCommandStatusMDT.h"
#include "uci/type/ControlInterfacesCommandStatusMT.h"
#include "uci/type/ControlInterfacesControlType.h"
#include "uci/type/ControlRequestMDT.h"
#include "uci/type/ControlRequestMT.h"
#include "uci/type/ControlRequestStatusMDT.h"
#include "uci/type/ControlRequestStatusMT.h"
#include "uci/type/ControlSourcesCapabilityControlType.h"
#include "uci/type/ControlSourcesCommandMDT.h"
#include "uci/type/ControlSourcesCommandMT.h"
#include "uci/type/ControlSourcesCommandStatusMDT.h"
#include "uci/type/ControlSourcesCommandStatusMT.h"
#include "uci/type/ControlSourcesControlType.h"
#include "uci/type/ControlStatusCapabilityControlType.h"
#include "uci/type/ControlStatusControlType.h"
#include "uci/type/ControlStatusMDT.h"
#include "uci/type/ControlStatusMT.h"
#include "uci/type/ControlStatusMissionControlType.h"
#include "uci/type/ControlTransferChoiceType.h"
#include "uci/type/ControlleeType.h"
#include "uci/type/CoordinatedRequirementSetID_Type.h"
#include "uci/type/CoordinatedRequirementSetMDT.h"
#include "uci/type/CoordinatedRequirementSetMT.h"
#include "uci/type/CoordinatedRequirementSetStatusMDT.h"
#include "uci/type/CoordinatedRequirementSetStatusMT.h"
#include "uci/type/CoordinationConditionType.h"
#include "uci/type/CornerPointImageRegionOfInterestType.h"
#include "uci/type/CorrelatedEntityID_Type.h"
#include "uci/type/CounterSpaceActivityMDT.h"
#include "uci/type/CounterSpaceActivityMT.h"
#include "uci/type/CounterSpaceCapabilityMDT.h"
#include "uci/type/CounterSpaceCapabilityMT.h"
#include "uci/type/CounterSpaceCapabilityStatusMDT.h"
#include "uci/type/CounterSpaceCapabilityStatusMT.h"
#include "uci/type/CounterSpaceDeconflictionID_Type.h"
#include "uci/type/CounterSpaceDeconflictionMDT.h"
#include "uci/type/CounterSpaceDeconflictionMT.h"
#include "uci/type/CounterSpaceReportID_Type.h"
#include "uci/type/CounterSpaceReportMDT.h"
#include "uci/type/CounterSpaceReportMT.h"
#include "uci/type/CounterSpaceTaskType.h"
#include "uci/type/CountryCodeType.h"
#include "uci/type/CovarianceMatrixType.h"
#include "uci/type/CropSettingsType.h"
#include "uci/type/CropType.h"
#include "uci/type/CryptoCommandMDT.h"
#include "uci/type/CryptoCommandMT.h"
#include "uci/type/CryptoCommandStatusMDT.h"
#include "uci/type/CryptoCommandStatusMT.h"
#include "uci/type/CryptoCommandType.h"
#include "uci/type/CryptoKeySourceType.h"
#include "uci/type/CryptoLoadCommandType.h"
#include "uci/type/CryptoLoadStatusType.h"
#include "uci/type/CryptoLocationType.h"
#include "uci/type/CryptoPortID_Type.h"
#include "uci/type/CryptoPortStatusType.h"
#include "uci/type/CryptoRolloverCommandType.h"
#include "uci/type/CryptoRolloverStatusType.h"
#include "uci/type/CryptoSlotGroupID_Type.h"
#include "uci/type/CryptoSlotGroupType.h"
#include "uci/type/CryptoSlotType.h"
#include "uci/type/CryptoStatusMDT.h"
#include "uci/type/CryptoStatusMT.h"
#include "uci/type/CryptoStatusType.h"
#include "uci/type/CylinderType.h"
#include "uci/type/DamageAssessmentDetailType.h"
#include "uci/type/DamageAssessmentID_Type.h"
#include "uci/type/DamageAssessmentMDT.h"
#include "uci/type/DamageAssessmentMT.h"
#include "uci/type/DamageAssessmentRequestMDT.h"
#include "uci/type/DamageAssessmentRequestMT.h"
#include "uci/type/DamageAssessmentRequestStatusMDT.h"
#include "uci/type/DamageAssessmentRequestStatusMT.h"
#include "uci/type/DamageEstimateDetailsType.h"
#include "uci/type/DamageEstimateID_Type.h"
#include "uci/type/DamageEstimateMDT.h"
#include "uci/type/DamageEstimateMT.h"
#include "uci/type/DamageEstimateRequestMDT.h"
#include "uci/type/DamageEstimateRequestMT.h"
#include "uci/type/DamageEstimateRequestStatusMDT.h"
#include "uci/type/DamageEstimateRequestStatusMT.h"
#include "uci/type/DamageEstimateTargetType.h"
#include "uci/type/DamageInformationSourceType.h"
#include "uci/type/DamageInformationWeatherSourceType.h"
#include "uci/type/DamageObjectClassType.h"
#include "uci/type/DamageObservationSourceType.h"
#include "uci/type/DamageProbabilityZoneType.h"
#include "uci/type/DamageReportDetailType.h"
#include "uci/type/DamageReportID_Type.h"
#include "uci/type/DamageReportMDT.h"
#include "uci/type/DamageReportMT.h"
#include "uci/type/DamageSubjectType.h"
#include "uci/type/DamageSummaryID_Type.h"
#include "uci/type/DamageSummaryMDT.h"
#include "uci/type/DamageSummaryMT.h"
#include "uci/type/DamageSummaryType.h"
#include "uci/type/DamageType.h"
#include "uci/type/DamageWeaponEmploymentType.h"
#include "uci/type/DamagedFunctionType.h"
#include "uci/type/DamagedHumanType.h"
#include "uci/type/DamagedObjectIdentityType.h"
#include "uci/type/DamagedObjectNonEntityType.h"
#include "uci/type/DamagedObjectType.h"
#include "uci/type/DataDeleteChoiceType.h"
#include "uci/type/DataDeleteRequestMDT.h"
#include "uci/type/DataDeleteRequestMT.h"
#include "uci/type/DataDeleteRequestStatusMDT.h"
#include "uci/type/DataDeleteRequestStatusMT.h"
#include "uci/type/DataDeliveryMessageType.h"
#include "uci/type/DataDeliveryType.h"
#include "uci/type/DataDestinationID_Type.h"
#include "uci/type/DataEffectivityType.h"
#include "uci/type/DataLinkIdentifierPET.h"
#include "uci/type/DataLinkNativeFilterPET.h"
#include "uci/type/DataLinkNativeFilter_NetworkLinkType.h"
#include "uci/type/DataLinkNativeInfoPET.h"
#include "uci/type/DataManagementCategoryType.h"
#include "uci/type/DataManagementImportExportType.h"
#include "uci/type/DataManagementRequestMDT.h"
#include "uci/type/DataManagementRequestMT.h"
#include "uci/type/DataManagementRequestStatusMDT.h"
#include "uci/type/DataManagementRequestStatusMT.h"
#include "uci/type/DataManagementSaveAsType.h"
#include "uci/type/DataPlanActivationCommandMDT.h"
#include "uci/type/DataPlanActivationCommandMT.h"
#include "uci/type/DataPlanActivationCommandStatusMDT.h"
#include "uci/type/DataPlanActivationCommandStatusMT.h"
#include "uci/type/DataPlanActivationStatusMDT.h"
#include "uci/type/DatalinkControlType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all base data types are declared */
namespace base {

bool extjson_uci::base::ExternalizerRead2::read(const boost::property_tree::ptree& propTree, uci::base::Accessor& accessor, std::string& nodeName, std::string& nsPrefix) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::colorPhotometryParamsType:
      return extjson_uci::type::ColorPhotometryParamsType::deserialize(propTree, dynamic_cast<uci::type::ColorPhotometryParamsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_AcquisitionTargetType:
      return extjson_uci::type::COMINT_AcquisitionTargetType::deserialize(propTree, dynamic_cast<uci::type::COMINT_AcquisitionTargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_ActivityCommandType:
      return extjson_uci::type::COMINT_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::COMINT_ActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_ActivityMDT:
      return extjson_uci::type::COMINT_ActivityMDT::deserialize(propTree, dynamic_cast<uci::type::COMINT_ActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_ActivityMT:
      return extjson_uci::type::COMINT_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_ActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_ActivityType:
      return extjson_uci::type::COMINT_ActivityType::deserialize(propTree, dynamic_cast<uci::type::COMINT_ActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_CapabilityCommandType:
      return extjson_uci::type::COMINT_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::COMINT_CapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_CapabilityMDT:
      return extjson_uci::type::COMINT_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::COMINT_CapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_CapabilityMT:
      return extjson_uci::type::COMINT_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_CapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_CapabilityOptionsType:
      return extjson_uci::type::COMINT_CapabilityOptionsType::deserialize(propTree, dynamic_cast<uci::type::COMINT_CapabilityOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_CapabilityStatusMDT:
      return extjson_uci::type::COMINT_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::COMINT_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_CapabilityStatusMT:
      return extjson_uci::type::COMINT_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_CapabilityType:
      return extjson_uci::type::COMINT_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::COMINT_CapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_ChangeDwellType:
      return extjson_uci::type::COMINT_ChangeDwellType::deserialize(propTree, dynamic_cast<uci::type::COMINT_ChangeDwellType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_ChangeGeolocationType:
      return extjson_uci::type::COMINT_ChangeGeolocationType::deserialize(propTree, dynamic_cast<uci::type::COMINT_ChangeGeolocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_CommandMDT:
      return extjson_uci::type::COMINT_CommandMDT::deserialize(propTree, dynamic_cast<uci::type::COMINT_CommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_CommandMT:
      return extjson_uci::type::COMINT_CommandMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_CommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_CommandResponseType:
      return extjson_uci::type::COMINT_CommandResponseType::deserialize(propTree, dynamic_cast<uci::type::COMINT_CommandResponseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_CommandStatusMDT:
      return extjson_uci::type::COMINT_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::COMINT_CommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_CommandStatusMT:
      return extjson_uci::type::COMINT_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_CommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_CommandType:
      return extjson_uci::type::COMINT_CommandType::deserialize(propTree, dynamic_cast<uci::type::COMINT_CommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_ConsentRequestMDT:
      return extjson_uci::type::COMINT_ConsentRequestMDT::deserialize(propTree, dynamic_cast<uci::type::COMINT_ConsentRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_ConsentRequestMT:
      return extjson_uci::type::COMINT_ConsentRequestMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_ConsentRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_ConsentRequestStatusMDT:
      return extjson_uci::type::COMINT_ConsentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::COMINT_ConsentRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_ConsentRequestStatusMT:
      return extjson_uci::type::COMINT_ConsentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_ConsentRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_ConsentRequestType:
      return extjson_uci::type::COMINT_ConsentRequestType::deserialize(propTree, dynamic_cast<uci::type::COMINT_ConsentRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_DataCollectCommandType:
      return extjson_uci::type::COMINT_DataCollectCommandType::deserialize(propTree, dynamic_cast<uci::type::COMINT_DataCollectCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_DirectionFindingType:
      return extjson_uci::type::COMINT_DirectionFindingType::deserialize(propTree, dynamic_cast<uci::type::COMINT_DirectionFindingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_GeolocationType:
      return extjson_uci::type::COMINT_GeolocationType::deserialize(propTree, dynamic_cast<uci::type::COMINT_GeolocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_IdentificationType:
      return extjson_uci::type::COMINT_IdentificationType::deserialize(propTree, dynamic_cast<uci::type::COMINT_IdentificationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_InteractiveType:
      return extjson_uci::type::COMINT_InteractiveType::deserialize(propTree, dynamic_cast<uci::type::COMINT_InteractiveType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_MeasurementResultsType:
      return extjson_uci::type::COMINT_MeasurementResultsType::deserialize(propTree, dynamic_cast<uci::type::COMINT_MeasurementResultsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_MeasurementType:
      return extjson_uci::type::COMINT_MeasurementType::deserialize(propTree, dynamic_cast<uci::type::COMINT_MeasurementType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_ProcessingParametersType:
      return extjson_uci::type::COMINT_ProcessingParametersType::deserialize(propTree, dynamic_cast<uci::type::COMINT_ProcessingParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_ReceiveDwellType:
      return extjson_uci::type::COMINT_ReceiveDwellType::deserialize(propTree, dynamic_cast<uci::type::COMINT_ReceiveDwellType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_SettingsCommandMDT:
      return extjson_uci::type::COMINT_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::COMINT_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_SettingsCommandMT:
      return extjson_uci::type::COMINT_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_SettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_SettingsCommandStatusMDT:
      return extjson_uci::type::COMINT_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::COMINT_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_SettingsCommandStatusMT:
      return extjson_uci::type::COMINT_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_SpecificDataType:
      return extjson_uci::type::COMINT_SpecificDataType::deserialize(propTree, dynamic_cast<uci::type::COMINT_SpecificDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_SubcapabilityAcquisitionType:
      return extjson_uci::type::COMINT_SubcapabilityAcquisitionType::deserialize(propTree, dynamic_cast<uci::type::COMINT_SubcapabilityAcquisitionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_SubcapabilityChoiceType:
      return extjson_uci::type::COMINT_SubcapabilityChoiceType::deserialize(propTree, dynamic_cast<uci::type::COMINT_SubcapabilityChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_SubcapabilityDataCollectType:
      return extjson_uci::type::COMINT_SubcapabilityDataCollectType::deserialize(propTree, dynamic_cast<uci::type::COMINT_SubcapabilityDataCollectType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_SubCapabilityDetailsType:
      return extjson_uci::type::COMINT_SubCapabilityDetailsType::deserialize(propTree, dynamic_cast<uci::type::COMINT_SubCapabilityDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_SubcapabilityGeolocationType:
      return extjson_uci::type::COMINT_SubcapabilityGeolocationType::deserialize(propTree, dynamic_cast<uci::type::COMINT_SubcapabilityGeolocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_SubcapabilityIdentificationType:
      return extjson_uci::type::COMINT_SubcapabilityIdentificationType::deserialize(propTree, dynamic_cast<uci::type::COMINT_SubcapabilityIdentificationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_SubcapabilityMeasurementType:
      return extjson_uci::type::COMINT_SubcapabilityMeasurementType::deserialize(propTree, dynamic_cast<uci::type::COMINT_SubcapabilityMeasurementType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_SubcapabilityTargetLocationDataType:
      return extjson_uci::type::COMINT_SubcapabilityTargetLocationDataType::deserialize(propTree, dynamic_cast<uci::type::COMINT_SubcapabilityTargetLocationDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_TargetType:
      return extjson_uci::type::COMINT_TargetType::deserialize(propTree, dynamic_cast<uci::type::COMINT_TargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_TaskBaseType:
      return extjson_uci::type::COMINT_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::COMINT_TaskBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOMINT_TaskType:
      return extjson_uci::type::COMINT_TaskType::deserialize(propTree, dynamic_cast<uci::type::COMINT_TaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commActionExtendedType:
      return extjson_uci::type::CommActionExtendedType::deserialize(propTree, dynamic_cast<uci::type::CommActionExtendedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commActionType:
      return extjson_uci::type::CommActionType::deserialize(propTree, dynamic_cast<uci::type::CommActionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAllocationActionType:
      return extjson_uci::type::CommAllocationActionType::deserialize(propTree, dynamic_cast<uci::type::CommAllocationActionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAllocationConstraintType:
      return extjson_uci::type::CommAllocationConstraintType::deserialize(propTree, dynamic_cast<uci::type::CommAllocationConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAllocationPartsType:
      return extjson_uci::type::CommAllocationPartsType::deserialize(propTree, dynamic_cast<uci::type::CommAllocationPartsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAllocationStatusType:
      return extjson_uci::type::CommAllocationStatusType::deserialize(propTree, dynamic_cast<uci::type::CommAllocationStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commandableCapabilityDeclarationType:
      return extjson_uci::type::CommandableCapabilityDeclarationType::deserialize(propTree, dynamic_cast<uci::type::CommandableCapabilityDeclarationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commandBaseType:
      return extjson_uci::type::CommandBaseType::deserialize(propTree, dynamic_cast<uci::type::CommandBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commandID_Type:
      return extjson_uci::type::CommandID_Type::deserialize(propTree, dynamic_cast<uci::type::CommandID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commandResponseType:
      return extjson_uci::type::CommandResponseType::deserialize(propTree, dynamic_cast<uci::type::CommandResponseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commandStatusBaseType:
      return extjson_uci::type::CommandStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::CommandStatusBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAntennaModeType:
      return extjson_uci::type::CommAntennaModeType::deserialize(propTree, dynamic_cast<uci::type::CommAntennaModeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAssetEstimationRequestMDT:
      return extjson_uci::type::CommAssetEstimationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::CommAssetEstimationRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAssetEstimationRequestMT:
      return extjson_uci::type::CommAssetEstimationRequestMT::deserialize(propTree, dynamic_cast<uci::type::CommAssetEstimationRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAssetEstimationRequestStatusMDT:
      return extjson_uci::type::CommAssetEstimationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommAssetEstimationRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAssetEstimationRequestStatusMT:
      return extjson_uci::type::CommAssetEstimationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommAssetEstimationRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAssetEstimationResultType:
      return extjson_uci::type::CommAssetEstimationResultType::deserialize(propTree, dynamic_cast<uci::type::CommAssetEstimationResultType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAssetID_Type:
      return extjson_uci::type::CommAssetID_Type::deserialize(propTree, dynamic_cast<uci::type::CommAssetID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAssetMDT:
      return extjson_uci::type::CommAssetMDT::deserialize(propTree, dynamic_cast<uci::type::CommAssetMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAssetMT:
      return extjson_uci::type::CommAssetMT::deserialize(propTree, dynamic_cast<uci::type::CommAssetMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAssetOrbitID_Type:
      return extjson_uci::type::CommAssetOrbitID_Type::deserialize(propTree, dynamic_cast<uci::type::CommAssetOrbitID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAssetOrbitMDT:
      return extjson_uci::type::CommAssetOrbitMDT::deserialize(propTree, dynamic_cast<uci::type::CommAssetOrbitMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAssetOrbitMT:
      return extjson_uci::type::CommAssetOrbitMT::deserialize(propTree, dynamic_cast<uci::type::CommAssetOrbitMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAssetPositionReportMDT:
      return extjson_uci::type::CommAssetPositionReportMDT::deserialize(propTree, dynamic_cast<uci::type::CommAssetPositionReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commAssetPositionReportMT:
      return extjson_uci::type::CommAssetPositionReportMT::deserialize(propTree, dynamic_cast<uci::type::CommAssetPositionReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commBLOS_CommWaveformActivityCommandType:
      return extjson_uci::type::CommBLOS_CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommBLOS_CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commBLOS_CommWaveformActivityType:
      return extjson_uci::type::CommBLOS_CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommBLOS_CommWaveformActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commBLOS_CommWaveformCapabilityCommandType:
      return extjson_uci::type::CommBLOS_CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommBLOS_CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commBLOS_ControlStatusType:
      return extjson_uci::type::CommBLOS_ControlStatusType::deserialize(propTree, dynamic_cast<uci::type::CommBLOS_ControlStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commBLOS_ControlType:
      return extjson_uci::type::CommBLOS_ControlType::deserialize(propTree, dynamic_cast<uci::type::CommBLOS_ControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commBLOS_NetworkComsecModeRequestType:
      return extjson_uci::type::CommBLOS_NetworkComsecModeRequestType::deserialize(propTree, dynamic_cast<uci::type::CommBLOS_NetworkComsecModeRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commBLOS_NetworkComsecModeType:
      return extjson_uci::type::CommBLOS_NetworkComsecModeType::deserialize(propTree, dynamic_cast<uci::type::CommBLOS_NetworkComsecModeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commCapabilityOptionsType:
      return extjson_uci::type::CommCapabilityOptionsType::deserialize(propTree, dynamic_cast<uci::type::CommCapabilityOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commCapabilityType:
      return extjson_uci::type::CommCapabilityType::deserialize(propTree, dynamic_cast<uci::type::CommCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commCDL_CommWaveformActivityCommandType:
      return extjson_uci::type::CommCDL_CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommCDL_CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commCDL_CommWaveformActivityType:
      return extjson_uci::type::CommCDL_CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommCDL_CommWaveformActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commCDL_CommWaveformCapabilityCommandType:
      return extjson_uci::type::CommCDL_CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommCDL_CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commCDL_ControlType:
      return extjson_uci::type::CommCDL_ControlType::deserialize(propTree, dynamic_cast<uci::type::CommCDL_ControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commConfigurationID_Type:
      return extjson_uci::type::CommConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::CommConfigurationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commConnectionType:
      return extjson_uci::type::CommConnectionType::deserialize(propTree, dynamic_cast<uci::type::CommConnectionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commControlType:
      return extjson_uci::type::CommControlType::deserialize(propTree, dynamic_cast<uci::type::CommControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commCoverageDataType:
      return extjson_uci::type::CommCoverageDataType::deserialize(propTree, dynamic_cast<uci::type::CommCoverageDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commCoverageUserDataType:
      return extjson_uci::type::CommCoverageUserDataType::deserialize(propTree, dynamic_cast<uci::type::CommCoverageUserDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commDataType:
      return extjson_uci::type::CommDataType::deserialize(propTree, dynamic_cast<uci::type::CommDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commEffectivityID_Type:
      return extjson_uci::type::CommEffectivityID_Type::deserialize(propTree, dynamic_cast<uci::type::CommEffectivityID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commEffectivityType:
      return extjson_uci::type::CommEffectivityType::deserialize(propTree, dynamic_cast<uci::type::CommEffectivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commFrequencyType:
      return extjson_uci::type::CommFrequencyType::deserialize(propTree, dynamic_cast<uci::type::CommFrequencyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commIFDL_CommWaveformActivityCommandType:
      return extjson_uci::type::CommIFDL_CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommIFDL_CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commIFDL_CommWaveformActivityType:
      return extjson_uci::type::CommIFDL_CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommIFDL_CommWaveformActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commIFDL_CommWaveformCapabilityCommandType:
      return extjson_uci::type::CommIFDL_CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommIFDL_CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commIFDL_ControlType:
      return extjson_uci::type::CommIFDL_ControlType::deserialize(propTree, dynamic_cast<uci::type::CommIFDL_ControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commIFDL_NetLinkStatusType:
      return extjson_uci::type::CommIFDL_NetLinkStatusType::deserialize(propTree, dynamic_cast<uci::type::CommIFDL_NetLinkStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16AdvancedSlotNotificationType:
      return extjson_uci::type::CommLink16AdvancedSlotNotificationType::deserialize(propTree, dynamic_cast<uci::type::CommLink16AdvancedSlotNotificationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16CommWaveformActivityCommandType:
      return extjson_uci::type::CommLink16CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommLink16CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16CommWaveformActivityType:
      return extjson_uci::type::CommLink16CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommLink16CommWaveformActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16CommWaveformCapabilityCommandType:
      return extjson_uci::type::CommLink16CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommLink16CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16ControlType:
      return extjson_uci::type::CommLink16ControlType::deserialize(propTree, dynamic_cast<uci::type::CommLink16ControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16DelayReductionType:
      return extjson_uci::type::CommLink16DelayReductionType::deserialize(propTree, dynamic_cast<uci::type::CommLink16DelayReductionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16InitialEntryMessageType:
      return extjson_uci::type::CommLink16InitialEntryMessageType::deserialize(propTree, dynamic_cast<uci::type::CommLink16InitialEntryMessageType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16MissionInfoWordsType:
      return extjson_uci::type::CommLink16MissionInfoWordsType::deserialize(propTree, dynamic_cast<uci::type::CommLink16MissionInfoWordsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16NetSelectionType:
      return extjson_uci::type::CommLink16NetSelectionType::deserialize(propTree, dynamic_cast<uci::type::CommLink16NetSelectionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16ReceiptComplianceWordsType:
      return extjson_uci::type::CommLink16ReceiptComplianceWordsType::deserialize(propTree, dynamic_cast<uci::type::CommLink16ReceiptComplianceWordsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLink16TxPG_Type:
      return extjson_uci::type::CommLink16TxPG_Type::deserialize(propTree, dynamic_cast<uci::type::CommLink16TxPG_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLinkDetailsType:
      return extjson_uci::type::CommLinkDetailsType::deserialize(propTree, dynamic_cast<uci::type::CommLinkDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLinkPortMapType:
      return extjson_uci::type::CommLinkPortMapType::deserialize(propTree, dynamic_cast<uci::type::CommLinkPortMapType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commLinkStatisticsType:
      return extjson_uci::type::CommLinkStatisticsType::deserialize(propTree, dynamic_cast<uci::type::CommLinkStatisticsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_CommWaveformActivityCommandType:
      return extjson_uci::type::CommMADL_CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_CommWaveformActivityType:
      return extjson_uci::type::CommMADL_CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_CommWaveformActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_CommWaveformCapabilityCommandType:
      return extjson_uci::type::CommMADL_CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_ControlType:
      return extjson_uci::type::CommMADL_ControlType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_ControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_LinkCommandListType:
      return extjson_uci::type::CommMADL_LinkCommandListType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_LinkCommandListType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_LinkCommandType:
      return extjson_uci::type::CommMADL_LinkCommandType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_LinkCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_LinkStatusListType:
      return extjson_uci::type::CommMADL_LinkStatusListType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_LinkStatusListType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_LinkStatusType:
      return extjson_uci::type::CommMADL_LinkStatusType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_LinkStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_NetChangeRequestType:
      return extjson_uci::type::CommMADL_NetChangeRequestType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_NetChangeRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_NetChangeSelectionListType:
      return extjson_uci::type::CommMADL_NetChangeSelectionListType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_NetChangeSelectionListType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_NetChangeSelectionType:
      return extjson_uci::type::CommMADL_NetChangeSelectionType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_NetChangeSelectionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_NetworkLayoutType:
      return extjson_uci::type::CommMADL_NetworkLayoutType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_NetworkLayoutType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_NetworkType:
      return extjson_uci::type::CommMADL_NetworkType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_NetworkType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_PeerNodeDataType:
      return extjson_uci::type::CommMADL_PeerNodeDataType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_PeerNodeDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_SecurityKeyType:
      return extjson_uci::type::CommMADL_SecurityKeyType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_SecurityKeyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commMADL_TopologyEntryType:
      return extjson_uci::type::CommMADL_TopologyEntryType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_TopologyEntryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commModeUsageType:
      return extjson_uci::type::CommModeUsageType::deserialize(propTree, dynamic_cast<uci::type::CommModeUsageType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commOutageType:
      return extjson_uci::type::CommOutageType::deserialize(propTree, dynamic_cast<uci::type::CommOutageType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingCommandMDT:
      return extjson_uci::type::CommPointingCommandMDT::deserialize(propTree, dynamic_cast<uci::type::CommPointingCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingCommandMT:
      return extjson_uci::type::CommPointingCommandMT::deserialize(propTree, dynamic_cast<uci::type::CommPointingCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingCommandStatusMDT:
      return extjson_uci::type::CommPointingCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommPointingCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingCommandStatusMT:
      return extjson_uci::type::CommPointingCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommPointingCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingID_Type:
      return extjson_uci::type::CommPointingID_Type::deserialize(propTree, dynamic_cast<uci::type::CommPointingID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingMDT:
      return extjson_uci::type::CommPointingMDT::deserialize(propTree, dynamic_cast<uci::type::CommPointingMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingMT:
      return extjson_uci::type::CommPointingMT::deserialize(propTree, dynamic_cast<uci::type::CommPointingMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingPlanAssessmentType:
      return extjson_uci::type::CommPointingPlanAssessmentType::deserialize(propTree, dynamic_cast<uci::type::CommPointingPlanAssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingPlanDataType:
      return extjson_uci::type::CommPointingPlanDataType::deserialize(propTree, dynamic_cast<uci::type::CommPointingPlanDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingPlanRequestType:
      return extjson_uci::type::CommPointingPlanRequestType::deserialize(propTree, dynamic_cast<uci::type::CommPointingPlanRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingRequestMDT:
      return extjson_uci::type::CommPointingRequestMDT::deserialize(propTree, dynamic_cast<uci::type::CommPointingRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingRequestMT:
      return extjson_uci::type::CommPointingRequestMT::deserialize(propTree, dynamic_cast<uci::type::CommPointingRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingRequestStatusMDT:
      return extjson_uci::type::CommPointingRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommPointingRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingRequestStatusMT:
      return extjson_uci::type::CommPointingRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommPointingRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPointingType:
      return extjson_uci::type::CommPointingType::deserialize(propTree, dynamic_cast<uci::type::CommPointingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPortSettingsType:
      return extjson_uci::type::CommPortSettingsType::deserialize(propTree, dynamic_cast<uci::type::CommPortSettingsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commProfileID_Type:
      return extjson_uci::type::CommProfileID_Type::deserialize(propTree, dynamic_cast<uci::type::CommProfileID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPTW_CommWaveformActivityCommandType:
      return extjson_uci::type::CommPTW_CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommPTW_CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPTW_CommWaveformActivityType:
      return extjson_uci::type::CommPTW_CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommPTW_CommWaveformActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPTW_CommWaveformCapabilityCommandType:
      return extjson_uci::type::CommPTW_CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommPTW_CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPTW_ControlStatusType:
      return extjson_uci::type::CommPTW_ControlStatusType::deserialize(propTree, dynamic_cast<uci::type::CommPTW_ControlStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commPTW_ControlType:
      return extjson_uci::type::CommPTW_ControlType::deserialize(propTree, dynamic_cast<uci::type::CommPTW_ControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRangeDelayChoiceType:
      return extjson_uci::type::CommRangeDelayChoiceType::deserialize(propTree, dynamic_cast<uci::type::CommRangeDelayChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayActivityMDT:
      return extjson_uci::type::CommRelayActivityMDT::deserialize(propTree, dynamic_cast<uci::type::CommRelayActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayActivityMT:
      return extjson_uci::type::CommRelayActivityMT::deserialize(propTree, dynamic_cast<uci::type::CommRelayActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayActivityType:
      return extjson_uci::type::CommRelayActivityType::deserialize(propTree, dynamic_cast<uci::type::CommRelayActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayCapabilityCommandType:
      return extjson_uci::type::CommRelayCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommRelayCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayCapabilityMDT:
      return extjson_uci::type::CommRelayCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::CommRelayCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayCapabilityMT:
      return extjson_uci::type::CommRelayCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::CommRelayCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayCapabilityStatusMDT:
      return extjson_uci::type::CommRelayCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommRelayCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayCapabilityStatusMT:
      return extjson_uci::type::CommRelayCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommRelayCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayCapabilityType:
      return extjson_uci::type::CommRelayCapabilityType::deserialize(propTree, dynamic_cast<uci::type::CommRelayCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayCommandMDT:
      return extjson_uci::type::CommRelayCommandMDT::deserialize(propTree, dynamic_cast<uci::type::CommRelayCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayCommandMT:
      return extjson_uci::type::CommRelayCommandMT::deserialize(propTree, dynamic_cast<uci::type::CommRelayCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayCommandResponseType:
      return extjson_uci::type::CommRelayCommandResponseType::deserialize(propTree, dynamic_cast<uci::type::CommRelayCommandResponseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayCommandStatusMDT:
      return extjson_uci::type::CommRelayCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommRelayCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayCommandStatusMT:
      return extjson_uci::type::CommRelayCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommRelayCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayCommandType:
      return extjson_uci::type::CommRelayCommandType::deserialize(propTree, dynamic_cast<uci::type::CommRelayCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayOptionsType:
      return extjson_uci::type::CommRelayOptionsType::deserialize(propTree, dynamic_cast<uci::type::CommRelayOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelaySettingsCommandMDT:
      return extjson_uci::type::CommRelaySettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::CommRelaySettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelaySettingsCommandMT:
      return extjson_uci::type::CommRelaySettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::CommRelaySettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelaySettingsCommandStatusMDT:
      return extjson_uci::type::CommRelaySettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommRelaySettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelaySettingsCommandStatusMT:
      return extjson_uci::type::CommRelaySettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommRelaySettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayTaskBaseType:
      return extjson_uci::type::CommRelayTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::CommRelayTaskBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayTaskMetricsType:
      return extjson_uci::type::CommRelayTaskMetricsType::deserialize(propTree, dynamic_cast<uci::type::CommRelayTaskMetricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commRelayTaskType:
      return extjson_uci::type::CommRelayTaskType::deserialize(propTree, dynamic_cast<uci::type::CommRelayTaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commResourceType:
      return extjson_uci::type::CommResourceType::deserialize(propTree, dynamic_cast<uci::type::CommResourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commScheduleAllocationID_Type:
      return extjson_uci::type::CommScheduleAllocationID_Type::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAllocationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commScheduleAllocationMDT:
      return extjson_uci::type::CommScheduleAllocationMDT::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAllocationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commScheduleAllocationMT:
      return extjson_uci::type::CommScheduleAllocationMT::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAllocationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commScheduleAllocationType:
      return extjson_uci::type::CommScheduleAllocationType::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAllocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commScheduleAllocationUpdateRequestMDT:
      return extjson_uci::type::CommScheduleAllocationUpdateRequestMDT::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAllocationUpdateRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commScheduleAllocationUpdateRequestMT:
      return extjson_uci::type::CommScheduleAllocationUpdateRequestMT::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAllocationUpdateRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commScheduleAllocationUpdateRequestStatusMDT:
      return extjson_uci::type::CommScheduleAllocationUpdateRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAllocationUpdateRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commScheduleAllocationUpdateRequestStatusMT:
      return extjson_uci::type::CommScheduleAllocationUpdateRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAllocationUpdateRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commScheduleAvailabilityID_Type:
      return extjson_uci::type::CommScheduleAvailabilityID_Type::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAvailabilityID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commScheduleAvailabilityMDT:
      return extjson_uci::type::CommScheduleAvailabilityMDT::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAvailabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commScheduleAvailabilityMT:
      return extjson_uci::type::CommScheduleAvailabilityMT::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAvailabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSchedulingRequestMDT:
      return extjson_uci::type::CommSchedulingRequestMDT::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSchedulingRequestMT:
      return extjson_uci::type::CommSchedulingRequestMT::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSchedulingRequestStatusMDT:
      return extjson_uci::type::CommSchedulingRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSchedulingRequestStatusMT:
      return extjson_uci::type::CommSchedulingRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSchedulingRequirementID_Type:
      return extjson_uci::type::CommSchedulingRequirementID_Type::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingRequirementID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSchedulingRequirementMDT:
      return extjson_uci::type::CommSchedulingRequirementMDT::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingRequirementMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSchedulingRequirementMT:
      return extjson_uci::type::CommSchedulingRequirementMT::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingRequirementMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSINCGARS_CommWaveformActivityCommandType:
      return extjson_uci::type::CommSINCGARS_CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommSINCGARS_CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSINCGARS_CommWaveformActivityType:
      return extjson_uci::type::CommSINCGARS_CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommSINCGARS_CommWaveformActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSINCGARS_CommWaveformCapabilityCommandType:
      return extjson_uci::type::CommSINCGARS_CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommSINCGARS_CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSINCGARS_ControlType:
      return extjson_uci::type::CommSINCGARS_ControlType::deserialize(propTree, dynamic_cast<uci::type::CommSINCGARS_ControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commsLostTriggerDataType:
      return extjson_uci::type::CommsLostTriggerDataType::deserialize(propTree, dynamic_cast<uci::type::CommsLostTriggerDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSpecificRequestDataEXT:
      return extjson_uci::type::CommSpecificRequestDataEXT::deserialize(propTree, dynamic_cast<uci::type::CommSpecificRequestDataEXT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commStarlinkCommWaveformActivityCommandType:
      return extjson_uci::type::CommStarlinkCommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommStarlinkCommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commStarlinkCommWaveformActivityType:
      return extjson_uci::type::CommStarlinkCommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommStarlinkCommWaveformActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commStarlinkCommWaveformCapabilityCommandType:
      return extjson_uci::type::CommStarlinkCommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommStarlinkCommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commStarlinkControlStatusType:
      return extjson_uci::type::CommStarlinkControlStatusType::deserialize(propTree, dynamic_cast<uci::type::CommStarlinkControlStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commStarlinkControlType:
      return extjson_uci::type::CommStarlinkControlType::deserialize(propTree, dynamic_cast<uci::type::CommStarlinkControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSystemID_Type:
      return extjson_uci::type::CommSystemID_Type::deserialize(propTree, dynamic_cast<uci::type::CommSystemID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSystemMDT:
      return extjson_uci::type::CommSystemMDT::deserialize(propTree, dynamic_cast<uci::type::CommSystemMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSystemMT:
      return extjson_uci::type::CommSystemMT::deserialize(propTree, dynamic_cast<uci::type::CommSystemMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commSystemUsageType:
      return extjson_uci::type::CommSystemUsageType::deserialize(propTree, dynamic_cast<uci::type::CommSystemUsageType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalActivityCommandType:
      return extjson_uci::type::CommTerminalActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalActivityMDT:
      return extjson_uci::type::CommTerminalActivityMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalActivityMT:
      return extjson_uci::type::CommTerminalActivityMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalActivityType:
      return extjson_uci::type::CommTerminalActivityType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalCapabilityCommandType:
      return extjson_uci::type::CommTerminalCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalCapabilityMDT:
      return extjson_uci::type::CommTerminalCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalCapabilityMT:
      return extjson_uci::type::CommTerminalCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalCapabilityStatusMDT:
      return extjson_uci::type::CommTerminalCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalCapabilityStatusMT:
      return extjson_uci::type::CommTerminalCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalCapabilityStatusType:
      return extjson_uci::type::CommTerminalCapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCapabilityStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalCapabilityType:
      return extjson_uci::type::CommTerminalCapabilityType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalCommandMDT:
      return extjson_uci::type::CommTerminalCommandMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalCommandMT:
      return extjson_uci::type::CommTerminalCommandMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalCommandStatusMDT:
      return extjson_uci::type::CommTerminalCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalCommandStatusMT:
      return extjson_uci::type::CommTerminalCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalCommandType:
      return extjson_uci::type::CommTerminalCommandType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanActivationCommandMDT:
      return extjson_uci::type::CommTerminalPlanActivationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanActivationCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanActivationCommandMT:
      return extjson_uci::type::CommTerminalPlanActivationCommandMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanActivationCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanActivationCommandStatusMDT:
      return extjson_uci::type::CommTerminalPlanActivationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanActivationCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanActivationCommandStatusMT:
      return extjson_uci::type::CommTerminalPlanActivationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanActivationCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanActivationStatusMDT:
      return extjson_uci::type::CommTerminalPlanActivationStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanActivationStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanActivationStatusMT:
      return extjson_uci::type::CommTerminalPlanActivationStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanActivationStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanConfigurationActivationType:
      return extjson_uci::type::CommTerminalPlanConfigurationActivationType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanConfigurationActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanConfigurationStateType:
      return extjson_uci::type::CommTerminalPlanConfigurationStateType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanConfigurationStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanDetailsType:
      return extjson_uci::type::CommTerminalPlanDetailsType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanEffectivityActivationStatusType:
      return extjson_uci::type::CommTerminalPlanEffectivityActivationStatusType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanEffectivityActivationStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanEffectivityActivationType:
      return extjson_uci::type::CommTerminalPlanEffectivityActivationType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanEffectivityActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanEffectivityStateType:
      return extjson_uci::type::CommTerminalPlanEffectivityStateType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanEffectivityStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanID_Type:
      return extjson_uci::type::CommTerminalPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanMDT:
      return extjson_uci::type::CommTerminalPlanMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanMT:
      return extjson_uci::type::CommTerminalPlanMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanOverrideActivationType:
      return extjson_uci::type::CommTerminalPlanOverrideActivationType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanOverrideActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanOverrideRequestMDT:
      return extjson_uci::type::CommTerminalPlanOverrideRequestMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanOverrideRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanOverrideRequestMT:
      return extjson_uci::type::CommTerminalPlanOverrideRequestMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanOverrideRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanOverrideRequestStatusMDT:
      return extjson_uci::type::CommTerminalPlanOverrideRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanOverrideRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanOverrideRequestStatusMT:
      return extjson_uci::type::CommTerminalPlanOverrideRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanOverrideRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanOverrideRequestType:
      return extjson_uci::type::CommTerminalPlanOverrideRequestType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanOverrideRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalPlanTriggerType:
      return extjson_uci::type::CommTerminalPlanTriggerType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanTriggerType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalSettingsCommandMDT:
      return extjson_uci::type::CommTerminalSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalSettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalSettingsCommandMT:
      return extjson_uci::type::CommTerminalSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalSettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalSettingsCommandStatusMDT:
      return extjson_uci::type::CommTerminalSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commTerminalSettingsCommandStatusMT:
      return extjson_uci::type::CommTerminalSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commType:
      return extjson_uci::type::CommType::deserialize(propTree, dynamic_cast<uci::type::CommType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commUHF_SATCOM_CommWaveformActivityCommandType:
      return extjson_uci::type::CommUHF_SATCOM_CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommUHF_SATCOM_CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commUHF_SATCOM_CommWaveformActivityType:
      return extjson_uci::type::CommUHF_SATCOM_CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommUHF_SATCOM_CommWaveformActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commUHF_SATCOM_CommWaveformCapabilityCommandType:
      return extjson_uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::communicationsEmitterIdentityType:
      return extjson_uci::type::CommunicationsEmitterIdentityType::deserialize(propTree, dynamic_cast<uci::type::CommunicationsEmitterIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commUserIO_ID_Type:
      return extjson_uci::type::CommUserIO_ID_Type::deserialize(propTree, dynamic_cast<uci::type::CommUserIO_ID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commUserLinkID_Type:
      return extjson_uci::type::CommUserLinkID_Type::deserialize(propTree, dynamic_cast<uci::type::CommUserLinkID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commUserLinkType:
      return extjson_uci::type::CommUserLinkType::deserialize(propTree, dynamic_cast<uci::type::CommUserLinkType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commUtilizationRequestMDT:
      return extjson_uci::type::CommUtilizationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::CommUtilizationRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commUtilizationRequestMT:
      return extjson_uci::type::CommUtilizationRequestMT::deserialize(propTree, dynamic_cast<uci::type::CommUtilizationRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commUtilizationRequestStatusMDT:
      return extjson_uci::type::CommUtilizationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommUtilizationRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commUtilizationRequestStatusMT:
      return extjson_uci::type::CommUtilizationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommUtilizationRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commWaveformActivityCommandPET:
      return extjson_uci::type::CommWaveformActivityCommandPET::deserialize(propTree, dynamic_cast<uci::type::CommWaveformActivityCommandPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commWaveformActivityPET:
      return extjson_uci::type::CommWaveformActivityPET::deserialize(propTree, dynamic_cast<uci::type::CommWaveformActivityPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::commWaveformCapabilityCommandPET:
      return extjson_uci::type::CommWaveformCapabilityCommandPET::deserialize(propTree, dynamic_cast<uci::type::CommWaveformCapabilityCommandPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::comparableAtomicValueType:
      return extjson_uci::type::ComparableAtomicValueType::deserialize(propTree, dynamic_cast<uci::type::ComparableAtomicValueType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::comparableRankingType:
      return extjson_uci::type::ComparableRankingType::deserialize(propTree, dynamic_cast<uci::type::ComparableRankingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::completedRequirementMetricsType:
      return extjson_uci::type::CompletedRequirementMetricsType::deserialize(propTree, dynamic_cast<uci::type::CompletedRequirementMetricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::completionStatusType:
      return extjson_uci::type::CompletionStatusType::deserialize(propTree, dynamic_cast<uci::type::CompletionStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentConfigurationChoiceType:
      return extjson_uci::type::ComponentConfigurationChoiceType::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentConfigurationDataRequestMDT:
      return extjson_uci::type::ComponentConfigurationDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationDataRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentConfigurationDataRequestMT:
      return extjson_uci::type::ComponentConfigurationDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationDataRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentConfigurationDataRequestStatusMDT:
      return extjson_uci::type::ComponentConfigurationDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentConfigurationDataRequestStatusMT:
      return extjson_uci::type::ComponentConfigurationDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationDataRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentConfigurationID_Type:
      return extjson_uci::type::ComponentConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentConfigurationMDT:
      return extjson_uci::type::ComponentConfigurationMDT::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentConfigurationMT:
      return extjson_uci::type::ComponentConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentConfigurationPET:
      return extjson_uci::type::ComponentConfigurationPET::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentConfigurationTreeType:
      return extjson_uci::type::ComponentConfigurationTreeType::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationTreeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentConfigurationType:
      return extjson_uci::type::ComponentConfigurationType::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentControllabilityA_Type:
      return extjson_uci::type::ComponentControllabilityA_Type::deserialize(propTree, dynamic_cast<uci::type::ComponentControllabilityA_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentControllabilityB_Type:
      return extjson_uci::type::ComponentControllabilityB_Type::deserialize(propTree, dynamic_cast<uci::type::ComponentControllabilityB_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentControlsA_Type:
      return extjson_uci::type::ComponentControlsA_Type::deserialize(propTree, dynamic_cast<uci::type::ComponentControlsA_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentControlsB_Type:
      return extjson_uci::type::ComponentControlsB_Type::deserialize(propTree, dynamic_cast<uci::type::ComponentControlsB_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentControlsStatusType:
      return extjson_uci::type::ComponentControlsStatusType::deserialize(propTree, dynamic_cast<uci::type::ComponentControlsStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentDetailedStatusInfoType:
      return extjson_uci::type::ComponentDetailedStatusInfoType::deserialize(propTree, dynamic_cast<uci::type::ComponentDetailedStatusInfoType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentDetailedStatusType:
      return extjson_uci::type::ComponentDetailedStatusType::deserialize(propTree, dynamic_cast<uci::type::ComponentDetailedStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentElementID_Type:
      return extjson_uci::type::ComponentElementID_Type::deserialize(propTree, dynamic_cast<uci::type::ComponentElementID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentElementIdentifierChoiceType:
      return extjson_uci::type::ComponentElementIdentifierChoiceType::deserialize(propTree, dynamic_cast<uci::type::ComponentElementIdentifierChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentElementStateType:
      return extjson_uci::type::ComponentElementStateType::deserialize(propTree, dynamic_cast<uci::type::ComponentElementStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentExtendedStatusPET:
      return extjson_uci::type::ComponentExtendedStatusPET::deserialize(propTree, dynamic_cast<uci::type::ComponentExtendedStatusPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentFieldOfRegardType:
      return extjson_uci::type::ComponentFieldOfRegardType::deserialize(propTree, dynamic_cast<uci::type::ComponentFieldOfRegardType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentID_Type:
      return extjson_uci::type::ComponentID_Type::deserialize(propTree, dynamic_cast<uci::type::ComponentID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentOrientationType:
      return extjson_uci::type::ComponentOrientationType::deserialize(propTree, dynamic_cast<uci::type::ComponentOrientationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentPressureType:
      return extjson_uci::type::ComponentPressureType::deserialize(propTree, dynamic_cast<uci::type::ComponentPressureType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentResourceType:
      return extjson_uci::type::ComponentResourceType::deserialize(propTree, dynamic_cast<uci::type::ComponentResourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentSettingsCommandMDT:
      return extjson_uci::type::ComponentSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ComponentSettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentSettingsCommandMT:
      return extjson_uci::type::ComponentSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::ComponentSettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentSettingsCommandStatusMDT:
      return extjson_uci::type::ComponentSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ComponentSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentSettingsCommandStatusMT:
      return extjson_uci::type::ComponentSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ComponentSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentSettingsParameterType:
      return extjson_uci::type::ComponentSettingsParameterType::deserialize(propTree, dynamic_cast<uci::type::ComponentSettingsParameterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentStatusDataRequestMDT:
      return extjson_uci::type::ComponentStatusDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ComponentStatusDataRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentStatusDataRequestMT:
      return extjson_uci::type::ComponentStatusDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::ComponentStatusDataRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentStatusDataRequestStatusMDT:
      return extjson_uci::type::ComponentStatusDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ComponentStatusDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentStatusDataRequestStatusMT:
      return extjson_uci::type::ComponentStatusDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ComponentStatusDataRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentStatusMDT:
      return extjson_uci::type::ComponentStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ComponentStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentStatusMT:
      return extjson_uci::type::ComponentStatusMT::deserialize(propTree, dynamic_cast<uci::type::ComponentStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentTemperatureType:
      return extjson_uci::type::ComponentTemperatureType::deserialize(propTree, dynamic_cast<uci::type::ComponentTemperatureType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::componentType:
      return extjson_uci::type::ComponentType::deserialize(propTree, dynamic_cast<uci::type::ComponentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::compressionRatioSettingsType:
      return extjson_uci::type::CompressionRatioSettingsType::deserialize(propTree, dynamic_cast<uci::type::CompressionRatioSettingsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::concurrentCollectionDetailsType:
      return extjson_uci::type::ConcurrentCollectionDetailsType::deserialize(propTree, dynamic_cast<uci::type::ConcurrentCollectionDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::concurrentTaskReferenceType:
      return extjson_uci::type::ConcurrentTaskReferenceType::deserialize(propTree, dynamic_cast<uci::type::ConcurrentTaskReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::conditionalPathSegmentType:
      return extjson_uci::type::ConditionalPathSegmentType::deserialize(propTree, dynamic_cast<uci::type::ConditionalPathSegmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coneAngleCovarianceRatesType:
      return extjson_uci::type::ConeAngleCovarianceRatesType::deserialize(propTree, dynamic_cast<uci::type::ConeAngleCovarianceRatesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coneAngleCovarianceType:
      return extjson_uci::type::ConeAngleCovarianceType::deserialize(propTree, dynamic_cast<uci::type::ConeAngleCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coneAngleRatesType:
      return extjson_uci::type::ConeAngleRatesType::deserialize(propTree, dynamic_cast<uci::type::ConeAngleRatesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coneAngleSlantRangeCovarianceRatesType:
      return extjson_uci::type::ConeAngleSlantRangeCovarianceRatesType::deserialize(propTree, dynamic_cast<uci::type::ConeAngleSlantRangeCovarianceRatesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coneAngleSlantRangeCovarianceType:
      return extjson_uci::type::ConeAngleSlantRangeCovarianceType::deserialize(propTree, dynamic_cast<uci::type::ConeAngleSlantRangeCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coneAngleSlantRangeUncertaintyType:
      return extjson_uci::type::ConeAngleSlantRangeUncertaintyType::deserialize(propTree, dynamic_cast<uci::type::ConeAngleSlantRangeUncertaintyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coneAngleType:
      return extjson_uci::type::ConeAngleType::deserialize(propTree, dynamic_cast<uci::type::ConeAngleType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coneAngleUncertaintyType:
      return extjson_uci::type::ConeAngleUncertaintyType::deserialize(propTree, dynamic_cast<uci::type::ConeAngleUncertaintyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coneAngleVarianceRatesType:
      return extjson_uci::type::ConeAngleVarianceRatesType::deserialize(propTree, dynamic_cast<uci::type::ConeAngleVarianceRatesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coneAngleVarianceType:
      return extjson_uci::type::ConeAngleVarianceType::deserialize(propTree, dynamic_cast<uci::type::ConeAngleVarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coneType:
      return extjson_uci::type::ConeType::deserialize(propTree, dynamic_cast<uci::type::ConeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::configurationParameterCategoryType:
      return extjson_uci::type::ConfigurationParameterCategoryType::deserialize(propTree, dynamic_cast<uci::type::ConfigurationParameterCategoryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::configurationParameterRangeType:
      return extjson_uci::type::ConfigurationParameterRangeType::deserialize(propTree, dynamic_cast<uci::type::ConfigurationParameterRangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::configurationParameterType:
      return extjson_uci::type::ConfigurationParameterType::deserialize(propTree, dynamic_cast<uci::type::ConfigurationParameterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::configurationParameterValueRestrictionsType:
      return extjson_uci::type::ConfigurationParameterValueRestrictionsType::deserialize(propTree, dynamic_cast<uci::type::ConfigurationParameterValueRestrictionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::configureInteroperabilityReportType:
      return extjson_uci::type::ConfigureInteroperabilityReportType::deserialize(propTree, dynamic_cast<uci::type::ConfigureInteroperabilityReportType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::conflictLocationType:
      return extjson_uci::type::ConflictLocationType::deserialize(propTree, dynamic_cast<uci::type::ConflictLocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::conflictType:
      return extjson_uci::type::ConflictType::deserialize(propTree, dynamic_cast<uci::type::ConflictType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::constrainedEntityType:
      return extjson_uci::type::ConstrainedEntityType::deserialize(propTree, dynamic_cast<uci::type::ConstrainedEntityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::constrainedEntryExitType:
      return extjson_uci::type::ConstrainedEntryExitType::deserialize(propTree, dynamic_cast<uci::type::ConstrainedEntryExitType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::constrainedOpLineType:
      return extjson_uci::type::ConstrainedOpLineType::deserialize(propTree, dynamic_cast<uci::type::ConstrainedOpLineType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::constrainedOpPointType:
      return extjson_uci::type::ConstrainedOpPointType::deserialize(propTree, dynamic_cast<uci::type::ConstrainedOpPointType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::constrainedOpVolumeType:
      return extjson_uci::type::ConstrainedOpVolumeType::deserialize(propTree, dynamic_cast<uci::type::ConstrainedOpVolumeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::constrainedOpZoneType:
      return extjson_uci::type::ConstrainedOpZoneType::deserialize(propTree, dynamic_cast<uci::type::ConstrainedOpZoneType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::constrainingPlanPartsType:
      return extjson_uci::type::ConstrainingPlanPartsType::deserialize(propTree, dynamic_cast<uci::type::ConstrainingPlanPartsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::constrainingPlansType:
      return extjson_uci::type::ConstrainingPlansType::deserialize(propTree, dynamic_cast<uci::type::ConstrainingPlansType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::contactDetailsType:
      return extjson_uci::type::ContactDetailsType::deserialize(propTree, dynamic_cast<uci::type::ContactDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::contingencyPathAutonomyType:
      return extjson_uci::type::ContingencyPathAutonomyType::deserialize(propTree, dynamic_cast<uci::type::ContingencyPathAutonomyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::contingencyPathSpacingType:
      return extjson_uci::type::ContingencyPathSpacingType::deserialize(propTree, dynamic_cast<uci::type::ContingencyPathSpacingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlInterfacesCapabilityControlType:
      return extjson_uci::type::ControlInterfacesCapabilityControlType::deserialize(propTree, dynamic_cast<uci::type::ControlInterfacesCapabilityControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlInterfacesCommandMDT:
      return extjson_uci::type::ControlInterfacesCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ControlInterfacesCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlInterfacesCommandMT:
      return extjson_uci::type::ControlInterfacesCommandMT::deserialize(propTree, dynamic_cast<uci::type::ControlInterfacesCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlInterfacesCommandStatusMDT:
      return extjson_uci::type::ControlInterfacesCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ControlInterfacesCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlInterfacesCommandStatusMT:
      return extjson_uci::type::ControlInterfacesCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ControlInterfacesCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlInterfacesControlType:
      return extjson_uci::type::ControlInterfacesControlType::deserialize(propTree, dynamic_cast<uci::type::ControlInterfacesControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlleeType:
      return extjson_uci::type::ControlleeType::deserialize(propTree, dynamic_cast<uci::type::ControlleeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlRequestMDT:
      return extjson_uci::type::ControlRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ControlRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlRequestMT:
      return extjson_uci::type::ControlRequestMT::deserialize(propTree, dynamic_cast<uci::type::ControlRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlRequestStatusMDT:
      return extjson_uci::type::ControlRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ControlRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlRequestStatusMT:
      return extjson_uci::type::ControlRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ControlRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlSourcesCapabilityControlType:
      return extjson_uci::type::ControlSourcesCapabilityControlType::deserialize(propTree, dynamic_cast<uci::type::ControlSourcesCapabilityControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlSourcesCommandMDT:
      return extjson_uci::type::ControlSourcesCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ControlSourcesCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlSourcesCommandMT:
      return extjson_uci::type::ControlSourcesCommandMT::deserialize(propTree, dynamic_cast<uci::type::ControlSourcesCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlSourcesCommandStatusMDT:
      return extjson_uci::type::ControlSourcesCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ControlSourcesCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlSourcesCommandStatusMT:
      return extjson_uci::type::ControlSourcesCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ControlSourcesCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlSourcesControlType:
      return extjson_uci::type::ControlSourcesControlType::deserialize(propTree, dynamic_cast<uci::type::ControlSourcesControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlStatusCapabilityControlType:
      return extjson_uci::type::ControlStatusCapabilityControlType::deserialize(propTree, dynamic_cast<uci::type::ControlStatusCapabilityControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlStatusControlType:
      return extjson_uci::type::ControlStatusControlType::deserialize(propTree, dynamic_cast<uci::type::ControlStatusControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlStatusMDT:
      return extjson_uci::type::ControlStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ControlStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlStatusMissionControlType:
      return extjson_uci::type::ControlStatusMissionControlType::deserialize(propTree, dynamic_cast<uci::type::ControlStatusMissionControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlStatusMT:
      return extjson_uci::type::ControlStatusMT::deserialize(propTree, dynamic_cast<uci::type::ControlStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::controlTransferChoiceType:
      return extjson_uci::type::ControlTransferChoiceType::deserialize(propTree, dynamic_cast<uci::type::ControlTransferChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coordinatedRequirementSetID_Type:
      return extjson_uci::type::CoordinatedRequirementSetID_Type::deserialize(propTree, dynamic_cast<uci::type::CoordinatedRequirementSetID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coordinatedRequirementSetMDT:
      return extjson_uci::type::CoordinatedRequirementSetMDT::deserialize(propTree, dynamic_cast<uci::type::CoordinatedRequirementSetMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coordinatedRequirementSetMT:
      return extjson_uci::type::CoordinatedRequirementSetMT::deserialize(propTree, dynamic_cast<uci::type::CoordinatedRequirementSetMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coordinatedRequirementSetStatusMDT:
      return extjson_uci::type::CoordinatedRequirementSetStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CoordinatedRequirementSetStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coordinatedRequirementSetStatusMT:
      return extjson_uci::type::CoordinatedRequirementSetStatusMT::deserialize(propTree, dynamic_cast<uci::type::CoordinatedRequirementSetStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::coordinationConditionType:
      return extjson_uci::type::CoordinationConditionType::deserialize(propTree, dynamic_cast<uci::type::CoordinationConditionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cornerPointImageRegionOfInterestType:
      return extjson_uci::type::CornerPointImageRegionOfInterestType::deserialize(propTree, dynamic_cast<uci::type::CornerPointImageRegionOfInterestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::correlatedEntityID_Type:
      return extjson_uci::type::CorrelatedEntityID_Type::deserialize(propTree, dynamic_cast<uci::type::CorrelatedEntityID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::counterSpaceActivityMDT:
      return extjson_uci::type::CounterSpaceActivityMDT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::counterSpaceActivityMT:
      return extjson_uci::type::CounterSpaceActivityMT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::counterSpaceCapabilityMDT:
      return extjson_uci::type::CounterSpaceCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::counterSpaceCapabilityMT:
      return extjson_uci::type::CounterSpaceCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::counterSpaceCapabilityStatusMDT:
      return extjson_uci::type::CounterSpaceCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::counterSpaceCapabilityStatusMT:
      return extjson_uci::type::CounterSpaceCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::counterSpaceDeconflictionID_Type:
      return extjson_uci::type::CounterSpaceDeconflictionID_Type::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceDeconflictionID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::counterSpaceDeconflictionMDT:
      return extjson_uci::type::CounterSpaceDeconflictionMDT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceDeconflictionMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::counterSpaceDeconflictionMT:
      return extjson_uci::type::CounterSpaceDeconflictionMT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceDeconflictionMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::counterSpaceReportID_Type:
      return extjson_uci::type::CounterSpaceReportID_Type::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceReportID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::counterSpaceReportMDT:
      return extjson_uci::type::CounterSpaceReportMDT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::counterSpaceReportMT:
      return extjson_uci::type::CounterSpaceReportMT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::counterSpaceTaskType:
      return extjson_uci::type::CounterSpaceTaskType::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceTaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::countryCodeType:
      return extjson_uci::type::CountryCodeType::deserialize(propTree, dynamic_cast<uci::type::CountryCodeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::covarianceMatrixType:
      return extjson_uci::type::CovarianceMatrixType::deserialize(propTree, dynamic_cast<uci::type::CovarianceMatrixType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cropSettingsType:
      return extjson_uci::type::CropSettingsType::deserialize(propTree, dynamic_cast<uci::type::CropSettingsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cropType:
      return extjson_uci::type::CropType::deserialize(propTree, dynamic_cast<uci::type::CropType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoCommandMDT:
      return extjson_uci::type::CryptoCommandMDT::deserialize(propTree, dynamic_cast<uci::type::CryptoCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoCommandMT:
      return extjson_uci::type::CryptoCommandMT::deserialize(propTree, dynamic_cast<uci::type::CryptoCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoCommandStatusMDT:
      return extjson_uci::type::CryptoCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CryptoCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoCommandStatusMT:
      return extjson_uci::type::CryptoCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::CryptoCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoCommandType:
      return extjson_uci::type::CryptoCommandType::deserialize(propTree, dynamic_cast<uci::type::CryptoCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoKeySourceType:
      return extjson_uci::type::CryptoKeySourceType::deserialize(propTree, dynamic_cast<uci::type::CryptoKeySourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoLoadCommandType:
      return extjson_uci::type::CryptoLoadCommandType::deserialize(propTree, dynamic_cast<uci::type::CryptoLoadCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoLoadStatusType:
      return extjson_uci::type::CryptoLoadStatusType::deserialize(propTree, dynamic_cast<uci::type::CryptoLoadStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoLocationType:
      return extjson_uci::type::CryptoLocationType::deserialize(propTree, dynamic_cast<uci::type::CryptoLocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoPortID_Type:
      return extjson_uci::type::CryptoPortID_Type::deserialize(propTree, dynamic_cast<uci::type::CryptoPortID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoPortStatusType:
      return extjson_uci::type::CryptoPortStatusType::deserialize(propTree, dynamic_cast<uci::type::CryptoPortStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoRolloverCommandType:
      return extjson_uci::type::CryptoRolloverCommandType::deserialize(propTree, dynamic_cast<uci::type::CryptoRolloverCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoRolloverStatusType:
      return extjson_uci::type::CryptoRolloverStatusType::deserialize(propTree, dynamic_cast<uci::type::CryptoRolloverStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoSlotGroupID_Type:
      return extjson_uci::type::CryptoSlotGroupID_Type::deserialize(propTree, dynamic_cast<uci::type::CryptoSlotGroupID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoSlotGroupType:
      return extjson_uci::type::CryptoSlotGroupType::deserialize(propTree, dynamic_cast<uci::type::CryptoSlotGroupType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoSlotType:
      return extjson_uci::type::CryptoSlotType::deserialize(propTree, dynamic_cast<uci::type::CryptoSlotType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoStatusMDT:
      return extjson_uci::type::CryptoStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CryptoStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoStatusMT:
      return extjson_uci::type::CryptoStatusMT::deserialize(propTree, dynamic_cast<uci::type::CryptoStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cryptoStatusType:
      return extjson_uci::type::CryptoStatusType::deserialize(propTree, dynamic_cast<uci::type::CryptoStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_ActivityDetailType:
      return extjson_uci::type::CS_ActivityDetailType::deserialize(propTree, dynamic_cast<uci::type::CS_ActivityDetailType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_ActivityType:
      return extjson_uci::type::CS_ActivityType::deserialize(propTree, dynamic_cast<uci::type::CS_ActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_AssessmentType:
      return extjson_uci::type::CS_AssessmentType::deserialize(propTree, dynamic_cast<uci::type::CS_AssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_CapabilitiesType:
      return extjson_uci::type::CS_CapabilitiesType::deserialize(propTree, dynamic_cast<uci::type::CS_CapabilitiesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_CapabilityType:
      return extjson_uci::type::CS_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::CS_CapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_DetailDataType:
      return extjson_uci::type::CS_DetailDataType::deserialize(propTree, dynamic_cast<uci::type::CS_DetailDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_EngagementDataType:
      return extjson_uci::type::CS_EngagementDataType::deserialize(propTree, dynamic_cast<uci::type::CS_EngagementDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_ForceType:
      return extjson_uci::type::CS_ForceType::deserialize(propTree, dynamic_cast<uci::type::CS_ForceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_FreeFormatType:
      return extjson_uci::type::CS_FreeFormatType::deserialize(propTree, dynamic_cast<uci::type::CS_FreeFormatType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_HeaderType:
      return extjson_uci::type::CS_HeaderType::deserialize(propTree, dynamic_cast<uci::type::CS_HeaderType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_ObscuraDataType:
      return extjson_uci::type::CS_ObscuraDataType::deserialize(propTree, dynamic_cast<uci::type::CS_ObscuraDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_ObscuraType:
      return extjson_uci::type::CS_ObscuraType::deserialize(propTree, dynamic_cast<uci::type::CS_ObscuraType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_PostureType:
      return extjson_uci::type::CS_PostureType::deserialize(propTree, dynamic_cast<uci::type::CS_PostureType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_SatBandDeconType:
      return extjson_uci::type::CS_SatBandDeconType::deserialize(propTree, dynamic_cast<uci::type::CS_SatBandDeconType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_SensorDataType:
      return extjson_uci::type::CS_SensorDataType::deserialize(propTree, dynamic_cast<uci::type::CS_SensorDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_SignalType:
      return extjson_uci::type::CS_SignalType::deserialize(propTree, dynamic_cast<uci::type::CS_SignalType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_STO_TraceabilityType:
      return extjson_uci::type::CS_STO_TraceabilityType::deserialize(propTree, dynamic_cast<uci::type::CS_STO_TraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cS_SubDetailDataType:
      return extjson_uci::type::CS_SubDetailDataType::deserialize(propTree, dynamic_cast<uci::type::CS_SubDetailDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cSO_DetailsType:
      return extjson_uci::type::CSO_DetailsType::deserialize(propTree, dynamic_cast<uci::type::CSO_DetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cylinderType:
      return extjson_uci::type::CylinderType::deserialize(propTree, dynamic_cast<uci::type::CylinderType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageAssessmentDetailType:
      return extjson_uci::type::DamageAssessmentDetailType::deserialize(propTree, dynamic_cast<uci::type::DamageAssessmentDetailType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageAssessmentID_Type:
      return extjson_uci::type::DamageAssessmentID_Type::deserialize(propTree, dynamic_cast<uci::type::DamageAssessmentID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageAssessmentMDT:
      return extjson_uci::type::DamageAssessmentMDT::deserialize(propTree, dynamic_cast<uci::type::DamageAssessmentMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageAssessmentMT:
      return extjson_uci::type::DamageAssessmentMT::deserialize(propTree, dynamic_cast<uci::type::DamageAssessmentMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageAssessmentRequestMDT:
      return extjson_uci::type::DamageAssessmentRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DamageAssessmentRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageAssessmentRequestMT:
      return extjson_uci::type::DamageAssessmentRequestMT::deserialize(propTree, dynamic_cast<uci::type::DamageAssessmentRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageAssessmentRequestStatusMDT:
      return extjson_uci::type::DamageAssessmentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DamageAssessmentRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageAssessmentRequestStatusMT:
      return extjson_uci::type::DamageAssessmentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DamageAssessmentRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damagedFunctionType:
      return extjson_uci::type::DamagedFunctionType::deserialize(propTree, dynamic_cast<uci::type::DamagedFunctionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damagedHumanType:
      return extjson_uci::type::DamagedHumanType::deserialize(propTree, dynamic_cast<uci::type::DamagedHumanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damagedObjectIdentityType:
      return extjson_uci::type::DamagedObjectIdentityType::deserialize(propTree, dynamic_cast<uci::type::DamagedObjectIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damagedObjectNonEntityType:
      return extjson_uci::type::DamagedObjectNonEntityType::deserialize(propTree, dynamic_cast<uci::type::DamagedObjectNonEntityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damagedObjectType:
      return extjson_uci::type::DamagedObjectType::deserialize(propTree, dynamic_cast<uci::type::DamagedObjectType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageEstimateDetailsType:
      return extjson_uci::type::DamageEstimateDetailsType::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageEstimateID_Type:
      return extjson_uci::type::DamageEstimateID_Type::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageEstimateMDT:
      return extjson_uci::type::DamageEstimateMDT::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageEstimateMT:
      return extjson_uci::type::DamageEstimateMT::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageEstimateRequestMDT:
      return extjson_uci::type::DamageEstimateRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageEstimateRequestMT:
      return extjson_uci::type::DamageEstimateRequestMT::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageEstimateRequestStatusMDT:
      return extjson_uci::type::DamageEstimateRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageEstimateRequestStatusMT:
      return extjson_uci::type::DamageEstimateRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageEstimateTargetType:
      return extjson_uci::type::DamageEstimateTargetType::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateTargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageInformationSourceType:
      return extjson_uci::type::DamageInformationSourceType::deserialize(propTree, dynamic_cast<uci::type::DamageInformationSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageInformationWeatherSourceType:
      return extjson_uci::type::DamageInformationWeatherSourceType::deserialize(propTree, dynamic_cast<uci::type::DamageInformationWeatherSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageObjectClassType:
      return extjson_uci::type::DamageObjectClassType::deserialize(propTree, dynamic_cast<uci::type::DamageObjectClassType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageObservationSourceType:
      return extjson_uci::type::DamageObservationSourceType::deserialize(propTree, dynamic_cast<uci::type::DamageObservationSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageProbabilityZoneType:
      return extjson_uci::type::DamageProbabilityZoneType::deserialize(propTree, dynamic_cast<uci::type::DamageProbabilityZoneType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageReportDetailType:
      return extjson_uci::type::DamageReportDetailType::deserialize(propTree, dynamic_cast<uci::type::DamageReportDetailType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageReportID_Type:
      return extjson_uci::type::DamageReportID_Type::deserialize(propTree, dynamic_cast<uci::type::DamageReportID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageReportMDT:
      return extjson_uci::type::DamageReportMDT::deserialize(propTree, dynamic_cast<uci::type::DamageReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageReportMT:
      return extjson_uci::type::DamageReportMT::deserialize(propTree, dynamic_cast<uci::type::DamageReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageSubjectType:
      return extjson_uci::type::DamageSubjectType::deserialize(propTree, dynamic_cast<uci::type::DamageSubjectType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageSummaryID_Type:
      return extjson_uci::type::DamageSummaryID_Type::deserialize(propTree, dynamic_cast<uci::type::DamageSummaryID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageSummaryMDT:
      return extjson_uci::type::DamageSummaryMDT::deserialize(propTree, dynamic_cast<uci::type::DamageSummaryMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageSummaryMT:
      return extjson_uci::type::DamageSummaryMT::deserialize(propTree, dynamic_cast<uci::type::DamageSummaryMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageSummaryType:
      return extjson_uci::type::DamageSummaryType::deserialize(propTree, dynamic_cast<uci::type::DamageSummaryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageType:
      return extjson_uci::type::DamageType::deserialize(propTree, dynamic_cast<uci::type::DamageType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::damageWeaponEmploymentType:
      return extjson_uci::type::DamageWeaponEmploymentType::deserialize(propTree, dynamic_cast<uci::type::DamageWeaponEmploymentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataDeleteChoiceType:
      return extjson_uci::type::DataDeleteChoiceType::deserialize(propTree, dynamic_cast<uci::type::DataDeleteChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataDeleteRequestMDT:
      return extjson_uci::type::DataDeleteRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DataDeleteRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataDeleteRequestMT:
      return extjson_uci::type::DataDeleteRequestMT::deserialize(propTree, dynamic_cast<uci::type::DataDeleteRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataDeleteRequestStatusMDT:
      return extjson_uci::type::DataDeleteRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataDeleteRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataDeleteRequestStatusMT:
      return extjson_uci::type::DataDeleteRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataDeleteRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataDeliveryMessageType:
      return extjson_uci::type::DataDeliveryMessageType::deserialize(propTree, dynamic_cast<uci::type::DataDeliveryMessageType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataDeliveryType:
      return extjson_uci::type::DataDeliveryType::deserialize(propTree, dynamic_cast<uci::type::DataDeliveryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataDestinationID_Type:
      return extjson_uci::type::DataDestinationID_Type::deserialize(propTree, dynamic_cast<uci::type::DataDestinationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataEffectivityType:
      return extjson_uci::type::DataEffectivityType::deserialize(propTree, dynamic_cast<uci::type::DataEffectivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::datalinkControlType:
      return extjson_uci::type::DatalinkControlType::deserialize(propTree, dynamic_cast<uci::type::DatalinkControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataLinkIdentifierPET:
      return extjson_uci::type::DataLinkIdentifierPET::deserialize(propTree, dynamic_cast<uci::type::DataLinkIdentifierPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataLinkNativeFilter_NetworkLinkType:
      return extjson_uci::type::DataLinkNativeFilter_NetworkLinkType::deserialize(propTree, dynamic_cast<uci::type::DataLinkNativeFilter_NetworkLinkType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataLinkNativeFilterPET:
      return extjson_uci::type::DataLinkNativeFilterPET::deserialize(propTree, dynamic_cast<uci::type::DataLinkNativeFilterPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataLinkNativeInfoPET:
      return extjson_uci::type::DataLinkNativeInfoPET::deserialize(propTree, dynamic_cast<uci::type::DataLinkNativeInfoPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataManagementCategoryType:
      return extjson_uci::type::DataManagementCategoryType::deserialize(propTree, dynamic_cast<uci::type::DataManagementCategoryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataManagementImportExportType:
      return extjson_uci::type::DataManagementImportExportType::deserialize(propTree, dynamic_cast<uci::type::DataManagementImportExportType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataManagementRequestMDT:
      return extjson_uci::type::DataManagementRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DataManagementRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataManagementRequestMT:
      return extjson_uci::type::DataManagementRequestMT::deserialize(propTree, dynamic_cast<uci::type::DataManagementRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataManagementRequestStatusMDT:
      return extjson_uci::type::DataManagementRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataManagementRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataManagementRequestStatusMT:
      return extjson_uci::type::DataManagementRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataManagementRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataManagementSaveAsType:
      return extjson_uci::type::DataManagementSaveAsType::deserialize(propTree, dynamic_cast<uci::type::DataManagementSaveAsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanActivationCommandMDT:
      return extjson_uci::type::DataPlanActivationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::DataPlanActivationCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanActivationCommandMT:
      return extjson_uci::type::DataPlanActivationCommandMT::deserialize(propTree, dynamic_cast<uci::type::DataPlanActivationCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanActivationCommandStatusMDT:
      return extjson_uci::type::DataPlanActivationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataPlanActivationCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanActivationCommandStatusMT:
      return extjson_uci::type::DataPlanActivationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataPlanActivationCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanActivationStatusMDT:
      return extjson_uci::type::DataPlanActivationStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataPlanActivationStatusMDT&>(accessor), nodeName, nsPrefix, true);
    default:
      return false;
  }
}

} // namespace base

} // namespace extjson_uci

