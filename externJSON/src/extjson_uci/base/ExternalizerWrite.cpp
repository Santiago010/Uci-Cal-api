/** @file ExternalizerWrite.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/base/ExternalizerWrite.h"

#include <iterator>
#include <ostream>
#include <sstream>
#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/regex.hpp>

#include "extjson_uci/base/ExternalizerWrite1.h"
#include "extjson_uci/base/ExternalizerWrite10.h"
#include "extjson_uci/base/ExternalizerWrite2.h"
#include "extjson_uci/base/ExternalizerWrite3.h"
#include "extjson_uci/base/ExternalizerWrite4.h"
#include "extjson_uci/base/ExternalizerWrite5.h"
#include "extjson_uci/base/ExternalizerWrite6.h"
#include "extjson_uci/base/ExternalizerWrite7.h"
#include "extjson_uci/base/ExternalizerWrite8.h"
#include "extjson_uci/base/ExternalizerWrite9.h"
#include "extjson_uci/util/SerializationHelpers.h"
#include "uci/base/Accessor.h"

/**  */
namespace extjson_uci {

/** The namespace in which all base data types are declared */
namespace base {

bool ExternalizerWrite::write(const uci::base::Accessor& accessor, std::ostream& ostream) {
  boost::property_tree::ptree propTree;
  boost::optional<std::string> externalizedNodeName{extjson_uci::base::ExternalizerWrite1::write(accessor, propTree)};
  if (!externalizedNodeName) {
    externalizedNodeName = extjson_uci::base::ExternalizerWrite2::write(accessor, propTree);
  }
  if (!externalizedNodeName) {
    externalizedNodeName = extjson_uci::base::ExternalizerWrite3::write(accessor, propTree);
  }
  if (!externalizedNodeName) {
    externalizedNodeName = extjson_uci::base::ExternalizerWrite4::write(accessor, propTree);
  }
  if (!externalizedNodeName) {
    externalizedNodeName = extjson_uci::base::ExternalizerWrite5::write(accessor, propTree);
  }
  if (!externalizedNodeName) {
    externalizedNodeName = extjson_uci::base::ExternalizerWrite6::write(accessor, propTree);
  }
  if (!externalizedNodeName) {
    externalizedNodeName = extjson_uci::base::ExternalizerWrite7::write(accessor, propTree);
  }
  if (!externalizedNodeName) {
    externalizedNodeName = extjson_uci::base::ExternalizerWrite8::write(accessor, propTree);
  }
  if (!externalizedNodeName) {
    externalizedNodeName = extjson_uci::base::ExternalizerWrite9::write(accessor, propTree);
  }
  if (!externalizedNodeName) {
    externalizedNodeName = extjson_uci::base::ExternalizerWrite10::write(accessor, propTree);
  }
  if (externalizedNodeName) {
    std::ostringstream parsedStream;
    boost::property_tree::json_parser::write_json(parsedStream, propTree);
    const std::string parsedString{parsedStream.str()};
    const std::ostream_iterator<char, char> ostreamIter{ostream};
    const boost::regex regex{std::string("\\\"") + extjson_uci::util::SerializationHelpers::delimBegin + "(.*?)" + extjson_uci::util::SerializationHelpers::delimEnd + "\\\""};
    boost::regex_replace(ostreamIter, parsedString.begin(), parsedString.end(), regex, "$1");
    return true;
  }
  return false;
}

} // namespace base

} // namespace extjson_uci

