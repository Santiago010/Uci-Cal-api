/** @file ExternalizerRead1.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:23 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extjson_uci/base/ExternalizerRead1.h"

#include <string>

#include <boost/property_tree/ptree.hpp>

#include "extjson_uci/base/BooleanAccessor.h"
#include "extjson_uci/base/ByteAccessor.h"
#include "extjson_uci/base/DateTimeAccessor.h"
#include "extjson_uci/base/DoubleAccessor.h"
#include "extjson_uci/base/DurationAccessor.h"
#include "extjson_uci/base/FloatAccessor.h"
#include "extjson_uci/base/IntAccessor.h"
#include "extjson_uci/base/LongAccessor.h"
#include "extjson_uci/base/ShortAccessor.h"
#include "extjson_uci/base/StringAccessor.h"
#include "extjson_uci/base/TimeAccessor.h"
#include "extjson_uci/base/UnsignedByteAccessor.h"
#include "extjson_uci/base/UnsignedIntAccessor.h"
#include "extjson_uci/base/UnsignedShortAccessor.h"
#include "extjson_uci/type/ACFTB_RevA_Type.h"
#include "extjson_uci/type/ACFTB_Type.h"
#include "extjson_uci/type/ACO_FileTraceabilityType.h"
#include "extjson_uci/type/ACO_TraceabilityType.h"
#include "extjson_uci/type/ACTDF_CollectionPlanType.h"
#include "extjson_uci/type/ACTDF_FileTraceabilityType.h"
#include "extjson_uci/type/ACTDF_TaskID_Type.h"
#include "extjson_uci/type/ACTDF_TraceabilityType.h"
#include "extjson_uci/type/AIMIDB_Type.h"
#include "extjson_uci/type/AIS_Type.h"
#include "extjson_uci/type/AMTI_ActivityCommandType.h"
#include "extjson_uci/type/AMTI_ActivityMDT.h"
#include "extjson_uci/type/AMTI_ActivityMT.h"
#include "extjson_uci/type/AMTI_ActivityType.h"
#include "extjson_uci/type/AMTI_CapabilityCommandType.h"
#include "extjson_uci/type/AMTI_CapabilityMDT.h"
#include "extjson_uci/type/AMTI_CapabilityMT.h"
#include "extjson_uci/type/AMTI_CapabilityOptionsType.h"
#include "extjson_uci/type/AMTI_CapabilityStatusMDT.h"
#include "extjson_uci/type/AMTI_CapabilityStatusMT.h"
#include "extjson_uci/type/AMTI_CapabilityType.h"
#include "extjson_uci/type/AMTI_CollectionConstraintsType.h"
#include "extjson_uci/type/AMTI_CommandMDT.h"
#include "extjson_uci/type/AMTI_CommandMT.h"
#include "extjson_uci/type/AMTI_CommandResponseType.h"
#include "extjson_uci/type/AMTI_CommandStatusMDT.h"
#include "extjson_uci/type/AMTI_CommandStatusMT.h"
#include "extjson_uci/type/AMTI_CommandType.h"
#include "extjson_uci/type/AMTI_SettingsCommandMDT.h"
#include "extjson_uci/type/AMTI_SettingsCommandMT.h"
#include "extjson_uci/type/AMTI_SettingsCommandStatusMDT.h"
#include "extjson_uci/type/AMTI_SettingsCommandStatusMT.h"
#include "extjson_uci/type/AMTI_SpecificDataType.h"
#include "extjson_uci/type/AMTI_TargetType.h"
#include "extjson_uci/type/AMTI_TaskBaseType.h"
#include "extjson_uci/type/AMTI_TaskType.h"
#include "extjson_uci/type/AOCO_TraceabilityType.h"
#include "extjson_uci/type/AO_ActivityCommandType.h"
#include "extjson_uci/type/AO_ActivityMDT.h"
#include "extjson_uci/type/AO_ActivityMT.h"
#include "extjson_uci/type/AO_ActivityType.h"
#include "extjson_uci/type/AO_CapabilityCommandType.h"
#include "extjson_uci/type/AO_CapabilityMDT.h"
#include "extjson_uci/type/AO_CapabilityMT.h"
#include "extjson_uci/type/AO_CapabilityOptionsType.h"
#include "extjson_uci/type/AO_CapabilityStatusMDT.h"
#include "extjson_uci/type/AO_CapabilityStatusMT.h"
#include "extjson_uci/type/AO_CapabilityType.h"
#include "extjson_uci/type/AO_CodeType.h"
#include "extjson_uci/type/AO_CommandMDT.h"
#include "extjson_uci/type/AO_CommandMT.h"
#include "extjson_uci/type/AO_CommandResponseType.h"
#include "extjson_uci/type/AO_CommandStatusMDT.h"
#include "extjson_uci/type/AO_CommandStatusMT.h"
#include "extjson_uci/type/AO_CommandType.h"
#include "extjson_uci/type/AO_ComponentSettingsType.h"
#include "extjson_uci/type/AO_ComponentType.h"
#include "extjson_uci/type/AO_ConsentRequestMDT.h"
#include "extjson_uci/type/AO_ConsentRequestMT.h"
#include "extjson_uci/type/AO_ConsentRequestStatusMDT.h"
#include "extjson_uci/type/AO_ConsentRequestStatusMT.h"
#include "extjson_uci/type/AO_ConsentRequestType.h"
#include "extjson_uci/type/AO_SettingsCommandMDT.h"
#include "extjson_uci/type/AO_SettingsCommandMT.h"
#include "extjson_uci/type/AO_SettingsCommandStatusMDT.h"
#include "extjson_uci/type/AO_SettingsCommandStatusMT.h"
#include "extjson_uci/type/AO_TaskBaseType.h"
#include "extjson_uci/type/AO_TaskType.h"
#include "extjson_uci/type/ATO_FileTraceabilityType.h"
#include "extjson_uci/type/ATO_TraceabilityType.h"
#include "extjson_uci/type/ATR_ProcessingParametersType.h"
#include "extjson_uci/type/ATR_ProcessingResultsType.h"
#include "extjson_uci/type/AboutType.h"
#include "extjson_uci/type/Acceleration3D_Type.h"
#include "extjson_uci/type/AccelerationAccelerationCovarianceType.h"
#include "extjson_uci/type/AcceptedProductInformationType.h"
#include "extjson_uci/type/AccessAssessmentFilterType.h"
#include "extjson_uci/type/AccessAssessmentID_Type.h"
#include "extjson_uci/type/AccessAssessmentMDT.h"
#include "extjson_uci/type/AccessAssessmentMT.h"
#include "extjson_uci/type/AccessAssessmentRequestMDT.h"
#include "extjson_uci/type/AccessAssessmentRequestMT.h"
#include "extjson_uci/type/AccessAssessmentRequestStatusMDT.h"
#include "extjson_uci/type/AccessAssessmentRequestStatusMT.h"
#include "extjson_uci/type/AccessAssessmentResultType.h"
#include "extjson_uci/type/AccessAssessmentType.h"
#include "extjson_uci/type/AccessCapabilityType.h"
#include "extjson_uci/type/AccessEventFilterType.h"
#include "extjson_uci/type/AccessEventType.h"
#include "extjson_uci/type/AccessObjectType.h"
#include "extjson_uci/type/AchievabilityAssessmentPET.h"
#include "extjson_uci/type/AchievabilityAssessmentRequestPET.h"
#include "extjson_uci/type/ActionActivityMDT.h"
#include "extjson_uci/type/ActionActivityMT.h"
#include "extjson_uci/type/ActionActivityType.h"
#include "extjson_uci/type/ActionAllocationInvalidType.h"
#include "extjson_uci/type/ActionAllocationType.h"
#include "extjson_uci/type/ActionCancelCommandMDT.h"
#include "extjson_uci/type/ActionCancelCommandMT.h"
#include "extjson_uci/type/ActionCancelCommandStatusMDT.h"
#include "extjson_uci/type/ActionCancelCommandStatusMT.h"
#include "extjson_uci/type/ActionCapabilityCommandType.h"
#include "extjson_uci/type/ActionCapabilityMDT.h"
#include "extjson_uci/type/ActionCapabilityMT.h"
#include "extjson_uci/type/ActionCapabilityOptionsType.h"
#include "extjson_uci/type/ActionCapabilityStatusMDT.h"
#include "extjson_uci/type/ActionCapabilityStatusMT.h"
#include "extjson_uci/type/ActionCapabilityType.h"
#include "extjson_uci/type/ActionCommandMDT.h"
#include "extjson_uci/type/ActionCommandMT.h"
#include "extjson_uci/type/ActionCommandStatusMDT.h"
#include "extjson_uci/type/ActionCommandStatusMT.h"
#include "extjson_uci/type/ActionCommandType.h"
#include "extjson_uci/type/ActionExecutionApprovalStatusMDT.h"
#include "extjson_uci/type/ActionExecutionApprovalStatusMT.h"
#include "extjson_uci/type/ActionID_Type.h"
#include "extjson_uci/type/ActionMDT.h"
#include "extjson_uci/type/ActionMT.h"
#include "extjson_uci/type/ActionPlanActivationType.h"
#include "extjson_uci/type/ActionPlanApprovalStatusMDT.h"
#include "extjson_uci/type/ActionPlanApprovalStatusMT.h"
#include "extjson_uci/type/ActionPlanCommandID_ChoiceType.h"
#include "extjson_uci/type/ActionPlanCommandID_Type.h"
#include "extjson_uci/type/ActionPlanCommandMDT.h"
#include "extjson_uci/type/ActionPlanCommandMT.h"
#include "extjson_uci/type/ActionPlanCommandStatusMDT.h"
#include "extjson_uci/type/ActionPlanCommandStatusMT.h"
#include "extjson_uci/type/ActionPlanConstraintType.h"
#include "extjson_uci/type/ActionPlanExecutionStateType.h"
#include "extjson_uci/type/ActionPlanExecutionStatusMDT.h"
#include "extjson_uci/type/ActionPlanExecutionStatusMT.h"
#include "extjson_uci/type/ActionPlanID_Type.h"
#include "extjson_uci/type/ActionPlanInputsType.h"
#include "extjson_uci/type/ActionPlanInvalidType.h"
#include "extjson_uci/type/ActionPlanMDT.h"
#include "extjson_uci/type/ActionPlanMT.h"
#include "extjson_uci/type/ActionPlanPartsType.h"
#include "extjson_uci/type/ActionPlanProcessDescriptionType.h"
#include "extjson_uci/type/ActionPlanProcessType.h"
#include "extjson_uci/type/ActionPlanStatusMDT.h"
#include "extjson_uci/type/ActionPlanStatusMT.h"
#include "extjson_uci/type/ActionPlanType.h"
#include "extjson_uci/type/ActionPlanValidationCommandMDT.h"
#include "extjson_uci/type/ActionPlanValidationCommandMT.h"
#include "extjson_uci/type/ActionPlanValidationCommandStatusMDT.h"
#include "extjson_uci/type/ActionPlanValidationCommandStatusMT.h"
#include "extjson_uci/type/ActionPlanValidationID_Type.h"
#include "extjson_uci/type/ActionPlanValidationInputsType.h"
#include "extjson_uci/type/ActionPlanValidationMDT.h"
#include "extjson_uci/type/ActionPlanValidationMT.h"
#include "extjson_uci/type/ActionPlanningResultType.h"
#include "extjson_uci/type/ActionPlanningStatusMDT.h"
#include "extjson_uci/type/ActionPlanningStatusMT.h"
#include "extjson_uci/type/ActionStatusMDT.h"
#include "extjson_uci/type/ActionStatusMT.h"
#include "extjson_uci/type/ActivationOrbitSequenceType.h"
#include "extjson_uci/type/ActivationPathSegmentType.h"
#include "extjson_uci/type/ActivityActorID_ChoiceType.h"
#include "extjson_uci/type/ActivityAgainstType.h"
#include "extjson_uci/type/ActivityBaseType.h"
#include "extjson_uci/type/ActivityByType.h"
#include "extjson_uci/type/ActivityChoiceType.h"
#include "extjson_uci/type/ActivityCommandBaseType.h"
#include "extjson_uci/type/ActivityExecutionStatusType.h"
#include "extjson_uci/type/ActivityID_Type.h"
#include "extjson_uci/type/ActivityMetricsID_Type.h"
#include "extjson_uci/type/ActivityMetricsMDT.h"
#include "extjson_uci/type/ActivityMetricsMT.h"
#include "extjson_uci/type/ActivityMetricsRequestMDT.h"
#include "extjson_uci/type/ActivityMetricsRequestMT.h"
#include "extjson_uci/type/ActivityMetricsRequestStatusMDT.h"
#include "extjson_uci/type/ActivityMetricsRequestStatusMT.h"
#include "extjson_uci/type/ActivityMetricsType.h"
#include "extjson_uci/type/ActivityPlanActivationType.h"
#include "extjson_uci/type/ActivityPlanApprovalStatusMDT.h"
#include "extjson_uci/type/ActivityPlanApprovalStatusMT.h"
#include "extjson_uci/type/ActivityPlanCommandID_ChoiceType.h"
#include "extjson_uci/type/ActivityPlanCommandID_Type.h"
#include "extjson_uci/type/ActivityPlanCommandMDT.h"
#include "extjson_uci/type/ActivityPlanCommandMT.h"
#include "extjson_uci/type/ActivityPlanCommandStatusMDT.h"
#include "extjson_uci/type/ActivityPlanCommandStatusMT.h"
#include "extjson_uci/type/ActivityPlanConstraintType.h"
#include "extjson_uci/type/ActivityPlanExecutionStateType.h"
#include "extjson_uci/type/ActivityPlanExecutionStatusMDT.h"
#include "extjson_uci/type/ActivityPlanExecutionStatusMT.h"
#include "extjson_uci/type/ActivityPlanID_Type.h"
#include "extjson_uci/type/ActivityPlanInputsType.h"
#include "extjson_uci/type/ActivityPlanInvalidType.h"
#include "extjson_uci/type/ActivityPlanMDT.h"
#include "extjson_uci/type/ActivityPlanMT.h"
#include "extjson_uci/type/ActivityPlanPartsCommandType.h"
#include "extjson_uci/type/ActivityPlanPartsType.h"
#include "extjson_uci/type/ActivityPlanProcessDescriptionType.h"
#include "extjson_uci/type/ActivityPlanProcessType.h"
#include "extjson_uci/type/ActivityPlanReferenceType.h"
#include "extjson_uci/type/ActivityPlanStatusMDT.h"
#include "extjson_uci/type/ActivityPlanStatusMT.h"
#include "extjson_uci/type/ActivityPlanStatusType.h"
#include "extjson_uci/type/ActivityPlanType.h"
#include "extjson_uci/type/ActivityPlanValidationCommandMDT.h"
#include "extjson_uci/type/ActivityPlanValidationCommandMT.h"
#include "extjson_uci/type/ActivityPlanValidationCommandStatusMDT.h"
#include "extjson_uci/type/ActivityPlanValidationCommandStatusMT.h"
#include "extjson_uci/type/ActivityPlanValidationID_Type.h"
#include "extjson_uci/type/ActivityPlanValidationInputsType.h"
#include "extjson_uci/type/ActivityPlanValidationMDT.h"
#include "extjson_uci/type/ActivityPlanValidationMT.h"
#include "extjson_uci/type/ActivityPlansID_ChoiceType.h"
#include "extjson_uci/type/ActivitySourceType.h"
#include "extjson_uci/type/ActivityTriggerType.h"
#include "extjson_uci/type/AirDataType.h"
#include "extjson_uci/type/AirSampleActivityMDT.h"
#include "extjson_uci/type/AirSampleActivityMT.h"
#include "extjson_uci/type/AirSampleActivityType.h"
#include "extjson_uci/type/AirSampleCapabilityCommandType.h"
#include "extjson_uci/type/AirSampleCapabilityMDT.h"
#include "extjson_uci/type/AirSampleCapabilityMT.h"
#include "extjson_uci/type/AirSampleCapabilityStatusMDT.h"
#include "extjson_uci/type/AirSampleCapabilityStatusMT.h"
#include "extjson_uci/type/AirSampleCapabilityType.h"
#include "extjson_uci/type/AirSampleCommandMDT.h"
#include "extjson_uci/type/AirSampleCommandMT.h"
#include "extjson_uci/type/AirSampleCommandResponseType.h"
#include "extjson_uci/type/AirSampleCommandStatusMDT.h"
#include "extjson_uci/type/AirSampleCommandStatusMT.h"
#include "extjson_uci/type/AirSampleCommandType.h"
#include "extjson_uci/type/AirSampleOptionsType.h"
#include "extjson_uci/type/AirSampleSettingsCommandMDT.h"
#include "extjson_uci/type/AirSampleSettingsCommandMT.h"
#include "extjson_uci/type/AirSampleSettingsCommandStatusMDT.h"
#include "extjson_uci/type/AirSampleSettingsCommandStatusMT.h"
#include "extjson_uci/type/AirSampleTaskBaseType.h"
#include "extjson_uci/type/AirSampleTaskType.h"
#include "extjson_uci/type/AirTargetVolumeCommandType.h"
#include "extjson_uci/type/AirTargetVolumeType.h"
#include "extjson_uci/type/AirVolumeCueType.h"
#include "extjson_uci/type/AirVolumeSensorReferencedType.h"
#include "extjson_uci/type/AirfieldContaminationType.h"
#include "extjson_uci/type/AirfieldGeneralStoreType.h"
#include "extjson_uci/type/AirfieldID_Type.h"
#include "extjson_uci/type/AirfieldInformationType.h"
#include "extjson_uci/type/AirfieldReferenceID_ChoiceType.h"
#include "extjson_uci/type/AirfieldReportID_Type.h"
#include "extjson_uci/type/AirfieldReportMDT.h"
#include "extjson_uci/type/AirfieldReportMT.h"
#include "extjson_uci/type/AirfieldRunwayType.h"
#include "extjson_uci/type/AirfieldStoreType.h"
#include "extjson_uci/type/AirfieldStoresPET.h"
#include "extjson_uci/type/AllowableSensorsType.h"
#include "extjson_uci/type/AlongOrbitalArcDeltaType.h"
#include "extjson_uci/type/AltitudeConstraintsType.h"
#include "extjson_uci/type/AltitudeOffsetReferenceType.h"
#include "extjson_uci/type/AltitudeRadialPairType.h"
#include "extjson_uci/type/AltitudeRangePairType.h"
#include "extjson_uci/type/AltitudeRangeType.h"
#include "extjson_uci/type/AltitudeReferenceType.h"
#include "extjson_uci/type/AltitudeReferenceUncertaintyType.h"
#include "extjson_uci/type/AmplifyingInformationType.h"
#include "extjson_uci/type/AnalysisRouteID_Type.h"
#include "extjson_uci/type/AnalysisRouteInformationType.h"
#include "extjson_uci/type/AnalysisRouteMDT.h"
#include "extjson_uci/type/AnalysisRouteMT.h"
#include "extjson_uci/type/AnalysisRoutePathType.h"
#include "extjson_uci/type/AnalysisRouteRequestMDT.h"
#include "extjson_uci/type/AnalysisRouteRequestMT.h"
#include "extjson_uci/type/AnalysisRouteRequestStatusMDT.h"
#include "extjson_uci/type/AnalysisRouteRequestStatusMT.h"
#include "extjson_uci/type/AnalysisRouteSegmentType.h"
#include "extjson_uci/type/AnalyticConstraintsType.h"
#include "extjson_uci/type/AngleHalfPairType.h"
#include "extjson_uci/type/AnglePairType.h"
#include "extjson_uci/type/AngleQuarterPairType.h"
#include "extjson_uci/type/AngleRateRangeType.h"
#include "extjson_uci/type/AntennaAllocationAndBeamConfigurationsType.h"
#include "extjson_uci/type/AntennaAndResourceInstanceType.h"
#include "extjson_uci/type/AntennaID_Type.h"
#include "extjson_uci/type/AntennaPerformanceProfileType.h"
#include "extjson_uci/type/AntennaResourceAndBeamConfigurationsType.h"
#include "extjson_uci/type/AntennaResourceChoiceType.h"
#include "extjson_uci/type/AntennaResourceID_Type.h"
#include "extjson_uci/type/AntennaResourceInstanceStatusType.h"
#include "extjson_uci/type/AntennaStatusType.h"
#include "extjson_uci/type/AntennaType.h"
#include "extjson_uci/type/AperturePointingOptionsType.h"
#include "extjson_uci/type/ApplicabilityType.h"
#include "extjson_uci/type/ApplicableVolumeType.h"
#include "extjson_uci/type/ApplicableZoneType.h"
#include "extjson_uci/type/AppliesToType.h"
#include "extjson_uci/type/ApproachAngleType.h"
#include "extjson_uci/type/ApproachConditionsType.h"
#include "extjson_uci/type/ApprovalAuthorityID_Type.h"
#include "extjson_uci/type/ApprovalAuthorityMDT.h"
#include "extjson_uci/type/ApprovalAuthorityMT.h"
#include "extjson_uci/type/ApprovalAuthorityRequestMDT.h"
#include "extjson_uci/type/ApprovalAuthorityRequestMT.h"
#include "extjson_uci/type/ApprovalAuthorityRequestStatusMDT.h"
#include "extjson_uci/type/ApprovalAuthorityRequestStatusMT.h"
#include "extjson_uci/type/ApprovalManagementCommandMDT.h"
#include "extjson_uci/type/ApprovalManagementCommandMT.h"
#include "extjson_uci/type/ApprovalManagementCommandStatusMDT.h"
#include "extjson_uci/type/ApprovalManagementCommandStatusMT.h"
#include "extjson_uci/type/ApprovalPolicyBaseType.h"
#include "extjson_uci/type/ApprovalPolicyID_Type.h"
#include "extjson_uci/type/ApprovalPolicyMDT.h"
#include "extjson_uci/type/ApprovalPolicyMT.h"
#include "extjson_uci/type/ApprovalRequestItemReferenceType.h"
#include "extjson_uci/type/ApprovalRequestItemType.h"
#include "extjson_uci/type/ApprovalRequestMDT.h"
#include "extjson_uci/type/ApprovalRequestMT.h"
#include "extjson_uci/type/ApprovalRequestPolicyReferenceType.h"
#include "extjson_uci/type/ApprovalRequestStatusMDT.h"
#include "extjson_uci/type/ApprovalRequestStatusMT.h"
#include "extjson_uci/type/ApproverRoleType.h"
#include "extjson_uci/type/ArcVolumeType.h"
#include "extjson_uci/type/ArchiveRequestType.h"
#include "extjson_uci/type/AreaChoiceType.h"
#include "extjson_uci/type/AreaConstraintsType.h"
#include "extjson_uci/type/ArrivalDataType.h"
#include "extjson_uci/type/ArrivalDataUncertaintyType.h"
#include "extjson_uci/type/ArrivalDataVarianceType.h"
#include "extjson_uci/type/AssessmentID_Type.h"
#include "extjson_uci/type/AssessmentMDT.h"
#include "extjson_uci/type/AssessmentMT.h"
#include "extjson_uci/type/AssessmentRequestMDT.h"
#include "extjson_uci/type/AssessmentRequestMT.h"
#include "extjson_uci/type/AssessmentRequestStatusMDT.h"
#include "extjson_uci/type/AssessmentRequestStatusMT.h"
#include "extjson_uci/type/AssessmentRequestType.h"
#include "extjson_uci/type/AssessmentStatusType.h"
#include "extjson_uci/type/AssessmentType.h"
#include "extjson_uci/type/AssetFilterType.h"
#include "extjson_uci/type/AssetType.h"
#include "extjson_uci/type/AssociatedAccessAssessmentInfoType.h"
#include "extjson_uci/type/AssociatedDropRestrictMessageType.h"
#include "extjson_uci/type/AssociatedMessageSourceType.h"
#include "extjson_uci/type/AssociatedMessageType.h"
#include "extjson_uci/type/AssociatedRequirementsType.h"
#include "extjson_uci/type/AtmosphericDragModelType.h"
#include "extjson_uci/type/AtmosphericPropagationLossType.h"
#include "extjson_uci/type/AtomicEnergyMarkingsChoiceType.h"
#include "extjson_uci/type/AtomicEnergyMarkingsEnum.h"
#include "extjson_uci/type/AtomicEnergySigmaMarkingsEnum.h"
#include "extjson_uci/type/AtomicValueType.h"
#include "extjson_uci/type/AugmentationProcessingParametersType.h"
#include "extjson_uci/type/AuralAlertRepetitionType.h"
#include "extjson_uci/type/AuralAlertType.h"
#include "extjson_uci/type/AuthorizationID_Type.h"
#include "extjson_uci/type/AuthorizationMDT.h"
#include "extjson_uci/type/AuthorizationMT.h"
#include "extjson_uci/type/AutonomousActionStatusChoiceType.h"
#include "extjson_uci/type/AutonomousPlanCommandType.h"
#include "extjson_uci/type/AutonomousPlanningActionID_Type.h"
#include "extjson_uci/type/AutonomousPlanningActionStatusType.h"
#include "extjson_uci/type/AutonomousPlanningConstrainingPlansType.h"
#include "extjson_uci/type/AutonomousPlanningOtherSystemConstrainingPlansType.h"
#include "extjson_uci/type/AvailabilityInfoType.h"
#include "extjson_uci/type/AvailableConnectionType.h"
#include "extjson_uci/type/AvailableFuelType.h"
#include "extjson_uci/type/AvailableWeaponsType.h"
#include "extjson_uci/type/AzElReferenceType.h"
#include "extjson_uci/type/AzElRequiredReferenceType.h"
#include "extjson_uci/type/Az_El_BeamPointingType.h"
#include "extjson_uci/type/Az_El_BeamPointingWithRangeType.h"
#include "extjson_uci/type/AzimuthElevationRangePointType.h"
#include "extjson_uci/type/BCRS_KinematicsType.h"
#include "extjson_uci/type/BCRS_PositionType.h"
#include "extjson_uci/type/BDI_CollectionType.h"
#include "extjson_uci/type/BIT_ID_Type.h"
#include "extjson_uci/type/BaseEOB_RecordType.h"
#include "extjson_uci/type/BasicEncyclopediaNumberType.h"
#include "extjson_uci/type/BasicManeuverConstraintsType.h"
#include "extjson_uci/type/BeamBandWidthAndSampleRateType.h"
#include "extjson_uci/type/BeamID_Type.h"
#include "extjson_uci/type/BeamPointingReferenceType.h"
#include "extjson_uci/type/BeamShapingType.h"
#include "extjson_uci/type/BeamWeightingType.h"
#include "extjson_uci/type/BeamWidthType.h"
#include "extjson_uci/type/BehaviorType.h"
#include "extjson_uci/type/BlankingLimitType.h"
#include "extjson_uci/type/BlankingSourceType.h"
#include "extjson_uci/type/BlueVehicleType.h"
#include "extjson_uci/type/BodyFaceType.h"
#include "extjson_uci/type/BoresightVelocityType.h"
#include "extjson_uci/type/BoundaryType.h"
#include "extjson_uci/type/ByRequirementPolicyType.h"
#include "extjson_uci/type/ByResultPolicyType.h"
#include "extjson_uci/type/ByTriggerPolicyType.h"
#include "extjson_uci/type/CF_CourseToFixType.h"
#include "extjson_uci/type/COE_EquatorialOrientationType.h"
#include "extjson_uci/type/COE_NonEquatorialOrientationType.h"
#include "extjson_uci/type/COE_OrbitBaseType.h"
#include "extjson_uci/type/COE_OrbitType.h"
#include "extjson_uci/type/COE_OrientationType.h"
#include "extjson_uci/type/COE_PositionType.h"
#include "extjson_uci/type/CalibrationID_Type.h"
#include "extjson_uci/type/CallSignType.h"
#include "extjson_uci/type/CannotComplyType.h"
#include "extjson_uci/type/CapabilityAssessmentActionType.h"
#include "extjson_uci/type/CapabilityAssessmentActivityDetailsType.h"
#include "extjson_uci/type/CapabilityAssessmentActivityType.h"
#include "extjson_uci/type/CapabilityAssessmentDataType.h"
#include "extjson_uci/type/CapabilityAssessmentPointType.h"
#include "extjson_uci/type/CapabilityBaseType.h"
#include "extjson_uci/type/CapabilityCommandBaseType.h"
#include "extjson_uci/type/CapabilityCommandFrequencyType.h"
#include "extjson_uci/type/CapabilityCommandRankingType.h"
#include "extjson_uci/type/CapabilityCommandStatusBaseType.h"
#include "extjson_uci/type/CapabilityCommandTemporalConstraintsType.h"
#include "extjson_uci/type/CapabilityConfigurationID_Type.h"
#include "extjson_uci/type/CapabilityConfigurationType.h"
#include "extjson_uci/type/CapabilityConsentRequestStatusBaseType.h"
#include "extjson_uci/type/CapabilityCoverageAreaDataType.h"
#include "extjson_uci/type/CapabilityCoverageAreaID_Type.h"
#include "extjson_uci/type/CapabilityCoverageAreaMDT.h"
#include "extjson_uci/type/CapabilityCoverageAreaMT.h"
#include "extjson_uci/type/CapabilityCoverageAreaRequestDataType.h"
#include "extjson_uci/type/CapabilityCoverageAreaRequestMDT.h"
#include "extjson_uci/type/CapabilityCoverageAreaRequestMT.h"
#include "extjson_uci/type/CapabilityCoverageAreaRequestStatusMDT.h"
#include "extjson_uci/type/CapabilityCoverageAreaRequestStatusMT.h"
#include "extjson_uci/type/CapabilityCrossReferenceType.h"
#include "extjson_uci/type/CapabilityDeclarationBaseType.h"
#include "extjson_uci/type/CapabilityID_Type.h"
#include "extjson_uci/type/CapabilityManagerType.h"
#include "extjson_uci/type/CapabilityPrecedenceType.h"
#include "extjson_uci/type/CapabilityRF_ProfileStatusType.h"
#include "extjson_uci/type/CapabilitySettingsCommandBaseType.h"
#include "extjson_uci/type/CapabilitySettingsCommandStatusBaseType.h"
#include "extjson_uci/type/CapabilitySpecificationType.h"
#include "extjson_uci/type/CapabilityStateType.h"
#include "extjson_uci/type/CapabilityStatusBaseType.h"
#include "extjson_uci/type/CapabilityStatusType.h"
#include "extjson_uci/type/CapabilityTaxonomyType.h"
#include "extjson_uci/type/CapabilityTaxonomyUniversalBaseType.h"
#include "extjson_uci/type/CapabilityTaxonomyUniversalType.h"
#include "extjson_uci/type/CapabilityUtilizationAssessmentType.h"
#include "extjson_uci/type/CapabilityUtilizationRequestType.h"
#include "extjson_uci/type/CargoDeliveryCapabilityMDT.h"
#include "extjson_uci/type/CargoDeliveryCapabilityMT.h"
#include "extjson_uci/type/CargoDeliveryCapabilityStatusMDT.h"
#include "extjson_uci/type/CargoDeliveryCapabilityStatusMT.h"
#include "extjson_uci/type/CargoDeliveryCapabilityType.h"
#include "extjson_uci/type/CargoDeliverySpecificDataType.h"
#include "extjson_uci/type/CargoDeliveryTaskType.h"
#include "extjson_uci/type/CargoID_Type.h"
#include "extjson_uci/type/CargoLocationType.h"
#include "extjson_uci/type/CargoSizeType.h"
#include "extjson_uci/type/CargoStatusMDT.h"
#include "extjson_uci/type/CargoStatusMT.h"
#include "extjson_uci/type/CargoTransitionType.h"
#include "extjson_uci/type/CargoType.h"
#include "extjson_uci/type/CelestialBodyType.h"
#include "extjson_uci/type/CenterOfGravityAeroType.h"
#include "extjson_uci/type/CenterPointImageRegionOfInterestType.h"
#include "extjson_uci/type/ChannelDescriptionType.h"
#include "extjson_uci/type/CharacterizationChoiceType.h"
#include "extjson_uci/type/CharacterizationObjectiveType.h"
#include "extjson_uci/type/CharacterizationOptionsType.h"
#include "extjson_uci/type/CircleType.h"
#include "extjson_uci/type/CivilPathTerminatorType.h"
#include "extjson_uci/type/ClassificationConstrainedSubPlanType.h"
#include "extjson_uci/type/ClassificationEnum.h"
#include "extjson_uci/type/ClassificationReportType.h"
#include "extjson_uci/type/ClassificationRequirementsType.h"
#include "extjson_uci/type/ClimbType.h"
#include "extjson_uci/type/CloudsType.h"
#include "extjson_uci/type/CollectionConstraintsType.h"
#include "extjson_uci/type/CollectionDeckTraceabilityType.h"
#include "extjson_uci/type/CollectionFrequencyType.h"
#include "extjson_uci/type/CollectionTaskMetricsType.h"
#include "extjson_uci/type/ColorDepthSettingsType.h"
#include "extjson_uci/type/DeclassExceptionEnum.h"
#include "extjson_uci/type/DisseminationControlsEnum.h"
#include "extjson_uci/type/FGI_SourceOpenChoiceType.h"
#include "extjson_uci/type/FGI_SourceOpenEnum.h"
#include "extjson_uci/type/NonIC_MarkingsChoiceType.h"
#include "extjson_uci/type/NonIC_MarkingsEnum.h"
#include "extjson_uci/type/NonUS_ControlsEnum.h"
#include "extjson_uci/type/OwnerProducerChoiceType.h"
#include "extjson_uci/type/OwnerProducerEnum.h"
#include "extjson_uci/type/ReleasableToChoiceType.h"
#include "extjson_uci/type/ReleasableToEnum.h"
#include "extjson_uci/type/SCI_ControlsChoiceType.h"
#include "extjson_uci/type/SCI_ControlsEnum.h"
#include "extjson_uci/type/SecurityInformationType.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/ByteAccessor.h"
#include "uci/base/DateTimeAccessor.h"
#include "uci/base/DoubleAccessor.h"
#include "uci/base/DurationAccessor.h"
#include "uci/base/FloatAccessor.h"
#include "uci/base/IntAccessor.h"
#include "uci/base/LongAccessor.h"
#include "uci/base/ShortAccessor.h"
#include "uci/base/StringAccessor.h"
#include "uci/base/TimeAccessor.h"
#include "uci/base/UnsignedByteAccessor.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/UnsignedShortAccessor.h"
#include "uci/base/accessorType.h"
#include "uci/type/ACFTB_RevA_Type.h"
#include "uci/type/ACFTB_Type.h"
#include "uci/type/ACO_FileTraceabilityType.h"
#include "uci/type/ACO_TraceabilityType.h"
#include "uci/type/ACTDF_CollectionPlanType.h"
#include "uci/type/ACTDF_FileTraceabilityType.h"
#include "uci/type/ACTDF_TaskID_Type.h"
#include "uci/type/ACTDF_TraceabilityType.h"
#include "uci/type/AIMIDB_Type.h"
#include "uci/type/AIS_Type.h"
#include "uci/type/AMTI_ActivityCommandType.h"
#include "uci/type/AMTI_ActivityMDT.h"
#include "uci/type/AMTI_ActivityMT.h"
#include "uci/type/AMTI_ActivityType.h"
#include "uci/type/AMTI_CapabilityCommandType.h"
#include "uci/type/AMTI_CapabilityMDT.h"
#include "uci/type/AMTI_CapabilityMT.h"
#include "uci/type/AMTI_CapabilityOptionsType.h"
#include "uci/type/AMTI_CapabilityStatusMDT.h"
#include "uci/type/AMTI_CapabilityStatusMT.h"
#include "uci/type/AMTI_CapabilityType.h"
#include "uci/type/AMTI_CollectionConstraintsType.h"
#include "uci/type/AMTI_CommandMDT.h"
#include "uci/type/AMTI_CommandMT.h"
#include "uci/type/AMTI_CommandResponseType.h"
#include "uci/type/AMTI_CommandStatusMDT.h"
#include "uci/type/AMTI_CommandStatusMT.h"
#include "uci/type/AMTI_CommandType.h"
#include "uci/type/AMTI_SettingsCommandMDT.h"
#include "uci/type/AMTI_SettingsCommandMT.h"
#include "uci/type/AMTI_SettingsCommandStatusMDT.h"
#include "uci/type/AMTI_SettingsCommandStatusMT.h"
#include "uci/type/AMTI_SpecificDataType.h"
#include "uci/type/AMTI_TargetType.h"
#include "uci/type/AMTI_TaskBaseType.h"
#include "uci/type/AMTI_TaskType.h"
#include "uci/type/AOCO_TraceabilityType.h"
#include "uci/type/AO_ActivityCommandType.h"
#include "uci/type/AO_ActivityMDT.h"
#include "uci/type/AO_ActivityMT.h"
#include "uci/type/AO_ActivityType.h"
#include "uci/type/AO_CapabilityCommandType.h"
#include "uci/type/AO_CapabilityMDT.h"
#include "uci/type/AO_CapabilityMT.h"
#include "uci/type/AO_CapabilityOptionsType.h"
#include "uci/type/AO_CapabilityStatusMDT.h"
#include "uci/type/AO_CapabilityStatusMT.h"
#include "uci/type/AO_CapabilityType.h"
#include "uci/type/AO_CodeType.h"
#include "uci/type/AO_CommandMDT.h"
#include "uci/type/AO_CommandMT.h"
#include "uci/type/AO_CommandResponseType.h"
#include "uci/type/AO_CommandStatusMDT.h"
#include "uci/type/AO_CommandStatusMT.h"
#include "uci/type/AO_CommandType.h"
#include "uci/type/AO_ComponentSettingsType.h"
#include "uci/type/AO_ComponentType.h"
#include "uci/type/AO_ConsentRequestMDT.h"
#include "uci/type/AO_ConsentRequestMT.h"
#include "uci/type/AO_ConsentRequestStatusMDT.h"
#include "uci/type/AO_ConsentRequestStatusMT.h"
#include "uci/type/AO_ConsentRequestType.h"
#include "uci/type/AO_SettingsCommandMDT.h"
#include "uci/type/AO_SettingsCommandMT.h"
#include "uci/type/AO_SettingsCommandStatusMDT.h"
#include "uci/type/AO_SettingsCommandStatusMT.h"
#include "uci/type/AO_TaskBaseType.h"
#include "uci/type/AO_TaskType.h"
#include "uci/type/ATO_FileTraceabilityType.h"
#include "uci/type/ATO_TraceabilityType.h"
#include "uci/type/ATR_ProcessingParametersType.h"
#include "uci/type/ATR_ProcessingResultsType.h"
#include "uci/type/AboutType.h"
#include "uci/type/Acceleration3D_Type.h"
#include "uci/type/AccelerationAccelerationCovarianceType.h"
#include "uci/type/AcceptedProductInformationType.h"
#include "uci/type/AccessAssessmentFilterType.h"
#include "uci/type/AccessAssessmentID_Type.h"
#include "uci/type/AccessAssessmentMDT.h"
#include "uci/type/AccessAssessmentMT.h"
#include "uci/type/AccessAssessmentRequestMDT.h"
#include "uci/type/AccessAssessmentRequestMT.h"
#include "uci/type/AccessAssessmentRequestStatusMDT.h"
#include "uci/type/AccessAssessmentRequestStatusMT.h"
#include "uci/type/AccessAssessmentResultType.h"
#include "uci/type/AccessAssessmentType.h"
#include "uci/type/AccessCapabilityType.h"
#include "uci/type/AccessEventFilterType.h"
#include "uci/type/AccessEventType.h"
#include "uci/type/AccessObjectType.h"
#include "uci/type/AchievabilityAssessmentPET.h"
#include "uci/type/AchievabilityAssessmentRequestPET.h"
#include "uci/type/ActionActivityMDT.h"
#include "uci/type/ActionActivityMT.h"
#include "uci/type/ActionActivityType.h"
#include "uci/type/ActionAllocationInvalidType.h"
#include "uci/type/ActionAllocationType.h"
#include "uci/type/ActionCancelCommandMDT.h"
#include "uci/type/ActionCancelCommandMT.h"
#include "uci/type/ActionCancelCommandStatusMDT.h"
#include "uci/type/ActionCancelCommandStatusMT.h"
#include "uci/type/ActionCapabilityCommandType.h"
#include "uci/type/ActionCapabilityMDT.h"
#include "uci/type/ActionCapabilityMT.h"
#include "uci/type/ActionCapabilityOptionsType.h"
#include "uci/type/ActionCapabilityStatusMDT.h"
#include "uci/type/ActionCapabilityStatusMT.h"
#include "uci/type/ActionCapabilityType.h"
#include "uci/type/ActionCommandMDT.h"
#include "uci/type/ActionCommandMT.h"
#include "uci/type/ActionCommandStatusMDT.h"
#include "uci/type/ActionCommandStatusMT.h"
#include "uci/type/ActionCommandType.h"
#include "uci/type/ActionExecutionApprovalStatusMDT.h"
#include "uci/type/ActionExecutionApprovalStatusMT.h"
#include "uci/type/ActionID_Type.h"
#include "uci/type/ActionMDT.h"
#include "uci/type/ActionMT.h"
#include "uci/type/ActionPlanActivationType.h"
#include "uci/type/ActionPlanApprovalStatusMDT.h"
#include "uci/type/ActionPlanApprovalStatusMT.h"
#include "uci/type/ActionPlanCommandID_ChoiceType.h"
#include "uci/type/ActionPlanCommandID_Type.h"
#include "uci/type/ActionPlanCommandMDT.h"
#include "uci/type/ActionPlanCommandMT.h"
#include "uci/type/ActionPlanCommandStatusMDT.h"
#include "uci/type/ActionPlanCommandStatusMT.h"
#include "uci/type/ActionPlanConstraintType.h"
#include "uci/type/ActionPlanExecutionStateType.h"
#include "uci/type/ActionPlanExecutionStatusMDT.h"
#include "uci/type/ActionPlanExecutionStatusMT.h"
#include "uci/type/ActionPlanID_Type.h"
#include "uci/type/ActionPlanInputsType.h"
#include "uci/type/ActionPlanInvalidType.h"
#include "uci/type/ActionPlanMDT.h"
#include "uci/type/ActionPlanMT.h"
#include "uci/type/ActionPlanPartsType.h"
#include "uci/type/ActionPlanProcessDescriptionType.h"
#include "uci/type/ActionPlanProcessType.h"
#include "uci/type/ActionPlanStatusMDT.h"
#include "uci/type/ActionPlanStatusMT.h"
#include "uci/type/ActionPlanType.h"
#include "uci/type/ActionPlanValidationCommandMDT.h"
#include "uci/type/ActionPlanValidationCommandMT.h"
#include "uci/type/ActionPlanValidationCommandStatusMDT.h"
#include "uci/type/ActionPlanValidationCommandStatusMT.h"
#include "uci/type/ActionPlanValidationID_Type.h"
#include "uci/type/ActionPlanValidationInputsType.h"
#include "uci/type/ActionPlanValidationMDT.h"
#include "uci/type/ActionPlanValidationMT.h"
#include "uci/type/ActionPlanningResultType.h"
#include "uci/type/ActionPlanningStatusMDT.h"
#include "uci/type/ActionPlanningStatusMT.h"
#include "uci/type/ActionStatusMDT.h"
#include "uci/type/ActionStatusMT.h"
#include "uci/type/ActivationOrbitSequenceType.h"
#include "uci/type/ActivationPathSegmentType.h"
#include "uci/type/ActivityActorID_ChoiceType.h"
#include "uci/type/ActivityAgainstType.h"
#include "uci/type/ActivityBaseType.h"
#include "uci/type/ActivityByType.h"
#include "uci/type/ActivityChoiceType.h"
#include "uci/type/ActivityCommandBaseType.h"
#include "uci/type/ActivityExecutionStatusType.h"
#include "uci/type/ActivityID_Type.h"
#include "uci/type/ActivityMetricsID_Type.h"
#include "uci/type/ActivityMetricsMDT.h"
#include "uci/type/ActivityMetricsMT.h"
#include "uci/type/ActivityMetricsRequestMDT.h"
#include "uci/type/ActivityMetricsRequestMT.h"
#include "uci/type/ActivityMetricsRequestStatusMDT.h"
#include "uci/type/ActivityMetricsRequestStatusMT.h"
#include "uci/type/ActivityMetricsType.h"
#include "uci/type/ActivityPlanActivationType.h"
#include "uci/type/ActivityPlanApprovalStatusMDT.h"
#include "uci/type/ActivityPlanApprovalStatusMT.h"
#include "uci/type/ActivityPlanCommandID_ChoiceType.h"
#include "uci/type/ActivityPlanCommandID_Type.h"
#include "uci/type/ActivityPlanCommandMDT.h"
#include "uci/type/ActivityPlanCommandMT.h"
#include "uci/type/ActivityPlanCommandStatusMDT.h"
#include "uci/type/ActivityPlanCommandStatusMT.h"
#include "uci/type/ActivityPlanConstraintType.h"
#include "uci/type/ActivityPlanExecutionStateType.h"
#include "uci/type/ActivityPlanExecutionStatusMDT.h"
#include "uci/type/ActivityPlanExecutionStatusMT.h"
#include "uci/type/ActivityPlanID_Type.h"
#include "uci/type/ActivityPlanInputsType.h"
#include "uci/type/ActivityPlanInvalidType.h"
#include "uci/type/ActivityPlanMDT.h"
#include "uci/type/ActivityPlanMT.h"
#include "uci/type/ActivityPlanPartsCommandType.h"
#include "uci/type/ActivityPlanPartsType.h"
#include "uci/type/ActivityPlanProcessDescriptionType.h"
#include "uci/type/ActivityPlanProcessType.h"
#include "uci/type/ActivityPlanReferenceType.h"
#include "uci/type/ActivityPlanStatusMDT.h"
#include "uci/type/ActivityPlanStatusMT.h"
#include "uci/type/ActivityPlanStatusType.h"
#include "uci/type/ActivityPlanType.h"
#include "uci/type/ActivityPlanValidationCommandMDT.h"
#include "uci/type/ActivityPlanValidationCommandMT.h"
#include "uci/type/ActivityPlanValidationCommandStatusMDT.h"
#include "uci/type/ActivityPlanValidationCommandStatusMT.h"
#include "uci/type/ActivityPlanValidationID_Type.h"
#include "uci/type/ActivityPlanValidationInputsType.h"
#include "uci/type/ActivityPlanValidationMDT.h"
#include "uci/type/ActivityPlanValidationMT.h"
#include "uci/type/ActivityPlansID_ChoiceType.h"
#include "uci/type/ActivitySourceType.h"
#include "uci/type/ActivityTriggerType.h"
#include "uci/type/AirDataType.h"
#include "uci/type/AirSampleActivityMDT.h"
#include "uci/type/AirSampleActivityMT.h"
#include "uci/type/AirSampleActivityType.h"
#include "uci/type/AirSampleCapabilityCommandType.h"
#include "uci/type/AirSampleCapabilityMDT.h"
#include "uci/type/AirSampleCapabilityMT.h"
#include "uci/type/AirSampleCapabilityStatusMDT.h"
#include "uci/type/AirSampleCapabilityStatusMT.h"
#include "uci/type/AirSampleCapabilityType.h"
#include "uci/type/AirSampleCommandMDT.h"
#include "uci/type/AirSampleCommandMT.h"
#include "uci/type/AirSampleCommandResponseType.h"
#include "uci/type/AirSampleCommandStatusMDT.h"
#include "uci/type/AirSampleCommandStatusMT.h"
#include "uci/type/AirSampleCommandType.h"
#include "uci/type/AirSampleOptionsType.h"
#include "uci/type/AirSampleSettingsCommandMDT.h"
#include "uci/type/AirSampleSettingsCommandMT.h"
#include "uci/type/AirSampleSettingsCommandStatusMDT.h"
#include "uci/type/AirSampleSettingsCommandStatusMT.h"
#include "uci/type/AirSampleTaskBaseType.h"
#include "uci/type/AirSampleTaskType.h"
#include "uci/type/AirTargetVolumeCommandType.h"
#include "uci/type/AirTargetVolumeType.h"
#include "uci/type/AirVolumeCueType.h"
#include "uci/type/AirVolumeSensorReferencedType.h"
#include "uci/type/AirfieldContaminationType.h"
#include "uci/type/AirfieldGeneralStoreType.h"
#include "uci/type/AirfieldID_Type.h"
#include "uci/type/AirfieldInformationType.h"
#include "uci/type/AirfieldReferenceID_ChoiceType.h"
#include "uci/type/AirfieldReportID_Type.h"
#include "uci/type/AirfieldReportMDT.h"
#include "uci/type/AirfieldReportMT.h"
#include "uci/type/AirfieldRunwayType.h"
#include "uci/type/AirfieldStoreType.h"
#include "uci/type/AirfieldStoresPET.h"
#include "uci/type/AllowableSensorsType.h"
#include "uci/type/AlongOrbitalArcDeltaType.h"
#include "uci/type/AltitudeConstraintsType.h"
#include "uci/type/AltitudeOffsetReferenceType.h"
#include "uci/type/AltitudeRadialPairType.h"
#include "uci/type/AltitudeRangePairType.h"
#include "uci/type/AltitudeRangeType.h"
#include "uci/type/AltitudeReferenceType.h"
#include "uci/type/AltitudeReferenceUncertaintyType.h"
#include "uci/type/AmplifyingInformationType.h"
#include "uci/type/AnalysisRouteID_Type.h"
#include "uci/type/AnalysisRouteInformationType.h"
#include "uci/type/AnalysisRouteMDT.h"
#include "uci/type/AnalysisRouteMT.h"
#include "uci/type/AnalysisRoutePathType.h"
#include "uci/type/AnalysisRouteRequestMDT.h"
#include "uci/type/AnalysisRouteRequestMT.h"
#include "uci/type/AnalysisRouteRequestStatusMDT.h"
#include "uci/type/AnalysisRouteRequestStatusMT.h"
#include "uci/type/AnalysisRouteSegmentType.h"
#include "uci/type/AnalyticConstraintsType.h"
#include "uci/type/AngleHalfPairType.h"
#include "uci/type/AnglePairType.h"
#include "uci/type/AngleQuarterPairType.h"
#include "uci/type/AngleRateRangeType.h"
#include "uci/type/AntennaAllocationAndBeamConfigurationsType.h"
#include "uci/type/AntennaAndResourceInstanceType.h"
#include "uci/type/AntennaID_Type.h"
#include "uci/type/AntennaPerformanceProfileType.h"
#include "uci/type/AntennaResourceAndBeamConfigurationsType.h"
#include "uci/type/AntennaResourceChoiceType.h"
#include "uci/type/AntennaResourceID_Type.h"
#include "uci/type/AntennaResourceInstanceStatusType.h"
#include "uci/type/AntennaStatusType.h"
#include "uci/type/AntennaType.h"
#include "uci/type/AperturePointingOptionsType.h"
#include "uci/type/ApplicabilityType.h"
#include "uci/type/ApplicableVolumeType.h"
#include "uci/type/ApplicableZoneType.h"
#include "uci/type/AppliesToType.h"
#include "uci/type/ApproachAngleType.h"
#include "uci/type/ApproachConditionsType.h"
#include "uci/type/ApprovalAuthorityID_Type.h"
#include "uci/type/ApprovalAuthorityMDT.h"
#include "uci/type/ApprovalAuthorityMT.h"
#include "uci/type/ApprovalAuthorityRequestMDT.h"
#include "uci/type/ApprovalAuthorityRequestMT.h"
#include "uci/type/ApprovalAuthorityRequestStatusMDT.h"
#include "uci/type/ApprovalAuthorityRequestStatusMT.h"
#include "uci/type/ApprovalManagementCommandMDT.h"
#include "uci/type/ApprovalManagementCommandMT.h"
#include "uci/type/ApprovalManagementCommandStatusMDT.h"
#include "uci/type/ApprovalManagementCommandStatusMT.h"
#include "uci/type/ApprovalPolicyBaseType.h"
#include "uci/type/ApprovalPolicyID_Type.h"
#include "uci/type/ApprovalPolicyMDT.h"
#include "uci/type/ApprovalPolicyMT.h"
#include "uci/type/ApprovalRequestItemReferenceType.h"
#include "uci/type/ApprovalRequestItemType.h"
#include "uci/type/ApprovalRequestMDT.h"
#include "uci/type/ApprovalRequestMT.h"
#include "uci/type/ApprovalRequestPolicyReferenceType.h"
#include "uci/type/ApprovalRequestStatusMDT.h"
#include "uci/type/ApprovalRequestStatusMT.h"
#include "uci/type/ApproverRoleType.h"
#include "uci/type/ArcVolumeType.h"
#include "uci/type/ArchiveRequestType.h"
#include "uci/type/AreaChoiceType.h"
#include "uci/type/AreaConstraintsType.h"
#include "uci/type/ArrivalDataType.h"
#include "uci/type/ArrivalDataUncertaintyType.h"
#include "uci/type/ArrivalDataVarianceType.h"
#include "uci/type/AssessmentID_Type.h"
#include "uci/type/AssessmentMDT.h"
#include "uci/type/AssessmentMT.h"
#include "uci/type/AssessmentRequestMDT.h"
#include "uci/type/AssessmentRequestMT.h"
#include "uci/type/AssessmentRequestStatusMDT.h"
#include "uci/type/AssessmentRequestStatusMT.h"
#include "uci/type/AssessmentRequestType.h"
#include "uci/type/AssessmentStatusType.h"
#include "uci/type/AssessmentType.h"
#include "uci/type/AssetFilterType.h"
#include "uci/type/AssetType.h"
#include "uci/type/AssociatedAccessAssessmentInfoType.h"
#include "uci/type/AssociatedDropRestrictMessageType.h"
#include "uci/type/AssociatedMessageSourceType.h"
#include "uci/type/AssociatedMessageType.h"
#include "uci/type/AssociatedRequirementsType.h"
#include "uci/type/AtmosphericDragModelType.h"
#include "uci/type/AtmosphericPropagationLossType.h"
#include "uci/type/AtomicEnergyMarkingsChoiceType.h"
#include "uci/type/AtomicEnergyMarkingsEnum.h"
#include "uci/type/AtomicEnergySigmaMarkingsEnum.h"
#include "uci/type/AtomicValueType.h"
#include "uci/type/AugmentationProcessingParametersType.h"
#include "uci/type/AuralAlertRepetitionType.h"
#include "uci/type/AuralAlertType.h"
#include "uci/type/AuthorizationID_Type.h"
#include "uci/type/AuthorizationMDT.h"
#include "uci/type/AuthorizationMT.h"
#include "uci/type/AutonomousActionStatusChoiceType.h"
#include "uci/type/AutonomousPlanCommandType.h"
#include "uci/type/AutonomousPlanningActionID_Type.h"
#include "uci/type/AutonomousPlanningActionStatusType.h"
#include "uci/type/AutonomousPlanningConstrainingPlansType.h"
#include "uci/type/AutonomousPlanningOtherSystemConstrainingPlansType.h"
#include "uci/type/AvailabilityInfoType.h"
#include "uci/type/AvailableConnectionType.h"
#include "uci/type/AvailableFuelType.h"
#include "uci/type/AvailableWeaponsType.h"
#include "uci/type/AzElReferenceType.h"
#include "uci/type/AzElRequiredReferenceType.h"
#include "uci/type/Az_El_BeamPointingType.h"
#include "uci/type/Az_El_BeamPointingWithRangeType.h"
#include "uci/type/AzimuthElevationRangePointType.h"
#include "uci/type/BCRS_KinematicsType.h"
#include "uci/type/BCRS_PositionType.h"
#include "uci/type/BDI_CollectionType.h"
#include "uci/type/BIT_ID_Type.h"
#include "uci/type/BaseEOB_RecordType.h"
#include "uci/type/BasicEncyclopediaNumberType.h"
#include "uci/type/BasicManeuverConstraintsType.h"
#include "uci/type/BeamBandWidthAndSampleRateType.h"
#include "uci/type/BeamID_Type.h"
#include "uci/type/BeamPointingReferenceType.h"
#include "uci/type/BeamShapingType.h"
#include "uci/type/BeamWeightingType.h"
#include "uci/type/BeamWidthType.h"
#include "uci/type/BehaviorType.h"
#include "uci/type/BlankingLimitType.h"
#include "uci/type/BlankingSourceType.h"
#include "uci/type/BlueVehicleType.h"
#include "uci/type/BodyFaceType.h"
#include "uci/type/BoresightVelocityType.h"
#include "uci/type/BoundaryType.h"
#include "uci/type/ByRequirementPolicyType.h"
#include "uci/type/ByResultPolicyType.h"
#include "uci/type/ByTriggerPolicyType.h"
#include "uci/type/CF_CourseToFixType.h"
#include "uci/type/COE_EquatorialOrientationType.h"
#include "uci/type/COE_NonEquatorialOrientationType.h"
#include "uci/type/COE_OrbitBaseType.h"
#include "uci/type/COE_OrbitType.h"
#include "uci/type/COE_OrientationType.h"
#include "uci/type/COE_PositionType.h"
#include "uci/type/CalibrationID_Type.h"
#include "uci/type/CallSignType.h"
#include "uci/type/CannotComplyType.h"
#include "uci/type/CapabilityAssessmentActionType.h"
#include "uci/type/CapabilityAssessmentActivityDetailsType.h"
#include "uci/type/CapabilityAssessmentActivityType.h"
#include "uci/type/CapabilityAssessmentDataType.h"
#include "uci/type/CapabilityAssessmentPointType.h"
#include "uci/type/CapabilityBaseType.h"
#include "uci/type/CapabilityCommandBaseType.h"
#include "uci/type/CapabilityCommandFrequencyType.h"
#include "uci/type/CapabilityCommandRankingType.h"
#include "uci/type/CapabilityCommandStatusBaseType.h"
#include "uci/type/CapabilityCommandTemporalConstraintsType.h"
#include "uci/type/CapabilityConfigurationID_Type.h"
#include "uci/type/CapabilityConfigurationType.h"
#include "uci/type/CapabilityConsentRequestStatusBaseType.h"
#include "uci/type/CapabilityCoverageAreaDataType.h"
#include "uci/type/CapabilityCoverageAreaID_Type.h"
#include "uci/type/CapabilityCoverageAreaMDT.h"
#include "uci/type/CapabilityCoverageAreaMT.h"
#include "uci/type/CapabilityCoverageAreaRequestDataType.h"
#include "uci/type/CapabilityCoverageAreaRequestMDT.h"
#include "uci/type/CapabilityCoverageAreaRequestMT.h"
#include "uci/type/CapabilityCoverageAreaRequestStatusMDT.h"
#include "uci/type/CapabilityCoverageAreaRequestStatusMT.h"
#include "uci/type/CapabilityCrossReferenceType.h"
#include "uci/type/CapabilityDeclarationBaseType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/CapabilityManagerType.h"
#include "uci/type/CapabilityPrecedenceType.h"
#include "uci/type/CapabilityRF_ProfileStatusType.h"
#include "uci/type/CapabilitySettingsCommandBaseType.h"
#include "uci/type/CapabilitySettingsCommandStatusBaseType.h"
#include "uci/type/CapabilitySpecificationType.h"
#include "uci/type/CapabilityStateType.h"
#include "uci/type/CapabilityStatusBaseType.h"
#include "uci/type/CapabilityStatusType.h"
#include "uci/type/CapabilityTaxonomyType.h"
#include "uci/type/CapabilityTaxonomyUniversalBaseType.h"
#include "uci/type/CapabilityTaxonomyUniversalType.h"
#include "uci/type/CapabilityUtilizationAssessmentType.h"
#include "uci/type/CapabilityUtilizationRequestType.h"
#include "uci/type/CargoDeliveryCapabilityMDT.h"
#include "uci/type/CargoDeliveryCapabilityMT.h"
#include "uci/type/CargoDeliveryCapabilityStatusMDT.h"
#include "uci/type/CargoDeliveryCapabilityStatusMT.h"
#include "uci/type/CargoDeliveryCapabilityType.h"
#include "uci/type/CargoDeliverySpecificDataType.h"
#include "uci/type/CargoDeliveryTaskType.h"
#include "uci/type/CargoID_Type.h"
#include "uci/type/CargoLocationType.h"
#include "uci/type/CargoSizeType.h"
#include "uci/type/CargoStatusMDT.h"
#include "uci/type/CargoStatusMT.h"
#include "uci/type/CargoTransitionType.h"
#include "uci/type/CargoType.h"
#include "uci/type/CelestialBodyType.h"
#include "uci/type/CenterOfGravityAeroType.h"
#include "uci/type/CenterPointImageRegionOfInterestType.h"
#include "uci/type/ChannelDescriptionType.h"
#include "uci/type/CharacterizationChoiceType.h"
#include "uci/type/CharacterizationObjectiveType.h"
#include "uci/type/CharacterizationOptionsType.h"
#include "uci/type/CircleType.h"
#include "uci/type/CivilPathTerminatorType.h"
#include "uci/type/ClassificationConstrainedSubPlanType.h"
#include "uci/type/ClassificationEnum.h"
#include "uci/type/ClassificationReportType.h"
#include "uci/type/ClassificationRequirementsType.h"
#include "uci/type/ClimbType.h"
#include "uci/type/CloudsType.h"
#include "uci/type/CollectionConstraintsType.h"
#include "uci/type/CollectionDeckTraceabilityType.h"
#include "uci/type/CollectionFrequencyType.h"
#include "uci/type/CollectionTaskMetricsType.h"
#include "uci/type/ColorDepthSettingsType.h"
#include "uci/type/DeclassExceptionEnum.h"
#include "uci/type/DisseminationControlsEnum.h"
#include "uci/type/FGI_SourceOpenChoiceType.h"
#include "uci/type/FGI_SourceOpenEnum.h"
#include "uci/type/NonIC_MarkingsChoiceType.h"
#include "uci/type/NonIC_MarkingsEnum.h"
#include "uci/type/NonUS_ControlsEnum.h"
#include "uci/type/OwnerProducerChoiceType.h"
#include "uci/type/OwnerProducerEnum.h"
#include "uci/type/ReleasableToChoiceType.h"
#include "uci/type/ReleasableToEnum.h"
#include "uci/type/SCI_ControlsChoiceType.h"
#include "uci/type/SCI_ControlsEnum.h"
#include "uci/type/SecurityInformationType.h"

/**  */
namespace extjson_uci {

/** The namespace in which all base data types are declared */
namespace base {

bool extjson_uci::base::ExternalizerRead1::read(const boost::property_tree::ptree& propTree, uci::base::Accessor& accessor, std::string& nodeName, std::string& nsPrefix) {
  switch (accessor.getAccessorType()) {
    case uci::base::accessorType::booleanAccessor:
      return extjson_uci::base::BooleanAccessor::deserialize(propTree, dynamic_cast<uci::base::BooleanAccessor&>(accessor), nodeName, nsPrefix, true);
    case uci::base::accessorType::longAccessor:
      return extjson_uci::base::LongAccessor::deserialize(propTree, dynamic_cast<uci::base::LongAccessor&>(accessor), nodeName, nsPrefix, true);
    case uci::base::accessorType::intAccessor:
      return extjson_uci::base::IntAccessor::deserialize(propTree, dynamic_cast<uci::base::IntAccessor&>(accessor), nodeName, nsPrefix, true);
    case uci::base::accessorType::shortAccessor:
      return extjson_uci::base::ShortAccessor::deserialize(propTree, dynamic_cast<uci::base::ShortAccessor&>(accessor), nodeName, nsPrefix, true);
    case uci::base::accessorType::byteAccessor:
      return extjson_uci::base::ByteAccessor::deserialize(propTree, dynamic_cast<uci::base::ByteAccessor&>(accessor), nodeName, nsPrefix, true);
    case uci::base::accessorType::unsignedIntAccessor:
      return extjson_uci::base::UnsignedIntAccessor::deserialize(propTree, dynamic_cast<uci::base::UnsignedIntAccessor&>(accessor), nodeName, nsPrefix, true);
    case uci::base::accessorType::unsignedShortAccessor:
      return extjson_uci::base::UnsignedShortAccessor::deserialize(propTree, dynamic_cast<uci::base::UnsignedShortAccessor&>(accessor), nodeName, nsPrefix, true);
    case uci::base::accessorType::unsignedByteAccessor:
      return extjson_uci::base::UnsignedByteAccessor::deserialize(propTree, dynamic_cast<uci::base::UnsignedByteAccessor&>(accessor), nodeName, nsPrefix, true);
    case uci::base::accessorType::doubleAccessor:
      return extjson_uci::base::DoubleAccessor::deserialize(propTree, dynamic_cast<uci::base::DoubleAccessor&>(accessor), nodeName, nsPrefix, true);
    case uci::base::accessorType::floatAccessor:
      return extjson_uci::base::FloatAccessor::deserialize(propTree, dynamic_cast<uci::base::FloatAccessor&>(accessor), nodeName, nsPrefix, true);
    case uci::base::accessorType::durationAccessor:
      return extjson_uci::base::DurationAccessor::deserialize(propTree, dynamic_cast<uci::base::DurationAccessor&>(accessor), nodeName, nsPrefix, true);
    case uci::base::accessorType::timeAccessor:
      return extjson_uci::base::TimeAccessor::deserialize(propTree, dynamic_cast<uci::base::TimeAccessor&>(accessor), nodeName, nsPrefix, true);
    case uci::base::accessorType::dateTimeAccessor:
      return extjson_uci::base::DateTimeAccessor::deserialize(propTree, dynamic_cast<uci::base::DateTimeAccessor&>(accessor), nodeName, nsPrefix, true);
    case xs::accessorType::string:
      return extjson_uci::base::StringAccessor::deserialize(propTree, dynamic_cast<uci::base::StringAccessor&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::atomicEnergyMarkingsChoiceType:
      return extjson_uci::type::AtomicEnergyMarkingsChoiceType::deserialize(propTree, dynamic_cast<uci::type::AtomicEnergyMarkingsChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::fGI_SourceOpenChoiceType:
      return extjson_uci::type::FGI_SourceOpenChoiceType::deserialize(propTree, dynamic_cast<uci::type::FGI_SourceOpenChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::nonIC_MarkingsChoiceType:
      return extjson_uci::type::NonIC_MarkingsChoiceType::deserialize(propTree, dynamic_cast<uci::type::NonIC_MarkingsChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::ownerProducerChoiceType:
      return extjson_uci::type::OwnerProducerChoiceType::deserialize(propTree, dynamic_cast<uci::type::OwnerProducerChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::releasableToChoiceType:
      return extjson_uci::type::ReleasableToChoiceType::deserialize(propTree, dynamic_cast<uci::type::ReleasableToChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sCI_ControlsChoiceType:
      return extjson_uci::type::SCI_ControlsChoiceType::deserialize(propTree, dynamic_cast<uci::type::SCI_ControlsChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityInformationType:
      return extjson_uci::type::SecurityInformationType::deserialize(propTree, dynamic_cast<uci::type::SecurityInformationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::atomicEnergyMarkingsEnum:
      return extjson_uci::type::AtomicEnergyMarkingsEnum::deserialize(propTree, dynamic_cast<uci::type::AtomicEnergyMarkingsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::atomicEnergySigmaMarkingsEnum:
      return extjson_uci::type::AtomicEnergySigmaMarkingsEnum::deserialize(propTree, dynamic_cast<uci::type::AtomicEnergySigmaMarkingsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::classificationEnum:
      return extjson_uci::type::ClassificationEnum::deserialize(propTree, dynamic_cast<uci::type::ClassificationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::declassExceptionEnum:
      return extjson_uci::type::DeclassExceptionEnum::deserialize(propTree, dynamic_cast<uci::type::DeclassExceptionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::disseminationControlsEnum:
      return extjson_uci::type::DisseminationControlsEnum::deserialize(propTree, dynamic_cast<uci::type::DisseminationControlsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::fGI_SourceOpenEnum:
      return extjson_uci::type::FGI_SourceOpenEnum::deserialize(propTree, dynamic_cast<uci::type::FGI_SourceOpenEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::nonIC_MarkingsEnum:
      return extjson_uci::type::NonIC_MarkingsEnum::deserialize(propTree, dynamic_cast<uci::type::NonIC_MarkingsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::nonUS_ControlsEnum:
      return extjson_uci::type::NonUS_ControlsEnum::deserialize(propTree, dynamic_cast<uci::type::NonUS_ControlsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::ownerProducerEnum:
      return extjson_uci::type::OwnerProducerEnum::deserialize(propTree, dynamic_cast<uci::type::OwnerProducerEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::releasableToEnum:
      return extjson_uci::type::ReleasableToEnum::deserialize(propTree, dynamic_cast<uci::type::ReleasableToEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sCI_ControlsEnum:
      return extjson_uci::type::SCI_ControlsEnum::deserialize(propTree, dynamic_cast<uci::type::SCI_ControlsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aboutType:
      return extjson_uci::type::AboutType::deserialize(propTree, dynamic_cast<uci::type::AboutType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::acceleration3D_Type:
      return extjson_uci::type::Acceleration3D_Type::deserialize(propTree, dynamic_cast<uci::type::Acceleration3D_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accelerationAccelerationCovarianceType:
      return extjson_uci::type::AccelerationAccelerationCovarianceType::deserialize(propTree, dynamic_cast<uci::type::AccelerationAccelerationCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::acceptedProductInformationType:
      return extjson_uci::type::AcceptedProductInformationType::deserialize(propTree, dynamic_cast<uci::type::AcceptedProductInformationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accessAssessmentFilterType:
      return extjson_uci::type::AccessAssessmentFilterType::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentFilterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accessAssessmentID_Type:
      return extjson_uci::type::AccessAssessmentID_Type::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accessAssessmentMDT:
      return extjson_uci::type::AccessAssessmentMDT::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accessAssessmentMT:
      return extjson_uci::type::AccessAssessmentMT::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accessAssessmentRequestMDT:
      return extjson_uci::type::AccessAssessmentRequestMDT::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accessAssessmentRequestMT:
      return extjson_uci::type::AccessAssessmentRequestMT::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accessAssessmentRequestStatusMDT:
      return extjson_uci::type::AccessAssessmentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accessAssessmentRequestStatusMT:
      return extjson_uci::type::AccessAssessmentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accessAssessmentResultType:
      return extjson_uci::type::AccessAssessmentResultType::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentResultType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accessAssessmentType:
      return extjson_uci::type::AccessAssessmentType::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accessCapabilityType:
      return extjson_uci::type::AccessCapabilityType::deserialize(propTree, dynamic_cast<uci::type::AccessCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accessEventFilterType:
      return extjson_uci::type::AccessEventFilterType::deserialize(propTree, dynamic_cast<uci::type::AccessEventFilterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accessEventType:
      return extjson_uci::type::AccessEventType::deserialize(propTree, dynamic_cast<uci::type::AccessEventType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::accessObjectType:
      return extjson_uci::type::AccessObjectType::deserialize(propTree, dynamic_cast<uci::type::AccessObjectType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aCFTB_RevA_Type:
      return extjson_uci::type::ACFTB_RevA_Type::deserialize(propTree, dynamic_cast<uci::type::ACFTB_RevA_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aCFTB_Type:
      return extjson_uci::type::ACFTB_Type::deserialize(propTree, dynamic_cast<uci::type::ACFTB_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::achievabilityAssessmentPET:
      return extjson_uci::type::AchievabilityAssessmentPET::deserialize(propTree, dynamic_cast<uci::type::AchievabilityAssessmentPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::achievabilityAssessmentRequestPET:
      return extjson_uci::type::AchievabilityAssessmentRequestPET::deserialize(propTree, dynamic_cast<uci::type::AchievabilityAssessmentRequestPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aCO_FileTraceabilityType:
      return extjson_uci::type::ACO_FileTraceabilityType::deserialize(propTree, dynamic_cast<uci::type::ACO_FileTraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aCO_TraceabilityType:
      return extjson_uci::type::ACO_TraceabilityType::deserialize(propTree, dynamic_cast<uci::type::ACO_TraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aCTDF_CollectionPlanType:
      return extjson_uci::type::ACTDF_CollectionPlanType::deserialize(propTree, dynamic_cast<uci::type::ACTDF_CollectionPlanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aCTDF_FileTraceabilityType:
      return extjson_uci::type::ACTDF_FileTraceabilityType::deserialize(propTree, dynamic_cast<uci::type::ACTDF_FileTraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aCTDF_TaskID_Type:
      return extjson_uci::type::ACTDF_TaskID_Type::deserialize(propTree, dynamic_cast<uci::type::ACTDF_TaskID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aCTDF_TraceabilityType:
      return extjson_uci::type::ACTDF_TraceabilityType::deserialize(propTree, dynamic_cast<uci::type::ACTDF_TraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionActivityMDT:
      return extjson_uci::type::ActionActivityMDT::deserialize(propTree, dynamic_cast<uci::type::ActionActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionActivityMT:
      return extjson_uci::type::ActionActivityMT::deserialize(propTree, dynamic_cast<uci::type::ActionActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionActivityType:
      return extjson_uci::type::ActionActivityType::deserialize(propTree, dynamic_cast<uci::type::ActionActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionAllocationInvalidType:
      return extjson_uci::type::ActionAllocationInvalidType::deserialize(propTree, dynamic_cast<uci::type::ActionAllocationInvalidType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionAllocationType:
      return extjson_uci::type::ActionAllocationType::deserialize(propTree, dynamic_cast<uci::type::ActionAllocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCancelCommandMDT:
      return extjson_uci::type::ActionCancelCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ActionCancelCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCancelCommandMT:
      return extjson_uci::type::ActionCancelCommandMT::deserialize(propTree, dynamic_cast<uci::type::ActionCancelCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCancelCommandStatusMDT:
      return extjson_uci::type::ActionCancelCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionCancelCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCancelCommandStatusMT:
      return extjson_uci::type::ActionCancelCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionCancelCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCapabilityCommandType:
      return extjson_uci::type::ActionCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::ActionCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCapabilityMDT:
      return extjson_uci::type::ActionCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::ActionCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCapabilityMT:
      return extjson_uci::type::ActionCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::ActionCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCapabilityOptionsType:
      return extjson_uci::type::ActionCapabilityOptionsType::deserialize(propTree, dynamic_cast<uci::type::ActionCapabilityOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCapabilityStatusMDT:
      return extjson_uci::type::ActionCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCapabilityStatusMT:
      return extjson_uci::type::ActionCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCapabilityType:
      return extjson_uci::type::ActionCapabilityType::deserialize(propTree, dynamic_cast<uci::type::ActionCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCommandMDT:
      return extjson_uci::type::ActionCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ActionCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCommandMT:
      return extjson_uci::type::ActionCommandMT::deserialize(propTree, dynamic_cast<uci::type::ActionCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCommandStatusMDT:
      return extjson_uci::type::ActionCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCommandStatusMT:
      return extjson_uci::type::ActionCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionCommandType:
      return extjson_uci::type::ActionCommandType::deserialize(propTree, dynamic_cast<uci::type::ActionCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionExecutionApprovalStatusMDT:
      return extjson_uci::type::ActionExecutionApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionExecutionApprovalStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionExecutionApprovalStatusMT:
      return extjson_uci::type::ActionExecutionApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionExecutionApprovalStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionID_Type:
      return extjson_uci::type::ActionID_Type::deserialize(propTree, dynamic_cast<uci::type::ActionID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionMDT:
      return extjson_uci::type::ActionMDT::deserialize(propTree, dynamic_cast<uci::type::ActionMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionMT:
      return extjson_uci::type::ActionMT::deserialize(propTree, dynamic_cast<uci::type::ActionMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanActivationType:
      return extjson_uci::type::ActionPlanActivationType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanApprovalStatusMDT:
      return extjson_uci::type::ActionPlanApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanApprovalStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanApprovalStatusMT:
      return extjson_uci::type::ActionPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanCommandID_ChoiceType:
      return extjson_uci::type::ActionPlanCommandID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanCommandID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanCommandID_Type:
      return extjson_uci::type::ActionPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::ActionPlanCommandID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanCommandMDT:
      return extjson_uci::type::ActionPlanCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanCommandMT:
      return extjson_uci::type::ActionPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanCommandStatusMDT:
      return extjson_uci::type::ActionPlanCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanCommandStatusMT:
      return extjson_uci::type::ActionPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanConstraintType:
      return extjson_uci::type::ActionPlanConstraintType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanExecutionStateType:
      return extjson_uci::type::ActionPlanExecutionStateType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanExecutionStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanExecutionStatusMDT:
      return extjson_uci::type::ActionPlanExecutionStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanExecutionStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanExecutionStatusMT:
      return extjson_uci::type::ActionPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanID_Type:
      return extjson_uci::type::ActionPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::ActionPlanID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanInputsType:
      return extjson_uci::type::ActionPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanInvalidType:
      return extjson_uci::type::ActionPlanInvalidType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanInvalidType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanMDT:
      return extjson_uci::type::ActionPlanMDT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanMT:
      return extjson_uci::type::ActionPlanMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanningResultType:
      return extjson_uci::type::ActionPlanningResultType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanningResultType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanningStatusMDT:
      return extjson_uci::type::ActionPlanningStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanningStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanningStatusMT:
      return extjson_uci::type::ActionPlanningStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanningStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanPartsType:
      return extjson_uci::type::ActionPlanPartsType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanPartsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanProcessDescriptionType:
      return extjson_uci::type::ActionPlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanProcessType:
      return extjson_uci::type::ActionPlanProcessType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanProcessType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanStatusMDT:
      return extjson_uci::type::ActionPlanStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanStatusMT:
      return extjson_uci::type::ActionPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanType:
      return extjson_uci::type::ActionPlanType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanValidationCommandMDT:
      return extjson_uci::type::ActionPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanValidationCommandMT:
      return extjson_uci::type::ActionPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanValidationCommandStatusMDT:
      return extjson_uci::type::ActionPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanValidationCommandStatusMT:
      return extjson_uci::type::ActionPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanValidationID_Type:
      return extjson_uci::type::ActionPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::ActionPlanValidationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanValidationInputsType:
      return extjson_uci::type::ActionPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanValidationInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanValidationMDT:
      return extjson_uci::type::ActionPlanValidationMDT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanValidationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionPlanValidationMT:
      return extjson_uci::type::ActionPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanValidationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionStatusMDT:
      return extjson_uci::type::ActionStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::actionStatusMT:
      return extjson_uci::type::ActionStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activationOrbitSequenceType:
      return extjson_uci::type::ActivationOrbitSequenceType::deserialize(propTree, dynamic_cast<uci::type::ActivationOrbitSequenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activationPathSegmentType:
      return extjson_uci::type::ActivationPathSegmentType::deserialize(propTree, dynamic_cast<uci::type::ActivationPathSegmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityActorID_ChoiceType:
      return extjson_uci::type::ActivityActorID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::ActivityActorID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityAgainstType:
      return extjson_uci::type::ActivityAgainstType::deserialize(propTree, dynamic_cast<uci::type::ActivityAgainstType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityBaseType:
      return extjson_uci::type::ActivityBaseType::deserialize(propTree, dynamic_cast<uci::type::ActivityBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityByType:
      return extjson_uci::type::ActivityByType::deserialize(propTree, dynamic_cast<uci::type::ActivityByType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityChoiceType:
      return extjson_uci::type::ActivityChoiceType::deserialize(propTree, dynamic_cast<uci::type::ActivityChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityCommandBaseType:
      return extjson_uci::type::ActivityCommandBaseType::deserialize(propTree, dynamic_cast<uci::type::ActivityCommandBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityExecutionStatusType:
      return extjson_uci::type::ActivityExecutionStatusType::deserialize(propTree, dynamic_cast<uci::type::ActivityExecutionStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityID_Type:
      return extjson_uci::type::ActivityID_Type::deserialize(propTree, dynamic_cast<uci::type::ActivityID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityMetricsID_Type:
      return extjson_uci::type::ActivityMetricsID_Type::deserialize(propTree, dynamic_cast<uci::type::ActivityMetricsID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityMetricsMDT:
      return extjson_uci::type::ActivityMetricsMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityMetricsMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityMetricsMT:
      return extjson_uci::type::ActivityMetricsMT::deserialize(propTree, dynamic_cast<uci::type::ActivityMetricsMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityMetricsRequestMDT:
      return extjson_uci::type::ActivityMetricsRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityMetricsRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityMetricsRequestMT:
      return extjson_uci::type::ActivityMetricsRequestMT::deserialize(propTree, dynamic_cast<uci::type::ActivityMetricsRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityMetricsRequestStatusMDT:
      return extjson_uci::type::ActivityMetricsRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityMetricsRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityMetricsRequestStatusMT:
      return extjson_uci::type::ActivityMetricsRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActivityMetricsRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityMetricsType:
      return extjson_uci::type::ActivityMetricsType::deserialize(propTree, dynamic_cast<uci::type::ActivityMetricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanActivationType:
      return extjson_uci::type::ActivityPlanActivationType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanApprovalStatusMDT:
      return extjson_uci::type::ActivityPlanApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanApprovalStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanApprovalStatusMT:
      return extjson_uci::type::ActivityPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanCommandID_ChoiceType:
      return extjson_uci::type::ActivityPlanCommandID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanCommandID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanCommandID_Type:
      return extjson_uci::type::ActivityPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanCommandID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanCommandMDT:
      return extjson_uci::type::ActivityPlanCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanCommandMT:
      return extjson_uci::type::ActivityPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanCommandStatusMDT:
      return extjson_uci::type::ActivityPlanCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanCommandStatusMT:
      return extjson_uci::type::ActivityPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanConstraintType:
      return extjson_uci::type::ActivityPlanConstraintType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanExecutionStateType:
      return extjson_uci::type::ActivityPlanExecutionStateType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanExecutionStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanExecutionStatusMDT:
      return extjson_uci::type::ActivityPlanExecutionStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanExecutionStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanExecutionStatusMT:
      return extjson_uci::type::ActivityPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanID_Type:
      return extjson_uci::type::ActivityPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanInputsType:
      return extjson_uci::type::ActivityPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanInvalidType:
      return extjson_uci::type::ActivityPlanInvalidType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanInvalidType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanMDT:
      return extjson_uci::type::ActivityPlanMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanMT:
      return extjson_uci::type::ActivityPlanMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanPartsCommandType:
      return extjson_uci::type::ActivityPlanPartsCommandType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanPartsCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanPartsType:
      return extjson_uci::type::ActivityPlanPartsType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanPartsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanProcessDescriptionType:
      return extjson_uci::type::ActivityPlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanProcessType:
      return extjson_uci::type::ActivityPlanProcessType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanProcessType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanReferenceType:
      return extjson_uci::type::ActivityPlanReferenceType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlansID_ChoiceType:
      return extjson_uci::type::ActivityPlansID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlansID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanStatusMDT:
      return extjson_uci::type::ActivityPlanStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanStatusMT:
      return extjson_uci::type::ActivityPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanStatusType:
      return extjson_uci::type::ActivityPlanStatusType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanType:
      return extjson_uci::type::ActivityPlanType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanValidationCommandMDT:
      return extjson_uci::type::ActivityPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanValidationCommandMT:
      return extjson_uci::type::ActivityPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanValidationCommandStatusMDT:
      return extjson_uci::type::ActivityPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanValidationCommandStatusMT:
      return extjson_uci::type::ActivityPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanValidationID_Type:
      return extjson_uci::type::ActivityPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanValidationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanValidationInputsType:
      return extjson_uci::type::ActivityPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanValidationInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanValidationMDT:
      return extjson_uci::type::ActivityPlanValidationMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanValidationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityPlanValidationMT:
      return extjson_uci::type::ActivityPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanValidationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activitySourceType:
      return extjson_uci::type::ActivitySourceType::deserialize(propTree, dynamic_cast<uci::type::ActivitySourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::activityTriggerType:
      return extjson_uci::type::ActivityTriggerType::deserialize(propTree, dynamic_cast<uci::type::ActivityTriggerType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aIMIDB_Type:
      return extjson_uci::type::AIMIDB_Type::deserialize(propTree, dynamic_cast<uci::type::AIMIDB_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airDataType:
      return extjson_uci::type::AirDataType::deserialize(propTree, dynamic_cast<uci::type::AirDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airfieldContaminationType:
      return extjson_uci::type::AirfieldContaminationType::deserialize(propTree, dynamic_cast<uci::type::AirfieldContaminationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airfieldGeneralStoreType:
      return extjson_uci::type::AirfieldGeneralStoreType::deserialize(propTree, dynamic_cast<uci::type::AirfieldGeneralStoreType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airfieldID_Type:
      return extjson_uci::type::AirfieldID_Type::deserialize(propTree, dynamic_cast<uci::type::AirfieldID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airfieldInformationType:
      return extjson_uci::type::AirfieldInformationType::deserialize(propTree, dynamic_cast<uci::type::AirfieldInformationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airfieldReferenceID_ChoiceType:
      return extjson_uci::type::AirfieldReferenceID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::AirfieldReferenceID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airfieldReportID_Type:
      return extjson_uci::type::AirfieldReportID_Type::deserialize(propTree, dynamic_cast<uci::type::AirfieldReportID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airfieldReportMDT:
      return extjson_uci::type::AirfieldReportMDT::deserialize(propTree, dynamic_cast<uci::type::AirfieldReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airfieldReportMT:
      return extjson_uci::type::AirfieldReportMT::deserialize(propTree, dynamic_cast<uci::type::AirfieldReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airfieldRunwayType:
      return extjson_uci::type::AirfieldRunwayType::deserialize(propTree, dynamic_cast<uci::type::AirfieldRunwayType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airfieldStoresPET:
      return extjson_uci::type::AirfieldStoresPET::deserialize(propTree, dynamic_cast<uci::type::AirfieldStoresPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airfieldStoreType:
      return extjson_uci::type::AirfieldStoreType::deserialize(propTree, dynamic_cast<uci::type::AirfieldStoreType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleActivityMDT:
      return extjson_uci::type::AirSampleActivityMDT::deserialize(propTree, dynamic_cast<uci::type::AirSampleActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleActivityMT:
      return extjson_uci::type::AirSampleActivityMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleActivityType:
      return extjson_uci::type::AirSampleActivityType::deserialize(propTree, dynamic_cast<uci::type::AirSampleActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleCapabilityCommandType:
      return extjson_uci::type::AirSampleCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::AirSampleCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleCapabilityMDT:
      return extjson_uci::type::AirSampleCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleCapabilityMT:
      return extjson_uci::type::AirSampleCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleCapabilityStatusMDT:
      return extjson_uci::type::AirSampleCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleCapabilityStatusMT:
      return extjson_uci::type::AirSampleCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleCapabilityType:
      return extjson_uci::type::AirSampleCapabilityType::deserialize(propTree, dynamic_cast<uci::type::AirSampleCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleCommandMDT:
      return extjson_uci::type::AirSampleCommandMDT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleCommandMT:
      return extjson_uci::type::AirSampleCommandMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleCommandResponseType:
      return extjson_uci::type::AirSampleCommandResponseType::deserialize(propTree, dynamic_cast<uci::type::AirSampleCommandResponseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleCommandStatusMDT:
      return extjson_uci::type::AirSampleCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleCommandStatusMT:
      return extjson_uci::type::AirSampleCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleCommandType:
      return extjson_uci::type::AirSampleCommandType::deserialize(propTree, dynamic_cast<uci::type::AirSampleCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleOptionsType:
      return extjson_uci::type::AirSampleOptionsType::deserialize(propTree, dynamic_cast<uci::type::AirSampleOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleSettingsCommandMDT:
      return extjson_uci::type::AirSampleSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::AirSampleSettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleSettingsCommandMT:
      return extjson_uci::type::AirSampleSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleSettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleSettingsCommandStatusMDT:
      return extjson_uci::type::AirSampleSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AirSampleSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleSettingsCommandStatusMT:
      return extjson_uci::type::AirSampleSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleTaskBaseType:
      return extjson_uci::type::AirSampleTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::AirSampleTaskBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airSampleTaskType:
      return extjson_uci::type::AirSampleTaskType::deserialize(propTree, dynamic_cast<uci::type::AirSampleTaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airTargetVolumeCommandType:
      return extjson_uci::type::AirTargetVolumeCommandType::deserialize(propTree, dynamic_cast<uci::type::AirTargetVolumeCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airTargetVolumeType:
      return extjson_uci::type::AirTargetVolumeType::deserialize(propTree, dynamic_cast<uci::type::AirTargetVolumeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airVolumeCueType:
      return extjson_uci::type::AirVolumeCueType::deserialize(propTree, dynamic_cast<uci::type::AirVolumeCueType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::airVolumeSensorReferencedType:
      return extjson_uci::type::AirVolumeSensorReferencedType::deserialize(propTree, dynamic_cast<uci::type::AirVolumeSensorReferencedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aIS_Type:
      return extjson_uci::type::AIS_Type::deserialize(propTree, dynamic_cast<uci::type::AIS_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::allowableSensorsType:
      return extjson_uci::type::AllowableSensorsType::deserialize(propTree, dynamic_cast<uci::type::AllowableSensorsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::alongOrbitalArcDeltaType:
      return extjson_uci::type::AlongOrbitalArcDeltaType::deserialize(propTree, dynamic_cast<uci::type::AlongOrbitalArcDeltaType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::altitudeConstraintsType:
      return extjson_uci::type::AltitudeConstraintsType::deserialize(propTree, dynamic_cast<uci::type::AltitudeConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::altitudeOffsetReferenceType:
      return extjson_uci::type::AltitudeOffsetReferenceType::deserialize(propTree, dynamic_cast<uci::type::AltitudeOffsetReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::altitudeRadialPairType:
      return extjson_uci::type::AltitudeRadialPairType::deserialize(propTree, dynamic_cast<uci::type::AltitudeRadialPairType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::altitudeRangePairType:
      return extjson_uci::type::AltitudeRangePairType::deserialize(propTree, dynamic_cast<uci::type::AltitudeRangePairType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::altitudeRangeType:
      return extjson_uci::type::AltitudeRangeType::deserialize(propTree, dynamic_cast<uci::type::AltitudeRangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::altitudeReferenceType:
      return extjson_uci::type::AltitudeReferenceType::deserialize(propTree, dynamic_cast<uci::type::AltitudeReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::altitudeReferenceUncertaintyType:
      return extjson_uci::type::AltitudeReferenceUncertaintyType::deserialize(propTree, dynamic_cast<uci::type::AltitudeReferenceUncertaintyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::amplifyingInformationType:
      return extjson_uci::type::AmplifyingInformationType::deserialize(propTree, dynamic_cast<uci::type::AmplifyingInformationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_ActivityCommandType:
      return extjson_uci::type::AMTI_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::AMTI_ActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_ActivityMDT:
      return extjson_uci::type::AMTI_ActivityMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_ActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_ActivityMT:
      return extjson_uci::type::AMTI_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_ActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_ActivityType:
      return extjson_uci::type::AMTI_ActivityType::deserialize(propTree, dynamic_cast<uci::type::AMTI_ActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_CapabilityCommandType:
      return extjson_uci::type::AMTI_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_CapabilityMDT:
      return extjson_uci::type::AMTI_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_CapabilityMT:
      return extjson_uci::type::AMTI_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_CapabilityOptionsType:
      return extjson_uci::type::AMTI_CapabilityOptionsType::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_CapabilityStatusMDT:
      return extjson_uci::type::AMTI_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_CapabilityStatusMT:
      return extjson_uci::type::AMTI_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_CapabilityType:
      return extjson_uci::type::AMTI_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_CollectionConstraintsType:
      return extjson_uci::type::AMTI_CollectionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::AMTI_CollectionConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_CommandMDT:
      return extjson_uci::type::AMTI_CommandMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_CommandMT:
      return extjson_uci::type::AMTI_CommandMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_CommandResponseType:
      return extjson_uci::type::AMTI_CommandResponseType::deserialize(propTree, dynamic_cast<uci::type::AMTI_CommandResponseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_CommandStatusMDT:
      return extjson_uci::type::AMTI_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_CommandStatusMT:
      return extjson_uci::type::AMTI_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_CommandType:
      return extjson_uci::type::AMTI_CommandType::deserialize(propTree, dynamic_cast<uci::type::AMTI_CommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_SettingsCommandMDT:
      return extjson_uci::type::AMTI_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_SettingsCommandMT:
      return extjson_uci::type::AMTI_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_SettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_SettingsCommandStatusMDT:
      return extjson_uci::type::AMTI_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_SettingsCommandStatusMT:
      return extjson_uci::type::AMTI_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_SpecificDataType:
      return extjson_uci::type::AMTI_SpecificDataType::deserialize(propTree, dynamic_cast<uci::type::AMTI_SpecificDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_TargetType:
      return extjson_uci::type::AMTI_TargetType::deserialize(propTree, dynamic_cast<uci::type::AMTI_TargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_TaskBaseType:
      return extjson_uci::type::AMTI_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::AMTI_TaskBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aMTI_TaskType:
      return extjson_uci::type::AMTI_TaskType::deserialize(propTree, dynamic_cast<uci::type::AMTI_TaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::analysisRouteID_Type:
      return extjson_uci::type::AnalysisRouteID_Type::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::analysisRouteInformationType:
      return extjson_uci::type::AnalysisRouteInformationType::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteInformationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::analysisRouteMDT:
      return extjson_uci::type::AnalysisRouteMDT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::analysisRouteMT:
      return extjson_uci::type::AnalysisRouteMT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::analysisRoutePathType:
      return extjson_uci::type::AnalysisRoutePathType::deserialize(propTree, dynamic_cast<uci::type::AnalysisRoutePathType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::analysisRouteRequestMDT:
      return extjson_uci::type::AnalysisRouteRequestMDT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::analysisRouteRequestMT:
      return extjson_uci::type::AnalysisRouteRequestMT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::analysisRouteRequestStatusMDT:
      return extjson_uci::type::AnalysisRouteRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::analysisRouteRequestStatusMT:
      return extjson_uci::type::AnalysisRouteRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::analysisRouteSegmentType:
      return extjson_uci::type::AnalysisRouteSegmentType::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteSegmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::analyticConstraintsType:
      return extjson_uci::type::AnalyticConstraintsType::deserialize(propTree, dynamic_cast<uci::type::AnalyticConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::angleHalfPairType:
      return extjson_uci::type::AngleHalfPairType::deserialize(propTree, dynamic_cast<uci::type::AngleHalfPairType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::anglePairType:
      return extjson_uci::type::AnglePairType::deserialize(propTree, dynamic_cast<uci::type::AnglePairType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::angleQuarterPairType:
      return extjson_uci::type::AngleQuarterPairType::deserialize(propTree, dynamic_cast<uci::type::AngleQuarterPairType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::angleRateRangeType:
      return extjson_uci::type::AngleRateRangeType::deserialize(propTree, dynamic_cast<uci::type::AngleRateRangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::antennaAllocationAndBeamConfigurationsType:
      return extjson_uci::type::AntennaAllocationAndBeamConfigurationsType::deserialize(propTree, dynamic_cast<uci::type::AntennaAllocationAndBeamConfigurationsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::antennaAndResourceInstanceType:
      return extjson_uci::type::AntennaAndResourceInstanceType::deserialize(propTree, dynamic_cast<uci::type::AntennaAndResourceInstanceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::antennaID_Type:
      return extjson_uci::type::AntennaID_Type::deserialize(propTree, dynamic_cast<uci::type::AntennaID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::antennaPerformanceProfileType:
      return extjson_uci::type::AntennaPerformanceProfileType::deserialize(propTree, dynamic_cast<uci::type::AntennaPerformanceProfileType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::antennaResourceAndBeamConfigurationsType:
      return extjson_uci::type::AntennaResourceAndBeamConfigurationsType::deserialize(propTree, dynamic_cast<uci::type::AntennaResourceAndBeamConfigurationsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::antennaResourceChoiceType:
      return extjson_uci::type::AntennaResourceChoiceType::deserialize(propTree, dynamic_cast<uci::type::AntennaResourceChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::antennaResourceID_Type:
      return extjson_uci::type::AntennaResourceID_Type::deserialize(propTree, dynamic_cast<uci::type::AntennaResourceID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::antennaResourceInstanceStatusType:
      return extjson_uci::type::AntennaResourceInstanceStatusType::deserialize(propTree, dynamic_cast<uci::type::AntennaResourceInstanceStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::antennaStatusType:
      return extjson_uci::type::AntennaStatusType::deserialize(propTree, dynamic_cast<uci::type::AntennaStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::antennaType:
      return extjson_uci::type::AntennaType::deserialize(propTree, dynamic_cast<uci::type::AntennaType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_ActivityCommandType:
      return extjson_uci::type::AO_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::AO_ActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_ActivityMDT:
      return extjson_uci::type::AO_ActivityMDT::deserialize(propTree, dynamic_cast<uci::type::AO_ActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_ActivityMT:
      return extjson_uci::type::AO_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::AO_ActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_ActivityType:
      return extjson_uci::type::AO_ActivityType::deserialize(propTree, dynamic_cast<uci::type::AO_ActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_CapabilityCommandType:
      return extjson_uci::type::AO_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_CapabilityMDT:
      return extjson_uci::type::AO_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_CapabilityMT:
      return extjson_uci::type::AO_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_CapabilityOptionsType:
      return extjson_uci::type::AO_CapabilityOptionsType::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_CapabilityStatusMDT:
      return extjson_uci::type::AO_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_CapabilityStatusMT:
      return extjson_uci::type::AO_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_CapabilityType:
      return extjson_uci::type::AO_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_CodeType:
      return extjson_uci::type::AO_CodeType::deserialize(propTree, dynamic_cast<uci::type::AO_CodeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_CommandMDT:
      return extjson_uci::type::AO_CommandMDT::deserialize(propTree, dynamic_cast<uci::type::AO_CommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_CommandMT:
      return extjson_uci::type::AO_CommandMT::deserialize(propTree, dynamic_cast<uci::type::AO_CommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_CommandResponseType:
      return extjson_uci::type::AO_CommandResponseType::deserialize(propTree, dynamic_cast<uci::type::AO_CommandResponseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_CommandStatusMDT:
      return extjson_uci::type::AO_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AO_CommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_CommandStatusMT:
      return extjson_uci::type::AO_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AO_CommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_CommandType:
      return extjson_uci::type::AO_CommandType::deserialize(propTree, dynamic_cast<uci::type::AO_CommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_ComponentSettingsType:
      return extjson_uci::type::AO_ComponentSettingsType::deserialize(propTree, dynamic_cast<uci::type::AO_ComponentSettingsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_ComponentType:
      return extjson_uci::type::AO_ComponentType::deserialize(propTree, dynamic_cast<uci::type::AO_ComponentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_ConsentRequestMDT:
      return extjson_uci::type::AO_ConsentRequestMDT::deserialize(propTree, dynamic_cast<uci::type::AO_ConsentRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_ConsentRequestMT:
      return extjson_uci::type::AO_ConsentRequestMT::deserialize(propTree, dynamic_cast<uci::type::AO_ConsentRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_ConsentRequestStatusMDT:
      return extjson_uci::type::AO_ConsentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AO_ConsentRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_ConsentRequestStatusMT:
      return extjson_uci::type::AO_ConsentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::AO_ConsentRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_ConsentRequestType:
      return extjson_uci::type::AO_ConsentRequestType::deserialize(propTree, dynamic_cast<uci::type::AO_ConsentRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_SettingsCommandMDT:
      return extjson_uci::type::AO_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::AO_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_SettingsCommandMT:
      return extjson_uci::type::AO_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::AO_SettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_SettingsCommandStatusMDT:
      return extjson_uci::type::AO_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AO_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_SettingsCommandStatusMT:
      return extjson_uci::type::AO_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AO_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_TaskBaseType:
      return extjson_uci::type::AO_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::AO_TaskBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aO_TaskType:
      return extjson_uci::type::AO_TaskType::deserialize(propTree, dynamic_cast<uci::type::AO_TaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aOCO_TraceabilityType:
      return extjson_uci::type::AOCO_TraceabilityType::deserialize(propTree, dynamic_cast<uci::type::AOCO_TraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aperturePointingOptionsType:
      return extjson_uci::type::AperturePointingOptionsType::deserialize(propTree, dynamic_cast<uci::type::AperturePointingOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::applicabilityType:
      return extjson_uci::type::ApplicabilityType::deserialize(propTree, dynamic_cast<uci::type::ApplicabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::applicableVolumeType:
      return extjson_uci::type::ApplicableVolumeType::deserialize(propTree, dynamic_cast<uci::type::ApplicableVolumeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::applicableZoneType:
      return extjson_uci::type::ApplicableZoneType::deserialize(propTree, dynamic_cast<uci::type::ApplicableZoneType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::appliesToType:
      return extjson_uci::type::AppliesToType::deserialize(propTree, dynamic_cast<uci::type::AppliesToType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approachAngleType:
      return extjson_uci::type::ApproachAngleType::deserialize(propTree, dynamic_cast<uci::type::ApproachAngleType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approachConditionsType:
      return extjson_uci::type::ApproachConditionsType::deserialize(propTree, dynamic_cast<uci::type::ApproachConditionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalAuthorityID_Type:
      return extjson_uci::type::ApprovalAuthorityID_Type::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalAuthorityMDT:
      return extjson_uci::type::ApprovalAuthorityMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalAuthorityMT:
      return extjson_uci::type::ApprovalAuthorityMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalAuthorityRequestMDT:
      return extjson_uci::type::ApprovalAuthorityRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalAuthorityRequestMT:
      return extjson_uci::type::ApprovalAuthorityRequestMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalAuthorityRequestStatusMDT:
      return extjson_uci::type::ApprovalAuthorityRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalAuthorityRequestStatusMT:
      return extjson_uci::type::ApprovalAuthorityRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalManagementCommandMDT:
      return extjson_uci::type::ApprovalManagementCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalManagementCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalManagementCommandMT:
      return extjson_uci::type::ApprovalManagementCommandMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalManagementCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalManagementCommandStatusMDT:
      return extjson_uci::type::ApprovalManagementCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalManagementCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalManagementCommandStatusMT:
      return extjson_uci::type::ApprovalManagementCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalManagementCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalPolicyBaseType:
      return extjson_uci::type::ApprovalPolicyBaseType::deserialize(propTree, dynamic_cast<uci::type::ApprovalPolicyBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalPolicyID_Type:
      return extjson_uci::type::ApprovalPolicyID_Type::deserialize(propTree, dynamic_cast<uci::type::ApprovalPolicyID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalPolicyMDT:
      return extjson_uci::type::ApprovalPolicyMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalPolicyMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalPolicyMT:
      return extjson_uci::type::ApprovalPolicyMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalPolicyMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalRequestItemReferenceType:
      return extjson_uci::type::ApprovalRequestItemReferenceType::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequestItemReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalRequestItemType:
      return extjson_uci::type::ApprovalRequestItemType::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequestItemType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalRequestMDT:
      return extjson_uci::type::ApprovalRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalRequestMT:
      return extjson_uci::type::ApprovalRequestMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalRequestPolicyReferenceType:
      return extjson_uci::type::ApprovalRequestPolicyReferenceType::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequestPolicyReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalRequestStatusMDT:
      return extjson_uci::type::ApprovalRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approvalRequestStatusMT:
      return extjson_uci::type::ApprovalRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::approverRoleType:
      return extjson_uci::type::ApproverRoleType::deserialize(propTree, dynamic_cast<uci::type::ApproverRoleType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::archiveRequestType:
      return extjson_uci::type::ArchiveRequestType::deserialize(propTree, dynamic_cast<uci::type::ArchiveRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::arcVolumeType:
      return extjson_uci::type::ArcVolumeType::deserialize(propTree, dynamic_cast<uci::type::ArcVolumeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::areaChoiceType:
      return extjson_uci::type::AreaChoiceType::deserialize(propTree, dynamic_cast<uci::type::AreaChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::areaConstraintsType:
      return extjson_uci::type::AreaConstraintsType::deserialize(propTree, dynamic_cast<uci::type::AreaConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::arrivalDataType:
      return extjson_uci::type::ArrivalDataType::deserialize(propTree, dynamic_cast<uci::type::ArrivalDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::arrivalDataUncertaintyType:
      return extjson_uci::type::ArrivalDataUncertaintyType::deserialize(propTree, dynamic_cast<uci::type::ArrivalDataUncertaintyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::arrivalDataVarianceType:
      return extjson_uci::type::ArrivalDataVarianceType::deserialize(propTree, dynamic_cast<uci::type::ArrivalDataVarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::assessmentID_Type:
      return extjson_uci::type::AssessmentID_Type::deserialize(propTree, dynamic_cast<uci::type::AssessmentID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::assessmentMDT:
      return extjson_uci::type::AssessmentMDT::deserialize(propTree, dynamic_cast<uci::type::AssessmentMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::assessmentMT:
      return extjson_uci::type::AssessmentMT::deserialize(propTree, dynamic_cast<uci::type::AssessmentMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::assessmentRequestMDT:
      return extjson_uci::type::AssessmentRequestMDT::deserialize(propTree, dynamic_cast<uci::type::AssessmentRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::assessmentRequestMT:
      return extjson_uci::type::AssessmentRequestMT::deserialize(propTree, dynamic_cast<uci::type::AssessmentRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::assessmentRequestStatusMDT:
      return extjson_uci::type::AssessmentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AssessmentRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::assessmentRequestStatusMT:
      return extjson_uci::type::AssessmentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::AssessmentRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::assessmentRequestType:
      return extjson_uci::type::AssessmentRequestType::deserialize(propTree, dynamic_cast<uci::type::AssessmentRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::assessmentStatusType:
      return extjson_uci::type::AssessmentStatusType::deserialize(propTree, dynamic_cast<uci::type::AssessmentStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::assessmentType:
      return extjson_uci::type::AssessmentType::deserialize(propTree, dynamic_cast<uci::type::AssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::assetFilterType:
      return extjson_uci::type::AssetFilterType::deserialize(propTree, dynamic_cast<uci::type::AssetFilterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::assetType:
      return extjson_uci::type::AssetType::deserialize(propTree, dynamic_cast<uci::type::AssetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::associatedAccessAssessmentInfoType:
      return extjson_uci::type::AssociatedAccessAssessmentInfoType::deserialize(propTree, dynamic_cast<uci::type::AssociatedAccessAssessmentInfoType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::associatedDropRestrictMessageType:
      return extjson_uci::type::AssociatedDropRestrictMessageType::deserialize(propTree, dynamic_cast<uci::type::AssociatedDropRestrictMessageType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::associatedMessageSourceType:
      return extjson_uci::type::AssociatedMessageSourceType::deserialize(propTree, dynamic_cast<uci::type::AssociatedMessageSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::associatedMessageType:
      return extjson_uci::type::AssociatedMessageType::deserialize(propTree, dynamic_cast<uci::type::AssociatedMessageType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::associatedRequirementsType:
      return extjson_uci::type::AssociatedRequirementsType::deserialize(propTree, dynamic_cast<uci::type::AssociatedRequirementsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::atmosphericDragModelType:
      return extjson_uci::type::AtmosphericDragModelType::deserialize(propTree, dynamic_cast<uci::type::AtmosphericDragModelType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::atmosphericPropagationLossType:
      return extjson_uci::type::AtmosphericPropagationLossType::deserialize(propTree, dynamic_cast<uci::type::AtmosphericPropagationLossType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aTO_FileTraceabilityType:
      return extjson_uci::type::ATO_FileTraceabilityType::deserialize(propTree, dynamic_cast<uci::type::ATO_FileTraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aTO_TraceabilityType:
      return extjson_uci::type::ATO_TraceabilityType::deserialize(propTree, dynamic_cast<uci::type::ATO_TraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::atomicValueType:
      return extjson_uci::type::AtomicValueType::deserialize(propTree, dynamic_cast<uci::type::AtomicValueType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aTR_ProcessingParametersType:
      return extjson_uci::type::ATR_ProcessingParametersType::deserialize(propTree, dynamic_cast<uci::type::ATR_ProcessingParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::aTR_ProcessingResultsType:
      return extjson_uci::type::ATR_ProcessingResultsType::deserialize(propTree, dynamic_cast<uci::type::ATR_ProcessingResultsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::augmentationProcessingParametersType:
      return extjson_uci::type::AugmentationProcessingParametersType::deserialize(propTree, dynamic_cast<uci::type::AugmentationProcessingParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::auralAlertRepetitionType:
      return extjson_uci::type::AuralAlertRepetitionType::deserialize(propTree, dynamic_cast<uci::type::AuralAlertRepetitionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::auralAlertType:
      return extjson_uci::type::AuralAlertType::deserialize(propTree, dynamic_cast<uci::type::AuralAlertType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::authorizationID_Type:
      return extjson_uci::type::AuthorizationID_Type::deserialize(propTree, dynamic_cast<uci::type::AuthorizationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::authorizationMDT:
      return extjson_uci::type::AuthorizationMDT::deserialize(propTree, dynamic_cast<uci::type::AuthorizationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::authorizationMT:
      return extjson_uci::type::AuthorizationMT::deserialize(propTree, dynamic_cast<uci::type::AuthorizationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::autonomousActionStatusChoiceType:
      return extjson_uci::type::AutonomousActionStatusChoiceType::deserialize(propTree, dynamic_cast<uci::type::AutonomousActionStatusChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::autonomousPlanCommandType:
      return extjson_uci::type::AutonomousPlanCommandType::deserialize(propTree, dynamic_cast<uci::type::AutonomousPlanCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::autonomousPlanningActionID_Type:
      return extjson_uci::type::AutonomousPlanningActionID_Type::deserialize(propTree, dynamic_cast<uci::type::AutonomousPlanningActionID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::autonomousPlanningActionStatusType:
      return extjson_uci::type::AutonomousPlanningActionStatusType::deserialize(propTree, dynamic_cast<uci::type::AutonomousPlanningActionStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::autonomousPlanningConstrainingPlansType:
      return extjson_uci::type::AutonomousPlanningConstrainingPlansType::deserialize(propTree, dynamic_cast<uci::type::AutonomousPlanningConstrainingPlansType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::autonomousPlanningOtherSystemConstrainingPlansType:
      return extjson_uci::type::AutonomousPlanningOtherSystemConstrainingPlansType::deserialize(propTree, dynamic_cast<uci::type::AutonomousPlanningOtherSystemConstrainingPlansType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::availabilityInfoType:
      return extjson_uci::type::AvailabilityInfoType::deserialize(propTree, dynamic_cast<uci::type::AvailabilityInfoType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::availableConnectionType:
      return extjson_uci::type::AvailableConnectionType::deserialize(propTree, dynamic_cast<uci::type::AvailableConnectionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::availableFuelType:
      return extjson_uci::type::AvailableFuelType::deserialize(propTree, dynamic_cast<uci::type::AvailableFuelType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::availableWeaponsType:
      return extjson_uci::type::AvailableWeaponsType::deserialize(propTree, dynamic_cast<uci::type::AvailableWeaponsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::az_El_BeamPointingType:
      return extjson_uci::type::Az_El_BeamPointingType::deserialize(propTree, dynamic_cast<uci::type::Az_El_BeamPointingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::az_El_BeamPointingWithRangeType:
      return extjson_uci::type::Az_El_BeamPointingWithRangeType::deserialize(propTree, dynamic_cast<uci::type::Az_El_BeamPointingWithRangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::azElReferenceType:
      return extjson_uci::type::AzElReferenceType::deserialize(propTree, dynamic_cast<uci::type::AzElReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::azElRequiredReferenceType:
      return extjson_uci::type::AzElRequiredReferenceType::deserialize(propTree, dynamic_cast<uci::type::AzElRequiredReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::azimuthElevationRangePointType:
      return extjson_uci::type::AzimuthElevationRangePointType::deserialize(propTree, dynamic_cast<uci::type::AzimuthElevationRangePointType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::baseEOB_RecordType:
      return extjson_uci::type::BaseEOB_RecordType::deserialize(propTree, dynamic_cast<uci::type::BaseEOB_RecordType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::basicEncyclopediaNumberType:
      return extjson_uci::type::BasicEncyclopediaNumberType::deserialize(propTree, dynamic_cast<uci::type::BasicEncyclopediaNumberType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::basicManeuverConstraintsType:
      return extjson_uci::type::BasicManeuverConstraintsType::deserialize(propTree, dynamic_cast<uci::type::BasicManeuverConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::bCRS_KinematicsType:
      return extjson_uci::type::BCRS_KinematicsType::deserialize(propTree, dynamic_cast<uci::type::BCRS_KinematicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::bCRS_PositionType:
      return extjson_uci::type::BCRS_PositionType::deserialize(propTree, dynamic_cast<uci::type::BCRS_PositionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::bDI_CollectionType:
      return extjson_uci::type::BDI_CollectionType::deserialize(propTree, dynamic_cast<uci::type::BDI_CollectionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::beamBandWidthAndSampleRateType:
      return extjson_uci::type::BeamBandWidthAndSampleRateType::deserialize(propTree, dynamic_cast<uci::type::BeamBandWidthAndSampleRateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::beamID_Type:
      return extjson_uci::type::BeamID_Type::deserialize(propTree, dynamic_cast<uci::type::BeamID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::beamPointingReferenceType:
      return extjson_uci::type::BeamPointingReferenceType::deserialize(propTree, dynamic_cast<uci::type::BeamPointingReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::beamShapingType:
      return extjson_uci::type::BeamShapingType::deserialize(propTree, dynamic_cast<uci::type::BeamShapingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::beamWeightingType:
      return extjson_uci::type::BeamWeightingType::deserialize(propTree, dynamic_cast<uci::type::BeamWeightingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::beamWidthType:
      return extjson_uci::type::BeamWidthType::deserialize(propTree, dynamic_cast<uci::type::BeamWidthType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::behaviorType:
      return extjson_uci::type::BehaviorType::deserialize(propTree, dynamic_cast<uci::type::BehaviorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::bIT_ID_Type:
      return extjson_uci::type::BIT_ID_Type::deserialize(propTree, dynamic_cast<uci::type::BIT_ID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::blankingLimitType:
      return extjson_uci::type::BlankingLimitType::deserialize(propTree, dynamic_cast<uci::type::BlankingLimitType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::blankingSourceType:
      return extjson_uci::type::BlankingSourceType::deserialize(propTree, dynamic_cast<uci::type::BlankingSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::blueVehicleType:
      return extjson_uci::type::BlueVehicleType::deserialize(propTree, dynamic_cast<uci::type::BlueVehicleType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::bodyFaceType:
      return extjson_uci::type::BodyFaceType::deserialize(propTree, dynamic_cast<uci::type::BodyFaceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::boresightVelocityType:
      return extjson_uci::type::BoresightVelocityType::deserialize(propTree, dynamic_cast<uci::type::BoresightVelocityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::boundaryType:
      return extjson_uci::type::BoundaryType::deserialize(propTree, dynamic_cast<uci::type::BoundaryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::byRequirementPolicyType:
      return extjson_uci::type::ByRequirementPolicyType::deserialize(propTree, dynamic_cast<uci::type::ByRequirementPolicyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::byResultPolicyType:
      return extjson_uci::type::ByResultPolicyType::deserialize(propTree, dynamic_cast<uci::type::ByResultPolicyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::byTriggerPolicyType:
      return extjson_uci::type::ByTriggerPolicyType::deserialize(propTree, dynamic_cast<uci::type::ByTriggerPolicyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::calibrationID_Type:
      return extjson_uci::type::CalibrationID_Type::deserialize(propTree, dynamic_cast<uci::type::CalibrationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::callSignType:
      return extjson_uci::type::CallSignType::deserialize(propTree, dynamic_cast<uci::type::CallSignType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cannotComplyType:
      return extjson_uci::type::CannotComplyType::deserialize(propTree, dynamic_cast<uci::type::CannotComplyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityAssessmentActionType:
      return extjson_uci::type::CapabilityAssessmentActionType::deserialize(propTree, dynamic_cast<uci::type::CapabilityAssessmentActionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityAssessmentActivityDetailsType:
      return extjson_uci::type::CapabilityAssessmentActivityDetailsType::deserialize(propTree, dynamic_cast<uci::type::CapabilityAssessmentActivityDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityAssessmentActivityType:
      return extjson_uci::type::CapabilityAssessmentActivityType::deserialize(propTree, dynamic_cast<uci::type::CapabilityAssessmentActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityAssessmentDataType:
      return extjson_uci::type::CapabilityAssessmentDataType::deserialize(propTree, dynamic_cast<uci::type::CapabilityAssessmentDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityAssessmentPointType:
      return extjson_uci::type::CapabilityAssessmentPointType::deserialize(propTree, dynamic_cast<uci::type::CapabilityAssessmentPointType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityBaseType:
      return extjson_uci::type::CapabilityBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilityBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCommandBaseType:
      return extjson_uci::type::CapabilityCommandBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilityCommandBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCommandFrequencyType:
      return extjson_uci::type::CapabilityCommandFrequencyType::deserialize(propTree, dynamic_cast<uci::type::CapabilityCommandFrequencyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCommandRankingType:
      return extjson_uci::type::CapabilityCommandRankingType::deserialize(propTree, dynamic_cast<uci::type::CapabilityCommandRankingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCommandStatusBaseType:
      return extjson_uci::type::CapabilityCommandStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilityCommandStatusBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCommandTemporalConstraintsType:
      return extjson_uci::type::CapabilityCommandTemporalConstraintsType::deserialize(propTree, dynamic_cast<uci::type::CapabilityCommandTemporalConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityConfigurationID_Type:
      return extjson_uci::type::CapabilityConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::CapabilityConfigurationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityConfigurationType:
      return extjson_uci::type::CapabilityConfigurationType::deserialize(propTree, dynamic_cast<uci::type::CapabilityConfigurationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityConsentRequestStatusBaseType:
      return extjson_uci::type::CapabilityConsentRequestStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilityConsentRequestStatusBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCoverageAreaDataType:
      return extjson_uci::type::CapabilityCoverageAreaDataType::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCoverageAreaID_Type:
      return extjson_uci::type::CapabilityCoverageAreaID_Type::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCoverageAreaMDT:
      return extjson_uci::type::CapabilityCoverageAreaMDT::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCoverageAreaMT:
      return extjson_uci::type::CapabilityCoverageAreaMT::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCoverageAreaRequestDataType:
      return extjson_uci::type::CapabilityCoverageAreaRequestDataType::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaRequestDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCoverageAreaRequestMDT:
      return extjson_uci::type::CapabilityCoverageAreaRequestMDT::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCoverageAreaRequestMT:
      return extjson_uci::type::CapabilityCoverageAreaRequestMT::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCoverageAreaRequestStatusMDT:
      return extjson_uci::type::CapabilityCoverageAreaRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCoverageAreaRequestStatusMT:
      return extjson_uci::type::CapabilityCoverageAreaRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityCrossReferenceType:
      return extjson_uci::type::CapabilityCrossReferenceType::deserialize(propTree, dynamic_cast<uci::type::CapabilityCrossReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityDeclarationBaseType:
      return extjson_uci::type::CapabilityDeclarationBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilityDeclarationBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityID_Type:
      return extjson_uci::type::CapabilityID_Type::deserialize(propTree, dynamic_cast<uci::type::CapabilityID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityManagerType:
      return extjson_uci::type::CapabilityManagerType::deserialize(propTree, dynamic_cast<uci::type::CapabilityManagerType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityPrecedenceType:
      return extjson_uci::type::CapabilityPrecedenceType::deserialize(propTree, dynamic_cast<uci::type::CapabilityPrecedenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityRF_ProfileStatusType:
      return extjson_uci::type::CapabilityRF_ProfileStatusType::deserialize(propTree, dynamic_cast<uci::type::CapabilityRF_ProfileStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilitySettingsCommandBaseType:
      return extjson_uci::type::CapabilitySettingsCommandBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilitySettingsCommandBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilitySettingsCommandStatusBaseType:
      return extjson_uci::type::CapabilitySettingsCommandStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilitySettingsCommandStatusBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilitySpecificationType:
      return extjson_uci::type::CapabilitySpecificationType::deserialize(propTree, dynamic_cast<uci::type::CapabilitySpecificationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityStateType:
      return extjson_uci::type::CapabilityStateType::deserialize(propTree, dynamic_cast<uci::type::CapabilityStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityStatusBaseType:
      return extjson_uci::type::CapabilityStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilityStatusBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityStatusType:
      return extjson_uci::type::CapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::CapabilityStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityTaxonomyType:
      return extjson_uci::type::CapabilityTaxonomyType::deserialize(propTree, dynamic_cast<uci::type::CapabilityTaxonomyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityTaxonomyUniversalBaseType:
      return extjson_uci::type::CapabilityTaxonomyUniversalBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilityTaxonomyUniversalBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityTaxonomyUniversalType:
      return extjson_uci::type::CapabilityTaxonomyUniversalType::deserialize(propTree, dynamic_cast<uci::type::CapabilityTaxonomyUniversalType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityUtilizationAssessmentType:
      return extjson_uci::type::CapabilityUtilizationAssessmentType::deserialize(propTree, dynamic_cast<uci::type::CapabilityUtilizationAssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::capabilityUtilizationRequestType:
      return extjson_uci::type::CapabilityUtilizationRequestType::deserialize(propTree, dynamic_cast<uci::type::CapabilityUtilizationRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoDeliveryCapabilityMDT:
      return extjson_uci::type::CargoDeliveryCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::CargoDeliveryCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoDeliveryCapabilityMT:
      return extjson_uci::type::CargoDeliveryCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::CargoDeliveryCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoDeliveryCapabilityStatusMDT:
      return extjson_uci::type::CargoDeliveryCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CargoDeliveryCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoDeliveryCapabilityStatusMT:
      return extjson_uci::type::CargoDeliveryCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::CargoDeliveryCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoDeliveryCapabilityType:
      return extjson_uci::type::CargoDeliveryCapabilityType::deserialize(propTree, dynamic_cast<uci::type::CargoDeliveryCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoDeliverySpecificDataType:
      return extjson_uci::type::CargoDeliverySpecificDataType::deserialize(propTree, dynamic_cast<uci::type::CargoDeliverySpecificDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoDeliveryTaskType:
      return extjson_uci::type::CargoDeliveryTaskType::deserialize(propTree, dynamic_cast<uci::type::CargoDeliveryTaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoID_Type:
      return extjson_uci::type::CargoID_Type::deserialize(propTree, dynamic_cast<uci::type::CargoID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoLocationType:
      return extjson_uci::type::CargoLocationType::deserialize(propTree, dynamic_cast<uci::type::CargoLocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoSizeType:
      return extjson_uci::type::CargoSizeType::deserialize(propTree, dynamic_cast<uci::type::CargoSizeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoStatusMDT:
      return extjson_uci::type::CargoStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CargoStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoStatusMT:
      return extjson_uci::type::CargoStatusMT::deserialize(propTree, dynamic_cast<uci::type::CargoStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoTransitionType:
      return extjson_uci::type::CargoTransitionType::deserialize(propTree, dynamic_cast<uci::type::CargoTransitionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cargoType:
      return extjson_uci::type::CargoType::deserialize(propTree, dynamic_cast<uci::type::CargoType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::celestialBodyType:
      return extjson_uci::type::CelestialBodyType::deserialize(propTree, dynamic_cast<uci::type::CelestialBodyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::centerOfGravityAeroType:
      return extjson_uci::type::CenterOfGravityAeroType::deserialize(propTree, dynamic_cast<uci::type::CenterOfGravityAeroType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::centerPointImageRegionOfInterestType:
      return extjson_uci::type::CenterPointImageRegionOfInterestType::deserialize(propTree, dynamic_cast<uci::type::CenterPointImageRegionOfInterestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cF_CourseToFixType:
      return extjson_uci::type::CF_CourseToFixType::deserialize(propTree, dynamic_cast<uci::type::CF_CourseToFixType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::channelDescriptionType:
      return extjson_uci::type::ChannelDescriptionType::deserialize(propTree, dynamic_cast<uci::type::ChannelDescriptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::characterizationChoiceType:
      return extjson_uci::type::CharacterizationChoiceType::deserialize(propTree, dynamic_cast<uci::type::CharacterizationChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::characterizationObjectiveType:
      return extjson_uci::type::CharacterizationObjectiveType::deserialize(propTree, dynamic_cast<uci::type::CharacterizationObjectiveType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::characterizationOptionsType:
      return extjson_uci::type::CharacterizationOptionsType::deserialize(propTree, dynamic_cast<uci::type::CharacterizationOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::circleType:
      return extjson_uci::type::CircleType::deserialize(propTree, dynamic_cast<uci::type::CircleType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::civilPathTerminatorType:
      return extjson_uci::type::CivilPathTerminatorType::deserialize(propTree, dynamic_cast<uci::type::CivilPathTerminatorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::classificationConstrainedSubPlanType:
      return extjson_uci::type::ClassificationConstrainedSubPlanType::deserialize(propTree, dynamic_cast<uci::type::ClassificationConstrainedSubPlanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::classificationReportType:
      return extjson_uci::type::ClassificationReportType::deserialize(propTree, dynamic_cast<uci::type::ClassificationReportType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::classificationRequirementsType:
      return extjson_uci::type::ClassificationRequirementsType::deserialize(propTree, dynamic_cast<uci::type::ClassificationRequirementsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::climbType:
      return extjson_uci::type::ClimbType::deserialize(propTree, dynamic_cast<uci::type::ClimbType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cloudsType:
      return extjson_uci::type::CloudsType::deserialize(propTree, dynamic_cast<uci::type::CloudsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOE_EquatorialOrientationType:
      return extjson_uci::type::COE_EquatorialOrientationType::deserialize(propTree, dynamic_cast<uci::type::COE_EquatorialOrientationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOE_NonEquatorialOrientationType:
      return extjson_uci::type::COE_NonEquatorialOrientationType::deserialize(propTree, dynamic_cast<uci::type::COE_NonEquatorialOrientationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOE_OrbitBaseType:
      return extjson_uci::type::COE_OrbitBaseType::deserialize(propTree, dynamic_cast<uci::type::COE_OrbitBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOE_OrbitType:
      return extjson_uci::type::COE_OrbitType::deserialize(propTree, dynamic_cast<uci::type::COE_OrbitType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOE_OrientationType:
      return extjson_uci::type::COE_OrientationType::deserialize(propTree, dynamic_cast<uci::type::COE_OrientationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::cOE_PositionType:
      return extjson_uci::type::COE_PositionType::deserialize(propTree, dynamic_cast<uci::type::COE_PositionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::collectionConstraintsType:
      return extjson_uci::type::CollectionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::CollectionConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::collectionDeckTraceabilityType:
      return extjson_uci::type::CollectionDeckTraceabilityType::deserialize(propTree, dynamic_cast<uci::type::CollectionDeckTraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::collectionFrequencyType:
      return extjson_uci::type::CollectionFrequencyType::deserialize(propTree, dynamic_cast<uci::type::CollectionFrequencyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::collectionTaskMetricsType:
      return extjson_uci::type::CollectionTaskMetricsType::deserialize(propTree, dynamic_cast<uci::type::CollectionTaskMetricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::colorDepthSettingsType:
      return extjson_uci::type::ColorDepthSettingsType::deserialize(propTree, dynamic_cast<uci::type::ColorDepthSettingsType&>(accessor), nodeName, nsPrefix, true);
    default:
      return false;
  }
}

} // namespace base

} // namespace extjson_uci

