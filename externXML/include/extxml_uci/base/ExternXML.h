/** @file ExternXML.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:20 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef EXTXML_UCI_BASE_EXTERNXML_H
#define EXTXML_UCI_BASE_EXTERNXML_H

#include <cstdint>

#include "uci/base/Externalizer.h"

/**  */
namespace extxml_uci {

/** The namespace in which all base data types are declared */
namespace base {

/** The XML Externalizer. */
class ExternXML : public uci::base::Externalizer {
public:
  /** The constructor */
  ExternXML() = default;

  /** The copy constructor
    *
    * @param rhs The ExternXML to copy from
    */
  ExternXML(const ExternXML& rhs) = default;

  /** The move constructor
    *
    * @param rhs The ExternXML to move from
    */
  ExternXML(ExternXML&& rhs) = default;

  /** The assignment operator
    *
    * @param rhs The ExternXML to copy from
    * @return The ExternXML that was assigned
    */
  ExternXML& operator=(const ExternXML& rhs) = default;

  /** The move assignment operator
    *
    * @param rhs The ExternXML to move from
    * @return The ExternXML that was assigned
    */
  ExternXML& operator=(ExternXML&& rhs) = default;

  /** The destructor */
  virtual ~ExternXML() = default;

  /** This method reads the content of the C++ standard library istream to import into the accessor.
    *
    * @param istream The C++ standard library istream whose content will be used to import into the accessor.
    * @param accessor The accessor to be written to.
    */
  void read(std::istream& istream, uci::base::Accessor& accessor) override;

  /** This method reads the content of the C++ standard library string to import into the accessor.
    *
    * @param string The C++ standard library string whose content will be used to import into the accessor.
    * @param accessor The accessor to be written to.
    */
  void read(const std::string& string, uci::base::Accessor& accessor) override;

  /** This method reads the content of the C++ standard library vector to import into the accessor.
    *
    * @param vector The C++ standard library vector whose content will be used to import into the accessor.
    * @param accessor The accessor to be written to.
    */
  void read(const std::vector<std::uint8_t>& vector, uci::base::Accessor& accessor) override;

  /** This method reads the content of the accessor to export into the C++ standard library ostream.
    *
    * @param accessor The accessor whose content will be used to export into the ostream.
    * @param ostream The C++ standard library ostream to be written to.
    */
  void write(const uci::base::Accessor& accessor, std::ostream& ostream) override;

  /** This method reads the content of the accessor to export into the C++ standard library string.
    *
    * @param accessor The accessor whose content will be used to export into the string.
    * @param string The C++ standard library string to be written to.
    */
  void write(const uci::base::Accessor& accessor, std::string& string) override;

  /** This method reads the content of the accessor to export into the C++ standard library vector.
    *
    * @param accessor The accessor whose content will be used to export into the vector.
    * @param vector The C++ standard library vector to be written to.
    */
  void write(const uci::base::Accessor& accessor, std::vector<std::uint8_t>& vector) override;

  /** This method returns whether this Externalizer only supports the read functions with OMS Messages.
    *
    * @return True if this Externalizer only supports the read functions with OMS Messages, false otherwise.
    */
  bool messageReadOnly() const override {
    return false;
  }

  /** This method returns whether this Externalizer only supports the write functions with OMS Messages.
    *
    * @return True if this Externalizer only supports the write functions with OMS Messages, false otherwise.
    */
  bool messageWriteOnly() const override {
    return false;
  }

  /** This method returns whether this Externalizer supports the read functions with objects.
    *
    * @return True if this Externalizer supports the read functions with objects, false otherwise.
    */
  bool supportsObjectRead() const override {
    return true;
  }

  /** This method returns whether this Externalizer supports the write functions with objects.
    *
    * @return True if this Externalizer supports the write functions with objects, false otherwise.
    */
  bool supportsObjectWrite() const override {
    return true;
  }

  /** This method returns the version of the OMS CAL API associated with this Externalizer.
    *
    * @return The Externalizer OMS CAL API version.
    */
  std::string getCalApiVersion() const override {
    return "2.3";
  }

  /** This method returns the encoding associated with this Externalizer.
    *
    * @return The Externalizer encoding.
    */
  std::string getEncoding() const override {
    return "XML";
  }

  /** This method returns the version of the schema definition associated with this Externalizer.
    *
    * @return The Externalizer schema definition version.
    */
  std::string getSchemaVersion() const override {
    return "002.3";
  }

  /** This method returns the vendor associated with this Externalizer.
    *
    * @return The Externalizer vendor.
    */
  std::string getVendor() const override {
    return "OAM";
  }

  /** This method returns the vendor's version associated with this Externalizer.
    *
    * @return The Externalizer vendor's version.
    */
  std::string getVendorVersion() const override {
    return "1.0.0";
  }

};

} // namespace base

} // namespace extxml_uci

#endif // EXTXML_UCI_BASE_EXTERNXML_H
