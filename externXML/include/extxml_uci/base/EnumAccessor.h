/** @file EnumAccessor.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:20 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef EXTXML_UCI_BASE_ENUMACCESSOR_H
#define EXTXML_UCI_BASE_ENUMACCESSOR_H

#include <string>

#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/util/EnumTypesTranslator.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all base data types are declared */
namespace base {

/** . */
template<typename T_ACCESSOR_TYPE, uci::base::accessorType::AccessorType accessor_type>
class EnumAccessor {
public:
  /** .
    *
    * @param propTree .
    * @param accessor .
    * @param nodeName .
    * @param nsPrefix .
    * @param topLevel .
    * @return .
    */
  static bool deserialize(const boost::property_tree::ptree& propTree, T_ACCESSOR_TYPE& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel = false) {
    nodeName = extxml_uci::util::EnumTypesTranslator::translateFromAccessorType(accessor_type);
    const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
    for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
      if ((valueType.first == "<xmlattr>") && topLevel) {
        nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
      } else if (valueType.first != "<xmlattr>") {
        if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
          accessor.setValueFromName(*value);
        }
      }
    }
    return true;
  }

  /** .
    *
    * @param accessor .
    * @param propTree .
    * @param nodeName .
    * @param createNode .
    * @param addTypeAttribute .
    * @param checkIfDerivation .
    * @param topLevel .
    * @return .
    */
  static std::string serialize(const T_ACCESSOR_TYPE& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode = true, const bool addTypeAttribute = false, const bool /*checkIfDerivation*/ = true, const bool /*topLevel*/ = false) {
    std::string generatedNodeName{nodeName.empty() ? extxml_uci::util::EnumTypesTranslator::translateFromAccessorType(accessor_type) : nodeName};
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extxml_uci::util::SerializationHelpers::addTypeAttribute(node, extxml_uci::util::EnumTypesTranslator::translateFromAccessorType(accessor_type));
    }
    node.add(generatedNodeName, accessor.toName());
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
    return generatedNodeName;
  }

};

} // namespace base

} // namespace extxml_uci

#endif // EXTXML_UCI_BASE_ENUMACCESSOR_H
