/** @file StrikeActivityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/StrikeActivityType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/AO_CodeType.h"
#include "extxml_uci/type/ActivityBaseType.h"
#include "extxml_uci/type/ConsentEnum.h"
#include "extxml_uci/type/EnduranceFootprintType.h"
#include "extxml_uci/type/GeoLocatedObjectType.h"
#include "extxml_uci/type/LAR_ID_Type.h"
#include "extxml_uci/type/MunitionInFlightType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/StrikeActivityType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace StrikeActivityType_Names {

constexpr const char* Extern_Type_Name{"StrikeActivityType"};
constexpr const char* SelectedForKeyLoad_Name{"SelectedForKeyLoad"};
constexpr const char* WeaponArmed_Name{"WeaponArmed"};
constexpr const char* ReadyForRelease_Name{"ReadyForRelease"};
constexpr const char* SelectedForRelease_Name{"SelectedForRelease"};
constexpr const char* SelectedForJettison_Name{"SelectedForJettison"};
constexpr const char* AssignedTarget_Name{"AssignedTarget"};
constexpr const char* AO_Code_Name{"AO_Code"};
constexpr const char* LAR_ID_Name{"LAR_ID"};
constexpr const char* ConsentRequired_Name{"ConsentRequired"};
constexpr const char* ConsentState_Name{"ConsentState"};
constexpr const char* KineticFootprint_Name{"KineticFootprint"};
constexpr const char* TargetLockAcquired_Name{"TargetLockAcquired"};
constexpr const char* MunitionInFlight_Name{"MunitionInFlight"};
constexpr const char* TimeToRelease_Name{"TimeToRelease"};

} // namespace StrikeActivityType_Names

bool StrikeActivityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StrikeActivityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StrikeActivityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::SelectedForKeyLoad_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSelectedForKeyLoad(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::WeaponArmed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setWeaponArmed(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::ReadyForRelease_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReadyForRelease(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::SelectedForRelease_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSelectedForRelease(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::SelectedForJettison_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSelectedForJettison(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::AssignedTarget_Name) {
      GeoLocatedObjectType::deserialize(valueType.second, accessor.enableAssignedTarget(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::AO_Code_Name) {
      AO_CodeType::deserialize(valueType.second, accessor.enableAO_Code(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::LAR_ID_Name) {
      LAR_ID_Type::deserialize(valueType.second, accessor.enableLAR_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::ConsentRequired_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setConsentRequired(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::ConsentState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableConsentState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::KineticFootprint_Name) {
      EnduranceFootprintType::deserialize(valueType.second, accessor.enableKineticFootprint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::TargetLockAcquired_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTargetLockAcquired(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::MunitionInFlight_Name) {
      MunitionInFlightType::deserialize(valueType.second, accessor.enableMunitionInFlight(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeActivityType_Names::TimeToRelease_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeToRelease(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
  ActivityBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string StrikeActivityType::serialize(const uci::type::StrikeActivityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? StrikeActivityType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, StrikeActivityType_Names::Extern_Type_Name);
  }
  ActivityBaseType::serialize(accessor, node, "", false, false, false);
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getSelectedForKeyLoad(), node, StrikeActivityType_Names::SelectedForKeyLoad_Name);
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getWeaponArmed(), node, StrikeActivityType_Names::WeaponArmed_Name);
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getReadyForRelease(), node, StrikeActivityType_Names::ReadyForRelease_Name);
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getSelectedForRelease(), node, StrikeActivityType_Names::SelectedForRelease_Name);
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getSelectedForJettison(), node, StrikeActivityType_Names::SelectedForJettison_Name);
  if (accessor.hasAssignedTarget()) {
    GeoLocatedObjectType::serialize(accessor.getAssignedTarget(), node, StrikeActivityType_Names::AssignedTarget_Name);
  }
  if (accessor.hasAO_Code()) {
    AO_CodeType::serialize(accessor.getAO_Code(), node, StrikeActivityType_Names::AO_Code_Name);
  }
  if (accessor.hasLAR_ID()) {
    LAR_ID_Type::serialize(accessor.getLAR_ID(), node, StrikeActivityType_Names::LAR_ID_Name);
  }
  if (accessor.hasConsentRequired()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getConsentRequired(), node, StrikeActivityType_Names::ConsentRequired_Name);
  }
  if (accessor.hasConsentState()) {
    ConsentEnum::serialize(accessor.getConsentState(), node, StrikeActivityType_Names::ConsentState_Name, false);
  }
  if (accessor.hasKineticFootprint()) {
    EnduranceFootprintType::serialize(accessor.getKineticFootprint(), node, StrikeActivityType_Names::KineticFootprint_Name);
  }
  if (accessor.hasTargetLockAcquired()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getTargetLockAcquired(), node, StrikeActivityType_Names::TargetLockAcquired_Name);
  }
  if (accessor.hasMunitionInFlight()) {
    MunitionInFlightType::serialize(accessor.getMunitionInFlight(), node, StrikeActivityType_Names::MunitionInFlight_Name);
  }
  if (accessor.hasTimeToRelease()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getTimeToRelease(), node, StrikeActivityType_Names::TimeToRelease_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

