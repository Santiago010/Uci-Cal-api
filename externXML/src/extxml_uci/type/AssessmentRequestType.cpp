/** @file AssessmentRequestType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/AssessmentRequestType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/AchievabilityAssessmentRequestPET.h"
#include "extxml_uci/type/CapabilityUtilizationRequestType.h"
#include "extxml_uci/type/CommPointingPlanRequestType.h"
#include "extxml_uci/type/RouteDeconflictionRequestType.h"
#include "extxml_uci/type/RouteVulnerabilityMetricsRequestType.h"
#include "extxml_uci/type/TargetMobilityRequestType.h"
#include "extxml_uci/type/ThreatAssessmentRequestType.h"
#include "extxml_uci/type/ThreatNominationAssessmentRequestType.h"
#include "extxml_uci/type/VehicleThreatAssessmentRequestType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/AssessmentRequestType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace AssessmentRequestType_Names {

constexpr const char* Extern_Type_Name{"AssessmentRequestType"};
constexpr const char* CommPointingPlan_Name{"CommPointingPlan"};
constexpr const char* CapabilityUtilization_Name{"CapabilityUtilization"};
constexpr const char* RouteDeconfliction_Name{"RouteDeconfliction"};
constexpr const char* RouteVulnerabilityMetrics_Name{"RouteVulnerabilityMetrics"};
constexpr const char* RouteThreatAssessment_Name{"RouteThreatAssessment"};
constexpr const char* TargetMobility_Name{"TargetMobility"};
constexpr const char* VehicleThreatAssessment_Name{"VehicleThreatAssessment"};
constexpr const char* ThreatNominationAssessment_Name{"ThreatNominationAssessment"};
constexpr const char* AchievabilityAssessment_Name{"AchievabilityAssessment"};

} // namespace AssessmentRequestType_Names

bool AssessmentRequestType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AssessmentRequestType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AssessmentRequestType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::CommPointingPlan_Name) {
      CommPointingPlanRequestType::deserialize(valueType.second, accessor.chooseCommPointingPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::CapabilityUtilization_Name) {
      CapabilityUtilizationRequestType::deserialize(valueType.second, accessor.chooseCapabilityUtilization(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::RouteDeconfliction_Name) {
      RouteDeconflictionRequestType::deserialize(valueType.second, accessor.chooseRouteDeconfliction(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::RouteVulnerabilityMetrics_Name) {
      RouteVulnerabilityMetricsRequestType::deserialize(valueType.second, accessor.chooseRouteVulnerabilityMetrics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::RouteThreatAssessment_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseRouteThreatAssessment(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::TargetMobility_Name) {
      TargetMobilityRequestType::deserialize(valueType.second, accessor.chooseTargetMobility(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::VehicleThreatAssessment_Name) {
      VehicleThreatAssessmentRequestType::deserialize(valueType.second, accessor.chooseVehicleThreatAssessment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::ThreatNominationAssessment_Name) {
      ThreatNominationAssessmentRequestType::deserialize(valueType.second, accessor.chooseThreatNominationAssessment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AssessmentRequestType_Names::AchievabilityAssessment_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseAchievabilityAssessment(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string AssessmentRequestType::serialize(const uci::type::AssessmentRequestType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? AssessmentRequestType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, AssessmentRequestType_Names::Extern_Type_Name);
  }
  if (accessor.isCommPointingPlan()) {
    CommPointingPlanRequestType::serialize(accessor.getCommPointingPlan(), node, AssessmentRequestType_Names::CommPointingPlan_Name);
  } else if (accessor.isCapabilityUtilization()) {
    CapabilityUtilizationRequestType::serialize(accessor.getCapabilityUtilization(), node, AssessmentRequestType_Names::CapabilityUtilization_Name);
  } else if (accessor.isRouteDeconfliction()) {
    RouteDeconflictionRequestType::serialize(accessor.getRouteDeconfliction(), node, AssessmentRequestType_Names::RouteDeconfliction_Name);
  } else if (accessor.isRouteVulnerabilityMetrics()) {
    RouteVulnerabilityMetricsRequestType::serialize(accessor.getRouteVulnerabilityMetrics(), node, AssessmentRequestType_Names::RouteVulnerabilityMetrics_Name);
  } else if (accessor.isRouteThreatAssessment()) {
    ThreatAssessmentRequestType::serialize(accessor.getRouteThreatAssessment(), node, AssessmentRequestType_Names::RouteThreatAssessment_Name);
  } else if (accessor.isTargetMobility()) {
    TargetMobilityRequestType::serialize(accessor.getTargetMobility(), node, AssessmentRequestType_Names::TargetMobility_Name);
  } else if (accessor.isVehicleThreatAssessment()) {
    VehicleThreatAssessmentRequestType::serialize(accessor.getVehicleThreatAssessment(), node, AssessmentRequestType_Names::VehicleThreatAssessment_Name);
  } else if (accessor.isThreatNominationAssessment()) {
    ThreatNominationAssessmentRequestType::serialize(accessor.getThreatNominationAssessment(), node, AssessmentRequestType_Names::ThreatNominationAssessment_Name);
  } else if (accessor.isAchievabilityAssessment()) {
    AchievabilityAssessmentRequestPET::serialize(accessor.getAchievabilityAssessment(), node, AssessmentRequestType_Names::AchievabilityAssessment_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

