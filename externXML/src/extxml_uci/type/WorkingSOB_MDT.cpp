/** @file WorkingSOB_MDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:20 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/WorkingSOB_MDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/DataRecordBaseType.h"
#include "extxml_uci/type/OrbitRegimeType.h"
#include "extxml_uci/type/OrderOfBattleTimestampsType.h"
#include "extxml_uci/type/SOB_C2_RecordType.h"
#include "extxml_uci/type/SOB_SatelliteRecordType.h"
#include "extxml_uci/type/WorkingSOB_ID_Type.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/WorkingSOB_MDT.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace WorkingSOB_MDT_Names {

constexpr const char* Extern_Type_Name{"WorkingSOB_MDT"};
constexpr const char* WorkingSOB_ID_Name{"WorkingSOB_ID"};
constexpr const char* Orbit_Name{"Orbit"};
constexpr const char* Timestamps_Name{"Timestamps"};
constexpr const char* SatelliteRecord_Name{"SatelliteRecord"};
constexpr const char* C2_Record_Name{"C2_Record"};

} // namespace WorkingSOB_MDT_Names

bool WorkingSOB_MDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::WorkingSOB_MDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WorkingSOB_MDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WorkingSOB_MDT_Names::WorkingSOB_ID_Name) {
      WorkingSOB_ID_Type::deserialize(valueType.second, accessor.getWorkingSOB_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WorkingSOB_MDT_Names::Orbit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WorkingSOB_MDT::Orbit& boundedList = accessor.getOrbit();
        const uci::type::WorkingSOB_MDT::Orbit::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        OrbitRegimeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + WorkingSOB_MDT_Names::Timestamps_Name) {
      OrderOfBattleTimestampsType::deserialize(valueType.second, accessor.getTimestamps(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WorkingSOB_MDT_Names::SatelliteRecord_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WorkingSOB_MDT::SatelliteRecord& boundedList = accessor.getSatelliteRecord();
        const uci::type::WorkingSOB_MDT::SatelliteRecord::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SOB_SatelliteRecordType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + WorkingSOB_MDT_Names::C2_Record_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WorkingSOB_MDT::C2_Record& boundedList = accessor.getC2_Record();
        const uci::type::WorkingSOB_MDT::C2_Record::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SOB_C2_RecordType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string WorkingSOB_MDT::serialize(const uci::type::WorkingSOB_MDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? WorkingSOB_MDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, WorkingSOB_MDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  WorkingSOB_ID_Type::serialize(accessor.getWorkingSOB_ID(), node, WorkingSOB_MDT_Names::WorkingSOB_ID_Name);
  {
    const uci::type::WorkingSOB_MDT::Orbit& boundedList = accessor.getOrbit();
    for (uci::type::WorkingSOB_MDT::Orbit::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitRegimeType::serialize(boundedList.at(i), node, WorkingSOB_MDT_Names::Orbit_Name);
    }
  }
  OrderOfBattleTimestampsType::serialize(accessor.getTimestamps(), node, WorkingSOB_MDT_Names::Timestamps_Name);
  {
    const uci::type::WorkingSOB_MDT::SatelliteRecord& boundedList = accessor.getSatelliteRecord();
    for (uci::type::WorkingSOB_MDT::SatelliteRecord::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SOB_SatelliteRecordType::serialize(boundedList.at(i), node, WorkingSOB_MDT_Names::SatelliteRecord_Name);
    }
  }
  {
    const uci::type::WorkingSOB_MDT::C2_Record& boundedList = accessor.getC2_Record();
    for (uci::type::WorkingSOB_MDT::C2_Record::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SOB_C2_RecordType::serialize(boundedList.at(i), node, WorkingSOB_MDT_Names::C2_Record_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

