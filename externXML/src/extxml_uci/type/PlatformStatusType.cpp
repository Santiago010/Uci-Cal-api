/** @file PlatformStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/PlatformStatusType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/DatalinkControlType.h"
#include "extxml_uci/type/PlatformFunctionStatusType.h"
#include "extxml_uci/type/PlatformStatusSAM_Type.h"
#include "extxml_uci/type/SurfaceRecoveryType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/PlatformStatusType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PlatformStatusType_Names {

constexpr const char* Extern_Type_Name{"PlatformStatusType"};
constexpr const char* BailoutIndicator_Name{"BailoutIndicator"};
constexpr const char* CommandAndControlIndicator_Name{"CommandAndControlIndicator"};
constexpr const char* EmergencyIndicator_Name{"EmergencyIndicator"};
constexpr const char* FunctionStatus_Name{"FunctionStatus"};
constexpr const char* SAM_Status_Name{"SAM_Status"};
constexpr const char* SurfaceRecovery_Name{"SurfaceRecovery"};
constexpr const char* SurfaceStatus_Name{"SurfaceStatus"};
constexpr const char* DatalinkControlStatus_Name{"DatalinkControlStatus"};

} // namespace PlatformStatusType_Names

bool PlatformStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlatformStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlatformStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::BailoutIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBailoutIndicator(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::CommandAndControlIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCommandAndControlIndicator(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::EmergencyIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEmergencyIndicator(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::FunctionStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlatformStatusType::FunctionStatus& boundedList = accessor.getFunctionStatus();
        const uci::type::PlatformStatusType::FunctionStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PlatformFunctionStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::SAM_Status_Name) {
      PlatformStatusSAM_Type::deserialize(valueType.second, accessor.enableSAM_Status(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::SurfaceRecovery_Name) {
      SurfaceRecoveryType::deserialize(valueType.second, accessor.enableSurfaceRecovery(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::SurfaceStatus_Name) {
      SurfaceRecoveryType::deserialize(valueType.second, accessor.enableSurfaceStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PlatformStatusType_Names::DatalinkControlStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlatformStatusType::DatalinkControlStatus& boundedList = accessor.getDatalinkControlStatus();
        const uci::type::PlatformStatusType::DatalinkControlStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DatalinkControlType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string PlatformStatusType::serialize(const uci::type::PlatformStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PlatformStatusType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, PlatformStatusType_Names::Extern_Type_Name);
  }
  if (accessor.hasBailoutIndicator()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getBailoutIndicator(), node, PlatformStatusType_Names::BailoutIndicator_Name);
  }
  if (accessor.hasCommandAndControlIndicator()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getCommandAndControlIndicator(), node, PlatformStatusType_Names::CommandAndControlIndicator_Name);
  }
  if (accessor.hasEmergencyIndicator()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getEmergencyIndicator(), node, PlatformStatusType_Names::EmergencyIndicator_Name);
  }
  {
    const uci::type::PlatformStatusType::FunctionStatus& boundedList = accessor.getFunctionStatus();
    for (uci::type::PlatformStatusType::FunctionStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PlatformFunctionStatusType::serialize(boundedList.at(i), node, PlatformStatusType_Names::FunctionStatus_Name);
    }
  }
  if (accessor.hasSAM_Status()) {
    PlatformStatusSAM_Type::serialize(accessor.getSAM_Status(), node, PlatformStatusType_Names::SAM_Status_Name);
  }
  if (accessor.hasSurfaceRecovery()) {
    SurfaceRecoveryType::serialize(accessor.getSurfaceRecovery(), node, PlatformStatusType_Names::SurfaceRecovery_Name);
  }
  if (accessor.hasSurfaceStatus()) {
    SurfaceRecoveryType::serialize(accessor.getSurfaceStatus(), node, PlatformStatusType_Names::SurfaceStatus_Name);
  }
  {
    const uci::type::PlatformStatusType::DatalinkControlStatus& boundedList = accessor.getDatalinkControlStatus();
    for (uci::type::PlatformStatusType::DatalinkControlStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DatalinkControlType::serialize(boundedList.at(i), node, PlatformStatusType_Names::DatalinkControlStatus_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

