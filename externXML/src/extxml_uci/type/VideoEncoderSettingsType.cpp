/** @file VideoEncoderSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:20 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/VideoEncoderSettingsType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/CropType.h"
#include "extxml_uci/type/ForeignKeyType.h"
#include "extxml_uci/type/UnsignedIntegerMinMaxType.h"
#include "extxml_uci/type/VideoBlockSizeEnum.h"
#include "extxml_uci/type/VideoChromaSubsampleEnum.h"
#include "extxml_uci/type/VideoEncoderCompressionModeEnum.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/VideoEncoderSettingsType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace VideoEncoderSettingsType_Names {

constexpr const char* Extern_Type_Name{"VideoEncoderSettingsType"};
constexpr const char* EncodingType_Name{"EncodingType"};
constexpr const char* Profile_Name{"Profile"};
constexpr const char* EncodingBlocks_Name{"EncodingBlocks"};
constexpr const char* ChromaSubsample_Name{"ChromaSubsample"};
constexpr const char* FrameRate_Name{"FrameRate"};
constexpr const char* HDR_Name{"HDR"};
constexpr const char* BitRate_Name{"BitRate"};
constexpr const char* EmbedKLV_Metadata_Name{"EmbedKLV_Metadata"};
constexpr const char* EmbedPlatformMetadata_Name{"EmbedPlatformMetadata"};
constexpr const char* SkipFrames_Name{"SkipFrames"};
constexpr const char* QuantMinMax_Name{"QuantMinMax"};
constexpr const char* CompressionMode_Name{"CompressionMode"};
constexpr const char* B_Frames_Name{"B_Frames"};
constexpr const char* GOP_Size_Name{"GOP_Size"};
constexpr const char* IntraRefreshMode_Name{"IntraRefreshMode"};
constexpr const char* IntraRefreshPercentage_Name{"IntraRefreshPercentage"};
constexpr const char* ColorBitDepth_Name{"ColorBitDepth"};
constexpr const char* Crop_Name{"Crop"};
constexpr const char* Scaling_Name{"Scaling"};

} // namespace VideoEncoderSettingsType_Names

bool VideoEncoderSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::VideoEncoderSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = VideoEncoderSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::EncodingType_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEncodingType(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::Profile_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProfile(*value);
      }
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::EncodingBlocks_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEncodingBlocks().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::ChromaSubsample_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableChromaSubsample().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::FrameRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrameRate(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::HDR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHDR(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::BitRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBitRate(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::EmbedKLV_Metadata_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEmbedKLV_Metadata(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::EmbedPlatformMetadata_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEmbedPlatformMetadata(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::SkipFrames_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSkipFrames(extxml_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::QuantMinMax_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableQuantMinMax(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::CompressionMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCompressionMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::B_Frames_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setB_Frames(extxml_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::GOP_Size_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setGOP_Size(extxml_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::IntraRefreshMode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIntraRefreshMode(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::IntraRefreshPercentage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIntraRefreshPercentage(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::ColorBitDepth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setColorBitDepth(extxml_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::Crop_Name) {
      CropType::deserialize(valueType.second, accessor.enableCrop(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + VideoEncoderSettingsType_Names::Scaling_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setScaling(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
  return true;
}

std::string VideoEncoderSettingsType::serialize(const uci::type::VideoEncoderSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? VideoEncoderSettingsType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, VideoEncoderSettingsType_Names::Extern_Type_Name);
  }
  if (accessor.hasEncodingType()) {
    ForeignKeyType::serialize(accessor.getEncodingType(), node, VideoEncoderSettingsType_Names::EncodingType_Name);
  }
  if (accessor.hasProfile()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getProfile(), node, VideoEncoderSettingsType_Names::Profile_Name);
  }
  if (accessor.hasEncodingBlocks()) {
    VideoBlockSizeEnum::serialize(accessor.getEncodingBlocks(), node, VideoEncoderSettingsType_Names::EncodingBlocks_Name, false);
  }
  if (accessor.hasChromaSubsample()) {
    VideoChromaSubsampleEnum::serialize(accessor.getChromaSubsample(), node, VideoEncoderSettingsType_Names::ChromaSubsample_Name, false);
  }
  if (accessor.hasFrameRate()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getFrameRate(), node, VideoEncoderSettingsType_Names::FrameRate_Name);
  }
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getHDR(), node, VideoEncoderSettingsType_Names::HDR_Name);
  if (accessor.hasBitRate()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getBitRate(), node, VideoEncoderSettingsType_Names::BitRate_Name);
  }
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getEmbedKLV_Metadata(), node, VideoEncoderSettingsType_Names::EmbedKLV_Metadata_Name);
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getEmbedPlatformMetadata(), node, VideoEncoderSettingsType_Names::EmbedPlatformMetadata_Name);
  if (accessor.hasSkipFrames()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getSkipFrames(), node, VideoEncoderSettingsType_Names::SkipFrames_Name);
  }
  if (accessor.hasQuantMinMax()) {
    UnsignedIntegerMinMaxType::serialize(accessor.getQuantMinMax(), node, VideoEncoderSettingsType_Names::QuantMinMax_Name);
  }
  if (accessor.hasCompressionMode()) {
    VideoEncoderCompressionModeEnum::serialize(accessor.getCompressionMode(), node, VideoEncoderSettingsType_Names::CompressionMode_Name, false);
  }
  if (accessor.hasB_Frames()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getB_Frames(), node, VideoEncoderSettingsType_Names::B_Frames_Name);
  }
  if (accessor.hasGOP_Size()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getGOP_Size(), node, VideoEncoderSettingsType_Names::GOP_Size_Name);
  }
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getIntraRefreshMode(), node, VideoEncoderSettingsType_Names::IntraRefreshMode_Name);
  if (accessor.hasIntraRefreshPercentage()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getIntraRefreshPercentage(), node, VideoEncoderSettingsType_Names::IntraRefreshPercentage_Name);
  }
  extxml_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getColorBitDepth(), node, VideoEncoderSettingsType_Names::ColorBitDepth_Name);
  if (accessor.hasCrop()) {
    CropType::serialize(accessor.getCrop(), node, VideoEncoderSettingsType_Names::Crop_Name);
  }
  if (accessor.hasScaling()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getScaling(), node, VideoEncoderSettingsType_Names::Scaling_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

