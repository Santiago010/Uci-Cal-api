/** @file DamageEstimateMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/DamageEstimateMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/DMPI_ViolationType.h"
#include "extxml_uci/type/DamageCategoryEnum.h"
#include "extxml_uci/type/DamageEstimateDetailsType.h"
#include "extxml_uci/type/DamageEstimateID_Type.h"
#include "extxml_uci/type/DamageInformationWeatherSourceType.h"
#include "extxml_uci/type/DamageSummaryType.h"
#include "extxml_uci/type/Point3D_Type.h"
#include "extxml_uci/type/TaskID_Type.h"
#include "extxml_uci/type/ZoneType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/DamageEstimateMDT.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace DamageEstimateMDT_Names {

constexpr const char* Extern_Type_Name{"DamageEstimateMDT"};
constexpr const char* DamageEstimateID_Name{"DamageEstimateID"};
constexpr const char* EstimateType_Name{"EstimateType"};
constexpr const char* TaskID_Name{"TaskID"};
constexpr const char* ReleasePoint_Name{"ReleasePoint"};
constexpr const char* CompletionTime_Name{"CompletionTime"};
constexpr const char* EstimateZone_Name{"EstimateZone"};
constexpr const char* ReportingThreshold_Name{"ReportingThreshold"};
constexpr const char* Details_Name{"Details"};
constexpr const char* Violation_Name{"Violation"};
constexpr const char* Summary_Name{"Summary"};
constexpr const char* EstimateNarrative_Name{"EstimateNarrative"};
constexpr const char* InformationSource_Name{"InformationSource"};

} // namespace DamageEstimateMDT_Names

bool DamageEstimateMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::DamageEstimateMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DamageEstimateMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::DamageEstimateID_Name) {
      DamageEstimateID_Type::deserialize(valueType.second, accessor.getDamageEstimateID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::EstimateType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getEstimateType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::TaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.getTaskID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::ReleasePoint_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableReleasePoint(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::CompletionTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCompletionTime(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::EstimateZone_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEstimateZone(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::ReportingThreshold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReportingThreshold(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::Details_Name) {
      DamageEstimateDetailsType::deserialize(valueType.second, accessor.enableDetails(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::Violation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DamageEstimateMDT::Violation& boundedList = accessor.getViolation();
        const uci::type::DamageEstimateMDT::Violation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DMPI_ViolationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::Summary_Name) {
      DamageSummaryType::deserialize(valueType.second, accessor.enableSummary(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::EstimateNarrative_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimateNarrative(*value);
      }
    } else if (valueType.first == nsPrefix + DamageEstimateMDT_Names::InformationSource_Name) {
      DamageInformationWeatherSourceType::deserialize(valueType.second, accessor.enableInformationSource(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string DamageEstimateMDT::serialize(const uci::type::DamageEstimateMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? DamageEstimateMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, DamageEstimateMDT_Names::Extern_Type_Name);
  }
  DamageEstimateID_Type::serialize(accessor.getDamageEstimateID(), node, DamageEstimateMDT_Names::DamageEstimateID_Name);
  DamageCategoryEnum::serialize(accessor.getEstimateType(), node, DamageEstimateMDT_Names::EstimateType_Name, false);
  TaskID_Type::serialize(accessor.getTaskID(), node, DamageEstimateMDT_Names::TaskID_Name);
  if (accessor.hasReleasePoint()) {
    Point3D_Type::serialize(accessor.getReleasePoint(), node, DamageEstimateMDT_Names::ReleasePoint_Name);
  }
  extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getCompletionTime(), node, DamageEstimateMDT_Names::CompletionTime_Name);
  if (accessor.hasEstimateZone()) {
    ZoneType::serialize(accessor.getEstimateZone(), node, DamageEstimateMDT_Names::EstimateZone_Name);
  }
  extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getReportingThreshold(), node, DamageEstimateMDT_Names::ReportingThreshold_Name);
  if (accessor.hasDetails()) {
    DamageEstimateDetailsType::serialize(accessor.getDetails(), node, DamageEstimateMDT_Names::Details_Name);
  }
  {
    const uci::type::DamageEstimateMDT::Violation& boundedList = accessor.getViolation();
    for (uci::type::DamageEstimateMDT::Violation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DMPI_ViolationType::serialize(boundedList.at(i), node, DamageEstimateMDT_Names::Violation_Name);
    }
  }
  if (accessor.hasSummary()) {
    DamageSummaryType::serialize(accessor.getSummary(), node, DamageEstimateMDT_Names::Summary_Name);
  }
  if (accessor.hasEstimateNarrative()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getEstimateNarrative(), node, DamageEstimateMDT_Names::EstimateNarrative_Name);
  }
  if (accessor.hasInformationSource()) {
    DamageInformationWeatherSourceType::serialize(accessor.getInformationSource(), node, DamageEstimateMDT_Names::InformationSource_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

