/** @file PathSegmentType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/PathSegmentType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/CivilPathTerminatorType.h"
#include "extxml_uci/type/ClimbType.h"
#include "extxml_uci/type/ConditionalPathSegmentType.h"
#include "extxml_uci/type/EndPointType.h"
#include "extxml_uci/type/ForeignKeyType.h"
#include "extxml_uci/type/InertialStateRelativeType.h"
#include "extxml_uci/type/NextPathSegmentType.h"
#include "extxml_uci/type/PathSegmentSourceEnum.h"
#include "extxml_uci/type/PathSegmentSpeedType.h"
#include "extxml_uci/type/RemarksType.h"
#include "extxml_uci/type/SegmentID_Type.h"
#include "extxml_uci/type/TimeWindowType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/PathSegmentType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PathSegmentType_Names {

constexpr const char* Extern_Type_Name{"PathSegmentType"};
constexpr const char* PathSegmentID_Name{"PathSegmentID"};
constexpr const char* Source_Name{"Source"};
constexpr const char* EndPoint_Name{"EndPoint"};
constexpr const char* Locked_Name{"Locked"};
constexpr const char* Modified_Name{"Modified"};
constexpr const char* Speed_Name{"Speed"};
constexpr const char* CivilPathTerminator_Name{"CivilPathTerminator"};
constexpr const char* Climb_Name{"Climb"};
constexpr const char* MaximumRoll_Name{"MaximumRoll"};
constexpr const char* Acceleration_Name{"Acceleration"};
constexpr const char* NextPathSegment_Name{"NextPathSegment"};
constexpr const char* ConditionalPathSegment_Name{"ConditionalPathSegment"};
constexpr const char* InertialState_Name{"InertialState"};
constexpr const char* RequiredTimeOfArrival_Name{"RequiredTimeOfArrival"};
constexpr const char* Remarks_Name{"Remarks"};
constexpr const char* RequiredNavigationPerformanceInMeters_Name{"RequiredNavigationPerformanceInMeters"};
constexpr const char* Fix_Identifier_Name{"Fix_Identifier"};

} // namespace PathSegmentType_Names

bool PathSegmentType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PathSegmentType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PathSegmentType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::PathSegmentID_Name) {
      SegmentID_Type::deserialize(valueType.second, accessor.getPathSegmentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Source_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::EndPoint_Name) {
      EndPointType::deserialize(valueType.second, accessor.getEndPoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Locked_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLocked(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Modified_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setModified(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Speed_Name) {
      PathSegmentSpeedType::deserialize(valueType.second, accessor.enableSpeed(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::CivilPathTerminator_Name) {
      CivilPathTerminatorType::deserialize(valueType.second, accessor.enableCivilPathTerminator(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Climb_Name) {
      ClimbType::deserialize(valueType.second, accessor.enableClimb(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::MaximumRoll_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaximumRoll(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Acceleration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAcceleration(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::NextPathSegment_Name) {
      NextPathSegmentType::deserialize(valueType.second, accessor.enableNextPathSegment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::ConditionalPathSegment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PathSegmentType::ConditionalPathSegment& boundedList = accessor.getConditionalPathSegment();
        const uci::type::PathSegmentType::ConditionalPathSegment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ConditionalPathSegmentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::InertialState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PathSegmentType::InertialState& boundedList = accessor.getInertialState();
        const uci::type::PathSegmentType::InertialState::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::RequiredTimeOfArrival_Name) {
      TimeWindowType::deserialize(valueType.second, accessor.enableRequiredTimeOfArrival(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Remarks_Name) {
      RemarksType::deserialize(valueType.second, accessor.enableRemarks(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::RequiredNavigationPerformanceInMeters_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRequiredNavigationPerformanceInMeters(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PathSegmentType_Names::Fix_Identifier_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableFix_Identifier(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string PathSegmentType::serialize(const uci::type::PathSegmentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PathSegmentType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, PathSegmentType_Names::Extern_Type_Name);
  }
  SegmentID_Type::serialize(accessor.getPathSegmentID(), node, PathSegmentType_Names::PathSegmentID_Name);
  PathSegmentSourceEnum::serialize(accessor.getSource(), node, PathSegmentType_Names::Source_Name, false);
  EndPointType::serialize(accessor.getEndPoint(), node, PathSegmentType_Names::EndPoint_Name);
  if (accessor.hasLocked()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getLocked(), node, PathSegmentType_Names::Locked_Name);
  }
  if (accessor.hasModified()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getModified(), node, PathSegmentType_Names::Modified_Name);
  }
  if (accessor.hasSpeed()) {
    PathSegmentSpeedType::serialize(accessor.getSpeed(), node, PathSegmentType_Names::Speed_Name);
  }
  if (accessor.hasCivilPathTerminator()) {
    CivilPathTerminatorType::serialize(accessor.getCivilPathTerminator(), node, PathSegmentType_Names::CivilPathTerminator_Name);
  }
  if (accessor.hasClimb()) {
    ClimbType::serialize(accessor.getClimb(), node, PathSegmentType_Names::Climb_Name);
  }
  if (accessor.hasMaximumRoll()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getMaximumRoll(), node, PathSegmentType_Names::MaximumRoll_Name);
  }
  if (accessor.hasAcceleration()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getAcceleration(), node, PathSegmentType_Names::Acceleration_Name);
  }
  if (accessor.hasNextPathSegment()) {
    NextPathSegmentType::serialize(accessor.getNextPathSegment(), node, PathSegmentType_Names::NextPathSegment_Name);
  }
  {
    const uci::type::PathSegmentType::ConditionalPathSegment& boundedList = accessor.getConditionalPathSegment();
    for (uci::type::PathSegmentType::ConditionalPathSegment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ConditionalPathSegmentType::serialize(boundedList.at(i), node, PathSegmentType_Names::ConditionalPathSegment_Name);
    }
  }
  {
    const uci::type::PathSegmentType::InertialState& boundedList = accessor.getInertialState();
    for (uci::type::PathSegmentType::InertialState::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      InertialStateRelativeType::serialize(boundedList.at(i), node, PathSegmentType_Names::InertialState_Name);
    }
  }
  if (accessor.hasRequiredTimeOfArrival()) {
    TimeWindowType::serialize(accessor.getRequiredTimeOfArrival(), node, PathSegmentType_Names::RequiredTimeOfArrival_Name);
  }
  if (accessor.hasRemarks()) {
    RemarksType::serialize(accessor.getRemarks(), node, PathSegmentType_Names::Remarks_Name);
  }
  if (accessor.hasRequiredNavigationPerformanceInMeters()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getRequiredNavigationPerformanceInMeters(), node, PathSegmentType_Names::RequiredNavigationPerformanceInMeters_Name);
  }
  if (accessor.hasFix_Identifier()) {
    ForeignKeyType::serialize(accessor.getFix_Identifier(), node, PathSegmentType_Names::Fix_Identifier_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

