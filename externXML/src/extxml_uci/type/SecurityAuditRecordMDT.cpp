/** @file SecurityAuditRecordMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/SecurityAuditRecordMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/EventSeverityEnum.h"
#include "extxml_uci/type/SecurityAuditRecordID_Type.h"
#include "extxml_uci/type/SecurityEventOutcomeEnum.h"
#include "extxml_uci/type/SecurityEventType.h"
#include "extxml_uci/type/ServiceID_Type.h"
#include "extxml_uci/type/SubsystemID_Type.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/SecurityAuditRecordMDT.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SecurityAuditRecordMDT_Names {

constexpr const char* Extern_Type_Name{"SecurityAuditRecordMDT"};
constexpr const char* SecurityAuditRecordID_Name{"SecurityAuditRecordID"};
constexpr const char* EventTimestamp_Name{"EventTimestamp"};
constexpr const char* ServiceID_Name{"ServiceID"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* EventType_Name{"EventType"};
constexpr const char* EventOutcome_Name{"EventOutcome"};
constexpr const char* EventSeverity_Name{"EventSeverity"};

} // namespace SecurityAuditRecordMDT_Names

bool SecurityAuditRecordMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::SecurityAuditRecordMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SecurityAuditRecordMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SecurityAuditRecordMDT_Names::SecurityAuditRecordID_Name) {
      SecurityAuditRecordID_Type::deserialize(valueType.second, accessor.getSecurityAuditRecordID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityAuditRecordMDT_Names::EventTimestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEventTimestamp(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + SecurityAuditRecordMDT_Names::ServiceID_Name) {
      ServiceID_Type::deserialize(valueType.second, accessor.getServiceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityAuditRecordMDT_Names::SubsystemID_Name) {
      SubsystemID_Type::deserialize(valueType.second, accessor.enableSubsystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityAuditRecordMDT_Names::EventType_Name) {
      SecurityEventType::deserialize(valueType.second, accessor.getEventType(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityAuditRecordMDT_Names::EventOutcome_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getEventOutcome().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SecurityAuditRecordMDT_Names::EventSeverity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getEventSeverity().setValueFromName(*value);
      }
    }
  }
  return true;
}

std::string SecurityAuditRecordMDT::serialize(const uci::type::SecurityAuditRecordMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SecurityAuditRecordMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, SecurityAuditRecordMDT_Names::Extern_Type_Name);
  }
  SecurityAuditRecordID_Type::serialize(accessor.getSecurityAuditRecordID(), node, SecurityAuditRecordMDT_Names::SecurityAuditRecordID_Name);
  extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getEventTimestamp(), node, SecurityAuditRecordMDT_Names::EventTimestamp_Name);
  ServiceID_Type::serialize(accessor.getServiceID(), node, SecurityAuditRecordMDT_Names::ServiceID_Name);
  if (accessor.hasSubsystemID()) {
    SubsystemID_Type::serialize(accessor.getSubsystemID(), node, SecurityAuditRecordMDT_Names::SubsystemID_Name);
  }
  SecurityEventType::serialize(accessor.getEventType(), node, SecurityAuditRecordMDT_Names::EventType_Name);
  SecurityEventOutcomeEnum::serialize(accessor.getEventOutcome(), node, SecurityAuditRecordMDT_Names::EventOutcome_Name, false);
  EventSeverityEnum::serialize(accessor.getEventSeverity(), node, SecurityAuditRecordMDT_Names::EventSeverity_Name, false);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

