/** @file PO_ComponentSettingsProductSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/PO_ComponentSettingsProductSettingsType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/ComponentControlsA_Type.h"
#include "extxml_uci/type/JPEG_SettingsType.h"
#include "extxml_uci/type/MISP_PackingPlanType.h"
#include "extxml_uci/type/NITF_PackingPlanPET.h"
#include "extxml_uci/type/PO_ProductGeneratorOutputID_Type.h"
#include "extxml_uci/type/ProductResolutionType.h"
#include "extxml_uci/type/SecurityInformationType.h"
#include "extxml_uci/type/VideoOutputSettingsType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/PO_ComponentSettingsProductSettingsType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PO_ComponentSettingsProductSettingsType_Names {

constexpr const char* Extern_Type_Name{"PO_ComponentSettingsProductSettingsType"};
constexpr const char* GeneratorOutputID_Name{"GeneratorOutputID"};
constexpr const char* ProductClassification_Name{"ProductClassification"};
constexpr const char* JPEG_Settings_Name{"JPEG_Settings"};
constexpr const char* NITF_PackingPlan_Name{"NITF_PackingPlan"};
constexpr const char* MISP_Settings_Name{"MISP_Settings"};
constexpr const char* ProductRate_Name{"ProductRate"};
constexpr const char* ProductResolution_Name{"ProductResolution"};
constexpr const char* CompressionRatio_Name{"CompressionRatio"};
constexpr const char* ProductSize_Name{"ProductSize"};
constexpr const char* Interlaced_Name{"Interlaced"};
constexpr const char* ProductOutputControls_Name{"ProductOutputControls"};
constexpr const char* VideoOutput_Name{"VideoOutput"};

} // namespace PO_ComponentSettingsProductSettingsType_Names

bool PO_ComponentSettingsProductSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_ComponentSettingsProductSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_ComponentSettingsProductSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::GeneratorOutputID_Name) {
      PO_ProductGeneratorOutputID_Type::deserialize(valueType.second, accessor.getGeneratorOutputID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::ProductClassification_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.enableProductClassification(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::JPEG_Settings_Name) {
      JPEG_SettingsType::deserialize(valueType.second, accessor.enableJPEG_Settings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::NITF_PackingPlan_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableNITF_PackingPlan(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::MISP_Settings_Name) {
      MISP_PackingPlanType::deserialize(valueType.second, accessor.enableMISP_Settings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::ProductRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProductRate(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::ProductResolution_Name) {
      ProductResolutionType::deserialize(valueType.second, accessor.enableProductResolution(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::CompressionRatio_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCompressionRatio(extxml_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::ProductSize_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setProductSize(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::Interlaced_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInterlaced(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::ProductOutputControls_Name) {
      ComponentControlsA_Type::deserialize(valueType.second, accessor.enableProductOutputControls(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_ComponentSettingsProductSettingsType_Names::VideoOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_ComponentSettingsProductSettingsType::VideoOutput& boundedList = accessor.getVideoOutput();
        const uci::type::PO_ComponentSettingsProductSettingsType::VideoOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        VideoOutputSettingsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string PO_ComponentSettingsProductSettingsType::serialize(const uci::type::PO_ComponentSettingsProductSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PO_ComponentSettingsProductSettingsType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, PO_ComponentSettingsProductSettingsType_Names::Extern_Type_Name);
  }
  PO_ProductGeneratorOutputID_Type::serialize(accessor.getGeneratorOutputID(), node, PO_ComponentSettingsProductSettingsType_Names::GeneratorOutputID_Name);
  if (accessor.hasProductClassification()) {
    SecurityInformationType::serialize(accessor.getProductClassification(), node, PO_ComponentSettingsProductSettingsType_Names::ProductClassification_Name);
  }
  if (accessor.hasJPEG_Settings()) {
    JPEG_SettingsType::serialize(accessor.getJPEG_Settings(), node, PO_ComponentSettingsProductSettingsType_Names::JPEG_Settings_Name);
  }
  if (accessor.hasNITF_PackingPlan()) {
    NITF_PackingPlanPET::serialize(accessor.getNITF_PackingPlan(), node, PO_ComponentSettingsProductSettingsType_Names::NITF_PackingPlan_Name);
  }
  if (accessor.hasMISP_Settings()) {
    MISP_PackingPlanType::serialize(accessor.getMISP_Settings(), node, PO_ComponentSettingsProductSettingsType_Names::MISP_Settings_Name);
  }
  if (accessor.hasProductRate()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getProductRate(), node, PO_ComponentSettingsProductSettingsType_Names::ProductRate_Name);
  }
  if (accessor.hasProductResolution()) {
    ProductResolutionType::serialize(accessor.getProductResolution(), node, PO_ComponentSettingsProductSettingsType_Names::ProductResolution_Name);
  }
  if (accessor.hasCompressionRatio()) {
    extxml_uci::util::SerializationHelpers::serializeFloat(accessor.getCompressionRatio(), node, PO_ComponentSettingsProductSettingsType_Names::CompressionRatio_Name);
  }
  if (accessor.hasProductSize()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getProductSize(), node, PO_ComponentSettingsProductSettingsType_Names::ProductSize_Name);
  }
  if (accessor.hasInterlaced()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getInterlaced(), node, PO_ComponentSettingsProductSettingsType_Names::Interlaced_Name);
  }
  if (accessor.hasProductOutputControls()) {
    ComponentControlsA_Type::serialize(accessor.getProductOutputControls(), node, PO_ComponentSettingsProductSettingsType_Names::ProductOutputControls_Name);
  }
  {
    const uci::type::PO_ComponentSettingsProductSettingsType::VideoOutput& boundedList = accessor.getVideoOutput();
    for (uci::type::PO_ComponentSettingsProductSettingsType::VideoOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      VideoOutputSettingsType::serialize(boundedList.at(i), node, PO_ComponentSettingsProductSettingsType_Names::VideoOutput_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

