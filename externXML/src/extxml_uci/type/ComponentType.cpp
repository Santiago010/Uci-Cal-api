/** @file ComponentType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/ComponentType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/BIT_ID_Type.h"
#include "extxml_uci/type/ComponentDetailedStatusType.h"
#include "extxml_uci/type/ComponentExtendedStatusPET.h"
#include "extxml_uci/type/ComponentID_Type.h"
#include "extxml_uci/type/ComponentStateEnum.h"
#include "extxml_uci/type/SubsystemMaintenanceID_Type.h"
#include "extxml_uci/type/TemperatureStatusType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/ComponentType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace ComponentType_Names {

constexpr const char* Extern_Type_Name{"ComponentType"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* ComponentState_Name{"ComponentState"};
constexpr const char* DataTimestamp_Name{"DataTimestamp"};
constexpr const char* Temperature_Name{"Temperature"};
constexpr const char* BIT_ID_Name{"BIT_ID"};
constexpr const char* SubsystemCritical_Name{"SubsystemCritical"};
constexpr const char* DiagnosticTestID_Name{"DiagnosticTestID"};
constexpr const char* ExtendedStatus_Name{"ExtendedStatus"};
constexpr const char* SpecificStatus_Name{"SpecificStatus"};
constexpr const char* SubsystemMaintenanceTestID_Name{"SubsystemMaintenanceTestID"};

} // namespace ComponentType_Names

bool ComponentType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ComponentType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ComponentType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ComponentType_Names::ComponentID_Name) {
      ComponentID_Type::deserialize(valueType.second, accessor.getComponentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentType_Names::ComponentState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getComponentState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ComponentType_Names::DataTimestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDataTimestamp(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + ComponentType_Names::Temperature_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ComponentType::Temperature& boundedList = accessor.getTemperature();
        const uci::type::ComponentType::Temperature::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ComponentType_Names::BIT_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ComponentType::BIT_ID& boundedList = accessor.getBIT_ID();
        const uci::type::ComponentType::BIT_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        BIT_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ComponentType_Names::SubsystemCritical_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSubsystemCritical(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ComponentType_Names::DiagnosticTestID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ComponentType::DiagnosticTestID& boundedList = accessor.getDiagnosticTestID();
        const uci::type::ComponentType::DiagnosticTestID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        BIT_ID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ComponentType_Names::ExtendedStatus_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableExtendedStatus(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ComponentType_Names::SpecificStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ComponentType::SpecificStatus& boundedList = accessor.getSpecificStatus();
        const uci::type::ComponentType::SpecificStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ComponentType_Names::SubsystemMaintenanceTestID_Name) {
      SubsystemMaintenanceID_Type::deserialize(valueType.second, accessor.enableSubsystemMaintenanceTestID(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string ComponentType::serialize(const uci::type::ComponentType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? ComponentType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, ComponentType_Names::Extern_Type_Name);
  }
  ComponentID_Type::serialize(accessor.getComponentID(), node, ComponentType_Names::ComponentID_Name);
  ComponentStateEnum::serialize(accessor.getComponentState(), node, ComponentType_Names::ComponentState_Name, false);
  if (accessor.hasDataTimestamp()) {
    extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getDataTimestamp(), node, ComponentType_Names::DataTimestamp_Name);
  }
  {
    const uci::type::ComponentType::Temperature& boundedList = accessor.getTemperature();
    for (uci::type::ComponentType::Temperature::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      TemperatureStatusType::serialize(boundedList.at(i), node, ComponentType_Names::Temperature_Name);
    }
  }
  {
    const uci::type::ComponentType::BIT_ID& boundedList = accessor.getBIT_ID();
    for (uci::type::ComponentType::BIT_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      BIT_ID_Type::serialize(boundedList.at(i), node, ComponentType_Names::BIT_ID_Name);
    }
  }
  if (accessor.hasSubsystemCritical()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getSubsystemCritical(), node, ComponentType_Names::SubsystemCritical_Name);
  }
  {
    const uci::type::ComponentType::DiagnosticTestID& boundedList = accessor.getDiagnosticTestID();
    for (uci::type::ComponentType::DiagnosticTestID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      BIT_ID_Type::serialize(boundedList.at(i), node, ComponentType_Names::DiagnosticTestID_Name);
    }
  }
  if (accessor.hasExtendedStatus()) {
    ComponentExtendedStatusPET::serialize(accessor.getExtendedStatus(), node, ComponentType_Names::ExtendedStatus_Name);
  }
  {
    const uci::type::ComponentType::SpecificStatus& boundedList = accessor.getSpecificStatus();
    for (uci::type::ComponentType::SpecificStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ComponentDetailedStatusType::serialize(boundedList.at(i), node, ComponentType_Names::SpecificStatus_Name);
    }
  }
  if (accessor.hasSubsystemMaintenanceTestID()) {
    SubsystemMaintenanceID_Type::serialize(accessor.getSubsystemMaintenanceTestID(), node, ComponentType_Names::SubsystemMaintenanceTestID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

