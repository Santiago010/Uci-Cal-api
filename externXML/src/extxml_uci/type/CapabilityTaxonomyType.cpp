/** @file CapabilityTaxonomyType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/CapabilityTaxonomyType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/AMTI_SpecificDataType.h"
#include "extxml_uci/type/AO_CapabilityEnum.h"
#include "extxml_uci/type/ActionTypeEnum.h"
#include "extxml_uci/type/AirSampleCapabilityEnum.h"
#include "extxml_uci/type/COMINT_SpecificDataType.h"
#include "extxml_uci/type/CS_CapabilityEnum.h"
#include "extxml_uci/type/CapabilityInitiationEnum.h"
#include "extxml_uci/type/CargoDeliverySpecificDataType.h"
#include "extxml_uci/type/CommCapabilityEnum.h"
#include "extxml_uci/type/ESM_SpecificDataType.h"
#include "extxml_uci/type/EffectTypeEnum.h"
#include "extxml_uci/type/FlightCapabilityEnum.h"
#include "extxml_uci/type/OrbitChangeCapabilityEnum.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorCapabilityEnum.h"
#include "extxml_uci/type/OrbitalSurveillanceSpecificDataType.h"
#include "extxml_uci/type/PO_CapabilityEnum.h"
#include "extxml_uci/type/RefuelCapabilityEnum.h"
#include "extxml_uci/type/ResponseTypeEnum.h"
#include "extxml_uci/type/SAR_SpecificDataType.h"
#include "extxml_uci/type/SMTI_SpecificDataType.h"
#include "extxml_uci/type/StoreType.h"
#include "extxml_uci/type/SystemDeploymentEnum.h"
#include "extxml_uci/type/TacticalOrderCapabilityEnum.h"
#include "extxml_uci/type/WeatherRadarCapabilityEnum.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/CapabilityTaxonomyType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace CapabilityTaxonomyType_Names {

constexpr const char* Extern_Type_Name{"CapabilityTaxonomyType"};
constexpr const char* Action_Name{"Action"};
constexpr const char* AirSample_Name{"AirSample"};
constexpr const char* AMTI_Name{"AMTI"};
constexpr const char* AO_Name{"AO"};
constexpr const char* CargoDelivery_Name{"CargoDelivery"};
constexpr const char* COMINT_Name{"COMINT"};
constexpr const char* CommRelay_Name{"CommRelay"};
constexpr const char* CounterSpace_Name{"CounterSpace"};
constexpr const char* EA_Name{"EA"};
constexpr const char* Effect_Name{"Effect"};
constexpr const char* ESM_Name{"ESM"};
constexpr const char* Flight_Name{"Flight"};
constexpr const char* OrbitChange_Name{"OrbitChange"};
constexpr const char* OrbitalSurveillance_Name{"OrbitalSurveillance"};
constexpr const char* OrbitalSurveillanceSensor_Name{"OrbitalSurveillanceSensor"};
constexpr const char* PO_Name{"PO"};
constexpr const char* Refuel_Name{"Refuel"};
constexpr const char* Response_Name{"Response"};
constexpr const char* SAR_Name{"SAR"};
constexpr const char* SMTI_Name{"SMTI"};
constexpr const char* Strike_Name{"Strike"};
constexpr const char* SystemDeployment_Name{"SystemDeployment"};
constexpr const char* TacticalOrder_Name{"TacticalOrder"};
constexpr const char* WeatherRadar_Name{"WeatherRadar"};

} // namespace CapabilityTaxonomyType_Names

bool CapabilityTaxonomyType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilityTaxonomyType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CapabilityTaxonomyType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::Action_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::Action& boundedList = accessor.getAction();
        const uci::type::CapabilityTaxonomyType::Action::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::AirSample_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::AirSample& boundedList = accessor.getAirSample();
        const uci::type::CapabilityTaxonomyType::AirSample::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::AMTI_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::AMTI& boundedList = accessor.getAMTI();
        const uci::type::CapabilityTaxonomyType::AMTI::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        AMTI_SpecificDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::AO_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::AO& boundedList = accessor.getAO();
        const uci::type::CapabilityTaxonomyType::AO::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::CargoDelivery_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::CargoDelivery& boundedList = accessor.getCargoDelivery();
        const uci::type::CapabilityTaxonomyType::CargoDelivery::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CargoDeliverySpecificDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::COMINT_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::COMINT& boundedList = accessor.getCOMINT();
        const uci::type::CapabilityTaxonomyType::COMINT::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        COMINT_SpecificDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::CommRelay_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::CommRelay& boundedList = accessor.getCommRelay();
        const uci::type::CapabilityTaxonomyType::CommRelay::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::CounterSpace_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCounterSpace().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::EA_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::EA& boundedList = accessor.getEA();
        const uci::type::CapabilityTaxonomyType::EA::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::Effect_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::Effect& boundedList = accessor.getEffect();
        const uci::type::CapabilityTaxonomyType::Effect::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::ESM_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::ESM& boundedList = accessor.getESM();
        const uci::type::CapabilityTaxonomyType::ESM::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ESM_SpecificDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::Flight_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::Flight& boundedList = accessor.getFlight();
        const uci::type::CapabilityTaxonomyType::Flight::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::OrbitChange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::OrbitChange& boundedList = accessor.getOrbitChange();
        const uci::type::CapabilityTaxonomyType::OrbitChange::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::OrbitalSurveillance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::OrbitalSurveillance& boundedList = accessor.getOrbitalSurveillance();
        const uci::type::CapabilityTaxonomyType::OrbitalSurveillance::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        OrbitalSurveillanceSpecificDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::OrbitalSurveillanceSensor_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor& boundedList = accessor.getOrbitalSurveillanceSensor();
        const uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::PO_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::PO& boundedList = accessor.getPO();
        const uci::type::CapabilityTaxonomyType::PO::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::Refuel_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::Refuel& boundedList = accessor.getRefuel();
        const uci::type::CapabilityTaxonomyType::Refuel::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::Response_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::Response& boundedList = accessor.getResponse();
        const uci::type::CapabilityTaxonomyType::Response::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::SAR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::SAR& boundedList = accessor.getSAR();
        const uci::type::CapabilityTaxonomyType::SAR::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SAR_SpecificDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::SMTI_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::SMTI& boundedList = accessor.getSMTI();
        const uci::type::CapabilityTaxonomyType::SMTI::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SMTI_SpecificDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::Strike_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::Strike& boundedList = accessor.getStrike();
        const uci::type::CapabilityTaxonomyType::Strike::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::SystemDeployment_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::SystemDeployment& boundedList = accessor.getSystemDeployment();
        const uci::type::CapabilityTaxonomyType::SystemDeployment::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::TacticalOrder_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyType::TacticalOrder& boundedList = accessor.getTacticalOrder();
        const uci::type::CapabilityTaxonomyType::TacticalOrder::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyType_Names::WeatherRadar_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableWeatherRadar().setValueFromName(*value);
      }
    }
  }
  return true;
}

std::string CapabilityTaxonomyType::serialize(const uci::type::CapabilityTaxonomyType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? CapabilityTaxonomyType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, CapabilityTaxonomyType_Names::Extern_Type_Name);
  }
  {
    const uci::type::CapabilityTaxonomyType::Action& boundedList = accessor.getAction();
    for (uci::type::CapabilityTaxonomyType::Action::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ActionTypeEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::Action_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::AirSample& boundedList = accessor.getAirSample();
    for (uci::type::CapabilityTaxonomyType::AirSample::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      AirSampleCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::AirSample_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::AMTI& boundedList = accessor.getAMTI();
    for (uci::type::CapabilityTaxonomyType::AMTI::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      AMTI_SpecificDataType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::AMTI_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::AO& boundedList = accessor.getAO();
    for (uci::type::CapabilityTaxonomyType::AO::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      AO_CapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::AO_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::CargoDelivery& boundedList = accessor.getCargoDelivery();
    for (uci::type::CapabilityTaxonomyType::CargoDelivery::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CargoDeliverySpecificDataType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::CargoDelivery_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::COMINT& boundedList = accessor.getCOMINT();
    for (uci::type::CapabilityTaxonomyType::COMINT::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      COMINT_SpecificDataType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::COMINT_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::CommRelay& boundedList = accessor.getCommRelay();
    for (uci::type::CapabilityTaxonomyType::CommRelay::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CommCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::CommRelay_Name, false);
    }
  }
  if (accessor.hasCounterSpace()) {
    CS_CapabilityEnum::serialize(accessor.getCounterSpace(), node, CapabilityTaxonomyType_Names::CounterSpace_Name, false);
  }
  {
    const uci::type::CapabilityTaxonomyType::EA& boundedList = accessor.getEA();
    for (uci::type::CapabilityTaxonomyType::EA::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CapabilityInitiationEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::EA_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::Effect& boundedList = accessor.getEffect();
    for (uci::type::CapabilityTaxonomyType::Effect::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      EffectTypeEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::Effect_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::ESM& boundedList = accessor.getESM();
    for (uci::type::CapabilityTaxonomyType::ESM::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ESM_SpecificDataType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::ESM_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::Flight& boundedList = accessor.getFlight();
    for (uci::type::CapabilityTaxonomyType::Flight::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FlightCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::Flight_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::OrbitChange& boundedList = accessor.getOrbitChange();
    for (uci::type::CapabilityTaxonomyType::OrbitChange::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitChangeCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::OrbitChange_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::OrbitalSurveillance& boundedList = accessor.getOrbitalSurveillance();
    for (uci::type::CapabilityTaxonomyType::OrbitalSurveillance::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitalSurveillanceSpecificDataType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::OrbitalSurveillance_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor& boundedList = accessor.getOrbitalSurveillanceSensor();
    for (uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitalSurveillanceSensorCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::OrbitalSurveillanceSensor_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::PO& boundedList = accessor.getPO();
    for (uci::type::CapabilityTaxonomyType::PO::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_CapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::PO_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::Refuel& boundedList = accessor.getRefuel();
    for (uci::type::CapabilityTaxonomyType::Refuel::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      RefuelCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::Refuel_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::Response& boundedList = accessor.getResponse();
    for (uci::type::CapabilityTaxonomyType::Response::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ResponseTypeEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::Response_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::SAR& boundedList = accessor.getSAR();
    for (uci::type::CapabilityTaxonomyType::SAR::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SAR_SpecificDataType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::SAR_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::SMTI& boundedList = accessor.getSMTI();
    for (uci::type::CapabilityTaxonomyType::SMTI::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SMTI_SpecificDataType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::SMTI_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::Strike& boundedList = accessor.getStrike();
    for (uci::type::CapabilityTaxonomyType::Strike::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      StoreType::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::Strike_Name);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::SystemDeployment& boundedList = accessor.getSystemDeployment();
    for (uci::type::CapabilityTaxonomyType::SystemDeployment::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SystemDeploymentEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::SystemDeployment_Name, false);
    }
  }
  {
    const uci::type::CapabilityTaxonomyType::TacticalOrder& boundedList = accessor.getTacticalOrder();
    for (uci::type::CapabilityTaxonomyType::TacticalOrder::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      TacticalOrderCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyType_Names::TacticalOrder_Name, false);
    }
  }
  if (accessor.hasWeatherRadar()) {
    WeatherRadarCapabilityEnum::serialize(accessor.getWeatherRadar(), node, CapabilityTaxonomyType_Names::WeatherRadar_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

