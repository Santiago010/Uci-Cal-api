/** @file OpRoutingMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/OpRoutingMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/MissionTraceabilityType.h"
#include "extxml_uci/type/OpDescriptionType.h"
#include "extxml_uci/type/OpRoutingID_Type.h"
#include "extxml_uci/type/ScheduleType.h"
#include "extxml_uci/type/SeparationParametersType.h"
#include "extxml_uci/type/SpecificBlueSeparationType.h"
#include "extxml_uci/type/SpecificRedSeparationType.h"
#include "extxml_uci/type/SystemID_Type.h"
#include "extxml_uci/type/ZoneType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/OpRoutingMDT.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace OpRoutingMDT_Names {

constexpr const char* Extern_Type_Name{"OpRoutingMDT"};
constexpr const char* OpRoutingID_Name{"OpRoutingID"};
constexpr const char* DefaultBlueSeparation_Name{"DefaultBlueSeparation"};
constexpr const char* DefaultRedSeparation_Name{"DefaultRedSeparation"};
constexpr const char* SpecificBlueSeparation_Name{"SpecificBlueSeparation"};
constexpr const char* SpecificRedSeparation_Name{"SpecificRedSeparation"};
constexpr const char* OpDescription_Name{"OpDescription"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* ApplicableZone_Name{"ApplicableZone"};
constexpr const char* Schedule_Name{"Schedule"};
constexpr const char* MissionTraceability_Name{"MissionTraceability"};

} // namespace OpRoutingMDT_Names

bool OpRoutingMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpRoutingMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpRoutingMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::OpRoutingID_Name) {
      OpRoutingID_Type::deserialize(valueType.second, accessor.getOpRoutingID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::DefaultBlueSeparation_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDefaultBlueSeparation(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::DefaultRedSeparation_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDefaultRedSeparation(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::SpecificBlueSeparation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpRoutingMDT::SpecificBlueSeparation& boundedList = accessor.getSpecificBlueSeparation();
        const uci::type::OpRoutingMDT::SpecificBlueSeparation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SpecificBlueSeparationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::SpecificRedSeparation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpRoutingMDT::SpecificRedSeparation& boundedList = accessor.getSpecificRedSeparation();
        const uci::type::OpRoutingMDT::SpecificRedSeparation::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SpecificRedSeparationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::OpDescription_Name) {
      OpDescriptionType::deserialize(valueType.second, accessor.enableOpDescription(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::SystemID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpRoutingMDT::SystemID& boundedList = accessor.getSystemID();
        const uci::type::OpRoutingMDT::SystemID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::ApplicableZone_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableApplicableZone(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::Schedule_Name) {
      ScheduleType::deserialize(valueType.second, accessor.enableSchedule(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpRoutingMDT_Names::MissionTraceability_Name) {
      MissionTraceabilityType::deserialize(valueType.second, accessor.enableMissionTraceability(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string OpRoutingMDT::serialize(const uci::type::OpRoutingMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? OpRoutingMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, OpRoutingMDT_Names::Extern_Type_Name);
  }
  OpRoutingID_Type::serialize(accessor.getOpRoutingID(), node, OpRoutingMDT_Names::OpRoutingID_Name);
  if (accessor.hasDefaultBlueSeparation()) {
    SeparationParametersType::serialize(accessor.getDefaultBlueSeparation(), node, OpRoutingMDT_Names::DefaultBlueSeparation_Name);
  }
  if (accessor.hasDefaultRedSeparation()) {
    SeparationParametersType::serialize(accessor.getDefaultRedSeparation(), node, OpRoutingMDT_Names::DefaultRedSeparation_Name);
  }
  {
    const uci::type::OpRoutingMDT::SpecificBlueSeparation& boundedList = accessor.getSpecificBlueSeparation();
    for (uci::type::OpRoutingMDT::SpecificBlueSeparation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SpecificBlueSeparationType::serialize(boundedList.at(i), node, OpRoutingMDT_Names::SpecificBlueSeparation_Name);
    }
  }
  {
    const uci::type::OpRoutingMDT::SpecificRedSeparation& boundedList = accessor.getSpecificRedSeparation();
    for (uci::type::OpRoutingMDT::SpecificRedSeparation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SpecificRedSeparationType::serialize(boundedList.at(i), node, OpRoutingMDT_Names::SpecificRedSeparation_Name);
    }
  }
  if (accessor.hasOpDescription()) {
    OpDescriptionType::serialize(accessor.getOpDescription(), node, OpRoutingMDT_Names::OpDescription_Name);
  }
  {
    const uci::type::OpRoutingMDT::SystemID& boundedList = accessor.getSystemID();
    for (uci::type::OpRoutingMDT::SystemID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SystemID_Type::serialize(boundedList.at(i), node, OpRoutingMDT_Names::SystemID_Name);
    }
  }
  if (accessor.hasApplicableZone()) {
    ZoneType::serialize(accessor.getApplicableZone(), node, OpRoutingMDT_Names::ApplicableZone_Name);
  }
  if (accessor.hasSchedule()) {
    ScheduleType::serialize(accessor.getSchedule(), node, OpRoutingMDT_Names::Schedule_Name);
  }
  if (accessor.hasMissionTraceability()) {
    MissionTraceabilityType::serialize(accessor.getMissionTraceability(), node, OpRoutingMDT_Names::MissionTraceability_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

