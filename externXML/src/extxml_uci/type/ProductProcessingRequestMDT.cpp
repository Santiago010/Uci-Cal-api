/** @file ProductProcessingRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/ProductProcessingRequestMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/CapabilityID_Type.h"
#include "extxml_uci/type/ComparableRankingType.h"
#include "extxml_uci/type/DownloadPriorityEnum.h"
#include "extxml_uci/type/ID_Type.h"
#include "extxml_uci/type/ProcessingRequirementsType.h"
#include "extxml_uci/type/RequestBaseType.h"
#include "extxml_uci/type/SystemID_Type.h"
#include "extxml_uci/type/TraceabilityType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/ProductProcessingRequestMDT.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace ProductProcessingRequestMDT_Names {

constexpr const char* Extern_Type_Name{"ProductProcessingRequestMDT"};
constexpr const char* FunctionID_Name{"FunctionID"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* Traceability_Name{"Traceability"};
constexpr const char* Rank_Name{"Rank"};
constexpr const char* PreemptLowerRank_Name{"PreemptLowerRank"};
constexpr const char* ProcessingRequirements_Name{"ProcessingRequirements"};

} // namespace ProductProcessingRequestMDT_Names

bool ProductProcessingRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductProcessingRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductProcessingRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductProcessingRequestMDT_Names::FunctionID_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableFunctionID(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductProcessingRequestMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductProcessingRequestMDT_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductProcessingRequestMDT_Names::Traceability_Name) {
      TraceabilityType::deserialize(valueType.second, accessor.enableTraceability(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductProcessingRequestMDT_Names::Rank_Name) {
      ComparableRankingType::deserialize(valueType.second, accessor.getRank(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductProcessingRequestMDT_Names::PreemptLowerRank_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getPreemptLowerRank().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ProductProcessingRequestMDT_Names::ProcessingRequirements_Name) {
      ProcessingRequirementsType::deserialize(valueType.second, accessor.getProcessingRequirements(), nodeName, nsPrefix);
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string ProductProcessingRequestMDT::serialize(const uci::type::ProductProcessingRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? ProductProcessingRequestMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, ProductProcessingRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasFunctionID()) {
    ID_Type::serialize(accessor.getFunctionID(), node, ProductProcessingRequestMDT_Names::FunctionID_Name);
  }
  if (accessor.hasSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, ProductProcessingRequestMDT_Names::SystemID_Name);
  }
  if (accessor.hasCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getCapabilityID(), node, ProductProcessingRequestMDT_Names::CapabilityID_Name);
  }
  if (accessor.hasTraceability()) {
    TraceabilityType::serialize(accessor.getTraceability(), node, ProductProcessingRequestMDT_Names::Traceability_Name);
  }
  ComparableRankingType::serialize(accessor.getRank(), node, ProductProcessingRequestMDT_Names::Rank_Name);
  DownloadPriorityEnum::serialize(accessor.getPreemptLowerRank(), node, ProductProcessingRequestMDT_Names::PreemptLowerRank_Name, false);
  ProcessingRequirementsType::serialize(accessor.getProcessingRequirements(), node, ProductProcessingRequestMDT_Names::ProcessingRequirements_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

