/** @file RadarAltimeterActivityMetricsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/RadarAltimeterActivityMetricsType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/ConcurrentCollectionDetailsType.h"
#include "extxml_uci/type/RadarAltimeterActivityEstimatedPerformanceType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/RadarAltimeterActivityMetricsType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace RadarAltimeterActivityMetricsType_Names {

constexpr const char* Extern_Type_Name{"RadarAltimeterActivityMetricsType"};
constexpr const char* Attempts_Name{"Attempts"};
constexpr const char* ActualRevisitPeriod_Name{"ActualRevisitPeriod"};
constexpr const char* ActualStartTime_Name{"ActualStartTime"};
constexpr const char* ActualStopTime_Name{"ActualStopTime"};
constexpr const char* ConcurrentActivity_Name{"ConcurrentActivity"};
constexpr const char* PercentRadarTimeline_Name{"PercentRadarTimeline"};
constexpr const char* PercentageInFOV_Name{"PercentageInFOV"};
constexpr const char* EstimatedERP_Name{"EstimatedERP"};
constexpr const char* EstimatedPerformance_Name{"EstimatedPerformance"};
constexpr const char* TimeToService_Name{"TimeToService"};
constexpr const char* LastTimeToService_Name{"LastTimeToService"};
constexpr const char* AverageTimeToService_Name{"AverageTimeToService"};

} // namespace RadarAltimeterActivityMetricsType_Names

bool RadarAltimeterActivityMetricsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RadarAltimeterActivityMetricsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RadarAltimeterActivityMetricsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::Attempts_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAttempts(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::ActualRevisitPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualRevisitPeriod(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::ActualStartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStartTime(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::ActualStopTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStopTime(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::ConcurrentActivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RadarAltimeterActivityMetricsType::ConcurrentActivity& boundedList = accessor.getConcurrentActivity();
        const uci::type::RadarAltimeterActivityMetricsType::ConcurrentActivity::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ConcurrentCollectionDetailsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::PercentRadarTimeline_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentRadarTimeline(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::PercentageInFOV_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentageInFOV(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::EstimatedERP_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEstimatedERP(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::EstimatedPerformance_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RadarAltimeterActivityMetricsType::EstimatedPerformance& boundedList = accessor.getEstimatedPerformance();
        const uci::type::RadarAltimeterActivityMetricsType::EstimatedPerformance::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        RadarAltimeterActivityEstimatedPerformanceType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::TimeToService_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeToService(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::LastTimeToService_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLastTimeToService(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + RadarAltimeterActivityMetricsType_Names::AverageTimeToService_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAverageTimeToService(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    }
  }
  return true;
}

std::string RadarAltimeterActivityMetricsType::serialize(const uci::type::RadarAltimeterActivityMetricsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? RadarAltimeterActivityMetricsType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, RadarAltimeterActivityMetricsType_Names::Extern_Type_Name);
  }
  if (accessor.hasAttempts()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAttempts(), node, RadarAltimeterActivityMetricsType_Names::Attempts_Name);
  }
  if (accessor.hasActualRevisitPeriod()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getActualRevisitPeriod(), node, RadarAltimeterActivityMetricsType_Names::ActualRevisitPeriod_Name);
  }
  if (accessor.hasActualStartTime()) {
    extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStartTime(), node, RadarAltimeterActivityMetricsType_Names::ActualStartTime_Name);
  }
  if (accessor.hasActualStopTime()) {
    extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStopTime(), node, RadarAltimeterActivityMetricsType_Names::ActualStopTime_Name);
  }
  {
    const uci::type::RadarAltimeterActivityMetricsType::ConcurrentActivity& boundedList = accessor.getConcurrentActivity();
    for (uci::type::RadarAltimeterActivityMetricsType::ConcurrentActivity::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ConcurrentCollectionDetailsType::serialize(boundedList.at(i), node, RadarAltimeterActivityMetricsType_Names::ConcurrentActivity_Name);
    }
  }
  if (accessor.hasPercentRadarTimeline()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentRadarTimeline(), node, RadarAltimeterActivityMetricsType_Names::PercentRadarTimeline_Name);
  }
  if (accessor.hasPercentageInFOV()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentageInFOV(), node, RadarAltimeterActivityMetricsType_Names::PercentageInFOV_Name);
  }
  if (accessor.hasEstimatedERP()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getEstimatedERP(), node, RadarAltimeterActivityMetricsType_Names::EstimatedERP_Name);
  }
  {
    const uci::type::RadarAltimeterActivityMetricsType::EstimatedPerformance& boundedList = accessor.getEstimatedPerformance();
    for (uci::type::RadarAltimeterActivityMetricsType::EstimatedPerformance::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      RadarAltimeterActivityEstimatedPerformanceType::serialize(boundedList.at(i), node, RadarAltimeterActivityMetricsType_Names::EstimatedPerformance_Name);
    }
  }
  if (accessor.hasTimeToService()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getTimeToService(), node, RadarAltimeterActivityMetricsType_Names::TimeToService_Name);
  }
  if (accessor.hasLastTimeToService()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getLastTimeToService(), node, RadarAltimeterActivityMetricsType_Names::LastTimeToService_Name);
  }
  if (accessor.hasAverageTimeToService()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getAverageTimeToService(), node, RadarAltimeterActivityMetricsType_Names::AverageTimeToService_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

