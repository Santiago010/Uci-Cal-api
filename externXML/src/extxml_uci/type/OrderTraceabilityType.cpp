/** @file OrderTraceabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/OrderTraceabilityType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/ACO_FileTraceabilityType.h"
#include "extxml_uci/type/ACTDF_FileTraceabilityType.h"
#include "extxml_uci/type/AOCO_TraceabilityType.h"
#include "extxml_uci/type/ATO_FileTraceabilityType.h"
#include "extxml_uci/type/CollectionDeckTraceabilityType.h"
#include "extxml_uci/type/FileMetadataID_Type.h"
#include "extxml_uci/type/RSTA_FileTraceabilityType.h"
#include "extxml_uci/type/SystemID_Type.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/OrderTraceabilityType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace OrderTraceabilityType_Names {

constexpr const char* Extern_Type_Name{"OrderTraceabilityType"};
constexpr const char* OrderSourceID_Name{"OrderSourceID"};
constexpr const char* ATO_Name{"ATO"};
constexpr const char* ACO_Name{"ACO"};
constexpr const char* ACTDF_Name{"ACTDF"};
constexpr const char* RSTA_Name{"RSTA"};
constexpr const char* ROME_Identifier_Name{"ROME_Identifier"};
constexpr const char* CollectionDeck_Name{"CollectionDeck"};
constexpr const char* AOCO_Name{"AOCO"};
constexpr const char* SOD_ID_Name{"SOD_ID"};
constexpr const char* MSP_ID_Name{"MSP_ID"};
constexpr const char* ISSP_ID_Name{"ISSP_ID"};
constexpr const char* JIPTL_ID_Name{"JIPTL_ID"};
constexpr const char* JSTO_ID_Name{"JSTO_ID"};
constexpr const char* PLANORD_ID_Name{"PLANORD_ID"};
constexpr const char* OPORD_ID_Name{"OPORD_ID"};
constexpr const char* WARNORD_ID_Name{"WARNORD_ID"};
constexpr const char* DEPORD_ID_Name{"DEPORD_ID"};
constexpr const char* ALERTORD_ID_Name{"ALERTORD_ID"};
constexpr const char* FRAGORD_ID_Name{"FRAGORD_ID"};
constexpr const char* EXORD_ID_Name{"EXORD_ID"};
constexpr const char* SPINS_ID_Name{"SPINS_ID"};
constexpr const char* COMMANDERS_INTENT_ID_Name{"COMMANDERS_INTENT_ID"};
constexpr const char* OTHER_FILE_ID_Name{"OTHER_FILE_ID"};

} // namespace OrderTraceabilityType_Names

bool OrderTraceabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrderTraceabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrderTraceabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::OrderSourceID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getOrderSourceID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::ATO_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::ATO& boundedList = accessor.getATO();
        const uci::type::OrderTraceabilityType::ATO::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ATO_FileTraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::ACO_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::ACO& boundedList = accessor.getACO();
        const uci::type::OrderTraceabilityType::ACO::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ACO_FileTraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::ACTDF_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::ACTDF& boundedList = accessor.getACTDF();
        const uci::type::OrderTraceabilityType::ACTDF::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ACTDF_FileTraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::RSTA_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::RSTA& boundedList = accessor.getRSTA();
        const uci::type::OrderTraceabilityType::RSTA::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        RSTA_FileTraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::ROME_Identifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::ROME_Identifier& boundedList = accessor.getROME_Identifier();
        const uci::type::OrderTraceabilityType::ROME_Identifier::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::CollectionDeck_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::CollectionDeck& boundedList = accessor.getCollectionDeck();
        const uci::type::OrderTraceabilityType::CollectionDeck::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CollectionDeckTraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::AOCO_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::AOCO& boundedList = accessor.getAOCO();
        const uci::type::OrderTraceabilityType::AOCO::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        AOCO_TraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::SOD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::SOD_ID& boundedList = accessor.getSOD_ID();
        const uci::type::OrderTraceabilityType::SOD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::MSP_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::MSP_ID& boundedList = accessor.getMSP_ID();
        const uci::type::OrderTraceabilityType::MSP_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::ISSP_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::ISSP_ID& boundedList = accessor.getISSP_ID();
        const uci::type::OrderTraceabilityType::ISSP_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::JIPTL_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::JIPTL_ID& boundedList = accessor.getJIPTL_ID();
        const uci::type::OrderTraceabilityType::JIPTL_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::JSTO_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::JSTO_ID& boundedList = accessor.getJSTO_ID();
        const uci::type::OrderTraceabilityType::JSTO_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::PLANORD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::PLANORD_ID& boundedList = accessor.getPLANORD_ID();
        const uci::type::OrderTraceabilityType::PLANORD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::OPORD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::OPORD_ID& boundedList = accessor.getOPORD_ID();
        const uci::type::OrderTraceabilityType::OPORD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::WARNORD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::WARNORD_ID& boundedList = accessor.getWARNORD_ID();
        const uci::type::OrderTraceabilityType::WARNORD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::DEPORD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::DEPORD_ID& boundedList = accessor.getDEPORD_ID();
        const uci::type::OrderTraceabilityType::DEPORD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::ALERTORD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::ALERTORD_ID& boundedList = accessor.getALERTORD_ID();
        const uci::type::OrderTraceabilityType::ALERTORD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::FRAGORD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::FRAGORD_ID& boundedList = accessor.getFRAGORD_ID();
        const uci::type::OrderTraceabilityType::FRAGORD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::EXORD_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::EXORD_ID& boundedList = accessor.getEXORD_ID();
        const uci::type::OrderTraceabilityType::EXORD_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::SPINS_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::SPINS_ID& boundedList = accessor.getSPINS_ID();
        const uci::type::OrderTraceabilityType::SPINS_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::COMMANDERS_INTENT_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID& boundedList = accessor.getCOMMANDERS_INTENT_ID();
        const uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OrderTraceabilityType_Names::OTHER_FILE_ID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OrderTraceabilityType::OTHER_FILE_ID& boundedList = accessor.getOTHER_FILE_ID();
        const uci::type::OrderTraceabilityType::OTHER_FILE_ID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string OrderTraceabilityType::serialize(const uci::type::OrderTraceabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? OrderTraceabilityType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, OrderTraceabilityType_Names::Extern_Type_Name);
  }
  SystemID_Type::serialize(accessor.getOrderSourceID(), node, OrderTraceabilityType_Names::OrderSourceID_Name);
  {
    const uci::type::OrderTraceabilityType::ATO& boundedList = accessor.getATO();
    for (uci::type::OrderTraceabilityType::ATO::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ATO_FileTraceabilityType::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::ATO_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::ACO& boundedList = accessor.getACO();
    for (uci::type::OrderTraceabilityType::ACO::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ACO_FileTraceabilityType::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::ACO_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::ACTDF& boundedList = accessor.getACTDF();
    for (uci::type::OrderTraceabilityType::ACTDF::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ACTDF_FileTraceabilityType::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::ACTDF_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::RSTA& boundedList = accessor.getRSTA();
    for (uci::type::OrderTraceabilityType::RSTA::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      RSTA_FileTraceabilityType::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::RSTA_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::ROME_Identifier& boundedList = accessor.getROME_Identifier();
    for (uci::type::OrderTraceabilityType::ROME_Identifier::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      extxml_uci::util::SerializationHelpers::serializeString(boundedList.at(i), node, OrderTraceabilityType_Names::ROME_Identifier_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::CollectionDeck& boundedList = accessor.getCollectionDeck();
    for (uci::type::OrderTraceabilityType::CollectionDeck::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CollectionDeckTraceabilityType::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::CollectionDeck_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::AOCO& boundedList = accessor.getAOCO();
    for (uci::type::OrderTraceabilityType::AOCO::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      AOCO_TraceabilityType::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::AOCO_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::SOD_ID& boundedList = accessor.getSOD_ID();
    for (uci::type::OrderTraceabilityType::SOD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::SOD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::MSP_ID& boundedList = accessor.getMSP_ID();
    for (uci::type::OrderTraceabilityType::MSP_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::MSP_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::ISSP_ID& boundedList = accessor.getISSP_ID();
    for (uci::type::OrderTraceabilityType::ISSP_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::ISSP_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::JIPTL_ID& boundedList = accessor.getJIPTL_ID();
    for (uci::type::OrderTraceabilityType::JIPTL_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::JIPTL_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::JSTO_ID& boundedList = accessor.getJSTO_ID();
    for (uci::type::OrderTraceabilityType::JSTO_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::JSTO_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::PLANORD_ID& boundedList = accessor.getPLANORD_ID();
    for (uci::type::OrderTraceabilityType::PLANORD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::PLANORD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::OPORD_ID& boundedList = accessor.getOPORD_ID();
    for (uci::type::OrderTraceabilityType::OPORD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::OPORD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::WARNORD_ID& boundedList = accessor.getWARNORD_ID();
    for (uci::type::OrderTraceabilityType::WARNORD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::WARNORD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::DEPORD_ID& boundedList = accessor.getDEPORD_ID();
    for (uci::type::OrderTraceabilityType::DEPORD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::DEPORD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::ALERTORD_ID& boundedList = accessor.getALERTORD_ID();
    for (uci::type::OrderTraceabilityType::ALERTORD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::ALERTORD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::FRAGORD_ID& boundedList = accessor.getFRAGORD_ID();
    for (uci::type::OrderTraceabilityType::FRAGORD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::FRAGORD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::EXORD_ID& boundedList = accessor.getEXORD_ID();
    for (uci::type::OrderTraceabilityType::EXORD_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::EXORD_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::SPINS_ID& boundedList = accessor.getSPINS_ID();
    for (uci::type::OrderTraceabilityType::SPINS_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::SPINS_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID& boundedList = accessor.getCOMMANDERS_INTENT_ID();
    for (uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::COMMANDERS_INTENT_ID_Name);
    }
  }
  {
    const uci::type::OrderTraceabilityType::OTHER_FILE_ID& boundedList = accessor.getOTHER_FILE_ID();
    for (uci::type::OrderTraceabilityType::OTHER_FILE_ID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, OrderTraceabilityType_Names::OTHER_FILE_ID_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

