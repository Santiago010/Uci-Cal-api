/** @file CS_SensorDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/CS_SensorDataType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/CS_SensorPointingEnum.h"
#include "extxml_uci/type/CS_SensorTargetingEnum.h"
#include "extxml_uci/type/CS_SensorTypeEnum.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/CS_SensorDataType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace CS_SensorDataType_Names {

constexpr const char* Extern_Type_Name{"CS_SensorDataType"};
constexpr const char* SensorType_Name{"SensorType"};
constexpr const char* SensorPointing_Name{"SensorPointing"};
constexpr const char* InnerConeAngle_Name{"InnerConeAngle"};
constexpr const char* OuterConeAngle_Name{"OuterConeAngle"};
constexpr const char* MinClockAngle_Name{"MinClockAngle"};
constexpr const char* MaxClockAngle_Name{"MaxClockAngle"};
constexpr const char* SensorTargeting_Name{"SensorTargeting"};
constexpr const char* BoreSightAzimuth_Name{"BoreSightAzimuth"};
constexpr const char* BoreSightElevation_Name{"BoreSightElevation"};
constexpr const char* MinAltitude_Name{"MinAltitude"};
constexpr const char* MaxAltitude_Name{"MaxAltitude"};
constexpr const char* AntennaDiameter_Name{"AntennaDiameter"};
constexpr const char* AntennaFreq_Name{"AntennaFreq"};
constexpr const char* NumSteps_Name{"NumSteps"};

} // namespace CS_SensorDataType_Names

bool CS_SensorDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CS_SensorDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CS_SensorDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::SensorType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSensorType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::SensorPointing_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSensorPointing().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::InnerConeAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInnerConeAngle(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::OuterConeAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOuterConeAngle(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::MinClockAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinClockAngle(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::MaxClockAngle_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaxClockAngle(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::SensorTargeting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSensorTargeting().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::BoreSightAzimuth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBoreSightAzimuth(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::BoreSightElevation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBoreSightElevation(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::MinAltitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMinAltitude(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::MaxAltitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMaxAltitude(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::AntennaDiameter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAntennaDiameter(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::AntennaFreq_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAntennaFreq(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CS_SensorDataType_Names::NumSteps_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumSteps(extxml_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    }
  }
  return true;
}

std::string CS_SensorDataType::serialize(const uci::type::CS_SensorDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? CS_SensorDataType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, CS_SensorDataType_Names::Extern_Type_Name);
  }
  CS_SensorTypeEnum::serialize(accessor.getSensorType(), node, CS_SensorDataType_Names::SensorType_Name, false);
  CS_SensorPointingEnum::serialize(accessor.getSensorPointing(), node, CS_SensorDataType_Names::SensorPointing_Name, false);
  if (accessor.hasInnerConeAngle()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getInnerConeAngle(), node, CS_SensorDataType_Names::InnerConeAngle_Name);
  }
  if (accessor.hasOuterConeAngle()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getOuterConeAngle(), node, CS_SensorDataType_Names::OuterConeAngle_Name);
  }
  if (accessor.hasMinClockAngle()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getMinClockAngle(), node, CS_SensorDataType_Names::MinClockAngle_Name);
  }
  if (accessor.hasMaxClockAngle()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getMaxClockAngle(), node, CS_SensorDataType_Names::MaxClockAngle_Name);
  }
  if (accessor.hasSensorTargeting()) {
    CS_SensorTargetingEnum::serialize(accessor.getSensorTargeting(), node, CS_SensorDataType_Names::SensorTargeting_Name, false);
  }
  if (accessor.hasBoreSightAzimuth()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getBoreSightAzimuth(), node, CS_SensorDataType_Names::BoreSightAzimuth_Name);
  }
  if (accessor.hasBoreSightElevation()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getBoreSightElevation(), node, CS_SensorDataType_Names::BoreSightElevation_Name);
  }
  if (accessor.hasMinAltitude()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getMinAltitude(), node, CS_SensorDataType_Names::MinAltitude_Name);
  }
  if (accessor.hasMaxAltitude()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getMaxAltitude(), node, CS_SensorDataType_Names::MaxAltitude_Name);
  }
  if (accessor.hasAntennaDiameter()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getAntennaDiameter(), node, CS_SensorDataType_Names::AntennaDiameter_Name);
  }
  if (accessor.hasAntennaFreq()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getAntennaFreq(), node, CS_SensorDataType_Names::AntennaFreq_Name);
  }
  if (accessor.hasNumSteps()) {
    extxml_uci::util::SerializationHelpers::serializeInt(accessor.getNumSteps(), node, CS_SensorDataType_Names::NumSteps_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

