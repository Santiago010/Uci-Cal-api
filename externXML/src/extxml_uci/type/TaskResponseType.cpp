/** @file TaskResponseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/TaskResponseType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/AMTI_TaskBaseType.h"
#include "extxml_uci/type/AO_TaskBaseType.h"
#include "extxml_uci/type/AirSampleTaskBaseType.h"
#include "extxml_uci/type/COMINT_TaskBaseType.h"
#include "extxml_uci/type/CommRelayTaskBaseType.h"
#include "extxml_uci/type/EA_ResponseType.h"
#include "extxml_uci/type/ESM_TaskBaseType.h"
#include "extxml_uci/type/FlightTaskBaseType.h"
#include "extxml_uci/type/OrbitChangeTaskBaseType.h"
#include "extxml_uci/type/OrbitalSurveillanceTaskBaseType.h"
#include "extxml_uci/type/PO_TaskBaseType.h"
#include "extxml_uci/type/RefuelTaskBaseType.h"
#include "extxml_uci/type/SAR_TaskBaseType.h"
#include "extxml_uci/type/SMTI_TaskBaseType.h"
#include "extxml_uci/type/StrikeTaskWeaponListType.h"
#include "extxml_uci/type/SystemDeploymentTaskBaseType.h"
#include "extxml_uci/type/TacticalOrderTaskBaseType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/TaskResponseType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace TaskResponseType_Names {

constexpr const char* Extern_Type_Name{"TaskResponseType"};
constexpr const char* AirSample_Name{"AirSample"};
constexpr const char* AMTI_Name{"AMTI"};
constexpr const char* AO_Name{"AO"};
constexpr const char* CargoDelivery_Name{"CargoDelivery"};
constexpr const char* COMINT_Name{"COMINT"};
constexpr const char* CommRelay_Name{"CommRelay"};
constexpr const char* EA_Name{"EA"};
constexpr const char* ESM_Name{"ESM"};
constexpr const char* Flight_Name{"Flight"};
constexpr const char* OrbitChange_Name{"OrbitChange"};
constexpr const char* OrbitalSurveillance_Name{"OrbitalSurveillance"};
constexpr const char* PO_Name{"PO"};
constexpr const char* Refuel_Name{"Refuel"};
constexpr const char* SAR_Name{"SAR"};
constexpr const char* SMTI_Name{"SMTI"};
constexpr const char* Strike_Name{"Strike"};
constexpr const char* SystemDeployment_Name{"SystemDeployment"};
constexpr const char* TacticalOrder_Name{"TacticalOrder"};
constexpr const char* WeatherRadar_Name{"WeatherRadar"};

} // namespace TaskResponseType_Names

bool TaskResponseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::TaskResponseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TaskResponseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::AirSample_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseAirSample(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::AMTI_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseAMTI(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::AO_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseAO(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::CargoDelivery_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseCargoDelivery().setStringValue(*value);
      }
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::COMINT_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseCOMINT(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::CommRelay_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseCommRelay(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::EA_Name) {
      EA_ResponseType::deserialize(valueType.second, accessor.chooseEA(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::ESM_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseESM(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::Flight_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseFlight(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::OrbitChange_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseOrbitChange(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::OrbitalSurveillance_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseOrbitalSurveillance(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::PO_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.choosePO(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::Refuel_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseRefuel(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::SAR_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseSAR(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::SMTI_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseSMTI(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::Strike_Name) {
      StrikeTaskWeaponListType::deserialize(valueType.second, accessor.chooseStrike(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::SystemDeployment_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseSystemDeployment(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::TacticalOrder_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseTacticalOrder(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskResponseType_Names::WeatherRadar_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseWeatherRadar().setStringValue(*value);
      }
    }
  }
  return true;
}

std::string TaskResponseType::serialize(const uci::type::TaskResponseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? TaskResponseType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, TaskResponseType_Names::Extern_Type_Name);
  }
  if (accessor.isAirSample()) {
    AirSampleTaskBaseType::serialize(accessor.getAirSample(), node, TaskResponseType_Names::AirSample_Name);
  } else if (accessor.isAMTI()) {
    AMTI_TaskBaseType::serialize(accessor.getAMTI(), node, TaskResponseType_Names::AMTI_Name);
  } else if (accessor.isAO()) {
    AO_TaskBaseType::serialize(accessor.getAO(), node, TaskResponseType_Names::AO_Name);
  } else if (accessor.isCargoDelivery()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getCargoDelivery(), node, TaskResponseType_Names::CargoDelivery_Name);
  } else if (accessor.isCOMINT()) {
    COMINT_TaskBaseType::serialize(accessor.getCOMINT(), node, TaskResponseType_Names::COMINT_Name);
  } else if (accessor.isCommRelay()) {
    CommRelayTaskBaseType::serialize(accessor.getCommRelay(), node, TaskResponseType_Names::CommRelay_Name);
  } else if (accessor.isEA()) {
    EA_ResponseType::serialize(accessor.getEA(), node, TaskResponseType_Names::EA_Name);
  } else if (accessor.isESM()) {
    ESM_TaskBaseType::serialize(accessor.getESM(), node, TaskResponseType_Names::ESM_Name);
  } else if (accessor.isFlight()) {
    FlightTaskBaseType::serialize(accessor.getFlight(), node, TaskResponseType_Names::Flight_Name);
  } else if (accessor.isOrbitChange()) {
    OrbitChangeTaskBaseType::serialize(accessor.getOrbitChange(), node, TaskResponseType_Names::OrbitChange_Name);
  } else if (accessor.isOrbitalSurveillance()) {
    OrbitalSurveillanceTaskBaseType::serialize(accessor.getOrbitalSurveillance(), node, TaskResponseType_Names::OrbitalSurveillance_Name);
  } else if (accessor.isPO()) {
    PO_TaskBaseType::serialize(accessor.getPO(), node, TaskResponseType_Names::PO_Name);
  } else if (accessor.isRefuel()) {
    RefuelTaskBaseType::serialize(accessor.getRefuel(), node, TaskResponseType_Names::Refuel_Name);
  } else if (accessor.isSAR()) {
    SAR_TaskBaseType::serialize(accessor.getSAR(), node, TaskResponseType_Names::SAR_Name);
  } else if (accessor.isSMTI()) {
    SMTI_TaskBaseType::serialize(accessor.getSMTI(), node, TaskResponseType_Names::SMTI_Name);
  } else if (accessor.isStrike()) {
    StrikeTaskWeaponListType::serialize(accessor.getStrike(), node, TaskResponseType_Names::Strike_Name);
  } else if (accessor.isSystemDeployment()) {
    SystemDeploymentTaskBaseType::serialize(accessor.getSystemDeployment(), node, TaskResponseType_Names::SystemDeployment_Name);
  } else if (accessor.isTacticalOrder()) {
    TacticalOrderTaskBaseType::serialize(accessor.getTacticalOrder(), node, TaskResponseType_Names::TacticalOrder_Name);
  } else if (accessor.isWeatherRadar()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getWeatherRadar(), node, TaskResponseType_Names::WeatherRadar_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

