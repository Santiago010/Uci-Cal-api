/** @file SensorConstraintsBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/SensorConstraintsBaseType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/CountryCodeType.h"
#include "extxml_uci/type/EntityBasingEnum.h"
#include "extxml_uci/type/IEEE_FrequencyBandEnum.h"
#include "extxml_uci/type/SensorCategoryEnum.h"
#include "extxml_uci/type/SensorSpectrumEnum.h"
#include "extxml_uci/type/SensorTypeEnum.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/DerivedTypesSerializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/SensorConstraintsBaseType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SensorConstraintsBaseType_Names {

constexpr const char* Extern_Type_Name{"SensorConstraintsBaseType"};
constexpr const char* SensorType_Name{"SensorType"};
constexpr const char* EOIR_Spectrum_Name{"EOIR_Spectrum"};
constexpr const char* RF_Spectrum_Name{"RF_Spectrum"};
constexpr const char* SensorCategory_Name{"SensorCategory"};
constexpr const char* SensorSystemIdentity_Name{"SensorSystemIdentity"};
constexpr const char* SensorBasing_Name{"SensorBasing"};
constexpr const char* OwnerOperatorCountry_Name{"OwnerOperatorCountry"};

} // namespace SensorConstraintsBaseType_Names

bool SensorConstraintsBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SensorConstraintsBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SensorConstraintsBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SensorConstraintsBaseType_Names::SensorType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SensorConstraintsBaseType::SensorType& boundedList = accessor.getSensorType();
        const uci::type::SensorConstraintsBaseType::SensorType::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SensorConstraintsBaseType_Names::EOIR_Spectrum_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SensorConstraintsBaseType::EOIR_Spectrum& boundedList = accessor.getEOIR_Spectrum();
        const uci::type::SensorConstraintsBaseType::EOIR_Spectrum::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SensorConstraintsBaseType_Names::RF_Spectrum_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SensorConstraintsBaseType::RF_Spectrum& boundedList = accessor.getRF_Spectrum();
        const uci::type::SensorConstraintsBaseType::RF_Spectrum::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SensorConstraintsBaseType_Names::SensorCategory_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SensorConstraintsBaseType::SensorCategory& boundedList = accessor.getSensorCategory();
        const uci::type::SensorConstraintsBaseType::SensorCategory::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SensorConstraintsBaseType_Names::SensorSystemIdentity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SensorConstraintsBaseType::SensorSystemIdentity& boundedList = accessor.getSensorSystemIdentity();
        const uci::type::SensorConstraintsBaseType::SensorSystemIdentity::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setUnsignedShortValue(extxml_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + SensorConstraintsBaseType_Names::SensorBasing_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SensorConstraintsBaseType::SensorBasing& boundedList = accessor.getSensorBasing();
        const uci::type::SensorConstraintsBaseType::SensorBasing::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SensorConstraintsBaseType_Names::OwnerOperatorCountry_Name) {
      CountryCodeType::deserialize(valueType.second, accessor.enableOwnerOperatorCountry(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string SensorConstraintsBaseType::serialize(const uci::type::SensorConstraintsBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SensorConstraintsBaseType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::sensorConstraintsBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extxml_uci::util::SerializationHelpers::addTypeAttribute(node, SensorConstraintsBaseType_Names::Extern_Type_Name);
    }
    {
      const uci::type::SensorConstraintsBaseType::SensorType& boundedList = accessor.getSensorType();
      for (uci::type::SensorConstraintsBaseType::SensorType::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SensorTypeEnum::serialize(boundedList.at(i), node, SensorConstraintsBaseType_Names::SensorType_Name, false);
      }
    }
    {
      const uci::type::SensorConstraintsBaseType::EOIR_Spectrum& boundedList = accessor.getEOIR_Spectrum();
      for (uci::type::SensorConstraintsBaseType::EOIR_Spectrum::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SensorSpectrumEnum::serialize(boundedList.at(i), node, SensorConstraintsBaseType_Names::EOIR_Spectrum_Name, false);
      }
    }
    {
      const uci::type::SensorConstraintsBaseType::RF_Spectrum& boundedList = accessor.getRF_Spectrum();
      for (uci::type::SensorConstraintsBaseType::RF_Spectrum::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        IEEE_FrequencyBandEnum::serialize(boundedList.at(i), node, SensorConstraintsBaseType_Names::RF_Spectrum_Name, false);
      }
    }
    {
      const uci::type::SensorConstraintsBaseType::SensorCategory& boundedList = accessor.getSensorCategory();
      for (uci::type::SensorConstraintsBaseType::SensorCategory::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SensorCategoryEnum::serialize(boundedList.at(i), node, SensorConstraintsBaseType_Names::SensorCategory_Name, false);
      }
    }
    {
      const uci::type::SensorConstraintsBaseType::SensorSystemIdentity& boundedList = accessor.getSensorSystemIdentity();
      for (uci::type::SensorConstraintsBaseType::SensorSystemIdentity::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        extxml_uci::util::SerializationHelpers::serializeUnsignedShort(boundedList.at(i), node, SensorConstraintsBaseType_Names::SensorSystemIdentity_Name);
      }
    }
    {
      const uci::type::SensorConstraintsBaseType::SensorBasing& boundedList = accessor.getSensorBasing();
      for (uci::type::SensorConstraintsBaseType::SensorBasing::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        EntityBasingEnum::serialize(boundedList.at(i), node, SensorConstraintsBaseType_Names::SensorBasing_Name, false);
      }
    }
    if (accessor.hasOwnerOperatorCountry()) {
      CountryCodeType::serialize(accessor.getOwnerOperatorCountry(), node, SensorConstraintsBaseType_Names::OwnerOperatorCountry_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    extxml_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

