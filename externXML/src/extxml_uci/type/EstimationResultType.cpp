/** @file EstimationResultType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/EstimationResultType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/ActivityPlanExecutionStatusMDT.h"
#include "extxml_uci/type/EffectPlanExecutionStatusMDT.h"
#include "extxml_uci/type/MissionPlanExecutionStatusMDT.h"
#include "extxml_uci/type/NavigationReportMDT.h"
#include "extxml_uci/type/OrbitActivityPlanExecutionStatusMDT.h"
#include "extxml_uci/type/OrbitPlanExecutionStatusMDT.h"
#include "extxml_uci/type/PackageStatusMDT.h"
#include "extxml_uci/type/PositionReportMDT.h"
#include "extxml_uci/type/RouteActivityPlanExecutionStatusMDT.h"
#include "extxml_uci/type/RoutePlanExecutionStatusMDT.h"
#include "extxml_uci/type/SystemOrbitReportMDT.h"
#include "extxml_uci/type/SystemOrbitalPositionReportMDT.h"
#include "extxml_uci/type/SystemStatusMDT.h"
#include "extxml_uci/type/TaskPlanExecutionStatusMDT.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/EstimationResultType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace EstimationResultType_Names {

constexpr const char* Extern_Type_Name{"EstimationResultType"};
constexpr const char* MissionPlanExecutionStatus_Name{"MissionPlanExecutionStatus"};
constexpr const char* TaskPlanExecutionStatus_Name{"TaskPlanExecutionStatus"};
constexpr const char* RoutePlanExecutionStatus_Name{"RoutePlanExecutionStatus"};
constexpr const char* RouteActivityPlanExecutionStatus_Name{"RouteActivityPlanExecutionStatus"};
constexpr const char* OrbitPlanExecutionStatus_Name{"OrbitPlanExecutionStatus"};
constexpr const char* OrbitActivityPlanExecutionStatus_Name{"OrbitActivityPlanExecutionStatus"};
constexpr const char* ActivityPlanExecutionStatus_Name{"ActivityPlanExecutionStatus"};
constexpr const char* EffectPlanExecutionStatus_Name{"EffectPlanExecutionStatus"};
constexpr const char* NavigationReport_Name{"NavigationReport"};
constexpr const char* PositionReport_Name{"PositionReport"};
constexpr const char* SystemOrbitReport_Name{"SystemOrbitReport"};
constexpr const char* SystemOrbitalPositionReport_Name{"SystemOrbitalPositionReport"};
constexpr const char* SystemStatus_Name{"SystemStatus"};
constexpr const char* PackageStatus_Name{"PackageStatus"};
constexpr const char* Timestamp_Name{"Timestamp"};

} // namespace EstimationResultType_Names

bool EstimationResultType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EstimationResultType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EstimationResultType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::MissionPlanExecutionStatus_Name) {
      MissionPlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableMissionPlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::TaskPlanExecutionStatus_Name) {
      TaskPlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableTaskPlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::RoutePlanExecutionStatus_Name) {
      RoutePlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableRoutePlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::RouteActivityPlanExecutionStatus_Name) {
      RouteActivityPlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableRouteActivityPlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::OrbitPlanExecutionStatus_Name) {
      OrbitPlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableOrbitPlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::OrbitActivityPlanExecutionStatus_Name) {
      OrbitActivityPlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableOrbitActivityPlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::ActivityPlanExecutionStatus_Name) {
      ActivityPlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableActivityPlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::EffectPlanExecutionStatus_Name) {
      EffectPlanExecutionStatusMDT::deserialize(valueType.second, accessor.enableEffectPlanExecutionStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::NavigationReport_Name) {
      NavigationReportMDT::deserialize(valueType.second, accessor.enableNavigationReport(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::PositionReport_Name) {
      PositionReportMDT::deserialize(valueType.second, accessor.enablePositionReport(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::SystemOrbitReport_Name) {
      SystemOrbitReportMDT::deserialize(valueType.second, accessor.enableSystemOrbitReport(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::SystemOrbitalPositionReport_Name) {
      SystemOrbitalPositionReportMDT::deserialize(valueType.second, accessor.enableSystemOrbitalPositionReport(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::SystemStatus_Name) {
      SystemStatusMDT::deserialize(valueType.second, accessor.enableSystemStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::PackageStatus_Name) {
      PackageStatusMDT::deserialize(valueType.second, accessor.enablePackageStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EstimationResultType_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    }
  }
  return true;
}

std::string EstimationResultType::serialize(const uci::type::EstimationResultType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? EstimationResultType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, EstimationResultType_Names::Extern_Type_Name);
  }
  if (accessor.hasMissionPlanExecutionStatus()) {
    MissionPlanExecutionStatusMDT::serialize(accessor.getMissionPlanExecutionStatus(), node, EstimationResultType_Names::MissionPlanExecutionStatus_Name);
  }
  if (accessor.hasTaskPlanExecutionStatus()) {
    TaskPlanExecutionStatusMDT::serialize(accessor.getTaskPlanExecutionStatus(), node, EstimationResultType_Names::TaskPlanExecutionStatus_Name);
  }
  if (accessor.hasRoutePlanExecutionStatus()) {
    RoutePlanExecutionStatusMDT::serialize(accessor.getRoutePlanExecutionStatus(), node, EstimationResultType_Names::RoutePlanExecutionStatus_Name);
  }
  if (accessor.hasRouteActivityPlanExecutionStatus()) {
    RouteActivityPlanExecutionStatusMDT::serialize(accessor.getRouteActivityPlanExecutionStatus(), node, EstimationResultType_Names::RouteActivityPlanExecutionStatus_Name);
  }
  if (accessor.hasOrbitPlanExecutionStatus()) {
    OrbitPlanExecutionStatusMDT::serialize(accessor.getOrbitPlanExecutionStatus(), node, EstimationResultType_Names::OrbitPlanExecutionStatus_Name);
  }
  if (accessor.hasOrbitActivityPlanExecutionStatus()) {
    OrbitActivityPlanExecutionStatusMDT::serialize(accessor.getOrbitActivityPlanExecutionStatus(), node, EstimationResultType_Names::OrbitActivityPlanExecutionStatus_Name);
  }
  if (accessor.hasActivityPlanExecutionStatus()) {
    ActivityPlanExecutionStatusMDT::serialize(accessor.getActivityPlanExecutionStatus(), node, EstimationResultType_Names::ActivityPlanExecutionStatus_Name);
  }
  if (accessor.hasEffectPlanExecutionStatus()) {
    EffectPlanExecutionStatusMDT::serialize(accessor.getEffectPlanExecutionStatus(), node, EstimationResultType_Names::EffectPlanExecutionStatus_Name);
  }
  if (accessor.hasNavigationReport()) {
    NavigationReportMDT::serialize(accessor.getNavigationReport(), node, EstimationResultType_Names::NavigationReport_Name);
  }
  if (accessor.hasPositionReport()) {
    PositionReportMDT::serialize(accessor.getPositionReport(), node, EstimationResultType_Names::PositionReport_Name);
  }
  if (accessor.hasSystemOrbitReport()) {
    SystemOrbitReportMDT::serialize(accessor.getSystemOrbitReport(), node, EstimationResultType_Names::SystemOrbitReport_Name);
  }
  if (accessor.hasSystemOrbitalPositionReport()) {
    SystemOrbitalPositionReportMDT::serialize(accessor.getSystemOrbitalPositionReport(), node, EstimationResultType_Names::SystemOrbitalPositionReport_Name);
  }
  if (accessor.hasSystemStatus()) {
    SystemStatusMDT::serialize(accessor.getSystemStatus(), node, EstimationResultType_Names::SystemStatus_Name);
  }
  if (accessor.hasPackageStatus()) {
    PackageStatusMDT::serialize(accessor.getPackageStatus(), node, EstimationResultType_Names::PackageStatus_Name);
  }
  extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, EstimationResultType_Names::Timestamp_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

