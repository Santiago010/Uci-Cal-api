/** @file QueryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/QueryType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/QueryComparisonType.h"
#include "extxml_uci/type/QueryContainsType.h"
#include "extxml_uci/type/QueryCountType.h"
#include "extxml_uci/type/QueryEqualsType.h"
#include "extxml_uci/type/QueryExistsType.h"
#include "extxml_uci/type/QueryInstanceOfType.h"
#include "extxml_uci/type/QueryMatchType.h"
#include "extxml_uci/type/QueryPET.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/QueryType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace QueryType_Names {

constexpr const char* Extern_Type_Name{"QueryType"};
constexpr const char* Equals_Name{"Equals"};
constexpr const char* LessThan_Name{"LessThan"};
constexpr const char* LessThanOrEqualTo_Name{"LessThanOrEqualTo"};
constexpr const char* GreaterThan_Name{"GreaterThan"};
constexpr const char* GreaterThanOrEqualTo_Name{"GreaterThanOrEqualTo"};
constexpr const char* ContainsCaseSensitive_Name{"ContainsCaseSensitive"};
constexpr const char* ContainsCaseInsensitive_Name{"ContainsCaseInsensitive"};
constexpr const char* InstanceOf_Name{"InstanceOf"};
constexpr const char* Count_Name{"Count"};
constexpr const char* Exists_Name{"Exists"};
constexpr const char* AnyMatch_Name{"AnyMatch"};
constexpr const char* AllMatch_Name{"AllMatch"};
constexpr const char* And_Name{"And"};
constexpr const char* Or_Name{"Or"};
constexpr const char* Not_Name{"Not"};

} // namespace QueryType_Names

bool QueryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::QueryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = QueryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + QueryType_Names::Equals_Name) {
      QueryEqualsType::deserialize(valueType.second, accessor.chooseEquals(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::LessThan_Name) {
      QueryComparisonType::deserialize(valueType.second, accessor.chooseLessThan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::LessThanOrEqualTo_Name) {
      QueryComparisonType::deserialize(valueType.second, accessor.chooseLessThanOrEqualTo(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::GreaterThan_Name) {
      QueryComparisonType::deserialize(valueType.second, accessor.chooseGreaterThan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::GreaterThanOrEqualTo_Name) {
      QueryComparisonType::deserialize(valueType.second, accessor.chooseGreaterThanOrEqualTo(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::ContainsCaseSensitive_Name) {
      QueryContainsType::deserialize(valueType.second, accessor.chooseContainsCaseSensitive(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::ContainsCaseInsensitive_Name) {
      QueryContainsType::deserialize(valueType.second, accessor.chooseContainsCaseInsensitive(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::InstanceOf_Name) {
      QueryInstanceOfType::deserialize(valueType.second, accessor.chooseInstanceOf(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::Count_Name) {
      QueryCountType::deserialize(valueType.second, accessor.chooseCount(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::Exists_Name) {
      QueryExistsType::deserialize(valueType.second, accessor.chooseExists(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::AnyMatch_Name) {
      QueryMatchType::deserialize(valueType.second, accessor.chooseAnyMatch(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::AllMatch_Name) {
      QueryMatchType::deserialize(valueType.second, accessor.chooseAllMatch(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + QueryType_Names::And_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::QueryType::And& boundedList = accessor.chooseAnd();
        const uci::type::QueryType::And::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + QueryType_Names::Or_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::QueryType::Or& boundedList = accessor.chooseOr();
        const uci::type::QueryType::Or::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + QueryType_Names::Not_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseNot(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
  QueryPET::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string QueryType::serialize(const uci::type::QueryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? QueryType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, QueryType_Names::Extern_Type_Name);
  }
  QueryPET::serialize(accessor, node, "", false, false, false);
  if (accessor.isEquals()) {
    QueryEqualsType::serialize(accessor.getEquals(), node, QueryType_Names::Equals_Name);
  } else if (accessor.isLessThan()) {
    QueryComparisonType::serialize(accessor.getLessThan(), node, QueryType_Names::LessThan_Name);
  } else if (accessor.isLessThanOrEqualTo()) {
    QueryComparisonType::serialize(accessor.getLessThanOrEqualTo(), node, QueryType_Names::LessThanOrEqualTo_Name);
  } else if (accessor.isGreaterThan()) {
    QueryComparisonType::serialize(accessor.getGreaterThan(), node, QueryType_Names::GreaterThan_Name);
  } else if (accessor.isGreaterThanOrEqualTo()) {
    QueryComparisonType::serialize(accessor.getGreaterThanOrEqualTo(), node, QueryType_Names::GreaterThanOrEqualTo_Name);
  } else if (accessor.isContainsCaseSensitive()) {
    QueryContainsType::serialize(accessor.getContainsCaseSensitive(), node, QueryType_Names::ContainsCaseSensitive_Name);
  } else if (accessor.isContainsCaseInsensitive()) {
    QueryContainsType::serialize(accessor.getContainsCaseInsensitive(), node, QueryType_Names::ContainsCaseInsensitive_Name);
  } else if (accessor.isInstanceOf()) {
    QueryInstanceOfType::serialize(accessor.getInstanceOf(), node, QueryType_Names::InstanceOf_Name);
  } else if (accessor.isCount()) {
    QueryCountType::serialize(accessor.getCount(), node, QueryType_Names::Count_Name);
  } else if (accessor.isExists()) {
    QueryExistsType::serialize(accessor.getExists(), node, QueryType_Names::Exists_Name);
  } else if (accessor.isAnyMatch()) {
    QueryMatchType::serialize(accessor.getAnyMatch(), node, QueryType_Names::AnyMatch_Name);
  } else if (accessor.isAllMatch()) {
    QueryMatchType::serialize(accessor.getAllMatch(), node, QueryType_Names::AllMatch_Name);
  } else if (accessor.isAnd()) {
    {
      const uci::type::QueryType::And& boundedList = accessor.getAnd();
      for (uci::type::QueryType::And::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        QueryPET::serialize(boundedList.at(i), node, QueryType_Names::And_Name);
      }
    }
  } else if (accessor.isOr()) {
    {
      const uci::type::QueryType::Or& boundedList = accessor.getOr();
      for (uci::type::QueryType::Or::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        QueryPET::serialize(boundedList.at(i), node, QueryType_Names::Or_Name);
      }
    }
  } else if (accessor.isNot()) {
    QueryPET::serialize(accessor.getNot(), node, QueryType_Names::Not_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

