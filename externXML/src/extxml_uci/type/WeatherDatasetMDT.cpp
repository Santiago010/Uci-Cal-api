/** @file WeatherDatasetMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:20 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/WeatherDatasetMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/DataRecordBaseType.h"
#include "extxml_uci/type/ScheduleType.h"
#include "extxml_uci/type/SystemID_Type.h"
#include "extxml_uci/type/WeatherDataType.h"
#include "extxml_uci/type/WeatherDatasetID_Type.h"
#include "extxml_uci/type/ZoneType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/WeatherDatasetMDT.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace WeatherDatasetMDT_Names {

constexpr const char* Extern_Type_Name{"WeatherDatasetMDT"};
constexpr const char* WeatherDatasetID_Name{"WeatherDatasetID"};
constexpr const char* Created_Name{"Created"};
constexpr const char* Updated_Name{"Updated"};
constexpr const char* DatasetArea_Name{"DatasetArea"};
constexpr const char* DegreeStep_Name{"DegreeStep"};
constexpr const char* AltitudeStep_Name{"AltitudeStep"};
constexpr const char* WeatherData_Name{"WeatherData"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* Schedule_Name{"Schedule"};

} // namespace WeatherDatasetMDT_Names

bool WeatherDatasetMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::WeatherDatasetMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = WeatherDatasetMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::WeatherDatasetID_Name) {
      WeatherDatasetID_Type::deserialize(valueType.second, accessor.getWeatherDatasetID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::Created_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCreated(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::Updated_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUpdated(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::DatasetArea_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableDatasetArea(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::DegreeStep_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDegreeStep(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::AltitudeStep_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAltitudeStep(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::WeatherData_Name) {
      uci::type::WeatherDatasetMDT::WeatherData& boundedList = accessor.getWeatherData();
      const uci::type::WeatherDatasetMDT::WeatherData::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      WeatherDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::SystemID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::WeatherDatasetMDT::SystemID& boundedList = accessor.getSystemID();
        const uci::type::WeatherDatasetMDT::SystemID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + WeatherDatasetMDT_Names::Schedule_Name) {
      ScheduleType::deserialize(valueType.second, accessor.enableSchedule(), nodeName, nsPrefix);
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string WeatherDatasetMDT::serialize(const uci::type::WeatherDatasetMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? WeatherDatasetMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, WeatherDatasetMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  WeatherDatasetID_Type::serialize(accessor.getWeatherDatasetID(), node, WeatherDatasetMDT_Names::WeatherDatasetID_Name);
  extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getCreated(), node, WeatherDatasetMDT_Names::Created_Name);
  extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getUpdated(), node, WeatherDatasetMDT_Names::Updated_Name);
  ZoneType::serialize(accessor.getDatasetArea(), node, WeatherDatasetMDT_Names::DatasetArea_Name);
  if (accessor.hasDegreeStep()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getDegreeStep(), node, WeatherDatasetMDT_Names::DegreeStep_Name);
  }
  if (accessor.hasAltitudeStep()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getAltitudeStep(), node, WeatherDatasetMDT_Names::AltitudeStep_Name);
  }
  {
    const uci::type::WeatherDatasetMDT::WeatherData& boundedList = accessor.getWeatherData();
    for (uci::type::WeatherDatasetMDT::WeatherData::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      WeatherDataType::serialize(boundedList.at(i), node, WeatherDatasetMDT_Names::WeatherData_Name);
    }
  }
  {
    const uci::type::WeatherDatasetMDT::SystemID& boundedList = accessor.getSystemID();
    for (uci::type::WeatherDatasetMDT::SystemID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SystemID_Type::serialize(boundedList.at(i), node, WeatherDatasetMDT_Names::SystemID_Name);
    }
  }
  if (accessor.hasSchedule()) {
    ScheduleType::serialize(accessor.getSchedule(), node, WeatherDatasetMDT_Names::Schedule_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

