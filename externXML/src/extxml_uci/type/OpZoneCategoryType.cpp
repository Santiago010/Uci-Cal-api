/** @file OpZoneCategoryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/OpZoneCategoryType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/ConstrainedEntryExitType.h"
#include "extxml_uci/type/IngressEgressType.h"
#include "extxml_uci/type/OpZoneFilterAreaPET.h"
#include "extxml_uci/type/OpZoneJammingType.h"
#include "extxml_uci/type/OpZoneMissileDataType.h"
#include "extxml_uci/type/OpZoneNoFireType.h"
#include "extxml_uci/type/OpZoneNoFlyType.h"
#include "extxml_uci/type/OpZoneWeaponRestrictionType.h"
#include "extxml_uci/type/OpZoneWeatherType.h"
#include "extxml_uci/type/VehicleCommandDataType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/OpZoneCategoryType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace OpZoneCategoryType_Names {

constexpr const char* Extern_Type_Name{"OpZoneCategoryType"};
constexpr const char* ConstrainedEntryExit_Name{"ConstrainedEntryExit"};
constexpr const char* FilterArea_Name{"FilterArea"};
constexpr const char* Jamming_Name{"Jamming"};
constexpr const char* KeepIn_Name{"KeepIn"};
constexpr const char* MissileLaunchPoint_Name{"MissileLaunchPoint"};
constexpr const char* NoFire_Name{"NoFire"};
constexpr const char* NoFly_Name{"NoFly"};
constexpr const char* VehicleConfiguration_Name{"VehicleConfiguration"};
constexpr const char* WeaponRestriction_Name{"WeaponRestriction"};
constexpr const char* WeatherConditions_Name{"WeatherConditions"};

} // namespace OpZoneCategoryType_Names

bool OpZoneCategoryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OpZoneCategoryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OpZoneCategoryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::ConstrainedEntryExit_Name) {
      ConstrainedEntryExitType::deserialize(valueType.second, accessor.chooseConstrainedEntryExit(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::FilterArea_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::OpZoneCategoryType::FilterArea& boundedList = accessor.chooseFilterArea();
        const uci::type::OpZoneCategoryType::FilterArea::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::Jamming_Name) {
      OpZoneJammingType::deserialize(valueType.second, accessor.chooseJamming(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::KeepIn_Name) {
      IngressEgressType::deserialize(valueType.second, accessor.chooseKeepIn(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::MissileLaunchPoint_Name) {
      OpZoneMissileDataType::deserialize(valueType.second, accessor.chooseMissileLaunchPoint(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::NoFire_Name) {
      OpZoneNoFireType::deserialize(valueType.second, accessor.chooseNoFire(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::NoFly_Name) {
      OpZoneNoFlyType::deserialize(valueType.second, accessor.chooseNoFly(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::VehicleConfiguration_Name) {
      VehicleCommandDataType::deserialize(valueType.second, accessor.chooseVehicleConfiguration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::WeaponRestriction_Name) {
      OpZoneWeaponRestrictionType::deserialize(valueType.second, accessor.chooseWeaponRestriction(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OpZoneCategoryType_Names::WeatherConditions_Name) {
      OpZoneWeatherType::deserialize(valueType.second, accessor.chooseWeatherConditions(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string OpZoneCategoryType::serialize(const uci::type::OpZoneCategoryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? OpZoneCategoryType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, OpZoneCategoryType_Names::Extern_Type_Name);
  }
  if (accessor.isConstrainedEntryExit()) {
    ConstrainedEntryExitType::serialize(accessor.getConstrainedEntryExit(), node, OpZoneCategoryType_Names::ConstrainedEntryExit_Name);
  } else if (accessor.isFilterArea()) {
    {
      const uci::type::OpZoneCategoryType::FilterArea& boundedList = accessor.getFilterArea();
      for (uci::type::OpZoneCategoryType::FilterArea::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        OpZoneFilterAreaPET::serialize(boundedList.at(i), node, OpZoneCategoryType_Names::FilterArea_Name);
      }
    }
  } else if (accessor.isJamming()) {
    OpZoneJammingType::serialize(accessor.getJamming(), node, OpZoneCategoryType_Names::Jamming_Name);
  } else if (accessor.isKeepIn()) {
    IngressEgressType::serialize(accessor.getKeepIn(), node, OpZoneCategoryType_Names::KeepIn_Name);
  } else if (accessor.isMissileLaunchPoint()) {
    OpZoneMissileDataType::serialize(accessor.getMissileLaunchPoint(), node, OpZoneCategoryType_Names::MissileLaunchPoint_Name);
  } else if (accessor.isNoFire()) {
    OpZoneNoFireType::serialize(accessor.getNoFire(), node, OpZoneCategoryType_Names::NoFire_Name);
  } else if (accessor.isNoFly()) {
    OpZoneNoFlyType::serialize(accessor.getNoFly(), node, OpZoneCategoryType_Names::NoFly_Name);
  } else if (accessor.isVehicleConfiguration()) {
    VehicleCommandDataType::serialize(accessor.getVehicleConfiguration(), node, OpZoneCategoryType_Names::VehicleConfiguration_Name);
  } else if (accessor.isWeaponRestriction()) {
    OpZoneWeaponRestrictionType::serialize(accessor.getWeaponRestriction(), node, OpZoneCategoryType_Names::WeaponRestriction_Name);
  } else if (accessor.isWeatherConditions()) {
    OpZoneWeatherType::serialize(accessor.getWeatherConditions(), node, OpZoneCategoryType_Names::WeatherConditions_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

