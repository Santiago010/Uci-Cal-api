/** @file SignalRelativeType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/SignalRelativeType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/EW_MeasurementEnum.h"
#include "extxml_uci/type/LOS_MeasurementWithUncertaintyType.h"
#include "extxml_uci/type/MeasurementStatusEnum.h"
#include "extxml_uci/type/ReferenceObjectType.h"
#include "extxml_uci/type/SignalMeasurementFlagEnum.h"
#include "extxml_uci/type/SignalMeasurementMethodEnum.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/SignalRelativeType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SignalRelativeType_Names {

constexpr const char* Extern_Type_Name{"SignalRelativeType"};
constexpr const char* ReferenceIdentifier_Name{"ReferenceIdentifier"};
constexpr const char* Measurement_Method_Name{"Measurement_Method"};
constexpr const char* Measurement_Status_Name{"Measurement_Status"};
constexpr const char* Measurement_Flag_Name{"Measurement_Flag"};
constexpr const char* Suspect_Name{"Suspect"};
constexpr const char* ExcessiveAttitude_Name{"ExcessiveAttitude"};
constexpr const char* FringeDetection_Name{"FringeDetection"};
constexpr const char* EW_MeasurementType_Name{"EW_MeasurementType"};

} // namespace SignalRelativeType_Names

bool SignalRelativeType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SignalRelativeType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SignalRelativeType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SignalRelativeType_Names::ReferenceIdentifier_Name) {
      ReferenceObjectType::deserialize(valueType.second, accessor.enableReferenceIdentifier(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalRelativeType_Names::Measurement_Method_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMeasurement_Method().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalRelativeType_Names::Measurement_Status_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMeasurement_Status().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalRelativeType_Names::Measurement_Flag_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMeasurement_Flag().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalRelativeType_Names::Suspect_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSuspect(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SignalRelativeType_Names::ExcessiveAttitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setExcessiveAttitude(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SignalRelativeType_Names::FringeDetection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFringeDetection(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SignalRelativeType_Names::EW_MeasurementType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableEW_MeasurementType().setValueFromName(*value);
      }
    }
  }
  LOS_MeasurementWithUncertaintyType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string SignalRelativeType::serialize(const uci::type::SignalRelativeType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SignalRelativeType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, SignalRelativeType_Names::Extern_Type_Name);
  }
  LOS_MeasurementWithUncertaintyType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasReferenceIdentifier()) {
    ReferenceObjectType::serialize(accessor.getReferenceIdentifier(), node, SignalRelativeType_Names::ReferenceIdentifier_Name);
  }
  if (accessor.hasMeasurement_Method()) {
    SignalMeasurementMethodEnum::serialize(accessor.getMeasurement_Method(), node, SignalRelativeType_Names::Measurement_Method_Name, false);
  }
  if (accessor.hasMeasurement_Status()) {
    MeasurementStatusEnum::serialize(accessor.getMeasurement_Status(), node, SignalRelativeType_Names::Measurement_Status_Name, false);
  }
  if (accessor.hasMeasurement_Flag()) {
    SignalMeasurementFlagEnum::serialize(accessor.getMeasurement_Flag(), node, SignalRelativeType_Names::Measurement_Flag_Name, false);
  }
  if (accessor.hasSuspect()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getSuspect(), node, SignalRelativeType_Names::Suspect_Name);
  }
  if (accessor.hasExcessiveAttitude()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getExcessiveAttitude(), node, SignalRelativeType_Names::ExcessiveAttitude_Name);
  }
  if (accessor.hasFringeDetection()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getFringeDetection(), node, SignalRelativeType_Names::FringeDetection_Name);
  }
  if (accessor.hasEW_MeasurementType()) {
    EW_MeasurementEnum::serialize(accessor.getEW_MeasurementType(), node, SignalRelativeType_Names::EW_MeasurementType_Name, false);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

