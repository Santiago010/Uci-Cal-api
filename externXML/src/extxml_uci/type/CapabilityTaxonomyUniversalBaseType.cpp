/** @file CapabilityTaxonomyUniversalBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/CapabilityTaxonomyUniversalBaseType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/CapabilityID_Type.h"
#include "extxml_uci/type/CapabilityTaxonomyType.h"
#include "extxml_uci/type/CapabilityTypeEnum.h"
#include "extxml_uci/type/ThreatCapabilityEnum.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/DerivedTypesSerializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/CapabilityTaxonomyUniversalBaseType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace CapabilityTaxonomyUniversalBaseType_Names {

constexpr const char* Extern_Type_Name{"CapabilityTaxonomyUniversalBaseType"};
constexpr const char* Capability_Name{"Capability"};
constexpr const char* CapabilityDetails_Name{"CapabilityDetails"};
constexpr const char* ThreatCapability_Name{"ThreatCapability"};
constexpr const char* CapabilityInstanceID_Name{"CapabilityInstanceID"};

} // namespace CapabilityTaxonomyUniversalBaseType_Names

bool CapabilityTaxonomyUniversalBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CapabilityTaxonomyUniversalBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CapabilityTaxonomyUniversalBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyUniversalBaseType_Names::Capability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyUniversalBaseType::Capability& boundedList = accessor.getCapability();
        const uci::type::CapabilityTaxonomyUniversalBaseType::Capability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyUniversalBaseType_Names::CapabilityDetails_Name) {
      CapabilityTaxonomyType::deserialize(valueType.second, accessor.enableCapabilityDetails(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyUniversalBaseType_Names::ThreatCapability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyUniversalBaseType::ThreatCapability& boundedList = accessor.getThreatCapability();
        const uci::type::CapabilityTaxonomyUniversalBaseType::ThreatCapability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CapabilityTaxonomyUniversalBaseType_Names::CapabilityInstanceID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CapabilityTaxonomyUniversalBaseType::CapabilityInstanceID& boundedList = accessor.getCapabilityInstanceID();
        const uci::type::CapabilityTaxonomyUniversalBaseType::CapabilityInstanceID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string CapabilityTaxonomyUniversalBaseType::serialize(const uci::type::CapabilityTaxonomyUniversalBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? CapabilityTaxonomyUniversalBaseType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::capabilityTaxonomyUniversalBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extxml_uci::util::SerializationHelpers::addTypeAttribute(node, CapabilityTaxonomyUniversalBaseType_Names::Extern_Type_Name);
    }
    {
      const uci::type::CapabilityTaxonomyUniversalBaseType::Capability& boundedList = accessor.getCapability();
      for (uci::type::CapabilityTaxonomyUniversalBaseType::Capability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        CapabilityTypeEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyUniversalBaseType_Names::Capability_Name, false);
      }
    }
    if (accessor.hasCapabilityDetails()) {
      CapabilityTaxonomyType::serialize(accessor.getCapabilityDetails(), node, CapabilityTaxonomyUniversalBaseType_Names::CapabilityDetails_Name);
    }
    {
      const uci::type::CapabilityTaxonomyUniversalBaseType::ThreatCapability& boundedList = accessor.getThreatCapability();
      for (uci::type::CapabilityTaxonomyUniversalBaseType::ThreatCapability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        ThreatCapabilityEnum::serialize(boundedList.at(i), node, CapabilityTaxonomyUniversalBaseType_Names::ThreatCapability_Name, false);
      }
    }
    {
      const uci::type::CapabilityTaxonomyUniversalBaseType::CapabilityInstanceID& boundedList = accessor.getCapabilityInstanceID();
      for (uci::type::CapabilityTaxonomyUniversalBaseType::CapabilityInstanceID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        CapabilityID_Type::serialize(boundedList.at(i), node, CapabilityTaxonomyUniversalBaseType_Names::CapabilityInstanceID_Name);
      }
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    extxml_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

