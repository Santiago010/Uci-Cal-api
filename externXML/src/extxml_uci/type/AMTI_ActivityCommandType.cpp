/** @file AMTI_ActivityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/AMTI_ActivityCommandType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/AMTI_CollectionConstraintsType.h"
#include "extxml_uci/type/AirTargetVolumeCommandType.h"
#include "extxml_uci/type/AirTargetVolumeType.h"
#include "extxml_uci/type/CapabilityCommandFrequencyType.h"
#include "extxml_uci/type/DependentActivityType.h"
#include "extxml_uci/type/ProductOutputCommandBasicType.h"
#include "extxml_uci/type/RadarCollectionOptionsType.h"
#include "extxml_uci/type/RepetitionType.h"
#include "extxml_uci/type/ResourceSelectionType.h"
#include "extxml_uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/AMTI_ActivityCommandType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace AMTI_ActivityCommandType_Names {

constexpr const char* Extern_Type_Name{"AMTI_ActivityCommandType"};
constexpr const char* Attempt_Name{"Attempt"};
constexpr const char* ChangeDependentActivity_Name{"ChangeDependentActivity"};
constexpr const char* ResourceSelection_Name{"ResourceSelection"};
constexpr const char* TargetVolume_Name{"TargetVolume"};
constexpr const char* BlankingVolume_Name{"BlankingVolume"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* CollectionOptions_Name{"CollectionOptions"};
constexpr const char* CollectionConstraints_Name{"CollectionConstraints"};
constexpr const char* TrackingRange_Name{"TrackingRange"};
constexpr const char* Repetition_Name{"Repetition"};
constexpr const char* ProductOutput_Name{"ProductOutput"};

} // namespace AMTI_ActivityCommandType_Names

bool AMTI_ActivityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::AMTI_ActivityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = AMTI_ActivityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::Attempt_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAttempt(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::ChangeDependentActivity_Name) {
      DependentActivityType::deserialize(valueType.second, accessor.enableChangeDependentActivity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::ResourceSelection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AMTI_ActivityCommandType::ResourceSelection& boundedList = accessor.getResourceSelection();
        const uci::type::AMTI_ActivityCommandType::ResourceSelection::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ResourceSelectionType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::TargetVolume_Name) {
      uci::type::AMTI_ActivityCommandType::TargetVolume& boundedList = accessor.getTargetVolume();
      const uci::type::AMTI_ActivityCommandType::TargetVolume::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      AirTargetVolumeCommandType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::BlankingVolume_Name) {
      uci::type::AMTI_ActivityCommandType::BlankingVolume& boundedList = accessor.getBlankingVolume();
      const uci::type::AMTI_ActivityCommandType::BlankingVolume::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      AirTargetVolumeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::Frequency_Name) {
      CapabilityCommandFrequencyType::deserialize(valueType.second, accessor.enableFrequency(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::CollectionOptions_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableCollectionOptions(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::CollectionConstraints_Name) {
      AMTI_CollectionConstraintsType::deserialize(valueType.second, accessor.enableCollectionConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::TrackingRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTrackingRange(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::Repetition_Name) {
      RepetitionType::deserialize(valueType.second, accessor.enableRepetition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + AMTI_ActivityCommandType_Names::ProductOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::AMTI_ActivityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
        const uci::type::AMTI_ActivityCommandType::ProductOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1, extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix));
        extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  SharedRF_ApertureActivityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string AMTI_ActivityCommandType::serialize(const uci::type::AMTI_ActivityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? AMTI_ActivityCommandType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, AMTI_ActivityCommandType_Names::Extern_Type_Name);
  }
  SharedRF_ApertureActivityCommandBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasAttempt()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAttempt(), node, AMTI_ActivityCommandType_Names::Attempt_Name);
  }
  if (accessor.hasChangeDependentActivity()) {
    DependentActivityType::serialize(accessor.getChangeDependentActivity(), node, AMTI_ActivityCommandType_Names::ChangeDependentActivity_Name);
  }
  {
    const uci::type::AMTI_ActivityCommandType::ResourceSelection& boundedList = accessor.getResourceSelection();
    for (uci::type::AMTI_ActivityCommandType::ResourceSelection::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ResourceSelectionType::serialize(boundedList.at(i), node, AMTI_ActivityCommandType_Names::ResourceSelection_Name);
    }
  }
  {
    const uci::type::AMTI_ActivityCommandType::TargetVolume& boundedList = accessor.getTargetVolume();
    for (uci::type::AMTI_ActivityCommandType::TargetVolume::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      AirTargetVolumeCommandType::serialize(boundedList.at(i), node, AMTI_ActivityCommandType_Names::TargetVolume_Name);
    }
  }
  {
    const uci::type::AMTI_ActivityCommandType::BlankingVolume& boundedList = accessor.getBlankingVolume();
    for (uci::type::AMTI_ActivityCommandType::BlankingVolume::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      AirTargetVolumeType::serialize(boundedList.at(i), node, AMTI_ActivityCommandType_Names::BlankingVolume_Name);
    }
  }
  if (accessor.hasFrequency()) {
    CapabilityCommandFrequencyType::serialize(accessor.getFrequency(), node, AMTI_ActivityCommandType_Names::Frequency_Name);
  }
  if (accessor.hasCollectionOptions()) {
    RadarCollectionOptionsType::serialize(accessor.getCollectionOptions(), node, AMTI_ActivityCommandType_Names::CollectionOptions_Name);
  }
  if (accessor.hasCollectionConstraints()) {
    AMTI_CollectionConstraintsType::serialize(accessor.getCollectionConstraints(), node, AMTI_ActivityCommandType_Names::CollectionConstraints_Name);
  }
  if (accessor.hasTrackingRange()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getTrackingRange(), node, AMTI_ActivityCommandType_Names::TrackingRange_Name);
  }
  if (accessor.hasRepetition()) {
    RepetitionType::serialize(accessor.getRepetition(), node, AMTI_ActivityCommandType_Names::Repetition_Name);
  }
  {
    const uci::type::AMTI_ActivityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
    for (uci::type::AMTI_ActivityCommandType::ProductOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ProductOutputCommandBasicType::serialize(boundedList.at(i), node, AMTI_ActivityCommandType_Names::ProductOutput_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

