/** @file ForceModelType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/ForceModelType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/AtmosphericDragModelType.h"
#include "extxml_uci/type/EarthOrientationParametersDataChoiceType.h"
#include "extxml_uci/type/GravityModelType.h"
#include "extxml_uci/type/OrbitalManeuverDetailsType.h"
#include "extxml_uci/type/PhysicalModelType.h"
#include "extxml_uci/type/SolarRadiationPressureModelType.h"
#include "extxml_uci/type/ThirdBodyGravityType.h"
#include "extxml_uci/type/VCM_ForceModelOptionsType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/ForceModelType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace ForceModelType_Names {

constexpr const char* Extern_Type_Name{"ForceModelType"};
constexpr const char* GravityModel_Name{"GravityModel"};
constexpr const char* AtmosphericDragModel_Name{"AtmosphericDragModel"};
constexpr const char* SolarRadiationPressureModel_Name{"SolarRadiationPressureModel"};
constexpr const char* ThirdBodyGravityModel_Name{"ThirdBodyGravityModel"};
constexpr const char* EarthOrientationParametersDataChoice_Name{"EarthOrientationParametersDataChoice"};
constexpr const char* PhysicalModel_Name{"PhysicalModel"};
constexpr const char* Maneuver_Name{"Maneuver"};
constexpr const char* VCM_ForceModelOptions_Name{"VCM_ForceModelOptions"};

} // namespace ForceModelType_Names

bool ForceModelType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ForceModelType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ForceModelType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ForceModelType_Names::GravityModel_Name) {
      GravityModelType::deserialize(valueType.second, accessor.enableGravityModel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ForceModelType_Names::AtmosphericDragModel_Name) {
      AtmosphericDragModelType::deserialize(valueType.second, accessor.enableAtmosphericDragModel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ForceModelType_Names::SolarRadiationPressureModel_Name) {
      SolarRadiationPressureModelType::deserialize(valueType.second, accessor.enableSolarRadiationPressureModel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ForceModelType_Names::ThirdBodyGravityModel_Name) {
      ThirdBodyGravityType::deserialize(valueType.second, accessor.enableThirdBodyGravityModel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ForceModelType_Names::EarthOrientationParametersDataChoice_Name) {
      EarthOrientationParametersDataChoiceType::deserialize(valueType.second, accessor.enableEarthOrientationParametersDataChoice(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ForceModelType_Names::PhysicalModel_Name) {
      PhysicalModelType::deserialize(valueType.second, accessor.enablePhysicalModel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ForceModelType_Names::Maneuver_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ForceModelType::Maneuver& boundedList = accessor.getManeuver();
        const uci::type::ForceModelType::Maneuver::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        OrbitalManeuverDetailsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ForceModelType_Names::VCM_ForceModelOptions_Name) {
      VCM_ForceModelOptionsType::deserialize(valueType.second, accessor.enableVCM_ForceModelOptions(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string ForceModelType::serialize(const uci::type::ForceModelType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? ForceModelType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, ForceModelType_Names::Extern_Type_Name);
  }
  if (accessor.hasGravityModel()) {
    GravityModelType::serialize(accessor.getGravityModel(), node, ForceModelType_Names::GravityModel_Name);
  }
  if (accessor.hasAtmosphericDragModel()) {
    AtmosphericDragModelType::serialize(accessor.getAtmosphericDragModel(), node, ForceModelType_Names::AtmosphericDragModel_Name);
  }
  if (accessor.hasSolarRadiationPressureModel()) {
    SolarRadiationPressureModelType::serialize(accessor.getSolarRadiationPressureModel(), node, ForceModelType_Names::SolarRadiationPressureModel_Name);
  }
  if (accessor.hasThirdBodyGravityModel()) {
    ThirdBodyGravityType::serialize(accessor.getThirdBodyGravityModel(), node, ForceModelType_Names::ThirdBodyGravityModel_Name);
  }
  if (accessor.hasEarthOrientationParametersDataChoice()) {
    EarthOrientationParametersDataChoiceType::serialize(accessor.getEarthOrientationParametersDataChoice(), node, ForceModelType_Names::EarthOrientationParametersDataChoice_Name);
  }
  if (accessor.hasPhysicalModel()) {
    PhysicalModelType::serialize(accessor.getPhysicalModel(), node, ForceModelType_Names::PhysicalModel_Name);
  }
  {
    const uci::type::ForceModelType::Maneuver& boundedList = accessor.getManeuver();
    for (uci::type::ForceModelType::Maneuver::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitalManeuverDetailsType::serialize(boundedList.at(i), node, ForceModelType_Names::Maneuver_Name);
    }
  }
  if (accessor.hasVCM_ForceModelOptions()) {
    VCM_ForceModelOptionsType::serialize(accessor.getVCM_ForceModelOptions(), node, ForceModelType_Names::VCM_ForceModelOptions_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

