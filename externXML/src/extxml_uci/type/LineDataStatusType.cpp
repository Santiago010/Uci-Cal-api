/** @file LineDataStatusType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/LineDataStatusType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/ComponentDetailedStatusType.h"
#include "extxml_uci/type/ComponentPressureType.h"
#include "extxml_uci/type/ComponentTemperatureType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/LineDataStatusType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace LineDataStatusType_Names {

constexpr const char* Extern_Type_Name{"LineDataStatusType"};
constexpr const char* PressureData_Name{"PressureData"};
constexpr const char* TemperatureData_Name{"TemperatureData"};
constexpr const char* FlowRate_Name{"FlowRate"};
constexpr const char* Direction_Name{"Direction"};
constexpr const char* IsGravityFeed_Name{"IsGravityFeed"};

} // namespace LineDataStatusType_Names

bool LineDataStatusType::deserialize(const boost::property_tree::ptree& propTree, uci::type::LineDataStatusType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = LineDataStatusType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + LineDataStatusType_Names::PressureData_Name) {
      ComponentPressureType::deserialize(valueType.second, accessor.enablePressureData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LineDataStatusType_Names::TemperatureData_Name) {
      ComponentTemperatureType::deserialize(valueType.second, accessor.enableTemperatureData(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + LineDataStatusType_Names::FlowRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFlowRate(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + LineDataStatusType_Names::Direction_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDirection(*value);
      }
    } else if (valueType.first == nsPrefix + LineDataStatusType_Names::IsGravityFeed_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIsGravityFeed(*value);
      }
    }
  }
  ComponentDetailedStatusType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string LineDataStatusType::serialize(const uci::type::LineDataStatusType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? LineDataStatusType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, LineDataStatusType_Names::Extern_Type_Name);
  }
  ComponentDetailedStatusType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasPressureData()) {
    ComponentPressureType::serialize(accessor.getPressureData(), node, LineDataStatusType_Names::PressureData_Name);
  }
  if (accessor.hasTemperatureData()) {
    ComponentTemperatureType::serialize(accessor.getTemperatureData(), node, LineDataStatusType_Names::TemperatureData_Name);
  }
  if (accessor.hasFlowRate()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getFlowRate(), node, LineDataStatusType_Names::FlowRate_Name);
  }
  if (accessor.hasDirection()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getDirection(), node, LineDataStatusType_Names::Direction_Name);
  }
  if (accessor.hasIsGravityFeed()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getIsGravityFeed(), node, LineDataStatusType_Names::IsGravityFeed_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

