/** @file EntityIdentityChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/EntityIdentityChoiceType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/EOB_IdentityType.h"
#include "extxml_uci/type/EmitterIdentityType.h"
#include "extxml_uci/type/EnvironmentIdentityType.h"
#include "extxml_uci/type/FacilityIdentificationType.h"
#include "extxml_uci/type/PlatformIdentityType.h"
#include "extxml_uci/type/SpecificEmitterIdentityType.h"
#include "extxml_uci/type/SpecificIdentityType.h"
#include "extxml_uci/type/StandardIdentityType.h"
#include "extxml_uci/type/StoreType.h"
#include "extxml_uci/type/VehicleIdentificationType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/EntityIdentityChoiceType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace EntityIdentityChoiceType_Names {

constexpr const char* Extern_Type_Name{"EntityIdentityChoiceType"};
constexpr const char* Standard_Name{"Standard"};
constexpr const char* Environment_Name{"Environment"};
constexpr const char* Platform_Name{"Platform"};
constexpr const char* Specific_Name{"Specific"};
constexpr const char* Emitter_Name{"Emitter"};
constexpr const char* SpecificEmitter_Name{"SpecificEmitter"};
constexpr const char* SpecificVehicle_Name{"SpecificVehicle"};
constexpr const char* SpecificFacility_Name{"SpecificFacility"};
constexpr const char* EOB_Name{"EOB"};
constexpr const char* Weapon_Name{"Weapon"};

} // namespace EntityIdentityChoiceType_Names

bool EntityIdentityChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityIdentityChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityIdentityChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityIdentityChoiceType_Names::Standard_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseStandard(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityIdentityChoiceType_Names::Environment_Name) {
      EnvironmentIdentityType::deserialize(valueType.second, accessor.chooseEnvironment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityIdentityChoiceType_Names::Platform_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.choosePlatform(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityIdentityChoiceType_Names::Specific_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseSpecific(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityIdentityChoiceType_Names::Emitter_Name) {
      EmitterIdentityType::deserialize(valueType.second, accessor.chooseEmitter(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityIdentityChoiceType_Names::SpecificEmitter_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseSpecificEmitter(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityIdentityChoiceType_Names::SpecificVehicle_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseSpecificVehicle(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityIdentityChoiceType_Names::SpecificFacility_Name) {
      FacilityIdentificationType::deserialize(valueType.second, accessor.chooseSpecificFacility(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityIdentityChoiceType_Names::EOB_Name) {
      EOB_IdentityType::deserialize(valueType.second, accessor.chooseEOB(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityIdentityChoiceType_Names::Weapon_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseWeapon(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string EntityIdentityChoiceType::serialize(const uci::type::EntityIdentityChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? EntityIdentityChoiceType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, EntityIdentityChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isStandard()) {
    StandardIdentityType::serialize(accessor.getStandard(), node, EntityIdentityChoiceType_Names::Standard_Name);
  } else if (accessor.isEnvironment()) {
    EnvironmentIdentityType::serialize(accessor.getEnvironment(), node, EntityIdentityChoiceType_Names::Environment_Name);
  } else if (accessor.isPlatform()) {
    PlatformIdentityType::serialize(accessor.getPlatform(), node, EntityIdentityChoiceType_Names::Platform_Name);
  } else if (accessor.isSpecific()) {
    SpecificIdentityType::serialize(accessor.getSpecific(), node, EntityIdentityChoiceType_Names::Specific_Name);
  } else if (accessor.isEmitter()) {
    EmitterIdentityType::serialize(accessor.getEmitter(), node, EntityIdentityChoiceType_Names::Emitter_Name);
  } else if (accessor.isSpecificEmitter()) {
    SpecificEmitterIdentityType::serialize(accessor.getSpecificEmitter(), node, EntityIdentityChoiceType_Names::SpecificEmitter_Name);
  } else if (accessor.isSpecificVehicle()) {
    VehicleIdentificationType::serialize(accessor.getSpecificVehicle(), node, EntityIdentityChoiceType_Names::SpecificVehicle_Name);
  } else if (accessor.isSpecificFacility()) {
    FacilityIdentificationType::serialize(accessor.getSpecificFacility(), node, EntityIdentityChoiceType_Names::SpecificFacility_Name);
  } else if (accessor.isEOB()) {
    EOB_IdentityType::serialize(accessor.getEOB(), node, EntityIdentityChoiceType_Names::EOB_Name);
  } else if (accessor.isWeapon()) {
    StoreType::serialize(accessor.getWeapon(), node, EntityIdentityChoiceType_Names::Weapon_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

