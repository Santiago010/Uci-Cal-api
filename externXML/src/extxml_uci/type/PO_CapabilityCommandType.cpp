/** @file PO_CapabilityCommandType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/PO_CapabilityCommandType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/CapabilityCommandBaseType.h"
#include "extxml_uci/type/CollectionPolicyEnum.h"
#include "extxml_uci/type/PO_CollectionConstraintsSettingsType.h"
#include "extxml_uci/type/PO_ComponentSettingsType.h"
#include "extxml_uci/type/PO_ProductOutputCommandImageryType.h"
#include "extxml_uci/type/PO_SubCapabilitySettingsType.h"
#include "extxml_uci/type/PO_TargetType.h"
#include "extxml_uci/type/PO_TrackDetailsType.h"
#include "extxml_uci/type/PairIdentifierEnum.h"
#include "extxml_uci/type/RepetitionType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/PO_CapabilityCommandType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PO_CapabilityCommandType_Names {

constexpr const char* Extern_Type_Name{"PO_CapabilityCommandType"};
constexpr const char* Pointing_Name{"Pointing"};
constexpr const char* SubCapability_Name{"SubCapability"};
constexpr const char* ComponentSettings_Name{"ComponentSettings"};
constexpr const char* CollectionConstraints_Name{"CollectionConstraints"};
constexpr const char* TrackDetails_Name{"TrackDetails"};
constexpr const char* CollectionPolicy_Name{"CollectionPolicy"};
constexpr const char* PairIdentifier_Name{"PairIdentifier"};
constexpr const char* Repetition_Name{"Repetition"};
constexpr const char* ProductOutput_Name{"ProductOutput"};

} // namespace PO_CapabilityCommandType_Names

bool PO_CapabilityCommandType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_CapabilityCommandType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_CapabilityCommandType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::Pointing_Name) {
      PO_TargetType::deserialize(valueType.second, accessor.enablePointing(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::SubCapability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityCommandType::SubCapability& boundedList = accessor.getSubCapability();
        const uci::type::PO_CapabilityCommandType::SubCapability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PO_SubCapabilitySettingsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::ComponentSettings_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityCommandType::ComponentSettings& boundedList = accessor.getComponentSettings();
        const uci::type::PO_CapabilityCommandType::ComponentSettings::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PO_ComponentSettingsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::CollectionConstraints_Name) {
      PO_CollectionConstraintsSettingsType::deserialize(valueType.second, accessor.enableCollectionConstraints(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::TrackDetails_Name) {
      PO_TrackDetailsType::deserialize(valueType.second, accessor.enableTrackDetails(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::CollectionPolicy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableCollectionPolicy().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::PairIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePairIdentifier().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::Repetition_Name) {
      RepetitionType::deserialize(valueType.second, accessor.enableRepetition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CapabilityCommandType_Names::ProductOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
        const uci::type::PO_CapabilityCommandType::ProductOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PO_ProductOutputCommandImageryType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  CapabilityCommandBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string PO_CapabilityCommandType::serialize(const uci::type::PO_CapabilityCommandType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PO_CapabilityCommandType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, PO_CapabilityCommandType_Names::Extern_Type_Name);
  }
  CapabilityCommandBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasPointing()) {
    PO_TargetType::serialize(accessor.getPointing(), node, PO_CapabilityCommandType_Names::Pointing_Name);
  }
  {
    const uci::type::PO_CapabilityCommandType::SubCapability& boundedList = accessor.getSubCapability();
    for (uci::type::PO_CapabilityCommandType::SubCapability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_SubCapabilitySettingsType::serialize(boundedList.at(i), node, PO_CapabilityCommandType_Names::SubCapability_Name);
    }
  }
  {
    const uci::type::PO_CapabilityCommandType::ComponentSettings& boundedList = accessor.getComponentSettings();
    for (uci::type::PO_CapabilityCommandType::ComponentSettings::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_ComponentSettingsType::serialize(boundedList.at(i), node, PO_CapabilityCommandType_Names::ComponentSettings_Name);
    }
  }
  if (accessor.hasCollectionConstraints()) {
    PO_CollectionConstraintsSettingsType::serialize(accessor.getCollectionConstraints(), node, PO_CapabilityCommandType_Names::CollectionConstraints_Name);
  }
  if (accessor.hasTrackDetails()) {
    PO_TrackDetailsType::serialize(accessor.getTrackDetails(), node, PO_CapabilityCommandType_Names::TrackDetails_Name);
  }
  if (accessor.hasCollectionPolicy()) {
    CollectionPolicyEnum::serialize(accessor.getCollectionPolicy(), node, PO_CapabilityCommandType_Names::CollectionPolicy_Name, false);
  }
  if (accessor.hasPairIdentifier()) {
    PairIdentifierEnum::serialize(accessor.getPairIdentifier(), node, PO_CapabilityCommandType_Names::PairIdentifier_Name, false);
  }
  if (accessor.hasRepetition()) {
    RepetitionType::serialize(accessor.getRepetition(), node, PO_CapabilityCommandType_Names::Repetition_Name);
  }
  {
    const uci::type::PO_CapabilityCommandType::ProductOutput& boundedList = accessor.getProductOutput();
    for (uci::type::PO_CapabilityCommandType::ProductOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_ProductOutputCommandImageryType::serialize(boundedList.at(i), node, PO_CapabilityCommandType_Names::ProductOutput_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

