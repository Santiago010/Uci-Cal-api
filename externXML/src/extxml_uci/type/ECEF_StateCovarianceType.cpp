/** @file ECEF_StateCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/ECEF_StateCovarianceType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/ECEF_AccelerationAccelerationCovarianceType.h"
#include "extxml_uci/type/ECEF_PositionAccelerationCovarianceType.h"
#include "extxml_uci/type/ECEF_PositionOrientationCovarianceType.h"
#include "extxml_uci/type/ECEF_PositionPositionCovarianceType.h"
#include "extxml_uci/type/ECEF_PositionVelocityCovarianceType.h"
#include "extxml_uci/type/ECEF_VelocityAccelerationCovarianceType.h"
#include "extxml_uci/type/ECEF_VelocityOrientationCovarianceType.h"
#include "extxml_uci/type/ECEF_VelocityVelocityCovarianceType.h"
#include "extxml_uci/type/OrientationCovarianceType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/ECEF_StateCovarianceType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace ECEF_StateCovarianceType_Names {

constexpr const char* Extern_Type_Name{"ECEF_StateCovarianceType"};
constexpr const char* TimeBiasError_Name{"TimeBiasError"};
constexpr const char* PositionPosition_Name{"PositionPosition"};
constexpr const char* PositionVelocity_Name{"PositionVelocity"};
constexpr const char* VelocityVelocity_Name{"VelocityVelocity"};
constexpr const char* AccelerationAcceleration_Name{"AccelerationAcceleration"};
constexpr const char* PositionAcceleration_Name{"PositionAcceleration"};
constexpr const char* VelocityAcceleration_Name{"VelocityAcceleration"};
constexpr const char* OrientationCovariance_Name{"OrientationCovariance"};
constexpr const char* PositionOrientationCovariance_Name{"PositionOrientationCovariance"};
constexpr const char* VelocityOrientationCovariance_Name{"VelocityOrientationCovariance"};

} // namespace ECEF_StateCovarianceType_Names

bool ECEF_StateCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ECEF_StateCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ECEF_StateCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::TimeBiasError_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeBiasError(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::PositionPosition_Name) {
      ECEF_PositionPositionCovarianceType::deserialize(valueType.second, accessor.enablePositionPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::PositionVelocity_Name) {
      ECEF_PositionVelocityCovarianceType::deserialize(valueType.second, accessor.enablePositionVelocity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::VelocityVelocity_Name) {
      ECEF_VelocityVelocityCovarianceType::deserialize(valueType.second, accessor.enableVelocityVelocity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::AccelerationAcceleration_Name) {
      ECEF_AccelerationAccelerationCovarianceType::deserialize(valueType.second, accessor.enableAccelerationAcceleration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::PositionAcceleration_Name) {
      ECEF_PositionAccelerationCovarianceType::deserialize(valueType.second, accessor.enablePositionAcceleration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::VelocityAcceleration_Name) {
      ECEF_VelocityAccelerationCovarianceType::deserialize(valueType.second, accessor.enableVelocityAcceleration(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::OrientationCovariance_Name) {
      OrientationCovarianceType::deserialize(valueType.second, accessor.enableOrientationCovariance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::PositionOrientationCovariance_Name) {
      ECEF_PositionOrientationCovarianceType::deserialize(valueType.second, accessor.enablePositionOrientationCovariance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ECEF_StateCovarianceType_Names::VelocityOrientationCovariance_Name) {
      ECEF_VelocityOrientationCovarianceType::deserialize(valueType.second, accessor.enableVelocityOrientationCovariance(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string ECEF_StateCovarianceType::serialize(const uci::type::ECEF_StateCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? ECEF_StateCovarianceType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, ECEF_StateCovarianceType_Names::Extern_Type_Name);
  }
  if (accessor.hasTimeBiasError()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getTimeBiasError(), node, ECEF_StateCovarianceType_Names::TimeBiasError_Name);
  }
  if (accessor.hasPositionPosition()) {
    ECEF_PositionPositionCovarianceType::serialize(accessor.getPositionPosition(), node, ECEF_StateCovarianceType_Names::PositionPosition_Name);
  }
  if (accessor.hasPositionVelocity()) {
    ECEF_PositionVelocityCovarianceType::serialize(accessor.getPositionVelocity(), node, ECEF_StateCovarianceType_Names::PositionVelocity_Name);
  }
  if (accessor.hasVelocityVelocity()) {
    ECEF_VelocityVelocityCovarianceType::serialize(accessor.getVelocityVelocity(), node, ECEF_StateCovarianceType_Names::VelocityVelocity_Name);
  }
  if (accessor.hasAccelerationAcceleration()) {
    ECEF_AccelerationAccelerationCovarianceType::serialize(accessor.getAccelerationAcceleration(), node, ECEF_StateCovarianceType_Names::AccelerationAcceleration_Name);
  }
  if (accessor.hasPositionAcceleration()) {
    ECEF_PositionAccelerationCovarianceType::serialize(accessor.getPositionAcceleration(), node, ECEF_StateCovarianceType_Names::PositionAcceleration_Name);
  }
  if (accessor.hasVelocityAcceleration()) {
    ECEF_VelocityAccelerationCovarianceType::serialize(accessor.getVelocityAcceleration(), node, ECEF_StateCovarianceType_Names::VelocityAcceleration_Name);
  }
  if (accessor.hasOrientationCovariance()) {
    OrientationCovarianceType::serialize(accessor.getOrientationCovariance(), node, ECEF_StateCovarianceType_Names::OrientationCovariance_Name);
  }
  if (accessor.hasPositionOrientationCovariance()) {
    ECEF_PositionOrientationCovarianceType::serialize(accessor.getPositionOrientationCovariance(), node, ECEF_StateCovarianceType_Names::PositionOrientationCovariance_Name);
  }
  if (accessor.hasVelocityOrientationCovariance()) {
    ECEF_VelocityOrientationCovarianceType::serialize(accessor.getVelocityOrientationCovariance(), node, ECEF_StateCovarianceType_Names::VelocityOrientationCovariance_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

