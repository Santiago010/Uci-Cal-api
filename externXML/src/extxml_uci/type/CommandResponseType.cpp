/** @file CommandResponseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/CommandResponseType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/AMTI_CommandResponseType.h"
#include "extxml_uci/type/AO_CommandResponseType.h"
#include "extxml_uci/type/AirSampleCommandResponseType.h"
#include "extxml_uci/type/COMINT_CommandResponseType.h"
#include "extxml_uci/type/CommRelayCommandResponseType.h"
#include "extxml_uci/type/EA_CommandResponseType.h"
#include "extxml_uci/type/ESM_CommandResponseType.h"
#include "extxml_uci/type/PO_CommandResponseType.h"
#include "extxml_uci/type/SAR_CommandResponseType.h"
#include "extxml_uci/type/SMTI_CommandResponseType.h"
#include "extxml_uci/type/StrikeWeaponCommandType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/CommandResponseType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace CommandResponseType_Names {

constexpr const char* Extern_Type_Name{"CommandResponseType"};
constexpr const char* AirSample_Name{"AirSample"};
constexpr const char* AMTI_Name{"AMTI"};
constexpr const char* AO_Name{"AO"};
constexpr const char* COMINT_Name{"COMINT"};
constexpr const char* CommRelay_Name{"CommRelay"};
constexpr const char* EA_Name{"EA"};
constexpr const char* ESM_Name{"ESM"};
constexpr const char* PO_Name{"PO"};
constexpr const char* SAR_Name{"SAR"};
constexpr const char* SMTI_Name{"SMTI"};
constexpr const char* Strike_Name{"Strike"};
constexpr const char* WeatherRadar_Name{"WeatherRadar"};

} // namespace CommandResponseType_Names

bool CommandResponseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommandResponseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommandResponseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::AirSample_Name) {
      AirSampleCommandResponseType::deserialize(valueType.second, accessor.chooseAirSample(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::AMTI_Name) {
      AMTI_CommandResponseType::deserialize(valueType.second, accessor.chooseAMTI(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::AO_Name) {
      AO_CommandResponseType::deserialize(valueType.second, accessor.chooseAO(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::COMINT_Name) {
      COMINT_CommandResponseType::deserialize(valueType.second, accessor.chooseCOMINT(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::CommRelay_Name) {
      CommRelayCommandResponseType::deserialize(valueType.second, accessor.chooseCommRelay(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::EA_Name) {
      EA_CommandResponseType::deserialize(valueType.second, accessor.chooseEA(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::ESM_Name) {
      ESM_CommandResponseType::deserialize(valueType.second, accessor.chooseESM(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::PO_Name) {
      PO_CommandResponseType::deserialize(valueType.second, accessor.choosePO(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::SAR_Name) {
      SAR_CommandResponseType::deserialize(valueType.second, accessor.chooseSAR(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::SMTI_Name) {
      SMTI_CommandResponseType::deserialize(valueType.second, accessor.chooseSMTI(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::Strike_Name) {
      StrikeWeaponCommandType::deserialize(valueType.second, accessor.chooseStrike(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommandResponseType_Names::WeatherRadar_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.chooseWeatherRadar().setStringValue(*value);
      }
    }
  }
  return true;
}

std::string CommandResponseType::serialize(const uci::type::CommandResponseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? CommandResponseType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, CommandResponseType_Names::Extern_Type_Name);
  }
  if (accessor.isAirSample()) {
    AirSampleCommandResponseType::serialize(accessor.getAirSample(), node, CommandResponseType_Names::AirSample_Name);
  } else if (accessor.isAMTI()) {
    AMTI_CommandResponseType::serialize(accessor.getAMTI(), node, CommandResponseType_Names::AMTI_Name);
  } else if (accessor.isAO()) {
    AO_CommandResponseType::serialize(accessor.getAO(), node, CommandResponseType_Names::AO_Name);
  } else if (accessor.isCOMINT()) {
    COMINT_CommandResponseType::serialize(accessor.getCOMINT(), node, CommandResponseType_Names::COMINT_Name);
  } else if (accessor.isCommRelay()) {
    CommRelayCommandResponseType::serialize(accessor.getCommRelay(), node, CommandResponseType_Names::CommRelay_Name);
  } else if (accessor.isEA()) {
    EA_CommandResponseType::serialize(accessor.getEA(), node, CommandResponseType_Names::EA_Name);
  } else if (accessor.isESM()) {
    ESM_CommandResponseType::serialize(accessor.getESM(), node, CommandResponseType_Names::ESM_Name);
  } else if (accessor.isPO()) {
    PO_CommandResponseType::serialize(accessor.getPO(), node, CommandResponseType_Names::PO_Name);
  } else if (accessor.isSAR()) {
    SAR_CommandResponseType::serialize(accessor.getSAR(), node, CommandResponseType_Names::SAR_Name);
  } else if (accessor.isSMTI()) {
    SMTI_CommandResponseType::serialize(accessor.getSMTI(), node, CommandResponseType_Names::SMTI_Name);
  } else if (accessor.isStrike()) {
    StrikeWeaponCommandType::serialize(accessor.getStrike(), node, CommandResponseType_Names::Strike_Name);
  } else if (accessor.isWeatherRadar()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getWeatherRadar(), node, CommandResponseType_Names::WeatherRadar_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

