/** @file MTI_ActivityStatusBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/MTI_ActivityStatusBaseType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/ConcurrentCollectionDetailsType.h"
#include "extxml_uci/type/RelativeDirectionEnum.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/DerivedTypesSerializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/MTI_ActivityStatusBaseType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace MTI_ActivityStatusBaseType_Names {

constexpr const char* Extern_Type_Name{"MTI_ActivityStatusBaseType"};
constexpr const char* NumberOfTimesSearched_Name{"NumberOfTimesSearched"};
constexpr const char* TimeLastSearched_Name{"TimeLastSearched"};
constexpr const char* Attempts_Name{"Attempts"};
constexpr const char* ActualRevisitPeriod_Name{"ActualRevisitPeriod"};
constexpr const char* PercentageInFOR_Name{"PercentageInFOR"};
constexpr const char* ActualStartTime_Name{"ActualStartTime"};
constexpr const char* ActualStopTime_Name{"ActualStopTime"};
constexpr const char* PercentSearched_Name{"PercentSearched"};
constexpr const char* EntitiesReported_Name{"EntitiesReported"};
constexpr const char* CueAcquired_Name{"CueAcquired"};
constexpr const char* ConcurrentActivity_Name{"ConcurrentActivity"};
constexpr const char* PercentOccluded_Name{"PercentOccluded"};
constexpr const char* PercentRadarTimeline_Name{"PercentRadarTimeline"};
constexpr const char* PercentageInFOV_Name{"PercentageInFOV"};
constexpr const char* RelativeDirectionOfTarget_Name{"RelativeDirectionOfTarget"};

} // namespace MTI_ActivityStatusBaseType_Names

bool MTI_ActivityStatusBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::MTI_ActivityStatusBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = MTI_ActivityStatusBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::NumberOfTimesSearched_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumberOfTimesSearched(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::TimeLastSearched_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeLastSearched(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::Attempts_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAttempts(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::ActualRevisitPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualRevisitPeriod(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::PercentageInFOR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentageInFOR(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::ActualStartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStartTime(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::ActualStopTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setActualStopTime(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::PercentSearched_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentSearched(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::EntitiesReported_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEntitiesReported(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::CueAcquired_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCueAcquired(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::ConcurrentActivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::MTI_ActivityStatusBaseType::ConcurrentActivity& boundedList = accessor.getConcurrentActivity();
        const uci::type::MTI_ActivityStatusBaseType::ConcurrentActivity::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ConcurrentCollectionDetailsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::PercentOccluded_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentOccluded(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::PercentRadarTimeline_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentRadarTimeline(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::PercentageInFOV_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPercentageInFOV(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + MTI_ActivityStatusBaseType_Names::RelativeDirectionOfTarget_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableRelativeDirectionOfTarget().setValueFromName(*value);
      }
    }
  }
  return true;
}

std::string MTI_ActivityStatusBaseType::serialize(const uci::type::MTI_ActivityStatusBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? MTI_ActivityStatusBaseType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::mTI_ActivityStatusBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extxml_uci::util::SerializationHelpers::addTypeAttribute(node, MTI_ActivityStatusBaseType_Names::Extern_Type_Name);
    }
    if (accessor.hasNumberOfTimesSearched()) {
      extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumberOfTimesSearched(), node, MTI_ActivityStatusBaseType_Names::NumberOfTimesSearched_Name);
    }
    if (accessor.hasTimeLastSearched()) {
      extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimeLastSearched(), node, MTI_ActivityStatusBaseType_Names::TimeLastSearched_Name);
    }
    if (accessor.hasAttempts()) {
      extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getAttempts(), node, MTI_ActivityStatusBaseType_Names::Attempts_Name);
    }
    if (accessor.hasActualRevisitPeriod()) {
      extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getActualRevisitPeriod(), node, MTI_ActivityStatusBaseType_Names::ActualRevisitPeriod_Name);
    }
    if (accessor.hasPercentageInFOR()) {
      extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentageInFOR(), node, MTI_ActivityStatusBaseType_Names::PercentageInFOR_Name);
    }
    if (accessor.hasActualStartTime()) {
      extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStartTime(), node, MTI_ActivityStatusBaseType_Names::ActualStartTime_Name);
    }
    if (accessor.hasActualStopTime()) {
      extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getActualStopTime(), node, MTI_ActivityStatusBaseType_Names::ActualStopTime_Name);
    }
    if (accessor.hasPercentSearched()) {
      extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentSearched(), node, MTI_ActivityStatusBaseType_Names::PercentSearched_Name);
    }
    if (accessor.hasEntitiesReported()) {
      extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getEntitiesReported(), node, MTI_ActivityStatusBaseType_Names::EntitiesReported_Name);
    }
    if (accessor.hasCueAcquired()) {
      extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getCueAcquired(), node, MTI_ActivityStatusBaseType_Names::CueAcquired_Name);
    }
    {
      const uci::type::MTI_ActivityStatusBaseType::ConcurrentActivity& boundedList = accessor.getConcurrentActivity();
      for (uci::type::MTI_ActivityStatusBaseType::ConcurrentActivity::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        ConcurrentCollectionDetailsType::serialize(boundedList.at(i), node, MTI_ActivityStatusBaseType_Names::ConcurrentActivity_Name);
      }
    }
    if (accessor.hasPercentOccluded()) {
      extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentOccluded(), node, MTI_ActivityStatusBaseType_Names::PercentOccluded_Name);
    }
    if (accessor.hasPercentRadarTimeline()) {
      extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentRadarTimeline(), node, MTI_ActivityStatusBaseType_Names::PercentRadarTimeline_Name);
    }
    if (accessor.hasPercentageInFOV()) {
      extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getPercentageInFOV(), node, MTI_ActivityStatusBaseType_Names::PercentageInFOV_Name);
    }
    if (accessor.hasRelativeDirectionOfTarget()) {
      RelativeDirectionEnum::serialize(accessor.getRelativeDirectionOfTarget(), node, MTI_ActivityStatusBaseType_Names::RelativeDirectionOfTarget_Name, false);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    extxml_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

