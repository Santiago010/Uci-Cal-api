/** @file ECEF_AccelerationAccelerationCovarianceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/ECEF_AccelerationAccelerationCovarianceType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/ECEF_AccelerationAccelerationCovarianceType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace ECEF_AccelerationAccelerationCovarianceType_Names {

constexpr const char* Extern_Type_Name{"ECEF_AccelerationAccelerationCovarianceType"};
constexpr const char* AxAx_Name{"AxAx"};
constexpr const char* AxAy_Name{"AxAy"};
constexpr const char* AxAz_Name{"AxAz"};
constexpr const char* AyAy_Name{"AyAy"};
constexpr const char* AyAz_Name{"AyAz"};
constexpr const char* AzAz_Name{"AzAz"};

} // namespace ECEF_AccelerationAccelerationCovarianceType_Names

bool ECEF_AccelerationAccelerationCovarianceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::ECEF_AccelerationAccelerationCovarianceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ECEF_AccelerationAccelerationCovarianceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ECEF_AccelerationAccelerationCovarianceType_Names::AxAx_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAxAx(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_AccelerationAccelerationCovarianceType_Names::AxAy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAxAy(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_AccelerationAccelerationCovarianceType_Names::AxAz_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAxAz(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_AccelerationAccelerationCovarianceType_Names::AyAy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAyAy(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_AccelerationAccelerationCovarianceType_Names::AyAz_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAyAz(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + ECEF_AccelerationAccelerationCovarianceType_Names::AzAz_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAzAz(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    }
  }
  return true;
}

std::string ECEF_AccelerationAccelerationCovarianceType::serialize(const uci::type::ECEF_AccelerationAccelerationCovarianceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? ECEF_AccelerationAccelerationCovarianceType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, ECEF_AccelerationAccelerationCovarianceType_Names::Extern_Type_Name);
  }
  extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getAxAx(), node, ECEF_AccelerationAccelerationCovarianceType_Names::AxAx_Name);
  extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getAxAy(), node, ECEF_AccelerationAccelerationCovarianceType_Names::AxAy_Name);
  extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getAxAz(), node, ECEF_AccelerationAccelerationCovarianceType_Names::AxAz_Name);
  extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getAyAy(), node, ECEF_AccelerationAccelerationCovarianceType_Names::AyAy_Name);
  extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getAyAz(), node, ECEF_AccelerationAccelerationCovarianceType_Names::AyAz_Name);
  extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getAzAz(), node, ECEF_AccelerationAccelerationCovarianceType_Names::AzAz_Name);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

