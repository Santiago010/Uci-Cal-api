/** @file NotificationBaseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/NotificationBaseType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/NotificationID_Type.h"
#include "extxml_uci/type/NotificationSeverityEnum.h"
#include "extxml_uci/type/NotificationSourceType.h"
#include "extxml_uci/type/NotificationStateEnum.h"
#include "extxml_uci/type/SubjectType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/DerivedTypesSerializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/NotificationBaseType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace NotificationBaseType_Names {

constexpr const char* Extern_Type_Name{"NotificationBaseType"};
constexpr const char* NotificationID_Name{"NotificationID"};
constexpr const char* NotificationState_Name{"NotificationState"};
constexpr const char* Timestamp_Name{"Timestamp"};
constexpr const char* Source_Name{"Source"};
constexpr const char* Severity_Name{"Severity"};
constexpr const char* AppliesTo_Name{"AppliesTo"};
constexpr const char* NotificationNarrative_Name{"NotificationNarrative"};

} // namespace NotificationBaseType_Names

bool NotificationBaseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::NotificationBaseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = NotificationBaseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + NotificationBaseType_Names::NotificationID_Name) {
      NotificationID_Type::deserialize(valueType.second, accessor.getNotificationID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NotificationBaseType_Names::NotificationState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getNotificationState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + NotificationBaseType_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + NotificationBaseType_Names::Source_Name) {
      NotificationSourceType::deserialize(valueType.second, accessor.getSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NotificationBaseType_Names::Severity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSeverity().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + NotificationBaseType_Names::AppliesTo_Name) {
      uci::type::NotificationBaseType::AppliesTo& boundedList = accessor.getAppliesTo();
      const uci::type::NotificationBaseType::AppliesTo::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      SubjectType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + NotificationBaseType_Names::NotificationNarrative_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNotificationNarrative(*value);
      }
    }
  }
  return true;
}

std::string NotificationBaseType::serialize(const uci::type::NotificationBaseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? NotificationBaseType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::notificationBaseType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extxml_uci::util::SerializationHelpers::addTypeAttribute(node, NotificationBaseType_Names::Extern_Type_Name);
    }
    NotificationID_Type::serialize(accessor.getNotificationID(), node, NotificationBaseType_Names::NotificationID_Name);
    NotificationStateEnum::serialize(accessor.getNotificationState(), node, NotificationBaseType_Names::NotificationState_Name, false);
    extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, NotificationBaseType_Names::Timestamp_Name);
    NotificationSourceType::serialize(accessor.getSource(), node, NotificationBaseType_Names::Source_Name);
    NotificationSeverityEnum::serialize(accessor.getSeverity(), node, NotificationBaseType_Names::Severity_Name, false);
    {
      const uci::type::NotificationBaseType::AppliesTo& boundedList = accessor.getAppliesTo();
      for (uci::type::NotificationBaseType::AppliesTo::size_type i = 0, end = boundedList.size(); i < end; ++i) {
        SubjectType::serialize(boundedList.at(i), node, NotificationBaseType_Names::AppliesTo_Name);
      }
    }
    if (accessor.hasNotificationNarrative()) {
      extxml_uci::util::SerializationHelpers::serializeString(accessor.getNotificationNarrative(), node, NotificationBaseType_Names::NotificationNarrative_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    extxml_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

