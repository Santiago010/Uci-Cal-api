/** @file OrbitChangeChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/OrbitChangeChoiceType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/COE_OrbitType.h"
#include "extxml_uci/type/OrbitalVolumeType.h"
#include "extxml_uci/type/ProximityOperationsType.h"
#include "extxml_uci/type/RSO_ApproachType.h"
#include "extxml_uci/type/RaceTrackOrbitType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/OrbitChangeChoiceType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace OrbitChangeChoiceType_Names {

constexpr const char* Extern_Type_Name{"OrbitChangeChoiceType"};
constexpr const char* SpecificOrbit_Name{"SpecificOrbit"};
constexpr const char* SpecificPosition_Name{"SpecificPosition"};
constexpr const char* Rendezvous_Name{"Rendezvous"};
constexpr const char* ProximityOperations_Name{"ProximityOperations"};
constexpr const char* Longitude_Name{"Longitude"};
constexpr const char* SemimajorAxis_Name{"SemimajorAxis"};
constexpr const char* Inclination_Name{"Inclination"};
constexpr const char* Eccentricity_Name{"Eccentricity"};
constexpr const char* RaceTrack_Name{"RaceTrack"};

} // namespace OrbitChangeChoiceType_Names

bool OrbitChangeChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::OrbitChangeChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = OrbitChangeChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + OrbitChangeChoiceType_Names::SpecificOrbit_Name) {
      COE_OrbitType::deserialize(valueType.second, accessor.chooseSpecificOrbit(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitChangeChoiceType_Names::SpecificPosition_Name) {
      OrbitalVolumeType::deserialize(valueType.second, accessor.chooseSpecificPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitChangeChoiceType_Names::Rendezvous_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.chooseRendezvous(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitChangeChoiceType_Names::ProximityOperations_Name) {
      ProximityOperationsType::deserialize(valueType.second, accessor.chooseProximityOperations(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + OrbitChangeChoiceType_Names::Longitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLongitude(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitChangeChoiceType_Names::SemimajorAxis_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSemimajorAxis(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitChangeChoiceType_Names::Inclination_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setInclination(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitChangeChoiceType_Names::Eccentricity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setEccentricity(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + OrbitChangeChoiceType_Names::RaceTrack_Name) {
      RaceTrackOrbitType::deserialize(valueType.second, accessor.chooseRaceTrack(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string OrbitChangeChoiceType::serialize(const uci::type::OrbitChangeChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? OrbitChangeChoiceType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, OrbitChangeChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isSpecificOrbit()) {
    COE_OrbitType::serialize(accessor.getSpecificOrbit(), node, OrbitChangeChoiceType_Names::SpecificOrbit_Name);
  } else if (accessor.isSpecificPosition()) {
    OrbitalVolumeType::serialize(accessor.getSpecificPosition(), node, OrbitChangeChoiceType_Names::SpecificPosition_Name);
  } else if (accessor.isRendezvous()) {
    RSO_ApproachType::serialize(accessor.getRendezvous(), node, OrbitChangeChoiceType_Names::Rendezvous_Name);
  } else if (accessor.isProximityOperations()) {
    ProximityOperationsType::serialize(accessor.getProximityOperations(), node, OrbitChangeChoiceType_Names::ProximityOperations_Name);
  } else if (accessor.isLongitude()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getLongitude(), node, OrbitChangeChoiceType_Names::Longitude_Name);
  } else if (accessor.isSemimajorAxis()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getSemimajorAxis(), node, OrbitChangeChoiceType_Names::SemimajorAxis_Name);
  } else if (accessor.isInclination()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getInclination(), node, OrbitChangeChoiceType_Names::Inclination_Name);
  } else if (accessor.isEccentricity()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getEccentricity(), node, OrbitChangeChoiceType_Names::Eccentricity_Name);
  } else if (accessor.isRaceTrack()) {
    RaceTrackOrbitType::serialize(accessor.getRaceTrack(), node, OrbitChangeChoiceType_Names::RaceTrack_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

