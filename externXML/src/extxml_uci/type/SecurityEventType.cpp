/** @file SecurityEventType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/SecurityEventType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/SecurityAccessType.h"
#include "extxml_uci/type/SecurityAuditManagementType.h"
#include "extxml_uci/type/SecurityAuthenticationType.h"
#include "extxml_uci/type/SecurityFileManagementType.h"
#include "extxml_uci/type/SecurityIntegrityType.h"
#include "extxml_uci/type/SecurityIntrusionDetectionType.h"
#include "extxml_uci/type/SecurityKeyManagementType.h"
#include "extxml_uci/type/SecurityPolicyManagementType.h"
#include "extxml_uci/type/SecuritySanitizationType.h"
#include "extxml_uci/type/SecuritySystemType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/SecurityEventType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SecurityEventType_Names {

constexpr const char* Extern_Type_Name{"SecurityEventType"};
constexpr const char* AccountAccess_Name{"AccountAccess"};
constexpr const char* Authentication_Name{"Authentication"};
constexpr const char* Integrity_Name{"Integrity"};
constexpr const char* AuditManagement_Name{"AuditManagement"};
constexpr const char* FileManagement_Name{"FileManagement"};
constexpr const char* KeyManagement_Name{"KeyManagement"};
constexpr const char* PolicyManagement_Name{"PolicyManagement"};
constexpr const char* System_Name{"System"};
constexpr const char* IntrusionDetection_Name{"IntrusionDetection"};
constexpr const char* Sanitization_Name{"Sanitization"};

} // namespace SecurityEventType_Names

bool SecurityEventType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SecurityEventType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SecurityEventType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SecurityEventType_Names::AccountAccess_Name) {
      SecurityAccessType::deserialize(valueType.second, accessor.chooseAccountAccess(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityEventType_Names::Authentication_Name) {
      SecurityAuthenticationType::deserialize(valueType.second, accessor.chooseAuthentication(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityEventType_Names::Integrity_Name) {
      SecurityIntegrityType::deserialize(valueType.second, accessor.chooseIntegrity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityEventType_Names::AuditManagement_Name) {
      SecurityAuditManagementType::deserialize(valueType.second, accessor.chooseAuditManagement(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityEventType_Names::FileManagement_Name) {
      SecurityFileManagementType::deserialize(valueType.second, accessor.chooseFileManagement(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityEventType_Names::KeyManagement_Name) {
      SecurityKeyManagementType::deserialize(valueType.second, accessor.chooseKeyManagement(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityEventType_Names::PolicyManagement_Name) {
      SecurityPolicyManagementType::deserialize(valueType.second, accessor.choosePolicyManagement(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityEventType_Names::System_Name) {
      SecuritySystemType::deserialize(valueType.second, accessor.chooseSystem(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityEventType_Names::IntrusionDetection_Name) {
      SecurityIntrusionDetectionType::deserialize(valueType.second, accessor.chooseIntrusionDetection(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SecurityEventType_Names::Sanitization_Name) {
      SecuritySanitizationType::deserialize(valueType.second, accessor.chooseSanitization(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string SecurityEventType::serialize(const uci::type::SecurityEventType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SecurityEventType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, SecurityEventType_Names::Extern_Type_Name);
  }
  if (accessor.isAccountAccess()) {
    SecurityAccessType::serialize(accessor.getAccountAccess(), node, SecurityEventType_Names::AccountAccess_Name);
  } else if (accessor.isAuthentication()) {
    SecurityAuthenticationType::serialize(accessor.getAuthentication(), node, SecurityEventType_Names::Authentication_Name);
  } else if (accessor.isIntegrity()) {
    SecurityIntegrityType::serialize(accessor.getIntegrity(), node, SecurityEventType_Names::Integrity_Name);
  } else if (accessor.isAuditManagement()) {
    SecurityAuditManagementType::serialize(accessor.getAuditManagement(), node, SecurityEventType_Names::AuditManagement_Name);
  } else if (accessor.isFileManagement()) {
    SecurityFileManagementType::serialize(accessor.getFileManagement(), node, SecurityEventType_Names::FileManagement_Name);
  } else if (accessor.isKeyManagement()) {
    SecurityKeyManagementType::serialize(accessor.getKeyManagement(), node, SecurityEventType_Names::KeyManagement_Name);
  } else if (accessor.isPolicyManagement()) {
    SecurityPolicyManagementType::serialize(accessor.getPolicyManagement(), node, SecurityEventType_Names::PolicyManagement_Name);
  } else if (accessor.isSystem()) {
    SecuritySystemType::serialize(accessor.getSystem(), node, SecurityEventType_Names::System_Name);
  } else if (accessor.isIntrusionDetection()) {
    SecurityIntrusionDetectionType::serialize(accessor.getIntrusionDetection(), node, SecurityEventType_Names::IntrusionDetection_Name);
  } else if (accessor.isSanitization()) {
    SecuritySanitizationType::serialize(accessor.getSanitization(), node, SecurityEventType_Names::Sanitization_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

