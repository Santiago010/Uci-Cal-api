/** @file PRI_DataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/PRI_DataType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/PRI_AgilePatternEnum.h"
#include "extxml_uci/type/PRI_DataBaseType.h"
#include "extxml_uci/type/PRI_MeasurementEnum.h"
#include "extxml_uci/type/PRI_SwitchingPatternEnum.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/PRI_DataType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PRI_DataType_Names {

constexpr const char* Extern_Type_Name{"PRI_DataType"};
constexpr const char* PRI_SwitchingPattern_Name{"PRI_SwitchingPattern"};
constexpr const char* PRI_AgilePattern_Name{"PRI_AgilePattern"};
constexpr const char* PRI_Measurement_Name{"PRI_Measurement"};
constexpr const char* PRI_JitterDeviation_Name{"PRI_JitterDeviation"};
constexpr const char* PRI_PulseGroupsPresent_Name{"PRI_PulseGroupsPresent"};
constexpr const char* PRI_Quantized_Name{"PRI_Quantized"};
constexpr const char* PRI_QuantizationPeriod_Name{"PRI_QuantizationPeriod"};
constexpr const char* PRI_Squirrelly_Name{"PRI_Squirrelly"};
constexpr const char* PRI_MissingPulse_Name{"PRI_MissingPulse"};
constexpr const char* PRI_PatternPeriod_Name{"PRI_PatternPeriod"};
constexpr const char* PRI_PatternLevels_Name{"PRI_PatternLevels"};
constexpr const char* PRI_PatternInterval_Name{"PRI_PatternInterval"};
constexpr const char* PRI_JitterDetected_Name{"PRI_JitterDetected"};

} // namespace PRI_DataType_Names

bool PRI_DataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PRI_DataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PRI_DataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_SwitchingPattern_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePRI_SwitchingPattern().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_AgilePattern_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePRI_AgilePattern().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_Measurement_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enablePRI_Measurement().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_JitterDeviation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_JitterDeviation(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_PulseGroupsPresent_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_PulseGroupsPresent(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_Quantized_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_Quantized(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_QuantizationPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_QuantizationPeriod(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_Squirrelly_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_Squirrelly(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_MissingPulse_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_MissingPulse(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_PatternPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_PatternPeriod(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_PatternLevels_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_PatternLevels(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_PatternInterval_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PRI_DataType::PRI_PatternInterval& boundedList = accessor.getPRI_PatternInterval();
        const uci::type::PRI_DataType::PRI_PatternInterval::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setDurationValue(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PRI_DataType_Names::PRI_JitterDetected_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_JitterDetected(*value);
      }
    }
  }
  PRI_DataBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string PRI_DataType::serialize(const uci::type::PRI_DataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PRI_DataType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, PRI_DataType_Names::Extern_Type_Name);
  }
  PRI_DataBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasPRI_SwitchingPattern()) {
    PRI_SwitchingPatternEnum::serialize(accessor.getPRI_SwitchingPattern(), node, PRI_DataType_Names::PRI_SwitchingPattern_Name, false);
  }
  if (accessor.hasPRI_AgilePattern()) {
    PRI_AgilePatternEnum::serialize(accessor.getPRI_AgilePattern(), node, PRI_DataType_Names::PRI_AgilePattern_Name, false);
  }
  if (accessor.hasPRI_Measurement()) {
    PRI_MeasurementEnum::serialize(accessor.getPRI_Measurement(), node, PRI_DataType_Names::PRI_Measurement_Name, false);
  }
  if (accessor.hasPRI_JitterDeviation()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_JitterDeviation(), node, PRI_DataType_Names::PRI_JitterDeviation_Name);
  }
  if (accessor.hasPRI_PulseGroupsPresent()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getPRI_PulseGroupsPresent(), node, PRI_DataType_Names::PRI_PulseGroupsPresent_Name);
  }
  if (accessor.hasPRI_Quantized()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getPRI_Quantized(), node, PRI_DataType_Names::PRI_Quantized_Name);
  }
  if (accessor.hasPRI_QuantizationPeriod()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_QuantizationPeriod(), node, PRI_DataType_Names::PRI_QuantizationPeriod_Name);
  }
  if (accessor.hasPRI_Squirrelly()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getPRI_Squirrelly(), node, PRI_DataType_Names::PRI_Squirrelly_Name);
  }
  if (accessor.hasPRI_MissingPulse()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getPRI_MissingPulse(), node, PRI_DataType_Names::PRI_MissingPulse_Name);
  }
  if (accessor.hasPRI_PatternPeriod()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_PatternPeriod(), node, PRI_DataType_Names::PRI_PatternPeriod_Name);
  }
  if (accessor.hasPRI_PatternLevels()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getPRI_PatternLevels(), node, PRI_DataType_Names::PRI_PatternLevels_Name);
  }
  {
    const uci::type::PRI_DataType::PRI_PatternInterval& boundedList = accessor.getPRI_PatternInterval();
    for (uci::type::PRI_DataType::PRI_PatternInterval::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      extxml_uci::util::SerializationHelpers::serializeDuration(boundedList.at(i), node, PRI_DataType_Names::PRI_PatternInterval_Name);
    }
  }
  if (accessor.hasPRI_JitterDetected()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getPRI_JitterDetected(), node, PRI_DataType_Names::PRI_JitterDetected_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

