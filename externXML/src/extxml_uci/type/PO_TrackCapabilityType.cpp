/** @file PO_TrackCapabilityType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/PO_TrackCapabilityType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/DoubleMinMaxType.h"
#include "extxml_uci/type/DurationRangeType.h"
#include "extxml_uci/type/IdentityBasicType.h"
#include "extxml_uci/type/PO_CoastSettingOptionsType.h"
#include "extxml_uci/type/PO_OffsetTrackSettingsType.h"
#include "extxml_uci/type/PO_TrackCapabilityTypeEnum.h"
#include "extxml_uci/type/TrackOptionsID_Type.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/PO_TrackCapabilityType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PO_TrackCapabilityType_Names {

constexpr const char* Extern_Type_Name{"PO_TrackCapabilityType"};
constexpr const char* TrackOptionID_Name{"TrackOptionID"};
constexpr const char* TrackControlOptions_Name{"TrackControlOptions"};
constexpr const char* ATR_Filter_Name{"ATR_Filter"};
constexpr const char* OffsetTrackSettings_Name{"OffsetTrackSettings"};
constexpr const char* ObservedEntityThresholdSettings_Name{"ObservedEntityThresholdSettings"};
constexpr const char* TrackingRange_Name{"TrackingRange"};
constexpr const char* CoastSettingOptions_Name{"CoastSettingOptions"};
constexpr const char* BlankingVolumeSupported_Name{"BlankingVolumeSupported"};

} // namespace PO_TrackCapabilityType_Names

bool PO_TrackCapabilityType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_TrackCapabilityType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_TrackCapabilityType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::TrackOptionID_Name) {
      TrackOptionsID_Type::deserialize(valueType.second, accessor.getTrackOptionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::TrackControlOptions_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_TrackCapabilityType::TrackControlOptions& boundedList = accessor.getTrackControlOptions();
        const uci::type::PO_TrackCapabilityType::TrackControlOptions::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::ATR_Filter_Name) {
      IdentityBasicType::deserialize(valueType.second, accessor.enableATR_Filter(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::OffsetTrackSettings_Name) {
      PO_OffsetTrackSettingsType::deserialize(valueType.second, accessor.enableOffsetTrackSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::ObservedEntityThresholdSettings_Name) {
      DurationRangeType::deserialize(valueType.second, accessor.enableObservedEntityThresholdSettings(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::TrackingRange_Name) {
      DoubleMinMaxType::deserialize(valueType.second, accessor.enableTrackingRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::CoastSettingOptions_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_TrackCapabilityType::CoastSettingOptions& boundedList = accessor.getCoastSettingOptions();
        const uci::type::PO_TrackCapabilityType::CoastSettingOptions::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PO_CoastSettingOptionsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_TrackCapabilityType_Names::BlankingVolumeSupported_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBlankingVolumeSupported(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
  return true;
}

std::string PO_TrackCapabilityType::serialize(const uci::type::PO_TrackCapabilityType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PO_TrackCapabilityType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, PO_TrackCapabilityType_Names::Extern_Type_Name);
  }
  TrackOptionsID_Type::serialize(accessor.getTrackOptionID(), node, PO_TrackCapabilityType_Names::TrackOptionID_Name);
  {
    const uci::type::PO_TrackCapabilityType::TrackControlOptions& boundedList = accessor.getTrackControlOptions();
    for (uci::type::PO_TrackCapabilityType::TrackControlOptions::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_TrackCapabilityTypeEnum::serialize(boundedList.at(i), node, PO_TrackCapabilityType_Names::TrackControlOptions_Name, false);
    }
  }
  if (accessor.hasATR_Filter()) {
    IdentityBasicType::serialize(accessor.getATR_Filter(), node, PO_TrackCapabilityType_Names::ATR_Filter_Name);
  }
  if (accessor.hasOffsetTrackSettings()) {
    PO_OffsetTrackSettingsType::serialize(accessor.getOffsetTrackSettings(), node, PO_TrackCapabilityType_Names::OffsetTrackSettings_Name);
  }
  if (accessor.hasObservedEntityThresholdSettings()) {
    DurationRangeType::serialize(accessor.getObservedEntityThresholdSettings(), node, PO_TrackCapabilityType_Names::ObservedEntityThresholdSettings_Name);
  }
  if (accessor.hasTrackingRange()) {
    DoubleMinMaxType::serialize(accessor.getTrackingRange(), node, PO_TrackCapabilityType_Names::TrackingRange_Name);
  }
  {
    const uci::type::PO_TrackCapabilityType::CoastSettingOptions& boundedList = accessor.getCoastSettingOptions();
    for (uci::type::PO_TrackCapabilityType::CoastSettingOptions::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_CoastSettingOptionsType::serialize(boundedList.at(i), node, PO_TrackCapabilityType_Names::CoastSettingOptions_Name);
    }
  }
  if (accessor.hasBlankingVolumeSupported()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getBlankingVolumeSupported(), node, PO_TrackCapabilityType_Names::BlankingVolumeSupported_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

