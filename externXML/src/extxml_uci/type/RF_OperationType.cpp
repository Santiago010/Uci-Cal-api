/** @file RF_OperationType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/RF_OperationType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/ActivityID_Type.h"
#include "extxml_uci/type/CapabilityID_Type.h"
#include "extxml_uci/type/ConfigureInteroperabilityReportType.h"
#include "extxml_uci/type/DateTimeRangeBeginType.h"
#include "extxml_uci/type/DurationRangeType.h"
#include "extxml_uci/type/FOV_VolumeType.h"
#include "extxml_uci/type/ModulationEnum.h"
#include "extxml_uci/type/PercentRangeType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/RF_OperationType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace RF_OperationType_Names {

constexpr const char* Extern_Type_Name{"RF_OperationType"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* ActivityID_Name{"ActivityID"};
constexpr const char* Receive_Name{"Receive"};
constexpr const char* Transmit_Name{"Transmit"};
constexpr const char* EmissionLocation_Name{"EmissionLocation"};
constexpr const char* Modulation_Name{"Modulation"};
constexpr const char* PRI_Name{"PRI"};
constexpr const char* PulseWidthMax_Name{"PulseWidthMax"};
constexpr const char* Time_Name{"Time"};
constexpr const char* DutyCycle_Name{"DutyCycle"};
constexpr const char* ConfigureInteroperabilityReport_Name{"ConfigureInteroperabilityReport"};

} // namespace RF_OperationType_Names

bool RF_OperationType::deserialize(const boost::property_tree::ptree& propTree, uci::type::RF_OperationType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = RF_OperationType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::CapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.getCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::ActivityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::RF_OperationType::ActivityID& boundedList = accessor.getActivityID();
        const uci::type::RF_OperationType::ActivityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ActivityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::Receive_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setReceive(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::Transmit_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTransmit(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::EmissionLocation_Name) {
      FOV_VolumeType::deserialize(valueType.second, accessor.enableEmissionLocation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::Modulation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableModulation().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::PRI_Name) {
      DurationRangeType::deserialize(valueType.second, accessor.enablePRI(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::PulseWidthMax_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthMax(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::Time_Name) {
      DateTimeRangeBeginType::deserialize(valueType.second, accessor.getTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::DutyCycle_Name) {
      PercentRangeType::deserialize(valueType.second, accessor.enableDutyCycle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + RF_OperationType_Names::ConfigureInteroperabilityReport_Name) {
      ConfigureInteroperabilityReportType::deserialize(valueType.second, accessor.enableConfigureInteroperabilityReport(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string RF_OperationType::serialize(const uci::type::RF_OperationType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? RF_OperationType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, RF_OperationType_Names::Extern_Type_Name);
  }
  CapabilityID_Type::serialize(accessor.getCapabilityID(), node, RF_OperationType_Names::CapabilityID_Name);
  {
    const uci::type::RF_OperationType::ActivityID& boundedList = accessor.getActivityID();
    for (uci::type::RF_OperationType::ActivityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ActivityID_Type::serialize(boundedList.at(i), node, RF_OperationType_Names::ActivityID_Name);
    }
  }
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getReceive(), node, RF_OperationType_Names::Receive_Name);
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getTransmit(), node, RF_OperationType_Names::Transmit_Name);
  if (accessor.hasEmissionLocation()) {
    FOV_VolumeType::serialize(accessor.getEmissionLocation(), node, RF_OperationType_Names::EmissionLocation_Name);
  }
  if (accessor.hasModulation()) {
    ModulationEnum::serialize(accessor.getModulation(), node, RF_OperationType_Names::Modulation_Name, false);
  }
  if (accessor.hasPRI()) {
    DurationRangeType::serialize(accessor.getPRI(), node, RF_OperationType_Names::PRI_Name);
  }
  if (accessor.hasPulseWidthMax()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthMax(), node, RF_OperationType_Names::PulseWidthMax_Name);
  }
  DateTimeRangeBeginType::serialize(accessor.getTime(), node, RF_OperationType_Names::Time_Name);
  if (accessor.hasDutyCycle()) {
    PercentRangeType::serialize(accessor.getDutyCycle(), node, RF_OperationType_Names::DutyCycle_Name);
  }
  if (accessor.hasConfigureInteroperabilityReport()) {
    ConfigureInteroperabilityReportType::serialize(accessor.getConfigureInteroperabilityReport(), node, RF_OperationType_Names::ConfigureInteroperabilityReport_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

