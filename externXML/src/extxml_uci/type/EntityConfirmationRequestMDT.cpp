/** @file EntityConfirmationRequestMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/EntityConfirmationRequestMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/EntityDimensionEstimateType.h"
#include "extxml_uci/type/EntityDimensionEstimateUncertaintyType.h"
#include "extxml_uci/type/EntityID_Type.h"
#include "extxml_uci/type/EntityOrbitalEphemerisID_Type.h"
#include "extxml_uci/type/FileMetadataID_Type.h"
#include "extxml_uci/type/MeasurementKinematicsChoiceType.h"
#include "extxml_uci/type/ProductMetadataID_Type.h"
#include "extxml_uci/type/QuaternionAttitudeType.h"
#include "extxml_uci/type/RequestBaseType.h"
#include "extxml_uci/type/RequirementInstanceID_ChoiceType.h"
#include "extxml_uci/type/SensorKinematicsChoiceType.h"
#include "extxml_uci/type/SystemID_Type.h"
#include "extxml_uci/type/SystemOrbitalEphemerisID_Type.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/EntityConfirmationRequestMDT.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace EntityConfirmationRequestMDT_Names {

constexpr const char* Extern_Type_Name{"EntityConfirmationRequestMDT"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* RequirementID_Name{"RequirementID"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* TimeStamp_Name{"TimeStamp"};
constexpr const char* EntityDimension_EstimateUncertainty_Name{"EntityDimension_EstimateUncertainty"};
constexpr const char* EntityDimension_Estimate_Name{"EntityDimension_Estimate"};
constexpr const char* AttitudeEstimates_Name{"AttitudeEstimates"};
constexpr const char* FileMetadataID_Name{"FileMetadataID"};
constexpr const char* ProductMetadataID_Name{"ProductMetadataID"};
constexpr const char* MeasurementKinematics_Name{"MeasurementKinematics"};
constexpr const char* ReferenceKinematics_Name{"ReferenceKinematics"};
constexpr const char* SystemEphemerisID_Name{"SystemEphemerisID"};
constexpr const char* EntityEphemerisID_Name{"EntityEphemerisID"};

} // namespace EntityConfirmationRequestMDT_Names

bool EntityConfirmationRequestMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityConfirmationRequestMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityConfirmationRequestMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::RequirementID_Name) {
      RequirementInstanceID_ChoiceType::deserialize(valueType.second, accessor.getRequirementID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::EntityID_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::TimeStamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimeStamp(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::EntityDimension_EstimateUncertainty_Name) {
      EntityDimensionEstimateUncertaintyType::deserialize(valueType.second, accessor.enableEntityDimension_EstimateUncertainty(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::EntityDimension_Estimate_Name) {
      EntityDimensionEstimateType::deserialize(valueType.second, accessor.enableEntityDimension_Estimate(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::AttitudeEstimates_Name) {
      QuaternionAttitudeType::deserialize(valueType.second, accessor.enableAttitudeEstimates(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::FileMetadataID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityConfirmationRequestMDT::FileMetadataID& boundedList = accessor.getFileMetadataID();
        const uci::type::EntityConfirmationRequestMDT::FileMetadataID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FileMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::ProductMetadataID_Name) {
      ProductMetadataID_Type::deserialize(valueType.second, accessor.enableProductMetadataID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::MeasurementKinematics_Name) {
      MeasurementKinematicsChoiceType::deserialize(valueType.second, accessor.enableMeasurementKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::ReferenceKinematics_Name) {
      SensorKinematicsChoiceType::deserialize(valueType.second, accessor.enableReferenceKinematics(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::SystemEphemerisID_Name) {
      SystemOrbitalEphemerisID_Type::deserialize(valueType.second, accessor.enableSystemEphemerisID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityConfirmationRequestMDT_Names::EntityEphemerisID_Name) {
      EntityOrbitalEphemerisID_Type::deserialize(valueType.second, accessor.enableEntityEphemerisID(), nodeName, nsPrefix);
    }
  }
  RequestBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string EntityConfirmationRequestMDT::serialize(const uci::type::EntityConfirmationRequestMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? EntityConfirmationRequestMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, EntityConfirmationRequestMDT_Names::Extern_Type_Name);
  }
  RequestBaseType::serialize(accessor, node, "", false, false, false);
  SystemID_Type::serialize(accessor.getSystemID(), node, EntityConfirmationRequestMDT_Names::SystemID_Name);
  RequirementInstanceID_ChoiceType::serialize(accessor.getRequirementID(), node, EntityConfirmationRequestMDT_Names::RequirementID_Name);
  EntityID_Type::serialize(accessor.getEntityID(), node, EntityConfirmationRequestMDT_Names::EntityID_Name);
  extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimeStamp(), node, EntityConfirmationRequestMDT_Names::TimeStamp_Name);
  if (accessor.hasEntityDimension_EstimateUncertainty()) {
    EntityDimensionEstimateUncertaintyType::serialize(accessor.getEntityDimension_EstimateUncertainty(), node, EntityConfirmationRequestMDT_Names::EntityDimension_EstimateUncertainty_Name);
  }
  if (accessor.hasEntityDimension_Estimate()) {
    EntityDimensionEstimateType::serialize(accessor.getEntityDimension_Estimate(), node, EntityConfirmationRequestMDT_Names::EntityDimension_Estimate_Name);
  }
  if (accessor.hasAttitudeEstimates()) {
    QuaternionAttitudeType::serialize(accessor.getAttitudeEstimates(), node, EntityConfirmationRequestMDT_Names::AttitudeEstimates_Name);
  }
  {
    const uci::type::EntityConfirmationRequestMDT::FileMetadataID& boundedList = accessor.getFileMetadataID();
    for (uci::type::EntityConfirmationRequestMDT::FileMetadataID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FileMetadataID_Type::serialize(boundedList.at(i), node, EntityConfirmationRequestMDT_Names::FileMetadataID_Name);
    }
  }
  if (accessor.hasProductMetadataID()) {
    ProductMetadataID_Type::serialize(accessor.getProductMetadataID(), node, EntityConfirmationRequestMDT_Names::ProductMetadataID_Name);
  }
  if (accessor.hasMeasurementKinematics()) {
    MeasurementKinematicsChoiceType::serialize(accessor.getMeasurementKinematics(), node, EntityConfirmationRequestMDT_Names::MeasurementKinematics_Name);
  }
  if (accessor.hasReferenceKinematics()) {
    SensorKinematicsChoiceType::serialize(accessor.getReferenceKinematics(), node, EntityConfirmationRequestMDT_Names::ReferenceKinematics_Name);
  }
  if (accessor.hasSystemEphemerisID()) {
    SystemOrbitalEphemerisID_Type::serialize(accessor.getSystemEphemerisID(), node, EntityConfirmationRequestMDT_Names::SystemEphemerisID_Name);
  }
  if (accessor.hasEntityEphemerisID()) {
    EntityOrbitalEphemerisID_Type::serialize(accessor.getEntityEphemerisID(), node, EntityConfirmationRequestMDT_Names::EntityEphemerisID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

