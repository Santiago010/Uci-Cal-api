/** @file SignalParametricsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/SignalParametricsType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/FrequencyDataType.h"
#include "extxml_uci/type/FrequencyModulationVariationEnum.h"
#include "extxml_uci/type/LongBaselineInterferometerInfoType.h"
#include "extxml_uci/type/ModulationOnPulseDataType.h"
#include "extxml_uci/type/PRI_PW_Type.h"
#include "extxml_uci/type/PolarizationType.h"
#include "extxml_uci/type/ScanDataType.h"
#include "extxml_uci/type/SignalAmplitudeType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/SignalParametricsType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SignalParametricsType_Names {

constexpr const char* Extern_Type_Name{"SignalParametricsType"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* PRI_PW_Name{"PRI_PW"};
constexpr const char* Amplitude_Name{"Amplitude"};
constexpr const char* Polarization_Name{"Polarization"};
constexpr const char* ModulationOnPulse_Name{"ModulationOnPulse"};
constexpr const char* Scan_Name{"Scan"};
constexpr const char* SignalNoiseRatio_Name{"SignalNoiseRatio"};
constexpr const char* PulseRepetitionFrequency_Name{"PulseRepetitionFrequency"};
constexpr const char* PulseRepetitionFrequencyCalculated_Name{"PulseRepetitionFrequencyCalculated"};
constexpr const char* PulseDeviation_Name{"PulseDeviation"};
constexpr const char* BurstDeviation_Name{"BurstDeviation"};
constexpr const char* IlluminationRate_Name{"IlluminationRate"};
constexpr const char* IlluminationRateDeviation_Name{"IlluminationRateDeviation"};
constexpr const char* PulseCount_Name{"PulseCount"};
constexpr const char* PulsesPerGroup_Name{"PulsesPerGroup"};
constexpr const char* BeamWidth_Name{"BeamWidth"};
constexpr const char* FrequencyModulationVariation_Name{"FrequencyModulationVariation"};
constexpr const char* FrequencyExcursion_Name{"FrequencyExcursion"};
constexpr const char* FrequencyExcursionAverage_Name{"FrequencyExcursionAverage"};
constexpr const char* FrequencyExcursionAverageReportCount_Name{"FrequencyExcursionAverageReportCount"};
constexpr const char* PilotFrequency_Name{"PilotFrequency"};
constexpr const char* PilotFrequencyAverage_Name{"PilotFrequencyAverage"};
constexpr const char* PilotFrequencyAverageReportCount_Name{"PilotFrequencyAverageReportCount"};
constexpr const char* AverageBasebandedPulseRepetitionInterval_Name{"AverageBasebandedPulseRepetitionInterval"};
constexpr const char* AverageBasebandedPulseRepetitionIntervalReportCount_Name{"AverageBasebandedPulseRepetitionIntervalReportCount"};
constexpr const char* BasebandedPulseRepetitionIntervalDeviation_Name{"BasebandedPulseRepetitionIntervalDeviation"};
constexpr const char* LongBaselineInterferometerInfo_Name{"LongBaselineInterferometerInfo"};

} // namespace SignalParametricsType_Names

bool SignalParametricsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SignalParametricsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SignalParametricsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::Frequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SignalParametricsType::Frequency& boundedList = accessor.getFrequency();
        const uci::type::SignalParametricsType::Frequency::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FrequencyDataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::PRI_PW_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SignalParametricsType::PRI_PW& boundedList = accessor.getPRI_PW();
        const uci::type::SignalParametricsType::PRI_PW::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PRI_PW_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::Amplitude_Name) {
      SignalAmplitudeType::deserialize(valueType.second, accessor.enableAmplitude(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::Polarization_Name) {
      PolarizationType::deserialize(valueType.second, accessor.enablePolarization(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::ModulationOnPulse_Name) {
      ModulationOnPulseDataType::deserialize(valueType.second, accessor.enableModulationOnPulse(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::Scan_Name) {
      ScanDataType::deserialize(valueType.second, accessor.enableScan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::SignalNoiseRatio_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSignalNoiseRatio(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::PulseRepetitionFrequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseRepetitionFrequency(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::PulseRepetitionFrequencyCalculated_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseRepetitionFrequencyCalculated(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::PulseDeviation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseDeviation(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::BurstDeviation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBurstDeviation(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::IlluminationRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIlluminationRate(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::IlluminationRateDeviation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setIlluminationRateDeviation(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::PulseCount_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseCount(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::PulsesPerGroup_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulsesPerGroup(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::BeamWidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBeamWidth(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::FrequencyModulationVariation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFrequencyModulationVariation().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::FrequencyExcursion_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyExcursion(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::FrequencyExcursionAverage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyExcursionAverage(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::FrequencyExcursionAverageReportCount_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyExcursionAverageReportCount(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::PilotFrequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPilotFrequency(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::PilotFrequencyAverage_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPilotFrequencyAverage(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::PilotFrequencyAverageReportCount_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPilotFrequencyAverageReportCount(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::AverageBasebandedPulseRepetitionInterval_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAverageBasebandedPulseRepetitionInterval(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::AverageBasebandedPulseRepetitionIntervalReportCount_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAverageBasebandedPulseRepetitionIntervalReportCount(extxml_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::BasebandedPulseRepetitionIntervalDeviation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setBasebandedPulseRepetitionIntervalDeviation(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + SignalParametricsType_Names::LongBaselineInterferometerInfo_Name) {
      LongBaselineInterferometerInfoType::deserialize(valueType.second, accessor.enableLongBaselineInterferometerInfo(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string SignalParametricsType::serialize(const uci::type::SignalParametricsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SignalParametricsType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, SignalParametricsType_Names::Extern_Type_Name);
  }
  {
    const uci::type::SignalParametricsType::Frequency& boundedList = accessor.getFrequency();
    for (uci::type::SignalParametricsType::Frequency::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FrequencyDataType::serialize(boundedList.at(i), node, SignalParametricsType_Names::Frequency_Name);
    }
  }
  {
    const uci::type::SignalParametricsType::PRI_PW& boundedList = accessor.getPRI_PW();
    for (uci::type::SignalParametricsType::PRI_PW::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PRI_PW_Type::serialize(boundedList.at(i), node, SignalParametricsType_Names::PRI_PW_Name);
    }
  }
  if (accessor.hasAmplitude()) {
    SignalAmplitudeType::serialize(accessor.getAmplitude(), node, SignalParametricsType_Names::Amplitude_Name);
  }
  if (accessor.hasPolarization()) {
    PolarizationType::serialize(accessor.getPolarization(), node, SignalParametricsType_Names::Polarization_Name);
  }
  if (accessor.hasModulationOnPulse()) {
    ModulationOnPulseDataType::serialize(accessor.getModulationOnPulse(), node, SignalParametricsType_Names::ModulationOnPulse_Name);
  }
  if (accessor.hasScan()) {
    ScanDataType::serialize(accessor.getScan(), node, SignalParametricsType_Names::Scan_Name);
  }
  if (accessor.hasSignalNoiseRatio()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getSignalNoiseRatio(), node, SignalParametricsType_Names::SignalNoiseRatio_Name);
  }
  if (accessor.hasPulseRepetitionFrequency()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getPulseRepetitionFrequency(), node, SignalParametricsType_Names::PulseRepetitionFrequency_Name);
  }
  if (accessor.hasPulseRepetitionFrequencyCalculated()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getPulseRepetitionFrequencyCalculated(), node, SignalParametricsType_Names::PulseRepetitionFrequencyCalculated_Name);
  }
  if (accessor.hasPulseDeviation()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseDeviation(), node, SignalParametricsType_Names::PulseDeviation_Name);
  }
  if (accessor.hasBurstDeviation()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getBurstDeviation(), node, SignalParametricsType_Names::BurstDeviation_Name);
  }
  if (accessor.hasIlluminationRate()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getIlluminationRate(), node, SignalParametricsType_Names::IlluminationRate_Name);
  }
  if (accessor.hasIlluminationRateDeviation()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getIlluminationRateDeviation(), node, SignalParametricsType_Names::IlluminationRateDeviation_Name);
  }
  if (accessor.hasPulseCount()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getPulseCount(), node, SignalParametricsType_Names::PulseCount_Name);
  }
  if (accessor.hasPulsesPerGroup()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getPulsesPerGroup(), node, SignalParametricsType_Names::PulsesPerGroup_Name);
  }
  if (accessor.hasBeamWidth()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getBeamWidth(), node, SignalParametricsType_Names::BeamWidth_Name);
  }
  if (accessor.hasFrequencyModulationVariation()) {
    FrequencyModulationVariationEnum::serialize(accessor.getFrequencyModulationVariation(), node, SignalParametricsType_Names::FrequencyModulationVariation_Name, false);
  }
  if (accessor.hasFrequencyExcursion()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequencyExcursion(), node, SignalParametricsType_Names::FrequencyExcursion_Name);
  }
  if (accessor.hasFrequencyExcursionAverage()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequencyExcursionAverage(), node, SignalParametricsType_Names::FrequencyExcursionAverage_Name);
  }
  if (accessor.hasFrequencyExcursionAverageReportCount()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getFrequencyExcursionAverageReportCount(), node, SignalParametricsType_Names::FrequencyExcursionAverageReportCount_Name);
  }
  if (accessor.hasPilotFrequency()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getPilotFrequency(), node, SignalParametricsType_Names::PilotFrequency_Name);
  }
  if (accessor.hasPilotFrequencyAverage()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getPilotFrequencyAverage(), node, SignalParametricsType_Names::PilotFrequencyAverage_Name);
  }
  if (accessor.hasPilotFrequencyAverageReportCount()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getPilotFrequencyAverageReportCount(), node, SignalParametricsType_Names::PilotFrequencyAverageReportCount_Name);
  }
  if (accessor.hasAverageBasebandedPulseRepetitionInterval()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getAverageBasebandedPulseRepetitionInterval(), node, SignalParametricsType_Names::AverageBasebandedPulseRepetitionInterval_Name);
  }
  if (accessor.hasAverageBasebandedPulseRepetitionIntervalReportCount()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getAverageBasebandedPulseRepetitionIntervalReportCount(), node, SignalParametricsType_Names::AverageBasebandedPulseRepetitionIntervalReportCount_Name);
  }
  if (accessor.hasBasebandedPulseRepetitionIntervalDeviation()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getBasebandedPulseRepetitionIntervalDeviation(), node, SignalParametricsType_Names::BasebandedPulseRepetitionIntervalDeviation_Name);
  }
  if (accessor.hasLongBaselineInterferometerInfo()) {
    LongBaselineInterferometerInfoType::serialize(accessor.getLongBaselineInterferometerInfo(), node, SignalParametricsType_Names::LongBaselineInterferometerInfo_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

