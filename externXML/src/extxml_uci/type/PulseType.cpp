/** @file PulseType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/PulseType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/ComponentID_Type.h"
#include "extxml_uci/type/DateTimeSigmaType.h"
#include "extxml_uci/type/ModulationOnPulseDataType.h"
#include "extxml_uci/type/SignalRelativeType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/PulseType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PulseType_Names {

constexpr const char* Extern_Type_Name{"PulseType"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* Timestamp_Name{"Timestamp"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* FrequencyDeviation_Name{"FrequencyDeviation"};
constexpr const char* Amplitude_Name{"Amplitude"};
constexpr const char* RelativeAmplitude_Name{"RelativeAmplitude"};
constexpr const char* PulseWidth_Name{"PulseWidth"};
constexpr const char* PulseWidthDeviation_Name{"PulseWidthDeviation"};
constexpr const char* PulseWidthChopped_Name{"PulseWidthChopped"};
constexpr const char* PulseOnPulse_Name{"PulseOnPulse"};
constexpr const char* SNR_Name{"SNR"};
constexpr const char* RelativeLOS_Name{"RelativeLOS"};
constexpr const char* ModulationOnPulse_Name{"ModulationOnPulse"};
constexpr const char* DynamicRangeExceeded_Name{"DynamicRangeExceeded"};
constexpr const char* ThresholdDetection_Name{"ThresholdDetection"};
constexpr const char* HighPowerCorruption_Name{"HighPowerCorruption"};
constexpr const char* OnboardInterference_Name{"OnboardInterference"};

} // namespace PulseType_Names

bool PulseType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PulseType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PulseType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PulseType_Names::ComponentID_Name) {
      ComponentID_Type::deserialize(valueType.second, accessor.getComponentID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PulseType_Names::Timestamp_Name) {
      DateTimeSigmaType::deserialize(valueType.second, accessor.getTimestamp(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PulseType_Names::Frequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequency(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::FrequencyDeviation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyDeviation(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::Amplitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAmplitude(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::RelativeAmplitude_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setRelativeAmplitude(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::PulseWidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidth(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::PulseWidthDeviation_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthDeviation(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::PulseWidthChopped_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthChopped(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::PulseOnPulse_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseOnPulse(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::SNR_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSNR(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::RelativeLOS_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PulseType::RelativeLOS& boundedList = accessor.getRelativeLOS();
        const uci::type::PulseType::RelativeLOS::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SignalRelativeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::ModulationOnPulse_Name) {
      ModulationOnPulseDataType::deserialize(valueType.second, accessor.enableModulationOnPulse(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PulseType_Names::DynamicRangeExceeded_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDynamicRangeExceeded(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::ThresholdDetection_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setThresholdDetection(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::HighPowerCorruption_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHighPowerCorruption(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + PulseType_Names::OnboardInterference_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOnboardInterference(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    }
  }
  return true;
}

std::string PulseType::serialize(const uci::type::PulseType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PulseType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, PulseType_Names::Extern_Type_Name);
  }
  ComponentID_Type::serialize(accessor.getComponentID(), node, PulseType_Names::ComponentID_Name);
  DateTimeSigmaType::serialize(accessor.getTimestamp(), node, PulseType_Names::Timestamp_Name);
  extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequency(), node, PulseType_Names::Frequency_Name);
  if (accessor.hasFrequencyDeviation()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getFrequencyDeviation(), node, PulseType_Names::FrequencyDeviation_Name);
  }
  if (accessor.hasAmplitude()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getAmplitude(), node, PulseType_Names::Amplitude_Name);
  }
  if (accessor.hasRelativeAmplitude()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getRelativeAmplitude(), node, PulseType_Names::RelativeAmplitude_Name);
  }
  if (accessor.hasPulseWidth()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidth(), node, PulseType_Names::PulseWidth_Name);
  }
  if (accessor.hasPulseWidthDeviation()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthDeviation(), node, PulseType_Names::PulseWidthDeviation_Name);
  }
  if (accessor.hasPulseWidthChopped()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getPulseWidthChopped(), node, PulseType_Names::PulseWidthChopped_Name);
  }
  if (accessor.hasPulseOnPulse()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getPulseOnPulse(), node, PulseType_Names::PulseOnPulse_Name);
  }
  if (accessor.hasSNR()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getSNR(), node, PulseType_Names::SNR_Name);
  }
  {
    const uci::type::PulseType::RelativeLOS& boundedList = accessor.getRelativeLOS();
    for (uci::type::PulseType::RelativeLOS::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SignalRelativeType::serialize(boundedList.at(i), node, PulseType_Names::RelativeLOS_Name);
    }
  }
  if (accessor.hasModulationOnPulse()) {
    ModulationOnPulseDataType::serialize(accessor.getModulationOnPulse(), node, PulseType_Names::ModulationOnPulse_Name);
  }
  if (accessor.hasDynamicRangeExceeded()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getDynamicRangeExceeded(), node, PulseType_Names::DynamicRangeExceeded_Name);
  }
  if (accessor.hasThresholdDetection()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getThresholdDetection(), node, PulseType_Names::ThresholdDetection_Name);
  }
  if (accessor.hasHighPowerCorruption()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getHighPowerCorruption(), node, PulseType_Names::HighPowerCorruption_Name);
  }
  if (accessor.hasOnboardInterference()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getOnboardInterference(), node, PulseType_Names::OnboardInterference_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

