/** @file CommMADL_TopologyEntryType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/CommMADL_TopologyEntryType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/CommMADL_DataRateTypeEnum.h"
#include "extxml_uci/type/CommMADL_NodeDataValidityEnum.h"
#include "extxml_uci/type/CommMADL_SecurityKeyType.h"
#include "extxml_uci/type/CommMADL_TimeSourceEnum.h"
#include "extxml_uci/type/Point4D_Type.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/CommMADL_TopologyEntryType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace CommMADL_TopologyEntryType_Names {

constexpr const char* Extern_Type_Name{"CommMADL_TopologyEntryType"};
constexpr const char* MemberNodeIdentifier_Name{"MemberNodeIdentifier"};
constexpr const char* MemberMADL_UniqueIdentifier_Name{"MemberMADL_UniqueIdentifier"};
constexpr const char* MemberFlightGroupIdentifier_Name{"MemberFlightGroupIdentifier"};
constexpr const char* DataCapable_Name{"DataCapable"};
constexpr const char* VoiceCapable_Name{"VoiceCapable"};
constexpr const char* MemberPosition_Name{"MemberPosition"};
constexpr const char* MemberTimeSource_Name{"MemberTimeSource"};
constexpr const char* NetTimeFineSyncAchieved_Name{"NetTimeFineSyncAchieved"};
constexpr const char* PathLatencyRelay_Name{"PathLatencyRelay"};
constexpr const char* ActualTxDataRate_Name{"ActualTxDataRate"};
constexpr const char* HigherDataRateCapable_Name{"HigherDataRateCapable"};
constexpr const char* SecurityKey_Name{"SecurityKey"};
constexpr const char* NodeDataValidity_Name{"NodeDataValidity"};

} // namespace CommMADL_TopologyEntryType_Names

bool CommMADL_TopologyEntryType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommMADL_TopologyEntryType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommMADL_TopologyEntryType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommMADL_TopologyEntryType_Names::MemberNodeIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMemberNodeIdentifier(extxml_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_TopologyEntryType_Names::MemberMADL_UniqueIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMemberMADL_UniqueIdentifier(extxml_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_TopologyEntryType_Names::MemberFlightGroupIdentifier_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setMemberFlightGroupIdentifier(*value);
      }
    } else if (valueType.first == nsPrefix + CommMADL_TopologyEntryType_Names::DataCapable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDataCapable(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_TopologyEntryType_Names::VoiceCapable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVoiceCapable(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_TopologyEntryType_Names::MemberPosition_Name) {
      Point4D_Type::deserialize(valueType.second, accessor.enableMemberPosition(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommMADL_TopologyEntryType_Names::MemberTimeSource_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMemberTimeSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommMADL_TopologyEntryType_Names::NetTimeFineSyncAchieved_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNetTimeFineSyncAchieved(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_TopologyEntryType_Names::PathLatencyRelay_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPathLatencyRelay(extxml_uci::util::SerializationHelpers::deserializeUnsignedByte(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_TopologyEntryType_Names::ActualTxDataRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableActualTxDataRate().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommMADL_TopologyEntryType_Names::HigherDataRateCapable_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setHigherDataRateCapable(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + CommMADL_TopologyEntryType_Names::SecurityKey_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::CommMADL_TopologyEntryType::SecurityKey& boundedList = accessor.getSecurityKey();
        const uci::type::CommMADL_TopologyEntryType::SecurityKey::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CommMADL_SecurityKeyType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + CommMADL_TopologyEntryType_Names::NodeDataValidity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getNodeDataValidity().setValueFromName(*value);
      }
    }
  }
  return true;
}

std::string CommMADL_TopologyEntryType::serialize(const uci::type::CommMADL_TopologyEntryType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? CommMADL_TopologyEntryType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, CommMADL_TopologyEntryType_Names::Extern_Type_Name);
  }
  extxml_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getMemberNodeIdentifier(), node, CommMADL_TopologyEntryType_Names::MemberNodeIdentifier_Name);
  if (accessor.hasMemberMADL_UniqueIdentifier()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedShort(accessor.getMemberMADL_UniqueIdentifier(), node, CommMADL_TopologyEntryType_Names::MemberMADL_UniqueIdentifier_Name);
  }
  if (accessor.hasMemberFlightGroupIdentifier()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getMemberFlightGroupIdentifier(), node, CommMADL_TopologyEntryType_Names::MemberFlightGroupIdentifier_Name);
  }
  if (accessor.hasDataCapable()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getDataCapable(), node, CommMADL_TopologyEntryType_Names::DataCapable_Name);
  }
  if (accessor.hasVoiceCapable()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getVoiceCapable(), node, CommMADL_TopologyEntryType_Names::VoiceCapable_Name);
  }
  if (accessor.hasMemberPosition()) {
    Point4D_Type::serialize(accessor.getMemberPosition(), node, CommMADL_TopologyEntryType_Names::MemberPosition_Name);
  }
  if (accessor.hasMemberTimeSource()) {
    CommMADL_TimeSourceEnum::serialize(accessor.getMemberTimeSource(), node, CommMADL_TopologyEntryType_Names::MemberTimeSource_Name, false);
  }
  if (accessor.hasNetTimeFineSyncAchieved()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getNetTimeFineSyncAchieved(), node, CommMADL_TopologyEntryType_Names::NetTimeFineSyncAchieved_Name);
  }
  if (accessor.hasPathLatencyRelay()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedByte(accessor.getPathLatencyRelay(), node, CommMADL_TopologyEntryType_Names::PathLatencyRelay_Name);
  }
  if (accessor.hasActualTxDataRate()) {
    CommMADL_DataRateTypeEnum::serialize(accessor.getActualTxDataRate(), node, CommMADL_TopologyEntryType_Names::ActualTxDataRate_Name, false);
  }
  if (accessor.hasHigherDataRateCapable()) {
    extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getHigherDataRateCapable(), node, CommMADL_TopologyEntryType_Names::HigherDataRateCapable_Name);
  }
  {
    const uci::type::CommMADL_TopologyEntryType::SecurityKey& boundedList = accessor.getSecurityKey();
    for (uci::type::CommMADL_TopologyEntryType::SecurityKey::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CommMADL_SecurityKeyType::serialize(boundedList.at(i), node, CommMADL_TopologyEntryType_Names::SecurityKey_Name);
    }
  }
  CommMADL_NodeDataValidityEnum::serialize(accessor.getNodeDataValidity(), node, CommMADL_TopologyEntryType_Names::NodeDataValidity_Name, false);
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

