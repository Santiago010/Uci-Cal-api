/** @file PO_CapabilityStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/PO_CapabilityStatusMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/CapabilityStatusBaseType.h"
#include "extxml_uci/type/FOR_Type.h"
#include "extxml_uci/type/PO_CapabilityStatusType.h"
#include "extxml_uci/type/PO_CollectionConstraintsStatusType.h"
#include "extxml_uci/type/PO_ComponentStatusType.h"
#include "extxml_uci/type/PO_MessageOutputsEnum.h"
#include "extxml_uci/type/PO_SubCapabilitySettingsType.h"
#include "extxml_uci/type/PO_TrackStatusType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/PO_CapabilityStatusMDT.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PO_CapabilityStatusMDT_Names {

constexpr const char* Extern_Type_Name{"PO_CapabilityStatusMDT"};
constexpr const char* CapabilityStatus_Name{"CapabilityStatus"};
constexpr const char* SubCapabilityStatus_Name{"SubCapabilityStatus"};
constexpr const char* TrackStatus_Name{"TrackStatus"};
constexpr const char* ComponentStatus_Name{"ComponentStatus"};
constexpr const char* CollectionConstraintsStatus_Name{"CollectionConstraintsStatus"};
constexpr const char* CurrentMessageOutput_Name{"CurrentMessageOutput"};
constexpr const char* CurrentFOR_Name{"CurrentFOR"};
constexpr const char* CurrentThermalBlankingFOR_Name{"CurrentThermalBlankingFOR"};

} // namespace PO_CapabilityStatusMDT_Names

bool PO_CapabilityStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_CapabilityStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_CapabilityStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::CapabilityStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityStatusMDT::CapabilityStatus& boundedList = accessor.getCapabilityStatus();
        const uci::type::PO_CapabilityStatusMDT::CapabilityStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PO_CapabilityStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::SubCapabilityStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityStatusMDT::SubCapabilityStatus& boundedList = accessor.getSubCapabilityStatus();
        const uci::type::PO_CapabilityStatusMDT::SubCapabilityStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PO_SubCapabilitySettingsType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::TrackStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityStatusMDT::TrackStatus& boundedList = accessor.getTrackStatus();
        const uci::type::PO_CapabilityStatusMDT::TrackStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PO_TrackStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::ComponentStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityStatusMDT::ComponentStatus& boundedList = accessor.getComponentStatus();
        const uci::type::PO_CapabilityStatusMDT::ComponentStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PO_ComponentStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::CollectionConstraintsStatus_Name) {
      PO_CollectionConstraintsStatusType::deserialize(valueType.second, accessor.enableCollectionConstraintsStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::CurrentMessageOutput_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_CapabilityStatusMDT::CurrentMessageOutput& boundedList = accessor.getCurrentMessageOutput();
        const uci::type::PO_CapabilityStatusMDT::CurrentMessageOutput::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::CurrentFOR_Name) {
      FOR_Type::deserialize(valueType.second, accessor.enableCurrentFOR(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CapabilityStatusMDT_Names::CurrentThermalBlankingFOR_Name) {
      FOR_Type::deserialize(valueType.second, accessor.enableCurrentThermalBlankingFOR(), nodeName, nsPrefix);
    }
  }
  CapabilityStatusBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string PO_CapabilityStatusMDT::serialize(const uci::type::PO_CapabilityStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PO_CapabilityStatusMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, PO_CapabilityStatusMDT_Names::Extern_Type_Name);
  }
  CapabilityStatusBaseType::serialize(accessor, node, "", false, false, false);
  {
    const uci::type::PO_CapabilityStatusMDT::CapabilityStatus& boundedList = accessor.getCapabilityStatus();
    for (uci::type::PO_CapabilityStatusMDT::CapabilityStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_CapabilityStatusType::serialize(boundedList.at(i), node, PO_CapabilityStatusMDT_Names::CapabilityStatus_Name);
    }
  }
  {
    const uci::type::PO_CapabilityStatusMDT::SubCapabilityStatus& boundedList = accessor.getSubCapabilityStatus();
    for (uci::type::PO_CapabilityStatusMDT::SubCapabilityStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_SubCapabilitySettingsType::serialize(boundedList.at(i), node, PO_CapabilityStatusMDT_Names::SubCapabilityStatus_Name);
    }
  }
  {
    const uci::type::PO_CapabilityStatusMDT::TrackStatus& boundedList = accessor.getTrackStatus();
    for (uci::type::PO_CapabilityStatusMDT::TrackStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_TrackStatusType::serialize(boundedList.at(i), node, PO_CapabilityStatusMDT_Names::TrackStatus_Name);
    }
  }
  {
    const uci::type::PO_CapabilityStatusMDT::ComponentStatus& boundedList = accessor.getComponentStatus();
    for (uci::type::PO_CapabilityStatusMDT::ComponentStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_ComponentStatusType::serialize(boundedList.at(i), node, PO_CapabilityStatusMDT_Names::ComponentStatus_Name);
    }
  }
  if (accessor.hasCollectionConstraintsStatus()) {
    PO_CollectionConstraintsStatusType::serialize(accessor.getCollectionConstraintsStatus(), node, PO_CapabilityStatusMDT_Names::CollectionConstraintsStatus_Name);
  }
  {
    const uci::type::PO_CapabilityStatusMDT::CurrentMessageOutput& boundedList = accessor.getCurrentMessageOutput();
    for (uci::type::PO_CapabilityStatusMDT::CurrentMessageOutput::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_MessageOutputsEnum::serialize(boundedList.at(i), node, PO_CapabilityStatusMDT_Names::CurrentMessageOutput_Name, false);
    }
  }
  if (accessor.hasCurrentFOR()) {
    FOR_Type::serialize(accessor.getCurrentFOR(), node, PO_CapabilityStatusMDT_Names::CurrentFOR_Name);
  }
  if (accessor.hasCurrentThermalBlankingFOR()) {
    FOR_Type::serialize(accessor.getCurrentThermalBlankingFOR(), node, PO_CapabilityStatusMDT_Names::CurrentThermalBlankingFOR_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

