/** @file TaskType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/TaskType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/AMTI_TaskType.h"
#include "extxml_uci/type/AO_TaskType.h"
#include "extxml_uci/type/AirSampleTaskType.h"
#include "extxml_uci/type/COMINT_TaskType.h"
#include "extxml_uci/type/CargoDeliveryTaskType.h"
#include "extxml_uci/type/CommRelayTaskType.h"
#include "extxml_uci/type/CounterSpaceTaskType.h"
#include "extxml_uci/type/EA_TaskType.h"
#include "extxml_uci/type/ESM_TaskType.h"
#include "extxml_uci/type/FlightTaskType.h"
#include "extxml_uci/type/OrbitChangeTaskType.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorTaskType.h"
#include "extxml_uci/type/OrbitalSurveillanceTaskType.h"
#include "extxml_uci/type/PO_TaskType.h"
#include "extxml_uci/type/RefuelTaskType.h"
#include "extxml_uci/type/SAR_TaskType.h"
#include "extxml_uci/type/SMTI_TaskType.h"
#include "extxml_uci/type/StrikeTaskType.h"
#include "extxml_uci/type/SystemDeploymentTaskType.h"
#include "extxml_uci/type/TacticalOrderTaskType.h"
#include "extxml_uci/type/WeatherRadarTaskType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/TaskType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace TaskType_Names {

constexpr const char* Extern_Type_Name{"TaskType"};
constexpr const char* AirSample_Name{"AirSample"};
constexpr const char* AMTI_Name{"AMTI"};
constexpr const char* AO_Name{"AO"};
constexpr const char* CargoDelivery_Name{"CargoDelivery"};
constexpr const char* COMINT_Name{"COMINT"};
constexpr const char* CommRelay_Name{"CommRelay"};
constexpr const char* CounterSpace_Name{"CounterSpace"};
constexpr const char* EA_Name{"EA"};
constexpr const char* ESM_Name{"ESM"};
constexpr const char* Flight_Name{"Flight"};
constexpr const char* OrbitChange_Name{"OrbitChange"};
constexpr const char* OrbitalSurveillance_Name{"OrbitalSurveillance"};
constexpr const char* OrbitalSurveillanceSensor_Name{"OrbitalSurveillanceSensor"};
constexpr const char* PO_Name{"PO"};
constexpr const char* Refuel_Name{"Refuel"};
constexpr const char* SAR_Name{"SAR"};
constexpr const char* SMTI_Name{"SMTI"};
constexpr const char* Strike_Name{"Strike"};
constexpr const char* SystemDeployment_Name{"SystemDeployment"};
constexpr const char* TacticalOrder_Name{"TacticalOrder"};
constexpr const char* WeatherRadar_Name{"WeatherRadar"};

} // namespace TaskType_Names

bool TaskType::deserialize(const boost::property_tree::ptree& propTree, uci::type::TaskType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = TaskType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + TaskType_Names::AirSample_Name) {
      AirSampleTaskType::deserialize(valueType.second, accessor.chooseAirSample(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::AMTI_Name) {
      AMTI_TaskType::deserialize(valueType.second, accessor.chooseAMTI(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::AO_Name) {
      AO_TaskType::deserialize(valueType.second, accessor.chooseAO(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::CargoDelivery_Name) {
      CargoDeliveryTaskType::deserialize(valueType.second, accessor.chooseCargoDelivery(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::COMINT_Name) {
      COMINT_TaskType::deserialize(valueType.second, accessor.chooseCOMINT(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::CommRelay_Name) {
      CommRelayTaskType::deserialize(valueType.second, accessor.chooseCommRelay(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::CounterSpace_Name) {
      CounterSpaceTaskType::deserialize(valueType.second, accessor.chooseCounterSpace(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::EA_Name) {
      EA_TaskType::deserialize(valueType.second, accessor.chooseEA(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::ESM_Name) {
      ESM_TaskType::deserialize(valueType.second, accessor.chooseESM(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::Flight_Name) {
      FlightTaskType::deserialize(valueType.second, accessor.chooseFlight(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::OrbitChange_Name) {
      OrbitChangeTaskType::deserialize(valueType.second, accessor.chooseOrbitChange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::OrbitalSurveillance_Name) {
      OrbitalSurveillanceTaskType::deserialize(valueType.second, accessor.chooseOrbitalSurveillance(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::OrbitalSurveillanceSensor_Name) {
      OrbitalSurveillanceSensorTaskType::deserialize(valueType.second, accessor.chooseOrbitalSurveillanceSensor(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::PO_Name) {
      PO_TaskType::deserialize(valueType.second, accessor.choosePO(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::Refuel_Name) {
      RefuelTaskType::deserialize(valueType.second, accessor.chooseRefuel(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::SAR_Name) {
      SAR_TaskType::deserialize(valueType.second, accessor.chooseSAR(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::SMTI_Name) {
      SMTI_TaskType::deserialize(valueType.second, accessor.chooseSMTI(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::Strike_Name) {
      StrikeTaskType::deserialize(valueType.second, accessor.chooseStrike(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::SystemDeployment_Name) {
      SystemDeploymentTaskType::deserialize(valueType.second, accessor.chooseSystemDeployment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::TacticalOrder_Name) {
      TacticalOrderTaskType::deserialize(valueType.second, accessor.chooseTacticalOrder(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + TaskType_Names::WeatherRadar_Name) {
      WeatherRadarTaskType::deserialize(valueType.second, accessor.chooseWeatherRadar(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string TaskType::serialize(const uci::type::TaskType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? TaskType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, TaskType_Names::Extern_Type_Name);
  }
  if (accessor.isAirSample()) {
    AirSampleTaskType::serialize(accessor.getAirSample(), node, TaskType_Names::AirSample_Name);
  } else if (accessor.isAMTI()) {
    AMTI_TaskType::serialize(accessor.getAMTI(), node, TaskType_Names::AMTI_Name);
  } else if (accessor.isAO()) {
    AO_TaskType::serialize(accessor.getAO(), node, TaskType_Names::AO_Name);
  } else if (accessor.isCargoDelivery()) {
    CargoDeliveryTaskType::serialize(accessor.getCargoDelivery(), node, TaskType_Names::CargoDelivery_Name);
  } else if (accessor.isCOMINT()) {
    COMINT_TaskType::serialize(accessor.getCOMINT(), node, TaskType_Names::COMINT_Name);
  } else if (accessor.isCommRelay()) {
    CommRelayTaskType::serialize(accessor.getCommRelay(), node, TaskType_Names::CommRelay_Name);
  } else if (accessor.isCounterSpace()) {
    CounterSpaceTaskType::serialize(accessor.getCounterSpace(), node, TaskType_Names::CounterSpace_Name);
  } else if (accessor.isEA()) {
    EA_TaskType::serialize(accessor.getEA(), node, TaskType_Names::EA_Name);
  } else if (accessor.isESM()) {
    ESM_TaskType::serialize(accessor.getESM(), node, TaskType_Names::ESM_Name);
  } else if (accessor.isFlight()) {
    FlightTaskType::serialize(accessor.getFlight(), node, TaskType_Names::Flight_Name);
  } else if (accessor.isOrbitChange()) {
    OrbitChangeTaskType::serialize(accessor.getOrbitChange(), node, TaskType_Names::OrbitChange_Name);
  } else if (accessor.isOrbitalSurveillance()) {
    OrbitalSurveillanceTaskType::serialize(accessor.getOrbitalSurveillance(), node, TaskType_Names::OrbitalSurveillance_Name);
  } else if (accessor.isOrbitalSurveillanceSensor()) {
    OrbitalSurveillanceSensorTaskType::serialize(accessor.getOrbitalSurveillanceSensor(), node, TaskType_Names::OrbitalSurveillanceSensor_Name);
  } else if (accessor.isPO()) {
    PO_TaskType::serialize(accessor.getPO(), node, TaskType_Names::PO_Name);
  } else if (accessor.isRefuel()) {
    RefuelTaskType::serialize(accessor.getRefuel(), node, TaskType_Names::Refuel_Name);
  } else if (accessor.isSAR()) {
    SAR_TaskType::serialize(accessor.getSAR(), node, TaskType_Names::SAR_Name);
  } else if (accessor.isSMTI()) {
    SMTI_TaskType::serialize(accessor.getSMTI(), node, TaskType_Names::SMTI_Name);
  } else if (accessor.isStrike()) {
    StrikeTaskType::serialize(accessor.getStrike(), node, TaskType_Names::Strike_Name);
  } else if (accessor.isSystemDeployment()) {
    SystemDeploymentTaskType::serialize(accessor.getSystemDeployment(), node, TaskType_Names::SystemDeployment_Name);
  } else if (accessor.isTacticalOrder()) {
    TacticalOrderTaskType::serialize(accessor.getTacticalOrder(), node, TaskType_Names::TacticalOrder_Name);
  } else if (accessor.isWeatherRadar()) {
    WeatherRadarTaskType::serialize(accessor.getWeatherRadar(), node, TaskType_Names::WeatherRadar_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

