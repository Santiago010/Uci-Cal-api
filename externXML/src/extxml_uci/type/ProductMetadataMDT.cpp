/** @file ProductMetadataMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/ProductMetadataMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/BasicEncyclopediaNumberType.h"
#include "extxml_uci/type/CreationSourceEnum.h"
#include "extxml_uci/type/DataRecordBaseType.h"
#include "extxml_uci/type/DemodulationParameterType.h"
#include "extxml_uci/type/EntityMetadataType.h"
#include "extxml_uci/type/ForeignKeyType.h"
#include "extxml_uci/type/ProductCollectionLocationType.h"
#include "extxml_uci/type/ProductGeospatialLocationType.h"
#include "extxml_uci/type/ProductMetadataID_Type.h"
#include "extxml_uci/type/ProductOutputType.h"
#include "extxml_uci/type/RequirementProductMetadataType.h"
#include "extxml_uci/type/SecurityInformationType.h"
#include "extxml_uci/type/SourceFiltersType.h"
#include "extxml_uci/type/SystemID_Type.h"
#include "extxml_uci/type/ThumbnailType.h"
#include "extxml_uci/type/TraceabilityType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/ProductMetadataMDT.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace ProductMetadataMDT_Names {

constexpr const char* Extern_Type_Name{"ProductMetadataMDT"};
constexpr const char* ProductMetadataID_Name{"ProductMetadataID"};
constexpr const char* ProductDescription_Name{"ProductDescription"};
constexpr const char* FileName_Name{"FileName"};
constexpr const char* BE_Number_Name{"BE_Number"};
constexpr const char* SceneKey_Name{"SceneKey"};
constexpr const char* GeospatialLocation_Name{"GeospatialLocation"};
constexpr const char* CollectionLocation_Name{"CollectionLocation"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* ProductSource_Name{"ProductSource"};
constexpr const char* CreationSource_Name{"CreationSource"};
constexpr const char* UntrustedModification_Name{"UntrustedModification"};
constexpr const char* Timestamp_Name{"Timestamp"};
constexpr const char* SecurityInformation_Name{"SecurityInformation"};
constexpr const char* Thumbnail_Name{"Thumbnail"};
constexpr const char* DerivedFromID_Name{"DerivedFromID"};
constexpr const char* Traceability_Name{"Traceability"};
constexpr const char* RequirementMetadata_Name{"RequirementMetadata"};
constexpr const char* EntityMetadata_Name{"EntityMetadata"};
constexpr const char* SHA_2_Hash_Name{"SHA_2_Hash"};
constexpr const char* DemodulationParameters_Name{"DemodulationParameters"};
constexpr const char* AssociatedID_Name{"AssociatedID"};

} // namespace ProductMetadataMDT_Names

bool ProductMetadataMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::ProductMetadataMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = ProductMetadataMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::ProductMetadataID_Name) {
      ProductMetadataID_Type::deserialize(valueType.second, accessor.getProductMetadataID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::ProductDescription_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableProductDescription(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::FileName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileName(*value);
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::BE_Number_Name) {
      BasicEncyclopediaNumberType::deserialize(valueType.second, accessor.enableBE_Number(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::SceneKey_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableSceneKey(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::GeospatialLocation_Name) {
      uci::type::ProductMetadataMDT::GeospatialLocation& boundedList = accessor.getGeospatialLocation();
      const uci::type::ProductMetadataMDT::GeospatialLocation::size_type boundedListSize{boundedList.size()};
      boundedList.resize(boundedListSize + 1);
      ProductGeospatialLocationType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::CollectionLocation_Name) {
      ProductCollectionLocationType::deserialize(valueType.second, accessor.enableCollectionLocation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::ProductSource_Name) {
      SourceFiltersType::deserialize(valueType.second, accessor.getProductSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::CreationSource_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCreationSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::UntrustedModification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUntrustedModification(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::Timestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTimestamp(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::SecurityInformation_Name) {
      SecurityInformationType::deserialize(valueType.second, accessor.getSecurityInformation(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::Thumbnail_Name) {
      ThumbnailType::deserialize(valueType.second, accessor.enableThumbnail(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::DerivedFromID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductMetadataMDT::DerivedFromID& boundedList = accessor.getDerivedFromID();
        const uci::type::ProductMetadataMDT::DerivedFromID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ProductMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::Traceability_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductMetadataMDT::Traceability& boundedList = accessor.getTraceability();
        const uci::type::ProductMetadataMDT::Traceability::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        TraceabilityType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::RequirementMetadata_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductMetadataMDT::RequirementMetadata& boundedList = accessor.getRequirementMetadata();
        const uci::type::ProductMetadataMDT::RequirementMetadata::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        RequirementProductMetadataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::EntityMetadata_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductMetadataMDT::EntityMetadata& boundedList = accessor.getEntityMetadata();
        const uci::type::ProductMetadataMDT::EntityMetadata::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        EntityMetadataType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::SHA_2_Hash_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        extxml_uci::util::SerializationHelpers::deserializeHexBinary(*value, accessor.enableSHA_2_Hash());
      }
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::DemodulationParameters_Name) {
      DemodulationParameterType::deserialize(valueType.second, accessor.enableDemodulationParameters(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + ProductMetadataMDT_Names::AssociatedID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::ProductMetadataMDT::AssociatedID& boundedList = accessor.getAssociatedID();
        const uci::type::ProductMetadataMDT::AssociatedID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ProductMetadataID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  DataRecordBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string ProductMetadataMDT::serialize(const uci::type::ProductMetadataMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? ProductMetadataMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, ProductMetadataMDT_Names::Extern_Type_Name);
  }
  DataRecordBaseType::serialize(accessor, node, "", false, false, false);
  ProductMetadataID_Type::serialize(accessor.getProductMetadataID(), node, ProductMetadataMDT_Names::ProductMetadataID_Name);
  ProductOutputType::serialize(accessor.getProductDescription(), node, ProductMetadataMDT_Names::ProductDescription_Name);
  if (accessor.hasFileName()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileName(), node, ProductMetadataMDT_Names::FileName_Name);
  }
  if (accessor.hasBE_Number()) {
    BasicEncyclopediaNumberType::serialize(accessor.getBE_Number(), node, ProductMetadataMDT_Names::BE_Number_Name);
  }
  if (accessor.hasSceneKey()) {
    ForeignKeyType::serialize(accessor.getSceneKey(), node, ProductMetadataMDT_Names::SceneKey_Name);
  }
  {
    const uci::type::ProductMetadataMDT::GeospatialLocation& boundedList = accessor.getGeospatialLocation();
    for (uci::type::ProductMetadataMDT::GeospatialLocation::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ProductGeospatialLocationType::serialize(boundedList.at(i), node, ProductMetadataMDT_Names::GeospatialLocation_Name);
    }
  }
  if (accessor.hasCollectionLocation()) {
    ProductCollectionLocationType::serialize(accessor.getCollectionLocation(), node, ProductMetadataMDT_Names::CollectionLocation_Name);
  }
  SystemID_Type::serialize(accessor.getSystemID(), node, ProductMetadataMDT_Names::SystemID_Name);
  SourceFiltersType::serialize(accessor.getProductSource(), node, ProductMetadataMDT_Names::ProductSource_Name);
  CreationSourceEnum::serialize(accessor.getCreationSource(), node, ProductMetadataMDT_Names::CreationSource_Name, false);
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getUntrustedModification(), node, ProductMetadataMDT_Names::UntrustedModification_Name);
  extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getTimestamp(), node, ProductMetadataMDT_Names::Timestamp_Name);
  SecurityInformationType::serialize(accessor.getSecurityInformation(), node, ProductMetadataMDT_Names::SecurityInformation_Name);
  if (accessor.hasThumbnail()) {
    ThumbnailType::serialize(accessor.getThumbnail(), node, ProductMetadataMDT_Names::Thumbnail_Name);
  }
  {
    const uci::type::ProductMetadataMDT::DerivedFromID& boundedList = accessor.getDerivedFromID();
    for (uci::type::ProductMetadataMDT::DerivedFromID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ProductMetadataID_Type::serialize(boundedList.at(i), node, ProductMetadataMDT_Names::DerivedFromID_Name);
    }
  }
  {
    const uci::type::ProductMetadataMDT::Traceability& boundedList = accessor.getTraceability();
    for (uci::type::ProductMetadataMDT::Traceability::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      TraceabilityType::serialize(boundedList.at(i), node, ProductMetadataMDT_Names::Traceability_Name);
    }
  }
  {
    const uci::type::ProductMetadataMDT::RequirementMetadata& boundedList = accessor.getRequirementMetadata();
    for (uci::type::ProductMetadataMDT::RequirementMetadata::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      RequirementProductMetadataType::serialize(boundedList.at(i), node, ProductMetadataMDT_Names::RequirementMetadata_Name);
    }
  }
  {
    const uci::type::ProductMetadataMDT::EntityMetadata& boundedList = accessor.getEntityMetadata();
    for (uci::type::ProductMetadataMDT::EntityMetadata::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      EntityMetadataType::serialize(boundedList.at(i), node, ProductMetadataMDT_Names::EntityMetadata_Name);
    }
  }
  if (accessor.hasSHA_2_Hash()) {
    extxml_uci::util::SerializationHelpers::serializeHexBinary(accessor.getSHA_2_Hash(), node, ProductMetadataMDT_Names::SHA_2_Hash_Name);
  }
  if (accessor.hasDemodulationParameters()) {
    DemodulationParameterType::serialize(accessor.getDemodulationParameters(), node, ProductMetadataMDT_Names::DemodulationParameters_Name);
  }
  {
    const uci::type::ProductMetadataMDT::AssociatedID& boundedList = accessor.getAssociatedID();
    for (uci::type::ProductMetadataMDT::AssociatedID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ProductMetadataID_Type::serialize(boundedList.at(i), node, ProductMetadataMDT_Names::AssociatedID_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

