/** @file COMINT_ReceiveDwellType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/COMINT_ReceiveDwellType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/COMINT_DwellStateEnum.h"
#include "extxml_uci/type/COMINT_DwellTypeEnum.h"
#include "extxml_uci/type/COMINT_InteractiveType.h"
#include "extxml_uci/type/ComponentID_Type.h"
#include "extxml_uci/type/DwellID_Type.h"
#include "extxml_uci/type/FrequencyRangeType.h"
#include "extxml_uci/type/NED_ConeType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/COMINT_ReceiveDwellType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace COMINT_ReceiveDwellType_Names {

constexpr const char* Extern_Type_Name{"COMINT_ReceiveDwellType"};
constexpr const char* DwellID_Name{"DwellID"};
constexpr const char* DwellState_Name{"DwellState"};
constexpr const char* DwellType_Name{"DwellType"};
constexpr const char* DwellFOV_Name{"DwellFOV"};
constexpr const char* StartTime_Name{"StartTime"};
constexpr const char* CumulativeDwellTime_Name{"CumulativeDwellTime"};
constexpr const char* ComponentID_Name{"ComponentID"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* DwellRevisitInterval_Name{"DwellRevisitInterval"};
constexpr const char* PulseWidthLow_Name{"PulseWidthLow"};
constexpr const char* PulseWidthHigh_Name{"PulseWidthHigh"};
constexpr const char* PRI_High_Name{"PRI_High"};
constexpr const char* NativeSensitivity_Name{"NativeSensitivity"};
constexpr const char* Desensitization_Name{"Desensitization"};
constexpr const char* VideoBandwidth_Name{"VideoBandwidth"};
constexpr const char* COMINT_Interactive_Name{"COMINT_Interactive"};
constexpr const char* StopTime_Name{"StopTime"};
constexpr const char* SampleRate_Name{"SampleRate"};
constexpr const char* FFT_PointsPerSample_Name{"FFT_PointsPerSample"};

} // namespace COMINT_ReceiveDwellType_Names

bool COMINT_ReceiveDwellType::deserialize(const boost::property_tree::ptree& propTree, uci::type::COMINT_ReceiveDwellType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = COMINT_ReceiveDwellType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::DwellID_Name) {
      DwellID_Type::deserialize(valueType.second, accessor.getDwellID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::DwellState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getDwellState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::DwellType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableDwellType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::DwellFOV_Name) {
      NED_ConeType::deserialize(valueType.second, accessor.enableDwellFOV(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::StartTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStartTime(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::CumulativeDwellTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setCumulativeDwellTime(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::ComponentID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_ReceiveDwellType::ComponentID& boundedList = accessor.getComponentID();
        const uci::type::COMINT_ReceiveDwellType::ComponentID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ComponentID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::Frequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::COMINT_ReceiveDwellType::Frequency& boundedList = accessor.getFrequency();
        const uci::type::COMINT_ReceiveDwellType::Frequency::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        FrequencyRangeType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::DwellRevisitInterval_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDwellRevisitInterval(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::PulseWidthLow_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthLow(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::PulseWidthHigh_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPulseWidthHigh(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::PRI_High_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setPRI_High(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::NativeSensitivity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNativeSensitivity(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::Desensitization_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDesensitization(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::VideoBandwidth_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setVideoBandwidth(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::COMINT_Interactive_Name) {
      COMINT_InteractiveType::deserialize(valueType.second, accessor.enableCOMINT_Interactive(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::StopTime_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStopTime(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::SampleRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSampleRate(extxml_uci::util::SerializationHelpers::deserializeFloat(*value));
      }
    } else if (valueType.first == nsPrefix + COMINT_ReceiveDwellType_Names::FFT_PointsPerSample_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFFT_PointsPerSample(extxml_uci::util::SerializationHelpers::deserializeInt(*value));
      }
    }
  }
  return true;
}

std::string COMINT_ReceiveDwellType::serialize(const uci::type::COMINT_ReceiveDwellType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? COMINT_ReceiveDwellType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, COMINT_ReceiveDwellType_Names::Extern_Type_Name);
  }
  DwellID_Type::serialize(accessor.getDwellID(), node, COMINT_ReceiveDwellType_Names::DwellID_Name);
  COMINT_DwellStateEnum::serialize(accessor.getDwellState(), node, COMINT_ReceiveDwellType_Names::DwellState_Name, false);
  if (accessor.hasDwellType()) {
    COMINT_DwellTypeEnum::serialize(accessor.getDwellType(), node, COMINT_ReceiveDwellType_Names::DwellType_Name, false);
  }
  if (accessor.hasDwellFOV()) {
    NED_ConeType::serialize(accessor.getDwellFOV(), node, COMINT_ReceiveDwellType_Names::DwellFOV_Name);
  }
  if (accessor.hasStartTime()) {
    extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getStartTime(), node, COMINT_ReceiveDwellType_Names::StartTime_Name);
  }
  if (accessor.hasCumulativeDwellTime()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getCumulativeDwellTime(), node, COMINT_ReceiveDwellType_Names::CumulativeDwellTime_Name);
  }
  {
    const uci::type::COMINT_ReceiveDwellType::ComponentID& boundedList = accessor.getComponentID();
    for (uci::type::COMINT_ReceiveDwellType::ComponentID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ComponentID_Type::serialize(boundedList.at(i), node, COMINT_ReceiveDwellType_Names::ComponentID_Name);
    }
  }
  {
    const uci::type::COMINT_ReceiveDwellType::Frequency& boundedList = accessor.getFrequency();
    for (uci::type::COMINT_ReceiveDwellType::Frequency::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      FrequencyRangeType::serialize(boundedList.at(i), node, COMINT_ReceiveDwellType_Names::Frequency_Name);
    }
  }
  if (accessor.hasDwellRevisitInterval()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getDwellRevisitInterval(), node, COMINT_ReceiveDwellType_Names::DwellRevisitInterval_Name);
  }
  if (accessor.hasPulseWidthLow()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthLow(), node, COMINT_ReceiveDwellType_Names::PulseWidthLow_Name);
  }
  if (accessor.hasPulseWidthHigh()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getPulseWidthHigh(), node, COMINT_ReceiveDwellType_Names::PulseWidthHigh_Name);
  }
  if (accessor.hasPRI_High()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getPRI_High(), node, COMINT_ReceiveDwellType_Names::PRI_High_Name);
  }
  if (accessor.hasNativeSensitivity()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getNativeSensitivity(), node, COMINT_ReceiveDwellType_Names::NativeSensitivity_Name);
  }
  if (accessor.hasDesensitization()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getDesensitization(), node, COMINT_ReceiveDwellType_Names::Desensitization_Name);
  }
  if (accessor.hasVideoBandwidth()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getVideoBandwidth(), node, COMINT_ReceiveDwellType_Names::VideoBandwidth_Name);
  }
  if (accessor.hasCOMINT_Interactive()) {
    COMINT_InteractiveType::serialize(accessor.getCOMINT_Interactive(), node, COMINT_ReceiveDwellType_Names::COMINT_Interactive_Name);
  }
  if (accessor.hasStopTime()) {
    extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getStopTime(), node, COMINT_ReceiveDwellType_Names::StopTime_Name);
  }
  if (accessor.hasSampleRate()) {
    extxml_uci::util::SerializationHelpers::serializeFloat(accessor.getSampleRate(), node, COMINT_ReceiveDwellType_Names::SampleRate_Name);
  }
  if (accessor.hasFFT_PointsPerSample()) {
    extxml_uci::util::SerializationHelpers::serializeInt(accessor.getFFT_PointsPerSample(), node, COMINT_ReceiveDwellType_Names::FFT_PointsPerSample_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

