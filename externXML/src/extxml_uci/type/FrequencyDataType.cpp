/** @file FrequencyDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/FrequencyDataType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/FrequencyAgilityPatternEnum.h"
#include "extxml_uci/type/FrequencyDataBaseType.h"
#include "extxml_uci/type/FrequencyPatternPeriodicityEnum.h"
#include "extxml_uci/type/FrequencySwitchingEnum.h"
#include "extxml_uci/type/FrequencySwitchingPatternEnum.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/FrequencyDataType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace FrequencyDataType_Names {

constexpr const char* Extern_Type_Name{"FrequencyDataType"};
constexpr const char* AgilityPattern_Name{"AgilityPattern"};
constexpr const char* AgilityValues_Name{"AgilityValues"};
constexpr const char* AgilityPeriodicity_Name{"AgilityPeriodicity"};
constexpr const char* AgileEmitter_Name{"AgileEmitter"};
constexpr const char* SwitchingValues_Name{"SwitchingValues"};
constexpr const char* ModulationPatternPeriod_Name{"ModulationPatternPeriod"};
constexpr const char* FrequencyBins_Name{"FrequencyBins"};

} // namespace FrequencyDataType_Names

bool FrequencyDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::FrequencyDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FrequencyDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FrequencyDataType_Names::AgilityPattern_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAgilityPattern().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FrequencyDataType_Names::AgilityValues_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAgilityValues().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FrequencyDataType_Names::AgilityPeriodicity_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableAgilityPeriodicity().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FrequencyDataType_Names::AgileEmitter_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setAgileEmitter(*value);
      }
    } else if (valueType.first == nsPrefix + FrequencyDataType_Names::SwitchingValues_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableSwitchingValues().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + FrequencyDataType_Names::ModulationPatternPeriod_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setModulationPatternPeriod(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + FrequencyDataType_Names::FrequencyBins_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFrequencyBins(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
  FrequencyDataBaseType::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string FrequencyDataType::serialize(const uci::type::FrequencyDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? FrequencyDataType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, FrequencyDataType_Names::Extern_Type_Name);
  }
  FrequencyDataBaseType::serialize(accessor, node, "", false, false, false);
  if (accessor.hasAgilityPattern()) {
    FrequencyAgilityPatternEnum::serialize(accessor.getAgilityPattern(), node, FrequencyDataType_Names::AgilityPattern_Name, false);
  }
  if (accessor.hasAgilityValues()) {
    FrequencySwitchingEnum::serialize(accessor.getAgilityValues(), node, FrequencyDataType_Names::AgilityValues_Name, false);
  }
  if (accessor.hasAgilityPeriodicity()) {
    FrequencyPatternPeriodicityEnum::serialize(accessor.getAgilityPeriodicity(), node, FrequencyDataType_Names::AgilityPeriodicity_Name, false);
  }
  if (accessor.hasAgileEmitter()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getAgileEmitter(), node, FrequencyDataType_Names::AgileEmitter_Name);
  }
  if (accessor.hasSwitchingValues()) {
    FrequencySwitchingPatternEnum::serialize(accessor.getSwitchingValues(), node, FrequencyDataType_Names::SwitchingValues_Name, false);
  }
  if (accessor.hasModulationPatternPeriod()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getModulationPatternPeriod(), node, FrequencyDataType_Names::ModulationPatternPeriod_Name);
  }
  if (accessor.hasFrequencyBins()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getFrequencyBins(), node, FrequencyDataType_Names::FrequencyBins_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

