/** @file FileHeaderRevA_Type.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/FileHeaderRevA_Type.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/FileHeaderRevA_Type.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace FileHeaderRevA_Type_Names {

constexpr const char* Extern_Type_Name{"FileHeaderRevA_Type"};
constexpr const char* FileSecurityClassification_Name{"FileSecurityClassification"};
constexpr const char* FileClassificationSystem_Name{"FileClassificationSystem"};
constexpr const char* FileCodewords_Name{"FileCodewords"};
constexpr const char* FileControlAndHandling_Name{"FileControlAndHandling"};
constexpr const char* FileReleasingInstructions_Name{"FileReleasingInstructions"};
constexpr const char* FileDeclassificationType_Name{"FileDeclassificationType"};
constexpr const char* FileDeclassificationDate_Name{"FileDeclassificationDate"};
constexpr const char* FileDeclassificationExemption_Name{"FileDeclassificationExemption"};
constexpr const char* FileDowngrade_Name{"FileDowngrade"};
constexpr const char* FileDowngradeDate_Name{"FileDowngradeDate"};
constexpr const char* FileClassificationText_Name{"FileClassificationText"};
constexpr const char* FileClassificationAuthorityType_Name{"FileClassificationAuthorityType"};
constexpr const char* FileClassificationAuthority_Name{"FileClassificationAuthority"};
constexpr const char* FileClassificationReason_Name{"FileClassificationReason"};
constexpr const char* FileSecuritySourceDate_Name{"FileSecuritySourceDate"};
constexpr const char* FileSecurityControlNumber_Name{"FileSecurityControlNumber"};
constexpr const char* OriginatorsName_Name{"OriginatorsName"};
constexpr const char* OriginatorsPhone_Name{"OriginatorsPhone"};

} // namespace FileHeaderRevA_Type_Names

bool FileHeaderRevA_Type::deserialize(const boost::property_tree::ptree& propTree, uci::type::FileHeaderRevA_Type& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = FileHeaderRevA_Type_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileSecurityClassification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileSecurityClassification(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileClassificationSystem_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileClassificationSystem(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileCodewords_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileCodewords(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileControlAndHandling_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileControlAndHandling(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileReleasingInstructions_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileReleasingInstructions(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileDeclassificationType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileDeclassificationType(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileDeclassificationDate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileDeclassificationDate(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileDeclassificationExemption_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileDeclassificationExemption(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileDowngrade_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileDowngrade(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileDowngradeDate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileDowngradeDate(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileClassificationText_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileClassificationText(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileClassificationAuthorityType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileClassificationAuthorityType(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileClassificationAuthority_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileClassificationAuthority(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileClassificationReason_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileClassificationReason(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileSecuritySourceDate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileSecuritySourceDate(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::FileSecurityControlNumber_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setFileSecurityControlNumber(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::OriginatorsName_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOriginatorsName(*value);
      }
    } else if (valueType.first == nsPrefix + FileHeaderRevA_Type_Names::OriginatorsPhone_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setOriginatorsPhone(*value);
      }
    }
  }
  return true;
}

std::string FileHeaderRevA_Type::serialize(const uci::type::FileHeaderRevA_Type& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? FileHeaderRevA_Type_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, FileHeaderRevA_Type_Names::Extern_Type_Name);
  }
  extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileSecurityClassification(), node, FileHeaderRevA_Type_Names::FileSecurityClassification_Name);
  if (accessor.hasFileClassificationSystem()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileClassificationSystem(), node, FileHeaderRevA_Type_Names::FileClassificationSystem_Name);
  }
  if (accessor.hasFileCodewords()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileCodewords(), node, FileHeaderRevA_Type_Names::FileCodewords_Name);
  }
  if (accessor.hasFileControlAndHandling()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileControlAndHandling(), node, FileHeaderRevA_Type_Names::FileControlAndHandling_Name);
  }
  if (accessor.hasFileReleasingInstructions()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileReleasingInstructions(), node, FileHeaderRevA_Type_Names::FileReleasingInstructions_Name);
  }
  if (accessor.hasFileDeclassificationType()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileDeclassificationType(), node, FileHeaderRevA_Type_Names::FileDeclassificationType_Name);
  }
  if (accessor.hasFileDeclassificationDate()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileDeclassificationDate(), node, FileHeaderRevA_Type_Names::FileDeclassificationDate_Name);
  }
  if (accessor.hasFileDeclassificationExemption()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileDeclassificationExemption(), node, FileHeaderRevA_Type_Names::FileDeclassificationExemption_Name);
  }
  if (accessor.hasFileDowngrade()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileDowngrade(), node, FileHeaderRevA_Type_Names::FileDowngrade_Name);
  }
  if (accessor.hasFileDowngradeDate()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileDowngradeDate(), node, FileHeaderRevA_Type_Names::FileDowngradeDate_Name);
  }
  if (accessor.hasFileClassificationText()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileClassificationText(), node, FileHeaderRevA_Type_Names::FileClassificationText_Name);
  }
  if (accessor.hasFileClassificationAuthorityType()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileClassificationAuthorityType(), node, FileHeaderRevA_Type_Names::FileClassificationAuthorityType_Name);
  }
  if (accessor.hasFileClassificationAuthority()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileClassificationAuthority(), node, FileHeaderRevA_Type_Names::FileClassificationAuthority_Name);
  }
  if (accessor.hasFileClassificationReason()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileClassificationReason(), node, FileHeaderRevA_Type_Names::FileClassificationReason_Name);
  }
  if (accessor.hasFileSecuritySourceDate()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileSecuritySourceDate(), node, FileHeaderRevA_Type_Names::FileSecuritySourceDate_Name);
  }
  if (accessor.hasFileSecurityControlNumber()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getFileSecurityControlNumber(), node, FileHeaderRevA_Type_Names::FileSecurityControlNumber_Name);
  }
  if (accessor.hasOriginatorsName()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getOriginatorsName(), node, FileHeaderRevA_Type_Names::OriginatorsName_Name);
  }
  if (accessor.hasOriginatorsPhone()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getOriginatorsPhone(), node, FileHeaderRevA_Type_Names::OriginatorsPhone_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

