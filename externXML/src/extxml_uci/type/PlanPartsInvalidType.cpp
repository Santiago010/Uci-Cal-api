/** @file PlanPartsInvalidType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/PlanPartsInvalidType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/ActionPlanInvalidType.h"
#include "extxml_uci/type/ActivityPlanInvalidType.h"
#include "extxml_uci/type/EffectPlanInvalidType.h"
#include "extxml_uci/type/OrbitActivityPlanInvalidType.h"
#include "extxml_uci/type/OrbitPlanInvalidType.h"
#include "extxml_uci/type/ResponsePlanInvalidType.h"
#include "extxml_uci/type/RouteActivityPlanInvalidType.h"
#include "extxml_uci/type/RoutePlanInvalidType.h"
#include "extxml_uci/type/TaskPlanInvalidType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/PlanPartsInvalidType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PlanPartsInvalidType_Names {

constexpr const char* Extern_Type_Name{"PlanPartsInvalidType"};
constexpr const char* TaskPlan_Name{"TaskPlan"};
constexpr const char* RoutePlan_Name{"RoutePlan"};
constexpr const char* OrbitPlan_Name{"OrbitPlan"};
constexpr const char* RouteActivityPlan_Name{"RouteActivityPlan"};
constexpr const char* OrbitActivityPlan_Name{"OrbitActivityPlan"};
constexpr const char* ActivityPlan_Name{"ActivityPlan"};
constexpr const char* EffectPlan_Name{"EffectPlan"};
constexpr const char* ActionPlan_Name{"ActionPlan"};
constexpr const char* ResponsePlan_Name{"ResponsePlan"};

} // namespace PlanPartsInvalidType_Names

bool PlanPartsInvalidType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PlanPartsInvalidType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PlanPartsInvalidType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PlanPartsInvalidType_Names::TaskPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanPartsInvalidType::TaskPlan& boundedList = accessor.getTaskPlan();
        const uci::type::PlanPartsInvalidType::TaskPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        TaskPlanInvalidType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanPartsInvalidType_Names::RoutePlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanPartsInvalidType::RoutePlan& boundedList = accessor.getRoutePlan();
        const uci::type::PlanPartsInvalidType::RoutePlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        RoutePlanInvalidType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanPartsInvalidType_Names::OrbitPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanPartsInvalidType::OrbitPlan& boundedList = accessor.getOrbitPlan();
        const uci::type::PlanPartsInvalidType::OrbitPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        OrbitPlanInvalidType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanPartsInvalidType_Names::RouteActivityPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanPartsInvalidType::RouteActivityPlan& boundedList = accessor.getRouteActivityPlan();
        const uci::type::PlanPartsInvalidType::RouteActivityPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        RouteActivityPlanInvalidType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanPartsInvalidType_Names::OrbitActivityPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanPartsInvalidType::OrbitActivityPlan& boundedList = accessor.getOrbitActivityPlan();
        const uci::type::PlanPartsInvalidType::OrbitActivityPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        OrbitActivityPlanInvalidType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanPartsInvalidType_Names::ActivityPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanPartsInvalidType::ActivityPlan& boundedList = accessor.getActivityPlan();
        const uci::type::PlanPartsInvalidType::ActivityPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ActivityPlanInvalidType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanPartsInvalidType_Names::EffectPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanPartsInvalidType::EffectPlan& boundedList = accessor.getEffectPlan();
        const uci::type::PlanPartsInvalidType::EffectPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        EffectPlanInvalidType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanPartsInvalidType_Names::ActionPlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanPartsInvalidType::ActionPlan& boundedList = accessor.getActionPlan();
        const uci::type::PlanPartsInvalidType::ActionPlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ActionPlanInvalidType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PlanPartsInvalidType_Names::ResponsePlan_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PlanPartsInvalidType::ResponsePlan& boundedList = accessor.getResponsePlan();
        const uci::type::PlanPartsInvalidType::ResponsePlan::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ResponsePlanInvalidType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string PlanPartsInvalidType::serialize(const uci::type::PlanPartsInvalidType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PlanPartsInvalidType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, PlanPartsInvalidType_Names::Extern_Type_Name);
  }
  {
    const uci::type::PlanPartsInvalidType::TaskPlan& boundedList = accessor.getTaskPlan();
    for (uci::type::PlanPartsInvalidType::TaskPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      TaskPlanInvalidType::serialize(boundedList.at(i), node, PlanPartsInvalidType_Names::TaskPlan_Name);
    }
  }
  {
    const uci::type::PlanPartsInvalidType::RoutePlan& boundedList = accessor.getRoutePlan();
    for (uci::type::PlanPartsInvalidType::RoutePlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      RoutePlanInvalidType::serialize(boundedList.at(i), node, PlanPartsInvalidType_Names::RoutePlan_Name);
    }
  }
  {
    const uci::type::PlanPartsInvalidType::OrbitPlan& boundedList = accessor.getOrbitPlan();
    for (uci::type::PlanPartsInvalidType::OrbitPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitPlanInvalidType::serialize(boundedList.at(i), node, PlanPartsInvalidType_Names::OrbitPlan_Name);
    }
  }
  {
    const uci::type::PlanPartsInvalidType::RouteActivityPlan& boundedList = accessor.getRouteActivityPlan();
    for (uci::type::PlanPartsInvalidType::RouteActivityPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      RouteActivityPlanInvalidType::serialize(boundedList.at(i), node, PlanPartsInvalidType_Names::RouteActivityPlan_Name);
    }
  }
  {
    const uci::type::PlanPartsInvalidType::OrbitActivityPlan& boundedList = accessor.getOrbitActivityPlan();
    for (uci::type::PlanPartsInvalidType::OrbitActivityPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OrbitActivityPlanInvalidType::serialize(boundedList.at(i), node, PlanPartsInvalidType_Names::OrbitActivityPlan_Name);
    }
  }
  {
    const uci::type::PlanPartsInvalidType::ActivityPlan& boundedList = accessor.getActivityPlan();
    for (uci::type::PlanPartsInvalidType::ActivityPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ActivityPlanInvalidType::serialize(boundedList.at(i), node, PlanPartsInvalidType_Names::ActivityPlan_Name);
    }
  }
  {
    const uci::type::PlanPartsInvalidType::EffectPlan& boundedList = accessor.getEffectPlan();
    for (uci::type::PlanPartsInvalidType::EffectPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      EffectPlanInvalidType::serialize(boundedList.at(i), node, PlanPartsInvalidType_Names::EffectPlan_Name);
    }
  }
  {
    const uci::type::PlanPartsInvalidType::ActionPlan& boundedList = accessor.getActionPlan();
    for (uci::type::PlanPartsInvalidType::ActionPlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ActionPlanInvalidType::serialize(boundedList.at(i), node, PlanPartsInvalidType_Names::ActionPlan_Name);
    }
  }
  {
    const uci::type::PlanPartsInvalidType::ResponsePlan& boundedList = accessor.getResponsePlan();
    for (uci::type::PlanPartsInvalidType::ResponsePlan::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ResponsePlanInvalidType::serialize(boundedList.at(i), node, PlanPartsInvalidType_Names::ResponsePlan_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

