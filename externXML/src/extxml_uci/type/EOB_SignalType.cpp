/** @file EOB_SignalType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/EOB_SignalType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/EmitterFunctionType.h"
#include "extxml_uci/type/FrequencyDataBaseType.h"
#include "extxml_uci/type/ModulationOnPulseDataBaseType.h"
#include "extxml_uci/type/PRI_DataBaseType.h"
#include "extxml_uci/type/ScanDataBaseType.h"
#include "extxml_uci/type/SignalAmplitudeType.h"
#include "extxml_uci/type/SignalPulseWidthBaseType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/DerivedTypesSerializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/EOB_SignalType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace EOB_SignalType_Names {

constexpr const char* Extern_Type_Name{"EOB_SignalType"};
constexpr const char* LastHeardTimestamp_Name{"LastHeardTimestamp"};
constexpr const char* Frequency_Name{"Frequency"};
constexpr const char* PilotFrequency_Name{"PilotFrequency"};
constexpr const char* PRI_Name{"PRI"};
constexpr const char* PulseWidth_Name{"PulseWidth"};
constexpr const char* Scan_Name{"Scan"};
constexpr const char* ModulationOnPulse_Name{"ModulationOnPulse"};
constexpr const char* Amplitude_Name{"Amplitude"};
constexpr const char* EmitterFunction_Name{"EmitterFunction"};

} // namespace EOB_SignalType_Names

bool EOB_SignalType::deserialize(const boost::property_tree::ptree& propTree, uci::type::EOB_SignalType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EOB_SignalType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EOB_SignalType_Names::LastHeardTimestamp_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setLastHeardTimestamp(extxml_uci::util::SerializationHelpers::deserializeDateTime(*value));
      }
    } else if (valueType.first == nsPrefix + EOB_SignalType_Names::Frequency_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableFrequency(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EOB_SignalType_Names::PilotFrequency_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePilotFrequency(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EOB_SignalType_Names::PRI_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePRI(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EOB_SignalType_Names::PulseWidth_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enablePulseWidth(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EOB_SignalType_Names::Scan_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableScan(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EOB_SignalType_Names::ModulationOnPulse_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableModulationOnPulse(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EOB_SignalType_Names::Amplitude_Name) {
      SignalAmplitudeType::deserialize(valueType.second, accessor.enableAmplitude(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EOB_SignalType_Names::EmitterFunction_Name) {
      EmitterFunctionType::deserialize(valueType.second, accessor.enableEmitterFunction(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string EOB_SignalType::serialize(const uci::type::EOB_SignalType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? EOB_SignalType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::eOB_SignalType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extxml_uci::util::SerializationHelpers::addTypeAttribute(node, EOB_SignalType_Names::Extern_Type_Name);
    }
    if (accessor.hasLastHeardTimestamp()) {
      extxml_uci::util::SerializationHelpers::serializeDateTime(accessor.getLastHeardTimestamp(), node, EOB_SignalType_Names::LastHeardTimestamp_Name);
    }
    if (accessor.hasFrequency()) {
      FrequencyDataBaseType::serialize(accessor.getFrequency(), node, EOB_SignalType_Names::Frequency_Name);
    }
    if (accessor.hasPilotFrequency()) {
      FrequencyDataBaseType::serialize(accessor.getPilotFrequency(), node, EOB_SignalType_Names::PilotFrequency_Name);
    }
    if (accessor.hasPRI()) {
      PRI_DataBaseType::serialize(accessor.getPRI(), node, EOB_SignalType_Names::PRI_Name);
    }
    if (accessor.hasPulseWidth()) {
      SignalPulseWidthBaseType::serialize(accessor.getPulseWidth(), node, EOB_SignalType_Names::PulseWidth_Name);
    }
    if (accessor.hasScan()) {
      ScanDataBaseType::serialize(accessor.getScan(), node, EOB_SignalType_Names::Scan_Name);
    }
    if (accessor.hasModulationOnPulse()) {
      ModulationOnPulseDataBaseType::serialize(accessor.getModulationOnPulse(), node, EOB_SignalType_Names::ModulationOnPulse_Name);
    }
    if (accessor.hasAmplitude()) {
      SignalAmplitudeType::serialize(accessor.getAmplitude(), node, EOB_SignalType_Names::Amplitude_Name);
    }
    if (accessor.hasEmitterFunction()) {
      EmitterFunctionType::serialize(accessor.getEmitterFunction(), node, EOB_SignalType_Names::EmitterFunction_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    extxml_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

