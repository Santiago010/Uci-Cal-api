/** @file CommDataType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/CommDataType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/CommCapabilityEnum.h"
#include "extxml_uci/type/CommResourceType.h"
#include "extxml_uci/type/CommSpecificRequestDataEXT.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/DerivedTypesSerializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/base/accessorType.h"
#include "uci/type/CommDataType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace CommDataType_Names {

constexpr const char* Extern_Type_Name{"CommDataType"};
constexpr const char* Resource_Name{"Resource"};
constexpr const char* CommType_Name{"CommType"};
constexpr const char* UplinkDataRate_Name{"UplinkDataRate"};
constexpr const char* UplinkFrequency_Name{"UplinkFrequency"};
constexpr const char* DownlinkDataRate_Name{"DownlinkDataRate"};
constexpr const char* DownlinkFrequency_Name{"DownlinkFrequency"};
constexpr const char* CommSpecificData_Name{"CommSpecificData"};

} // namespace CommDataType_Names

bool CommDataType::deserialize(const boost::property_tree::ptree& propTree, uci::type::CommDataType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = CommDataType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + CommDataType_Names::Resource_Name) {
      CommResourceType::deserialize(valueType.second, accessor.getResource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + CommDataType_Names::CommType_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getCommType().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + CommDataType_Names::UplinkDataRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUplinkDataRate(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + CommDataType_Names::UplinkFrequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setUplinkFrequency(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommDataType_Names::DownlinkDataRate_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDownlinkDataRate(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + CommDataType_Names::DownlinkFrequency_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setDownlinkFrequency(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + CommDataType_Names::CommSpecificData_Name) {
      CommSpecificRequestDataEXT::deserialize(valueType.second, accessor.enableCommSpecificData(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string CommDataType::serialize(const uci::type::CommDataType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool checkIfDerivation, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? CommDataType_Names::Extern_Type_Name : nodeName};
  if (!checkIfDerivation || (accessor.getAccessorType() == uci::type::accessorType::commDataType)) {
    boost::property_tree::ptree newNode;
    boost::property_tree::ptree& node = (createNode ? newNode : propTree);
    if (addTypeAttribute) {
      extxml_uci::util::SerializationHelpers::addTypeAttribute(node, CommDataType_Names::Extern_Type_Name);
    }
    CommResourceType::serialize(accessor.getResource(), node, CommDataType_Names::Resource_Name);
    CommCapabilityEnum::serialize(accessor.getCommType(), node, CommDataType_Names::CommType_Name, false);
    if (accessor.hasUplinkDataRate()) {
      extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getUplinkDataRate(), node, CommDataType_Names::UplinkDataRate_Name);
    }
    if (accessor.hasUplinkFrequency()) {
      extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getUplinkFrequency(), node, CommDataType_Names::UplinkFrequency_Name);
    }
    if (accessor.hasDownlinkDataRate()) {
      extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getDownlinkDataRate(), node, CommDataType_Names::DownlinkDataRate_Name);
    }
    if (accessor.hasDownlinkFrequency()) {
      extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getDownlinkFrequency(), node, CommDataType_Names::DownlinkFrequency_Name);
    }
    if (accessor.hasCommSpecificData()) {
      CommSpecificRequestDataEXT::serialize(accessor.getCommSpecificData(), node, CommDataType_Names::CommSpecificData_Name);
    }
    if (createNode) {
      propTree.add_child(generatedNodeName, node);
    }
  } else {
    extxml_uci::util::DerivedTypesSerializer::serialize(accessor, propTree, nodeName, createNode);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

