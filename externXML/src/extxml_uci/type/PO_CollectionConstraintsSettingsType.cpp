/** @file PO_CollectionConstraintsSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/PO_CollectionConstraintsSettingsType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/PO_AngleConstraintControlsType.h"
#include "extxml_uci/type/PO_CollectionPatternConstraintControlsType.h"
#include "extxml_uci/type/PO_GimbalOrientationConstraintType.h"
#include "extxml_uci/type/PO_SlantRangeConstraintControlsType.h"
#include "extxml_uci/type/PO_SweepSpeedConstraintControlsType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/PO_CollectionConstraintsSettingsType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PO_CollectionConstraintsSettingsType_Names {

constexpr const char* Extern_Type_Name{"PO_CollectionConstraintsSettingsType"};
constexpr const char* MapAngle_Name{"MapAngle"};
constexpr const char* GrazingAngle_Name{"GrazingAngle"};
constexpr const char* LookAngle_Name{"LookAngle"};
constexpr const char* ElevationAngle_Name{"ElevationAngle"};
constexpr const char* SlantRange_Name{"SlantRange"};
constexpr const char* CollectionPattern_Name{"CollectionPattern"};
constexpr const char* SunElevAngles_Name{"SunElevAngles"};
constexpr const char* SunAzimuthAngles_Name{"SunAzimuthAngles"};
constexpr const char* SweepSpeed_Name{"SweepSpeed"};
constexpr const char* GimbalOrientation_Name{"GimbalOrientation"};

} // namespace PO_CollectionConstraintsSettingsType_Names

bool PO_CollectionConstraintsSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_CollectionConstraintsSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_CollectionConstraintsSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::MapAngle_Name) {
      PO_AngleConstraintControlsType::deserialize(valueType.second, accessor.enableMapAngle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::GrazingAngle_Name) {
      PO_AngleConstraintControlsType::deserialize(valueType.second, accessor.enableGrazingAngle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::LookAngle_Name) {
      PO_AngleConstraintControlsType::deserialize(valueType.second, accessor.enableLookAngle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::ElevationAngle_Name) {
      PO_AngleConstraintControlsType::deserialize(valueType.second, accessor.enableElevationAngle(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::SlantRange_Name) {
      PO_SlantRangeConstraintControlsType::deserialize(valueType.second, accessor.enableSlantRange(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::CollectionPattern_Name) {
      PO_CollectionPatternConstraintControlsType::deserialize(valueType.second, accessor.enableCollectionPattern(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::SunElevAngles_Name) {
      PO_AngleConstraintControlsType::deserialize(valueType.second, accessor.enableSunElevAngles(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::SunAzimuthAngles_Name) {
      PO_AngleConstraintControlsType::deserialize(valueType.second, accessor.enableSunAzimuthAngles(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::SweepSpeed_Name) {
      PO_SweepSpeedConstraintControlsType::deserialize(valueType.second, accessor.enableSweepSpeed(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_CollectionConstraintsSettingsType_Names::GimbalOrientation_Name) {
      PO_GimbalOrientationConstraintType::deserialize(valueType.second, accessor.enableGimbalOrientation(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string PO_CollectionConstraintsSettingsType::serialize(const uci::type::PO_CollectionConstraintsSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PO_CollectionConstraintsSettingsType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, PO_CollectionConstraintsSettingsType_Names::Extern_Type_Name);
  }
  if (accessor.hasMapAngle()) {
    PO_AngleConstraintControlsType::serialize(accessor.getMapAngle(), node, PO_CollectionConstraintsSettingsType_Names::MapAngle_Name);
  }
  if (accessor.hasGrazingAngle()) {
    PO_AngleConstraintControlsType::serialize(accessor.getGrazingAngle(), node, PO_CollectionConstraintsSettingsType_Names::GrazingAngle_Name);
  }
  if (accessor.hasLookAngle()) {
    PO_AngleConstraintControlsType::serialize(accessor.getLookAngle(), node, PO_CollectionConstraintsSettingsType_Names::LookAngle_Name);
  }
  if (accessor.hasElevationAngle()) {
    PO_AngleConstraintControlsType::serialize(accessor.getElevationAngle(), node, PO_CollectionConstraintsSettingsType_Names::ElevationAngle_Name);
  }
  if (accessor.hasSlantRange()) {
    PO_SlantRangeConstraintControlsType::serialize(accessor.getSlantRange(), node, PO_CollectionConstraintsSettingsType_Names::SlantRange_Name);
  }
  if (accessor.hasCollectionPattern()) {
    PO_CollectionPatternConstraintControlsType::serialize(accessor.getCollectionPattern(), node, PO_CollectionConstraintsSettingsType_Names::CollectionPattern_Name);
  }
  if (accessor.hasSunElevAngles()) {
    PO_AngleConstraintControlsType::serialize(accessor.getSunElevAngles(), node, PO_CollectionConstraintsSettingsType_Names::SunElevAngles_Name);
  }
  if (accessor.hasSunAzimuthAngles()) {
    PO_AngleConstraintControlsType::serialize(accessor.getSunAzimuthAngles(), node, PO_CollectionConstraintsSettingsType_Names::SunAzimuthAngles_Name);
  }
  if (accessor.hasSweepSpeed()) {
    PO_SweepSpeedConstraintControlsType::serialize(accessor.getSweepSpeed(), node, PO_CollectionConstraintsSettingsType_Names::SweepSpeed_Name);
  }
  if (accessor.hasGimbalOrientation()) {
    PO_GimbalOrientationConstraintType::serialize(accessor.getGimbalOrientation(), node, PO_CollectionConstraintsSettingsType_Names::GimbalOrientation_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

