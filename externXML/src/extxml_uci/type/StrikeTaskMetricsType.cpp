/** @file StrikeTaskMetricsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/StrikeTaskMetricsType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/BDI_CollectionType.h"
#include "extxml_uci/type/StrikeTaskMetricsTargetingType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/StrikeTaskMetricsType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace StrikeTaskMetricsType_Names {

constexpr const char* Extern_Type_Name{"StrikeTaskMetricsType"};
constexpr const char* NumWeaponsReleased_Name{"NumWeaponsReleased"};
constexpr const char* Targeting_Name{"Targeting"};
constexpr const char* BDI_Collection_Name{"BDI_Collection"};

} // namespace StrikeTaskMetricsType_Names

bool StrikeTaskMetricsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::StrikeTaskMetricsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = StrikeTaskMetricsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + StrikeTaskMetricsType_Names::NumWeaponsReleased_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumWeaponsReleased(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + StrikeTaskMetricsType_Names::Targeting_Name) {
      StrikeTaskMetricsTargetingType::deserialize(valueType.second, accessor.enableTargeting(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + StrikeTaskMetricsType_Names::BDI_Collection_Name) {
      BDI_CollectionType::deserialize(valueType.second, accessor.enableBDI_Collection(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string StrikeTaskMetricsType::serialize(const uci::type::StrikeTaskMetricsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? StrikeTaskMetricsType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, StrikeTaskMetricsType_Names::Extern_Type_Name);
  }
  extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumWeaponsReleased(), node, StrikeTaskMetricsType_Names::NumWeaponsReleased_Name);
  if (accessor.hasTargeting()) {
    StrikeTaskMetricsTargetingType::serialize(accessor.getTargeting(), node, StrikeTaskMetricsType_Names::Targeting_Name);
  }
  if (accessor.hasBDI_Collection()) {
    BDI_CollectionType::serialize(accessor.getBDI_Collection(), node, StrikeTaskMetricsType_Names::BDI_Collection_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

