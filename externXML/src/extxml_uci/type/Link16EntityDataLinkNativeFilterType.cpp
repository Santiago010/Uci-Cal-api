/** @file Link16EntityDataLinkNativeFilterType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/Link16EntityDataLinkNativeFilterType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/DataLinkNativeFilterPET.h"
#include "extxml_uci/type/EntityAssignmentType.h"
#include "extxml_uci/type/GatewayLink16ConfigurationAreaType.h"
#include "extxml_uci/type/GatewayLink16ConfigurationClassEnum.h"
#include "extxml_uci/type/GatewayLink16ConfigurationEnvironmentType.h"
#include "extxml_uci/type/GatewayLink16ConfigurationIdentityType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/Link16EntityDataLinkNativeFilterType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace Link16EntityDataLinkNativeFilterType_Names {

constexpr const char* Extern_Type_Name{"Link16EntityDataLinkNativeFilterType"};
constexpr const char* GatewayClass_Name{"GatewayClass"};
constexpr const char* SpecialProcessingIndicator_Name{"SpecialProcessingIndicator"};
constexpr const char* SimulationIndicator_Name{"SimulationIndicator"};
constexpr const char* TargetSorting12_6_Name{"TargetSorting12_6"};
constexpr const char* Track3X_Name{"Track3X"};
constexpr const char* Link16NPG_Name{"Link16NPG"};
constexpr const char* GeographicArea_Name{"GeographicArea"};
constexpr const char* Number_Name{"Number"};
constexpr const char* Environment_Name{"Environment"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* EntityIdentification_Name{"EntityIdentification"};

} // namespace Link16EntityDataLinkNativeFilterType_Names

bool Link16EntityDataLinkNativeFilterType::deserialize(const boost::property_tree::ptree& propTree, uci::type::Link16EntityDataLinkNativeFilterType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = Link16EntityDataLinkNativeFilterType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::GatewayClass_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getGatewayClass().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::SpecialProcessingIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSpecialProcessingIndicator(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::SimulationIndicator_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setSimulationIndicator(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::TargetSorting12_6_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTargetSorting12_6(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::Track3X_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTrack3X(extxml_uci::util::SerializationHelpers::deserializeBoolean(*value));
      }
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::Link16NPG_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::Link16EntityDataLinkNativeFilterType::Link16NPG& boundedList = accessor.getLink16NPG();
        const uci::type::Link16EntityDataLinkNativeFilterType::Link16NPG::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        boundedList.at(boundedListSize).setUnsignedShortValue(extxml_uci::util::SerializationHelpers::deserializeUnsignedShort(*value));
      }
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::GeographicArea_Name) {
      GatewayLink16ConfigurationAreaType::deserialize(valueType.second, accessor.enableGeographicArea(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::Number_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setNumber(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::Environment_Name) {
      GatewayLink16ConfigurationEnvironmentType::deserialize(valueType.second, accessor.enableEnvironment(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::Identity_Name) {
      GatewayLink16ConfigurationIdentityType::deserialize(valueType.second, accessor.enableIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Link16EntityDataLinkNativeFilterType_Names::EntityIdentification_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::Link16EntityDataLinkNativeFilterType::EntityIdentification& boundedList = accessor.getEntityIdentification();
        const uci::type::Link16EntityDataLinkNativeFilterType::EntityIdentification::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        EntityAssignmentType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  DataLinkNativeFilterPET::deserialize(node, accessor, nodeName, nsPrefix);
  return true;
}

std::string Link16EntityDataLinkNativeFilterType::serialize(const uci::type::Link16EntityDataLinkNativeFilterType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? Link16EntityDataLinkNativeFilterType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, Link16EntityDataLinkNativeFilterType_Names::Extern_Type_Name);
  }
  DataLinkNativeFilterPET::serialize(accessor, node, "", false, false, false);
  GatewayLink16ConfigurationClassEnum::serialize(accessor.getGatewayClass(), node, Link16EntityDataLinkNativeFilterType_Names::GatewayClass_Name, false);
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getSpecialProcessingIndicator(), node, Link16EntityDataLinkNativeFilterType_Names::SpecialProcessingIndicator_Name);
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getSimulationIndicator(), node, Link16EntityDataLinkNativeFilterType_Names::SimulationIndicator_Name);
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getTargetSorting12_6(), node, Link16EntityDataLinkNativeFilterType_Names::TargetSorting12_6_Name);
  extxml_uci::util::SerializationHelpers::serializeBoolean(accessor.getTrack3X(), node, Link16EntityDataLinkNativeFilterType_Names::Track3X_Name);
  {
    const uci::type::Link16EntityDataLinkNativeFilterType::Link16NPG& boundedList = accessor.getLink16NPG();
    for (uci::type::Link16EntityDataLinkNativeFilterType::Link16NPG::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      extxml_uci::util::SerializationHelpers::serializeUnsignedShort(boundedList.at(i), node, Link16EntityDataLinkNativeFilterType_Names::Link16NPG_Name);
    }
  }
  if (accessor.hasGeographicArea()) {
    GatewayLink16ConfigurationAreaType::serialize(accessor.getGeographicArea(), node, Link16EntityDataLinkNativeFilterType_Names::GeographicArea_Name);
  }
  if (accessor.hasNumber()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getNumber(), node, Link16EntityDataLinkNativeFilterType_Names::Number_Name);
  }
  if (accessor.hasEnvironment()) {
    GatewayLink16ConfigurationEnvironmentType::serialize(accessor.getEnvironment(), node, Link16EntityDataLinkNativeFilterType_Names::Environment_Name);
  }
  if (accessor.hasIdentity()) {
    GatewayLink16ConfigurationIdentityType::serialize(accessor.getIdentity(), node, Link16EntityDataLinkNativeFilterType_Names::Identity_Name);
  }
  {
    const uci::type::Link16EntityDataLinkNativeFilterType::EntityIdentification& boundedList = accessor.getEntityIdentification();
    for (uci::type::Link16EntityDataLinkNativeFilterType::EntityIdentification::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      EntityAssignmentType::serialize(boundedList.at(i), node, Link16EntityDataLinkNativeFilterType_Names::EntityIdentification_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

