/** @file Shape3D_ChoiceType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/Shape3D_ChoiceType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/ArcVolumeType.h"
#include "extxml_uci/type/ConeType.h"
#include "extxml_uci/type/CylinderType.h"
#include "extxml_uci/type/DomeType.h"
#include "extxml_uci/type/EllipsoidType.h"
#include "extxml_uci/type/IncRaPeriodVolumeType.h"
#include "extxml_uci/type/RectangularConeType.h"
#include "extxml_uci/type/SphereType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/Shape3D_ChoiceType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace Shape3D_ChoiceType_Names {

constexpr const char* Extern_Type_Name{"Shape3D_ChoiceType"};
constexpr const char* Sphere_Name{"Sphere"};
constexpr const char* Dome_Name{"Dome"};
constexpr const char* Ellipsoid_Name{"Ellipsoid"};
constexpr const char* Cylinder_Name{"Cylinder"};
constexpr const char* Cone_Name{"Cone"};
constexpr const char* RectangularCone_Name{"RectangularCone"};
constexpr const char* ArcVolume_Name{"ArcVolume"};
constexpr const char* IncRaPeriodVolume_Name{"IncRaPeriodVolume"};

} // namespace Shape3D_ChoiceType_Names

bool Shape3D_ChoiceType::deserialize(const boost::property_tree::ptree& propTree, uci::type::Shape3D_ChoiceType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = Shape3D_ChoiceType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + Shape3D_ChoiceType_Names::Sphere_Name) {
      SphereType::deserialize(valueType.second, accessor.chooseSphere(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Shape3D_ChoiceType_Names::Dome_Name) {
      DomeType::deserialize(valueType.second, accessor.chooseDome(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Shape3D_ChoiceType_Names::Ellipsoid_Name) {
      EllipsoidType::deserialize(valueType.second, accessor.chooseEllipsoid(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Shape3D_ChoiceType_Names::Cylinder_Name) {
      CylinderType::deserialize(valueType.second, accessor.chooseCylinder(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Shape3D_ChoiceType_Names::Cone_Name) {
      ConeType::deserialize(valueType.second, accessor.chooseCone(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Shape3D_ChoiceType_Names::RectangularCone_Name) {
      RectangularConeType::deserialize(valueType.second, accessor.chooseRectangularCone(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Shape3D_ChoiceType_Names::ArcVolume_Name) {
      ArcVolumeType::deserialize(valueType.second, accessor.chooseArcVolume(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + Shape3D_ChoiceType_Names::IncRaPeriodVolume_Name) {
      IncRaPeriodVolumeType::deserialize(valueType.second, accessor.chooseIncRaPeriodVolume(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string Shape3D_ChoiceType::serialize(const uci::type::Shape3D_ChoiceType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? Shape3D_ChoiceType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, Shape3D_ChoiceType_Names::Extern_Type_Name);
  }
  if (accessor.isSphere()) {
    SphereType::serialize(accessor.getSphere(), node, Shape3D_ChoiceType_Names::Sphere_Name);
  } else if (accessor.isDome()) {
    DomeType::serialize(accessor.getDome(), node, Shape3D_ChoiceType_Names::Dome_Name);
  } else if (accessor.isEllipsoid()) {
    EllipsoidType::serialize(accessor.getEllipsoid(), node, Shape3D_ChoiceType_Names::Ellipsoid_Name);
  } else if (accessor.isCylinder()) {
    CylinderType::serialize(accessor.getCylinder(), node, Shape3D_ChoiceType_Names::Cylinder_Name);
  } else if (accessor.isCone()) {
    ConeType::serialize(accessor.getCone(), node, Shape3D_ChoiceType_Names::Cone_Name);
  } else if (accessor.isRectangularCone()) {
    RectangularConeType::serialize(accessor.getRectangularCone(), node, Shape3D_ChoiceType_Names::RectangularCone_Name);
  } else if (accessor.isArcVolume()) {
    ArcVolumeType::serialize(accessor.getArcVolume(), node, Shape3D_ChoiceType_Names::ArcVolume_Name);
  } else if (accessor.isIncRaPeriodVolume()) {
    IncRaPeriodVolumeType::serialize(accessor.getIncRaPeriodVolume(), node, Shape3D_ChoiceType_Names::IncRaPeriodVolume_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

