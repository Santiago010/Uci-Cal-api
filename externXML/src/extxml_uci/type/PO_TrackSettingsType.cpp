/** @file PO_TrackSettingsType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/PO_TrackSettingsType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/IdentityBasicType.h"
#include "extxml_uci/type/IncreaseDecreaseEnum.h"
#include "extxml_uci/type/LOS_VariableB_Type.h"
#include "extxml_uci/type/PO_AirTargetVolumeType.h"
#include "extxml_uci/type/PO_CoastSettingValueType.h"
#include "extxml_uci/type/PO_LockPersistenceEnum.h"
#include "extxml_uci/type/PO_TrackCommandEnum.h"
#include "extxml_uci/type/TrackOptionsID_Type.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/PO_TrackSettingsType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace PO_TrackSettingsType_Names {

constexpr const char* Extern_Type_Name{"PO_TrackSettingsType"};
constexpr const char* TrackOptionID_Name{"TrackOptionID"};
constexpr const char* Mode_Name{"Mode"};
constexpr const char* TrackArea_Name{"TrackArea"};
constexpr const char* LockPersistence_Name{"LockPersistence"};
constexpr const char* ATR_Filter_Name{"ATR_Filter"};
constexpr const char* OffsetTrackSetting_Name{"OffsetTrackSetting"};
constexpr const char* ObservedEntityThreshold_Name{"ObservedEntityThreshold"};
constexpr const char* TrackingRange_Name{"TrackingRange"};
constexpr const char* CoastSetting_Name{"CoastSetting"};
constexpr const char* BlankingVolume_Name{"BlankingVolume"};

} // namespace PO_TrackSettingsType_Names

bool PO_TrackSettingsType::deserialize(const boost::property_tree::ptree& propTree, uci::type::PO_TrackSettingsType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = PO_TrackSettingsType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + PO_TrackSettingsType_Names::TrackOptionID_Name) {
      TrackOptionsID_Type::deserialize(valueType.second, accessor.getTrackOptionID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TrackSettingsType_Names::Mode_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableMode().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TrackSettingsType_Names::TrackArea_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableTrackArea().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TrackSettingsType_Names::LockPersistence_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableLockPersistence().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + PO_TrackSettingsType_Names::ATR_Filter_Name) {
      IdentityBasicType::deserialize(valueType.second, accessor.enableATR_Filter(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TrackSettingsType_Names::OffsetTrackSetting_Name) {
      LOS_VariableB_Type::deserialize(valueType.second, accessor.enableOffsetTrackSetting(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + PO_TrackSettingsType_Names::ObservedEntityThreshold_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setObservedEntityThreshold(extxml_uci::util::SerializationHelpers::deserializeDuration(*value));
      }
    } else if (valueType.first == nsPrefix + PO_TrackSettingsType_Names::TrackingRange_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setTrackingRange(extxml_uci::util::SerializationHelpers::deserializeDouble(*value));
      }
    } else if (valueType.first == nsPrefix + PO_TrackSettingsType_Names::CoastSetting_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::PO_TrackSettingsType::CoastSetting& boundedList = accessor.getCoastSetting();
        const uci::type::PO_TrackSettingsType::CoastSetting::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        PO_CoastSettingValueType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + PO_TrackSettingsType_Names::BlankingVolume_Name) {
      PO_AirTargetVolumeType::deserialize(valueType.second, accessor.enableBlankingVolume(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string PO_TrackSettingsType::serialize(const uci::type::PO_TrackSettingsType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? PO_TrackSettingsType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, PO_TrackSettingsType_Names::Extern_Type_Name);
  }
  TrackOptionsID_Type::serialize(accessor.getTrackOptionID(), node, PO_TrackSettingsType_Names::TrackOptionID_Name);
  if (accessor.hasMode()) {
    PO_TrackCommandEnum::serialize(accessor.getMode(), node, PO_TrackSettingsType_Names::Mode_Name, false);
  }
  if (accessor.hasTrackArea()) {
    IncreaseDecreaseEnum::serialize(accessor.getTrackArea(), node, PO_TrackSettingsType_Names::TrackArea_Name, false);
  }
  if (accessor.hasLockPersistence()) {
    PO_LockPersistenceEnum::serialize(accessor.getLockPersistence(), node, PO_TrackSettingsType_Names::LockPersistence_Name, false);
  }
  if (accessor.hasATR_Filter()) {
    IdentityBasicType::serialize(accessor.getATR_Filter(), node, PO_TrackSettingsType_Names::ATR_Filter_Name);
  }
  if (accessor.hasOffsetTrackSetting()) {
    LOS_VariableB_Type::serialize(accessor.getOffsetTrackSetting(), node, PO_TrackSettingsType_Names::OffsetTrackSetting_Name);
  }
  if (accessor.hasObservedEntityThreshold()) {
    extxml_uci::util::SerializationHelpers::serializeDuration(accessor.getObservedEntityThreshold(), node, PO_TrackSettingsType_Names::ObservedEntityThreshold_Name);
  }
  if (accessor.hasTrackingRange()) {
    extxml_uci::util::SerializationHelpers::serializeDouble(accessor.getTrackingRange(), node, PO_TrackSettingsType_Names::TrackingRange_Name);
  }
  {
    const uci::type::PO_TrackSettingsType::CoastSetting& boundedList = accessor.getCoastSetting();
    for (uci::type::PO_TrackSettingsType::CoastSetting::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      PO_CoastSettingValueType::serialize(boundedList.at(i), node, PO_TrackSettingsType_Names::CoastSetting_Name);
    }
  }
  if (accessor.hasBlankingVolume()) {
    PO_AirTargetVolumeType::serialize(accessor.getBlankingVolume(), node, PO_TrackSettingsType_Names::BlankingVolume_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

