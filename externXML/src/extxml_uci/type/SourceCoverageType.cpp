/** @file SourceCoverageType.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/SourceCoverageType.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/AngleHalfPairType.h"
#include "extxml_uci/type/AnglePairType.h"
#include "extxml_uci/type/AngleRateRangeType.h"
#include "extxml_uci/type/CapabilityCoverageAreaID_Type.h"
#include "extxml_uci/type/DoubleMinMaxType.h"
#include "extxml_uci/type/LOS_MeasurementEnum.h"
#include "extxml_uci/type/SlantRangeConstraintsType.h"
#include "extxml_uci/type/SpeedRangeType.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/SourceCoverageType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SourceCoverageType_Names {

constexpr const char* Extern_Type_Name{"SourceCoverageType"};
constexpr const char* FOV_ReferenceFrame_Name{"FOV_ReferenceFrame"};
constexpr const char* RangeLimits_Name{"RangeLimits"};
constexpr const char* RangeRateLimits_Name{"RangeRateLimits"};
constexpr const char* AzimuthLimits_Name{"AzimuthLimits"};
constexpr const char* ElevationLimits_Name{"ElevationLimits"};
constexpr const char* AzimuthAngleRateLimits_Name{"AzimuthAngleRateLimits"};
constexpr const char* ElevationAngleRateLimits_Name{"ElevationAngleRateLimits"};
constexpr const char* CosconeY_RangeLimits_Name{"CosconeY_RangeLimits"};
constexpr const char* CosconeZ_RangeLimits_Name{"CosconeZ_RangeLimits"};
constexpr const char* CosconeY_RateRangeLimits_Name{"CosconeY_RateRangeLimits"};
constexpr const char* CosconeZ_RateRangeLimits_Name{"CosconeZ_RateRangeLimits"};
constexpr const char* CapabilityCoverageAreaID_Name{"CapabilityCoverageAreaID"};

} // namespace SourceCoverageType_Names

bool SourceCoverageType::deserialize(const boost::property_tree::ptree& propTree, uci::type::SourceCoverageType& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SourceCoverageType_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SourceCoverageType_Names::FOV_ReferenceFrame_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFOV_ReferenceFrame().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SourceCoverageType_Names::RangeLimits_Name) {
      SlantRangeConstraintsType::deserialize(valueType.second, accessor.enableRangeLimits(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SourceCoverageType_Names::RangeRateLimits_Name) {
      SpeedRangeType::deserialize(valueType.second, accessor.enableRangeRateLimits(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SourceCoverageType_Names::AzimuthLimits_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableAzimuthLimits(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SourceCoverageType_Names::ElevationLimits_Name) {
      AngleHalfPairType::deserialize(valueType.second, accessor.enableElevationLimits(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SourceCoverageType_Names::AzimuthAngleRateLimits_Name) {
      AngleRateRangeType::deserialize(valueType.second, accessor.enableAzimuthAngleRateLimits(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SourceCoverageType_Names::ElevationAngleRateLimits_Name) {
      AngleRateRangeType::deserialize(valueType.second, accessor.enableElevationAngleRateLimits(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SourceCoverageType_Names::CosconeY_RangeLimits_Name) {
      DoubleMinMaxType::deserialize(valueType.second, accessor.enableCosconeY_RangeLimits(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SourceCoverageType_Names::CosconeZ_RangeLimits_Name) {
      DoubleMinMaxType::deserialize(valueType.second, accessor.enableCosconeZ_RangeLimits(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SourceCoverageType_Names::CosconeY_RateRangeLimits_Name) {
      DoubleMinMaxType::deserialize(valueType.second, accessor.enableCosconeY_RateRangeLimits(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SourceCoverageType_Names::CosconeZ_RateRangeLimits_Name) {
      DoubleMinMaxType::deserialize(valueType.second, accessor.enableCosconeZ_RateRangeLimits(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SourceCoverageType_Names::CapabilityCoverageAreaID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SourceCoverageType::CapabilityCoverageAreaID& boundedList = accessor.getCapabilityCoverageAreaID();
        const uci::type::SourceCoverageType::CapabilityCoverageAreaID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CapabilityCoverageAreaID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    }
  }
  return true;
}

std::string SourceCoverageType::serialize(const uci::type::SourceCoverageType& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SourceCoverageType_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, SourceCoverageType_Names::Extern_Type_Name);
  }
  if (accessor.hasFOV_ReferenceFrame()) {
    LOS_MeasurementEnum::serialize(accessor.getFOV_ReferenceFrame(), node, SourceCoverageType_Names::FOV_ReferenceFrame_Name, false);
  }
  if (accessor.hasRangeLimits()) {
    SlantRangeConstraintsType::serialize(accessor.getRangeLimits(), node, SourceCoverageType_Names::RangeLimits_Name);
  }
  if (accessor.hasRangeRateLimits()) {
    SpeedRangeType::serialize(accessor.getRangeRateLimits(), node, SourceCoverageType_Names::RangeRateLimits_Name);
  }
  if (accessor.hasAzimuthLimits()) {
    AnglePairType::serialize(accessor.getAzimuthLimits(), node, SourceCoverageType_Names::AzimuthLimits_Name);
  }
  if (accessor.hasElevationLimits()) {
    AngleHalfPairType::serialize(accessor.getElevationLimits(), node, SourceCoverageType_Names::ElevationLimits_Name);
  }
  if (accessor.hasAzimuthAngleRateLimits()) {
    AngleRateRangeType::serialize(accessor.getAzimuthAngleRateLimits(), node, SourceCoverageType_Names::AzimuthAngleRateLimits_Name);
  }
  if (accessor.hasElevationAngleRateLimits()) {
    AngleRateRangeType::serialize(accessor.getElevationAngleRateLimits(), node, SourceCoverageType_Names::ElevationAngleRateLimits_Name);
  }
  if (accessor.hasCosconeY_RangeLimits()) {
    DoubleMinMaxType::serialize(accessor.getCosconeY_RangeLimits(), node, SourceCoverageType_Names::CosconeY_RangeLimits_Name);
  }
  if (accessor.hasCosconeZ_RangeLimits()) {
    DoubleMinMaxType::serialize(accessor.getCosconeZ_RangeLimits(), node, SourceCoverageType_Names::CosconeZ_RangeLimits_Name);
  }
  if (accessor.hasCosconeY_RateRangeLimits()) {
    DoubleMinMaxType::serialize(accessor.getCosconeY_RateRangeLimits(), node, SourceCoverageType_Names::CosconeY_RateRangeLimits_Name);
  }
  if (accessor.hasCosconeZ_RateRangeLimits()) {
    DoubleMinMaxType::serialize(accessor.getCosconeZ_RateRangeLimits(), node, SourceCoverageType_Names::CosconeZ_RateRangeLimits_Name);
  }
  {
    const uci::type::SourceCoverageType::CapabilityCoverageAreaID& boundedList = accessor.getCapabilityCoverageAreaID();
    for (uci::type::SourceCoverageType::CapabilityCoverageAreaID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CapabilityCoverageAreaID_Type::serialize(boundedList.at(i), node, SourceCoverageType_Names::CapabilityCoverageAreaID_Name);
    }
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

