/** @file SystemStatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:19 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/SystemStatusMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/ActivityByType.h"
#include "extxml_uci/type/CapabilityID_Type.h"
#include "extxml_uci/type/EntityFusionEligibilityEnum.h"
#include "extxml_uci/type/OperatorID_Type.h"
#include "extxml_uci/type/PlatformStatusType.h"
#include "extxml_uci/type/ServiceID_Type.h"
#include "extxml_uci/type/StrengthType.h"
#include "extxml_uci/type/SubsystemID_Type.h"
#include "extxml_uci/type/SystemCommunicationsType.h"
#include "extxml_uci/type/SystemID_Type.h"
#include "extxml_uci/type/SystemIdentityType.h"
#include "extxml_uci/type/SystemSourceEnum.h"
#include "extxml_uci/type/SystemStateEnum.h"
#include "extxml_uci/type/VoiceControlType.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/SystemStatusMDT.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace SystemStatusMDT_Names {

constexpr const char* Extern_Type_Name{"SystemStatusMDT"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* SystemState_Name{"SystemState"};
constexpr const char* Source_Name{"Source"};
constexpr const char* FusionEligibility_Name{"FusionEligibility"};
constexpr const char* Model_Name{"Model"};
constexpr const char* Identity_Name{"Identity"};
constexpr const char* Communications_Name{"Communications"};
constexpr const char* OperatorID_Name{"OperatorID"};
constexpr const char* SubsystemID_Name{"SubsystemID"};
constexpr const char* CapabilityID_Name{"CapabilityID"};
constexpr const char* ServiceID_Name{"ServiceID"};
constexpr const char* PlatformStatus_Name{"PlatformStatus"};
constexpr const char* VoiceControl_Name{"VoiceControl"};
constexpr const char* ActivityBy_Name{"ActivityBy"};
constexpr const char* Strength_Name{"Strength"};

} // namespace SystemStatusMDT_Names

bool SystemStatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::SystemStatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = SystemStatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + SystemStatusMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.getSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemStatusMDT_Names::SystemState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSystemState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SystemStatusMDT_Names::Source_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getSource().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SystemStatusMDT_Names::FusionEligibility_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableFusionEligibility().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + SystemStatusMDT_Names::Model_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setModel(*value);
      }
    } else if (valueType.first == nsPrefix + SystemStatusMDT_Names::Identity_Name) {
      SystemIdentityType::deserialize(valueType.second, accessor.enableIdentity(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemStatusMDT_Names::Communications_Name) {
      SystemCommunicationsType::deserialize(valueType.second, accessor.getCommunications(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemStatusMDT_Names::OperatorID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SystemStatusMDT::OperatorID& boundedList = accessor.getOperatorID();
        const uci::type::SystemStatusMDT::OperatorID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        OperatorID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SystemStatusMDT_Names::SubsystemID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SystemStatusMDT::SubsystemID& boundedList = accessor.getSubsystemID();
        const uci::type::SystemStatusMDT::SubsystemID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        SubsystemID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SystemStatusMDT_Names::CapabilityID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SystemStatusMDT::CapabilityID& boundedList = accessor.getCapabilityID();
        const uci::type::SystemStatusMDT::CapabilityID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        CapabilityID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SystemStatusMDT_Names::ServiceID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SystemStatusMDT::ServiceID& boundedList = accessor.getServiceID();
        const uci::type::SystemStatusMDT::ServiceID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ServiceID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SystemStatusMDT_Names::PlatformStatus_Name) {
      PlatformStatusType::deserialize(valueType.second, accessor.enablePlatformStatus(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemStatusMDT_Names::VoiceControl_Name) {
      VoiceControlType::deserialize(valueType.second, accessor.enableVoiceControl(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + SystemStatusMDT_Names::ActivityBy_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::SystemStatusMDT::ActivityBy& boundedList = accessor.getActivityBy();
        const uci::type::SystemStatusMDT::ActivityBy::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ActivityByType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + SystemStatusMDT_Names::Strength_Name) {
      StrengthType::deserialize(valueType.second, accessor.enableStrength(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string SystemStatusMDT::serialize(const uci::type::SystemStatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? SystemStatusMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, SystemStatusMDT_Names::Extern_Type_Name);
  }
  SystemID_Type::serialize(accessor.getSystemID(), node, SystemStatusMDT_Names::SystemID_Name);
  SystemStateEnum::serialize(accessor.getSystemState(), node, SystemStatusMDT_Names::SystemState_Name, false);
  SystemSourceEnum::serialize(accessor.getSource(), node, SystemStatusMDT_Names::Source_Name, false);
  if (accessor.hasFusionEligibility()) {
    EntityFusionEligibilityEnum::serialize(accessor.getFusionEligibility(), node, SystemStatusMDT_Names::FusionEligibility_Name, false);
  }
  if (accessor.hasModel()) {
    extxml_uci::util::SerializationHelpers::serializeString(accessor.getModel(), node, SystemStatusMDT_Names::Model_Name);
  }
  if (accessor.hasIdentity()) {
    SystemIdentityType::serialize(accessor.getIdentity(), node, SystemStatusMDT_Names::Identity_Name);
  }
  SystemCommunicationsType::serialize(accessor.getCommunications(), node, SystemStatusMDT_Names::Communications_Name);
  {
    const uci::type::SystemStatusMDT::OperatorID& boundedList = accessor.getOperatorID();
    for (uci::type::SystemStatusMDT::OperatorID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      OperatorID_Type::serialize(boundedList.at(i), node, SystemStatusMDT_Names::OperatorID_Name);
    }
  }
  {
    const uci::type::SystemStatusMDT::SubsystemID& boundedList = accessor.getSubsystemID();
    for (uci::type::SystemStatusMDT::SubsystemID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      SubsystemID_Type::serialize(boundedList.at(i), node, SystemStatusMDT_Names::SubsystemID_Name);
    }
  }
  {
    const uci::type::SystemStatusMDT::CapabilityID& boundedList = accessor.getCapabilityID();
    for (uci::type::SystemStatusMDT::CapabilityID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      CapabilityID_Type::serialize(boundedList.at(i), node, SystemStatusMDT_Names::CapabilityID_Name);
    }
  }
  {
    const uci::type::SystemStatusMDT::ServiceID& boundedList = accessor.getServiceID();
    for (uci::type::SystemStatusMDT::ServiceID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ServiceID_Type::serialize(boundedList.at(i), node, SystemStatusMDT_Names::ServiceID_Name);
    }
  }
  if (accessor.hasPlatformStatus()) {
    PlatformStatusType::serialize(accessor.getPlatformStatus(), node, SystemStatusMDT_Names::PlatformStatus_Name);
  }
  if (accessor.hasVoiceControl()) {
    VoiceControlType::serialize(accessor.getVoiceControl(), node, SystemStatusMDT_Names::VoiceControl_Name);
  }
  {
    const uci::type::SystemStatusMDT::ActivityBy& boundedList = accessor.getActivityBy();
    for (uci::type::SystemStatusMDT::ActivityBy::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ActivityByType::serialize(boundedList.at(i), node, SystemStatusMDT_Names::ActivityBy_Name);
    }
  }
  if (accessor.hasStrength()) {
    StrengthType::serialize(accessor.getStrength(), node, SystemStatusMDT_Names::Strength_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

