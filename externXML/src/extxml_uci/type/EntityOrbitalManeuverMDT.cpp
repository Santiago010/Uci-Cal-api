/** @file EntityOrbitalManeuverMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/EntityOrbitalManeuverMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/CapabilityID_Type.h"
#include "extxml_uci/type/ConfidenceLevelEnum.h"
#include "extxml_uci/type/DateTimeRangeType.h"
#include "extxml_uci/type/EntityID_Type.h"
#include "extxml_uci/type/ManeuverSummaryType.h"
#include "extxml_uci/type/NotificationSourceType.h"
#include "extxml_uci/type/ObservationMeasurementReportID_Type.h"
#include "extxml_uci/type/OrbitalManeuverID_Type.h"
#include "extxml_uci/type/OrbitalManeuverStateEnum.h"
#include "extxml_uci/util/DerivedTypesDeserializer.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/EntityOrbitalManeuverMDT.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace EntityOrbitalManeuverMDT_Names {

constexpr const char* Extern_Type_Name{"EntityOrbitalManeuverMDT"};
constexpr const char* ManeuverID_Name{"ManeuverID"};
constexpr const char* ManeuverState_Name{"ManeuverState"};
constexpr const char* ManeuverStateConfidence_Name{"ManeuverStateConfidence"};
constexpr const char* EntityID_Name{"EntityID"};
constexpr const char* Source_Name{"Source"};
constexpr const char* Maneuver_Name{"Maneuver"};
constexpr const char* DetectionTime_Name{"DetectionTime"};
constexpr const char* StateObservations_Name{"StateObservations"};
constexpr const char* ObservationMeasurementReportID_Name{"ObservationMeasurementReportID"};
constexpr const char* DetectorCapabilityID_Name{"DetectorCapabilityID"};
constexpr const char* ManeuverSolutionIteration_Name{"ManeuverSolutionIteration"};

} // namespace EntityOrbitalManeuverMDT_Names

bool EntityOrbitalManeuverMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::EntityOrbitalManeuverMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = EntityOrbitalManeuverMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::ManeuverID_Name) {
      OrbitalManeuverID_Type::deserialize(valueType.second, accessor.getManeuverID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::ManeuverState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getManeuverState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::ManeuverStateConfidence_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.enableManeuverStateConfidence().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::EntityID_Name) {
      extxml_uci::util::DerivedTypesDeserializer::deserialize(valueType.second, accessor.enableEntityID(extxml_uci::util::SerializationHelpers::checkForTypeAttribute(valueType.second, nsPrefix)), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::Source_Name) {
      NotificationSourceType::deserialize(valueType.second, accessor.enableSource(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::Maneuver_Name) {
      ManeuverSummaryType::deserialize(valueType.second, accessor.enableManeuver(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::DetectionTime_Name) {
      DateTimeRangeType::deserialize(valueType.second, accessor.enableDetectionTime(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::StateObservations_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setStateObservations(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::ObservationMeasurementReportID_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::EntityOrbitalManeuverMDT::ObservationMeasurementReportID& boundedList = accessor.getObservationMeasurementReportID();
        const uci::type::EntityOrbitalManeuverMDT::ObservationMeasurementReportID::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        ObservationMeasurementReportID_Type::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::DetectorCapabilityID_Name) {
      CapabilityID_Type::deserialize(valueType.second, accessor.enableDetectorCapabilityID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + EntityOrbitalManeuverMDT_Names::ManeuverSolutionIteration_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.setManeuverSolutionIteration(extxml_uci::util::SerializationHelpers::deserializeUnsignedInt(*value));
      }
    }
  }
  return true;
}

std::string EntityOrbitalManeuverMDT::serialize(const uci::type::EntityOrbitalManeuverMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? EntityOrbitalManeuverMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, EntityOrbitalManeuverMDT_Names::Extern_Type_Name);
  }
  OrbitalManeuverID_Type::serialize(accessor.getManeuverID(), node, EntityOrbitalManeuverMDT_Names::ManeuverID_Name);
  OrbitalManeuverStateEnum::serialize(accessor.getManeuverState(), node, EntityOrbitalManeuverMDT_Names::ManeuverState_Name, false);
  if (accessor.hasManeuverStateConfidence()) {
    ConfidenceLevelEnum::serialize(accessor.getManeuverStateConfidence(), node, EntityOrbitalManeuverMDT_Names::ManeuverStateConfidence_Name, false);
  }
  EntityID_Type::serialize(accessor.getEntityID(), node, EntityOrbitalManeuverMDT_Names::EntityID_Name);
  if (accessor.hasSource()) {
    NotificationSourceType::serialize(accessor.getSource(), node, EntityOrbitalManeuverMDT_Names::Source_Name);
  }
  if (accessor.hasManeuver()) {
    ManeuverSummaryType::serialize(accessor.getManeuver(), node, EntityOrbitalManeuverMDT_Names::Maneuver_Name);
  }
  if (accessor.hasDetectionTime()) {
    DateTimeRangeType::serialize(accessor.getDetectionTime(), node, EntityOrbitalManeuverMDT_Names::DetectionTime_Name);
  }
  if (accessor.hasStateObservations()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getStateObservations(), node, EntityOrbitalManeuverMDT_Names::StateObservations_Name);
  }
  {
    const uci::type::EntityOrbitalManeuverMDT::ObservationMeasurementReportID& boundedList = accessor.getObservationMeasurementReportID();
    for (uci::type::EntityOrbitalManeuverMDT::ObservationMeasurementReportID::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      ObservationMeasurementReportID_Type::serialize(boundedList.at(i), node, EntityOrbitalManeuverMDT_Names::ObservationMeasurementReportID_Name);
    }
  }
  if (accessor.hasDetectorCapabilityID()) {
    CapabilityID_Type::serialize(accessor.getDetectorCapabilityID(), node, EntityOrbitalManeuverMDT_Names::DetectorCapabilityID_Name);
  }
  if (accessor.hasManeuverSolutionIteration()) {
    extxml_uci::util::SerializationHelpers::serializeUnsignedInt(accessor.getManeuverSolutionIteration(), node, EntityOrbitalManeuverMDT_Names::ManeuverSolutionIteration_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

