/** @file DMPI_StatusMDT.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:18 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/type/DMPI_StatusMDT.h"

#include <string>

#include <boost/optional/optional.hpp>
#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/ActivityPlanReferenceType.h"
#include "extxml_uci/type/DMPI_ID_Type.h"
#include "extxml_uci/type/DMPI_StateEnum.h"
#include "extxml_uci/type/DMPI_StoreStatusType.h"
#include "extxml_uci/type/RoutePlanReferencesType.h"
#include "extxml_uci/type/StrikeStateEnum.h"
#include "extxml_uci/type/SystemID_Type.h"
#include "extxml_uci/type/TaskID_Type.h"
#include "extxml_uci/util/SerializationHelpers.h"
#include "uci/type/DMPI_StatusMDT.h"

/**  */
namespace extxml_uci {

/** The namespace in which all generated data types are declared */
namespace type {

/**  */
namespace DMPI_StatusMDT_Names {

constexpr const char* Extern_Type_Name{"DMPI_StatusMDT"};
constexpr const char* DMPI_ID_Name{"DMPI_ID"};
constexpr const char* DMPI_State_Name{"DMPI_State"};
constexpr const char* DMPI_StrikeState_Name{"DMPI_StrikeState"};
constexpr const char* SystemID_Name{"SystemID"};
constexpr const char* AssociatedRoutePlan_Name{"AssociatedRoutePlan"};
constexpr const char* AssociatedActivityPlan_Name{"AssociatedActivityPlan"};
constexpr const char* StoreStatus_Name{"StoreStatus"};
constexpr const char* TaskID_Name{"TaskID"};

} // namespace DMPI_StatusMDT_Names

bool DMPI_StatusMDT::deserialize(const boost::property_tree::ptree& propTree, uci::type::DMPI_StatusMDT& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  nodeName = DMPI_StatusMDT_Names::Extern_Type_Name;
  const boost::property_tree::ptree& node = (topLevel ? propTree.ordered_begin()->second : propTree);
  for (const boost::property_tree::ptree::value_type& valueType : node.get_child("")) {
    if ((valueType.first == "<xmlattr>") && topLevel) {
      nsPrefix = extxml_uci::util::SerializationHelpers::checkForNamespacePrefix(valueType.second.get_child(""));
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::DMPI_ID_Name) {
      DMPI_ID_Type::deserialize(valueType.second, accessor.getDMPI_ID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::DMPI_State_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getDMPI_State().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::DMPI_StrikeState_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        accessor.getDMPI_StrikeState().setValueFromName(*value);
      }
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::SystemID_Name) {
      SystemID_Type::deserialize(valueType.second, accessor.enableSystemID(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::AssociatedRoutePlan_Name) {
      RoutePlanReferencesType::deserialize(valueType.second, accessor.enableAssociatedRoutePlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::AssociatedActivityPlan_Name) {
      ActivityPlanReferenceType::deserialize(valueType.second, accessor.enableAssociatedActivityPlan(), nodeName, nsPrefix);
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::StoreStatus_Name) {
      if (const boost::optional<std::string> value = valueType.second.get_value_optional<std::string>()) {
        uci::type::DMPI_StatusMDT::StoreStatus& boundedList = accessor.getStoreStatus();
        const uci::type::DMPI_StatusMDT::StoreStatus::size_type boundedListSize{boundedList.size()};
        boundedList.resize(boundedListSize + 1);
        DMPI_StoreStatusType::deserialize(valueType.second, boundedList.at(boundedListSize), nodeName, nsPrefix);
      }
    } else if (valueType.first == nsPrefix + DMPI_StatusMDT_Names::TaskID_Name) {
      TaskID_Type::deserialize(valueType.second, accessor.enableTaskID(), nodeName, nsPrefix);
    }
  }
  return true;
}

std::string DMPI_StatusMDT::serialize(const uci::type::DMPI_StatusMDT& accessor, boost::property_tree::ptree& propTree, const std::string& nodeName, const bool createNode, const bool addTypeAttribute, const bool /*checkIfDerivation*/, const bool /*topLevel*/) {
  std::string generatedNodeName{nodeName.empty() ? DMPI_StatusMDT_Names::Extern_Type_Name : nodeName};
  boost::property_tree::ptree newNode;
  boost::property_tree::ptree& node = (createNode ? newNode : propTree);
  if (addTypeAttribute) {
    extxml_uci::util::SerializationHelpers::addTypeAttribute(node, DMPI_StatusMDT_Names::Extern_Type_Name);
  }
  DMPI_ID_Type::serialize(accessor.getDMPI_ID(), node, DMPI_StatusMDT_Names::DMPI_ID_Name);
  DMPI_StateEnum::serialize(accessor.getDMPI_State(), node, DMPI_StatusMDT_Names::DMPI_State_Name, false);
  StrikeStateEnum::serialize(accessor.getDMPI_StrikeState(), node, DMPI_StatusMDT_Names::DMPI_StrikeState_Name, false);
  if (accessor.hasSystemID()) {
    SystemID_Type::serialize(accessor.getSystemID(), node, DMPI_StatusMDT_Names::SystemID_Name);
  }
  if (accessor.hasAssociatedRoutePlan()) {
    RoutePlanReferencesType::serialize(accessor.getAssociatedRoutePlan(), node, DMPI_StatusMDT_Names::AssociatedRoutePlan_Name);
  }
  if (accessor.hasAssociatedActivityPlan()) {
    ActivityPlanReferenceType::serialize(accessor.getAssociatedActivityPlan(), node, DMPI_StatusMDT_Names::AssociatedActivityPlan_Name);
  }
  {
    const uci::type::DMPI_StatusMDT::StoreStatus& boundedList = accessor.getStoreStatus();
    for (uci::type::DMPI_StatusMDT::StoreStatus::size_type i = 0, end = boundedList.size(); i < end; ++i) {
      DMPI_StoreStatusType::serialize(boundedList.at(i), node, DMPI_StatusMDT_Names::StoreStatus_Name);
    }
  }
  if (accessor.hasTaskID()) {
    TaskID_Type::serialize(accessor.getTaskID(), node, DMPI_StatusMDT_Names::TaskID_Name);
  }
  if (createNode) {
    propTree.add_child(generatedNodeName, node);
  }
  return generatedNodeName;
}

} // namespace type

} // namespace extxml_uci

