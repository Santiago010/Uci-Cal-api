/** @file ExternalizerRead10.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:20 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/base/ExternalizerRead10.h"

#include <string>

#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/FrequencySwitchingPatternEnum.h"
#include "extxml_uci/type/FuelFlowModeEnum.h"
#include "extxml_uci/type/FusionUpdatesEnum.h"
#include "extxml_uci/type/GENC_CountryNameEnum.h"
#include "extxml_uci/type/GainControlMethodEnum.h"
#include "extxml_uci/type/GatewayLink16ConfigurationClassEnum.h"
#include "extxml_uci/type/GatewayLink16ConfigurationCompassQuadrantEnum.h"
#include "extxml_uci/type/GatewayLink16ConfigurationSideEnum.h"
#include "extxml_uci/type/GenericUnitTypeEnum.h"
#include "extxml_uci/type/GeomagneticRecordApEnum.h"
#include "extxml_uci/type/GeomagneticRecordKpEnum.h"
#include "extxml_uci/type/GravityModelEnum.h"
#include "extxml_uci/type/GroundTerrainTypeEnum.h"
#include "extxml_uci/type/HoseCutCommandEnum.h"
#include "extxml_uci/type/HoseCutStatusEnum.h"
#include "extxml_uci/type/IEEE_FrequencyBandEnum.h"
#include "extxml_uci/type/IFF_ActivePassiveEnum.h"
#include "extxml_uci/type/IFF_CivilMilitaryEnum.h"
#include "extxml_uci/type/IFF_LethalNonLethalEnum.h"
#include "extxml_uci/type/IFF_MessageOutputsEnum.h"
#include "extxml_uci/type/IFF_ModeS_SupportEnum.h"
#include "extxml_uci/type/IFF_ModesEnum.h"
#include "extxml_uci/type/IFF_SubCapabilityEnum.h"
#include "extxml_uci/type/IFF_TransponderActivityStatusEnum.h"
#include "extxml_uci/type/IMU_AlignmentEnum.h"
#include "extxml_uci/type/IO_PortOpenCloseStateEnum.h"
#include "extxml_uci/type/IO_PortTypeEnum.h"
#include "extxml_uci/type/IP_ProtocolEnum.h"
#include "extxml_uci/type/IdentificationTypeEnum.h"
#include "extxml_uci/type/ImagePixelDepthEnum.h"
#include "extxml_uci/type/ImageRemapEnum.h"
#include "extxml_uci/type/ImageWeightEnum.h"
#include "extxml_uci/type/InclusionEnum.h"
#include "extxml_uci/type/IncreaseDecreaseEnum.h"
#include "extxml_uci/type/IncrementalChangeEnum.h"
#include "extxml_uci/type/InitialStepSizeEnum.h"
#include "extxml_uci/type/IntegrationMethodEnum.h"
#include "extxml_uci/type/InterfacePlanTypeEnum.h"
#include "extxml_uci/type/InterfaceStateEnum.h"
#include "extxml_uci/type/InterrogationStatusEnum.h"
#include "extxml_uci/type/JPEG_WaveletTypeEnum.h"
#include "extxml_uci/type/JREAP_TimeReferenceEnum.h"
#include "extxml_uci/type/JammerStationEnum.h"
#include "extxml_uci/type/LAR_BasisEnum.h"
#include "extxml_uci/type/LAR_RelationEnum.h"
#include "extxml_uci/type/LAR_WindSourceEnum.h"
#include "extxml_uci/type/LOS_MeasurementEnum.h"
#include "extxml_uci/type/LOS_ReferenceEnum.h"
#include "extxml_uci/type/LateralCenterOfGravityTrendEnum.h"
#include "extxml_uci/type/LaunchCapabilityEnum.h"
#include "extxml_uci/type/LaunchPointCalculationEnum.h"
#include "extxml_uci/type/LikelihoodEnum.h"
#include "extxml_uci/type/LineProjectionEnum.h"
#include "extxml_uci/type/Link16DepthEnum.h"
#include "extxml_uci/type/Link16HazardBurstEnum.h"
#include "extxml_uci/type/Link16HazardYieldEnum.h"
#include "extxml_uci/type/Link16SensorTypeEnum.h"
#include "extxml_uci/type/LockIndicatorEnum.h"
#include "extxml_uci/type/LogSeverityEnum.h"
#include "extxml_uci/type/LogicalOperatorEnum.h"
#include "extxml_uci/type/LongitudinalCenterOfGravityTrendEnum.h"
#include "extxml_uci/type/MDF_StatusEnum.h"
#include "extxml_uci/type/MISP_OperationalModeEnum.h"
#include "extxml_uci/type/MTI_TargetClassEnum.h"
#include "extxml_uci/type/MaxPOR_Enum.h"
#include "extxml_uci/type/MeasurementQualityEnum.h"
#include "extxml_uci/type/MeasurementReportSourceTypeEnum.h"
#include "extxml_uci/type/MeasurementStatusEnum.h"
#include "extxml_uci/type/MeasurementTypeEnum.h"
#include "extxml_uci/type/MediaLocationStatusEnum.h"
#include "extxml_uci/type/MergeEnum.h"
#include "extxml_uci/type/MessageDataVerificationEnum.h"
#include "extxml_uci/type/MessageElementDataTypeEnum.h"
#include "extxml_uci/type/MessageModeEnum.h"
#include "extxml_uci/type/MessageTypeDropRestrictionEnum.h"
#include "extxml_uci/type/MessageTypeEnum.h"
#include "extxml_uci/type/MissileEmitterModeEnum.h"
#include "extxml_uci/type/MissionCommunicationsStateEnum.h"
#include "extxml_uci/type/MissionPlanningByCaseTriggerEnum.h"
#include "extxml_uci/type/MissionStateEnum.h"
#include "extxml_uci/type/MissionTraceabilityEnum.h"
#include "extxml_uci/type/MobilityEnum.h"
#include "extxml_uci/type/Mode4CodeEnum.h"
#include "extxml_uci/type/ModulationEnum.h"
#include "extxml_uci/type/MultistaticModeActivationEnum.h"
#include "extxml_uci/type/MultistaticModeStatusEnum.h"
#include "extxml_uci/type/NPSI_Enum.h"
#include "extxml_uci/type/NavigationSolutionStateEnum.h"
#include "extxml_uci/type/NegotiableOptionsEnum.h"
#include "extxml_uci/type/NetworkLinkActionTypeEnum.h"
#include "extxml_uci/type/NoiseAdaptiveThresholdStatusEnum.h"
#include "extxml_uci/type/NormalizationInterpolationEnum.h"
#include "extxml_uci/type/NotificationCategoryEnum.h"
#include "extxml_uci/type/NotificationPerspectiveEnum.h"
#include "extxml_uci/type/NotificationSeverityEnum.h"
#include "extxml_uci/type/NotificationStateEnum.h"
#include "extxml_uci/type/OB_OperationalStatusEnum.h"
#include "extxml_uci/type/ObjectStateEnum.h"
#include "extxml_uci/type/ObservedOperationalStatusEnum.h"
#include "extxml_uci/type/OffsetXY_Enum.h"
#include "extxml_uci/type/OpConstraintEnum.h"
#include "extxml_uci/type/OpConstraintTypeEnum.h"
#include "extxml_uci/type/OpInteractionEnum.h"
#include "extxml_uci/type/OpLineCategoryEnum.h"
#include "extxml_uci/type/OpPointEmergencyEnum.h"
#include "extxml_uci/type/OpPointGeneralEnum.h"
#include "extxml_uci/type/OpPointHazardEnum.h"
#include "extxml_uci/type/OpPointReferenceEnum.h"
#include "extxml_uci/type/OpPointStationEnum.h"
#include "extxml_uci/type/OpStateEnum.h"
#include "extxml_uci/type/OpZoneCategoryEnum.h"
#include "extxml_uci/type/OpZoneFilterEnum.h"
#include "extxml_uci/type/OperationalCapabilityEnum.h"
#include "extxml_uci/type/OperationalImpairmentEnum.h"
#include "extxml_uci/type/OperationalStatusEnum.h"
#include "extxml_uci/type/OperatorContingencyActionEnum.h"
#include "extxml_uci/type/OperatorStatusEnum.h"
#include "extxml_uci/type/OperatorUniqueNameEnum.h"
#include "extxml_uci/type/OrbitAltitudeEnum.h"
#include "extxml_uci/type/OrbitChangeCapabilityEnum.h"
#include "extxml_uci/type/OrbitClassEnum.h"
#include "extxml_uci/type/OrbitConjunctionAssessmentEnum.h"
#include "extxml_uci/type/OrbitEnum.h"
#include "extxml_uci/type/OrbitKinematicsEnum.h"
#include "extxml_uci/type/OrbitPlanManeuverTypeEnum.h"
#include "extxml_uci/type/OrbitPlanPartsEnum.h"
#include "extxml_uci/type/OrbitQualitativeEnum.h"
#include "extxml_uci/type/OrbitRegimeEnum.h"
#include "extxml_uci/type/OrbitValidationErrorEnum.h"
#include "extxml_uci/type/OrbitalBreakupEnum.h"
#include "extxml_uci/type/OrbitalConjunctionEnum.h"
#include "extxml_uci/type/OrbitalDebrisEstimateEnum.h"
#include "extxml_uci/type/OrbitalEventEnum.h"
#include "extxml_uci/type/OrbitalKinematicsSourceEnum.h"
#include "extxml_uci/type/OrbitalManeuverStateEnum.h"
#include "extxml_uci/type/OrbitalManeuverTypeEnum.h"
#include "extxml_uci/type/OrbitalModelNameEnum.h"
#include "extxml_uci/type/OrbitalSurveillanceCapabilityEnum.h"
#include "extxml_uci/type/OrbitalSurveillanceMessageOutputsEnum.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorCapabilityEnum.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorMessageOutputsEnum.h"
#include "extxml_uci/type/OrbitalSurveillanceSizeDataEnum.h"
#include "extxml_uci/type/OrbitalSurveillanceSizeTypeEnum.h"
#include "extxml_uci/type/OrbitalSurveillanceSubCapabilityEnum.h"
#include "extxml_uci/type/OrderOfBattleEnum.h"
#include "extxml_uci/type/PMOP_Enum.h"
#include "extxml_uci/type/PMOP_SequenceEnum.h"
#include "extxml_uci/type/PO_CapabilityEnum.h"
#include "extxml_uci/type/PO_CollectionConstraintsEnum.h"
#include "extxml_uci/type/PO_EnvironmentEnum.h"
#include "extxml_uci/type/PO_FPA_ChannelOperationEnum.h"
#include "extxml_uci/type/PO_FilterEnum.h"
#include "extxml_uci/type/PO_GimbalOrientationReferenceFrameEnum.h"
#include "extxml_uci/type/PO_LockPersistenceEnum.h"
#include "extxml_uci/type/PO_MessageOutputsEnum.h"
#include "extxml_uci/type/PO_ProcessingStageTypeEnum.h"
#include "extxml_uci/type/PO_TechniqueEnum.h"
#include "extxml_uci/type/PO_TrackCapabilityTypeEnum.h"
#include "extxml_uci/type/PO_TrackCommandEnum.h"
#include "extxml_uci/type/PO_TrackModeEnum.h"
#include "extxml_uci/type/PRI_AgilePatternEnum.h"
#include "extxml_uci/type/PRI_MeasurementEnum.h"
#include "extxml_uci/type/PRI_SwitchingPatternEnum.h"
#include "extxml_uci/type/PRI_TypeEnum.h"
#include "extxml_uci/type/PackageOperationEnum.h"
#include "extxml_uci/type/PairIdentifierEnum.h"
#include "extxml_uci/type/PairingRelationshipEnum.h"
#include "extxml_uci/type/ParityTypeEnum.h"
#include "extxml_uci/type/PassiveActiveEnum.h"
#include "extxml_uci/type/PathIdentificationEnum.h"
#include "extxml_uci/type/PathSegmentSourceEnum.h"
#include "extxml_uci/type/PathTypeEnum.h"
#include "extxml_uci/type/PlanActivationCommandEnum.h"
#include "extxml_uci/type/PlanActivationStateEnum.h"
#include "extxml_uci/type/PlanChangeableConstraintsEnum.h"
#include "extxml_uci/type/PlanConfigurationActivationCommandEnum.h"
#include "extxml_uci/type/PlanConfigurationStateEnum.h"
#include "extxml_uci/type/PlanConstraintUsageEnum.h"
#include "extxml_uci/type/PlanExecutionStateEnum.h"
#include "extxml_uci/type/PlanInitiationSourceEnum.h"
#include "extxml_uci/type/PlanPolicyProcessingEnum.h"
#include "extxml_uci/type/PlanSimultaneityEnum.h"
#include "extxml_uci/type/PlanTypeEnum.h"
#include "extxml_uci/type/PlanValidationStateEnum.h"
#include "extxml_uci/type/PlanningDataSourceEnum.h"
#include "extxml_uci/type/PlanningInterfaceEnum.h"
#include "extxml_uci/type/PlanningResultEnum.h"
#include "extxml_uci/type/PlanningStateEnum.h"
#include "extxml_uci/type/PlanningTriggerSourceEnum.h"
#include "extxml_uci/type/PlatformFunctionAirEnum.h"
#include "extxml_uci/type/PlatformFunctionEW_Enum.h"
#include "extxml_uci/type/PlatformFunctionGroundEnum.h"
#include "extxml_uci/type/PlatformFunctionSeaSurfaceEnum.h"
#include "extxml_uci/type/PointTrackEnum.h"
#include "extxml_uci/type/PointingControlModeEnum.h"
#include "extxml_uci/type/PointingControlModeStatusEnum.h"
#include "extxml_uci/type/PointingTypeEnum.h"
#include "extxml_uci/type/PointingVectorCommandTypeEnum.h"
#include "extxml_uci/type/PointingVectorStateEnum.h"
#include "extxml_uci/type/PointingVectorStatusEnum.h"
#include "extxml_uci/type/PolarizationEnum.h"
#include "extxml_uci/type/PolarizationPortEnum.h"
#include "extxml_uci/type/PolarizationSenseEnum.h"
#include "extxml_uci/type/PositionModeEnum.h"
#include "extxml_uci/type/PositionTimeQualityEnum.h"
#include "extxml_uci/type/PressureStateEnum.h"
#include "extxml_uci/type/PrioritizationListEnum.h"
#include "extxml_uci/type/ProcessingStatusEnum.h"
#include "extxml_uci/type/ProcessingTypeEnum.h"
#include "extxml_uci/type/ProductClassificationRequestEnum.h"
#include "extxml_uci/type/ProductManagementTaskStateEnum.h"
#include "extxml_uci/type/ProductProcessingFunctionMessageOutputsEnum.h"
#include "extxml_uci/type/ProductTypeEnum.h"
#include "extxml_uci/type/PushContentsEnum.h"
#include "extxml_uci/type/QualityOfObsEnum.h"
#include "extxml_uci/type/RDMA_DataTransferServiceEnum.h"
#include "extxml_uci/type/RDMA_EndpointTypeEnum.h"
#include "extxml_uci/type/RDMA_ProviderEnum.h"
#include "extxml_uci/type/RECCE_SystemEnum.h"
#include "extxml_uci/type/RF_ReportStateEnum.h"
#include "extxml_uci/type/RF_SignalContentEnum.h"
#include "extxml_uci/type/RF_TypeEnum.h"
#include "extxml_uci/type/R_BarApproachEnum.h"
#include "extxml_uci/type/RadarAltimeterCapabilityEnum.h"
#include "extxml_uci/type/RadarAltimeterMessageOutputsEnum.h"
#include "extxml_uci/type/RadarAltimeterSubCapabilityEnum.h"
#include "extxml_uci/type/RadarBeamPersistenceEnum.h"
#include "extxml_uci/type/RadarBeamTypeEnum.h"
#include "extxml_uci/type/RadarChannelIndicatorEnum.h"
#include "extxml_uci/type/RadarModeEnum.h"
#include "extxml_uci/type/RadarSpoilTypeEnum.h"
#include "extxml_uci/type/RadarWeightingFunctionsEnum.h"
#include "extxml_uci/type/RadiationModeEnum.h"
#include "extxml_uci/type/ReferenceCapabilityOutputsEnum.h"
#include "extxml_uci/type/RefuelCapabilityEnum.h"
#include "extxml_uci/type/RefuelLocationEnum.h"
#include "extxml_uci/type/RelativeDirectionEnum.h"
#include "extxml_uci/type/RepeatEnum.h"
#include "extxml_uci/type/RequestProcessingStateEnum.h"
#include "extxml_uci/type/RequestSourceEnum.h"
#include "extxml_uci/type/RequestStateEnum.h"
#include "extxml_uci/type/RequirementDependencyEnum.h"
#include "extxml_uci/type/RequirementExecutionStateEnum.h"
#include "extxml_uci/type/RequirementObjectEnum.h"
#include "extxml_uci/type/RequirementPlanningStateEnum.h"
#include "extxml_uci/type/RequirementTimingEnum.h"
#include "extxml_uci/type/RequirementUsageEnum.h"
#include "extxml_uci/type/ResourceAllocationStateEnum.h"
#include "extxml_uci/type/ResourceAllocationStatusEnum.h"
#include "extxml_uci/type/ResourceAllocatorCommandControlEnum.h"
#include "extxml_uci/type/ResponseTypeEnum.h"
#include "extxml_uci/type/RiskPrioritizationEnum.h"
#include "extxml_uci/type/RotationEnum.h"
#include "extxml_uci/type/RouteEventEnum.h"
#include "extxml_uci/type/RouteValidationErrorEnum.h"
#include "extxml_uci/type/RunwayStatusEnum.h"
#include "extxml_uci/type/SAM_ModeEnum.h"
#include "extxml_uci/type/SAR_CapabilityEnum.h"
#include "extxml_uci/type/SAR_CollectionReasonEnum.h"
#include "extxml_uci/type/SAR_EllipticityPolicyEnum.h"
#include "extxml_uci/type/SAR_ImagingPlaneEnum.h"
#include "extxml_uci/type/SAR_MessageOutputsEnum.h"
#include "extxml_uci/type/SAR_SubCapabilityEnum.h"
#include "extxml_uci/type/SAR_WaveformSelectionEnum.h"
#include "extxml_uci/type/SDA_SpecialInstructionsEnum.h"
#include "extxml_uci/type/SMTI_CapabilityEnum.h"
#include "extxml_uci/type/SMTI_MessageOutputsEnum.h"
#include "extxml_uci/type/SMTI_SubCapabilityEnum.h"
#include "extxml_uci/type/SOB_CorrelationTypeEnum.h"
#include "extxml_uci/type/SOB_MissionTypeEnum.h"
#include "extxml_uci/type/SOB_RecordEnum.h"
#include "extxml_uci/type/STANAG_4607_PlatformTypeEnum.h"
#include "extxml_uci/type/STANAG_4607_TargetClassificationEnum.h"
#include "extxml_uci/type/SatelliteOperationsChangesCharacterizationEnum.h"
#include "extxml_uci/type/ScanDirectionalityEnum.h"
#include "extxml_uci/type/ScanMechanicsEnum.h"
#include "extxml_uci/type/ScanPlaneEnum.h"
#include "extxml_uci/type/ScanTypeEnum.h"
#include "extxml_uci/type/SchedulingCriticalityEnum.h"
#include "extxml_uci/type/SecurityAccessEnum.h"
#include "extxml_uci/type/SecurityAuditManagementEnum.h"
#include "extxml_uci/type/SecurityAuthenticationEnum.h"
#include "extxml_uci/type/SecurityEventOutcomeEnum.h"
#include "extxml_uci/type/SecurityFileManagementEnum.h"
#include "extxml_uci/type/SecurityIntegrityEnum.h"
#include "extxml_uci/type/SecurityIntrusionDetectionEnum.h"
#include "extxml_uci/type/SecurityKeyManagementEnum.h"
#include "extxml_uci/type/SecurityPolicyManagementEnum.h"
#include "extxml_uci/type/SecuritySanitizationEnum.h"
#include "extxml_uci/type/SecuritySystemEnum.h"
#include "extxml_uci/type/SensingTypeEnum.h"
#include "extxml_uci/type/SensorCategoryEnum.h"
#include "extxml_uci/type/SensorFunctionalCollectionsEnum.h"
#include "extxml_uci/type/SensorFunctionalProcessingEnum.h"
#include "extxml_uci/type/SensorReferencedCoverageAreaReferenceEnum.h"
#include "extxml_uci/type/SensorSpectrumEnum.h"
#include "extxml_uci/type/SensorTrackingAltitudesEnum.h"
#include "extxml_uci/type/SensorTypeEnum.h"
#include "extxml_uci/type/ServiceLifecycleCommandStatusEnum.h"
#include "extxml_uci/type/ServiceLifecycleStateEnum.h"
#include "extxml_uci/type/ServiceRegistrationPurposeEnum.h"
#include "extxml_uci/type/ServiceRegistrationStatusEnum.h"
#include "extxml_uci/type/ServiceSettingEnum.h"
#include "extxml_uci/type/ServiceStateEnum.h"
#include "extxml_uci/type/SignalGeolocationControlEnum.h"
#include "extxml_uci/type/SignalGeolocationMethodEnum.h"
#include "extxml_uci/type/SignalLocationEnum.h"
#include "extxml_uci/type/SignalMeasurementFlagEnum.h"
#include "extxml_uci/type/SignalMeasurementMethodEnum.h"
#include "extxml_uci/type/SignalReportStateEnum.h"
#include "extxml_uci/type/SignalTypeEnum.h"
#include "extxml_uci/type/SiteEnum.h"
#include "extxml_uci/type/SiteTypeEnum.h"
#include "extxml_uci/type/SkysearchModeEnum.h"
#include "extxml_uci/type/SolarFluxRecordEnum.h"
#include "extxml_uci/type/SolarRadiationPressureModelEnum.h"
#include "extxml_uci/type/SpaceObjectEnum.h"
#include "extxml_uci/type/SpecialIdentityEnum.h"
#include "extxml_uci/type/SpeedOptimizationEnum.h"
#include "extxml_uci/type/SpeedReferenceEnum.h"
#include "extxml_uci/type/StandardIdentityEnum.h"
#include "extxml_uci/type/StateTransitionStatusEnum.h"
#include "extxml_uci/type/StoreCategoryEnum.h"
#include "extxml_uci/type/StoreFlightModeEnum.h"
#include "extxml_uci/type/StoreJettisonOptionsEnum.h"
#include "extxml_uci/type/StoreStateEnum.h"
#include "extxml_uci/type/StrikeMessageOutputsEnum.h"
#include "extxml_uci/type/StrikeStateEnum.h"
#include "extxml_uci/type/SubPlanTypeEnum.h"
#include "extxml_uci/type/SubmarineConfidenceLevelEnum.h"
#include "extxml_uci/type/SubsystemBIT_ControlInterfacesEnum.h"
#include "extxml_uci/type/SubsystemBIT_ResultEnum.h"
#include "extxml_uci/type/SubsystemCalibrationControlInterfacesEnum.h"
#include "extxml_uci/type/SubsystemCalibrationResultEnum.h"
#include "extxml_uci/type/SubsystemEraseCommandEnum.h"
#include "extxml_uci/type/SubsystemMaintenanceCommandEnum.h"
#include "extxml_uci/type/SubsystemMaintenanceControlInterfacesEnum.h"
#include "extxml_uci/type/SubsystemMaintenanceResultStatusEnum.h"
#include "extxml_uci/type/SubsystemSettingEnum.h"
#include "extxml_uci/type/SubsystemStateEnum.h"
#include "extxml_uci/type/SupportCapabilityTypeEnum.h"
#include "extxml_uci/type/SupportedFunctionEnum.h"
#include "extxml_uci/type/SurfaceTypeEnum.h"
#include "extxml_uci/type/SwapEnum.h"
#include "extxml_uci/type/SystemContingencyLevelEnum.h"
#include "extxml_uci/type/SystemDeploymentEnum.h"
#include "extxml_uci/type/SystemSourceEnum.h"
#include "extxml_uci/type/SystemStateEnum.h"
#include "extxml_uci/type/TCP_SessionStatusEnum.h"
#include "extxml_uci/type/TacticalOrderCapabilityEnum.h"
#include "extxml_uci/type/TacticalPlanningAndExecutionEnum.h"
#include "extxml_uci/type/TailConeLightEnum.h"
#include "extxml_uci/type/TargetDefensesEnum.h"
#include "extxml_uci/type/TargetHardnessEnum.h"
#include "extxml_uci/type/TargetTypeEnum.h"
#include "extxml_uci/type/TaskTypeEnum.h"
#include "extxml_uci/type/TemperatureStateEnum.h"
#include "extxml_uci/type/TextReportActionEnum.h"
#include "extxml_uci/type/ThreadAvailabiltyEnum.h"
#include "extxml_uci/type/ThreatCapabilityEnum.h"
#include "extxml_uci/type/ThreatEnum.h"
#include "extxml_uci/type/ThreatPostureEnum.h"
#include "extxml_uci/type/ThreatWeaponEnum.h"
#include "extxml_uci/type/TimeFunctionEnum.h"
#include "extxml_uci/type/TrackModeEnum.h"
#include "extxml_uci/type/TurnPointTypeEnum.h"
#include "extxml_uci/type/TypeOfDependencyEnum.h"
#include "extxml_uci/type/UncertaintyEnum.h"
#include "extxml_uci/type/UnitTypeEnum.h"
#include "extxml_uci/type/V_BarApproachEnum.h"
#include "extxml_uci/type/VehicleActionEnum.h"
#include "extxml_uci/type/VehicleControlStrategyEnum.h"
#include "extxml_uci/type/VehicleLossOfLinkProcessingEnum.h"
#include "extxml_uci/type/VehicleSurvivabilityModeEnum.h"
#include "extxml_uci/type/VerticalCenterOfGravityTrendEnum.h"
#include "extxml_uci/type/VideoBlockSizeEnum.h"
#include "extxml_uci/type/VideoChromaSubsampleEnum.h"
#include "extxml_uci/type/VideoEncoderCompressionModeEnum.h"
#include "extxml_uci/type/VulnerabilityTypeEnum.h"
#include "extxml_uci/type/WaypointTypeEnum.h"
#include "extxml_uci/type/WeaponFuzeModeEnum.h"
#include "extxml_uci/type/WeaponFuzePositionEnum.h"
#include "extxml_uci/type/WeaponTypeEnum.h"
#include "extxml_uci/type/WeatherCloudCoverEnum.h"
#include "extxml_uci/type/WeatherDescriptionEnum.h"
#include "extxml_uci/type/WeatherKindEnum.h"
#include "extxml_uci/type/WeatherPrecipitationAmplificationEnum.h"
#include "extxml_uci/type/WeatherPrecipitationEnum.h"
#include "extxml_uci/type/WeatherRadarCapabilityEnum.h"
#include "extxml_uci/type/WeatherRadarMessageOutputsEnum.h"
#include "extxml_uci/type/WeatherReportTypeEnum.h"
#include "extxml_uci/type/WeatherRoadStateEnum.h"
#include "extxml_uci/type/WeatherSeaStateAmplificationEnum.h"
#include "extxml_uci/type/WeatherSeaStateEnum.h"
#include "extxml_uci/type/WeatherSeverityEnum.h"
#include "extxml_uci/type/WeatherSourceEnum.h"
#include "extxml_uci/type/WeatherTerrainStateEnum.h"
#include "extxml_uci/type/WeatherVisibilityEnum.h"
#include "extxml_uci/type/WeatherWarningEnum.h"
#include "extxml_uci/type/WeekdayEnum.h"
#include "extxml_uci/type/YearOfEquinoxEnum.h"
#include "extxml_uci/type/ZoneRelationEnum.h"
#include "uci/base/accessorType.h"
#include "uci/type/FrequencySwitchingPatternEnum.h"
#include "uci/type/FuelFlowModeEnum.h"
#include "uci/type/FusionUpdatesEnum.h"
#include "uci/type/GENC_CountryNameEnum.h"
#include "uci/type/GainControlMethodEnum.h"
#include "uci/type/GatewayLink16ConfigurationClassEnum.h"
#include "uci/type/GatewayLink16ConfigurationCompassQuadrantEnum.h"
#include "uci/type/GatewayLink16ConfigurationSideEnum.h"
#include "uci/type/GenericUnitTypeEnum.h"
#include "uci/type/GeomagneticRecordApEnum.h"
#include "uci/type/GeomagneticRecordKpEnum.h"
#include "uci/type/GravityModelEnum.h"
#include "uci/type/GroundTerrainTypeEnum.h"
#include "uci/type/HoseCutCommandEnum.h"
#include "uci/type/HoseCutStatusEnum.h"
#include "uci/type/IEEE_FrequencyBandEnum.h"
#include "uci/type/IFF_ActivePassiveEnum.h"
#include "uci/type/IFF_CivilMilitaryEnum.h"
#include "uci/type/IFF_LethalNonLethalEnum.h"
#include "uci/type/IFF_MessageOutputsEnum.h"
#include "uci/type/IFF_ModeS_SupportEnum.h"
#include "uci/type/IFF_ModesEnum.h"
#include "uci/type/IFF_SubCapabilityEnum.h"
#include "uci/type/IFF_TransponderActivityStatusEnum.h"
#include "uci/type/IMU_AlignmentEnum.h"
#include "uci/type/IO_PortOpenCloseStateEnum.h"
#include "uci/type/IO_PortTypeEnum.h"
#include "uci/type/IP_ProtocolEnum.h"
#include "uci/type/IdentificationTypeEnum.h"
#include "uci/type/ImagePixelDepthEnum.h"
#include "uci/type/ImageRemapEnum.h"
#include "uci/type/ImageWeightEnum.h"
#include "uci/type/InclusionEnum.h"
#include "uci/type/IncreaseDecreaseEnum.h"
#include "uci/type/IncrementalChangeEnum.h"
#include "uci/type/InitialStepSizeEnum.h"
#include "uci/type/IntegrationMethodEnum.h"
#include "uci/type/InterfacePlanTypeEnum.h"
#include "uci/type/InterfaceStateEnum.h"
#include "uci/type/InterrogationStatusEnum.h"
#include "uci/type/JPEG_WaveletTypeEnum.h"
#include "uci/type/JREAP_TimeReferenceEnum.h"
#include "uci/type/JammerStationEnum.h"
#include "uci/type/LAR_BasisEnum.h"
#include "uci/type/LAR_RelationEnum.h"
#include "uci/type/LAR_WindSourceEnum.h"
#include "uci/type/LOS_MeasurementEnum.h"
#include "uci/type/LOS_ReferenceEnum.h"
#include "uci/type/LateralCenterOfGravityTrendEnum.h"
#include "uci/type/LaunchCapabilityEnum.h"
#include "uci/type/LaunchPointCalculationEnum.h"
#include "uci/type/LikelihoodEnum.h"
#include "uci/type/LineProjectionEnum.h"
#include "uci/type/Link16DepthEnum.h"
#include "uci/type/Link16HazardBurstEnum.h"
#include "uci/type/Link16HazardYieldEnum.h"
#include "uci/type/Link16SensorTypeEnum.h"
#include "uci/type/LockIndicatorEnum.h"
#include "uci/type/LogSeverityEnum.h"
#include "uci/type/LogicalOperatorEnum.h"
#include "uci/type/LongitudinalCenterOfGravityTrendEnum.h"
#include "uci/type/MDF_StatusEnum.h"
#include "uci/type/MISP_OperationalModeEnum.h"
#include "uci/type/MTI_TargetClassEnum.h"
#include "uci/type/MaxPOR_Enum.h"
#include "uci/type/MeasurementQualityEnum.h"
#include "uci/type/MeasurementReportSourceTypeEnum.h"
#include "uci/type/MeasurementStatusEnum.h"
#include "uci/type/MeasurementTypeEnum.h"
#include "uci/type/MediaLocationStatusEnum.h"
#include "uci/type/MergeEnum.h"
#include "uci/type/MessageDataVerificationEnum.h"
#include "uci/type/MessageElementDataTypeEnum.h"
#include "uci/type/MessageModeEnum.h"
#include "uci/type/MessageTypeDropRestrictionEnum.h"
#include "uci/type/MessageTypeEnum.h"
#include "uci/type/MissileEmitterModeEnum.h"
#include "uci/type/MissionCommunicationsStateEnum.h"
#include "uci/type/MissionPlanningByCaseTriggerEnum.h"
#include "uci/type/MissionStateEnum.h"
#include "uci/type/MissionTraceabilityEnum.h"
#include "uci/type/MobilityEnum.h"
#include "uci/type/Mode4CodeEnum.h"
#include "uci/type/ModulationEnum.h"
#include "uci/type/MultistaticModeActivationEnum.h"
#include "uci/type/MultistaticModeStatusEnum.h"
#include "uci/type/NPSI_Enum.h"
#include "uci/type/NavigationSolutionStateEnum.h"
#include "uci/type/NegotiableOptionsEnum.h"
#include "uci/type/NetworkLinkActionTypeEnum.h"
#include "uci/type/NoiseAdaptiveThresholdStatusEnum.h"
#include "uci/type/NormalizationInterpolationEnum.h"
#include "uci/type/NotificationCategoryEnum.h"
#include "uci/type/NotificationPerspectiveEnum.h"
#include "uci/type/NotificationSeverityEnum.h"
#include "uci/type/NotificationStateEnum.h"
#include "uci/type/OB_OperationalStatusEnum.h"
#include "uci/type/ObjectStateEnum.h"
#include "uci/type/ObservedOperationalStatusEnum.h"
#include "uci/type/OffsetXY_Enum.h"
#include "uci/type/OpConstraintEnum.h"
#include "uci/type/OpConstraintTypeEnum.h"
#include "uci/type/OpInteractionEnum.h"
#include "uci/type/OpLineCategoryEnum.h"
#include "uci/type/OpPointEmergencyEnum.h"
#include "uci/type/OpPointGeneralEnum.h"
#include "uci/type/OpPointHazardEnum.h"
#include "uci/type/OpPointReferenceEnum.h"
#include "uci/type/OpPointStationEnum.h"
#include "uci/type/OpStateEnum.h"
#include "uci/type/OpZoneCategoryEnum.h"
#include "uci/type/OpZoneFilterEnum.h"
#include "uci/type/OperationalCapabilityEnum.h"
#include "uci/type/OperationalImpairmentEnum.h"
#include "uci/type/OperationalStatusEnum.h"
#include "uci/type/OperatorContingencyActionEnum.h"
#include "uci/type/OperatorStatusEnum.h"
#include "uci/type/OperatorUniqueNameEnum.h"
#include "uci/type/OrbitAltitudeEnum.h"
#include "uci/type/OrbitChangeCapabilityEnum.h"
#include "uci/type/OrbitClassEnum.h"
#include "uci/type/OrbitConjunctionAssessmentEnum.h"
#include "uci/type/OrbitEnum.h"
#include "uci/type/OrbitKinematicsEnum.h"
#include "uci/type/OrbitPlanManeuverTypeEnum.h"
#include "uci/type/OrbitPlanPartsEnum.h"
#include "uci/type/OrbitQualitativeEnum.h"
#include "uci/type/OrbitRegimeEnum.h"
#include "uci/type/OrbitValidationErrorEnum.h"
#include "uci/type/OrbitalBreakupEnum.h"
#include "uci/type/OrbitalConjunctionEnum.h"
#include "uci/type/OrbitalDebrisEstimateEnum.h"
#include "uci/type/OrbitalEventEnum.h"
#include "uci/type/OrbitalKinematicsSourceEnum.h"
#include "uci/type/OrbitalManeuverStateEnum.h"
#include "uci/type/OrbitalManeuverTypeEnum.h"
#include "uci/type/OrbitalModelNameEnum.h"
#include "uci/type/OrbitalSurveillanceCapabilityEnum.h"
#include "uci/type/OrbitalSurveillanceMessageOutputsEnum.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityEnum.h"
#include "uci/type/OrbitalSurveillanceSensorMessageOutputsEnum.h"
#include "uci/type/OrbitalSurveillanceSizeDataEnum.h"
#include "uci/type/OrbitalSurveillanceSizeTypeEnum.h"
#include "uci/type/OrbitalSurveillanceSubCapabilityEnum.h"
#include "uci/type/OrderOfBattleEnum.h"
#include "uci/type/PMOP_Enum.h"
#include "uci/type/PMOP_SequenceEnum.h"
#include "uci/type/PO_CapabilityEnum.h"
#include "uci/type/PO_CollectionConstraintsEnum.h"
#include "uci/type/PO_EnvironmentEnum.h"
#include "uci/type/PO_FPA_ChannelOperationEnum.h"
#include "uci/type/PO_FilterEnum.h"
#include "uci/type/PO_GimbalOrientationReferenceFrameEnum.h"
#include "uci/type/PO_LockPersistenceEnum.h"
#include "uci/type/PO_MessageOutputsEnum.h"
#include "uci/type/PO_ProcessingStageTypeEnum.h"
#include "uci/type/PO_TechniqueEnum.h"
#include "uci/type/PO_TrackCapabilityTypeEnum.h"
#include "uci/type/PO_TrackCommandEnum.h"
#include "uci/type/PO_TrackModeEnum.h"
#include "uci/type/PRI_AgilePatternEnum.h"
#include "uci/type/PRI_MeasurementEnum.h"
#include "uci/type/PRI_SwitchingPatternEnum.h"
#include "uci/type/PRI_TypeEnum.h"
#include "uci/type/PackageOperationEnum.h"
#include "uci/type/PairIdentifierEnum.h"
#include "uci/type/PairingRelationshipEnum.h"
#include "uci/type/ParityTypeEnum.h"
#include "uci/type/PassiveActiveEnum.h"
#include "uci/type/PathIdentificationEnum.h"
#include "uci/type/PathSegmentSourceEnum.h"
#include "uci/type/PathTypeEnum.h"
#include "uci/type/PlanActivationCommandEnum.h"
#include "uci/type/PlanActivationStateEnum.h"
#include "uci/type/PlanChangeableConstraintsEnum.h"
#include "uci/type/PlanConfigurationActivationCommandEnum.h"
#include "uci/type/PlanConfigurationStateEnum.h"
#include "uci/type/PlanConstraintUsageEnum.h"
#include "uci/type/PlanExecutionStateEnum.h"
#include "uci/type/PlanInitiationSourceEnum.h"
#include "uci/type/PlanPolicyProcessingEnum.h"
#include "uci/type/PlanSimultaneityEnum.h"
#include "uci/type/PlanTypeEnum.h"
#include "uci/type/PlanValidationStateEnum.h"
#include "uci/type/PlanningDataSourceEnum.h"
#include "uci/type/PlanningInterfaceEnum.h"
#include "uci/type/PlanningResultEnum.h"
#include "uci/type/PlanningStateEnum.h"
#include "uci/type/PlanningTriggerSourceEnum.h"
#include "uci/type/PlatformFunctionAirEnum.h"
#include "uci/type/PlatformFunctionEW_Enum.h"
#include "uci/type/PlatformFunctionGroundEnum.h"
#include "uci/type/PlatformFunctionSeaSurfaceEnum.h"
#include "uci/type/PointTrackEnum.h"
#include "uci/type/PointingControlModeEnum.h"
#include "uci/type/PointingControlModeStatusEnum.h"
#include "uci/type/PointingTypeEnum.h"
#include "uci/type/PointingVectorCommandTypeEnum.h"
#include "uci/type/PointingVectorStateEnum.h"
#include "uci/type/PointingVectorStatusEnum.h"
#include "uci/type/PolarizationEnum.h"
#include "uci/type/PolarizationPortEnum.h"
#include "uci/type/PolarizationSenseEnum.h"
#include "uci/type/PositionModeEnum.h"
#include "uci/type/PositionTimeQualityEnum.h"
#include "uci/type/PressureStateEnum.h"
#include "uci/type/PrioritizationListEnum.h"
#include "uci/type/ProcessingStatusEnum.h"
#include "uci/type/ProcessingTypeEnum.h"
#include "uci/type/ProductClassificationRequestEnum.h"
#include "uci/type/ProductManagementTaskStateEnum.h"
#include "uci/type/ProductProcessingFunctionMessageOutputsEnum.h"
#include "uci/type/ProductTypeEnum.h"
#include "uci/type/PushContentsEnum.h"
#include "uci/type/QualityOfObsEnum.h"
#include "uci/type/RDMA_DataTransferServiceEnum.h"
#include "uci/type/RDMA_EndpointTypeEnum.h"
#include "uci/type/RDMA_ProviderEnum.h"
#include "uci/type/RECCE_SystemEnum.h"
#include "uci/type/RF_ReportStateEnum.h"
#include "uci/type/RF_SignalContentEnum.h"
#include "uci/type/RF_TypeEnum.h"
#include "uci/type/R_BarApproachEnum.h"
#include "uci/type/RadarAltimeterCapabilityEnum.h"
#include "uci/type/RadarAltimeterMessageOutputsEnum.h"
#include "uci/type/RadarAltimeterSubCapabilityEnum.h"
#include "uci/type/RadarBeamPersistenceEnum.h"
#include "uci/type/RadarBeamTypeEnum.h"
#include "uci/type/RadarChannelIndicatorEnum.h"
#include "uci/type/RadarModeEnum.h"
#include "uci/type/RadarSpoilTypeEnum.h"
#include "uci/type/RadarWeightingFunctionsEnum.h"
#include "uci/type/RadiationModeEnum.h"
#include "uci/type/ReferenceCapabilityOutputsEnum.h"
#include "uci/type/RefuelCapabilityEnum.h"
#include "uci/type/RefuelLocationEnum.h"
#include "uci/type/RelativeDirectionEnum.h"
#include "uci/type/RepeatEnum.h"
#include "uci/type/RequestProcessingStateEnum.h"
#include "uci/type/RequestSourceEnum.h"
#include "uci/type/RequestStateEnum.h"
#include "uci/type/RequirementDependencyEnum.h"
#include "uci/type/RequirementExecutionStateEnum.h"
#include "uci/type/RequirementObjectEnum.h"
#include "uci/type/RequirementPlanningStateEnum.h"
#include "uci/type/RequirementTimingEnum.h"
#include "uci/type/RequirementUsageEnum.h"
#include "uci/type/ResourceAllocationStateEnum.h"
#include "uci/type/ResourceAllocationStatusEnum.h"
#include "uci/type/ResourceAllocatorCommandControlEnum.h"
#include "uci/type/ResponseTypeEnum.h"
#include "uci/type/RiskPrioritizationEnum.h"
#include "uci/type/RotationEnum.h"
#include "uci/type/RouteEventEnum.h"
#include "uci/type/RouteValidationErrorEnum.h"
#include "uci/type/RunwayStatusEnum.h"
#include "uci/type/SAM_ModeEnum.h"
#include "uci/type/SAR_CapabilityEnum.h"
#include "uci/type/SAR_CollectionReasonEnum.h"
#include "uci/type/SAR_EllipticityPolicyEnum.h"
#include "uci/type/SAR_ImagingPlaneEnum.h"
#include "uci/type/SAR_MessageOutputsEnum.h"
#include "uci/type/SAR_SubCapabilityEnum.h"
#include "uci/type/SAR_WaveformSelectionEnum.h"
#include "uci/type/SDA_SpecialInstructionsEnum.h"
#include "uci/type/SMTI_CapabilityEnum.h"
#include "uci/type/SMTI_MessageOutputsEnum.h"
#include "uci/type/SMTI_SubCapabilityEnum.h"
#include "uci/type/SOB_CorrelationTypeEnum.h"
#include "uci/type/SOB_MissionTypeEnum.h"
#include "uci/type/SOB_RecordEnum.h"
#include "uci/type/STANAG_4607_PlatformTypeEnum.h"
#include "uci/type/STANAG_4607_TargetClassificationEnum.h"
#include "uci/type/SatelliteOperationsChangesCharacterizationEnum.h"
#include "uci/type/ScanDirectionalityEnum.h"
#include "uci/type/ScanMechanicsEnum.h"
#include "uci/type/ScanPlaneEnum.h"
#include "uci/type/ScanTypeEnum.h"
#include "uci/type/SchedulingCriticalityEnum.h"
#include "uci/type/SecurityAccessEnum.h"
#include "uci/type/SecurityAuditManagementEnum.h"
#include "uci/type/SecurityAuthenticationEnum.h"
#include "uci/type/SecurityEventOutcomeEnum.h"
#include "uci/type/SecurityFileManagementEnum.h"
#include "uci/type/SecurityIntegrityEnum.h"
#include "uci/type/SecurityIntrusionDetectionEnum.h"
#include "uci/type/SecurityKeyManagementEnum.h"
#include "uci/type/SecurityPolicyManagementEnum.h"
#include "uci/type/SecuritySanitizationEnum.h"
#include "uci/type/SecuritySystemEnum.h"
#include "uci/type/SensingTypeEnum.h"
#include "uci/type/SensorCategoryEnum.h"
#include "uci/type/SensorFunctionalCollectionsEnum.h"
#include "uci/type/SensorFunctionalProcessingEnum.h"
#include "uci/type/SensorReferencedCoverageAreaReferenceEnum.h"
#include "uci/type/SensorSpectrumEnum.h"
#include "uci/type/SensorTrackingAltitudesEnum.h"
#include "uci/type/SensorTypeEnum.h"
#include "uci/type/ServiceLifecycleCommandStatusEnum.h"
#include "uci/type/ServiceLifecycleStateEnum.h"
#include "uci/type/ServiceRegistrationPurposeEnum.h"
#include "uci/type/ServiceRegistrationStatusEnum.h"
#include "uci/type/ServiceSettingEnum.h"
#include "uci/type/ServiceStateEnum.h"
#include "uci/type/SignalGeolocationControlEnum.h"
#include "uci/type/SignalGeolocationMethodEnum.h"
#include "uci/type/SignalLocationEnum.h"
#include "uci/type/SignalMeasurementFlagEnum.h"
#include "uci/type/SignalMeasurementMethodEnum.h"
#include "uci/type/SignalReportStateEnum.h"
#include "uci/type/SignalTypeEnum.h"
#include "uci/type/SiteEnum.h"
#include "uci/type/SiteTypeEnum.h"
#include "uci/type/SkysearchModeEnum.h"
#include "uci/type/SolarFluxRecordEnum.h"
#include "uci/type/SolarRadiationPressureModelEnum.h"
#include "uci/type/SpaceObjectEnum.h"
#include "uci/type/SpecialIdentityEnum.h"
#include "uci/type/SpeedOptimizationEnum.h"
#include "uci/type/SpeedReferenceEnum.h"
#include "uci/type/StandardIdentityEnum.h"
#include "uci/type/StateTransitionStatusEnum.h"
#include "uci/type/StoreCategoryEnum.h"
#include "uci/type/StoreFlightModeEnum.h"
#include "uci/type/StoreJettisonOptionsEnum.h"
#include "uci/type/StoreStateEnum.h"
#include "uci/type/StrikeMessageOutputsEnum.h"
#include "uci/type/StrikeStateEnum.h"
#include "uci/type/SubPlanTypeEnum.h"
#include "uci/type/SubmarineConfidenceLevelEnum.h"
#include "uci/type/SubsystemBIT_ControlInterfacesEnum.h"
#include "uci/type/SubsystemBIT_ResultEnum.h"
#include "uci/type/SubsystemCalibrationControlInterfacesEnum.h"
#include "uci/type/SubsystemCalibrationResultEnum.h"
#include "uci/type/SubsystemEraseCommandEnum.h"
#include "uci/type/SubsystemMaintenanceCommandEnum.h"
#include "uci/type/SubsystemMaintenanceControlInterfacesEnum.h"
#include "uci/type/SubsystemMaintenanceResultStatusEnum.h"
#include "uci/type/SubsystemSettingEnum.h"
#include "uci/type/SubsystemStateEnum.h"
#include "uci/type/SupportCapabilityTypeEnum.h"
#include "uci/type/SupportedFunctionEnum.h"
#include "uci/type/SurfaceTypeEnum.h"
#include "uci/type/SwapEnum.h"
#include "uci/type/SystemContingencyLevelEnum.h"
#include "uci/type/SystemDeploymentEnum.h"
#include "uci/type/SystemSourceEnum.h"
#include "uci/type/SystemStateEnum.h"
#include "uci/type/TCP_SessionStatusEnum.h"
#include "uci/type/TacticalOrderCapabilityEnum.h"
#include "uci/type/TacticalPlanningAndExecutionEnum.h"
#include "uci/type/TailConeLightEnum.h"
#include "uci/type/TargetDefensesEnum.h"
#include "uci/type/TargetHardnessEnum.h"
#include "uci/type/TargetTypeEnum.h"
#include "uci/type/TaskTypeEnum.h"
#include "uci/type/TemperatureStateEnum.h"
#include "uci/type/TextReportActionEnum.h"
#include "uci/type/ThreadAvailabiltyEnum.h"
#include "uci/type/ThreatCapabilityEnum.h"
#include "uci/type/ThreatEnum.h"
#include "uci/type/ThreatPostureEnum.h"
#include "uci/type/ThreatWeaponEnum.h"
#include "uci/type/TimeFunctionEnum.h"
#include "uci/type/TrackModeEnum.h"
#include "uci/type/TurnPointTypeEnum.h"
#include "uci/type/TypeOfDependencyEnum.h"
#include "uci/type/UncertaintyEnum.h"
#include "uci/type/UnitTypeEnum.h"
#include "uci/type/V_BarApproachEnum.h"
#include "uci/type/VehicleActionEnum.h"
#include "uci/type/VehicleControlStrategyEnum.h"
#include "uci/type/VehicleLossOfLinkProcessingEnum.h"
#include "uci/type/VehicleSurvivabilityModeEnum.h"
#include "uci/type/VerticalCenterOfGravityTrendEnum.h"
#include "uci/type/VideoBlockSizeEnum.h"
#include "uci/type/VideoChromaSubsampleEnum.h"
#include "uci/type/VideoEncoderCompressionModeEnum.h"
#include "uci/type/VulnerabilityTypeEnum.h"
#include "uci/type/WaypointTypeEnum.h"
#include "uci/type/WeaponFuzeModeEnum.h"
#include "uci/type/WeaponFuzePositionEnum.h"
#include "uci/type/WeaponTypeEnum.h"
#include "uci/type/WeatherCloudCoverEnum.h"
#include "uci/type/WeatherDescriptionEnum.h"
#include "uci/type/WeatherKindEnum.h"
#include "uci/type/WeatherPrecipitationAmplificationEnum.h"
#include "uci/type/WeatherPrecipitationEnum.h"
#include "uci/type/WeatherRadarCapabilityEnum.h"
#include "uci/type/WeatherRadarMessageOutputsEnum.h"
#include "uci/type/WeatherReportTypeEnum.h"
#include "uci/type/WeatherRoadStateEnum.h"
#include "uci/type/WeatherSeaStateAmplificationEnum.h"
#include "uci/type/WeatherSeaStateEnum.h"
#include "uci/type/WeatherSeverityEnum.h"
#include "uci/type/WeatherSourceEnum.h"
#include "uci/type/WeatherTerrainStateEnum.h"
#include "uci/type/WeatherVisibilityEnum.h"
#include "uci/type/WeatherWarningEnum.h"
#include "uci/type/WeekdayEnum.h"
#include "uci/type/YearOfEquinoxEnum.h"
#include "uci/type/ZoneRelationEnum.h"

/**  */
namespace extxml_uci {

/** The namespace in which all base data types are declared */
namespace base {

bool extxml_uci::base::ExternalizerRead10::read(const boost::property_tree::ptree& propTree, uci::base::Accessor& accessor, std::string& nodeName, std::string& nsPrefix) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::frequencySwitchingPatternEnum:
      return extxml_uci::type::FrequencySwitchingPatternEnum::deserialize(propTree, dynamic_cast<uci::type::FrequencySwitchingPatternEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::fuelFlowModeEnum:
      return extxml_uci::type::FuelFlowModeEnum::deserialize(propTree, dynamic_cast<uci::type::FuelFlowModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::fusionUpdatesEnum:
      return extxml_uci::type::FusionUpdatesEnum::deserialize(propTree, dynamic_cast<uci::type::FusionUpdatesEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::gainControlMethodEnum:
      return extxml_uci::type::GainControlMethodEnum::deserialize(propTree, dynamic_cast<uci::type::GainControlMethodEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::gatewayLink16ConfigurationClassEnum:
      return extxml_uci::type::GatewayLink16ConfigurationClassEnum::deserialize(propTree, dynamic_cast<uci::type::GatewayLink16ConfigurationClassEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::gatewayLink16ConfigurationCompassQuadrantEnum:
      return extxml_uci::type::GatewayLink16ConfigurationCompassQuadrantEnum::deserialize(propTree, dynamic_cast<uci::type::GatewayLink16ConfigurationCompassQuadrantEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::gatewayLink16ConfigurationSideEnum:
      return extxml_uci::type::GatewayLink16ConfigurationSideEnum::deserialize(propTree, dynamic_cast<uci::type::GatewayLink16ConfigurationSideEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::gENC_CountryNameEnum:
      return extxml_uci::type::GENC_CountryNameEnum::deserialize(propTree, dynamic_cast<uci::type::GENC_CountryNameEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::genericUnitTypeEnum:
      return extxml_uci::type::GenericUnitTypeEnum::deserialize(propTree, dynamic_cast<uci::type::GenericUnitTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::geomagneticRecordApEnum:
      return extxml_uci::type::GeomagneticRecordApEnum::deserialize(propTree, dynamic_cast<uci::type::GeomagneticRecordApEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::geomagneticRecordKpEnum:
      return extxml_uci::type::GeomagneticRecordKpEnum::deserialize(propTree, dynamic_cast<uci::type::GeomagneticRecordKpEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::gravityModelEnum:
      return extxml_uci::type::GravityModelEnum::deserialize(propTree, dynamic_cast<uci::type::GravityModelEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::groundTerrainTypeEnum:
      return extxml_uci::type::GroundTerrainTypeEnum::deserialize(propTree, dynamic_cast<uci::type::GroundTerrainTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::hoseCutCommandEnum:
      return extxml_uci::type::HoseCutCommandEnum::deserialize(propTree, dynamic_cast<uci::type::HoseCutCommandEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::hoseCutStatusEnum:
      return extxml_uci::type::HoseCutStatusEnum::deserialize(propTree, dynamic_cast<uci::type::HoseCutStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::identificationTypeEnum:
      return extxml_uci::type::IdentificationTypeEnum::deserialize(propTree, dynamic_cast<uci::type::IdentificationTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::iEEE_FrequencyBandEnum:
      return extxml_uci::type::IEEE_FrequencyBandEnum::deserialize(propTree, dynamic_cast<uci::type::IEEE_FrequencyBandEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::iFF_ActivePassiveEnum:
      return extxml_uci::type::IFF_ActivePassiveEnum::deserialize(propTree, dynamic_cast<uci::type::IFF_ActivePassiveEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::iFF_CivilMilitaryEnum:
      return extxml_uci::type::IFF_CivilMilitaryEnum::deserialize(propTree, dynamic_cast<uci::type::IFF_CivilMilitaryEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::iFF_LethalNonLethalEnum:
      return extxml_uci::type::IFF_LethalNonLethalEnum::deserialize(propTree, dynamic_cast<uci::type::IFF_LethalNonLethalEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::iFF_MessageOutputsEnum:
      return extxml_uci::type::IFF_MessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::IFF_MessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::iFF_ModeS_SupportEnum:
      return extxml_uci::type::IFF_ModeS_SupportEnum::deserialize(propTree, dynamic_cast<uci::type::IFF_ModeS_SupportEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::iFF_ModesEnum:
      return extxml_uci::type::IFF_ModesEnum::deserialize(propTree, dynamic_cast<uci::type::IFF_ModesEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::iFF_SubCapabilityEnum:
      return extxml_uci::type::IFF_SubCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::IFF_SubCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::iFF_TransponderActivityStatusEnum:
      return extxml_uci::type::IFF_TransponderActivityStatusEnum::deserialize(propTree, dynamic_cast<uci::type::IFF_TransponderActivityStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::imagePixelDepthEnum:
      return extxml_uci::type::ImagePixelDepthEnum::deserialize(propTree, dynamic_cast<uci::type::ImagePixelDepthEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::imageRemapEnum:
      return extxml_uci::type::ImageRemapEnum::deserialize(propTree, dynamic_cast<uci::type::ImageRemapEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::imageWeightEnum:
      return extxml_uci::type::ImageWeightEnum::deserialize(propTree, dynamic_cast<uci::type::ImageWeightEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::iMU_AlignmentEnum:
      return extxml_uci::type::IMU_AlignmentEnum::deserialize(propTree, dynamic_cast<uci::type::IMU_AlignmentEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::inclusionEnum:
      return extxml_uci::type::InclusionEnum::deserialize(propTree, dynamic_cast<uci::type::InclusionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::increaseDecreaseEnum:
      return extxml_uci::type::IncreaseDecreaseEnum::deserialize(propTree, dynamic_cast<uci::type::IncreaseDecreaseEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::incrementalChangeEnum:
      return extxml_uci::type::IncrementalChangeEnum::deserialize(propTree, dynamic_cast<uci::type::IncrementalChangeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::initialStepSizeEnum:
      return extxml_uci::type::InitialStepSizeEnum::deserialize(propTree, dynamic_cast<uci::type::InitialStepSizeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::integrationMethodEnum:
      return extxml_uci::type::IntegrationMethodEnum::deserialize(propTree, dynamic_cast<uci::type::IntegrationMethodEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::interfacePlanTypeEnum:
      return extxml_uci::type::InterfacePlanTypeEnum::deserialize(propTree, dynamic_cast<uci::type::InterfacePlanTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::interfaceStateEnum:
      return extxml_uci::type::InterfaceStateEnum::deserialize(propTree, dynamic_cast<uci::type::InterfaceStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::interrogationStatusEnum:
      return extxml_uci::type::InterrogationStatusEnum::deserialize(propTree, dynamic_cast<uci::type::InterrogationStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::iO_PortOpenCloseStateEnum:
      return extxml_uci::type::IO_PortOpenCloseStateEnum::deserialize(propTree, dynamic_cast<uci::type::IO_PortOpenCloseStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::iO_PortTypeEnum:
      return extxml_uci::type::IO_PortTypeEnum::deserialize(propTree, dynamic_cast<uci::type::IO_PortTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::iP_ProtocolEnum:
      return extxml_uci::type::IP_ProtocolEnum::deserialize(propTree, dynamic_cast<uci::type::IP_ProtocolEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::jammerStationEnum:
      return extxml_uci::type::JammerStationEnum::deserialize(propTree, dynamic_cast<uci::type::JammerStationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::jPEG_WaveletTypeEnum:
      return extxml_uci::type::JPEG_WaveletTypeEnum::deserialize(propTree, dynamic_cast<uci::type::JPEG_WaveletTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::jREAP_TimeReferenceEnum:
      return extxml_uci::type::JREAP_TimeReferenceEnum::deserialize(propTree, dynamic_cast<uci::type::JREAP_TimeReferenceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::lAR_BasisEnum:
      return extxml_uci::type::LAR_BasisEnum::deserialize(propTree, dynamic_cast<uci::type::LAR_BasisEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::lAR_RelationEnum:
      return extxml_uci::type::LAR_RelationEnum::deserialize(propTree, dynamic_cast<uci::type::LAR_RelationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::lAR_WindSourceEnum:
      return extxml_uci::type::LAR_WindSourceEnum::deserialize(propTree, dynamic_cast<uci::type::LAR_WindSourceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::lateralCenterOfGravityTrendEnum:
      return extxml_uci::type::LateralCenterOfGravityTrendEnum::deserialize(propTree, dynamic_cast<uci::type::LateralCenterOfGravityTrendEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::launchCapabilityEnum:
      return extxml_uci::type::LaunchCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::LaunchCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::launchPointCalculationEnum:
      return extxml_uci::type::LaunchPointCalculationEnum::deserialize(propTree, dynamic_cast<uci::type::LaunchPointCalculationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::likelihoodEnum:
      return extxml_uci::type::LikelihoodEnum::deserialize(propTree, dynamic_cast<uci::type::LikelihoodEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::lineProjectionEnum:
      return extxml_uci::type::LineProjectionEnum::deserialize(propTree, dynamic_cast<uci::type::LineProjectionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::link16DepthEnum:
      return extxml_uci::type::Link16DepthEnum::deserialize(propTree, dynamic_cast<uci::type::Link16DepthEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::link16HazardBurstEnum:
      return extxml_uci::type::Link16HazardBurstEnum::deserialize(propTree, dynamic_cast<uci::type::Link16HazardBurstEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::link16HazardYieldEnum:
      return extxml_uci::type::Link16HazardYieldEnum::deserialize(propTree, dynamic_cast<uci::type::Link16HazardYieldEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::link16SensorTypeEnum:
      return extxml_uci::type::Link16SensorTypeEnum::deserialize(propTree, dynamic_cast<uci::type::Link16SensorTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::lockIndicatorEnum:
      return extxml_uci::type::LockIndicatorEnum::deserialize(propTree, dynamic_cast<uci::type::LockIndicatorEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::logicalOperatorEnum:
      return extxml_uci::type::LogicalOperatorEnum::deserialize(propTree, dynamic_cast<uci::type::LogicalOperatorEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::logSeverityEnum:
      return extxml_uci::type::LogSeverityEnum::deserialize(propTree, dynamic_cast<uci::type::LogSeverityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::longitudinalCenterOfGravityTrendEnum:
      return extxml_uci::type::LongitudinalCenterOfGravityTrendEnum::deserialize(propTree, dynamic_cast<uci::type::LongitudinalCenterOfGravityTrendEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::lOS_MeasurementEnum:
      return extxml_uci::type::LOS_MeasurementEnum::deserialize(propTree, dynamic_cast<uci::type::LOS_MeasurementEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::lOS_ReferenceEnum:
      return extxml_uci::type::LOS_ReferenceEnum::deserialize(propTree, dynamic_cast<uci::type::LOS_ReferenceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::maxPOR_Enum:
      return extxml_uci::type::MaxPOR_Enum::deserialize(propTree, dynamic_cast<uci::type::MaxPOR_Enum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mDF_StatusEnum:
      return extxml_uci::type::MDF_StatusEnum::deserialize(propTree, dynamic_cast<uci::type::MDF_StatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::measurementQualityEnum:
      return extxml_uci::type::MeasurementQualityEnum::deserialize(propTree, dynamic_cast<uci::type::MeasurementQualityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::measurementReportSourceTypeEnum:
      return extxml_uci::type::MeasurementReportSourceTypeEnum::deserialize(propTree, dynamic_cast<uci::type::MeasurementReportSourceTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::measurementStatusEnum:
      return extxml_uci::type::MeasurementStatusEnum::deserialize(propTree, dynamic_cast<uci::type::MeasurementStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::measurementTypeEnum:
      return extxml_uci::type::MeasurementTypeEnum::deserialize(propTree, dynamic_cast<uci::type::MeasurementTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mediaLocationStatusEnum:
      return extxml_uci::type::MediaLocationStatusEnum::deserialize(propTree, dynamic_cast<uci::type::MediaLocationStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mergeEnum:
      return extxml_uci::type::MergeEnum::deserialize(propTree, dynamic_cast<uci::type::MergeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::messageDataVerificationEnum:
      return extxml_uci::type::MessageDataVerificationEnum::deserialize(propTree, dynamic_cast<uci::type::MessageDataVerificationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::messageElementDataTypeEnum:
      return extxml_uci::type::MessageElementDataTypeEnum::deserialize(propTree, dynamic_cast<uci::type::MessageElementDataTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::messageModeEnum:
      return extxml_uci::type::MessageModeEnum::deserialize(propTree, dynamic_cast<uci::type::MessageModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::messageTypeDropRestrictionEnum:
      return extxml_uci::type::MessageTypeDropRestrictionEnum::deserialize(propTree, dynamic_cast<uci::type::MessageTypeDropRestrictionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::messageTypeEnum:
      return extxml_uci::type::MessageTypeEnum::deserialize(propTree, dynamic_cast<uci::type::MessageTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mISP_OperationalModeEnum:
      return extxml_uci::type::MISP_OperationalModeEnum::deserialize(propTree, dynamic_cast<uci::type::MISP_OperationalModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missileEmitterModeEnum:
      return extxml_uci::type::MissileEmitterModeEnum::deserialize(propTree, dynamic_cast<uci::type::MissileEmitterModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionCommunicationsStateEnum:
      return extxml_uci::type::MissionCommunicationsStateEnum::deserialize(propTree, dynamic_cast<uci::type::MissionCommunicationsStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanningByCaseTriggerEnum:
      return extxml_uci::type::MissionPlanningByCaseTriggerEnum::deserialize(propTree, dynamic_cast<uci::type::MissionPlanningByCaseTriggerEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionStateEnum:
      return extxml_uci::type::MissionStateEnum::deserialize(propTree, dynamic_cast<uci::type::MissionStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionTraceabilityEnum:
      return extxml_uci::type::MissionTraceabilityEnum::deserialize(propTree, dynamic_cast<uci::type::MissionTraceabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mobilityEnum:
      return extxml_uci::type::MobilityEnum::deserialize(propTree, dynamic_cast<uci::type::MobilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mode4CodeEnum:
      return extxml_uci::type::Mode4CodeEnum::deserialize(propTree, dynamic_cast<uci::type::Mode4CodeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::modulationEnum:
      return extxml_uci::type::ModulationEnum::deserialize(propTree, dynamic_cast<uci::type::ModulationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mTI_TargetClassEnum:
      return extxml_uci::type::MTI_TargetClassEnum::deserialize(propTree, dynamic_cast<uci::type::MTI_TargetClassEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::multistaticModeActivationEnum:
      return extxml_uci::type::MultistaticModeActivationEnum::deserialize(propTree, dynamic_cast<uci::type::MultistaticModeActivationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::multistaticModeStatusEnum:
      return extxml_uci::type::MultistaticModeStatusEnum::deserialize(propTree, dynamic_cast<uci::type::MultistaticModeStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::navigationSolutionStateEnum:
      return extxml_uci::type::NavigationSolutionStateEnum::deserialize(propTree, dynamic_cast<uci::type::NavigationSolutionStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::negotiableOptionsEnum:
      return extxml_uci::type::NegotiableOptionsEnum::deserialize(propTree, dynamic_cast<uci::type::NegotiableOptionsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::networkLinkActionTypeEnum:
      return extxml_uci::type::NetworkLinkActionTypeEnum::deserialize(propTree, dynamic_cast<uci::type::NetworkLinkActionTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::noiseAdaptiveThresholdStatusEnum:
      return extxml_uci::type::NoiseAdaptiveThresholdStatusEnum::deserialize(propTree, dynamic_cast<uci::type::NoiseAdaptiveThresholdStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::normalizationInterpolationEnum:
      return extxml_uci::type::NormalizationInterpolationEnum::deserialize(propTree, dynamic_cast<uci::type::NormalizationInterpolationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::notificationCategoryEnum:
      return extxml_uci::type::NotificationCategoryEnum::deserialize(propTree, dynamic_cast<uci::type::NotificationCategoryEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::notificationPerspectiveEnum:
      return extxml_uci::type::NotificationPerspectiveEnum::deserialize(propTree, dynamic_cast<uci::type::NotificationPerspectiveEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::notificationSeverityEnum:
      return extxml_uci::type::NotificationSeverityEnum::deserialize(propTree, dynamic_cast<uci::type::NotificationSeverityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::notificationStateEnum:
      return extxml_uci::type::NotificationStateEnum::deserialize(propTree, dynamic_cast<uci::type::NotificationStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::nPSI_Enum:
      return extxml_uci::type::NPSI_Enum::deserialize(propTree, dynamic_cast<uci::type::NPSI_Enum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::oB_OperationalStatusEnum:
      return extxml_uci::type::OB_OperationalStatusEnum::deserialize(propTree, dynamic_cast<uci::type::OB_OperationalStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::objectStateEnum:
      return extxml_uci::type::ObjectStateEnum::deserialize(propTree, dynamic_cast<uci::type::ObjectStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::observedOperationalStatusEnum:
      return extxml_uci::type::ObservedOperationalStatusEnum::deserialize(propTree, dynamic_cast<uci::type::ObservedOperationalStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::offsetXY_Enum:
      return extxml_uci::type::OffsetXY_Enum::deserialize(propTree, dynamic_cast<uci::type::OffsetXY_Enum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opConstraintEnum:
      return extxml_uci::type::OpConstraintEnum::deserialize(propTree, dynamic_cast<uci::type::OpConstraintEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opConstraintTypeEnum:
      return extxml_uci::type::OpConstraintTypeEnum::deserialize(propTree, dynamic_cast<uci::type::OpConstraintTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operationalCapabilityEnum:
      return extxml_uci::type::OperationalCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::OperationalCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operationalImpairmentEnum:
      return extxml_uci::type::OperationalImpairmentEnum::deserialize(propTree, dynamic_cast<uci::type::OperationalImpairmentEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operationalStatusEnum:
      return extxml_uci::type::OperationalStatusEnum::deserialize(propTree, dynamic_cast<uci::type::OperationalStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorContingencyActionEnum:
      return extxml_uci::type::OperatorContingencyActionEnum::deserialize(propTree, dynamic_cast<uci::type::OperatorContingencyActionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorStatusEnum:
      return extxml_uci::type::OperatorStatusEnum::deserialize(propTree, dynamic_cast<uci::type::OperatorStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorUniqueNameEnum:
      return extxml_uci::type::OperatorUniqueNameEnum::deserialize(propTree, dynamic_cast<uci::type::OperatorUniqueNameEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opInteractionEnum:
      return extxml_uci::type::OpInteractionEnum::deserialize(propTree, dynamic_cast<uci::type::OpInteractionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opLineCategoryEnum:
      return extxml_uci::type::OpLineCategoryEnum::deserialize(propTree, dynamic_cast<uci::type::OpLineCategoryEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opPointEmergencyEnum:
      return extxml_uci::type::OpPointEmergencyEnum::deserialize(propTree, dynamic_cast<uci::type::OpPointEmergencyEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opPointGeneralEnum:
      return extxml_uci::type::OpPointGeneralEnum::deserialize(propTree, dynamic_cast<uci::type::OpPointGeneralEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opPointHazardEnum:
      return extxml_uci::type::OpPointHazardEnum::deserialize(propTree, dynamic_cast<uci::type::OpPointHazardEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opPointReferenceEnum:
      return extxml_uci::type::OpPointReferenceEnum::deserialize(propTree, dynamic_cast<uci::type::OpPointReferenceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opPointStationEnum:
      return extxml_uci::type::OpPointStationEnum::deserialize(propTree, dynamic_cast<uci::type::OpPointStationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opStateEnum:
      return extxml_uci::type::OpStateEnum::deserialize(propTree, dynamic_cast<uci::type::OpStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opZoneCategoryEnum:
      return extxml_uci::type::OpZoneCategoryEnum::deserialize(propTree, dynamic_cast<uci::type::OpZoneCategoryEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opZoneFilterEnum:
      return extxml_uci::type::OpZoneFilterEnum::deserialize(propTree, dynamic_cast<uci::type::OpZoneFilterEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalBreakupEnum:
      return extxml_uci::type::OrbitalBreakupEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitalBreakupEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalConjunctionEnum:
      return extxml_uci::type::OrbitalConjunctionEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitalConjunctionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDebrisEstimateEnum:
      return extxml_uci::type::OrbitalDebrisEstimateEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisEstimateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalEventEnum:
      return extxml_uci::type::OrbitalEventEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitalEventEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalKinematicsSourceEnum:
      return extxml_uci::type::OrbitalKinematicsSourceEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitalKinematicsSourceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalManeuverStateEnum:
      return extxml_uci::type::OrbitalManeuverStateEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitalManeuverStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalManeuverTypeEnum:
      return extxml_uci::type::OrbitalManeuverTypeEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitalManeuverTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalModelNameEnum:
      return extxml_uci::type::OrbitalModelNameEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitalModelNameEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceCapabilityEnum:
      return extxml_uci::type::OrbitalSurveillanceCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceMessageOutputsEnum:
      return extxml_uci::type::OrbitalSurveillanceMessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceMessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityEnum:
      return extxml_uci::type::OrbitalSurveillanceSensorCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorMessageOutputsEnum:
      return extxml_uci::type::OrbitalSurveillanceSensorMessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorMessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSizeDataEnum:
      return extxml_uci::type::OrbitalSurveillanceSizeDataEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSizeDataEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSizeTypeEnum:
      return extxml_uci::type::OrbitalSurveillanceSizeTypeEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSizeTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSubCapabilityEnum:
      return extxml_uci::type::OrbitalSurveillanceSubCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSubCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitAltitudeEnum:
      return extxml_uci::type::OrbitAltitudeEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitAltitudeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitChangeCapabilityEnum:
      return extxml_uci::type::OrbitChangeCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitClassEnum:
      return extxml_uci::type::OrbitClassEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitClassEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitConjunctionAssessmentEnum:
      return extxml_uci::type::OrbitConjunctionAssessmentEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitConjunctionAssessmentEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitEnum:
      return extxml_uci::type::OrbitEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitKinematicsEnum:
      return extxml_uci::type::OrbitKinematicsEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanManeuverTypeEnum:
      return extxml_uci::type::OrbitPlanManeuverTypeEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanManeuverTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanPartsEnum:
      return extxml_uci::type::OrbitPlanPartsEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanPartsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitQualitativeEnum:
      return extxml_uci::type::OrbitQualitativeEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitQualitativeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitRegimeEnum:
      return extxml_uci::type::OrbitRegimeEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitRegimeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitValidationErrorEnum:
      return extxml_uci::type::OrbitValidationErrorEnum::deserialize(propTree, dynamic_cast<uci::type::OrbitValidationErrorEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orderOfBattleEnum:
      return extxml_uci::type::OrderOfBattleEnum::deserialize(propTree, dynamic_cast<uci::type::OrderOfBattleEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::packageOperationEnum:
      return extxml_uci::type::PackageOperationEnum::deserialize(propTree, dynamic_cast<uci::type::PackageOperationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pairIdentifierEnum:
      return extxml_uci::type::PairIdentifierEnum::deserialize(propTree, dynamic_cast<uci::type::PairIdentifierEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pairingRelationshipEnum:
      return extxml_uci::type::PairingRelationshipEnum::deserialize(propTree, dynamic_cast<uci::type::PairingRelationshipEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::parityTypeEnum:
      return extxml_uci::type::ParityTypeEnum::deserialize(propTree, dynamic_cast<uci::type::ParityTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::passiveActiveEnum:
      return extxml_uci::type::PassiveActiveEnum::deserialize(propTree, dynamic_cast<uci::type::PassiveActiveEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathIdentificationEnum:
      return extxml_uci::type::PathIdentificationEnum::deserialize(propTree, dynamic_cast<uci::type::PathIdentificationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathSegmentSourceEnum:
      return extxml_uci::type::PathSegmentSourceEnum::deserialize(propTree, dynamic_cast<uci::type::PathSegmentSourceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathTypeEnum:
      return extxml_uci::type::PathTypeEnum::deserialize(propTree, dynamic_cast<uci::type::PathTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planActivationCommandEnum:
      return extxml_uci::type::PlanActivationCommandEnum::deserialize(propTree, dynamic_cast<uci::type::PlanActivationCommandEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planActivationStateEnum:
      return extxml_uci::type::PlanActivationStateEnum::deserialize(propTree, dynamic_cast<uci::type::PlanActivationStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planChangeableConstraintsEnum:
      return extxml_uci::type::PlanChangeableConstraintsEnum::deserialize(propTree, dynamic_cast<uci::type::PlanChangeableConstraintsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planConfigurationActivationCommandEnum:
      return extxml_uci::type::PlanConfigurationActivationCommandEnum::deserialize(propTree, dynamic_cast<uci::type::PlanConfigurationActivationCommandEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planConfigurationStateEnum:
      return extxml_uci::type::PlanConfigurationStateEnum::deserialize(propTree, dynamic_cast<uci::type::PlanConfigurationStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planConstraintUsageEnum:
      return extxml_uci::type::PlanConstraintUsageEnum::deserialize(propTree, dynamic_cast<uci::type::PlanConstraintUsageEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planExecutionStateEnum:
      return extxml_uci::type::PlanExecutionStateEnum::deserialize(propTree, dynamic_cast<uci::type::PlanExecutionStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planInitiationSourceEnum:
      return extxml_uci::type::PlanInitiationSourceEnum::deserialize(propTree, dynamic_cast<uci::type::PlanInitiationSourceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planningDataSourceEnum:
      return extxml_uci::type::PlanningDataSourceEnum::deserialize(propTree, dynamic_cast<uci::type::PlanningDataSourceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planningInterfaceEnum:
      return extxml_uci::type::PlanningInterfaceEnum::deserialize(propTree, dynamic_cast<uci::type::PlanningInterfaceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planningResultEnum:
      return extxml_uci::type::PlanningResultEnum::deserialize(propTree, dynamic_cast<uci::type::PlanningResultEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planningStateEnum:
      return extxml_uci::type::PlanningStateEnum::deserialize(propTree, dynamic_cast<uci::type::PlanningStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planningTriggerSourceEnum:
      return extxml_uci::type::PlanningTriggerSourceEnum::deserialize(propTree, dynamic_cast<uci::type::PlanningTriggerSourceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planPolicyProcessingEnum:
      return extxml_uci::type::PlanPolicyProcessingEnum::deserialize(propTree, dynamic_cast<uci::type::PlanPolicyProcessingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planSimultaneityEnum:
      return extxml_uci::type::PlanSimultaneityEnum::deserialize(propTree, dynamic_cast<uci::type::PlanSimultaneityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planTypeEnum:
      return extxml_uci::type::PlanTypeEnum::deserialize(propTree, dynamic_cast<uci::type::PlanTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planValidationStateEnum:
      return extxml_uci::type::PlanValidationStateEnum::deserialize(propTree, dynamic_cast<uci::type::PlanValidationStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::platformFunctionAirEnum:
      return extxml_uci::type::PlatformFunctionAirEnum::deserialize(propTree, dynamic_cast<uci::type::PlatformFunctionAirEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::platformFunctionEW_Enum:
      return extxml_uci::type::PlatformFunctionEW_Enum::deserialize(propTree, dynamic_cast<uci::type::PlatformFunctionEW_Enum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::platformFunctionGroundEnum:
      return extxml_uci::type::PlatformFunctionGroundEnum::deserialize(propTree, dynamic_cast<uci::type::PlatformFunctionGroundEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::platformFunctionSeaSurfaceEnum:
      return extxml_uci::type::PlatformFunctionSeaSurfaceEnum::deserialize(propTree, dynamic_cast<uci::type::PlatformFunctionSeaSurfaceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pMOP_Enum:
      return extxml_uci::type::PMOP_Enum::deserialize(propTree, dynamic_cast<uci::type::PMOP_Enum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pMOP_SequenceEnum:
      return extxml_uci::type::PMOP_SequenceEnum::deserialize(propTree, dynamic_cast<uci::type::PMOP_SequenceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pO_CapabilityEnum:
      return extxml_uci::type::PO_CapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::PO_CapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pO_CollectionConstraintsEnum:
      return extxml_uci::type::PO_CollectionConstraintsEnum::deserialize(propTree, dynamic_cast<uci::type::PO_CollectionConstraintsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pO_EnvironmentEnum:
      return extxml_uci::type::PO_EnvironmentEnum::deserialize(propTree, dynamic_cast<uci::type::PO_EnvironmentEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pO_FilterEnum:
      return extxml_uci::type::PO_FilterEnum::deserialize(propTree, dynamic_cast<uci::type::PO_FilterEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pO_FPA_ChannelOperationEnum:
      return extxml_uci::type::PO_FPA_ChannelOperationEnum::deserialize(propTree, dynamic_cast<uci::type::PO_FPA_ChannelOperationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pO_GimbalOrientationReferenceFrameEnum:
      return extxml_uci::type::PO_GimbalOrientationReferenceFrameEnum::deserialize(propTree, dynamic_cast<uci::type::PO_GimbalOrientationReferenceFrameEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pO_LockPersistenceEnum:
      return extxml_uci::type::PO_LockPersistenceEnum::deserialize(propTree, dynamic_cast<uci::type::PO_LockPersistenceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pO_MessageOutputsEnum:
      return extxml_uci::type::PO_MessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::PO_MessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pO_ProcessingStageTypeEnum:
      return extxml_uci::type::PO_ProcessingStageTypeEnum::deserialize(propTree, dynamic_cast<uci::type::PO_ProcessingStageTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pO_TechniqueEnum:
      return extxml_uci::type::PO_TechniqueEnum::deserialize(propTree, dynamic_cast<uci::type::PO_TechniqueEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pO_TrackCapabilityTypeEnum:
      return extxml_uci::type::PO_TrackCapabilityTypeEnum::deserialize(propTree, dynamic_cast<uci::type::PO_TrackCapabilityTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pO_TrackCommandEnum:
      return extxml_uci::type::PO_TrackCommandEnum::deserialize(propTree, dynamic_cast<uci::type::PO_TrackCommandEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pO_TrackModeEnum:
      return extxml_uci::type::PO_TrackModeEnum::deserialize(propTree, dynamic_cast<uci::type::PO_TrackModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pointingControlModeEnum:
      return extxml_uci::type::PointingControlModeEnum::deserialize(propTree, dynamic_cast<uci::type::PointingControlModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pointingControlModeStatusEnum:
      return extxml_uci::type::PointingControlModeStatusEnum::deserialize(propTree, dynamic_cast<uci::type::PointingControlModeStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pointingTypeEnum:
      return extxml_uci::type::PointingTypeEnum::deserialize(propTree, dynamic_cast<uci::type::PointingTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pointingVectorCommandTypeEnum:
      return extxml_uci::type::PointingVectorCommandTypeEnum::deserialize(propTree, dynamic_cast<uci::type::PointingVectorCommandTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pointingVectorStateEnum:
      return extxml_uci::type::PointingVectorStateEnum::deserialize(propTree, dynamic_cast<uci::type::PointingVectorStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pointingVectorStatusEnum:
      return extxml_uci::type::PointingVectorStatusEnum::deserialize(propTree, dynamic_cast<uci::type::PointingVectorStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pointTrackEnum:
      return extxml_uci::type::PointTrackEnum::deserialize(propTree, dynamic_cast<uci::type::PointTrackEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::polarizationEnum:
      return extxml_uci::type::PolarizationEnum::deserialize(propTree, dynamic_cast<uci::type::PolarizationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::polarizationPortEnum:
      return extxml_uci::type::PolarizationPortEnum::deserialize(propTree, dynamic_cast<uci::type::PolarizationPortEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::polarizationSenseEnum:
      return extxml_uci::type::PolarizationSenseEnum::deserialize(propTree, dynamic_cast<uci::type::PolarizationSenseEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::positionModeEnum:
      return extxml_uci::type::PositionModeEnum::deserialize(propTree, dynamic_cast<uci::type::PositionModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::positionTimeQualityEnum:
      return extxml_uci::type::PositionTimeQualityEnum::deserialize(propTree, dynamic_cast<uci::type::PositionTimeQualityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pressureStateEnum:
      return extxml_uci::type::PressureStateEnum::deserialize(propTree, dynamic_cast<uci::type::PressureStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pRI_AgilePatternEnum:
      return extxml_uci::type::PRI_AgilePatternEnum::deserialize(propTree, dynamic_cast<uci::type::PRI_AgilePatternEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pRI_MeasurementEnum:
      return extxml_uci::type::PRI_MeasurementEnum::deserialize(propTree, dynamic_cast<uci::type::PRI_MeasurementEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pRI_SwitchingPatternEnum:
      return extxml_uci::type::PRI_SwitchingPatternEnum::deserialize(propTree, dynamic_cast<uci::type::PRI_SwitchingPatternEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pRI_TypeEnum:
      return extxml_uci::type::PRI_TypeEnum::deserialize(propTree, dynamic_cast<uci::type::PRI_TypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::prioritizationListEnum:
      return extxml_uci::type::PrioritizationListEnum::deserialize(propTree, dynamic_cast<uci::type::PrioritizationListEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::processingStatusEnum:
      return extxml_uci::type::ProcessingStatusEnum::deserialize(propTree, dynamic_cast<uci::type::ProcessingStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::processingTypeEnum:
      return extxml_uci::type::ProcessingTypeEnum::deserialize(propTree, dynamic_cast<uci::type::ProcessingTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::productClassificationRequestEnum:
      return extxml_uci::type::ProductClassificationRequestEnum::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationRequestEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::productManagementTaskStateEnum:
      return extxml_uci::type::ProductManagementTaskStateEnum::deserialize(propTree, dynamic_cast<uci::type::ProductManagementTaskStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::productProcessingFunctionMessageOutputsEnum:
      return extxml_uci::type::ProductProcessingFunctionMessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingFunctionMessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::productTypeEnum:
      return extxml_uci::type::ProductTypeEnum::deserialize(propTree, dynamic_cast<uci::type::ProductTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pushContentsEnum:
      return extxml_uci::type::PushContentsEnum::deserialize(propTree, dynamic_cast<uci::type::PushContentsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::qualityOfObsEnum:
      return extxml_uci::type::QualityOfObsEnum::deserialize(propTree, dynamic_cast<uci::type::QualityOfObsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::r_BarApproachEnum:
      return extxml_uci::type::R_BarApproachEnum::deserialize(propTree, dynamic_cast<uci::type::R_BarApproachEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::radarAltimeterCapabilityEnum:
      return extxml_uci::type::RadarAltimeterCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::radarAltimeterMessageOutputsEnum:
      return extxml_uci::type::RadarAltimeterMessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterMessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::radarAltimeterSubCapabilityEnum:
      return extxml_uci::type::RadarAltimeterSubCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterSubCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::radarBeamPersistenceEnum:
      return extxml_uci::type::RadarBeamPersistenceEnum::deserialize(propTree, dynamic_cast<uci::type::RadarBeamPersistenceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::radarBeamTypeEnum:
      return extxml_uci::type::RadarBeamTypeEnum::deserialize(propTree, dynamic_cast<uci::type::RadarBeamTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::radarChannelIndicatorEnum:
      return extxml_uci::type::RadarChannelIndicatorEnum::deserialize(propTree, dynamic_cast<uci::type::RadarChannelIndicatorEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::radarModeEnum:
      return extxml_uci::type::RadarModeEnum::deserialize(propTree, dynamic_cast<uci::type::RadarModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::radarSpoilTypeEnum:
      return extxml_uci::type::RadarSpoilTypeEnum::deserialize(propTree, dynamic_cast<uci::type::RadarSpoilTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::radarWeightingFunctionsEnum:
      return extxml_uci::type::RadarWeightingFunctionsEnum::deserialize(propTree, dynamic_cast<uci::type::RadarWeightingFunctionsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::radiationModeEnum:
      return extxml_uci::type::RadiationModeEnum::deserialize(propTree, dynamic_cast<uci::type::RadiationModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rDMA_DataTransferServiceEnum:
      return extxml_uci::type::RDMA_DataTransferServiceEnum::deserialize(propTree, dynamic_cast<uci::type::RDMA_DataTransferServiceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rDMA_EndpointTypeEnum:
      return extxml_uci::type::RDMA_EndpointTypeEnum::deserialize(propTree, dynamic_cast<uci::type::RDMA_EndpointTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rDMA_ProviderEnum:
      return extxml_uci::type::RDMA_ProviderEnum::deserialize(propTree, dynamic_cast<uci::type::RDMA_ProviderEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rECCE_SystemEnum:
      return extxml_uci::type::RECCE_SystemEnum::deserialize(propTree, dynamic_cast<uci::type::RECCE_SystemEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::referenceCapabilityOutputsEnum:
      return extxml_uci::type::ReferenceCapabilityOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::ReferenceCapabilityOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCapabilityEnum:
      return extxml_uci::type::RefuelCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelLocationEnum:
      return extxml_uci::type::RefuelLocationEnum::deserialize(propTree, dynamic_cast<uci::type::RefuelLocationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relativeDirectionEnum:
      return extxml_uci::type::RelativeDirectionEnum::deserialize(propTree, dynamic_cast<uci::type::RelativeDirectionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::repeatEnum:
      return extxml_uci::type::RepeatEnum::deserialize(propTree, dynamic_cast<uci::type::RepeatEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requestProcessingStateEnum:
      return extxml_uci::type::RequestProcessingStateEnum::deserialize(propTree, dynamic_cast<uci::type::RequestProcessingStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requestSourceEnum:
      return extxml_uci::type::RequestSourceEnum::deserialize(propTree, dynamic_cast<uci::type::RequestSourceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requestStateEnum:
      return extxml_uci::type::RequestStateEnum::deserialize(propTree, dynamic_cast<uci::type::RequestStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementDependencyEnum:
      return extxml_uci::type::RequirementDependencyEnum::deserialize(propTree, dynamic_cast<uci::type::RequirementDependencyEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementExecutionStateEnum:
      return extxml_uci::type::RequirementExecutionStateEnum::deserialize(propTree, dynamic_cast<uci::type::RequirementExecutionStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementObjectEnum:
      return extxml_uci::type::RequirementObjectEnum::deserialize(propTree, dynamic_cast<uci::type::RequirementObjectEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementPlanningStateEnum:
      return extxml_uci::type::RequirementPlanningStateEnum::deserialize(propTree, dynamic_cast<uci::type::RequirementPlanningStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementTimingEnum:
      return extxml_uci::type::RequirementTimingEnum::deserialize(propTree, dynamic_cast<uci::type::RequirementTimingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementUsageEnum:
      return extxml_uci::type::RequirementUsageEnum::deserialize(propTree, dynamic_cast<uci::type::RequirementUsageEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceAllocationStateEnum:
      return extxml_uci::type::ResourceAllocationStateEnum::deserialize(propTree, dynamic_cast<uci::type::ResourceAllocationStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceAllocationStatusEnum:
      return extxml_uci::type::ResourceAllocationStatusEnum::deserialize(propTree, dynamic_cast<uci::type::ResourceAllocationStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceAllocatorCommandControlEnum:
      return extxml_uci::type::ResourceAllocatorCommandControlEnum::deserialize(propTree, dynamic_cast<uci::type::ResourceAllocatorCommandControlEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseTypeEnum:
      return extxml_uci::type::ResponseTypeEnum::deserialize(propTree, dynamic_cast<uci::type::ResponseTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ReportStateEnum:
      return extxml_uci::type::RF_ReportStateEnum::deserialize(propTree, dynamic_cast<uci::type::RF_ReportStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_SignalContentEnum:
      return extxml_uci::type::RF_SignalContentEnum::deserialize(propTree, dynamic_cast<uci::type::RF_SignalContentEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_TypeEnum:
      return extxml_uci::type::RF_TypeEnum::deserialize(propTree, dynamic_cast<uci::type::RF_TypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::riskPrioritizationEnum:
      return extxml_uci::type::RiskPrioritizationEnum::deserialize(propTree, dynamic_cast<uci::type::RiskPrioritizationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rotationEnum:
      return extxml_uci::type::RotationEnum::deserialize(propTree, dynamic_cast<uci::type::RotationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeEventEnum:
      return extxml_uci::type::RouteEventEnum::deserialize(propTree, dynamic_cast<uci::type::RouteEventEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeValidationErrorEnum:
      return extxml_uci::type::RouteValidationErrorEnum::deserialize(propTree, dynamic_cast<uci::type::RouteValidationErrorEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::runwayStatusEnum:
      return extxml_uci::type::RunwayStatusEnum::deserialize(propTree, dynamic_cast<uci::type::RunwayStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAM_ModeEnum:
      return extxml_uci::type::SAM_ModeEnum::deserialize(propTree, dynamic_cast<uci::type::SAM_ModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CapabilityEnum:
      return extxml_uci::type::SAR_CapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CollectionReasonEnum:
      return extxml_uci::type::SAR_CollectionReasonEnum::deserialize(propTree, dynamic_cast<uci::type::SAR_CollectionReasonEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_EllipticityPolicyEnum:
      return extxml_uci::type::SAR_EllipticityPolicyEnum::deserialize(propTree, dynamic_cast<uci::type::SAR_EllipticityPolicyEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_ImagingPlaneEnum:
      return extxml_uci::type::SAR_ImagingPlaneEnum::deserialize(propTree, dynamic_cast<uci::type::SAR_ImagingPlaneEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_MessageOutputsEnum:
      return extxml_uci::type::SAR_MessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::SAR_MessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_SubCapabilityEnum:
      return extxml_uci::type::SAR_SubCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::SAR_SubCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_WaveformSelectionEnum:
      return extxml_uci::type::SAR_WaveformSelectionEnum::deserialize(propTree, dynamic_cast<uci::type::SAR_WaveformSelectionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::satelliteOperationsChangesCharacterizationEnum:
      return extxml_uci::type::SatelliteOperationsChangesCharacterizationEnum::deserialize(propTree, dynamic_cast<uci::type::SatelliteOperationsChangesCharacterizationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::scanDirectionalityEnum:
      return extxml_uci::type::ScanDirectionalityEnum::deserialize(propTree, dynamic_cast<uci::type::ScanDirectionalityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::scanMechanicsEnum:
      return extxml_uci::type::ScanMechanicsEnum::deserialize(propTree, dynamic_cast<uci::type::ScanMechanicsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::scanPlaneEnum:
      return extxml_uci::type::ScanPlaneEnum::deserialize(propTree, dynamic_cast<uci::type::ScanPlaneEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::scanTypeEnum:
      return extxml_uci::type::ScanTypeEnum::deserialize(propTree, dynamic_cast<uci::type::ScanTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::schedulingCriticalityEnum:
      return extxml_uci::type::SchedulingCriticalityEnum::deserialize(propTree, dynamic_cast<uci::type::SchedulingCriticalityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sDA_SpecialInstructionsEnum:
      return extxml_uci::type::SDA_SpecialInstructionsEnum::deserialize(propTree, dynamic_cast<uci::type::SDA_SpecialInstructionsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityAccessEnum:
      return extxml_uci::type::SecurityAccessEnum::deserialize(propTree, dynamic_cast<uci::type::SecurityAccessEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityAuditManagementEnum:
      return extxml_uci::type::SecurityAuditManagementEnum::deserialize(propTree, dynamic_cast<uci::type::SecurityAuditManagementEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityAuthenticationEnum:
      return extxml_uci::type::SecurityAuthenticationEnum::deserialize(propTree, dynamic_cast<uci::type::SecurityAuthenticationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityEventOutcomeEnum:
      return extxml_uci::type::SecurityEventOutcomeEnum::deserialize(propTree, dynamic_cast<uci::type::SecurityEventOutcomeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityFileManagementEnum:
      return extxml_uci::type::SecurityFileManagementEnum::deserialize(propTree, dynamic_cast<uci::type::SecurityFileManagementEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityIntegrityEnum:
      return extxml_uci::type::SecurityIntegrityEnum::deserialize(propTree, dynamic_cast<uci::type::SecurityIntegrityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityIntrusionDetectionEnum:
      return extxml_uci::type::SecurityIntrusionDetectionEnum::deserialize(propTree, dynamic_cast<uci::type::SecurityIntrusionDetectionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityKeyManagementEnum:
      return extxml_uci::type::SecurityKeyManagementEnum::deserialize(propTree, dynamic_cast<uci::type::SecurityKeyManagementEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityPolicyManagementEnum:
      return extxml_uci::type::SecurityPolicyManagementEnum::deserialize(propTree, dynamic_cast<uci::type::SecurityPolicyManagementEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securitySanitizationEnum:
      return extxml_uci::type::SecuritySanitizationEnum::deserialize(propTree, dynamic_cast<uci::type::SecuritySanitizationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securitySystemEnum:
      return extxml_uci::type::SecuritySystemEnum::deserialize(propTree, dynamic_cast<uci::type::SecuritySystemEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensingTypeEnum:
      return extxml_uci::type::SensingTypeEnum::deserialize(propTree, dynamic_cast<uci::type::SensingTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorCategoryEnum:
      return extxml_uci::type::SensorCategoryEnum::deserialize(propTree, dynamic_cast<uci::type::SensorCategoryEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorFunctionalCollectionsEnum:
      return extxml_uci::type::SensorFunctionalCollectionsEnum::deserialize(propTree, dynamic_cast<uci::type::SensorFunctionalCollectionsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorFunctionalProcessingEnum:
      return extxml_uci::type::SensorFunctionalProcessingEnum::deserialize(propTree, dynamic_cast<uci::type::SensorFunctionalProcessingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorReferencedCoverageAreaReferenceEnum:
      return extxml_uci::type::SensorReferencedCoverageAreaReferenceEnum::deserialize(propTree, dynamic_cast<uci::type::SensorReferencedCoverageAreaReferenceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorSpectrumEnum:
      return extxml_uci::type::SensorSpectrumEnum::deserialize(propTree, dynamic_cast<uci::type::SensorSpectrumEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorTrackingAltitudesEnum:
      return extxml_uci::type::SensorTrackingAltitudesEnum::deserialize(propTree, dynamic_cast<uci::type::SensorTrackingAltitudesEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorTypeEnum:
      return extxml_uci::type::SensorTypeEnum::deserialize(propTree, dynamic_cast<uci::type::SensorTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceLifecycleCommandStatusEnum:
      return extxml_uci::type::ServiceLifecycleCommandStatusEnum::deserialize(propTree, dynamic_cast<uci::type::ServiceLifecycleCommandStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceLifecycleStateEnum:
      return extxml_uci::type::ServiceLifecycleStateEnum::deserialize(propTree, dynamic_cast<uci::type::ServiceLifecycleStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceRegistrationPurposeEnum:
      return extxml_uci::type::ServiceRegistrationPurposeEnum::deserialize(propTree, dynamic_cast<uci::type::ServiceRegistrationPurposeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceRegistrationStatusEnum:
      return extxml_uci::type::ServiceRegistrationStatusEnum::deserialize(propTree, dynamic_cast<uci::type::ServiceRegistrationStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceSettingEnum:
      return extxml_uci::type::ServiceSettingEnum::deserialize(propTree, dynamic_cast<uci::type::ServiceSettingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::serviceStateEnum:
      return extxml_uci::type::ServiceStateEnum::deserialize(propTree, dynamic_cast<uci::type::ServiceStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalGeolocationControlEnum:
      return extxml_uci::type::SignalGeolocationControlEnum::deserialize(propTree, dynamic_cast<uci::type::SignalGeolocationControlEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalGeolocationMethodEnum:
      return extxml_uci::type::SignalGeolocationMethodEnum::deserialize(propTree, dynamic_cast<uci::type::SignalGeolocationMethodEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalLocationEnum:
      return extxml_uci::type::SignalLocationEnum::deserialize(propTree, dynamic_cast<uci::type::SignalLocationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalMeasurementFlagEnum:
      return extxml_uci::type::SignalMeasurementFlagEnum::deserialize(propTree, dynamic_cast<uci::type::SignalMeasurementFlagEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalMeasurementMethodEnum:
      return extxml_uci::type::SignalMeasurementMethodEnum::deserialize(propTree, dynamic_cast<uci::type::SignalMeasurementMethodEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalReportStateEnum:
      return extxml_uci::type::SignalReportStateEnum::deserialize(propTree, dynamic_cast<uci::type::SignalReportStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::signalTypeEnum:
      return extxml_uci::type::SignalTypeEnum::deserialize(propTree, dynamic_cast<uci::type::SignalTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::siteEnum:
      return extxml_uci::type::SiteEnum::deserialize(propTree, dynamic_cast<uci::type::SiteEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::siteTypeEnum:
      return extxml_uci::type::SiteTypeEnum::deserialize(propTree, dynamic_cast<uci::type::SiteTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::skysearchModeEnum:
      return extxml_uci::type::SkysearchModeEnum::deserialize(propTree, dynamic_cast<uci::type::SkysearchModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_CapabilityEnum:
      return extxml_uci::type::SMTI_CapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::SMTI_CapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_MessageOutputsEnum:
      return extxml_uci::type::SMTI_MessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::SMTI_MessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sMTI_SubCapabilityEnum:
      return extxml_uci::type::SMTI_SubCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::SMTI_SubCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_CorrelationTypeEnum:
      return extxml_uci::type::SOB_CorrelationTypeEnum::deserialize(propTree, dynamic_cast<uci::type::SOB_CorrelationTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_MissionTypeEnum:
      return extxml_uci::type::SOB_MissionTypeEnum::deserialize(propTree, dynamic_cast<uci::type::SOB_MissionTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sOB_RecordEnum:
      return extxml_uci::type::SOB_RecordEnum::deserialize(propTree, dynamic_cast<uci::type::SOB_RecordEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::solarFluxRecordEnum:
      return extxml_uci::type::SolarFluxRecordEnum::deserialize(propTree, dynamic_cast<uci::type::SolarFluxRecordEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::solarRadiationPressureModelEnum:
      return extxml_uci::type::SolarRadiationPressureModelEnum::deserialize(propTree, dynamic_cast<uci::type::SolarRadiationPressureModelEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::spaceObjectEnum:
      return extxml_uci::type::SpaceObjectEnum::deserialize(propTree, dynamic_cast<uci::type::SpaceObjectEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::specialIdentityEnum:
      return extxml_uci::type::SpecialIdentityEnum::deserialize(propTree, dynamic_cast<uci::type::SpecialIdentityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::speedOptimizationEnum:
      return extxml_uci::type::SpeedOptimizationEnum::deserialize(propTree, dynamic_cast<uci::type::SpeedOptimizationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::speedReferenceEnum:
      return extxml_uci::type::SpeedReferenceEnum::deserialize(propTree, dynamic_cast<uci::type::SpeedReferenceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sTANAG_4607_PlatformTypeEnum:
      return extxml_uci::type::STANAG_4607_PlatformTypeEnum::deserialize(propTree, dynamic_cast<uci::type::STANAG_4607_PlatformTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sTANAG_4607_TargetClassificationEnum:
      return extxml_uci::type::STANAG_4607_TargetClassificationEnum::deserialize(propTree, dynamic_cast<uci::type::STANAG_4607_TargetClassificationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::standardIdentityEnum:
      return extxml_uci::type::StandardIdentityEnum::deserialize(propTree, dynamic_cast<uci::type::StandardIdentityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::stateTransitionStatusEnum:
      return extxml_uci::type::StateTransitionStatusEnum::deserialize(propTree, dynamic_cast<uci::type::StateTransitionStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeCategoryEnum:
      return extxml_uci::type::StoreCategoryEnum::deserialize(propTree, dynamic_cast<uci::type::StoreCategoryEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeFlightModeEnum:
      return extxml_uci::type::StoreFlightModeEnum::deserialize(propTree, dynamic_cast<uci::type::StoreFlightModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeJettisonOptionsEnum:
      return extxml_uci::type::StoreJettisonOptionsEnum::deserialize(propTree, dynamic_cast<uci::type::StoreJettisonOptionsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::storeStateEnum:
      return extxml_uci::type::StoreStateEnum::deserialize(propTree, dynamic_cast<uci::type::StoreStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeMessageOutputsEnum:
      return extxml_uci::type::StrikeMessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::StrikeMessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::strikeStateEnum:
      return extxml_uci::type::StrikeStateEnum::deserialize(propTree, dynamic_cast<uci::type::StrikeStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::submarineConfidenceLevelEnum:
      return extxml_uci::type::SubmarineConfidenceLevelEnum::deserialize(propTree, dynamic_cast<uci::type::SubmarineConfidenceLevelEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subPlanTypeEnum:
      return extxml_uci::type::SubPlanTypeEnum::deserialize(propTree, dynamic_cast<uci::type::SubPlanTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemBIT_ControlInterfacesEnum:
      return extxml_uci::type::SubsystemBIT_ControlInterfacesEnum::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_ControlInterfacesEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemBIT_ResultEnum:
      return extxml_uci::type::SubsystemBIT_ResultEnum::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_ResultEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCalibrationControlInterfacesEnum:
      return extxml_uci::type::SubsystemCalibrationControlInterfacesEnum::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationControlInterfacesEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemCalibrationResultEnum:
      return extxml_uci::type::SubsystemCalibrationResultEnum::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationResultEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemEraseCommandEnum:
      return extxml_uci::type::SubsystemEraseCommandEnum::deserialize(propTree, dynamic_cast<uci::type::SubsystemEraseCommandEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceCommandEnum:
      return extxml_uci::type::SubsystemMaintenanceCommandEnum::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceCommandEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceControlInterfacesEnum:
      return extxml_uci::type::SubsystemMaintenanceControlInterfacesEnum::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceControlInterfacesEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemMaintenanceResultStatusEnum:
      return extxml_uci::type::SubsystemMaintenanceResultStatusEnum::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceResultStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemSettingEnum:
      return extxml_uci::type::SubsystemSettingEnum::deserialize(propTree, dynamic_cast<uci::type::SubsystemSettingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::subsystemStateEnum:
      return extxml_uci::type::SubsystemStateEnum::deserialize(propTree, dynamic_cast<uci::type::SubsystemStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::supportCapabilityTypeEnum:
      return extxml_uci::type::SupportCapabilityTypeEnum::deserialize(propTree, dynamic_cast<uci::type::SupportCapabilityTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::supportedFunctionEnum:
      return extxml_uci::type::SupportedFunctionEnum::deserialize(propTree, dynamic_cast<uci::type::SupportedFunctionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::surfaceTypeEnum:
      return extxml_uci::type::SurfaceTypeEnum::deserialize(propTree, dynamic_cast<uci::type::SurfaceTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::swapEnum:
      return extxml_uci::type::SwapEnum::deserialize(propTree, dynamic_cast<uci::type::SwapEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemContingencyLevelEnum:
      return extxml_uci::type::SystemContingencyLevelEnum::deserialize(propTree, dynamic_cast<uci::type::SystemContingencyLevelEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemDeploymentEnum:
      return extxml_uci::type::SystemDeploymentEnum::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemSourceEnum:
      return extxml_uci::type::SystemSourceEnum::deserialize(propTree, dynamic_cast<uci::type::SystemSourceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::systemStateEnum:
      return extxml_uci::type::SystemStateEnum::deserialize(propTree, dynamic_cast<uci::type::SystemStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tacticalOrderCapabilityEnum:
      return extxml_uci::type::TacticalOrderCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tacticalPlanningAndExecutionEnum:
      return extxml_uci::type::TacticalPlanningAndExecutionEnum::deserialize(propTree, dynamic_cast<uci::type::TacticalPlanningAndExecutionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tailConeLightEnum:
      return extxml_uci::type::TailConeLightEnum::deserialize(propTree, dynamic_cast<uci::type::TailConeLightEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::targetDefensesEnum:
      return extxml_uci::type::TargetDefensesEnum::deserialize(propTree, dynamic_cast<uci::type::TargetDefensesEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::targetHardnessEnum:
      return extxml_uci::type::TargetHardnessEnum::deserialize(propTree, dynamic_cast<uci::type::TargetHardnessEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::targetTypeEnum:
      return extxml_uci::type::TargetTypeEnum::deserialize(propTree, dynamic_cast<uci::type::TargetTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::taskTypeEnum:
      return extxml_uci::type::TaskTypeEnum::deserialize(propTree, dynamic_cast<uci::type::TaskTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::tCP_SessionStatusEnum:
      return extxml_uci::type::TCP_SessionStatusEnum::deserialize(propTree, dynamic_cast<uci::type::TCP_SessionStatusEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::temperatureStateEnum:
      return extxml_uci::type::TemperatureStateEnum::deserialize(propTree, dynamic_cast<uci::type::TemperatureStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::textReportActionEnum:
      return extxml_uci::type::TextReportActionEnum::deserialize(propTree, dynamic_cast<uci::type::TextReportActionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threadAvailabiltyEnum:
      return extxml_uci::type::ThreadAvailabiltyEnum::deserialize(propTree, dynamic_cast<uci::type::ThreadAvailabiltyEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatCapabilityEnum:
      return extxml_uci::type::ThreatCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::ThreatCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatEnum:
      return extxml_uci::type::ThreatEnum::deserialize(propTree, dynamic_cast<uci::type::ThreatEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatPostureEnum:
      return extxml_uci::type::ThreatPostureEnum::deserialize(propTree, dynamic_cast<uci::type::ThreatPostureEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::threatWeaponEnum:
      return extxml_uci::type::ThreatWeaponEnum::deserialize(propTree, dynamic_cast<uci::type::ThreatWeaponEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::timeFunctionEnum:
      return extxml_uci::type::TimeFunctionEnum::deserialize(propTree, dynamic_cast<uci::type::TimeFunctionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::trackModeEnum:
      return extxml_uci::type::TrackModeEnum::deserialize(propTree, dynamic_cast<uci::type::TrackModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::turnPointTypeEnum:
      return extxml_uci::type::TurnPointTypeEnum::deserialize(propTree, dynamic_cast<uci::type::TurnPointTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::typeOfDependencyEnum:
      return extxml_uci::type::TypeOfDependencyEnum::deserialize(propTree, dynamic_cast<uci::type::TypeOfDependencyEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::uncertaintyEnum:
      return extxml_uci::type::UncertaintyEnum::deserialize(propTree, dynamic_cast<uci::type::UncertaintyEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::unitTypeEnum:
      return extxml_uci::type::UnitTypeEnum::deserialize(propTree, dynamic_cast<uci::type::UnitTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::v_BarApproachEnum:
      return extxml_uci::type::V_BarApproachEnum::deserialize(propTree, dynamic_cast<uci::type::V_BarApproachEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vehicleActionEnum:
      return extxml_uci::type::VehicleActionEnum::deserialize(propTree, dynamic_cast<uci::type::VehicleActionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vehicleControlStrategyEnum:
      return extxml_uci::type::VehicleControlStrategyEnum::deserialize(propTree, dynamic_cast<uci::type::VehicleControlStrategyEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vehicleLossOfLinkProcessingEnum:
      return extxml_uci::type::VehicleLossOfLinkProcessingEnum::deserialize(propTree, dynamic_cast<uci::type::VehicleLossOfLinkProcessingEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vehicleSurvivabilityModeEnum:
      return extxml_uci::type::VehicleSurvivabilityModeEnum::deserialize(propTree, dynamic_cast<uci::type::VehicleSurvivabilityModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::verticalCenterOfGravityTrendEnum:
      return extxml_uci::type::VerticalCenterOfGravityTrendEnum::deserialize(propTree, dynamic_cast<uci::type::VerticalCenterOfGravityTrendEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::videoBlockSizeEnum:
      return extxml_uci::type::VideoBlockSizeEnum::deserialize(propTree, dynamic_cast<uci::type::VideoBlockSizeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::videoChromaSubsampleEnum:
      return extxml_uci::type::VideoChromaSubsampleEnum::deserialize(propTree, dynamic_cast<uci::type::VideoChromaSubsampleEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::videoEncoderCompressionModeEnum:
      return extxml_uci::type::VideoEncoderCompressionModeEnum::deserialize(propTree, dynamic_cast<uci::type::VideoEncoderCompressionModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::vulnerabilityTypeEnum:
      return extxml_uci::type::VulnerabilityTypeEnum::deserialize(propTree, dynamic_cast<uci::type::VulnerabilityTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::waypointTypeEnum:
      return extxml_uci::type::WaypointTypeEnum::deserialize(propTree, dynamic_cast<uci::type::WaypointTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weaponFuzeModeEnum:
      return extxml_uci::type::WeaponFuzeModeEnum::deserialize(propTree, dynamic_cast<uci::type::WeaponFuzeModeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weaponFuzePositionEnum:
      return extxml_uci::type::WeaponFuzePositionEnum::deserialize(propTree, dynamic_cast<uci::type::WeaponFuzePositionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weaponTypeEnum:
      return extxml_uci::type::WeaponTypeEnum::deserialize(propTree, dynamic_cast<uci::type::WeaponTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherCloudCoverEnum:
      return extxml_uci::type::WeatherCloudCoverEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherCloudCoverEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherDescriptionEnum:
      return extxml_uci::type::WeatherDescriptionEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherDescriptionEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherKindEnum:
      return extxml_uci::type::WeatherKindEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherKindEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherPrecipitationAmplificationEnum:
      return extxml_uci::type::WeatherPrecipitationAmplificationEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherPrecipitationAmplificationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherPrecipitationEnum:
      return extxml_uci::type::WeatherPrecipitationEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherPrecipitationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarCapabilityEnum:
      return extxml_uci::type::WeatherRadarCapabilityEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCapabilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRadarMessageOutputsEnum:
      return extxml_uci::type::WeatherRadarMessageOutputsEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarMessageOutputsEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherReportTypeEnum:
      return extxml_uci::type::WeatherReportTypeEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherReportTypeEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherRoadStateEnum:
      return extxml_uci::type::WeatherRoadStateEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherRoadStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherSeaStateAmplificationEnum:
      return extxml_uci::type::WeatherSeaStateAmplificationEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherSeaStateAmplificationEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherSeaStateEnum:
      return extxml_uci::type::WeatherSeaStateEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherSeaStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherSeverityEnum:
      return extxml_uci::type::WeatherSeverityEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherSeverityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherSourceEnum:
      return extxml_uci::type::WeatherSourceEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherSourceEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherTerrainStateEnum:
      return extxml_uci::type::WeatherTerrainStateEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherTerrainStateEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherVisibilityEnum:
      return extxml_uci::type::WeatherVisibilityEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherVisibilityEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weatherWarningEnum:
      return extxml_uci::type::WeatherWarningEnum::deserialize(propTree, dynamic_cast<uci::type::WeatherWarningEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::weekdayEnum:
      return extxml_uci::type::WeekdayEnum::deserialize(propTree, dynamic_cast<uci::type::WeekdayEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::yearOfEquinoxEnum:
      return extxml_uci::type::YearOfEquinoxEnum::deserialize(propTree, dynamic_cast<uci::type::YearOfEquinoxEnum&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::zoneRelationEnum:
      return extxml_uci::type::ZoneRelationEnum::deserialize(propTree, dynamic_cast<uci::type::ZoneRelationEnum&>(accessor), nodeName, nsPrefix, true);
    default:
      return false;
  }
}

} // namespace base

} // namespace extxml_uci

