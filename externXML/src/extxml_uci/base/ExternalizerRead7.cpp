/** @file ExternalizerRead7.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:20 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/base/ExternalizerRead7.h"

#include <string>

#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/RFDC_StatusType.h"
#include "extxml_uci/type/RFD_ComponentIdentifierType.h"
#include "extxml_uci/type/RFD_GainSettingType.h"
#include "extxml_uci/type/RF_BandType.h"
#include "extxml_uci/type/RF_ControlCommandMDT.h"
#include "extxml_uci/type/RF_ControlCommandMT.h"
#include "extxml_uci/type/RF_ControlCommandStatusMDT.h"
#include "extxml_uci/type/RF_ControlCommandStatusMT.h"
#include "extxml_uci/type/RF_DistributionType.h"
#include "extxml_uci/type/RF_GainType.h"
#include "extxml_uci/type/RF_OperationType.h"
#include "extxml_uci/type/RF_ProfileBandType.h"
#include "extxml_uci/type/RF_ProfileID_Type.h"
#include "extxml_uci/type/RF_ProfileMDT.h"
#include "extxml_uci/type/RF_ProfileMT.h"
#include "extxml_uci/type/RF_ProfileType.h"
#include "extxml_uci/type/RF_RadiusToFixType.h"
#include "extxml_uci/type/RF_ReportID_Type.h"
#include "extxml_uci/type/RF_ReportMDT.h"
#include "extxml_uci/type/RF_ReportMT.h"
#include "extxml_uci/type/RF_ResourceAllocationID_Type.h"
#include "extxml_uci/type/RF_ResourceAllocationMDT.h"
#include "extxml_uci/type/RF_ResourceAllocationMT.h"
#include "extxml_uci/type/RF_ResourceAllocationRequestDigitalRemovalType.h"
#include "extxml_uci/type/RF_ResourceAllocationRequestMDT.h"
#include "extxml_uci/type/RF_ResourceAllocationRequestMT.h"
#include "extxml_uci/type/RF_ResourceAllocationRequestRF_RemovalType.h"
#include "extxml_uci/type/RF_ResourceAllocationRequestRemovalType.h"
#include "extxml_uci/type/RF_ResourceAllocationRequestStatusMDT.h"
#include "extxml_uci/type/RF_ResourceAllocationRequestStatusMT.h"
#include "extxml_uci/type/RF_ResourceAllocationType.h"
#include "extxml_uci/type/RF_TaskNormalizedMetricsType.h"
#include "extxml_uci/type/RF_TaskPerformanceConstraintType.h"
#include "extxml_uci/type/RF_TaskPerformanceType.h"
#include "extxml_uci/type/RF_ThreadFeedbackType.h"
#include "extxml_uci/type/RF_ThreadInstanceCommandType.h"
#include "extxml_uci/type/RF_ThreadInstanceSetupCommandMDT.h"
#include "extxml_uci/type/RF_ThreadInstanceSetupCommandMT.h"
#include "extxml_uci/type/RF_ThreadInstanceSetupCommandStatusMDT.h"
#include "extxml_uci/type/RF_ThreadInstanceSetupCommandStatusMT.h"
#include "extxml_uci/type/RF_TransmissionType.h"
#include "extxml_uci/type/RGB_ColorControlType.h"
#include "extxml_uci/type/RSO_ApproachType.h"
#include "extxml_uci/type/RSTA_FileTraceabilityType.h"
#include "extxml_uci/type/RSTA_TraceabilityType.h"
#include "extxml_uci/type/RTN_AccelerationType.h"
#include "extxml_uci/type/RTN_KinematicsType.h"
#include "extxml_uci/type/RTN_LocalPositionType.h"
#include "extxml_uci/type/RTN_PositionDeltaType.h"
#include "extxml_uci/type/RTN_PositionSigmaType.h"
#include "extxml_uci/type/RTN_PositionType.h"
#include "extxml_uci/type/RTN_VelocityDeltaType.h"
#include "extxml_uci/type/RTN_VelocitySigmaType.h"
#include "extxml_uci/type/RTN_VelocityType.h"
#include "extxml_uci/type/ReferenceCapabilityType.h"
#include "extxml_uci/type/ReferenceFrameID_Type.h"
#include "extxml_uci/type/ReferenceFrameMDT.h"
#include "extxml_uci/type/ReferenceFrameMT.h"
#include "extxml_uci/type/ReferenceFrameObjectToFollowType.h"
#include "extxml_uci/type/ReferenceFrameOriginChoiceType.h"
#include "extxml_uci/type/ReferenceFrameOriginKinematicsType.h"
#include "extxml_uci/type/ReferenceFrameOriginType.h"
#include "extxml_uci/type/ReferenceObjectType.h"
#include "extxml_uci/type/RefuelActivityCommandType.h"
#include "extxml_uci/type/RefuelActivityDrogueCommandType.h"
#include "extxml_uci/type/RefuelActivityDrogueStatusType.h"
#include "extxml_uci/type/RefuelActivityMDT.h"
#include "extxml_uci/type/RefuelActivityMT.h"
#include "extxml_uci/type/RefuelActivityStatusType.h"
#include "extxml_uci/type/RefuelActivityType.h"
#include "extxml_uci/type/RefuelCapabilityCommandType.h"
#include "extxml_uci/type/RefuelCapabilityDrogueCommandType.h"
#include "extxml_uci/type/RefuelCapabilityDrogueCommonType.h"
#include "extxml_uci/type/RefuelCapabilityDrogueStatusType.h"
#include "extxml_uci/type/RefuelCapabilityExtendCommandType.h"
#include "extxml_uci/type/RefuelCapabilityMDT.h"
#include "extxml_uci/type/RefuelCapabilityMT.h"
#include "extxml_uci/type/RefuelCapabilityStatusMDT.h"
#include "extxml_uci/type/RefuelCapabilityStatusMT.h"
#include "extxml_uci/type/RefuelCapabilityStatusType.h"
#include "extxml_uci/type/RefuelCapabilityType.h"
#include "extxml_uci/type/RefuelCommandMDT.h"
#include "extxml_uci/type/RefuelCommandMT.h"
#include "extxml_uci/type/RefuelCommandStatusMDT.h"
#include "extxml_uci/type/RefuelCommandStatusMT.h"
#include "extxml_uci/type/RefuelCommandType.h"
#include "extxml_uci/type/RefuelConnectionType.h"
#include "extxml_uci/type/RefuelSettingsCommandMDT.h"
#include "extxml_uci/type/RefuelSettingsCommandMT.h"
#include "extxml_uci/type/RefuelSettingsCommandStatusMDT.h"
#include "extxml_uci/type/RefuelSettingsCommandStatusMT.h"
#include "extxml_uci/type/RefuelTaskBaseType.h"
#include "extxml_uci/type/RefuelTaskType.h"
#include "extxml_uci/type/RefuelingStatusType.h"
#include "extxml_uci/type/RelationshipControllingUnitType.h"
#include "extxml_uci/type/RelationshipDesignationID_Type.h"
#include "extxml_uci/type/RelationshipDesignationMDT.h"
#include "extxml_uci/type/RelationshipDesignationMT.h"
#include "extxml_uci/type/RelationshipElectronicWarfareType.h"
#include "extxml_uci/type/RelationshipThreatType.h"
#include "extxml_uci/type/RelationshipType.h"
#include "extxml_uci/type/RelativeAngleRateUncertaintyLOS3D_Type.h"
#include "extxml_uci/type/RelativeAngleUncertaintyLOS3D_Type.h"
#include "extxml_uci/type/RelativeAnglesLOS3D_Type.h"
#include "extxml_uci/type/RelativeNavigationType.h"
#include "extxml_uci/type/RelativeOffset2D_Type.h"
#include "extxml_uci/type/RelativeOffset3D_Type.h"
#include "extxml_uci/type/RelativePositionType.h"
#include "extxml_uci/type/RelativeSlantRangeLOS3D_Type.h"
#include "extxml_uci/type/ReleaseConsentType.h"
#include "extxml_uci/type/RemarksType.h"
#include "extxml_uci/type/RemoteDestinationType.h"
#include "extxml_uci/type/RemoveRF_ThreadInstanceType.h"
#include "extxml_uci/type/RepetitionConstraintsType.h"
#include "extxml_uci/type/RepetitionContinuousType.h"
#include "extxml_uci/type/RepetitionEventBasedType.h"
#include "extxml_uci/type/RepetitionEventType.h"
#include "extxml_uci/type/RepetitionFiniteType.h"
#include "extxml_uci/type/RepetitionPeriodicType.h"
#include "extxml_uci/type/RepetitionPositionChangeType.h"
#include "extxml_uci/type/RepetitionTimeBasedType.h"
#include "extxml_uci/type/RepetitionType.h"
#include "extxml_uci/type/ReplanReasonType.h"
#include "extxml_uci/type/ReportToType.h"
#include "extxml_uci/type/RequestBaseType.h"
#include "extxml_uci/type/RequestID_Type.h"
#include "extxml_uci/type/RequestStatusBaseType.h"
#include "extxml_uci/type/RequestingFunctionID_ChoiceType.h"
#include "extxml_uci/type/RequirementAllocationBaseType.h"
#include "extxml_uci/type/RequirementAllocationCommandType.h"
#include "extxml_uci/type/RequirementAllocationConstraintType.h"
#include "extxml_uci/type/RequirementAllocationDetailsType.h"
#include "extxml_uci/type/RequirementAllocationLockDetailsType.h"
#include "extxml_uci/type/RequirementAllocationParametersType.h"
#include "extxml_uci/type/RequirementAllocationWindowID_Type.h"
#include "extxml_uci/type/RequirementAllocationWindowType.h"
#include "extxml_uci/type/RequirementAssociationConstraintType.h"
#include "extxml_uci/type/RequirementChoiceType.h"
#include "extxml_uci/type/RequirementConstraintsType.h"
#include "extxml_uci/type/RequirementDependencyBaseType.h"
#include "extxml_uci/type/RequirementDependencyType.h"
#include "extxml_uci/type/RequirementExecutionApprovalStatusBaseType.h"
#include "extxml_uci/type/RequirementExecutionPolicyType.h"
#include "extxml_uci/type/RequirementExecutionStatusDetailsType.h"
#include "extxml_uci/type/RequirementFailedTriggerType.h"
#include "extxml_uci/type/RequirementFilterType.h"
#include "extxml_uci/type/RequirementGenerationDependencyType.h"
#include "extxml_uci/type/RequirementGuidanceType.h"
#include "extxml_uci/type/RequirementInstanceID_ChoiceType.h"
#include "extxml_uci/type/RequirementKinematicConstraintsType.h"
#include "extxml_uci/type/RequirementMetadataType.h"
#include "extxml_uci/type/RequirementMetricsCategoryType.h"
#include "extxml_uci/type/RequirementMetricsID_Type.h"
#include "extxml_uci/type/RequirementMetricsMDT.h"
#include "extxml_uci/type/RequirementMetricsMT.h"
#include "extxml_uci/type/RequirementMetricsReportType.h"
#include "extxml_uci/type/RequirementMetricsRequestMDT.h"
#include "extxml_uci/type/RequirementMetricsRequestMT.h"
#include "extxml_uci/type/RequirementMetricsRequestStatusMDT.h"
#include "extxml_uci/type/RequirementMetricsRequestStatusMT.h"
#include "extxml_uci/type/RequirementMetricsType.h"
#include "extxml_uci/type/RequirementOptionType.h"
#include "extxml_uci/type/RequirementOptionsCommandMDT.h"
#include "extxml_uci/type/RequirementOptionsCommandMT.h"
#include "extxml_uci/type/RequirementOptionsCommandStatusMDT.h"
#include "extxml_uci/type/RequirementOptionsCommandStatusMT.h"
#include "extxml_uci/type/RequirementOptionsID_Type.h"
#include "extxml_uci/type/RequirementOptionsInputsType.h"
#include "extxml_uci/type/RequirementOptionsMDT.h"
#include "extxml_uci/type/RequirementOptionsMT.h"
#include "extxml_uci/type/RequirementOptionsType.h"
#include "extxml_uci/type/RequirementPlanConstraintType.h"
#include "extxml_uci/type/RequirementPlanningCandidateType.h"
#include "extxml_uci/type/RequirementPlanningResultBaseType.h"
#include "extxml_uci/type/RequirementPlanningResultType.h"
#include "extxml_uci/type/RequirementPlanningStatusDetailsType.h"
#include "extxml_uci/type/RequirementProductMetadataType.h"
#include "extxml_uci/type/RequirementRiskAdjustmentType.h"
#include "extxml_uci/type/RequirementSetID_Type.h"
#include "extxml_uci/type/RequirementSetMDT.h"
#include "extxml_uci/type/RequirementSetMT.h"
#include "extxml_uci/type/RequirementStatusTraceabilityType.h"
#include "extxml_uci/type/RequirementStatusType.h"
#include "extxml_uci/type/RequirementTargetConstraintsType.h"
#include "extxml_uci/type/RequirementTaxonomyChoiceType.h"
#include "extxml_uci/type/RequirementTaxonomyDetailedType.h"
#include "extxml_uci/type/RequirementTaxonomyType.h"
#include "extxml_uci/type/RequirementTemplateInstantiationType.h"
#include "extxml_uci/type/RequirementTemplateOptionType.h"
#include "extxml_uci/type/RequirementTemplateOptionsType.h"
#include "extxml_uci/type/RequirementTimingType.h"
#include "extxml_uci/type/RequirementTriggerType.h"
#include "extxml_uci/type/RequirementsReferenceLockableType.h"
#include "extxml_uci/type/RequirementsReferenceType.h"
#include "extxml_uci/type/RequirementsTemplateID_Type.h"
#include "extxml_uci/type/RequirementsTemplateType.h"
#include "extxml_uci/type/ResendDataRequestMDT.h"
#include "extxml_uci/type/ResendDataRequestMT.h"
#include "extxml_uci/type/ResendDataRequestStatusMDT.h"
#include "extxml_uci/type/ResendDataRequestStatusMT.h"
#include "extxml_uci/type/ResolvedCharacterizationAspectCoverageType.h"
#include "extxml_uci/type/ResolvedCharacterizationType.h"
#include "extxml_uci/type/ResourceAllocationPeriodDigitalType.h"
#include "extxml_uci/type/ResourceAllocationPeriodRF_Type.h"
#include "extxml_uci/type/ResourceAllocatorAllocationType.h"
#include "extxml_uci/type/ResourceAllocatorCommandExtensionType.h"
#include "extxml_uci/type/ResourceAllocatorConstituentIdentifierType.h"
#include "extxml_uci/type/ResourceAllocatorSourceCrossReferenceType.h"
#include "extxml_uci/type/ResourceAllocatorStatusType.h"
#include "extxml_uci/type/ResourceAllocatorSupportedActivitiesType.h"
#include "extxml_uci/type/ResourceAllocatorSystemThreadStatusType.h"
#include "extxml_uci/type/ResourceDefinitionChoiceType.h"
#include "extxml_uci/type/ResourceDefinitionDigitalType.h"
#include "extxml_uci/type/ResourceDefinitionRF_Type.h"
#include "extxml_uci/type/ResourceRequestID_AndOptionType.h"
#include "extxml_uci/type/ResourceRequestOptionType.h"
#include "extxml_uci/type/ResourceRequestPeriodType.h"
#include "extxml_uci/type/ResourceRequestType.h"
#include "extxml_uci/type/ResourceSelectionType.h"
#include "extxml_uci/type/ResourceStatusSelectedType.h"
#include "extxml_uci/type/ResponseActivityMDT.h"
#include "extxml_uci/type/ResponseActivityMT.h"
#include "extxml_uci/type/ResponseActivityType.h"
#include "extxml_uci/type/ResponseAlertType.h"
#include "extxml_uci/type/ResponseAllocationInvalidType.h"
#include "extxml_uci/type/ResponseAllocationType.h"
#include "extxml_uci/type/ResponseCancelCommandMDT.h"
#include "extxml_uci/type/ResponseCancelCommandMT.h"
#include "extxml_uci/type/ResponseCancelCommandStatusMDT.h"
#include "extxml_uci/type/ResponseCancelCommandStatusMT.h"
#include "extxml_uci/type/ResponseCapabilityCommandType.h"
#include "extxml_uci/type/ResponseCapabilityMDT.h"
#include "extxml_uci/type/ResponseCapabilityMT.h"
#include "extxml_uci/type/ResponseCapabilityStatusMDT.h"
#include "extxml_uci/type/ResponseCapabilityStatusMT.h"
#include "extxml_uci/type/ResponseCapabilityType.h"
#include "extxml_uci/type/ResponseCommandMDT.h"
#include "extxml_uci/type/ResponseCommandMT.h"
#include "extxml_uci/type/ResponseCommandStatusMDT.h"
#include "extxml_uci/type/ResponseCommandStatusMT.h"
#include "extxml_uci/type/ResponseCommandType.h"
#include "extxml_uci/type/ResponseExecutionApprovalStatusMDT.h"
#include "extxml_uci/type/ResponseExecutionApprovalStatusMT.h"
#include "extxml_uci/type/ResponseID_Type.h"
#include "extxml_uci/type/ResponseMDT.h"
#include "extxml_uci/type/ResponseMT.h"
#include "extxml_uci/type/ResponseOptionDetailsType.h"
#include "extxml_uci/type/ResponseOptionTriggerType.h"
#include "extxml_uci/type/ResponseOptionType.h"
#include "extxml_uci/type/ResponsePlanActivationType.h"
#include "extxml_uci/type/ResponsePlanApprovalStatusMDT.h"
#include "extxml_uci/type/ResponsePlanApprovalStatusMT.h"
#include "extxml_uci/type/ResponsePlanCommandID_ChoiceType.h"
#include "extxml_uci/type/ResponsePlanCommandID_Type.h"
#include "extxml_uci/type/ResponsePlanCommandMDT.h"
#include "extxml_uci/type/ResponsePlanCommandMT.h"
#include "extxml_uci/type/ResponsePlanCommandStatusMDT.h"
#include "extxml_uci/type/ResponsePlanCommandStatusMT.h"
#include "extxml_uci/type/ResponsePlanConstraintType.h"
#include "extxml_uci/type/ResponsePlanExecutionStateType.h"
#include "extxml_uci/type/ResponsePlanExecutionStatusMDT.h"
#include "extxml_uci/type/ResponsePlanExecutionStatusMT.h"
#include "extxml_uci/type/ResponsePlanID_Type.h"
#include "extxml_uci/type/ResponsePlanInputsType.h"
#include "extxml_uci/type/ResponsePlanInvalidType.h"
#include "extxml_uci/type/ResponsePlanMDT.h"
#include "extxml_uci/type/ResponsePlanMT.h"
#include "extxml_uci/type/ResponsePlanPartsType.h"
#include "extxml_uci/type/ResponsePlanProcessDescriptionType.h"
#include "extxml_uci/type/ResponsePlanProcessType.h"
#include "extxml_uci/type/ResponsePlanStatusMDT.h"
#include "extxml_uci/type/ResponsePlanStatusMT.h"
#include "extxml_uci/type/ResponsePlanType.h"
#include "extxml_uci/type/ResponsePlanValidationCommandMDT.h"
#include "extxml_uci/type/ResponsePlanValidationCommandMT.h"
#include "extxml_uci/type/ResponsePlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/ResponsePlanValidationCommandStatusMT.h"
#include "extxml_uci/type/ResponsePlanValidationID_Type.h"
#include "extxml_uci/type/ResponsePlanValidationInputsType.h"
#include "extxml_uci/type/ResponsePlanValidationMDT.h"
#include "extxml_uci/type/ResponsePlanValidationMT.h"
#include "extxml_uci/type/ResponsePlanningResultType.h"
#include "extxml_uci/type/ResponsePlanningStatusMDT.h"
#include "extxml_uci/type/ResponsePlanningStatusMT.h"
#include "extxml_uci/type/ResponseStatusMDT.h"
#include "extxml_uci/type/ResponseStatusMT.h"
#include "extxml_uci/type/ResponseTemplateType.h"
#include "extxml_uci/type/ResultingActivityType.h"
#include "extxml_uci/type/RightAscensionDeclinationPointType.h"
#include "extxml_uci/type/RiskSettingType.h"
#include "extxml_uci/type/RouteActivityExecutionStatusType.h"
#include "extxml_uci/type/RouteActivityKinematicReferenceType.h"
#include "extxml_uci/type/RouteActivityPlanActivationType.h"
#include "extxml_uci/type/RouteActivityPlanApprovalStatusMDT.h"
#include "extxml_uci/type/RouteActivityPlanApprovalStatusMT.h"
#include "extxml_uci/type/RouteActivityPlanCommandID_ChoiceType.h"
#include "extxml_uci/type/RouteActivityPlanCommandID_Type.h"
#include "extxml_uci/type/RouteActivityPlanCommandMDT.h"
#include "extxml_uci/type/RouteActivityPlanCommandMT.h"
#include "extxml_uci/type/RouteActivityPlanCommandStatusMDT.h"
#include "extxml_uci/type/RouteActivityPlanCommandStatusMT.h"
#include "extxml_uci/type/RouteActivityPlanConstraintType.h"
#include "extxml_uci/type/RouteActivityPlanExecutionStateType.h"
#include "extxml_uci/type/RouteActivityPlanExecutionStatusMDT.h"
#include "extxml_uci/type/RouteActivityPlanExecutionStatusMT.h"
#include "extxml_uci/type/RouteActivityPlanID_Type.h"
#include "extxml_uci/type/RouteActivityPlanInputsType.h"
#include "extxml_uci/type/RouteActivityPlanInvalidType.h"
#include "extxml_uci/type/RouteActivityPlanMDT.h"
#include "extxml_uci/type/RouteActivityPlanMT.h"
#include "extxml_uci/type/RouteActivityPlanStatusMDT.h"
#include "extxml_uci/type/RouteActivityPlanStatusMT.h"
#include "extxml_uci/type/RouteActivityPlanStatusType.h"
#include "extxml_uci/type/RouteActivityPlanType.h"
#include "extxml_uci/type/RouteActivityPlanValidationCommandMDT.h"
#include "extxml_uci/type/RouteActivityPlanValidationCommandMT.h"
#include "extxml_uci/type/RouteActivityPlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/RouteActivityPlanValidationCommandStatusMT.h"
#include "extxml_uci/type/RouteActivityPlanValidationID_Type.h"
#include "extxml_uci/type/RouteActivityPlanValidationInputsType.h"
#include "extxml_uci/type/RouteActivityPlanValidationMDT.h"
#include "extxml_uci/type/RouteActivityPlanValidationMT.h"
#include "extxml_uci/type/RouteActivityType.h"
#include "extxml_uci/type/RouteConflictsType.h"
#include "extxml_uci/type/RouteDeconflictionAssessmentDataType.h"
#include "extxml_uci/type/RouteDeconflictionAssessmentType.h"
#include "extxml_uci/type/RouteDeconflictionRequestType.h"
#include "extxml_uci/type/RouteDeconflictionRoutePlanType.h"
#include "extxml_uci/type/RouteExecutionPlanSetType.h"
#include "extxml_uci/type/RouteMetricsID_Type.h"
#include "extxml_uci/type/RouteMetricsMDT.h"
#include "extxml_uci/type/RouteMetricsMT.h"
#include "extxml_uci/type/RouteMetricsRequestMDT.h"
#include "extxml_uci/type/RouteMetricsRequestMT.h"
#include "extxml_uci/type/RouteMetricsRequestStatusMDT.h"
#include "extxml_uci/type/RouteMetricsRequestStatusMT.h"
#include "extxml_uci/type/RouteModificationRequestMDT.h"
#include "extxml_uci/type/RouteModificationRequestMT.h"
#include "extxml_uci/type/RouteModificationRequestStatusMDT.h"
#include "extxml_uci/type/RouteModificationRequestStatusMT.h"
#include "extxml_uci/type/RoutePathModificationType.h"
#include "extxml_uci/type/RoutePathType.h"
#include "extxml_uci/type/RoutePlanActivationType.h"
#include "extxml_uci/type/RoutePlanAnalysisInputsType.h"
#include "extxml_uci/type/RoutePlanApprovalStatusMDT.h"
#include "extxml_uci/type/RoutePlanApprovalStatusMT.h"
#include "extxml_uci/type/RoutePlanCommandID_ChoiceType.h"
#include "extxml_uci/type/RoutePlanCommandID_Type.h"
#include "extxml_uci/type/RoutePlanCommandMDT.h"
#include "extxml_uci/type/RoutePlanCommandMT.h"
#include "extxml_uci/type/RoutePlanCommandStatusMDT.h"
#include "extxml_uci/type/RoutePlanCommandStatusMT.h"
#include "extxml_uci/type/RoutePlanConstraintType.h"
#include "extxml_uci/type/RoutePlanExecutionStateType.h"
#include "extxml_uci/type/RoutePlanExecutionStatusMDT.h"
#include "extxml_uci/type/RoutePlanExecutionStatusMT.h"
#include "extxml_uci/type/RoutePlanID_Type.h"
#include "extxml_uci/type/RoutePlanInputsType.h"
#include "extxml_uci/type/RoutePlanInvalidType.h"
#include "extxml_uci/type/RoutePlanMDT.h"
#include "extxml_uci/type/RoutePlanMT.h"
#include "extxml_uci/type/RoutePlanPartsType.h"
#include "extxml_uci/type/RoutePlanProcessDescriptionType.h"
#include "extxml_uci/type/RoutePlanProcessType.h"
#include "extxml_uci/type/RoutePlanReferenceType.h"
#include "extxml_uci/type/RoutePlanReferencesType.h"
#include "extxml_uci/type/RoutePlanSegmentReferenceType.h"
#include "extxml_uci/type/RoutePlanStatusMDT.h"
#include "extxml_uci/type/RoutePlanStatusMT.h"
#include "extxml_uci/type/RoutePlanStatusType.h"
#include "extxml_uci/type/RoutePlanType.h"
#include "extxml_uci/type/RoutePlanValidationCommandMDT.h"
#include "extxml_uci/type/RoutePlanValidationCommandMT.h"
#include "extxml_uci/type/RoutePlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/RoutePlanValidationCommandStatusMT.h"
#include "extxml_uci/type/RoutePlanValidationID_Type.h"
#include "extxml_uci/type/RoutePlanValidationInputsType.h"
#include "extxml_uci/type/RoutePlanValidationMDT.h"
#include "extxml_uci/type/RoutePlanValidationMT.h"
#include "extxml_uci/type/RoutePlanningCandidateType.h"
#include "extxml_uci/type/RouteThreatAssessmentDataType.h"
#include "extxml_uci/type/RouteThreatAssessmentType.h"
#include "extxml_uci/type/RouteType.h"
#include "extxml_uci/type/RouteValidationErrorType.h"
#include "extxml_uci/type/RouteValidationInvalidPathType.h"
#include "extxml_uci/type/RouteValidationInvalidSegmentType.h"
#include "extxml_uci/type/RouteVulnerabilityMetricsAssessmentDataType.h"
#include "extxml_uci/type/RouteVulnerabilityMetricsAssessmentType.h"
#include "extxml_uci/type/RouteVulnerabilityMetricsRequestType.h"
#include "extxml_uci/type/RouteVulnerabilityType.h"
#include "extxml_uci/type/RuleResponseType.h"
#include "extxml_uci/type/RunwayCoordinatesType.h"
#include "extxml_uci/type/RunwayID_Type.h"
#include "extxml_uci/type/RunwayUsageDetailsType.h"
#include "extxml_uci/type/RxBeamType.h"
#include "extxml_uci/type/SAR_ActivityCommandType.h"
#include "extxml_uci/type/SAR_ActivityMDT.h"
#include "extxml_uci/type/SAR_ActivityMT.h"
#include "extxml_uci/type/SAR_ActivityStatusDetailType.h"
#include "extxml_uci/type/SAR_ActivityType.h"
#include "extxml_uci/type/SAR_AutomaticTargetDetectionParametersType.h"
#include "extxml_uci/type/SAR_CapabilityCommandSubCapabilityType.h"
#include "extxml_uci/type/SAR_CapabilityCommandType.h"
#include "extxml_uci/type/SAR_CapabilityMDT.h"
#include "extxml_uci/type/SAR_CapabilityMT.h"
#include "extxml_uci/type/SAR_CapabilityOptionsType.h"
#include "extxml_uci/type/SAR_CapabilityStatusMDT.h"
#include "extxml_uci/type/SAR_CapabilityStatusMT.h"
#include "extxml_uci/type/SAR_CapabilityStatusType.h"
#include "extxml_uci/type/SAR_CapabilityType.h"
#include "extxml_uci/type/SAR_CoherentChangeDetectionParametersType.h"
#include "extxml_uci/type/SAR_CollectionConstraintsQualityType.h"
#include "extxml_uci/type/SAR_CollectionConstraintsType.h"
#include "extxml_uci/type/SAR_CollectionOptionsType.h"
#include "extxml_uci/type/SAR_CommandMDT.h"
#include "extxml_uci/type/SAR_CommandMT.h"
#include "extxml_uci/type/SAR_CommandResponseType.h"
#include "extxml_uci/type/SAR_CommandStatusMDT.h"
#include "extxml_uci/type/SAR_CommandStatusMT.h"
#include "extxml_uci/type/SAR_CommandType.h"
#include "extxml_uci/type/SAR_DesiredWaveformType.h"
#include "extxml_uci/type/SAR_DynamicImageParametersType.h"
#include "extxml_uci/type/SAR_PredictedActivityDetailType.h"
#include "extxml_uci/type/SAR_PredictedCollectionsType.h"
#include "extxml_uci/type/SAR_ProcessingParametersType.h"
#include "extxml_uci/type/SAR_SettingsCommandMDT.h"
#include "extxml_uci/type/SAR_SettingsCommandMT.h"
#include "extxml_uci/type/SAR_SettingsCommandStatusMDT.h"
#include "extxml_uci/type/SAR_SettingsCommandStatusMT.h"
#include "extxml_uci/type/SAR_SpecificDataType.h"
#include "extxml_uci/type/SAR_SubCapabilityClutterParametersType.h"
#include "extxml_uci/type/SAR_SubCapabilityNparDetailsType.h"
#include "extxml_uci/type/SAR_SubCapabilityType.h"
#include "extxml_uci/type/SAR_TargetType.h"
#include "extxml_uci/type/SAR_TaskAchievabilityAssessmentRequestType.h"
#include "extxml_uci/type/SAR_TaskAchievabilityAssessmentType.h"
#include "extxml_uci/type/SAR_TaskBaseType.h"
#include "extxml_uci/type/SAR_TaskTargetType.h"
#include "extxml_uci/type/SAR_TaskType.h"
#include "extxml_uci/type/SAR_TwoColorMultiViewParametersType.h"
#include "extxml_uci/type/SAR_WaveformType.h"
#include "extxml_uci/type/SDA_SpecialInstructionsConstraintType.h"
#include "extxml_uci/type/SDA_SpecialInstructionsSetType.h"
#include "extxml_uci/type/SECTGA_Type.h"
#include "extxml_uci/type/SafeAltitudeType.h"
#include "extxml_uci/type/SampleRateRangeType.h"
#include "extxml_uci/type/SatelliteC2_IdentityType.h"
#include "extxml_uci/type/SatelliteCharacteristicsID_Type.h"
#include "extxml_uci/type/SatelliteCharacteristicsMDT.h"
#include "extxml_uci/type/SatelliteCharacteristicsMT.h"
#include "extxml_uci/type/SatelliteCharacteristicsOverrideType.h"
#include "extxml_uci/type/SatelliteCharacteristicsType.h"
#include "extxml_uci/type/SatelliteEnduranceType.h"
#include "extxml_uci/type/SatelliteIdentifierType.h"
#include "extxml_uci/type/SatelliteIdentityChoiceType.h"
#include "extxml_uci/type/SatelliteIdentityType.h"
#include "extxml_uci/type/SatelliteOperationsChangesCharacterizationType.h"
#include "extxml_uci/type/SatellitePhysicalConfigurationID_Type.h"
#include "extxml_uci/type/SatellitePhysicalConfigurationType.h"
#include "extxml_uci/type/ScanDataBaseType.h"
#include "extxml_uci/type/ScanDataType.h"
#include "extxml_uci/type/ScheduleStateType.h"
#include "extxml_uci/type/ScheduleType.h"
#include "extxml_uci/type/ScoringProcessID_Type.h"
#include "extxml_uci/type/SearchTrackActivityDetailsType.h"
#include "extxml_uci/type/SecondaryControllerType.h"
#include "extxml_uci/type/SectorType.h"
#include "extxml_uci/type/SecureStringType.h"
#include "extxml_uci/type/SecurityAccessType.h"
#include "extxml_uci/type/SecurityAuditManagementType.h"
#include "extxml_uci/type/SecurityAuditRecordID_Type.h"
#include "extxml_uci/type/SecurityAuditRecordMDT.h"
#include "extxml_uci/type/SecurityAuditRecordMT.h"
#include "extxml_uci/type/SecurityAuthenticationType.h"
#include "extxml_uci/type/SecurityEventType.h"
#include "extxml_uci/type/SecurityFileManagementType.h"
#include "extxml_uci/type/SecurityIntegrityType.h"
#include "extxml_uci/type/SecurityIntrusionDetectionType.h"
#include "extxml_uci/type/SecurityKeyManagementType.h"
#include "extxml_uci/type/SecurityPolicyManagementType.h"
#include "extxml_uci/type/SecuritySanitizationType.h"
#include "extxml_uci/type/SecuritySystemType.h"
#include "extxml_uci/type/SegmentCaptureType.h"
#include "extxml_uci/type/SegmentCompletedType.h"
#include "extxml_uci/type/SegmentConflictsType.h"
#include "extxml_uci/type/SegmentEstimateType.h"
#include "extxml_uci/type/SegmentID_Type.h"
#include "extxml_uci/type/SegmentKinematicsType.h"
#include "extxml_uci/type/SegmentMetricsType.h"
#include "extxml_uci/type/SegmentRangeType.h"
#include "extxml_uci/type/SegmentRelativeVelocity2D_Type.h"
#include "extxml_uci/type/SelectAntennaType.h"
#include "extxml_uci/type/SelectDigitalComponentResourceType.h"
#include "extxml_uci/type/SelectPayloadResourceType.h"
#include "extxml_uci/type/SelectRF_ComponentResourceType.h"
#include "extxml_uci/type/SelectionQuerySpecificDataType.h"
#include "extxml_uci/type/SelfDefenseStatusMDT.h"
#include "extxml_uci/type/SelfDefenseStatusMT.h"
#include "extxml_uci/type/SensorCharacterizationChoiceType.h"
#include "extxml_uci/type/SensorConstraintsBaseType.h"
#include "uci/base/accessorType.h"
#include "uci/type/RFDC_StatusType.h"
#include "uci/type/RFD_ComponentIdentifierType.h"
#include "uci/type/RFD_GainSettingType.h"
#include "uci/type/RF_BandType.h"
#include "uci/type/RF_ControlCommandMDT.h"
#include "uci/type/RF_ControlCommandMT.h"
#include "uci/type/RF_ControlCommandStatusMDT.h"
#include "uci/type/RF_ControlCommandStatusMT.h"
#include "uci/type/RF_DistributionType.h"
#include "uci/type/RF_GainType.h"
#include "uci/type/RF_OperationType.h"
#include "uci/type/RF_ProfileBandType.h"
#include "uci/type/RF_ProfileID_Type.h"
#include "uci/type/RF_ProfileMDT.h"
#include "uci/type/RF_ProfileMT.h"
#include "uci/type/RF_ProfileType.h"
#include "uci/type/RF_RadiusToFixType.h"
#include "uci/type/RF_ReportID_Type.h"
#include "uci/type/RF_ReportMDT.h"
#include "uci/type/RF_ReportMT.h"
#include "uci/type/RF_ResourceAllocationID_Type.h"
#include "uci/type/RF_ResourceAllocationMDT.h"
#include "uci/type/RF_ResourceAllocationMT.h"
#include "uci/type/RF_ResourceAllocationRequestDigitalRemovalType.h"
#include "uci/type/RF_ResourceAllocationRequestMDT.h"
#include "uci/type/RF_ResourceAllocationRequestMT.h"
#include "uci/type/RF_ResourceAllocationRequestRF_RemovalType.h"
#include "uci/type/RF_ResourceAllocationRequestRemovalType.h"
#include "uci/type/RF_ResourceAllocationRequestStatusMDT.h"
#include "uci/type/RF_ResourceAllocationRequestStatusMT.h"
#include "uci/type/RF_ResourceAllocationType.h"
#include "uci/type/RF_TaskNormalizedMetricsType.h"
#include "uci/type/RF_TaskPerformanceConstraintType.h"
#include "uci/type/RF_TaskPerformanceType.h"
#include "uci/type/RF_ThreadFeedbackType.h"
#include "uci/type/RF_ThreadInstanceCommandType.h"
#include "uci/type/RF_ThreadInstanceSetupCommandMDT.h"
#include "uci/type/RF_ThreadInstanceSetupCommandMT.h"
#include "uci/type/RF_ThreadInstanceSetupCommandStatusMDT.h"
#include "uci/type/RF_ThreadInstanceSetupCommandStatusMT.h"
#include "uci/type/RF_TransmissionType.h"
#include "uci/type/RGB_ColorControlType.h"
#include "uci/type/RSO_ApproachType.h"
#include "uci/type/RSTA_FileTraceabilityType.h"
#include "uci/type/RSTA_TraceabilityType.h"
#include "uci/type/RTN_AccelerationType.h"
#include "uci/type/RTN_KinematicsType.h"
#include "uci/type/RTN_LocalPositionType.h"
#include "uci/type/RTN_PositionDeltaType.h"
#include "uci/type/RTN_PositionSigmaType.h"
#include "uci/type/RTN_PositionType.h"
#include "uci/type/RTN_VelocityDeltaType.h"
#include "uci/type/RTN_VelocitySigmaType.h"
#include "uci/type/RTN_VelocityType.h"
#include "uci/type/ReferenceCapabilityType.h"
#include "uci/type/ReferenceFrameID_Type.h"
#include "uci/type/ReferenceFrameMDT.h"
#include "uci/type/ReferenceFrameMT.h"
#include "uci/type/ReferenceFrameObjectToFollowType.h"
#include "uci/type/ReferenceFrameOriginChoiceType.h"
#include "uci/type/ReferenceFrameOriginKinematicsType.h"
#include "uci/type/ReferenceFrameOriginType.h"
#include "uci/type/ReferenceObjectType.h"
#include "uci/type/RefuelActivityCommandType.h"
#include "uci/type/RefuelActivityDrogueCommandType.h"
#include "uci/type/RefuelActivityDrogueStatusType.h"
#include "uci/type/RefuelActivityMDT.h"
#include "uci/type/RefuelActivityMT.h"
#include "uci/type/RefuelActivityStatusType.h"
#include "uci/type/RefuelActivityType.h"
#include "uci/type/RefuelCapabilityCommandType.h"
#include "uci/type/RefuelCapabilityDrogueCommandType.h"
#include "uci/type/RefuelCapabilityDrogueCommonType.h"
#include "uci/type/RefuelCapabilityDrogueStatusType.h"
#include "uci/type/RefuelCapabilityExtendCommandType.h"
#include "uci/type/RefuelCapabilityMDT.h"
#include "uci/type/RefuelCapabilityMT.h"
#include "uci/type/RefuelCapabilityStatusMDT.h"
#include "uci/type/RefuelCapabilityStatusMT.h"
#include "uci/type/RefuelCapabilityStatusType.h"
#include "uci/type/RefuelCapabilityType.h"
#include "uci/type/RefuelCommandMDT.h"
#include "uci/type/RefuelCommandMT.h"
#include "uci/type/RefuelCommandStatusMDT.h"
#include "uci/type/RefuelCommandStatusMT.h"
#include "uci/type/RefuelCommandType.h"
#include "uci/type/RefuelConnectionType.h"
#include "uci/type/RefuelSettingsCommandMDT.h"
#include "uci/type/RefuelSettingsCommandMT.h"
#include "uci/type/RefuelSettingsCommandStatusMDT.h"
#include "uci/type/RefuelSettingsCommandStatusMT.h"
#include "uci/type/RefuelTaskBaseType.h"
#include "uci/type/RefuelTaskType.h"
#include "uci/type/RefuelingStatusType.h"
#include "uci/type/RelationshipControllingUnitType.h"
#include "uci/type/RelationshipDesignationID_Type.h"
#include "uci/type/RelationshipDesignationMDT.h"
#include "uci/type/RelationshipDesignationMT.h"
#include "uci/type/RelationshipElectronicWarfareType.h"
#include "uci/type/RelationshipThreatType.h"
#include "uci/type/RelationshipType.h"
#include "uci/type/RelativeAngleRateUncertaintyLOS3D_Type.h"
#include "uci/type/RelativeAngleUncertaintyLOS3D_Type.h"
#include "uci/type/RelativeAnglesLOS3D_Type.h"
#include "uci/type/RelativeNavigationType.h"
#include "uci/type/RelativeOffset2D_Type.h"
#include "uci/type/RelativeOffset3D_Type.h"
#include "uci/type/RelativePositionType.h"
#include "uci/type/RelativeSlantRangeLOS3D_Type.h"
#include "uci/type/ReleaseConsentType.h"
#include "uci/type/RemarksType.h"
#include "uci/type/RemoteDestinationType.h"
#include "uci/type/RemoveRF_ThreadInstanceType.h"
#include "uci/type/RepetitionConstraintsType.h"
#include "uci/type/RepetitionContinuousType.h"
#include "uci/type/RepetitionEventBasedType.h"
#include "uci/type/RepetitionEventType.h"
#include "uci/type/RepetitionFiniteType.h"
#include "uci/type/RepetitionPeriodicType.h"
#include "uci/type/RepetitionPositionChangeType.h"
#include "uci/type/RepetitionTimeBasedType.h"
#include "uci/type/RepetitionType.h"
#include "uci/type/ReplanReasonType.h"
#include "uci/type/ReportToType.h"
#include "uci/type/RequestBaseType.h"
#include "uci/type/RequestID_Type.h"
#include "uci/type/RequestStatusBaseType.h"
#include "uci/type/RequestingFunctionID_ChoiceType.h"
#include "uci/type/RequirementAllocationBaseType.h"
#include "uci/type/RequirementAllocationCommandType.h"
#include "uci/type/RequirementAllocationConstraintType.h"
#include "uci/type/RequirementAllocationDetailsType.h"
#include "uci/type/RequirementAllocationLockDetailsType.h"
#include "uci/type/RequirementAllocationParametersType.h"
#include "uci/type/RequirementAllocationWindowID_Type.h"
#include "uci/type/RequirementAllocationWindowType.h"
#include "uci/type/RequirementAssociationConstraintType.h"
#include "uci/type/RequirementChoiceType.h"
#include "uci/type/RequirementConstraintsType.h"
#include "uci/type/RequirementDependencyBaseType.h"
#include "uci/type/RequirementDependencyType.h"
#include "uci/type/RequirementExecutionApprovalStatusBaseType.h"
#include "uci/type/RequirementExecutionPolicyType.h"
#include "uci/type/RequirementExecutionStatusDetailsType.h"
#include "uci/type/RequirementFailedTriggerType.h"
#include "uci/type/RequirementFilterType.h"
#include "uci/type/RequirementGenerationDependencyType.h"
#include "uci/type/RequirementGuidanceType.h"
#include "uci/type/RequirementInstanceID_ChoiceType.h"
#include "uci/type/RequirementKinematicConstraintsType.h"
#include "uci/type/RequirementMetadataType.h"
#include "uci/type/RequirementMetricsCategoryType.h"
#include "uci/type/RequirementMetricsID_Type.h"
#include "uci/type/RequirementMetricsMDT.h"
#include "uci/type/RequirementMetricsMT.h"
#include "uci/type/RequirementMetricsReportType.h"
#include "uci/type/RequirementMetricsRequestMDT.h"
#include "uci/type/RequirementMetricsRequestMT.h"
#include "uci/type/RequirementMetricsRequestStatusMDT.h"
#include "uci/type/RequirementMetricsRequestStatusMT.h"
#include "uci/type/RequirementMetricsType.h"
#include "uci/type/RequirementOptionType.h"
#include "uci/type/RequirementOptionsCommandMDT.h"
#include "uci/type/RequirementOptionsCommandMT.h"
#include "uci/type/RequirementOptionsCommandStatusMDT.h"
#include "uci/type/RequirementOptionsCommandStatusMT.h"
#include "uci/type/RequirementOptionsID_Type.h"
#include "uci/type/RequirementOptionsInputsType.h"
#include "uci/type/RequirementOptionsMDT.h"
#include "uci/type/RequirementOptionsMT.h"
#include "uci/type/RequirementOptionsType.h"
#include "uci/type/RequirementPlanConstraintType.h"
#include "uci/type/RequirementPlanningCandidateType.h"
#include "uci/type/RequirementPlanningResultBaseType.h"
#include "uci/type/RequirementPlanningResultType.h"
#include "uci/type/RequirementPlanningStatusDetailsType.h"
#include "uci/type/RequirementProductMetadataType.h"
#include "uci/type/RequirementRiskAdjustmentType.h"
#include "uci/type/RequirementSetID_Type.h"
#include "uci/type/RequirementSetMDT.h"
#include "uci/type/RequirementSetMT.h"
#include "uci/type/RequirementStatusTraceabilityType.h"
#include "uci/type/RequirementStatusType.h"
#include "uci/type/RequirementTargetConstraintsType.h"
#include "uci/type/RequirementTaxonomyChoiceType.h"
#include "uci/type/RequirementTaxonomyDetailedType.h"
#include "uci/type/RequirementTaxonomyType.h"
#include "uci/type/RequirementTemplateInstantiationType.h"
#include "uci/type/RequirementTemplateOptionType.h"
#include "uci/type/RequirementTemplateOptionsType.h"
#include "uci/type/RequirementTimingType.h"
#include "uci/type/RequirementTriggerType.h"
#include "uci/type/RequirementsReferenceLockableType.h"
#include "uci/type/RequirementsReferenceType.h"
#include "uci/type/RequirementsTemplateID_Type.h"
#include "uci/type/RequirementsTemplateType.h"
#include "uci/type/ResendDataRequestMDT.h"
#include "uci/type/ResendDataRequestMT.h"
#include "uci/type/ResendDataRequestStatusMDT.h"
#include "uci/type/ResendDataRequestStatusMT.h"
#include "uci/type/ResolvedCharacterizationAspectCoverageType.h"
#include "uci/type/ResolvedCharacterizationType.h"
#include "uci/type/ResourceAllocationPeriodDigitalType.h"
#include "uci/type/ResourceAllocationPeriodRF_Type.h"
#include "uci/type/ResourceAllocatorAllocationType.h"
#include "uci/type/ResourceAllocatorCommandExtensionType.h"
#include "uci/type/ResourceAllocatorConstituentIdentifierType.h"
#include "uci/type/ResourceAllocatorSourceCrossReferenceType.h"
#include "uci/type/ResourceAllocatorStatusType.h"
#include "uci/type/ResourceAllocatorSupportedActivitiesType.h"
#include "uci/type/ResourceAllocatorSystemThreadStatusType.h"
#include "uci/type/ResourceDefinitionChoiceType.h"
#include "uci/type/ResourceDefinitionDigitalType.h"
#include "uci/type/ResourceDefinitionRF_Type.h"
#include "uci/type/ResourceRequestID_AndOptionType.h"
#include "uci/type/ResourceRequestOptionType.h"
#include "uci/type/ResourceRequestPeriodType.h"
#include "uci/type/ResourceRequestType.h"
#include "uci/type/ResourceSelectionType.h"
#include "uci/type/ResourceStatusSelectedType.h"
#include "uci/type/ResponseActivityMDT.h"
#include "uci/type/ResponseActivityMT.h"
#include "uci/type/ResponseActivityType.h"
#include "uci/type/ResponseAlertType.h"
#include "uci/type/ResponseAllocationInvalidType.h"
#include "uci/type/ResponseAllocationType.h"
#include "uci/type/ResponseCancelCommandMDT.h"
#include "uci/type/ResponseCancelCommandMT.h"
#include "uci/type/ResponseCancelCommandStatusMDT.h"
#include "uci/type/ResponseCancelCommandStatusMT.h"
#include "uci/type/ResponseCapabilityCommandType.h"
#include "uci/type/ResponseCapabilityMDT.h"
#include "uci/type/ResponseCapabilityMT.h"
#include "uci/type/ResponseCapabilityStatusMDT.h"
#include "uci/type/ResponseCapabilityStatusMT.h"
#include "uci/type/ResponseCapabilityType.h"
#include "uci/type/ResponseCommandMDT.h"
#include "uci/type/ResponseCommandMT.h"
#include "uci/type/ResponseCommandStatusMDT.h"
#include "uci/type/ResponseCommandStatusMT.h"
#include "uci/type/ResponseCommandType.h"
#include "uci/type/ResponseExecutionApprovalStatusMDT.h"
#include "uci/type/ResponseExecutionApprovalStatusMT.h"
#include "uci/type/ResponseID_Type.h"
#include "uci/type/ResponseMDT.h"
#include "uci/type/ResponseMT.h"
#include "uci/type/ResponseOptionDetailsType.h"
#include "uci/type/ResponseOptionTriggerType.h"
#include "uci/type/ResponseOptionType.h"
#include "uci/type/ResponsePlanActivationType.h"
#include "uci/type/ResponsePlanApprovalStatusMDT.h"
#include "uci/type/ResponsePlanApprovalStatusMT.h"
#include "uci/type/ResponsePlanCommandID_ChoiceType.h"
#include "uci/type/ResponsePlanCommandID_Type.h"
#include "uci/type/ResponsePlanCommandMDT.h"
#include "uci/type/ResponsePlanCommandMT.h"
#include "uci/type/ResponsePlanCommandStatusMDT.h"
#include "uci/type/ResponsePlanCommandStatusMT.h"
#include "uci/type/ResponsePlanConstraintType.h"
#include "uci/type/ResponsePlanExecutionStateType.h"
#include "uci/type/ResponsePlanExecutionStatusMDT.h"
#include "uci/type/ResponsePlanExecutionStatusMT.h"
#include "uci/type/ResponsePlanID_Type.h"
#include "uci/type/ResponsePlanInputsType.h"
#include "uci/type/ResponsePlanInvalidType.h"
#include "uci/type/ResponsePlanMDT.h"
#include "uci/type/ResponsePlanMT.h"
#include "uci/type/ResponsePlanPartsType.h"
#include "uci/type/ResponsePlanProcessDescriptionType.h"
#include "uci/type/ResponsePlanProcessType.h"
#include "uci/type/ResponsePlanStatusMDT.h"
#include "uci/type/ResponsePlanStatusMT.h"
#include "uci/type/ResponsePlanType.h"
#include "uci/type/ResponsePlanValidationCommandMDT.h"
#include "uci/type/ResponsePlanValidationCommandMT.h"
#include "uci/type/ResponsePlanValidationCommandStatusMDT.h"
#include "uci/type/ResponsePlanValidationCommandStatusMT.h"
#include "uci/type/ResponsePlanValidationID_Type.h"
#include "uci/type/ResponsePlanValidationInputsType.h"
#include "uci/type/ResponsePlanValidationMDT.h"
#include "uci/type/ResponsePlanValidationMT.h"
#include "uci/type/ResponsePlanningResultType.h"
#include "uci/type/ResponsePlanningStatusMDT.h"
#include "uci/type/ResponsePlanningStatusMT.h"
#include "uci/type/ResponseStatusMDT.h"
#include "uci/type/ResponseStatusMT.h"
#include "uci/type/ResponseTemplateType.h"
#include "uci/type/ResultingActivityType.h"
#include "uci/type/RightAscensionDeclinationPointType.h"
#include "uci/type/RiskSettingType.h"
#include "uci/type/RouteActivityExecutionStatusType.h"
#include "uci/type/RouteActivityKinematicReferenceType.h"
#include "uci/type/RouteActivityPlanActivationType.h"
#include "uci/type/RouteActivityPlanApprovalStatusMDT.h"
#include "uci/type/RouteActivityPlanApprovalStatusMT.h"
#include "uci/type/RouteActivityPlanCommandID_ChoiceType.h"
#include "uci/type/RouteActivityPlanCommandID_Type.h"
#include "uci/type/RouteActivityPlanCommandMDT.h"
#include "uci/type/RouteActivityPlanCommandMT.h"
#include "uci/type/RouteActivityPlanCommandStatusMDT.h"
#include "uci/type/RouteActivityPlanCommandStatusMT.h"
#include "uci/type/RouteActivityPlanConstraintType.h"
#include "uci/type/RouteActivityPlanExecutionStateType.h"
#include "uci/type/RouteActivityPlanExecutionStatusMDT.h"
#include "uci/type/RouteActivityPlanExecutionStatusMT.h"
#include "uci/type/RouteActivityPlanID_Type.h"
#include "uci/type/RouteActivityPlanInputsType.h"
#include "uci/type/RouteActivityPlanInvalidType.h"
#include "uci/type/RouteActivityPlanMDT.h"
#include "uci/type/RouteActivityPlanMT.h"
#include "uci/type/RouteActivityPlanStatusMDT.h"
#include "uci/type/RouteActivityPlanStatusMT.h"
#include "uci/type/RouteActivityPlanStatusType.h"
#include "uci/type/RouteActivityPlanType.h"
#include "uci/type/RouteActivityPlanValidationCommandMDT.h"
#include "uci/type/RouteActivityPlanValidationCommandMT.h"
#include "uci/type/RouteActivityPlanValidationCommandStatusMDT.h"
#include "uci/type/RouteActivityPlanValidationCommandStatusMT.h"
#include "uci/type/RouteActivityPlanValidationID_Type.h"
#include "uci/type/RouteActivityPlanValidationInputsType.h"
#include "uci/type/RouteActivityPlanValidationMDT.h"
#include "uci/type/RouteActivityPlanValidationMT.h"
#include "uci/type/RouteActivityType.h"
#include "uci/type/RouteConflictsType.h"
#include "uci/type/RouteDeconflictionAssessmentDataType.h"
#include "uci/type/RouteDeconflictionAssessmentType.h"
#include "uci/type/RouteDeconflictionRequestType.h"
#include "uci/type/RouteDeconflictionRoutePlanType.h"
#include "uci/type/RouteExecutionPlanSetType.h"
#include "uci/type/RouteMetricsID_Type.h"
#include "uci/type/RouteMetricsMDT.h"
#include "uci/type/RouteMetricsMT.h"
#include "uci/type/RouteMetricsRequestMDT.h"
#include "uci/type/RouteMetricsRequestMT.h"
#include "uci/type/RouteMetricsRequestStatusMDT.h"
#include "uci/type/RouteMetricsRequestStatusMT.h"
#include "uci/type/RouteModificationRequestMDT.h"
#include "uci/type/RouteModificationRequestMT.h"
#include "uci/type/RouteModificationRequestStatusMDT.h"
#include "uci/type/RouteModificationRequestStatusMT.h"
#include "uci/type/RoutePathModificationType.h"
#include "uci/type/RoutePathType.h"
#include "uci/type/RoutePlanActivationType.h"
#include "uci/type/RoutePlanAnalysisInputsType.h"
#include "uci/type/RoutePlanApprovalStatusMDT.h"
#include "uci/type/RoutePlanApprovalStatusMT.h"
#include "uci/type/RoutePlanCommandID_ChoiceType.h"
#include "uci/type/RoutePlanCommandID_Type.h"
#include "uci/type/RoutePlanCommandMDT.h"
#include "uci/type/RoutePlanCommandMT.h"
#include "uci/type/RoutePlanCommandStatusMDT.h"
#include "uci/type/RoutePlanCommandStatusMT.h"
#include "uci/type/RoutePlanConstraintType.h"
#include "uci/type/RoutePlanExecutionStateType.h"
#include "uci/type/RoutePlanExecutionStatusMDT.h"
#include "uci/type/RoutePlanExecutionStatusMT.h"
#include "uci/type/RoutePlanID_Type.h"
#include "uci/type/RoutePlanInputsType.h"
#include "uci/type/RoutePlanInvalidType.h"
#include "uci/type/RoutePlanMDT.h"
#include "uci/type/RoutePlanMT.h"
#include "uci/type/RoutePlanPartsType.h"
#include "uci/type/RoutePlanProcessDescriptionType.h"
#include "uci/type/RoutePlanProcessType.h"
#include "uci/type/RoutePlanReferenceType.h"
#include "uci/type/RoutePlanReferencesType.h"
#include "uci/type/RoutePlanSegmentReferenceType.h"
#include "uci/type/RoutePlanStatusMDT.h"
#include "uci/type/RoutePlanStatusMT.h"
#include "uci/type/RoutePlanStatusType.h"
#include "uci/type/RoutePlanType.h"
#include "uci/type/RoutePlanValidationCommandMDT.h"
#include "uci/type/RoutePlanValidationCommandMT.h"
#include "uci/type/RoutePlanValidationCommandStatusMDT.h"
#include "uci/type/RoutePlanValidationCommandStatusMT.h"
#include "uci/type/RoutePlanValidationID_Type.h"
#include "uci/type/RoutePlanValidationInputsType.h"
#include "uci/type/RoutePlanValidationMDT.h"
#include "uci/type/RoutePlanValidationMT.h"
#include "uci/type/RoutePlanningCandidateType.h"
#include "uci/type/RouteThreatAssessmentDataType.h"
#include "uci/type/RouteThreatAssessmentType.h"
#include "uci/type/RouteType.h"
#include "uci/type/RouteValidationErrorType.h"
#include "uci/type/RouteValidationInvalidPathType.h"
#include "uci/type/RouteValidationInvalidSegmentType.h"
#include "uci/type/RouteVulnerabilityMetricsAssessmentDataType.h"
#include "uci/type/RouteVulnerabilityMetricsAssessmentType.h"
#include "uci/type/RouteVulnerabilityMetricsRequestType.h"
#include "uci/type/RouteVulnerabilityType.h"
#include "uci/type/RuleResponseType.h"
#include "uci/type/RunwayCoordinatesType.h"
#include "uci/type/RunwayID_Type.h"
#include "uci/type/RunwayUsageDetailsType.h"
#include "uci/type/RxBeamType.h"
#include "uci/type/SAR_ActivityCommandType.h"
#include "uci/type/SAR_ActivityMDT.h"
#include "uci/type/SAR_ActivityMT.h"
#include "uci/type/SAR_ActivityStatusDetailType.h"
#include "uci/type/SAR_ActivityType.h"
#include "uci/type/SAR_AutomaticTargetDetectionParametersType.h"
#include "uci/type/SAR_CapabilityCommandSubCapabilityType.h"
#include "uci/type/SAR_CapabilityCommandType.h"
#include "uci/type/SAR_CapabilityMDT.h"
#include "uci/type/SAR_CapabilityMT.h"
#include "uci/type/SAR_CapabilityOptionsType.h"
#include "uci/type/SAR_CapabilityStatusMDT.h"
#include "uci/type/SAR_CapabilityStatusMT.h"
#include "uci/type/SAR_CapabilityStatusType.h"
#include "uci/type/SAR_CapabilityType.h"
#include "uci/type/SAR_CoherentChangeDetectionParametersType.h"
#include "uci/type/SAR_CollectionConstraintsQualityType.h"
#include "uci/type/SAR_CollectionConstraintsType.h"
#include "uci/type/SAR_CollectionOptionsType.h"
#include "uci/type/SAR_CommandMDT.h"
#include "uci/type/SAR_CommandMT.h"
#include "uci/type/SAR_CommandResponseType.h"
#include "uci/type/SAR_CommandStatusMDT.h"
#include "uci/type/SAR_CommandStatusMT.h"
#include "uci/type/SAR_CommandType.h"
#include "uci/type/SAR_DesiredWaveformType.h"
#include "uci/type/SAR_DynamicImageParametersType.h"
#include "uci/type/SAR_PredictedActivityDetailType.h"
#include "uci/type/SAR_PredictedCollectionsType.h"
#include "uci/type/SAR_ProcessingParametersType.h"
#include "uci/type/SAR_SettingsCommandMDT.h"
#include "uci/type/SAR_SettingsCommandMT.h"
#include "uci/type/SAR_SettingsCommandStatusMDT.h"
#include "uci/type/SAR_SettingsCommandStatusMT.h"
#include "uci/type/SAR_SpecificDataType.h"
#include "uci/type/SAR_SubCapabilityClutterParametersType.h"
#include "uci/type/SAR_SubCapabilityNparDetailsType.h"
#include "uci/type/SAR_SubCapabilityType.h"
#include "uci/type/SAR_TargetType.h"
#include "uci/type/SAR_TaskAchievabilityAssessmentRequestType.h"
#include "uci/type/SAR_TaskAchievabilityAssessmentType.h"
#include "uci/type/SAR_TaskBaseType.h"
#include "uci/type/SAR_TaskTargetType.h"
#include "uci/type/SAR_TaskType.h"
#include "uci/type/SAR_TwoColorMultiViewParametersType.h"
#include "uci/type/SAR_WaveformType.h"
#include "uci/type/SDA_SpecialInstructionsConstraintType.h"
#include "uci/type/SDA_SpecialInstructionsSetType.h"
#include "uci/type/SECTGA_Type.h"
#include "uci/type/SafeAltitudeType.h"
#include "uci/type/SampleRateRangeType.h"
#include "uci/type/SatelliteC2_IdentityType.h"
#include "uci/type/SatelliteCharacteristicsID_Type.h"
#include "uci/type/SatelliteCharacteristicsMDT.h"
#include "uci/type/SatelliteCharacteristicsMT.h"
#include "uci/type/SatelliteCharacteristicsOverrideType.h"
#include "uci/type/SatelliteCharacteristicsType.h"
#include "uci/type/SatelliteEnduranceType.h"
#include "uci/type/SatelliteIdentifierType.h"
#include "uci/type/SatelliteIdentityChoiceType.h"
#include "uci/type/SatelliteIdentityType.h"
#include "uci/type/SatelliteOperationsChangesCharacterizationType.h"
#include "uci/type/SatellitePhysicalConfigurationID_Type.h"
#include "uci/type/SatellitePhysicalConfigurationType.h"
#include "uci/type/ScanDataBaseType.h"
#include "uci/type/ScanDataType.h"
#include "uci/type/ScheduleStateType.h"
#include "uci/type/ScheduleType.h"
#include "uci/type/ScoringProcessID_Type.h"
#include "uci/type/SearchTrackActivityDetailsType.h"
#include "uci/type/SecondaryControllerType.h"
#include "uci/type/SectorType.h"
#include "uci/type/SecureStringType.h"
#include "uci/type/SecurityAccessType.h"
#include "uci/type/SecurityAuditManagementType.h"
#include "uci/type/SecurityAuditRecordID_Type.h"
#include "uci/type/SecurityAuditRecordMDT.h"
#include "uci/type/SecurityAuditRecordMT.h"
#include "uci/type/SecurityAuthenticationType.h"
#include "uci/type/SecurityEventType.h"
#include "uci/type/SecurityFileManagementType.h"
#include "uci/type/SecurityIntegrityType.h"
#include "uci/type/SecurityIntrusionDetectionType.h"
#include "uci/type/SecurityKeyManagementType.h"
#include "uci/type/SecurityPolicyManagementType.h"
#include "uci/type/SecuritySanitizationType.h"
#include "uci/type/SecuritySystemType.h"
#include "uci/type/SegmentCaptureType.h"
#include "uci/type/SegmentCompletedType.h"
#include "uci/type/SegmentConflictsType.h"
#include "uci/type/SegmentEstimateType.h"
#include "uci/type/SegmentID_Type.h"
#include "uci/type/SegmentKinematicsType.h"
#include "uci/type/SegmentMetricsType.h"
#include "uci/type/SegmentRangeType.h"
#include "uci/type/SegmentRelativeVelocity2D_Type.h"
#include "uci/type/SelectAntennaType.h"
#include "uci/type/SelectDigitalComponentResourceType.h"
#include "uci/type/SelectPayloadResourceType.h"
#include "uci/type/SelectRF_ComponentResourceType.h"
#include "uci/type/SelectionQuerySpecificDataType.h"
#include "uci/type/SelfDefenseStatusMDT.h"
#include "uci/type/SelfDefenseStatusMT.h"
#include "uci/type/SensorCharacterizationChoiceType.h"
#include "uci/type/SensorConstraintsBaseType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all base data types are declared */
namespace base {

bool extxml_uci::base::ExternalizerRead7::read(const boost::property_tree::ptree& propTree, uci::base::Accessor& accessor, std::string& nodeName, std::string& nsPrefix) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::referenceCapabilityType:
      return extxml_uci::type::ReferenceCapabilityType::deserialize(propTree, dynamic_cast<uci::type::ReferenceCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::referenceFrameID_Type:
      return extxml_uci::type::ReferenceFrameID_Type::deserialize(propTree, dynamic_cast<uci::type::ReferenceFrameID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::referenceFrameMDT:
      return extxml_uci::type::ReferenceFrameMDT::deserialize(propTree, dynamic_cast<uci::type::ReferenceFrameMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::referenceFrameMT:
      return extxml_uci::type::ReferenceFrameMT::deserialize(propTree, dynamic_cast<uci::type::ReferenceFrameMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::referenceFrameObjectToFollowType:
      return extxml_uci::type::ReferenceFrameObjectToFollowType::deserialize(propTree, dynamic_cast<uci::type::ReferenceFrameObjectToFollowType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::referenceFrameOriginChoiceType:
      return extxml_uci::type::ReferenceFrameOriginChoiceType::deserialize(propTree, dynamic_cast<uci::type::ReferenceFrameOriginChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::referenceFrameOriginKinematicsType:
      return extxml_uci::type::ReferenceFrameOriginKinematicsType::deserialize(propTree, dynamic_cast<uci::type::ReferenceFrameOriginKinematicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::referenceFrameOriginType:
      return extxml_uci::type::ReferenceFrameOriginType::deserialize(propTree, dynamic_cast<uci::type::ReferenceFrameOriginType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::referenceObjectType:
      return extxml_uci::type::ReferenceObjectType::deserialize(propTree, dynamic_cast<uci::type::ReferenceObjectType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelActivityCommandType:
      return extxml_uci::type::RefuelActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::RefuelActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelActivityDrogueCommandType:
      return extxml_uci::type::RefuelActivityDrogueCommandType::deserialize(propTree, dynamic_cast<uci::type::RefuelActivityDrogueCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelActivityDrogueStatusType:
      return extxml_uci::type::RefuelActivityDrogueStatusType::deserialize(propTree, dynamic_cast<uci::type::RefuelActivityDrogueStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelActivityMDT:
      return extxml_uci::type::RefuelActivityMDT::deserialize(propTree, dynamic_cast<uci::type::RefuelActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelActivityMT:
      return extxml_uci::type::RefuelActivityMT::deserialize(propTree, dynamic_cast<uci::type::RefuelActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelActivityStatusType:
      return extxml_uci::type::RefuelActivityStatusType::deserialize(propTree, dynamic_cast<uci::type::RefuelActivityStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelActivityType:
      return extxml_uci::type::RefuelActivityType::deserialize(propTree, dynamic_cast<uci::type::RefuelActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCapabilityCommandType:
      return extxml_uci::type::RefuelCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCapabilityDrogueCommandType:
      return extxml_uci::type::RefuelCapabilityDrogueCommandType::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityDrogueCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCapabilityDrogueCommonType:
      return extxml_uci::type::RefuelCapabilityDrogueCommonType::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityDrogueCommonType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCapabilityDrogueStatusType:
      return extxml_uci::type::RefuelCapabilityDrogueStatusType::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityDrogueStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCapabilityExtendCommandType:
      return extxml_uci::type::RefuelCapabilityExtendCommandType::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityExtendCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCapabilityMDT:
      return extxml_uci::type::RefuelCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCapabilityMT:
      return extxml_uci::type::RefuelCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCapabilityStatusMDT:
      return extxml_uci::type::RefuelCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCapabilityStatusMT:
      return extxml_uci::type::RefuelCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCapabilityStatusType:
      return extxml_uci::type::RefuelCapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCapabilityType:
      return extxml_uci::type::RefuelCapabilityType::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCommandMDT:
      return extxml_uci::type::RefuelCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RefuelCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCommandMT:
      return extxml_uci::type::RefuelCommandMT::deserialize(propTree, dynamic_cast<uci::type::RefuelCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCommandStatusMDT:
      return extxml_uci::type::RefuelCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RefuelCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCommandStatusMT:
      return extxml_uci::type::RefuelCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RefuelCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelCommandType:
      return extxml_uci::type::RefuelCommandType::deserialize(propTree, dynamic_cast<uci::type::RefuelCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelConnectionType:
      return extxml_uci::type::RefuelConnectionType::deserialize(propTree, dynamic_cast<uci::type::RefuelConnectionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelingStatusType:
      return extxml_uci::type::RefuelingStatusType::deserialize(propTree, dynamic_cast<uci::type::RefuelingStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelSettingsCommandMDT:
      return extxml_uci::type::RefuelSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RefuelSettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelSettingsCommandMT:
      return extxml_uci::type::RefuelSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::RefuelSettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelSettingsCommandStatusMDT:
      return extxml_uci::type::RefuelSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RefuelSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelSettingsCommandStatusMT:
      return extxml_uci::type::RefuelSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RefuelSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelTaskBaseType:
      return extxml_uci::type::RefuelTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::RefuelTaskBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::refuelTaskType:
      return extxml_uci::type::RefuelTaskType::deserialize(propTree, dynamic_cast<uci::type::RefuelTaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relationshipControllingUnitType:
      return extxml_uci::type::RelationshipControllingUnitType::deserialize(propTree, dynamic_cast<uci::type::RelationshipControllingUnitType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relationshipDesignationID_Type:
      return extxml_uci::type::RelationshipDesignationID_Type::deserialize(propTree, dynamic_cast<uci::type::RelationshipDesignationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relationshipDesignationMDT:
      return extxml_uci::type::RelationshipDesignationMDT::deserialize(propTree, dynamic_cast<uci::type::RelationshipDesignationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relationshipDesignationMT:
      return extxml_uci::type::RelationshipDesignationMT::deserialize(propTree, dynamic_cast<uci::type::RelationshipDesignationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relationshipElectronicWarfareType:
      return extxml_uci::type::RelationshipElectronicWarfareType::deserialize(propTree, dynamic_cast<uci::type::RelationshipElectronicWarfareType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relationshipThreatType:
      return extxml_uci::type::RelationshipThreatType::deserialize(propTree, dynamic_cast<uci::type::RelationshipThreatType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relationshipType:
      return extxml_uci::type::RelationshipType::deserialize(propTree, dynamic_cast<uci::type::RelationshipType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relativeAngleRateUncertaintyLOS3D_Type:
      return extxml_uci::type::RelativeAngleRateUncertaintyLOS3D_Type::deserialize(propTree, dynamic_cast<uci::type::RelativeAngleRateUncertaintyLOS3D_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relativeAnglesLOS3D_Type:
      return extxml_uci::type::RelativeAnglesLOS3D_Type::deserialize(propTree, dynamic_cast<uci::type::RelativeAnglesLOS3D_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relativeAngleUncertaintyLOS3D_Type:
      return extxml_uci::type::RelativeAngleUncertaintyLOS3D_Type::deserialize(propTree, dynamic_cast<uci::type::RelativeAngleUncertaintyLOS3D_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relativeNavigationType:
      return extxml_uci::type::RelativeNavigationType::deserialize(propTree, dynamic_cast<uci::type::RelativeNavigationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relativeOffset2D_Type:
      return extxml_uci::type::RelativeOffset2D_Type::deserialize(propTree, dynamic_cast<uci::type::RelativeOffset2D_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relativeOffset3D_Type:
      return extxml_uci::type::RelativeOffset3D_Type::deserialize(propTree, dynamic_cast<uci::type::RelativeOffset3D_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relativePositionType:
      return extxml_uci::type::RelativePositionType::deserialize(propTree, dynamic_cast<uci::type::RelativePositionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::relativeSlantRangeLOS3D_Type:
      return extxml_uci::type::RelativeSlantRangeLOS3D_Type::deserialize(propTree, dynamic_cast<uci::type::RelativeSlantRangeLOS3D_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::releaseConsentType:
      return extxml_uci::type::ReleaseConsentType::deserialize(propTree, dynamic_cast<uci::type::ReleaseConsentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::remarksType:
      return extxml_uci::type::RemarksType::deserialize(propTree, dynamic_cast<uci::type::RemarksType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::remoteDestinationType:
      return extxml_uci::type::RemoteDestinationType::deserialize(propTree, dynamic_cast<uci::type::RemoteDestinationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::removeRF_ThreadInstanceType:
      return extxml_uci::type::RemoveRF_ThreadInstanceType::deserialize(propTree, dynamic_cast<uci::type::RemoveRF_ThreadInstanceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::repetitionConstraintsType:
      return extxml_uci::type::RepetitionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::RepetitionConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::repetitionContinuousType:
      return extxml_uci::type::RepetitionContinuousType::deserialize(propTree, dynamic_cast<uci::type::RepetitionContinuousType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::repetitionEventBasedType:
      return extxml_uci::type::RepetitionEventBasedType::deserialize(propTree, dynamic_cast<uci::type::RepetitionEventBasedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::repetitionEventType:
      return extxml_uci::type::RepetitionEventType::deserialize(propTree, dynamic_cast<uci::type::RepetitionEventType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::repetitionFiniteType:
      return extxml_uci::type::RepetitionFiniteType::deserialize(propTree, dynamic_cast<uci::type::RepetitionFiniteType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::repetitionPeriodicType:
      return extxml_uci::type::RepetitionPeriodicType::deserialize(propTree, dynamic_cast<uci::type::RepetitionPeriodicType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::repetitionPositionChangeType:
      return extxml_uci::type::RepetitionPositionChangeType::deserialize(propTree, dynamic_cast<uci::type::RepetitionPositionChangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::repetitionTimeBasedType:
      return extxml_uci::type::RepetitionTimeBasedType::deserialize(propTree, dynamic_cast<uci::type::RepetitionTimeBasedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::repetitionType:
      return extxml_uci::type::RepetitionType::deserialize(propTree, dynamic_cast<uci::type::RepetitionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::replanReasonType:
      return extxml_uci::type::ReplanReasonType::deserialize(propTree, dynamic_cast<uci::type::ReplanReasonType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::reportToType:
      return extxml_uci::type::ReportToType::deserialize(propTree, dynamic_cast<uci::type::ReportToType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requestBaseType:
      return extxml_uci::type::RequestBaseType::deserialize(propTree, dynamic_cast<uci::type::RequestBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requestID_Type:
      return extxml_uci::type::RequestID_Type::deserialize(propTree, dynamic_cast<uci::type::RequestID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requestingFunctionID_ChoiceType:
      return extxml_uci::type::RequestingFunctionID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::RequestingFunctionID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requestStatusBaseType:
      return extxml_uci::type::RequestStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::RequestStatusBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementAllocationBaseType:
      return extxml_uci::type::RequirementAllocationBaseType::deserialize(propTree, dynamic_cast<uci::type::RequirementAllocationBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementAllocationCommandType:
      return extxml_uci::type::RequirementAllocationCommandType::deserialize(propTree, dynamic_cast<uci::type::RequirementAllocationCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementAllocationConstraintType:
      return extxml_uci::type::RequirementAllocationConstraintType::deserialize(propTree, dynamic_cast<uci::type::RequirementAllocationConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementAllocationDetailsType:
      return extxml_uci::type::RequirementAllocationDetailsType::deserialize(propTree, dynamic_cast<uci::type::RequirementAllocationDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementAllocationLockDetailsType:
      return extxml_uci::type::RequirementAllocationLockDetailsType::deserialize(propTree, dynamic_cast<uci::type::RequirementAllocationLockDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementAllocationParametersType:
      return extxml_uci::type::RequirementAllocationParametersType::deserialize(propTree, dynamic_cast<uci::type::RequirementAllocationParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementAllocationWindowID_Type:
      return extxml_uci::type::RequirementAllocationWindowID_Type::deserialize(propTree, dynamic_cast<uci::type::RequirementAllocationWindowID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementAllocationWindowType:
      return extxml_uci::type::RequirementAllocationWindowType::deserialize(propTree, dynamic_cast<uci::type::RequirementAllocationWindowType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementAssociationConstraintType:
      return extxml_uci::type::RequirementAssociationConstraintType::deserialize(propTree, dynamic_cast<uci::type::RequirementAssociationConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementChoiceType:
      return extxml_uci::type::RequirementChoiceType::deserialize(propTree, dynamic_cast<uci::type::RequirementChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementConstraintsType:
      return extxml_uci::type::RequirementConstraintsType::deserialize(propTree, dynamic_cast<uci::type::RequirementConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementDependencyBaseType:
      return extxml_uci::type::RequirementDependencyBaseType::deserialize(propTree, dynamic_cast<uci::type::RequirementDependencyBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementDependencyType:
      return extxml_uci::type::RequirementDependencyType::deserialize(propTree, dynamic_cast<uci::type::RequirementDependencyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementExecutionApprovalStatusBaseType:
      return extxml_uci::type::RequirementExecutionApprovalStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::RequirementExecutionApprovalStatusBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementExecutionPolicyType:
      return extxml_uci::type::RequirementExecutionPolicyType::deserialize(propTree, dynamic_cast<uci::type::RequirementExecutionPolicyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementExecutionStatusDetailsType:
      return extxml_uci::type::RequirementExecutionStatusDetailsType::deserialize(propTree, dynamic_cast<uci::type::RequirementExecutionStatusDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementFailedTriggerType:
      return extxml_uci::type::RequirementFailedTriggerType::deserialize(propTree, dynamic_cast<uci::type::RequirementFailedTriggerType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementFilterType:
      return extxml_uci::type::RequirementFilterType::deserialize(propTree, dynamic_cast<uci::type::RequirementFilterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementGenerationDependencyType:
      return extxml_uci::type::RequirementGenerationDependencyType::deserialize(propTree, dynamic_cast<uci::type::RequirementGenerationDependencyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementGuidanceType:
      return extxml_uci::type::RequirementGuidanceType::deserialize(propTree, dynamic_cast<uci::type::RequirementGuidanceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementInstanceID_ChoiceType:
      return extxml_uci::type::RequirementInstanceID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::RequirementInstanceID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementKinematicConstraintsType:
      return extxml_uci::type::RequirementKinematicConstraintsType::deserialize(propTree, dynamic_cast<uci::type::RequirementKinematicConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementMetadataType:
      return extxml_uci::type::RequirementMetadataType::deserialize(propTree, dynamic_cast<uci::type::RequirementMetadataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementMetricsCategoryType:
      return extxml_uci::type::RequirementMetricsCategoryType::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsCategoryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementMetricsID_Type:
      return extxml_uci::type::RequirementMetricsID_Type::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementMetricsMDT:
      return extxml_uci::type::RequirementMetricsMDT::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementMetricsMT:
      return extxml_uci::type::RequirementMetricsMT::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementMetricsReportType:
      return extxml_uci::type::RequirementMetricsReportType::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsReportType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementMetricsRequestMDT:
      return extxml_uci::type::RequirementMetricsRequestMDT::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementMetricsRequestMT:
      return extxml_uci::type::RequirementMetricsRequestMT::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementMetricsRequestStatusMDT:
      return extxml_uci::type::RequirementMetricsRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementMetricsRequestStatusMT:
      return extxml_uci::type::RequirementMetricsRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementMetricsType:
      return extxml_uci::type::RequirementMetricsType::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementOptionsCommandMDT:
      return extxml_uci::type::RequirementOptionsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RequirementOptionsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementOptionsCommandMT:
      return extxml_uci::type::RequirementOptionsCommandMT::deserialize(propTree, dynamic_cast<uci::type::RequirementOptionsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementOptionsCommandStatusMDT:
      return extxml_uci::type::RequirementOptionsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RequirementOptionsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementOptionsCommandStatusMT:
      return extxml_uci::type::RequirementOptionsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RequirementOptionsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementOptionsID_Type:
      return extxml_uci::type::RequirementOptionsID_Type::deserialize(propTree, dynamic_cast<uci::type::RequirementOptionsID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementOptionsInputsType:
      return extxml_uci::type::RequirementOptionsInputsType::deserialize(propTree, dynamic_cast<uci::type::RequirementOptionsInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementOptionsMDT:
      return extxml_uci::type::RequirementOptionsMDT::deserialize(propTree, dynamic_cast<uci::type::RequirementOptionsMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementOptionsMT:
      return extxml_uci::type::RequirementOptionsMT::deserialize(propTree, dynamic_cast<uci::type::RequirementOptionsMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementOptionsType:
      return extxml_uci::type::RequirementOptionsType::deserialize(propTree, dynamic_cast<uci::type::RequirementOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementOptionType:
      return extxml_uci::type::RequirementOptionType::deserialize(propTree, dynamic_cast<uci::type::RequirementOptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementPlanConstraintType:
      return extxml_uci::type::RequirementPlanConstraintType::deserialize(propTree, dynamic_cast<uci::type::RequirementPlanConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementPlanningCandidateType:
      return extxml_uci::type::RequirementPlanningCandidateType::deserialize(propTree, dynamic_cast<uci::type::RequirementPlanningCandidateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementPlanningResultBaseType:
      return extxml_uci::type::RequirementPlanningResultBaseType::deserialize(propTree, dynamic_cast<uci::type::RequirementPlanningResultBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementPlanningResultType:
      return extxml_uci::type::RequirementPlanningResultType::deserialize(propTree, dynamic_cast<uci::type::RequirementPlanningResultType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementPlanningStatusDetailsType:
      return extxml_uci::type::RequirementPlanningStatusDetailsType::deserialize(propTree, dynamic_cast<uci::type::RequirementPlanningStatusDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementProductMetadataType:
      return extxml_uci::type::RequirementProductMetadataType::deserialize(propTree, dynamic_cast<uci::type::RequirementProductMetadataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementRiskAdjustmentType:
      return extxml_uci::type::RequirementRiskAdjustmentType::deserialize(propTree, dynamic_cast<uci::type::RequirementRiskAdjustmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementSetID_Type:
      return extxml_uci::type::RequirementSetID_Type::deserialize(propTree, dynamic_cast<uci::type::RequirementSetID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementSetMDT:
      return extxml_uci::type::RequirementSetMDT::deserialize(propTree, dynamic_cast<uci::type::RequirementSetMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementSetMT:
      return extxml_uci::type::RequirementSetMT::deserialize(propTree, dynamic_cast<uci::type::RequirementSetMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementsReferenceLockableType:
      return extxml_uci::type::RequirementsReferenceLockableType::deserialize(propTree, dynamic_cast<uci::type::RequirementsReferenceLockableType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementsReferenceType:
      return extxml_uci::type::RequirementsReferenceType::deserialize(propTree, dynamic_cast<uci::type::RequirementsReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementStatusTraceabilityType:
      return extxml_uci::type::RequirementStatusTraceabilityType::deserialize(propTree, dynamic_cast<uci::type::RequirementStatusTraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementStatusType:
      return extxml_uci::type::RequirementStatusType::deserialize(propTree, dynamic_cast<uci::type::RequirementStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementsTemplateID_Type:
      return extxml_uci::type::RequirementsTemplateID_Type::deserialize(propTree, dynamic_cast<uci::type::RequirementsTemplateID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementsTemplateType:
      return extxml_uci::type::RequirementsTemplateType::deserialize(propTree, dynamic_cast<uci::type::RequirementsTemplateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementTargetConstraintsType:
      return extxml_uci::type::RequirementTargetConstraintsType::deserialize(propTree, dynamic_cast<uci::type::RequirementTargetConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementTaxonomyChoiceType:
      return extxml_uci::type::RequirementTaxonomyChoiceType::deserialize(propTree, dynamic_cast<uci::type::RequirementTaxonomyChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementTaxonomyDetailedType:
      return extxml_uci::type::RequirementTaxonomyDetailedType::deserialize(propTree, dynamic_cast<uci::type::RequirementTaxonomyDetailedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementTaxonomyType:
      return extxml_uci::type::RequirementTaxonomyType::deserialize(propTree, dynamic_cast<uci::type::RequirementTaxonomyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementTemplateInstantiationType:
      return extxml_uci::type::RequirementTemplateInstantiationType::deserialize(propTree, dynamic_cast<uci::type::RequirementTemplateInstantiationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementTemplateOptionsType:
      return extxml_uci::type::RequirementTemplateOptionsType::deserialize(propTree, dynamic_cast<uci::type::RequirementTemplateOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementTemplateOptionType:
      return extxml_uci::type::RequirementTemplateOptionType::deserialize(propTree, dynamic_cast<uci::type::RequirementTemplateOptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementTimingType:
      return extxml_uci::type::RequirementTimingType::deserialize(propTree, dynamic_cast<uci::type::RequirementTimingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::requirementTriggerType:
      return extxml_uci::type::RequirementTriggerType::deserialize(propTree, dynamic_cast<uci::type::RequirementTriggerType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resendDataRequestMDT:
      return extxml_uci::type::ResendDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ResendDataRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resendDataRequestMT:
      return extxml_uci::type::ResendDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::ResendDataRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resendDataRequestStatusMDT:
      return extxml_uci::type::ResendDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResendDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resendDataRequestStatusMT:
      return extxml_uci::type::ResendDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResendDataRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resolvedCharacterizationAspectCoverageType:
      return extxml_uci::type::ResolvedCharacterizationAspectCoverageType::deserialize(propTree, dynamic_cast<uci::type::ResolvedCharacterizationAspectCoverageType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resolvedCharacterizationType:
      return extxml_uci::type::ResolvedCharacterizationType::deserialize(propTree, dynamic_cast<uci::type::ResolvedCharacterizationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceAllocationPeriodDigitalType:
      return extxml_uci::type::ResourceAllocationPeriodDigitalType::deserialize(propTree, dynamic_cast<uci::type::ResourceAllocationPeriodDigitalType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceAllocationPeriodRF_Type:
      return extxml_uci::type::ResourceAllocationPeriodRF_Type::deserialize(propTree, dynamic_cast<uci::type::ResourceAllocationPeriodRF_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceAllocatorAllocationType:
      return extxml_uci::type::ResourceAllocatorAllocationType::deserialize(propTree, dynamic_cast<uci::type::ResourceAllocatorAllocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceAllocatorCommandExtensionType:
      return extxml_uci::type::ResourceAllocatorCommandExtensionType::deserialize(propTree, dynamic_cast<uci::type::ResourceAllocatorCommandExtensionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceAllocatorConstituentIdentifierType:
      return extxml_uci::type::ResourceAllocatorConstituentIdentifierType::deserialize(propTree, dynamic_cast<uci::type::ResourceAllocatorConstituentIdentifierType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceAllocatorSourceCrossReferenceType:
      return extxml_uci::type::ResourceAllocatorSourceCrossReferenceType::deserialize(propTree, dynamic_cast<uci::type::ResourceAllocatorSourceCrossReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceAllocatorStatusType:
      return extxml_uci::type::ResourceAllocatorStatusType::deserialize(propTree, dynamic_cast<uci::type::ResourceAllocatorStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceAllocatorSupportedActivitiesType:
      return extxml_uci::type::ResourceAllocatorSupportedActivitiesType::deserialize(propTree, dynamic_cast<uci::type::ResourceAllocatorSupportedActivitiesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceAllocatorSystemThreadStatusType:
      return extxml_uci::type::ResourceAllocatorSystemThreadStatusType::deserialize(propTree, dynamic_cast<uci::type::ResourceAllocatorSystemThreadStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceDefinitionChoiceType:
      return extxml_uci::type::ResourceDefinitionChoiceType::deserialize(propTree, dynamic_cast<uci::type::ResourceDefinitionChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceDefinitionDigitalType:
      return extxml_uci::type::ResourceDefinitionDigitalType::deserialize(propTree, dynamic_cast<uci::type::ResourceDefinitionDigitalType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceDefinitionRF_Type:
      return extxml_uci::type::ResourceDefinitionRF_Type::deserialize(propTree, dynamic_cast<uci::type::ResourceDefinitionRF_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceRequestID_AndOptionType:
      return extxml_uci::type::ResourceRequestID_AndOptionType::deserialize(propTree, dynamic_cast<uci::type::ResourceRequestID_AndOptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceRequestOptionType:
      return extxml_uci::type::ResourceRequestOptionType::deserialize(propTree, dynamic_cast<uci::type::ResourceRequestOptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceRequestPeriodType:
      return extxml_uci::type::ResourceRequestPeriodType::deserialize(propTree, dynamic_cast<uci::type::ResourceRequestPeriodType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceRequestType:
      return extxml_uci::type::ResourceRequestType::deserialize(propTree, dynamic_cast<uci::type::ResourceRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceSelectionType:
      return extxml_uci::type::ResourceSelectionType::deserialize(propTree, dynamic_cast<uci::type::ResourceSelectionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resourceStatusSelectedType:
      return extxml_uci::type::ResourceStatusSelectedType::deserialize(propTree, dynamic_cast<uci::type::ResourceStatusSelectedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseActivityMDT:
      return extxml_uci::type::ResponseActivityMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseActivityMT:
      return extxml_uci::type::ResponseActivityMT::deserialize(propTree, dynamic_cast<uci::type::ResponseActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseActivityType:
      return extxml_uci::type::ResponseActivityType::deserialize(propTree, dynamic_cast<uci::type::ResponseActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseAlertType:
      return extxml_uci::type::ResponseAlertType::deserialize(propTree, dynamic_cast<uci::type::ResponseAlertType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseAllocationInvalidType:
      return extxml_uci::type::ResponseAllocationInvalidType::deserialize(propTree, dynamic_cast<uci::type::ResponseAllocationInvalidType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseAllocationType:
      return extxml_uci::type::ResponseAllocationType::deserialize(propTree, dynamic_cast<uci::type::ResponseAllocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseCancelCommandMDT:
      return extxml_uci::type::ResponseCancelCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseCancelCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseCancelCommandMT:
      return extxml_uci::type::ResponseCancelCommandMT::deserialize(propTree, dynamic_cast<uci::type::ResponseCancelCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseCancelCommandStatusMDT:
      return extxml_uci::type::ResponseCancelCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseCancelCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseCancelCommandStatusMT:
      return extxml_uci::type::ResponseCancelCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponseCancelCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseCapabilityCommandType:
      return extxml_uci::type::ResponseCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::ResponseCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseCapabilityMDT:
      return extxml_uci::type::ResponseCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseCapabilityMT:
      return extxml_uci::type::ResponseCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::ResponseCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseCapabilityStatusMDT:
      return extxml_uci::type::ResponseCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseCapabilityStatusMT:
      return extxml_uci::type::ResponseCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponseCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseCapabilityType:
      return extxml_uci::type::ResponseCapabilityType::deserialize(propTree, dynamic_cast<uci::type::ResponseCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseCommandMDT:
      return extxml_uci::type::ResponseCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseCommandMT:
      return extxml_uci::type::ResponseCommandMT::deserialize(propTree, dynamic_cast<uci::type::ResponseCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseCommandStatusMDT:
      return extxml_uci::type::ResponseCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseCommandStatusMT:
      return extxml_uci::type::ResponseCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponseCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseCommandType:
      return extxml_uci::type::ResponseCommandType::deserialize(propTree, dynamic_cast<uci::type::ResponseCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseExecutionApprovalStatusMDT:
      return extxml_uci::type::ResponseExecutionApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseExecutionApprovalStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseExecutionApprovalStatusMT:
      return extxml_uci::type::ResponseExecutionApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponseExecutionApprovalStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseID_Type:
      return extxml_uci::type::ResponseID_Type::deserialize(propTree, dynamic_cast<uci::type::ResponseID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseMDT:
      return extxml_uci::type::ResponseMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseMT:
      return extxml_uci::type::ResponseMT::deserialize(propTree, dynamic_cast<uci::type::ResponseMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseOptionDetailsType:
      return extxml_uci::type::ResponseOptionDetailsType::deserialize(propTree, dynamic_cast<uci::type::ResponseOptionDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseOptionTriggerType:
      return extxml_uci::type::ResponseOptionTriggerType::deserialize(propTree, dynamic_cast<uci::type::ResponseOptionTriggerType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseOptionType:
      return extxml_uci::type::ResponseOptionType::deserialize(propTree, dynamic_cast<uci::type::ResponseOptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanActivationType:
      return extxml_uci::type::ResponsePlanActivationType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanApprovalStatusMDT:
      return extxml_uci::type::ResponsePlanApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanApprovalStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanApprovalStatusMT:
      return extxml_uci::type::ResponsePlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanCommandID_ChoiceType:
      return extxml_uci::type::ResponsePlanCommandID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanCommandID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanCommandID_Type:
      return extxml_uci::type::ResponsePlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanCommandID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanCommandMDT:
      return extxml_uci::type::ResponsePlanCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanCommandMT:
      return extxml_uci::type::ResponsePlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanCommandStatusMDT:
      return extxml_uci::type::ResponsePlanCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanCommandStatusMT:
      return extxml_uci::type::ResponsePlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanConstraintType:
      return extxml_uci::type::ResponsePlanConstraintType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanExecutionStateType:
      return extxml_uci::type::ResponsePlanExecutionStateType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanExecutionStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanExecutionStatusMDT:
      return extxml_uci::type::ResponsePlanExecutionStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanExecutionStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanExecutionStatusMT:
      return extxml_uci::type::ResponsePlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanID_Type:
      return extxml_uci::type::ResponsePlanID_Type::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanInputsType:
      return extxml_uci::type::ResponsePlanInputsType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanInvalidType:
      return extxml_uci::type::ResponsePlanInvalidType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanInvalidType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanMDT:
      return extxml_uci::type::ResponsePlanMDT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanMT:
      return extxml_uci::type::ResponsePlanMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanningResultType:
      return extxml_uci::type::ResponsePlanningResultType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanningResultType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanningStatusMDT:
      return extxml_uci::type::ResponsePlanningStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanningStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanningStatusMT:
      return extxml_uci::type::ResponsePlanningStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanningStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanPartsType:
      return extxml_uci::type::ResponsePlanPartsType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanPartsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanProcessDescriptionType:
      return extxml_uci::type::ResponsePlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanProcessType:
      return extxml_uci::type::ResponsePlanProcessType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanProcessType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanStatusMDT:
      return extxml_uci::type::ResponsePlanStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanStatusMT:
      return extxml_uci::type::ResponsePlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanType:
      return extxml_uci::type::ResponsePlanType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanValidationCommandMDT:
      return extxml_uci::type::ResponsePlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanValidationCommandMT:
      return extxml_uci::type::ResponsePlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanValidationCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanValidationCommandStatusMDT:
      return extxml_uci::type::ResponsePlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanValidationCommandStatusMT:
      return extxml_uci::type::ResponsePlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanValidationID_Type:
      return extxml_uci::type::ResponsePlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanValidationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanValidationInputsType:
      return extxml_uci::type::ResponsePlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanValidationInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanValidationMDT:
      return extxml_uci::type::ResponsePlanValidationMDT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanValidationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responsePlanValidationMT:
      return extxml_uci::type::ResponsePlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanValidationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseStatusMDT:
      return extxml_uci::type::ResponseStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseStatusMT:
      return extxml_uci::type::ResponseStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponseStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::responseTemplateType:
      return extxml_uci::type::ResponseTemplateType::deserialize(propTree, dynamic_cast<uci::type::ResponseTemplateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::resultingActivityType:
      return extxml_uci::type::ResultingActivityType::deserialize(propTree, dynamic_cast<uci::type::ResultingActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_BandType:
      return extxml_uci::type::RF_BandType::deserialize(propTree, dynamic_cast<uci::type::RF_BandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ControlCommandMDT:
      return extxml_uci::type::RF_ControlCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RF_ControlCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ControlCommandMT:
      return extxml_uci::type::RF_ControlCommandMT::deserialize(propTree, dynamic_cast<uci::type::RF_ControlCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ControlCommandStatusMDT:
      return extxml_uci::type::RF_ControlCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RF_ControlCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ControlCommandStatusMT:
      return extxml_uci::type::RF_ControlCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RF_ControlCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_DistributionType:
      return extxml_uci::type::RF_DistributionType::deserialize(propTree, dynamic_cast<uci::type::RF_DistributionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_GainType:
      return extxml_uci::type::RF_GainType::deserialize(propTree, dynamic_cast<uci::type::RF_GainType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_OperationType:
      return extxml_uci::type::RF_OperationType::deserialize(propTree, dynamic_cast<uci::type::RF_OperationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ProfileBandType:
      return extxml_uci::type::RF_ProfileBandType::deserialize(propTree, dynamic_cast<uci::type::RF_ProfileBandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ProfileID_Type:
      return extxml_uci::type::RF_ProfileID_Type::deserialize(propTree, dynamic_cast<uci::type::RF_ProfileID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ProfileMDT:
      return extxml_uci::type::RF_ProfileMDT::deserialize(propTree, dynamic_cast<uci::type::RF_ProfileMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ProfileMT:
      return extxml_uci::type::RF_ProfileMT::deserialize(propTree, dynamic_cast<uci::type::RF_ProfileMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ProfileType:
      return extxml_uci::type::RF_ProfileType::deserialize(propTree, dynamic_cast<uci::type::RF_ProfileType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_RadiusToFixType:
      return extxml_uci::type::RF_RadiusToFixType::deserialize(propTree, dynamic_cast<uci::type::RF_RadiusToFixType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ReportID_Type:
      return extxml_uci::type::RF_ReportID_Type::deserialize(propTree, dynamic_cast<uci::type::RF_ReportID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ReportMDT:
      return extxml_uci::type::RF_ReportMDT::deserialize(propTree, dynamic_cast<uci::type::RF_ReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ReportMT:
      return extxml_uci::type::RF_ReportMT::deserialize(propTree, dynamic_cast<uci::type::RF_ReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ResourceAllocationID_Type:
      return extxml_uci::type::RF_ResourceAllocationID_Type::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ResourceAllocationMDT:
      return extxml_uci::type::RF_ResourceAllocationMDT::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ResourceAllocationMT:
      return extxml_uci::type::RF_ResourceAllocationMT::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ResourceAllocationRequestDigitalRemovalType:
      return extxml_uci::type::RF_ResourceAllocationRequestDigitalRemovalType::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationRequestDigitalRemovalType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ResourceAllocationRequestMDT:
      return extxml_uci::type::RF_ResourceAllocationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ResourceAllocationRequestMT:
      return extxml_uci::type::RF_ResourceAllocationRequestMT::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ResourceAllocationRequestRemovalType:
      return extxml_uci::type::RF_ResourceAllocationRequestRemovalType::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationRequestRemovalType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ResourceAllocationRequestRF_RemovalType:
      return extxml_uci::type::RF_ResourceAllocationRequestRF_RemovalType::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationRequestRF_RemovalType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ResourceAllocationRequestStatusMDT:
      return extxml_uci::type::RF_ResourceAllocationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ResourceAllocationRequestStatusMT:
      return extxml_uci::type::RF_ResourceAllocationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ResourceAllocationType:
      return extxml_uci::type::RF_ResourceAllocationType::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_TaskNormalizedMetricsType:
      return extxml_uci::type::RF_TaskNormalizedMetricsType::deserialize(propTree, dynamic_cast<uci::type::RF_TaskNormalizedMetricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_TaskPerformanceConstraintType:
      return extxml_uci::type::RF_TaskPerformanceConstraintType::deserialize(propTree, dynamic_cast<uci::type::RF_TaskPerformanceConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_TaskPerformanceType:
      return extxml_uci::type::RF_TaskPerformanceType::deserialize(propTree, dynamic_cast<uci::type::RF_TaskPerformanceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ThreadFeedbackType:
      return extxml_uci::type::RF_ThreadFeedbackType::deserialize(propTree, dynamic_cast<uci::type::RF_ThreadFeedbackType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ThreadInstanceCommandType:
      return extxml_uci::type::RF_ThreadInstanceCommandType::deserialize(propTree, dynamic_cast<uci::type::RF_ThreadInstanceCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ThreadInstanceSetupCommandMDT:
      return extxml_uci::type::RF_ThreadInstanceSetupCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RF_ThreadInstanceSetupCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ThreadInstanceSetupCommandMT:
      return extxml_uci::type::RF_ThreadInstanceSetupCommandMT::deserialize(propTree, dynamic_cast<uci::type::RF_ThreadInstanceSetupCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ThreadInstanceSetupCommandStatusMDT:
      return extxml_uci::type::RF_ThreadInstanceSetupCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RF_ThreadInstanceSetupCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_ThreadInstanceSetupCommandStatusMT:
      return extxml_uci::type::RF_ThreadInstanceSetupCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RF_ThreadInstanceSetupCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rF_TransmissionType:
      return extxml_uci::type::RF_TransmissionType::deserialize(propTree, dynamic_cast<uci::type::RF_TransmissionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rFD_ComponentIdentifierType:
      return extxml_uci::type::RFD_ComponentIdentifierType::deserialize(propTree, dynamic_cast<uci::type::RFD_ComponentIdentifierType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rFD_GainSettingType:
      return extxml_uci::type::RFD_GainSettingType::deserialize(propTree, dynamic_cast<uci::type::RFD_GainSettingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rFDC_StatusType:
      return extxml_uci::type::RFDC_StatusType::deserialize(propTree, dynamic_cast<uci::type::RFDC_StatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rGB_ColorControlType:
      return extxml_uci::type::RGB_ColorControlType::deserialize(propTree, dynamic_cast<uci::type::RGB_ColorControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rightAscensionDeclinationPointType:
      return extxml_uci::type::RightAscensionDeclinationPointType::deserialize(propTree, dynamic_cast<uci::type::RightAscensionDeclinationPointType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::riskSettingType:
      return extxml_uci::type::RiskSettingType::deserialize(propTree, dynamic_cast<uci::type::RiskSettingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityExecutionStatusType:
      return extxml_uci::type::RouteActivityExecutionStatusType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityExecutionStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityKinematicReferenceType:
      return extxml_uci::type::RouteActivityKinematicReferenceType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityKinematicReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanActivationType:
      return extxml_uci::type::RouteActivityPlanActivationType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanApprovalStatusMDT:
      return extxml_uci::type::RouteActivityPlanApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanApprovalStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanApprovalStatusMT:
      return extxml_uci::type::RouteActivityPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanCommandID_ChoiceType:
      return extxml_uci::type::RouteActivityPlanCommandID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanCommandID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanCommandID_Type:
      return extxml_uci::type::RouteActivityPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanCommandID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanCommandMDT:
      return extxml_uci::type::RouteActivityPlanCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanCommandMT:
      return extxml_uci::type::RouteActivityPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanCommandStatusMDT:
      return extxml_uci::type::RouteActivityPlanCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanCommandStatusMT:
      return extxml_uci::type::RouteActivityPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanConstraintType:
      return extxml_uci::type::RouteActivityPlanConstraintType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanExecutionStateType:
      return extxml_uci::type::RouteActivityPlanExecutionStateType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanExecutionStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanExecutionStatusMDT:
      return extxml_uci::type::RouteActivityPlanExecutionStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanExecutionStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanExecutionStatusMT:
      return extxml_uci::type::RouteActivityPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanID_Type:
      return extxml_uci::type::RouteActivityPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanInputsType:
      return extxml_uci::type::RouteActivityPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanInvalidType:
      return extxml_uci::type::RouteActivityPlanInvalidType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanInvalidType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanMDT:
      return extxml_uci::type::RouteActivityPlanMDT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanMT:
      return extxml_uci::type::RouteActivityPlanMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanStatusMDT:
      return extxml_uci::type::RouteActivityPlanStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanStatusMT:
      return extxml_uci::type::RouteActivityPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanStatusType:
      return extxml_uci::type::RouteActivityPlanStatusType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanType:
      return extxml_uci::type::RouteActivityPlanType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanValidationCommandMDT:
      return extxml_uci::type::RouteActivityPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanValidationCommandMT:
      return extxml_uci::type::RouteActivityPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanValidationCommandStatusMDT:
      return extxml_uci::type::RouteActivityPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanValidationCommandStatusMT:
      return extxml_uci::type::RouteActivityPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanValidationID_Type:
      return extxml_uci::type::RouteActivityPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanValidationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanValidationInputsType:
      return extxml_uci::type::RouteActivityPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanValidationInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanValidationMDT:
      return extxml_uci::type::RouteActivityPlanValidationMDT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanValidationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityPlanValidationMT:
      return extxml_uci::type::RouteActivityPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanValidationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeActivityType:
      return extxml_uci::type::RouteActivityType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeConflictsType:
      return extxml_uci::type::RouteConflictsType::deserialize(propTree, dynamic_cast<uci::type::RouteConflictsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeDeconflictionAssessmentDataType:
      return extxml_uci::type::RouteDeconflictionAssessmentDataType::deserialize(propTree, dynamic_cast<uci::type::RouteDeconflictionAssessmentDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeDeconflictionAssessmentType:
      return extxml_uci::type::RouteDeconflictionAssessmentType::deserialize(propTree, dynamic_cast<uci::type::RouteDeconflictionAssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeDeconflictionRequestType:
      return extxml_uci::type::RouteDeconflictionRequestType::deserialize(propTree, dynamic_cast<uci::type::RouteDeconflictionRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeDeconflictionRoutePlanType:
      return extxml_uci::type::RouteDeconflictionRoutePlanType::deserialize(propTree, dynamic_cast<uci::type::RouteDeconflictionRoutePlanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeExecutionPlanSetType:
      return extxml_uci::type::RouteExecutionPlanSetType::deserialize(propTree, dynamic_cast<uci::type::RouteExecutionPlanSetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeMetricsID_Type:
      return extxml_uci::type::RouteMetricsID_Type::deserialize(propTree, dynamic_cast<uci::type::RouteMetricsID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeMetricsMDT:
      return extxml_uci::type::RouteMetricsMDT::deserialize(propTree, dynamic_cast<uci::type::RouteMetricsMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeMetricsMT:
      return extxml_uci::type::RouteMetricsMT::deserialize(propTree, dynamic_cast<uci::type::RouteMetricsMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeMetricsRequestMDT:
      return extxml_uci::type::RouteMetricsRequestMDT::deserialize(propTree, dynamic_cast<uci::type::RouteMetricsRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeMetricsRequestMT:
      return extxml_uci::type::RouteMetricsRequestMT::deserialize(propTree, dynamic_cast<uci::type::RouteMetricsRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeMetricsRequestStatusMDT:
      return extxml_uci::type::RouteMetricsRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RouteMetricsRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeMetricsRequestStatusMT:
      return extxml_uci::type::RouteMetricsRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::RouteMetricsRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeModificationRequestMDT:
      return extxml_uci::type::RouteModificationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::RouteModificationRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeModificationRequestMT:
      return extxml_uci::type::RouteModificationRequestMT::deserialize(propTree, dynamic_cast<uci::type::RouteModificationRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeModificationRequestStatusMDT:
      return extxml_uci::type::RouteModificationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RouteModificationRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeModificationRequestStatusMT:
      return extxml_uci::type::RouteModificationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::RouteModificationRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePathModificationType:
      return extxml_uci::type::RoutePathModificationType::deserialize(propTree, dynamic_cast<uci::type::RoutePathModificationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePathType:
      return extxml_uci::type::RoutePathType::deserialize(propTree, dynamic_cast<uci::type::RoutePathType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanActivationType:
      return extxml_uci::type::RoutePlanActivationType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanAnalysisInputsType:
      return extxml_uci::type::RoutePlanAnalysisInputsType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanAnalysisInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanApprovalStatusMDT:
      return extxml_uci::type::RoutePlanApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanApprovalStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanApprovalStatusMT:
      return extxml_uci::type::RoutePlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanCommandID_ChoiceType:
      return extxml_uci::type::RoutePlanCommandID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanCommandID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanCommandID_Type:
      return extxml_uci::type::RoutePlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::RoutePlanCommandID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanCommandMDT:
      return extxml_uci::type::RoutePlanCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanCommandMT:
      return extxml_uci::type::RoutePlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanCommandStatusMDT:
      return extxml_uci::type::RoutePlanCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanCommandStatusMT:
      return extxml_uci::type::RoutePlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanConstraintType:
      return extxml_uci::type::RoutePlanConstraintType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanExecutionStateType:
      return extxml_uci::type::RoutePlanExecutionStateType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanExecutionStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanExecutionStatusMDT:
      return extxml_uci::type::RoutePlanExecutionStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanExecutionStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanExecutionStatusMT:
      return extxml_uci::type::RoutePlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanID_Type:
      return extxml_uci::type::RoutePlanID_Type::deserialize(propTree, dynamic_cast<uci::type::RoutePlanID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanInputsType:
      return extxml_uci::type::RoutePlanInputsType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanInvalidType:
      return extxml_uci::type::RoutePlanInvalidType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanInvalidType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanMDT:
      return extxml_uci::type::RoutePlanMDT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanMT:
      return extxml_uci::type::RoutePlanMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanningCandidateType:
      return extxml_uci::type::RoutePlanningCandidateType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanningCandidateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanPartsType:
      return extxml_uci::type::RoutePlanPartsType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanPartsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanProcessDescriptionType:
      return extxml_uci::type::RoutePlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanProcessType:
      return extxml_uci::type::RoutePlanProcessType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanProcessType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanReferencesType:
      return extxml_uci::type::RoutePlanReferencesType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanReferencesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanReferenceType:
      return extxml_uci::type::RoutePlanReferenceType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanSegmentReferenceType:
      return extxml_uci::type::RoutePlanSegmentReferenceType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanSegmentReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanStatusMDT:
      return extxml_uci::type::RoutePlanStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanStatusMT:
      return extxml_uci::type::RoutePlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanStatusType:
      return extxml_uci::type::RoutePlanStatusType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanType:
      return extxml_uci::type::RoutePlanType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanValidationCommandMDT:
      return extxml_uci::type::RoutePlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanValidationCommandMT:
      return extxml_uci::type::RoutePlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanValidationCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanValidationCommandStatusMDT:
      return extxml_uci::type::RoutePlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanValidationCommandStatusMT:
      return extxml_uci::type::RoutePlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanValidationID_Type:
      return extxml_uci::type::RoutePlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::RoutePlanValidationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanValidationInputsType:
      return extxml_uci::type::RoutePlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanValidationInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanValidationMDT:
      return extxml_uci::type::RoutePlanValidationMDT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanValidationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routePlanValidationMT:
      return extxml_uci::type::RoutePlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanValidationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeThreatAssessmentDataType:
      return extxml_uci::type::RouteThreatAssessmentDataType::deserialize(propTree, dynamic_cast<uci::type::RouteThreatAssessmentDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeThreatAssessmentType:
      return extxml_uci::type::RouteThreatAssessmentType::deserialize(propTree, dynamic_cast<uci::type::RouteThreatAssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeType:
      return extxml_uci::type::RouteType::deserialize(propTree, dynamic_cast<uci::type::RouteType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeValidationErrorType:
      return extxml_uci::type::RouteValidationErrorType::deserialize(propTree, dynamic_cast<uci::type::RouteValidationErrorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeValidationInvalidPathType:
      return extxml_uci::type::RouteValidationInvalidPathType::deserialize(propTree, dynamic_cast<uci::type::RouteValidationInvalidPathType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeValidationInvalidSegmentType:
      return extxml_uci::type::RouteValidationInvalidSegmentType::deserialize(propTree, dynamic_cast<uci::type::RouteValidationInvalidSegmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeVulnerabilityMetricsAssessmentDataType:
      return extxml_uci::type::RouteVulnerabilityMetricsAssessmentDataType::deserialize(propTree, dynamic_cast<uci::type::RouteVulnerabilityMetricsAssessmentDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeVulnerabilityMetricsAssessmentType:
      return extxml_uci::type::RouteVulnerabilityMetricsAssessmentType::deserialize(propTree, dynamic_cast<uci::type::RouteVulnerabilityMetricsAssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeVulnerabilityMetricsRequestType:
      return extxml_uci::type::RouteVulnerabilityMetricsRequestType::deserialize(propTree, dynamic_cast<uci::type::RouteVulnerabilityMetricsRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::routeVulnerabilityType:
      return extxml_uci::type::RouteVulnerabilityType::deserialize(propTree, dynamic_cast<uci::type::RouteVulnerabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rSO_ApproachType:
      return extxml_uci::type::RSO_ApproachType::deserialize(propTree, dynamic_cast<uci::type::RSO_ApproachType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rSTA_FileTraceabilityType:
      return extxml_uci::type::RSTA_FileTraceabilityType::deserialize(propTree, dynamic_cast<uci::type::RSTA_FileTraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rSTA_TraceabilityType:
      return extxml_uci::type::RSTA_TraceabilityType::deserialize(propTree, dynamic_cast<uci::type::RSTA_TraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rTN_AccelerationType:
      return extxml_uci::type::RTN_AccelerationType::deserialize(propTree, dynamic_cast<uci::type::RTN_AccelerationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rTN_KinematicsType:
      return extxml_uci::type::RTN_KinematicsType::deserialize(propTree, dynamic_cast<uci::type::RTN_KinematicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rTN_LocalPositionType:
      return extxml_uci::type::RTN_LocalPositionType::deserialize(propTree, dynamic_cast<uci::type::RTN_LocalPositionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rTN_PositionDeltaType:
      return extxml_uci::type::RTN_PositionDeltaType::deserialize(propTree, dynamic_cast<uci::type::RTN_PositionDeltaType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rTN_PositionSigmaType:
      return extxml_uci::type::RTN_PositionSigmaType::deserialize(propTree, dynamic_cast<uci::type::RTN_PositionSigmaType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rTN_PositionType:
      return extxml_uci::type::RTN_PositionType::deserialize(propTree, dynamic_cast<uci::type::RTN_PositionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rTN_VelocityDeltaType:
      return extxml_uci::type::RTN_VelocityDeltaType::deserialize(propTree, dynamic_cast<uci::type::RTN_VelocityDeltaType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rTN_VelocitySigmaType:
      return extxml_uci::type::RTN_VelocitySigmaType::deserialize(propTree, dynamic_cast<uci::type::RTN_VelocitySigmaType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rTN_VelocityType:
      return extxml_uci::type::RTN_VelocityType::deserialize(propTree, dynamic_cast<uci::type::RTN_VelocityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::ruleResponseType:
      return extxml_uci::type::RuleResponseType::deserialize(propTree, dynamic_cast<uci::type::RuleResponseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::runwayCoordinatesType:
      return extxml_uci::type::RunwayCoordinatesType::deserialize(propTree, dynamic_cast<uci::type::RunwayCoordinatesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::runwayID_Type:
      return extxml_uci::type::RunwayID_Type::deserialize(propTree, dynamic_cast<uci::type::RunwayID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::runwayUsageDetailsType:
      return extxml_uci::type::RunwayUsageDetailsType::deserialize(propTree, dynamic_cast<uci::type::RunwayUsageDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::rxBeamType:
      return extxml_uci::type::RxBeamType::deserialize(propTree, dynamic_cast<uci::type::RxBeamType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::safeAltitudeType:
      return extxml_uci::type::SafeAltitudeType::deserialize(propTree, dynamic_cast<uci::type::SafeAltitudeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sampleRateRangeType:
      return extxml_uci::type::SampleRateRangeType::deserialize(propTree, dynamic_cast<uci::type::SampleRateRangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_ActivityCommandType:
      return extxml_uci::type::SAR_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::SAR_ActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_ActivityMDT:
      return extxml_uci::type::SAR_ActivityMDT::deserialize(propTree, dynamic_cast<uci::type::SAR_ActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_ActivityMT:
      return extxml_uci::type::SAR_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::SAR_ActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_ActivityStatusDetailType:
      return extxml_uci::type::SAR_ActivityStatusDetailType::deserialize(propTree, dynamic_cast<uci::type::SAR_ActivityStatusDetailType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_ActivityType:
      return extxml_uci::type::SAR_ActivityType::deserialize(propTree, dynamic_cast<uci::type::SAR_ActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_AutomaticTargetDetectionParametersType:
      return extxml_uci::type::SAR_AutomaticTargetDetectionParametersType::deserialize(propTree, dynamic_cast<uci::type::SAR_AutomaticTargetDetectionParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CapabilityCommandSubCapabilityType:
      return extxml_uci::type::SAR_CapabilityCommandSubCapabilityType::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityCommandSubCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CapabilityCommandType:
      return extxml_uci::type::SAR_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CapabilityMDT:
      return extxml_uci::type::SAR_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CapabilityMT:
      return extxml_uci::type::SAR_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CapabilityOptionsType:
      return extxml_uci::type::SAR_CapabilityOptionsType::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CapabilityStatusMDT:
      return extxml_uci::type::SAR_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CapabilityStatusMT:
      return extxml_uci::type::SAR_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CapabilityStatusType:
      return extxml_uci::type::SAR_CapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CapabilityType:
      return extxml_uci::type::SAR_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CoherentChangeDetectionParametersType:
      return extxml_uci::type::SAR_CoherentChangeDetectionParametersType::deserialize(propTree, dynamic_cast<uci::type::SAR_CoherentChangeDetectionParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CollectionConstraintsQualityType:
      return extxml_uci::type::SAR_CollectionConstraintsQualityType::deserialize(propTree, dynamic_cast<uci::type::SAR_CollectionConstraintsQualityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CollectionConstraintsType:
      return extxml_uci::type::SAR_CollectionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::SAR_CollectionConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CollectionOptionsType:
      return extxml_uci::type::SAR_CollectionOptionsType::deserialize(propTree, dynamic_cast<uci::type::SAR_CollectionOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CommandMDT:
      return extxml_uci::type::SAR_CommandMDT::deserialize(propTree, dynamic_cast<uci::type::SAR_CommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CommandMT:
      return extxml_uci::type::SAR_CommandMT::deserialize(propTree, dynamic_cast<uci::type::SAR_CommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CommandResponseType:
      return extxml_uci::type::SAR_CommandResponseType::deserialize(propTree, dynamic_cast<uci::type::SAR_CommandResponseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CommandStatusMDT:
      return extxml_uci::type::SAR_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SAR_CommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CommandStatusMT:
      return extxml_uci::type::SAR_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SAR_CommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_CommandType:
      return extxml_uci::type::SAR_CommandType::deserialize(propTree, dynamic_cast<uci::type::SAR_CommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_DesiredWaveformType:
      return extxml_uci::type::SAR_DesiredWaveformType::deserialize(propTree, dynamic_cast<uci::type::SAR_DesiredWaveformType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_DynamicImageParametersType:
      return extxml_uci::type::SAR_DynamicImageParametersType::deserialize(propTree, dynamic_cast<uci::type::SAR_DynamicImageParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_PredictedActivityDetailType:
      return extxml_uci::type::SAR_PredictedActivityDetailType::deserialize(propTree, dynamic_cast<uci::type::SAR_PredictedActivityDetailType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_PredictedCollectionsType:
      return extxml_uci::type::SAR_PredictedCollectionsType::deserialize(propTree, dynamic_cast<uci::type::SAR_PredictedCollectionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_ProcessingParametersType:
      return extxml_uci::type::SAR_ProcessingParametersType::deserialize(propTree, dynamic_cast<uci::type::SAR_ProcessingParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_SettingsCommandMDT:
      return extxml_uci::type::SAR_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SAR_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_SettingsCommandMT:
      return extxml_uci::type::SAR_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::SAR_SettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_SettingsCommandStatusMDT:
      return extxml_uci::type::SAR_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SAR_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_SettingsCommandStatusMT:
      return extxml_uci::type::SAR_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SAR_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_SpecificDataType:
      return extxml_uci::type::SAR_SpecificDataType::deserialize(propTree, dynamic_cast<uci::type::SAR_SpecificDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_SubCapabilityClutterParametersType:
      return extxml_uci::type::SAR_SubCapabilityClutterParametersType::deserialize(propTree, dynamic_cast<uci::type::SAR_SubCapabilityClutterParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_SubCapabilityNparDetailsType:
      return extxml_uci::type::SAR_SubCapabilityNparDetailsType::deserialize(propTree, dynamic_cast<uci::type::SAR_SubCapabilityNparDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_SubCapabilityType:
      return extxml_uci::type::SAR_SubCapabilityType::deserialize(propTree, dynamic_cast<uci::type::SAR_SubCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_TargetType:
      return extxml_uci::type::SAR_TargetType::deserialize(propTree, dynamic_cast<uci::type::SAR_TargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_TaskAchievabilityAssessmentRequestType:
      return extxml_uci::type::SAR_TaskAchievabilityAssessmentRequestType::deserialize(propTree, dynamic_cast<uci::type::SAR_TaskAchievabilityAssessmentRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_TaskAchievabilityAssessmentType:
      return extxml_uci::type::SAR_TaskAchievabilityAssessmentType::deserialize(propTree, dynamic_cast<uci::type::SAR_TaskAchievabilityAssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_TaskBaseType:
      return extxml_uci::type::SAR_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::SAR_TaskBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_TaskTargetType:
      return extxml_uci::type::SAR_TaskTargetType::deserialize(propTree, dynamic_cast<uci::type::SAR_TaskTargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_TaskType:
      return extxml_uci::type::SAR_TaskType::deserialize(propTree, dynamic_cast<uci::type::SAR_TaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_TwoColorMultiViewParametersType:
      return extxml_uci::type::SAR_TwoColorMultiViewParametersType::deserialize(propTree, dynamic_cast<uci::type::SAR_TwoColorMultiViewParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sAR_WaveformType:
      return extxml_uci::type::SAR_WaveformType::deserialize(propTree, dynamic_cast<uci::type::SAR_WaveformType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::satelliteC2_IdentityType:
      return extxml_uci::type::SatelliteC2_IdentityType::deserialize(propTree, dynamic_cast<uci::type::SatelliteC2_IdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::satelliteCharacteristicsID_Type:
      return extxml_uci::type::SatelliteCharacteristicsID_Type::deserialize(propTree, dynamic_cast<uci::type::SatelliteCharacteristicsID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::satelliteCharacteristicsMDT:
      return extxml_uci::type::SatelliteCharacteristicsMDT::deserialize(propTree, dynamic_cast<uci::type::SatelliteCharacteristicsMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::satelliteCharacteristicsMT:
      return extxml_uci::type::SatelliteCharacteristicsMT::deserialize(propTree, dynamic_cast<uci::type::SatelliteCharacteristicsMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::satelliteCharacteristicsOverrideType:
      return extxml_uci::type::SatelliteCharacteristicsOverrideType::deserialize(propTree, dynamic_cast<uci::type::SatelliteCharacteristicsOverrideType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::satelliteCharacteristicsType:
      return extxml_uci::type::SatelliteCharacteristicsType::deserialize(propTree, dynamic_cast<uci::type::SatelliteCharacteristicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::satelliteEnduranceType:
      return extxml_uci::type::SatelliteEnduranceType::deserialize(propTree, dynamic_cast<uci::type::SatelliteEnduranceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::satelliteIdentifierType:
      return extxml_uci::type::SatelliteIdentifierType::deserialize(propTree, dynamic_cast<uci::type::SatelliteIdentifierType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::satelliteIdentityChoiceType:
      return extxml_uci::type::SatelliteIdentityChoiceType::deserialize(propTree, dynamic_cast<uci::type::SatelliteIdentityChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::satelliteIdentityType:
      return extxml_uci::type::SatelliteIdentityType::deserialize(propTree, dynamic_cast<uci::type::SatelliteIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::satelliteOperationsChangesCharacterizationType:
      return extxml_uci::type::SatelliteOperationsChangesCharacterizationType::deserialize(propTree, dynamic_cast<uci::type::SatelliteOperationsChangesCharacterizationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::satellitePhysicalConfigurationID_Type:
      return extxml_uci::type::SatellitePhysicalConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::SatellitePhysicalConfigurationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::satellitePhysicalConfigurationType:
      return extxml_uci::type::SatellitePhysicalConfigurationType::deserialize(propTree, dynamic_cast<uci::type::SatellitePhysicalConfigurationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::scanDataBaseType:
      return extxml_uci::type::ScanDataBaseType::deserialize(propTree, dynamic_cast<uci::type::ScanDataBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::scanDataType:
      return extxml_uci::type::ScanDataType::deserialize(propTree, dynamic_cast<uci::type::ScanDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::scheduleStateType:
      return extxml_uci::type::ScheduleStateType::deserialize(propTree, dynamic_cast<uci::type::ScheduleStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::scheduleType:
      return extxml_uci::type::ScheduleType::deserialize(propTree, dynamic_cast<uci::type::ScheduleType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::scoringProcessID_Type:
      return extxml_uci::type::ScoringProcessID_Type::deserialize(propTree, dynamic_cast<uci::type::ScoringProcessID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sDA_SpecialInstructionsConstraintType:
      return extxml_uci::type::SDA_SpecialInstructionsConstraintType::deserialize(propTree, dynamic_cast<uci::type::SDA_SpecialInstructionsConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sDA_SpecialInstructionsSetType:
      return extxml_uci::type::SDA_SpecialInstructionsSetType::deserialize(propTree, dynamic_cast<uci::type::SDA_SpecialInstructionsSetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::searchTrackActivityDetailsType:
      return extxml_uci::type::SearchTrackActivityDetailsType::deserialize(propTree, dynamic_cast<uci::type::SearchTrackActivityDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::secondaryControllerType:
      return extxml_uci::type::SecondaryControllerType::deserialize(propTree, dynamic_cast<uci::type::SecondaryControllerType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sECTGA_Type:
      return extxml_uci::type::SECTGA_Type::deserialize(propTree, dynamic_cast<uci::type::SECTGA_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sectorType:
      return extxml_uci::type::SectorType::deserialize(propTree, dynamic_cast<uci::type::SectorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::secureStringType:
      return extxml_uci::type::SecureStringType::deserialize(propTree, dynamic_cast<uci::type::SecureStringType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityAccessType:
      return extxml_uci::type::SecurityAccessType::deserialize(propTree, dynamic_cast<uci::type::SecurityAccessType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityAuditManagementType:
      return extxml_uci::type::SecurityAuditManagementType::deserialize(propTree, dynamic_cast<uci::type::SecurityAuditManagementType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityAuditRecordID_Type:
      return extxml_uci::type::SecurityAuditRecordID_Type::deserialize(propTree, dynamic_cast<uci::type::SecurityAuditRecordID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityAuditRecordMDT:
      return extxml_uci::type::SecurityAuditRecordMDT::deserialize(propTree, dynamic_cast<uci::type::SecurityAuditRecordMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityAuditRecordMT:
      return extxml_uci::type::SecurityAuditRecordMT::deserialize(propTree, dynamic_cast<uci::type::SecurityAuditRecordMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityAuthenticationType:
      return extxml_uci::type::SecurityAuthenticationType::deserialize(propTree, dynamic_cast<uci::type::SecurityAuthenticationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityEventType:
      return extxml_uci::type::SecurityEventType::deserialize(propTree, dynamic_cast<uci::type::SecurityEventType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityFileManagementType:
      return extxml_uci::type::SecurityFileManagementType::deserialize(propTree, dynamic_cast<uci::type::SecurityFileManagementType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityIntegrityType:
      return extxml_uci::type::SecurityIntegrityType::deserialize(propTree, dynamic_cast<uci::type::SecurityIntegrityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityIntrusionDetectionType:
      return extxml_uci::type::SecurityIntrusionDetectionType::deserialize(propTree, dynamic_cast<uci::type::SecurityIntrusionDetectionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityKeyManagementType:
      return extxml_uci::type::SecurityKeyManagementType::deserialize(propTree, dynamic_cast<uci::type::SecurityKeyManagementType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securityPolicyManagementType:
      return extxml_uci::type::SecurityPolicyManagementType::deserialize(propTree, dynamic_cast<uci::type::SecurityPolicyManagementType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securitySanitizationType:
      return extxml_uci::type::SecuritySanitizationType::deserialize(propTree, dynamic_cast<uci::type::SecuritySanitizationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::securitySystemType:
      return extxml_uci::type::SecuritySystemType::deserialize(propTree, dynamic_cast<uci::type::SecuritySystemType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::segmentCaptureType:
      return extxml_uci::type::SegmentCaptureType::deserialize(propTree, dynamic_cast<uci::type::SegmentCaptureType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::segmentCompletedType:
      return extxml_uci::type::SegmentCompletedType::deserialize(propTree, dynamic_cast<uci::type::SegmentCompletedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::segmentConflictsType:
      return extxml_uci::type::SegmentConflictsType::deserialize(propTree, dynamic_cast<uci::type::SegmentConflictsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::segmentEstimateType:
      return extxml_uci::type::SegmentEstimateType::deserialize(propTree, dynamic_cast<uci::type::SegmentEstimateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::segmentID_Type:
      return extxml_uci::type::SegmentID_Type::deserialize(propTree, dynamic_cast<uci::type::SegmentID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::segmentKinematicsType:
      return extxml_uci::type::SegmentKinematicsType::deserialize(propTree, dynamic_cast<uci::type::SegmentKinematicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::segmentMetricsType:
      return extxml_uci::type::SegmentMetricsType::deserialize(propTree, dynamic_cast<uci::type::SegmentMetricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::segmentRangeType:
      return extxml_uci::type::SegmentRangeType::deserialize(propTree, dynamic_cast<uci::type::SegmentRangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::segmentRelativeVelocity2D_Type:
      return extxml_uci::type::SegmentRelativeVelocity2D_Type::deserialize(propTree, dynamic_cast<uci::type::SegmentRelativeVelocity2D_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::selectAntennaType:
      return extxml_uci::type::SelectAntennaType::deserialize(propTree, dynamic_cast<uci::type::SelectAntennaType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::selectDigitalComponentResourceType:
      return extxml_uci::type::SelectDigitalComponentResourceType::deserialize(propTree, dynamic_cast<uci::type::SelectDigitalComponentResourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::selectionQuerySpecificDataType:
      return extxml_uci::type::SelectionQuerySpecificDataType::deserialize(propTree, dynamic_cast<uci::type::SelectionQuerySpecificDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::selectPayloadResourceType:
      return extxml_uci::type::SelectPayloadResourceType::deserialize(propTree, dynamic_cast<uci::type::SelectPayloadResourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::selectRF_ComponentResourceType:
      return extxml_uci::type::SelectRF_ComponentResourceType::deserialize(propTree, dynamic_cast<uci::type::SelectRF_ComponentResourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::selfDefenseStatusMDT:
      return extxml_uci::type::SelfDefenseStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SelfDefenseStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::selfDefenseStatusMT:
      return extxml_uci::type::SelfDefenseStatusMT::deserialize(propTree, dynamic_cast<uci::type::SelfDefenseStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorCharacterizationChoiceType:
      return extxml_uci::type::SensorCharacterizationChoiceType::deserialize(propTree, dynamic_cast<uci::type::SensorCharacterizationChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::sensorConstraintsBaseType:
      return extxml_uci::type::SensorConstraintsBaseType::deserialize(propTree, dynamic_cast<uci::type::SensorConstraintsBaseType&>(accessor), nodeName, nsPrefix, true);
    default:
      return false;
  }
}

} // namespace base

} // namespace extxml_uci

