/** @file ExternalizerRead3.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:20 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/base/ExternalizerRead3.h"

#include <string>

#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/DLZ_DataType.h"
#include "extxml_uci/type/DLZ_ID_Type.h"
#include "extxml_uci/type/DLZ_MDT.h"
#include "extxml_uci/type/DLZ_MT.h"
#include "extxml_uci/type/DLZ_RequestMDT.h"
#include "extxml_uci/type/DLZ_RequestMT.h"
#include "extxml_uci/type/DLZ_RequestStatusMDT.h"
#include "extxml_uci/type/DLZ_RequestStatusMT.h"
#include "extxml_uci/type/DMPI_AchievabilityAssessmentRequestType.h"
#include "extxml_uci/type/DMPI_AchievabilityAssessmentType.h"
#include "extxml_uci/type/DMPI_AllocationType.h"
#include "extxml_uci/type/DMPI_BlastPairingType.h"
#include "extxml_uci/type/DMPI_CancelCommandMDT.h"
#include "extxml_uci/type/DMPI_CancelCommandMT.h"
#include "extxml_uci/type/DMPI_CancelCommandStatusMDT.h"
#include "extxml_uci/type/DMPI_CancelCommandStatusMT.h"
#include "extxml_uci/type/DMPI_DamageEstimateType.h"
#include "extxml_uci/type/DMPI_DesignationID_Type.h"
#include "extxml_uci/type/DMPI_DesignationMDT.h"
#include "extxml_uci/type/DMPI_DesignationMT.h"
#include "extxml_uci/type/DMPI_DesignationParametersType.h"
#include "extxml_uci/type/DMPI_DesignationRequestMDT.h"
#include "extxml_uci/type/DMPI_DesignationRequestMT.h"
#include "extxml_uci/type/DMPI_DesignationRequestStatusMDT.h"
#include "extxml_uci/type/DMPI_DesignationRequestStatusMT.h"
#include "extxml_uci/type/DMPI_ID_Type.h"
#include "extxml_uci/type/DMPI_LocationType.h"
#include "extxml_uci/type/DMPI_MDT.h"
#include "extxml_uci/type/DMPI_MT.h"
#include "extxml_uci/type/DMPI_PatternChoiceType.h"
#include "extxml_uci/type/DMPI_PatternID_Type.h"
#include "extxml_uci/type/DMPI_PatternMDT.h"
#include "extxml_uci/type/DMPI_PatternMT.h"
#include "extxml_uci/type/DMPI_PatternType.h"
#include "extxml_uci/type/DMPI_RadialPatternType.h"
#include "extxml_uci/type/DMPI_StatusMDT.h"
#include "extxml_uci/type/DMPI_StatusMT.h"
#include "extxml_uci/type/DMPI_StoreStatusType.h"
#include "extxml_uci/type/DMPI_TargetType.h"
#include "extxml_uci/type/DMPI_TraceabilityType.h"
#include "extxml_uci/type/DMPI_ViolationChoiceType.h"
#include "extxml_uci/type/DMPI_ViolationType.h"
#include "extxml_uci/type/DMPI_XbyY_PatternType.h"
#include "extxml_uci/type/DVR_ProcessingParametersType.h"
#include "extxml_uci/type/DataPlanActivationStatusMT.h"
#include "extxml_uci/type/DataPlanConfigurationActivationType.h"
#include "extxml_uci/type/DataPlanConfigurationStateType.h"
#include "extxml_uci/type/DataPlanDetailsType.h"
#include "extxml_uci/type/DataPlanEffectivityActivationStatusType.h"
#include "extxml_uci/type/DataPlanEffectivityActivationType.h"
#include "extxml_uci/type/DataPlanEffectivityStateType.h"
#include "extxml_uci/type/DataPlanID_Type.h"
#include "extxml_uci/type/DataPlanMDT.h"
#include "extxml_uci/type/DataPlanMT.h"
#include "extxml_uci/type/DataPlanOverrideActivationType.h"
#include "extxml_uci/type/DataPlanOverrideRequestMDT.h"
#include "extxml_uci/type/DataPlanOverrideRequestMT.h"
#include "extxml_uci/type/DataPlanOverrideRequestStatusMDT.h"
#include "extxml_uci/type/DataPlanOverrideRequestStatusMT.h"
#include "extxml_uci/type/DataPlanOverrideRequestType.h"
#include "extxml_uci/type/DataPlanTriggerType.h"
#include "extxml_uci/type/DataPortType.h"
#include "extxml_uci/type/DataProductClassificationLevelType.h"
#include "extxml_uci/type/DataRateDataType.h"
#include "extxml_uci/type/DataRecordBaseType.h"
#include "extxml_uci/type/DataRecordDeleteDetailsType.h"
#include "extxml_uci/type/DataRecordInstanceID_Type.h"
#include "extxml_uci/type/DataRecordListBaseType.h"
#include "extxml_uci/type/DataRecordListEntryManagementRequestStatusType.h"
#include "extxml_uci/type/DataRecordListID_Type.h"
#include "extxml_uci/type/DataRecordListManagementRequestMDT.h"
#include "extxml_uci/type/DataRecordListManagementRequestMT.h"
#include "extxml_uci/type/DataRecordListManagementRequestStatusMDT.h"
#include "extxml_uci/type/DataRecordListManagementRequestStatusMT.h"
#include "extxml_uci/type/DataRecordManagementDetailsType.h"
#include "extxml_uci/type/DataRecordManagementRequestMDT.h"
#include "extxml_uci/type/DataRecordManagementRequestMT.h"
#include "extxml_uci/type/DataRecordManagementRequestStatusMDT.h"
#include "extxml_uci/type/DataRecordManagementRequestStatusMT.h"
#include "extxml_uci/type/DataStorageUtilizationRequestMDT.h"
#include "extxml_uci/type/DataStorageUtilizationRequestMT.h"
#include "extxml_uci/type/DataStorageUtilizationRequestStatusMDT.h"
#include "extxml_uci/type/DataStorageUtilizationRequestStatusMT.h"
#include "extxml_uci/type/DataUpdateOriginatorType.h"
#include "extxml_uci/type/DataUpdateRequestMDT.h"
#include "extxml_uci/type/DataUpdateRequestMT.h"
#include "extxml_uci/type/DataUpdateRequestStatusMDT.h"
#include "extxml_uci/type/DataUpdateRequestStatusMT.h"
#include "extxml_uci/type/DataUpdateRequestType.h"
#include "extxml_uci/type/DataUpdateSourceType.h"
#include "extxml_uci/type/DateTimeRangeBeginType.h"
#include "extxml_uci/type/DateTimeRangeDeconType.h"
#include "extxml_uci/type/DateTimeRangeType.h"
#include "extxml_uci/type/DateTimeSigmaType.h"
#include "extxml_uci/type/DebrisCloudBoundaryType.h"
#include "extxml_uci/type/DeconflictionWindowType.h"
#include "extxml_uci/type/DefaultResponseType.h"
#include "extxml_uci/type/DefensiveJammerSystemInfoType.h"
#include "extxml_uci/type/DemodulationParameterType.h"
#include "extxml_uci/type/DependentActivityType.h"
#include "extxml_uci/type/DependentRequirementConditionType.h"
#include "extxml_uci/type/DependentTaskType.h"
#include "extxml_uci/type/DeployableSystemIdentityType.h"
#include "extxml_uci/type/DeploymentDetectionType.h"
#include "extxml_uci/type/DesignationDataStatusType.h"
#include "extxml_uci/type/DesignationDataType.h"
#include "extxml_uci/type/DesignationFilterType.h"
#include "extxml_uci/type/DesignationID_Type.h"
#include "extxml_uci/type/DesignationMDT.h"
#include "extxml_uci/type/DesignationMT.h"
#include "extxml_uci/type/DesignationRequestMDT.h"
#include "extxml_uci/type/DesignationRequestMT.h"
#include "extxml_uci/type/DesignationRequestStatusMDT.h"
#include "extxml_uci/type/DesignationRequestStatusMT.h"
#include "extxml_uci/type/DetailedKinematicsErrorType.h"
#include "extxml_uci/type/DetailedKinematicsType.h"
#include "extxml_uci/type/DetailedReferenceKinematicsType.h"
#include "extxml_uci/type/DetectionEnvelopeParametersType.h"
#include "extxml_uci/type/DetectionEnvelopeType.h"
#include "extxml_uci/type/DetectionRangeRingType.h"
#include "extxml_uci/type/DigitalFunctionType.h"
#include "extxml_uci/type/DigitalPayloadProcessingType.h"
#include "extxml_uci/type/DigitalPayloadProcessorPortAndDataType.h"
#include "extxml_uci/type/DirectControlInterfacesType.h"
#include "extxml_uci/type/DiscreteDataLinkIdentifierType.h"
#include "extxml_uci/type/DiscreteStatusMDT.h"
#include "extxml_uci/type/DiscreteStatusMT.h"
#include "extxml_uci/type/DisposalOrbitType.h"
#include "extxml_uci/type/DisseminationByType.h"
#include "extxml_uci/type/DisseminationConstrainedSubplanType.h"
#include "extxml_uci/type/DisseminationProductType.h"
#include "extxml_uci/type/DisseminationReportType.h"
#include "extxml_uci/type/DisseminationRequirementsType.h"
#include "extxml_uci/type/DisseminationSubplanType.h"
#include "extxml_uci/type/DistanceConstraintsType.h"
#include "extxml_uci/type/DistanceResolutionSpecificationType.h"
#include "extxml_uci/type/DomeType.h"
#include "extxml_uci/type/DoorCommandChoiceType.h"
#include "extxml_uci/type/DoorCommandMDT.h"
#include "extxml_uci/type/DoorCommandMT.h"
#include "extxml_uci/type/DoorCommandStatusMDT.h"
#include "extxml_uci/type/DoorCommandStatusMT.h"
#include "extxml_uci/type/DoorCommandType.h"
#include "extxml_uci/type/DoorStatusMDT.h"
#include "extxml_uci/type/DoorStatusMT.h"
#include "extxml_uci/type/DoorStatusType.h"
#include "extxml_uci/type/DoubleMinMaxType.h"
#include "extxml_uci/type/DownloadConstrainedSubPlanType.h"
#include "extxml_uci/type/DragCoefficientChoiceType.h"
#include "extxml_uci/type/DropRestrictionType.h"
#include "extxml_uci/type/DuplicateRequirementType.h"
#include "extxml_uci/type/DurationRangeType.h"
#include "extxml_uci/type/DwellID_Type.h"
#include "extxml_uci/type/EA_ActivityChangeBeamCommandType.h"
#include "extxml_uci/type/EA_ActivityCommandType.h"
#include "extxml_uci/type/EA_ActivityMDT.h"
#include "extxml_uci/type/EA_ActivityMT.h"
#include "extxml_uci/type/EA_ActivityType.h"
#include "extxml_uci/type/EA_BeamGroupType.h"
#include "extxml_uci/type/EA_CapabilityCommandType.h"
#include "extxml_uci/type/EA_CapabilityMDT.h"
#include "extxml_uci/type/EA_CapabilityMT.h"
#include "extxml_uci/type/EA_CapabilityOptionsType.h"
#include "extxml_uci/type/EA_CapabilityStatusMDT.h"
#include "extxml_uci/type/EA_CapabilityStatusMT.h"
#include "extxml_uci/type/EA_CapabilityType.h"
#include "extxml_uci/type/EA_ChangeLocationAndPowerType.h"
#include "extxml_uci/type/EA_CommandMDT.h"
#include "extxml_uci/type/EA_CommandMT.h"
#include "extxml_uci/type/EA_CommandResponseType.h"
#include "extxml_uci/type/EA_CommandStatusMDT.h"
#include "extxml_uci/type/EA_CommandStatusMT.h"
#include "extxml_uci/type/EA_CommandType.h"
#include "extxml_uci/type/EA_ComponentType.h"
#include "extxml_uci/type/EA_ConsentRequestMDT.h"
#include "extxml_uci/type/EA_ConsentRequestMT.h"
#include "extxml_uci/type/EA_ConsentRequestStatusMDT.h"
#include "extxml_uci/type/EA_ConsentRequestStatusMT.h"
#include "extxml_uci/type/EA_ConsentRequestType.h"
#include "extxml_uci/type/EA_DetailsAssignedType.h"
#include "extxml_uci/type/EA_DetailsType.h"
#include "extxml_uci/type/EA_DetailsUnassignedType.h"
#include "extxml_uci/type/EA_EmissionType.h"
#include "extxml_uci/type/EA_EmitterDataType.h"
#include "extxml_uci/type/EA_EntityType.h"
#include "extxml_uci/type/EA_PowerType.h"
#include "extxml_uci/type/EA_ProposedType.h"
#include "extxml_uci/type/EA_ResponseType.h"
#include "extxml_uci/type/EA_SettingsCommandMDT.h"
#include "extxml_uci/type/EA_SettingsCommandMT.h"
#include "extxml_uci/type/EA_SettingsCommandStatusMDT.h"
#include "extxml_uci/type/EA_SettingsCommandStatusMT.h"
#include "extxml_uci/type/EA_TargetPointingType.h"
#include "extxml_uci/type/EA_TargetType.h"
#include "extxml_uci/type/EA_TaskEscortType.h"
#include "extxml_uci/type/EA_TaskProtectedAssetsType.h"
#include "extxml_uci/type/EA_TaskRouteRequirementsType.h"
#include "extxml_uci/type/EA_TaskSuppressionConstraintsType.h"
#include "extxml_uci/type/EA_TaskThreatsType.h"
#include "extxml_uci/type/EA_TaskType.h"
#include "extxml_uci/type/EA_TechniqueGroupIdentifierType.h"
#include "extxml_uci/type/EA_TechniqueIdentifierType.h"
#include "extxml_uci/type/EA_TechniqueType.h"
#include "extxml_uci/type/ECEF_AccelerationAccelerationCovarianceType.h"
#include "extxml_uci/type/ECEF_AccelerationType.h"
#include "extxml_uci/type/ECEF_KinematicsType.h"
#include "extxml_uci/type/ECEF_PositionAccelerationCovarianceType.h"
#include "extxml_uci/type/ECEF_PositionOrientationCovarianceType.h"
#include "extxml_uci/type/ECEF_PositionPositionCovarianceType.h"
#include "extxml_uci/type/ECEF_PositionType.h"
#include "extxml_uci/type/ECEF_PositionVelocityCovarianceType.h"
#include "extxml_uci/type/ECEF_SensorKinematicsType.h"
#include "extxml_uci/type/ECEF_StateCovarianceType.h"
#include "extxml_uci/type/ECEF_UnitVectorType.h"
#include "extxml_uci/type/ECEF_VelocityAccelerationCovarianceType.h"
#include "extxml_uci/type/ECEF_VelocityOrientationCovarianceType.h"
#include "extxml_uci/type/ECEF_VelocityType.h"
#include "extxml_uci/type/ECEF_VelocityVelocityCovarianceType.h"
#include "extxml_uci/type/EEI_ID_Type.h"
#include "extxml_uci/type/EEI_MDT.h"
#include "extxml_uci/type/EEI_MT.h"
#include "extxml_uci/type/EOB_CodesType.h"
#include "extxml_uci/type/EOB_CorrelatedToType.h"
#include "extxml_uci/type/EOB_CorrelationRecordID_Type.h"
#include "extxml_uci/type/EOB_CorrelationRecordMDT.h"
#include "extxml_uci/type/EOB_CorrelationRecordMT.h"
#include "extxml_uci/type/EOB_CorrelationRecordType.h"
#include "extxml_uci/type/EOB_EmitterID_Type.h"
#include "extxml_uci/type/EOB_EmitterIdentityType.h"
#include "extxml_uci/type/EOB_EmitterModeID_Type.h"
#include "extxml_uci/type/EOB_EmitterModeType.h"
#include "extxml_uci/type/EOB_EmitterType.h"
#include "extxml_uci/type/EOB_EquipmentIdentityType.h"
#include "extxml_uci/type/EOB_EquipmentRecordType.h"
#include "extxml_uci/type/EOB_EquipmentType.h"
#include "extxml_uci/type/EOB_FixedPositionType.h"
#include "extxml_uci/type/EOB_IdentityBaseType.h"
#include "extxml_uci/type/EOB_IdentityConfidenceType.h"
#include "extxml_uci/type/EOB_IdentityType.h"
#include "extxml_uci/type/EOB_RecordID_Type.h"
#include "extxml_uci/type/EOB_RecordMarkedType.h"
#include "extxml_uci/type/EOB_SignalType.h"
#include "extxml_uci/type/EOB_SiteIdentityType.h"
#include "extxml_uci/type/EOB_SitePIN_Type.h"
#include "extxml_uci/type/ESM_AcquisitionTargetType.h"
#include "extxml_uci/type/ESM_ActivityCommandType.h"
#include "extxml_uci/type/ESM_ActivityMDT.h"
#include "extxml_uci/type/ESM_ActivityMT.h"
#include "extxml_uci/type/ESM_ActivityType.h"
#include "extxml_uci/type/ESM_BinGroupActivationType.h"
#include "extxml_uci/type/ESM_BinPrecedenceType.h"
#include "extxml_uci/type/ESM_BinProfileType.h"
#include "extxml_uci/type/ESM_BinType.h"
#include "extxml_uci/type/ESM_CapabilityCommandType.h"
#include "extxml_uci/type/ESM_CapabilityMDT.h"
#include "extxml_uci/type/ESM_CapabilityMT.h"
#include "extxml_uci/type/ESM_CapabilityOptionsType.h"
#include "extxml_uci/type/ESM_CapabilityStatusMDT.h"
#include "extxml_uci/type/ESM_CapabilityStatusMT.h"
#include "extxml_uci/type/ESM_CapabilityType.h"
#include "extxml_uci/type/ESM_ChangeDwellType.h"
#include "extxml_uci/type/ESM_ChangeGeolocationType.h"
#include "extxml_uci/type/ESM_CommandMDT.h"
#include "extxml_uci/type/ESM_CommandMT.h"
#include "extxml_uci/type/ESM_CommandResponseType.h"
#include "extxml_uci/type/ESM_CommandStatusMDT.h"
#include "extxml_uci/type/ESM_CommandStatusMT.h"
#include "extxml_uci/type/ESM_CommandType.h"
#include "extxml_uci/type/ESM_ConsentRequestMDT.h"
#include "extxml_uci/type/ESM_ConsentRequestMT.h"
#include "extxml_uci/type/ESM_ConsentRequestStatusMDT.h"
#include "extxml_uci/type/ESM_ConsentRequestStatusMT.h"
#include "extxml_uci/type/ESM_ConsentRequestType.h"
#include "extxml_uci/type/ESM_DwellCoverageType.h"
#include "extxml_uci/type/ESM_LocationType.h"
#include "extxml_uci/type/ESM_PerformanceProfileType.h"
#include "extxml_uci/type/ESM_ProfileEditType.h"
#include "extxml_uci/type/ESM_ProfileEntryType.h"
#include "extxml_uci/type/ESM_ReceiveDwellType.h"
#include "extxml_uci/type/ESM_SettingsCommandMDT.h"
#include "extxml_uci/type/EarthOrientationParametersDataChoiceType.h"
#include "extxml_uci/type/EarthOrientationParametersID_Type.h"
#include "extxml_uci/type/EarthOrientationParametersMDT.h"
#include "extxml_uci/type/EarthOrientationParametersMT.h"
#include "extxml_uci/type/EffectActivityMDT.h"
#include "extxml_uci/type/EffectActivityMT.h"
#include "extxml_uci/type/EffectActivityType.h"
#include "extxml_uci/type/EffectAllocationInvalidType.h"
#include "extxml_uci/type/EffectAllocationType.h"
#include "extxml_uci/type/EffectCancelCommandMDT.h"
#include "extxml_uci/type/EffectCancelCommandMT.h"
#include "extxml_uci/type/EffectCancelCommandStatusMDT.h"
#include "extxml_uci/type/EffectCancelCommandStatusMT.h"
#include "extxml_uci/type/EffectCapabilityCommandType.h"
#include "extxml_uci/type/EffectCapabilityMDT.h"
#include "extxml_uci/type/EffectCapabilityMT.h"
#include "extxml_uci/type/EffectCapabilityOptionsType.h"
#include "extxml_uci/type/EffectCapabilityStatusMDT.h"
#include "extxml_uci/type/EffectCapabilityStatusMT.h"
#include "extxml_uci/type/EffectCapabilityType.h"
#include "extxml_uci/type/EffectCommandMDT.h"
#include "extxml_uci/type/EffectCommandMT.h"
#include "extxml_uci/type/EffectCommandStatusMDT.h"
#include "extxml_uci/type/EffectCommandStatusMT.h"
#include "extxml_uci/type/EffectCommandType.h"
#include "extxml_uci/type/EffectExecutionApprovalStatusMDT.h"
#include "extxml_uci/type/EffectExecutionApprovalStatusMT.h"
#include "extxml_uci/type/EffectID_Type.h"
#include "extxml_uci/type/EffectMDT.h"
#include "extxml_uci/type/EffectMT.h"
#include "extxml_uci/type/EffectPlanActivationType.h"
#include "extxml_uci/type/EffectPlanApprovalStatusMDT.h"
#include "extxml_uci/type/EffectPlanApprovalStatusMT.h"
#include "extxml_uci/type/EffectPlanCommandID_ChoiceType.h"
#include "extxml_uci/type/EffectPlanCommandID_Type.h"
#include "extxml_uci/type/EffectPlanCommandMDT.h"
#include "extxml_uci/type/EffectPlanCommandMT.h"
#include "extxml_uci/type/EffectPlanCommandStatusMDT.h"
#include "extxml_uci/type/EffectPlanCommandStatusMT.h"
#include "extxml_uci/type/EffectPlanConstraintType.h"
#include "extxml_uci/type/EffectPlanExecutionStateType.h"
#include "extxml_uci/type/EffectPlanExecutionStatusMDT.h"
#include "extxml_uci/type/EffectPlanExecutionStatusMT.h"
#include "extxml_uci/type/EffectPlanID_Type.h"
#include "extxml_uci/type/EffectPlanInputsType.h"
#include "extxml_uci/type/EffectPlanInvalidType.h"
#include "extxml_uci/type/EffectPlanMDT.h"
#include "extxml_uci/type/EffectPlanMT.h"
#include "extxml_uci/type/EffectPlanPartsType.h"
#include "extxml_uci/type/EffectPlanProcessDescriptionType.h"
#include "extxml_uci/type/EffectPlanProcessType.h"
#include "extxml_uci/type/EffectPlanStatusMDT.h"
#include "extxml_uci/type/EffectPlanStatusMT.h"
#include "extxml_uci/type/EffectPlanType.h"
#include "extxml_uci/type/EffectPlanValidationCommandMDT.h"
#include "extxml_uci/type/EffectPlanValidationCommandMT.h"
#include "extxml_uci/type/EffectPlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/EffectPlanValidationCommandStatusMT.h"
#include "extxml_uci/type/EffectPlanValidationID_Type.h"
#include "extxml_uci/type/EffectPlanValidationInputsType.h"
#include "extxml_uci/type/EffectPlanValidationMDT.h"
#include "extxml_uci/type/EffectPlanValidationMT.h"
#include "extxml_uci/type/EffectPlanningResultType.h"
#include "extxml_uci/type/EffectPlanningStatusMDT.h"
#include "extxml_uci/type/EffectPlanningStatusMT.h"
#include "extxml_uci/type/EffectStatusMDT.h"
#include "extxml_uci/type/EffectStatusMT.h"
#include "extxml_uci/type/ElectronicProtectionOptionsDefaultType.h"
#include "extxml_uci/type/ElectronicProtectionOptionsEnableType.h"
#include "extxml_uci/type/ElectronicProtectionOptionsEnabledType.h"
#include "extxml_uci/type/ElectronicProtectionOptionsSupportedType.h"
#include "extxml_uci/type/ElementDetailsType.h"
#include "extxml_uci/type/ElementSetCloudType.h"
#include "extxml_uci/type/ElevationRequestMDT.h"
#include "extxml_uci/type/ElevationRequestMT.h"
#include "extxml_uci/type/ElevationRequestPointsType.h"
#include "extxml_uci/type/ElevationRequestStatusMDT.h"
#include "extxml_uci/type/ElevationRequestStatusMT.h"
#include "extxml_uci/type/ElevationVisibilityPointInfoFromSetType.h"
#include "extxml_uci/type/ElevationVisibilityPointInfoSetType.h"
#include "extxml_uci/type/ElevationVisibilityPointInfoType.h"
#include "extxml_uci/type/ElevationVisibilityRequestMDT.h"
#include "extxml_uci/type/ElevationVisibilityRequestMT.h"
#include "extxml_uci/type/ElevationVisibilityRequestPointsType.h"
#include "extxml_uci/type/ElevationVisibilityRequestStatusMDT.h"
#include "extxml_uci/type/ElevationVisibilityRequestStatusMT.h"
#include "extxml_uci/type/EllipseType.h"
#include "extxml_uci/type/EllipsoidType.h"
#include "extxml_uci/type/EmconConstraintType.h"
#include "extxml_uci/type/EmconERP_Type.h"
#include "extxml_uci/type/EmconOverrideType.h"
#include "extxml_uci/type/EmconSettingType.h"
#include "extxml_uci/type/EmergencyReferenceOpPointCategoriesType.h"
#include "extxml_uci/type/EmergencyReferenceOpPointType.h"
#include "extxml_uci/type/EmergencyReferencePointType.h"
#include "extxml_uci/type/EmitterEntryType.h"
#include "extxml_uci/type/EmitterFixedPositionType.h"
#include "extxml_uci/type/EmitterFunctionType.h"
#include "extxml_uci/type/EmitterIdentityCategoryType.h"
#include "extxml_uci/type/EmitterIdentityConfidenceType.h"
#include "extxml_uci/type/EmitterIdentityType.h"
#include "extxml_uci/type/EmitterMultipleType.h"
#include "extxml_uci/type/EmitterSourceID_ChoiceType.h"
#include "extxml_uci/type/EmitterTargetLocationDataType.h"
#include "extxml_uci/type/EmitterUncertaintyChoiceType.h"
#include "extxml_uci/type/EmitterUncertaintyType.h"
#include "extxml_uci/type/EmitterWaveformDataType.h"
#include "extxml_uci/type/EndPointType.h"
#include "extxml_uci/type/EndpointReferenceType.h"
#include "extxml_uci/type/EnduranceBaseType.h"
#include "extxml_uci/type/EnduranceFootprintType.h"
#include "extxml_uci/type/EnduranceMultiStandardType.h"
#include "extxml_uci/type/EnduranceRemainingType.h"
#include "extxml_uci/type/EnduranceType.h"
#include "extxml_uci/type/EntityAssignmentMemberType.h"
#include "extxml_uci/type/EntityAssignmentType.h"
#include "extxml_uci/type/EntityCapabilitySourceType.h"
#include "extxml_uci/type/EntityCharacteristicType.h"
#include "extxml_uci/type/EntityComparativeType.h"
#include "extxml_uci/type/EntityConfirmationMDT.h"
#include "extxml_uci/type/EntityConfirmationMT.h"
#include "extxml_uci/type/EntityConfirmationRequestMDT.h"
#include "extxml_uci/type/EntityConfirmationRequestMT.h"
#include "extxml_uci/type/EntityConfirmationRequestStatusMDT.h"
#include "extxml_uci/type/EntityConfirmationRequestStatusMT.h"
#include "extxml_uci/type/EntityContributorID_ChoiceType.h"
#include "extxml_uci/type/EntityDataType.h"
#include "extxml_uci/type/EntityDimensionEstimateType.h"
#include "extxml_uci/type/EntityDimensionEstimateUncertaintyType.h"
#include "extxml_uci/type/EntityEphemerisBasisChoiceType.h"
#include "extxml_uci/type/EntityEphemerisRequestParametersType.h"
#include "extxml_uci/type/EntityExternalType.h"
#include "extxml_uci/type/EntityFilterType.h"
#include "extxml_uci/type/EntityFusionSourceType.h"
#include "extxml_uci/type/EntityID_Type.h"
#include "extxml_uci/type/EntityIdentityChoiceType.h"
#include "extxml_uci/type/EntityIdentityType.h"
#include "extxml_uci/type/EntityLostMDT.h"
#include "extxml_uci/type/EntityLostMT.h"
#include "extxml_uci/type/EntityLostSourceType.h"
#include "extxml_uci/type/EntityMDT.h"
#include "extxml_uci/type/EntityMT.h"
#include "extxml_uci/type/EntityManagementClearIdentityType.h"
#include "extxml_uci/type/EntityManagementDownType.h"
#include "extxml_uci/type/EntityManagementDropRestrictType.h"
#include "extxml_uci/type/EntityManagementDropType.h"
#include "extxml_uci/type/EntityManagementKinematicsType.h"
#include "extxml_uci/type/EntityManagementMergeType.h"
#include "extxml_uci/type/EntityManagementProposeCorrelationType.h"
#include "extxml_uci/type/EntityManagementRequestEntityStatusType.h"
#include "extxml_uci/type/EntityManagementRequestMDT.h"
#include "extxml_uci/type/EntityManagementRequestMT.h"
#include "extxml_uci/type/EntityManagementRequestStatusMDT.h"
#include "extxml_uci/type/EntityManagementRequestStatusMT.h"
#include "extxml_uci/type/EntityManagementRequestType.h"
#include "extxml_uci/type/EntityManagementSetActivityByType.h"
#include "extxml_uci/type/EntityManagementSetCapabilityType.h"
#include "extxml_uci/type/EntityManagementSetEnduranceType.h"
#include "extxml_uci/type/EntityManagementSetFusionEligibilityType.h"
#include "extxml_uci/type/EntityManagementSetIdentityType.h"
#include "extxml_uci/type/EntityManagementSetLink16MetadataType.h"
#include "extxml_uci/type/EntityManagementSetModeType.h"
#include "extxml_uci/type/EntityManagementSetPlatformStatusType.h"
#include "extxml_uci/type/EntityManagementSetSignalSummaryType.h"
#include "extxml_uci/type/EntityManagementSetStrengthType.h"
#include "extxml_uci/type/EntityManagementSetVoiceControlType.h"
#include "extxml_uci/type/EntityManagementSplitType.h"
#include "extxml_uci/type/EntityManagementSwapType.h"
#include "extxml_uci/type/EntityMetadataMDT.h"
#include "extxml_uci/type/EntityMetadataMT.h"
#include "extxml_uci/type/EntityMetadataPET.h"
#include "extxml_uci/type/EntityMetadataType.h"
#include "extxml_uci/type/EntityNominationResultType.h"
#include "extxml_uci/type/EntityNotificationMDT.h"
#include "extxml_uci/type/EntityNotificationMT.h"
#include "extxml_uci/type/EntityOrbitalCSO_ID_Type.h"
#include "extxml_uci/type/EntityOrbitalCSO_MDT.h"
#include "extxml_uci/type/EntityOrbitalCSO_MT.h"
#include "extxml_uci/type/EntityOrbitalElementSetID_Type.h"
#include "extxml_uci/type/EntityOrbitalElementSetMDT.h"
#include "extxml_uci/type/EntityOrbitalElementSetMT.h"
#include "extxml_uci/type/EntityOrbitalElementSetRequestMDT.h"
#include "extxml_uci/type/EntityOrbitalElementSetRequestMT.h"
#include "extxml_uci/type/EntityOrbitalElementSetRequestStatusMDT.h"
#include "extxml_uci/type/EntityOrbitalElementSetRequestStatusMT.h"
#include "extxml_uci/type/EntityOrbitalElementSetType.h"
#include "extxml_uci/type/EntityOrbitalEphemerisID_Type.h"
#include "extxml_uci/type/EntityOrbitalEphemerisMDT.h"
#include "extxml_uci/type/EntityOrbitalEphemerisMT.h"
#include "extxml_uci/type/EntityOrbitalEphemerisRequestMDT.h"
#include "extxml_uci/type/EntityOrbitalEphemerisRequestMT.h"
#include "extxml_uci/type/EntityOrbitalEphemerisRequestStatusMDT.h"
#include "extxml_uci/type/EntityOrbitalEphemerisRequestStatusMT.h"
#include "extxml_uci/type/EntityOrbitalEphemerisType.h"
#include "extxml_uci/type/EntityOrbitalManeuverMDT.h"
#include "extxml_uci/type/EntityOrbitalManeuverMT.h"
#include "extxml_uci/type/EntityOrbitalVCM_ID_Type.h"
#include "extxml_uci/type/EntityOrbitalVCM_MDT.h"
#include "extxml_uci/type/EntityOrbitalVCM_MT.h"
#include "extxml_uci/type/EntityOrbitalVCM_RequestMDT.h"
#include "extxml_uci/type/EntityOrbitalVCM_RequestMT.h"
#include "extxml_uci/type/EntityOrbitalVCM_RequestStatusMDT.h"
#include "extxml_uci/type/EntityOrbitalVCM_RequestStatusMT.h"
#include "extxml_uci/type/EntityOrbitalVCM_Type.h"
#include "extxml_uci/type/EntityPositionType.h"
#include "extxml_uci/type/EntityPropagationMDT.h"
#include "extxml_uci/type/EntityPropagationMT.h"
#include "extxml_uci/type/EntityRemoveInfoType.h"
#include "extxml_uci/type/EntitySignalSummaryType.h"
#include "extxml_uci/type/EntitySourceIdentifierType.h"
#include "extxml_uci/type/EntitySourceSpecificDataType.h"
#include "extxml_uci/type/EntitySourceType.h"
#include "extxml_uci/type/EntityStalenessThresholdsType.h"
#include "extxml_uci/type/EnvironmentIdentityConfidenceType.h"
#include "extxml_uci/type/EnvironmentIdentityType.h"
#include "extxml_uci/type/EphemerisOrbitalModelType.h"
#include "extxml_uci/type/EphemerisPropagatorChoiceType.h"
#include "extxml_uci/type/EquatorialCoordinatesCovarianceType.h"
#include "extxml_uci/type/EquatorialCoordinatesType.h"
#include "extxml_uci/type/EquatorialKinematicsType.h"
#include "uci/base/accessorType.h"
#include "uci/type/DLZ_DataType.h"
#include "uci/type/DLZ_ID_Type.h"
#include "uci/type/DLZ_MDT.h"
#include "uci/type/DLZ_MT.h"
#include "uci/type/DLZ_RequestMDT.h"
#include "uci/type/DLZ_RequestMT.h"
#include "uci/type/DLZ_RequestStatusMDT.h"
#include "uci/type/DLZ_RequestStatusMT.h"
#include "uci/type/DMPI_AchievabilityAssessmentRequestType.h"
#include "uci/type/DMPI_AchievabilityAssessmentType.h"
#include "uci/type/DMPI_AllocationType.h"
#include "uci/type/DMPI_BlastPairingType.h"
#include "uci/type/DMPI_CancelCommandMDT.h"
#include "uci/type/DMPI_CancelCommandMT.h"
#include "uci/type/DMPI_CancelCommandStatusMDT.h"
#include "uci/type/DMPI_CancelCommandStatusMT.h"
#include "uci/type/DMPI_DamageEstimateType.h"
#include "uci/type/DMPI_DesignationID_Type.h"
#include "uci/type/DMPI_DesignationMDT.h"
#include "uci/type/DMPI_DesignationMT.h"
#include "uci/type/DMPI_DesignationParametersType.h"
#include "uci/type/DMPI_DesignationRequestMDT.h"
#include "uci/type/DMPI_DesignationRequestMT.h"
#include "uci/type/DMPI_DesignationRequestStatusMDT.h"
#include "uci/type/DMPI_DesignationRequestStatusMT.h"
#include "uci/type/DMPI_ID_Type.h"
#include "uci/type/DMPI_LocationType.h"
#include "uci/type/DMPI_MDT.h"
#include "uci/type/DMPI_MT.h"
#include "uci/type/DMPI_PatternChoiceType.h"
#include "uci/type/DMPI_PatternID_Type.h"
#include "uci/type/DMPI_PatternMDT.h"
#include "uci/type/DMPI_PatternMT.h"
#include "uci/type/DMPI_PatternType.h"
#include "uci/type/DMPI_RadialPatternType.h"
#include "uci/type/DMPI_StatusMDT.h"
#include "uci/type/DMPI_StatusMT.h"
#include "uci/type/DMPI_StoreStatusType.h"
#include "uci/type/DMPI_TargetType.h"
#include "uci/type/DMPI_TraceabilityType.h"
#include "uci/type/DMPI_ViolationChoiceType.h"
#include "uci/type/DMPI_ViolationType.h"
#include "uci/type/DMPI_XbyY_PatternType.h"
#include "uci/type/DVR_ProcessingParametersType.h"
#include "uci/type/DataPlanActivationStatusMT.h"
#include "uci/type/DataPlanConfigurationActivationType.h"
#include "uci/type/DataPlanConfigurationStateType.h"
#include "uci/type/DataPlanDetailsType.h"
#include "uci/type/DataPlanEffectivityActivationStatusType.h"
#include "uci/type/DataPlanEffectivityActivationType.h"
#include "uci/type/DataPlanEffectivityStateType.h"
#include "uci/type/DataPlanID_Type.h"
#include "uci/type/DataPlanMDT.h"
#include "uci/type/DataPlanMT.h"
#include "uci/type/DataPlanOverrideActivationType.h"
#include "uci/type/DataPlanOverrideRequestMDT.h"
#include "uci/type/DataPlanOverrideRequestMT.h"
#include "uci/type/DataPlanOverrideRequestStatusMDT.h"
#include "uci/type/DataPlanOverrideRequestStatusMT.h"
#include "uci/type/DataPlanOverrideRequestType.h"
#include "uci/type/DataPlanTriggerType.h"
#include "uci/type/DataPortType.h"
#include "uci/type/DataProductClassificationLevelType.h"
#include "uci/type/DataRateDataType.h"
#include "uci/type/DataRecordBaseType.h"
#include "uci/type/DataRecordDeleteDetailsType.h"
#include "uci/type/DataRecordInstanceID_Type.h"
#include "uci/type/DataRecordListBaseType.h"
#include "uci/type/DataRecordListEntryManagementRequestStatusType.h"
#include "uci/type/DataRecordListID_Type.h"
#include "uci/type/DataRecordListManagementRequestMDT.h"
#include "uci/type/DataRecordListManagementRequestMT.h"
#include "uci/type/DataRecordListManagementRequestStatusMDT.h"
#include "uci/type/DataRecordListManagementRequestStatusMT.h"
#include "uci/type/DataRecordManagementDetailsType.h"
#include "uci/type/DataRecordManagementRequestMDT.h"
#include "uci/type/DataRecordManagementRequestMT.h"
#include "uci/type/DataRecordManagementRequestStatusMDT.h"
#include "uci/type/DataRecordManagementRequestStatusMT.h"
#include "uci/type/DataStorageUtilizationRequestMDT.h"
#include "uci/type/DataStorageUtilizationRequestMT.h"
#include "uci/type/DataStorageUtilizationRequestStatusMDT.h"
#include "uci/type/DataStorageUtilizationRequestStatusMT.h"
#include "uci/type/DataUpdateOriginatorType.h"
#include "uci/type/DataUpdateRequestMDT.h"
#include "uci/type/DataUpdateRequestMT.h"
#include "uci/type/DataUpdateRequestStatusMDT.h"
#include "uci/type/DataUpdateRequestStatusMT.h"
#include "uci/type/DataUpdateRequestType.h"
#include "uci/type/DataUpdateSourceType.h"
#include "uci/type/DateTimeRangeBeginType.h"
#include "uci/type/DateTimeRangeDeconType.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/DateTimeSigmaType.h"
#include "uci/type/DebrisCloudBoundaryType.h"
#include "uci/type/DeconflictionWindowType.h"
#include "uci/type/DefaultResponseType.h"
#include "uci/type/DefensiveJammerSystemInfoType.h"
#include "uci/type/DemodulationParameterType.h"
#include "uci/type/DependentActivityType.h"
#include "uci/type/DependentRequirementConditionType.h"
#include "uci/type/DependentTaskType.h"
#include "uci/type/DeployableSystemIdentityType.h"
#include "uci/type/DeploymentDetectionType.h"
#include "uci/type/DesignationDataStatusType.h"
#include "uci/type/DesignationDataType.h"
#include "uci/type/DesignationFilterType.h"
#include "uci/type/DesignationID_Type.h"
#include "uci/type/DesignationMDT.h"
#include "uci/type/DesignationMT.h"
#include "uci/type/DesignationRequestMDT.h"
#include "uci/type/DesignationRequestMT.h"
#include "uci/type/DesignationRequestStatusMDT.h"
#include "uci/type/DesignationRequestStatusMT.h"
#include "uci/type/DetailedKinematicsErrorType.h"
#include "uci/type/DetailedKinematicsType.h"
#include "uci/type/DetailedReferenceKinematicsType.h"
#include "uci/type/DetectionEnvelopeParametersType.h"
#include "uci/type/DetectionEnvelopeType.h"
#include "uci/type/DetectionRangeRingType.h"
#include "uci/type/DigitalFunctionType.h"
#include "uci/type/DigitalPayloadProcessingType.h"
#include "uci/type/DigitalPayloadProcessorPortAndDataType.h"
#include "uci/type/DirectControlInterfacesType.h"
#include "uci/type/DiscreteDataLinkIdentifierType.h"
#include "uci/type/DiscreteStatusMDT.h"
#include "uci/type/DiscreteStatusMT.h"
#include "uci/type/DisposalOrbitType.h"
#include "uci/type/DisseminationByType.h"
#include "uci/type/DisseminationConstrainedSubplanType.h"
#include "uci/type/DisseminationProductType.h"
#include "uci/type/DisseminationReportType.h"
#include "uci/type/DisseminationRequirementsType.h"
#include "uci/type/DisseminationSubplanType.h"
#include "uci/type/DistanceConstraintsType.h"
#include "uci/type/DistanceResolutionSpecificationType.h"
#include "uci/type/DomeType.h"
#include "uci/type/DoorCommandChoiceType.h"
#include "uci/type/DoorCommandMDT.h"
#include "uci/type/DoorCommandMT.h"
#include "uci/type/DoorCommandStatusMDT.h"
#include "uci/type/DoorCommandStatusMT.h"
#include "uci/type/DoorCommandType.h"
#include "uci/type/DoorStatusMDT.h"
#include "uci/type/DoorStatusMT.h"
#include "uci/type/DoorStatusType.h"
#include "uci/type/DoubleMinMaxType.h"
#include "uci/type/DownloadConstrainedSubPlanType.h"
#include "uci/type/DragCoefficientChoiceType.h"
#include "uci/type/DropRestrictionType.h"
#include "uci/type/DuplicateRequirementType.h"
#include "uci/type/DurationRangeType.h"
#include "uci/type/DwellID_Type.h"
#include "uci/type/EA_ActivityChangeBeamCommandType.h"
#include "uci/type/EA_ActivityCommandType.h"
#include "uci/type/EA_ActivityMDT.h"
#include "uci/type/EA_ActivityMT.h"
#include "uci/type/EA_ActivityType.h"
#include "uci/type/EA_BeamGroupType.h"
#include "uci/type/EA_CapabilityCommandType.h"
#include "uci/type/EA_CapabilityMDT.h"
#include "uci/type/EA_CapabilityMT.h"
#include "uci/type/EA_CapabilityOptionsType.h"
#include "uci/type/EA_CapabilityStatusMDT.h"
#include "uci/type/EA_CapabilityStatusMT.h"
#include "uci/type/EA_CapabilityType.h"
#include "uci/type/EA_ChangeLocationAndPowerType.h"
#include "uci/type/EA_CommandMDT.h"
#include "uci/type/EA_CommandMT.h"
#include "uci/type/EA_CommandResponseType.h"
#include "uci/type/EA_CommandStatusMDT.h"
#include "uci/type/EA_CommandStatusMT.h"
#include "uci/type/EA_CommandType.h"
#include "uci/type/EA_ComponentType.h"
#include "uci/type/EA_ConsentRequestMDT.h"
#include "uci/type/EA_ConsentRequestMT.h"
#include "uci/type/EA_ConsentRequestStatusMDT.h"
#include "uci/type/EA_ConsentRequestStatusMT.h"
#include "uci/type/EA_ConsentRequestType.h"
#include "uci/type/EA_DetailsAssignedType.h"
#include "uci/type/EA_DetailsType.h"
#include "uci/type/EA_DetailsUnassignedType.h"
#include "uci/type/EA_EmissionType.h"
#include "uci/type/EA_EmitterDataType.h"
#include "uci/type/EA_EntityType.h"
#include "uci/type/EA_PowerType.h"
#include "uci/type/EA_ProposedType.h"
#include "uci/type/EA_ResponseType.h"
#include "uci/type/EA_SettingsCommandMDT.h"
#include "uci/type/EA_SettingsCommandMT.h"
#include "uci/type/EA_SettingsCommandStatusMDT.h"
#include "uci/type/EA_SettingsCommandStatusMT.h"
#include "uci/type/EA_TargetPointingType.h"
#include "uci/type/EA_TargetType.h"
#include "uci/type/EA_TaskEscortType.h"
#include "uci/type/EA_TaskProtectedAssetsType.h"
#include "uci/type/EA_TaskRouteRequirementsType.h"
#include "uci/type/EA_TaskSuppressionConstraintsType.h"
#include "uci/type/EA_TaskThreatsType.h"
#include "uci/type/EA_TaskType.h"
#include "uci/type/EA_TechniqueGroupIdentifierType.h"
#include "uci/type/EA_TechniqueIdentifierType.h"
#include "uci/type/EA_TechniqueType.h"
#include "uci/type/ECEF_AccelerationAccelerationCovarianceType.h"
#include "uci/type/ECEF_AccelerationType.h"
#include "uci/type/ECEF_KinematicsType.h"
#include "uci/type/ECEF_PositionAccelerationCovarianceType.h"
#include "uci/type/ECEF_PositionOrientationCovarianceType.h"
#include "uci/type/ECEF_PositionPositionCovarianceType.h"
#include "uci/type/ECEF_PositionType.h"
#include "uci/type/ECEF_PositionVelocityCovarianceType.h"
#include "uci/type/ECEF_SensorKinematicsType.h"
#include "uci/type/ECEF_StateCovarianceType.h"
#include "uci/type/ECEF_UnitVectorType.h"
#include "uci/type/ECEF_VelocityAccelerationCovarianceType.h"
#include "uci/type/ECEF_VelocityOrientationCovarianceType.h"
#include "uci/type/ECEF_VelocityType.h"
#include "uci/type/ECEF_VelocityVelocityCovarianceType.h"
#include "uci/type/EEI_ID_Type.h"
#include "uci/type/EEI_MDT.h"
#include "uci/type/EEI_MT.h"
#include "uci/type/EOB_CodesType.h"
#include "uci/type/EOB_CorrelatedToType.h"
#include "uci/type/EOB_CorrelationRecordID_Type.h"
#include "uci/type/EOB_CorrelationRecordMDT.h"
#include "uci/type/EOB_CorrelationRecordMT.h"
#include "uci/type/EOB_CorrelationRecordType.h"
#include "uci/type/EOB_EmitterID_Type.h"
#include "uci/type/EOB_EmitterIdentityType.h"
#include "uci/type/EOB_EmitterModeID_Type.h"
#include "uci/type/EOB_EmitterModeType.h"
#include "uci/type/EOB_EmitterType.h"
#include "uci/type/EOB_EquipmentIdentityType.h"
#include "uci/type/EOB_EquipmentRecordType.h"
#include "uci/type/EOB_EquipmentType.h"
#include "uci/type/EOB_FixedPositionType.h"
#include "uci/type/EOB_IdentityBaseType.h"
#include "uci/type/EOB_IdentityConfidenceType.h"
#include "uci/type/EOB_IdentityType.h"
#include "uci/type/EOB_RecordID_Type.h"
#include "uci/type/EOB_RecordMarkedType.h"
#include "uci/type/EOB_SignalType.h"
#include "uci/type/EOB_SiteIdentityType.h"
#include "uci/type/EOB_SitePIN_Type.h"
#include "uci/type/ESM_AcquisitionTargetType.h"
#include "uci/type/ESM_ActivityCommandType.h"
#include "uci/type/ESM_ActivityMDT.h"
#include "uci/type/ESM_ActivityMT.h"
#include "uci/type/ESM_ActivityType.h"
#include "uci/type/ESM_BinGroupActivationType.h"
#include "uci/type/ESM_BinPrecedenceType.h"
#include "uci/type/ESM_BinProfileType.h"
#include "uci/type/ESM_BinType.h"
#include "uci/type/ESM_CapabilityCommandType.h"
#include "uci/type/ESM_CapabilityMDT.h"
#include "uci/type/ESM_CapabilityMT.h"
#include "uci/type/ESM_CapabilityOptionsType.h"
#include "uci/type/ESM_CapabilityStatusMDT.h"
#include "uci/type/ESM_CapabilityStatusMT.h"
#include "uci/type/ESM_CapabilityType.h"
#include "uci/type/ESM_ChangeDwellType.h"
#include "uci/type/ESM_ChangeGeolocationType.h"
#include "uci/type/ESM_CommandMDT.h"
#include "uci/type/ESM_CommandMT.h"
#include "uci/type/ESM_CommandResponseType.h"
#include "uci/type/ESM_CommandStatusMDT.h"
#include "uci/type/ESM_CommandStatusMT.h"
#include "uci/type/ESM_CommandType.h"
#include "uci/type/ESM_ConsentRequestMDT.h"
#include "uci/type/ESM_ConsentRequestMT.h"
#include "uci/type/ESM_ConsentRequestStatusMDT.h"
#include "uci/type/ESM_ConsentRequestStatusMT.h"
#include "uci/type/ESM_ConsentRequestType.h"
#include "uci/type/ESM_DwellCoverageType.h"
#include "uci/type/ESM_LocationType.h"
#include "uci/type/ESM_PerformanceProfileType.h"
#include "uci/type/ESM_ProfileEditType.h"
#include "uci/type/ESM_ProfileEntryType.h"
#include "uci/type/ESM_ReceiveDwellType.h"
#include "uci/type/ESM_SettingsCommandMDT.h"
#include "uci/type/EarthOrientationParametersDataChoiceType.h"
#include "uci/type/EarthOrientationParametersID_Type.h"
#include "uci/type/EarthOrientationParametersMDT.h"
#include "uci/type/EarthOrientationParametersMT.h"
#include "uci/type/EffectActivityMDT.h"
#include "uci/type/EffectActivityMT.h"
#include "uci/type/EffectActivityType.h"
#include "uci/type/EffectAllocationInvalidType.h"
#include "uci/type/EffectAllocationType.h"
#include "uci/type/EffectCancelCommandMDT.h"
#include "uci/type/EffectCancelCommandMT.h"
#include "uci/type/EffectCancelCommandStatusMDT.h"
#include "uci/type/EffectCancelCommandStatusMT.h"
#include "uci/type/EffectCapabilityCommandType.h"
#include "uci/type/EffectCapabilityMDT.h"
#include "uci/type/EffectCapabilityMT.h"
#include "uci/type/EffectCapabilityOptionsType.h"
#include "uci/type/EffectCapabilityStatusMDT.h"
#include "uci/type/EffectCapabilityStatusMT.h"
#include "uci/type/EffectCapabilityType.h"
#include "uci/type/EffectCommandMDT.h"
#include "uci/type/EffectCommandMT.h"
#include "uci/type/EffectCommandStatusMDT.h"
#include "uci/type/EffectCommandStatusMT.h"
#include "uci/type/EffectCommandType.h"
#include "uci/type/EffectExecutionApprovalStatusMDT.h"
#include "uci/type/EffectExecutionApprovalStatusMT.h"
#include "uci/type/EffectID_Type.h"
#include "uci/type/EffectMDT.h"
#include "uci/type/EffectMT.h"
#include "uci/type/EffectPlanActivationType.h"
#include "uci/type/EffectPlanApprovalStatusMDT.h"
#include "uci/type/EffectPlanApprovalStatusMT.h"
#include "uci/type/EffectPlanCommandID_ChoiceType.h"
#include "uci/type/EffectPlanCommandID_Type.h"
#include "uci/type/EffectPlanCommandMDT.h"
#include "uci/type/EffectPlanCommandMT.h"
#include "uci/type/EffectPlanCommandStatusMDT.h"
#include "uci/type/EffectPlanCommandStatusMT.h"
#include "uci/type/EffectPlanConstraintType.h"
#include "uci/type/EffectPlanExecutionStateType.h"
#include "uci/type/EffectPlanExecutionStatusMDT.h"
#include "uci/type/EffectPlanExecutionStatusMT.h"
#include "uci/type/EffectPlanID_Type.h"
#include "uci/type/EffectPlanInputsType.h"
#include "uci/type/EffectPlanInvalidType.h"
#include "uci/type/EffectPlanMDT.h"
#include "uci/type/EffectPlanMT.h"
#include "uci/type/EffectPlanPartsType.h"
#include "uci/type/EffectPlanProcessDescriptionType.h"
#include "uci/type/EffectPlanProcessType.h"
#include "uci/type/EffectPlanStatusMDT.h"
#include "uci/type/EffectPlanStatusMT.h"
#include "uci/type/EffectPlanType.h"
#include "uci/type/EffectPlanValidationCommandMDT.h"
#include "uci/type/EffectPlanValidationCommandMT.h"
#include "uci/type/EffectPlanValidationCommandStatusMDT.h"
#include "uci/type/EffectPlanValidationCommandStatusMT.h"
#include "uci/type/EffectPlanValidationID_Type.h"
#include "uci/type/EffectPlanValidationInputsType.h"
#include "uci/type/EffectPlanValidationMDT.h"
#include "uci/type/EffectPlanValidationMT.h"
#include "uci/type/EffectPlanningResultType.h"
#include "uci/type/EffectPlanningStatusMDT.h"
#include "uci/type/EffectPlanningStatusMT.h"
#include "uci/type/EffectStatusMDT.h"
#include "uci/type/EffectStatusMT.h"
#include "uci/type/ElectronicProtectionOptionsDefaultType.h"
#include "uci/type/ElectronicProtectionOptionsEnableType.h"
#include "uci/type/ElectronicProtectionOptionsEnabledType.h"
#include "uci/type/ElectronicProtectionOptionsSupportedType.h"
#include "uci/type/ElementDetailsType.h"
#include "uci/type/ElementSetCloudType.h"
#include "uci/type/ElevationRequestMDT.h"
#include "uci/type/ElevationRequestMT.h"
#include "uci/type/ElevationRequestPointsType.h"
#include "uci/type/ElevationRequestStatusMDT.h"
#include "uci/type/ElevationRequestStatusMT.h"
#include "uci/type/ElevationVisibilityPointInfoFromSetType.h"
#include "uci/type/ElevationVisibilityPointInfoSetType.h"
#include "uci/type/ElevationVisibilityPointInfoType.h"
#include "uci/type/ElevationVisibilityRequestMDT.h"
#include "uci/type/ElevationVisibilityRequestMT.h"
#include "uci/type/ElevationVisibilityRequestPointsType.h"
#include "uci/type/ElevationVisibilityRequestStatusMDT.h"
#include "uci/type/ElevationVisibilityRequestStatusMT.h"
#include "uci/type/EllipseType.h"
#include "uci/type/EllipsoidType.h"
#include "uci/type/EmconConstraintType.h"
#include "uci/type/EmconERP_Type.h"
#include "uci/type/EmconOverrideType.h"
#include "uci/type/EmconSettingType.h"
#include "uci/type/EmergencyReferenceOpPointCategoriesType.h"
#include "uci/type/EmergencyReferenceOpPointType.h"
#include "uci/type/EmergencyReferencePointType.h"
#include "uci/type/EmitterEntryType.h"
#include "uci/type/EmitterFixedPositionType.h"
#include "uci/type/EmitterFunctionType.h"
#include "uci/type/EmitterIdentityCategoryType.h"
#include "uci/type/EmitterIdentityConfidenceType.h"
#include "uci/type/EmitterIdentityType.h"
#include "uci/type/EmitterMultipleType.h"
#include "uci/type/EmitterSourceID_ChoiceType.h"
#include "uci/type/EmitterTargetLocationDataType.h"
#include "uci/type/EmitterUncertaintyChoiceType.h"
#include "uci/type/EmitterUncertaintyType.h"
#include "uci/type/EmitterWaveformDataType.h"
#include "uci/type/EndPointType.h"
#include "uci/type/EndpointReferenceType.h"
#include "uci/type/EnduranceBaseType.h"
#include "uci/type/EnduranceFootprintType.h"
#include "uci/type/EnduranceMultiStandardType.h"
#include "uci/type/EnduranceRemainingType.h"
#include "uci/type/EnduranceType.h"
#include "uci/type/EntityAssignmentMemberType.h"
#include "uci/type/EntityAssignmentType.h"
#include "uci/type/EntityCapabilitySourceType.h"
#include "uci/type/EntityCharacteristicType.h"
#include "uci/type/EntityComparativeType.h"
#include "uci/type/EntityConfirmationMDT.h"
#include "uci/type/EntityConfirmationMT.h"
#include "uci/type/EntityConfirmationRequestMDT.h"
#include "uci/type/EntityConfirmationRequestMT.h"
#include "uci/type/EntityConfirmationRequestStatusMDT.h"
#include "uci/type/EntityConfirmationRequestStatusMT.h"
#include "uci/type/EntityContributorID_ChoiceType.h"
#include "uci/type/EntityDataType.h"
#include "uci/type/EntityDimensionEstimateType.h"
#include "uci/type/EntityDimensionEstimateUncertaintyType.h"
#include "uci/type/EntityEphemerisBasisChoiceType.h"
#include "uci/type/EntityEphemerisRequestParametersType.h"
#include "uci/type/EntityExternalType.h"
#include "uci/type/EntityFilterType.h"
#include "uci/type/EntityFusionSourceType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/EntityIdentityChoiceType.h"
#include "uci/type/EntityIdentityType.h"
#include "uci/type/EntityLostMDT.h"
#include "uci/type/EntityLostMT.h"
#include "uci/type/EntityLostSourceType.h"
#include "uci/type/EntityMDT.h"
#include "uci/type/EntityMT.h"
#include "uci/type/EntityManagementClearIdentityType.h"
#include "uci/type/EntityManagementDownType.h"
#include "uci/type/EntityManagementDropRestrictType.h"
#include "uci/type/EntityManagementDropType.h"
#include "uci/type/EntityManagementKinematicsType.h"
#include "uci/type/EntityManagementMergeType.h"
#include "uci/type/EntityManagementProposeCorrelationType.h"
#include "uci/type/EntityManagementRequestEntityStatusType.h"
#include "uci/type/EntityManagementRequestMDT.h"
#include "uci/type/EntityManagementRequestMT.h"
#include "uci/type/EntityManagementRequestStatusMDT.h"
#include "uci/type/EntityManagementRequestStatusMT.h"
#include "uci/type/EntityManagementRequestType.h"
#include "uci/type/EntityManagementSetActivityByType.h"
#include "uci/type/EntityManagementSetCapabilityType.h"
#include "uci/type/EntityManagementSetEnduranceType.h"
#include "uci/type/EntityManagementSetFusionEligibilityType.h"
#include "uci/type/EntityManagementSetIdentityType.h"
#include "uci/type/EntityManagementSetLink16MetadataType.h"
#include "uci/type/EntityManagementSetModeType.h"
#include "uci/type/EntityManagementSetPlatformStatusType.h"
#include "uci/type/EntityManagementSetSignalSummaryType.h"
#include "uci/type/EntityManagementSetStrengthType.h"
#include "uci/type/EntityManagementSetVoiceControlType.h"
#include "uci/type/EntityManagementSplitType.h"
#include "uci/type/EntityManagementSwapType.h"
#include "uci/type/EntityMetadataMDT.h"
#include "uci/type/EntityMetadataMT.h"
#include "uci/type/EntityMetadataPET.h"
#include "uci/type/EntityMetadataType.h"
#include "uci/type/EntityNominationResultType.h"
#include "uci/type/EntityNotificationMDT.h"
#include "uci/type/EntityNotificationMT.h"
#include "uci/type/EntityOrbitalCSO_ID_Type.h"
#include "uci/type/EntityOrbitalCSO_MDT.h"
#include "uci/type/EntityOrbitalCSO_MT.h"
#include "uci/type/EntityOrbitalElementSetID_Type.h"
#include "uci/type/EntityOrbitalElementSetMDT.h"
#include "uci/type/EntityOrbitalElementSetMT.h"
#include "uci/type/EntityOrbitalElementSetRequestMDT.h"
#include "uci/type/EntityOrbitalElementSetRequestMT.h"
#include "uci/type/EntityOrbitalElementSetRequestStatusMDT.h"
#include "uci/type/EntityOrbitalElementSetRequestStatusMT.h"
#include "uci/type/EntityOrbitalElementSetType.h"
#include "uci/type/EntityOrbitalEphemerisID_Type.h"
#include "uci/type/EntityOrbitalEphemerisMDT.h"
#include "uci/type/EntityOrbitalEphemerisMT.h"
#include "uci/type/EntityOrbitalEphemerisRequestMDT.h"
#include "uci/type/EntityOrbitalEphemerisRequestMT.h"
#include "uci/type/EntityOrbitalEphemerisRequestStatusMDT.h"
#include "uci/type/EntityOrbitalEphemerisRequestStatusMT.h"
#include "uci/type/EntityOrbitalEphemerisType.h"
#include "uci/type/EntityOrbitalManeuverMDT.h"
#include "uci/type/EntityOrbitalManeuverMT.h"
#include "uci/type/EntityOrbitalVCM_ID_Type.h"
#include "uci/type/EntityOrbitalVCM_MDT.h"
#include "uci/type/EntityOrbitalVCM_MT.h"
#include "uci/type/EntityOrbitalVCM_RequestMDT.h"
#include "uci/type/EntityOrbitalVCM_RequestMT.h"
#include "uci/type/EntityOrbitalVCM_RequestStatusMDT.h"
#include "uci/type/EntityOrbitalVCM_RequestStatusMT.h"
#include "uci/type/EntityOrbitalVCM_Type.h"
#include "uci/type/EntityPositionType.h"
#include "uci/type/EntityPropagationMDT.h"
#include "uci/type/EntityPropagationMT.h"
#include "uci/type/EntityRemoveInfoType.h"
#include "uci/type/EntitySignalSummaryType.h"
#include "uci/type/EntitySourceIdentifierType.h"
#include "uci/type/EntitySourceSpecificDataType.h"
#include "uci/type/EntitySourceType.h"
#include "uci/type/EntityStalenessThresholdsType.h"
#include "uci/type/EnvironmentIdentityConfidenceType.h"
#include "uci/type/EnvironmentIdentityType.h"
#include "uci/type/EphemerisOrbitalModelType.h"
#include "uci/type/EphemerisPropagatorChoiceType.h"
#include "uci/type/EquatorialCoordinatesCovarianceType.h"
#include "uci/type/EquatorialCoordinatesType.h"
#include "uci/type/EquatorialKinematicsType.h"

/**  */
namespace extxml_uci {

/** The namespace in which all base data types are declared */
namespace base {

bool extxml_uci::base::ExternalizerRead3::read(const boost::property_tree::ptree& propTree, uci::base::Accessor& accessor, std::string& nodeName, std::string& nsPrefix) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::dataPlanActivationStatusMT:
      return extxml_uci::type::DataPlanActivationStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataPlanActivationStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanConfigurationActivationType:
      return extxml_uci::type::DataPlanConfigurationActivationType::deserialize(propTree, dynamic_cast<uci::type::DataPlanConfigurationActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanConfigurationStateType:
      return extxml_uci::type::DataPlanConfigurationStateType::deserialize(propTree, dynamic_cast<uci::type::DataPlanConfigurationStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanDetailsType:
      return extxml_uci::type::DataPlanDetailsType::deserialize(propTree, dynamic_cast<uci::type::DataPlanDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanEffectivityActivationStatusType:
      return extxml_uci::type::DataPlanEffectivityActivationStatusType::deserialize(propTree, dynamic_cast<uci::type::DataPlanEffectivityActivationStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanEffectivityActivationType:
      return extxml_uci::type::DataPlanEffectivityActivationType::deserialize(propTree, dynamic_cast<uci::type::DataPlanEffectivityActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanEffectivityStateType:
      return extxml_uci::type::DataPlanEffectivityStateType::deserialize(propTree, dynamic_cast<uci::type::DataPlanEffectivityStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanID_Type:
      return extxml_uci::type::DataPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::DataPlanID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanMDT:
      return extxml_uci::type::DataPlanMDT::deserialize(propTree, dynamic_cast<uci::type::DataPlanMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanMT:
      return extxml_uci::type::DataPlanMT::deserialize(propTree, dynamic_cast<uci::type::DataPlanMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanOverrideActivationType:
      return extxml_uci::type::DataPlanOverrideActivationType::deserialize(propTree, dynamic_cast<uci::type::DataPlanOverrideActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanOverrideRequestMDT:
      return extxml_uci::type::DataPlanOverrideRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DataPlanOverrideRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanOverrideRequestMT:
      return extxml_uci::type::DataPlanOverrideRequestMT::deserialize(propTree, dynamic_cast<uci::type::DataPlanOverrideRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanOverrideRequestStatusMDT:
      return extxml_uci::type::DataPlanOverrideRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataPlanOverrideRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanOverrideRequestStatusMT:
      return extxml_uci::type::DataPlanOverrideRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataPlanOverrideRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanOverrideRequestType:
      return extxml_uci::type::DataPlanOverrideRequestType::deserialize(propTree, dynamic_cast<uci::type::DataPlanOverrideRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPlanTriggerType:
      return extxml_uci::type::DataPlanTriggerType::deserialize(propTree, dynamic_cast<uci::type::DataPlanTriggerType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataPortType:
      return extxml_uci::type::DataPortType::deserialize(propTree, dynamic_cast<uci::type::DataPortType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataProductClassificationLevelType:
      return extxml_uci::type::DataProductClassificationLevelType::deserialize(propTree, dynamic_cast<uci::type::DataProductClassificationLevelType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRateDataType:
      return extxml_uci::type::DataRateDataType::deserialize(propTree, dynamic_cast<uci::type::DataRateDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRecordBaseType:
      return extxml_uci::type::DataRecordBaseType::deserialize(propTree, dynamic_cast<uci::type::DataRecordBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRecordDeleteDetailsType:
      return extxml_uci::type::DataRecordDeleteDetailsType::deserialize(propTree, dynamic_cast<uci::type::DataRecordDeleteDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRecordInstanceID_Type:
      return extxml_uci::type::DataRecordInstanceID_Type::deserialize(propTree, dynamic_cast<uci::type::DataRecordInstanceID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRecordListBaseType:
      return extxml_uci::type::DataRecordListBaseType::deserialize(propTree, dynamic_cast<uci::type::DataRecordListBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRecordListEntryManagementRequestStatusType:
      return extxml_uci::type::DataRecordListEntryManagementRequestStatusType::deserialize(propTree, dynamic_cast<uci::type::DataRecordListEntryManagementRequestStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRecordListID_Type:
      return extxml_uci::type::DataRecordListID_Type::deserialize(propTree, dynamic_cast<uci::type::DataRecordListID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRecordListManagementRequestMDT:
      return extxml_uci::type::DataRecordListManagementRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DataRecordListManagementRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRecordListManagementRequestMT:
      return extxml_uci::type::DataRecordListManagementRequestMT::deserialize(propTree, dynamic_cast<uci::type::DataRecordListManagementRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRecordListManagementRequestStatusMDT:
      return extxml_uci::type::DataRecordListManagementRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataRecordListManagementRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRecordListManagementRequestStatusMT:
      return extxml_uci::type::DataRecordListManagementRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataRecordListManagementRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRecordManagementDetailsType:
      return extxml_uci::type::DataRecordManagementDetailsType::deserialize(propTree, dynamic_cast<uci::type::DataRecordManagementDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRecordManagementRequestMDT:
      return extxml_uci::type::DataRecordManagementRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DataRecordManagementRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRecordManagementRequestMT:
      return extxml_uci::type::DataRecordManagementRequestMT::deserialize(propTree, dynamic_cast<uci::type::DataRecordManagementRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRecordManagementRequestStatusMDT:
      return extxml_uci::type::DataRecordManagementRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataRecordManagementRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataRecordManagementRequestStatusMT:
      return extxml_uci::type::DataRecordManagementRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataRecordManagementRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataStorageUtilizationRequestMDT:
      return extxml_uci::type::DataStorageUtilizationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DataStorageUtilizationRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataStorageUtilizationRequestMT:
      return extxml_uci::type::DataStorageUtilizationRequestMT::deserialize(propTree, dynamic_cast<uci::type::DataStorageUtilizationRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataStorageUtilizationRequestStatusMDT:
      return extxml_uci::type::DataStorageUtilizationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataStorageUtilizationRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataStorageUtilizationRequestStatusMT:
      return extxml_uci::type::DataStorageUtilizationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataStorageUtilizationRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataUpdateOriginatorType:
      return extxml_uci::type::DataUpdateOriginatorType::deserialize(propTree, dynamic_cast<uci::type::DataUpdateOriginatorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataUpdateRequestMDT:
      return extxml_uci::type::DataUpdateRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DataUpdateRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataUpdateRequestMT:
      return extxml_uci::type::DataUpdateRequestMT::deserialize(propTree, dynamic_cast<uci::type::DataUpdateRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataUpdateRequestStatusMDT:
      return extxml_uci::type::DataUpdateRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataUpdateRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataUpdateRequestStatusMT:
      return extxml_uci::type::DataUpdateRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataUpdateRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataUpdateRequestType:
      return extxml_uci::type::DataUpdateRequestType::deserialize(propTree, dynamic_cast<uci::type::DataUpdateRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dataUpdateSourceType:
      return extxml_uci::type::DataUpdateSourceType::deserialize(propTree, dynamic_cast<uci::type::DataUpdateSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dateTimeRangeBeginType:
      return extxml_uci::type::DateTimeRangeBeginType::deserialize(propTree, dynamic_cast<uci::type::DateTimeRangeBeginType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dateTimeRangeDeconType:
      return extxml_uci::type::DateTimeRangeDeconType::deserialize(propTree, dynamic_cast<uci::type::DateTimeRangeDeconType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dateTimeRangeType:
      return extxml_uci::type::DateTimeRangeType::deserialize(propTree, dynamic_cast<uci::type::DateTimeRangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dateTimeSigmaType:
      return extxml_uci::type::DateTimeSigmaType::deserialize(propTree, dynamic_cast<uci::type::DateTimeSigmaType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::debrisCloudBoundaryType:
      return extxml_uci::type::DebrisCloudBoundaryType::deserialize(propTree, dynamic_cast<uci::type::DebrisCloudBoundaryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::deconflictionWindowType:
      return extxml_uci::type::DeconflictionWindowType::deserialize(propTree, dynamic_cast<uci::type::DeconflictionWindowType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::defaultResponseType:
      return extxml_uci::type::DefaultResponseType::deserialize(propTree, dynamic_cast<uci::type::DefaultResponseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::defensiveJammerSystemInfoType:
      return extxml_uci::type::DefensiveJammerSystemInfoType::deserialize(propTree, dynamic_cast<uci::type::DefensiveJammerSystemInfoType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::demodulationParameterType:
      return extxml_uci::type::DemodulationParameterType::deserialize(propTree, dynamic_cast<uci::type::DemodulationParameterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dependentActivityType:
      return extxml_uci::type::DependentActivityType::deserialize(propTree, dynamic_cast<uci::type::DependentActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dependentRequirementConditionType:
      return extxml_uci::type::DependentRequirementConditionType::deserialize(propTree, dynamic_cast<uci::type::DependentRequirementConditionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dependentTaskType:
      return extxml_uci::type::DependentTaskType::deserialize(propTree, dynamic_cast<uci::type::DependentTaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::deployableSystemIdentityType:
      return extxml_uci::type::DeployableSystemIdentityType::deserialize(propTree, dynamic_cast<uci::type::DeployableSystemIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::deploymentDetectionType:
      return extxml_uci::type::DeploymentDetectionType::deserialize(propTree, dynamic_cast<uci::type::DeploymentDetectionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::designationDataStatusType:
      return extxml_uci::type::DesignationDataStatusType::deserialize(propTree, dynamic_cast<uci::type::DesignationDataStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::designationDataType:
      return extxml_uci::type::DesignationDataType::deserialize(propTree, dynamic_cast<uci::type::DesignationDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::designationFilterType:
      return extxml_uci::type::DesignationFilterType::deserialize(propTree, dynamic_cast<uci::type::DesignationFilterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::designationID_Type:
      return extxml_uci::type::DesignationID_Type::deserialize(propTree, dynamic_cast<uci::type::DesignationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::designationMDT:
      return extxml_uci::type::DesignationMDT::deserialize(propTree, dynamic_cast<uci::type::DesignationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::designationMT:
      return extxml_uci::type::DesignationMT::deserialize(propTree, dynamic_cast<uci::type::DesignationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::designationRequestMDT:
      return extxml_uci::type::DesignationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DesignationRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::designationRequestMT:
      return extxml_uci::type::DesignationRequestMT::deserialize(propTree, dynamic_cast<uci::type::DesignationRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::designationRequestStatusMDT:
      return extxml_uci::type::DesignationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DesignationRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::designationRequestStatusMT:
      return extxml_uci::type::DesignationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DesignationRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::detailedKinematicsErrorType:
      return extxml_uci::type::DetailedKinematicsErrorType::deserialize(propTree, dynamic_cast<uci::type::DetailedKinematicsErrorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::detailedKinematicsType:
      return extxml_uci::type::DetailedKinematicsType::deserialize(propTree, dynamic_cast<uci::type::DetailedKinematicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::detailedReferenceKinematicsType:
      return extxml_uci::type::DetailedReferenceKinematicsType::deserialize(propTree, dynamic_cast<uci::type::DetailedReferenceKinematicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::detectionEnvelopeParametersType:
      return extxml_uci::type::DetectionEnvelopeParametersType::deserialize(propTree, dynamic_cast<uci::type::DetectionEnvelopeParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::detectionEnvelopeType:
      return extxml_uci::type::DetectionEnvelopeType::deserialize(propTree, dynamic_cast<uci::type::DetectionEnvelopeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::detectionRangeRingType:
      return extxml_uci::type::DetectionRangeRingType::deserialize(propTree, dynamic_cast<uci::type::DetectionRangeRingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::digitalFunctionType:
      return extxml_uci::type::DigitalFunctionType::deserialize(propTree, dynamic_cast<uci::type::DigitalFunctionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::digitalPayloadProcessingType:
      return extxml_uci::type::DigitalPayloadProcessingType::deserialize(propTree, dynamic_cast<uci::type::DigitalPayloadProcessingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::digitalPayloadProcessorPortAndDataType:
      return extxml_uci::type::DigitalPayloadProcessorPortAndDataType::deserialize(propTree, dynamic_cast<uci::type::DigitalPayloadProcessorPortAndDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::directControlInterfacesType:
      return extxml_uci::type::DirectControlInterfacesType::deserialize(propTree, dynamic_cast<uci::type::DirectControlInterfacesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::discreteDataLinkIdentifierType:
      return extxml_uci::type::DiscreteDataLinkIdentifierType::deserialize(propTree, dynamic_cast<uci::type::DiscreteDataLinkIdentifierType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::discreteStatusMDT:
      return extxml_uci::type::DiscreteStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DiscreteStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::discreteStatusMT:
      return extxml_uci::type::DiscreteStatusMT::deserialize(propTree, dynamic_cast<uci::type::DiscreteStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::disposalOrbitType:
      return extxml_uci::type::DisposalOrbitType::deserialize(propTree, dynamic_cast<uci::type::DisposalOrbitType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::disseminationByType:
      return extxml_uci::type::DisseminationByType::deserialize(propTree, dynamic_cast<uci::type::DisseminationByType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::disseminationConstrainedSubplanType:
      return extxml_uci::type::DisseminationConstrainedSubplanType::deserialize(propTree, dynamic_cast<uci::type::DisseminationConstrainedSubplanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::disseminationProductType:
      return extxml_uci::type::DisseminationProductType::deserialize(propTree, dynamic_cast<uci::type::DisseminationProductType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::disseminationReportType:
      return extxml_uci::type::DisseminationReportType::deserialize(propTree, dynamic_cast<uci::type::DisseminationReportType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::disseminationRequirementsType:
      return extxml_uci::type::DisseminationRequirementsType::deserialize(propTree, dynamic_cast<uci::type::DisseminationRequirementsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::disseminationSubplanType:
      return extxml_uci::type::DisseminationSubplanType::deserialize(propTree, dynamic_cast<uci::type::DisseminationSubplanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::distanceConstraintsType:
      return extxml_uci::type::DistanceConstraintsType::deserialize(propTree, dynamic_cast<uci::type::DistanceConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::distanceResolutionSpecificationType:
      return extxml_uci::type::DistanceResolutionSpecificationType::deserialize(propTree, dynamic_cast<uci::type::DistanceResolutionSpecificationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dLZ_DataType:
      return extxml_uci::type::DLZ_DataType::deserialize(propTree, dynamic_cast<uci::type::DLZ_DataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dLZ_ID_Type:
      return extxml_uci::type::DLZ_ID_Type::deserialize(propTree, dynamic_cast<uci::type::DLZ_ID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dLZ_MDT:
      return extxml_uci::type::DLZ_MDT::deserialize(propTree, dynamic_cast<uci::type::DLZ_MDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dLZ_MT:
      return extxml_uci::type::DLZ_MT::deserialize(propTree, dynamic_cast<uci::type::DLZ_MT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dLZ_RequestMDT:
      return extxml_uci::type::DLZ_RequestMDT::deserialize(propTree, dynamic_cast<uci::type::DLZ_RequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dLZ_RequestMT:
      return extxml_uci::type::DLZ_RequestMT::deserialize(propTree, dynamic_cast<uci::type::DLZ_RequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dLZ_RequestStatusMDT:
      return extxml_uci::type::DLZ_RequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DLZ_RequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dLZ_RequestStatusMT:
      return extxml_uci::type::DLZ_RequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DLZ_RequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_AchievabilityAssessmentRequestType:
      return extxml_uci::type::DMPI_AchievabilityAssessmentRequestType::deserialize(propTree, dynamic_cast<uci::type::DMPI_AchievabilityAssessmentRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_AchievabilityAssessmentType:
      return extxml_uci::type::DMPI_AchievabilityAssessmentType::deserialize(propTree, dynamic_cast<uci::type::DMPI_AchievabilityAssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_AllocationType:
      return extxml_uci::type::DMPI_AllocationType::deserialize(propTree, dynamic_cast<uci::type::DMPI_AllocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_BlastPairingType:
      return extxml_uci::type::DMPI_BlastPairingType::deserialize(propTree, dynamic_cast<uci::type::DMPI_BlastPairingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_CancelCommandMDT:
      return extxml_uci::type::DMPI_CancelCommandMDT::deserialize(propTree, dynamic_cast<uci::type::DMPI_CancelCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_CancelCommandMT:
      return extxml_uci::type::DMPI_CancelCommandMT::deserialize(propTree, dynamic_cast<uci::type::DMPI_CancelCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_CancelCommandStatusMDT:
      return extxml_uci::type::DMPI_CancelCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DMPI_CancelCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_CancelCommandStatusMT:
      return extxml_uci::type::DMPI_CancelCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::DMPI_CancelCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_DamageEstimateType:
      return extxml_uci::type::DMPI_DamageEstimateType::deserialize(propTree, dynamic_cast<uci::type::DMPI_DamageEstimateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_DesignationID_Type:
      return extxml_uci::type::DMPI_DesignationID_Type::deserialize(propTree, dynamic_cast<uci::type::DMPI_DesignationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_DesignationMDT:
      return extxml_uci::type::DMPI_DesignationMDT::deserialize(propTree, dynamic_cast<uci::type::DMPI_DesignationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_DesignationMT:
      return extxml_uci::type::DMPI_DesignationMT::deserialize(propTree, dynamic_cast<uci::type::DMPI_DesignationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_DesignationParametersType:
      return extxml_uci::type::DMPI_DesignationParametersType::deserialize(propTree, dynamic_cast<uci::type::DMPI_DesignationParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_DesignationRequestMDT:
      return extxml_uci::type::DMPI_DesignationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DMPI_DesignationRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_DesignationRequestMT:
      return extxml_uci::type::DMPI_DesignationRequestMT::deserialize(propTree, dynamic_cast<uci::type::DMPI_DesignationRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_DesignationRequestStatusMDT:
      return extxml_uci::type::DMPI_DesignationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DMPI_DesignationRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_DesignationRequestStatusMT:
      return extxml_uci::type::DMPI_DesignationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DMPI_DesignationRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_ID_Type:
      return extxml_uci::type::DMPI_ID_Type::deserialize(propTree, dynamic_cast<uci::type::DMPI_ID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_LocationType:
      return extxml_uci::type::DMPI_LocationType::deserialize(propTree, dynamic_cast<uci::type::DMPI_LocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_MDT:
      return extxml_uci::type::DMPI_MDT::deserialize(propTree, dynamic_cast<uci::type::DMPI_MDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_MT:
      return extxml_uci::type::DMPI_MT::deserialize(propTree, dynamic_cast<uci::type::DMPI_MT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_PatternChoiceType:
      return extxml_uci::type::DMPI_PatternChoiceType::deserialize(propTree, dynamic_cast<uci::type::DMPI_PatternChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_PatternID_Type:
      return extxml_uci::type::DMPI_PatternID_Type::deserialize(propTree, dynamic_cast<uci::type::DMPI_PatternID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_PatternMDT:
      return extxml_uci::type::DMPI_PatternMDT::deserialize(propTree, dynamic_cast<uci::type::DMPI_PatternMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_PatternMT:
      return extxml_uci::type::DMPI_PatternMT::deserialize(propTree, dynamic_cast<uci::type::DMPI_PatternMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_PatternType:
      return extxml_uci::type::DMPI_PatternType::deserialize(propTree, dynamic_cast<uci::type::DMPI_PatternType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_RadialPatternType:
      return extxml_uci::type::DMPI_RadialPatternType::deserialize(propTree, dynamic_cast<uci::type::DMPI_RadialPatternType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_StatusMDT:
      return extxml_uci::type::DMPI_StatusMDT::deserialize(propTree, dynamic_cast<uci::type::DMPI_StatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_StatusMT:
      return extxml_uci::type::DMPI_StatusMT::deserialize(propTree, dynamic_cast<uci::type::DMPI_StatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_StoreStatusType:
      return extxml_uci::type::DMPI_StoreStatusType::deserialize(propTree, dynamic_cast<uci::type::DMPI_StoreStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_TargetType:
      return extxml_uci::type::DMPI_TargetType::deserialize(propTree, dynamic_cast<uci::type::DMPI_TargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_TraceabilityType:
      return extxml_uci::type::DMPI_TraceabilityType::deserialize(propTree, dynamic_cast<uci::type::DMPI_TraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_ViolationChoiceType:
      return extxml_uci::type::DMPI_ViolationChoiceType::deserialize(propTree, dynamic_cast<uci::type::DMPI_ViolationChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_ViolationType:
      return extxml_uci::type::DMPI_ViolationType::deserialize(propTree, dynamic_cast<uci::type::DMPI_ViolationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dMPI_XbyY_PatternType:
      return extxml_uci::type::DMPI_XbyY_PatternType::deserialize(propTree, dynamic_cast<uci::type::DMPI_XbyY_PatternType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::domeType:
      return extxml_uci::type::DomeType::deserialize(propTree, dynamic_cast<uci::type::DomeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::doorCommandChoiceType:
      return extxml_uci::type::DoorCommandChoiceType::deserialize(propTree, dynamic_cast<uci::type::DoorCommandChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::doorCommandMDT:
      return extxml_uci::type::DoorCommandMDT::deserialize(propTree, dynamic_cast<uci::type::DoorCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::doorCommandMT:
      return extxml_uci::type::DoorCommandMT::deserialize(propTree, dynamic_cast<uci::type::DoorCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::doorCommandStatusMDT:
      return extxml_uci::type::DoorCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DoorCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::doorCommandStatusMT:
      return extxml_uci::type::DoorCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::DoorCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::doorCommandType:
      return extxml_uci::type::DoorCommandType::deserialize(propTree, dynamic_cast<uci::type::DoorCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::doorStatusMDT:
      return extxml_uci::type::DoorStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DoorStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::doorStatusMT:
      return extxml_uci::type::DoorStatusMT::deserialize(propTree, dynamic_cast<uci::type::DoorStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::doorStatusType:
      return extxml_uci::type::DoorStatusType::deserialize(propTree, dynamic_cast<uci::type::DoorStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::doubleMinMaxType:
      return extxml_uci::type::DoubleMinMaxType::deserialize(propTree, dynamic_cast<uci::type::DoubleMinMaxType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::downloadConstrainedSubPlanType:
      return extxml_uci::type::DownloadConstrainedSubPlanType::deserialize(propTree, dynamic_cast<uci::type::DownloadConstrainedSubPlanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dragCoefficientChoiceType:
      return extxml_uci::type::DragCoefficientChoiceType::deserialize(propTree, dynamic_cast<uci::type::DragCoefficientChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dropRestrictionType:
      return extxml_uci::type::DropRestrictionType::deserialize(propTree, dynamic_cast<uci::type::DropRestrictionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::duplicateRequirementType:
      return extxml_uci::type::DuplicateRequirementType::deserialize(propTree, dynamic_cast<uci::type::DuplicateRequirementType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::durationRangeType:
      return extxml_uci::type::DurationRangeType::deserialize(propTree, dynamic_cast<uci::type::DurationRangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dVR_ProcessingParametersType:
      return extxml_uci::type::DVR_ProcessingParametersType::deserialize(propTree, dynamic_cast<uci::type::DVR_ProcessingParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::dwellID_Type:
      return extxml_uci::type::DwellID_Type::deserialize(propTree, dynamic_cast<uci::type::DwellID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ActivityChangeBeamCommandType:
      return extxml_uci::type::EA_ActivityChangeBeamCommandType::deserialize(propTree, dynamic_cast<uci::type::EA_ActivityChangeBeamCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ActivityCommandType:
      return extxml_uci::type::EA_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::EA_ActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ActivityMDT:
      return extxml_uci::type::EA_ActivityMDT::deserialize(propTree, dynamic_cast<uci::type::EA_ActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ActivityMT:
      return extxml_uci::type::EA_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::EA_ActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ActivityType:
      return extxml_uci::type::EA_ActivityType::deserialize(propTree, dynamic_cast<uci::type::EA_ActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_BeamGroupType:
      return extxml_uci::type::EA_BeamGroupType::deserialize(propTree, dynamic_cast<uci::type::EA_BeamGroupType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_CapabilityCommandType:
      return extxml_uci::type::EA_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::EA_CapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_CapabilityMDT:
      return extxml_uci::type::EA_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::EA_CapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_CapabilityMT:
      return extxml_uci::type::EA_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::EA_CapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_CapabilityOptionsType:
      return extxml_uci::type::EA_CapabilityOptionsType::deserialize(propTree, dynamic_cast<uci::type::EA_CapabilityOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_CapabilityStatusMDT:
      return extxml_uci::type::EA_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EA_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_CapabilityStatusMT:
      return extxml_uci::type::EA_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::EA_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_CapabilityType:
      return extxml_uci::type::EA_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::EA_CapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ChangeLocationAndPowerType:
      return extxml_uci::type::EA_ChangeLocationAndPowerType::deserialize(propTree, dynamic_cast<uci::type::EA_ChangeLocationAndPowerType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_CommandMDT:
      return extxml_uci::type::EA_CommandMDT::deserialize(propTree, dynamic_cast<uci::type::EA_CommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_CommandMT:
      return extxml_uci::type::EA_CommandMT::deserialize(propTree, dynamic_cast<uci::type::EA_CommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_CommandResponseType:
      return extxml_uci::type::EA_CommandResponseType::deserialize(propTree, dynamic_cast<uci::type::EA_CommandResponseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_CommandStatusMDT:
      return extxml_uci::type::EA_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EA_CommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_CommandStatusMT:
      return extxml_uci::type::EA_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::EA_CommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_CommandType:
      return extxml_uci::type::EA_CommandType::deserialize(propTree, dynamic_cast<uci::type::EA_CommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ComponentType:
      return extxml_uci::type::EA_ComponentType::deserialize(propTree, dynamic_cast<uci::type::EA_ComponentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ConsentRequestMDT:
      return extxml_uci::type::EA_ConsentRequestMDT::deserialize(propTree, dynamic_cast<uci::type::EA_ConsentRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ConsentRequestMT:
      return extxml_uci::type::EA_ConsentRequestMT::deserialize(propTree, dynamic_cast<uci::type::EA_ConsentRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ConsentRequestStatusMDT:
      return extxml_uci::type::EA_ConsentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EA_ConsentRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ConsentRequestStatusMT:
      return extxml_uci::type::EA_ConsentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::EA_ConsentRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ConsentRequestType:
      return extxml_uci::type::EA_ConsentRequestType::deserialize(propTree, dynamic_cast<uci::type::EA_ConsentRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_DetailsAssignedType:
      return extxml_uci::type::EA_DetailsAssignedType::deserialize(propTree, dynamic_cast<uci::type::EA_DetailsAssignedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_DetailsType:
      return extxml_uci::type::EA_DetailsType::deserialize(propTree, dynamic_cast<uci::type::EA_DetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_DetailsUnassignedType:
      return extxml_uci::type::EA_DetailsUnassignedType::deserialize(propTree, dynamic_cast<uci::type::EA_DetailsUnassignedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_EmissionType:
      return extxml_uci::type::EA_EmissionType::deserialize(propTree, dynamic_cast<uci::type::EA_EmissionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_EmitterDataType:
      return extxml_uci::type::EA_EmitterDataType::deserialize(propTree, dynamic_cast<uci::type::EA_EmitterDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_EntityType:
      return extxml_uci::type::EA_EntityType::deserialize(propTree, dynamic_cast<uci::type::EA_EntityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_PowerType:
      return extxml_uci::type::EA_PowerType::deserialize(propTree, dynamic_cast<uci::type::EA_PowerType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ProposedType:
      return extxml_uci::type::EA_ProposedType::deserialize(propTree, dynamic_cast<uci::type::EA_ProposedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_ResponseType:
      return extxml_uci::type::EA_ResponseType::deserialize(propTree, dynamic_cast<uci::type::EA_ResponseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_SettingsCommandMDT:
      return extxml_uci::type::EA_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::EA_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_SettingsCommandMT:
      return extxml_uci::type::EA_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::EA_SettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_SettingsCommandStatusMDT:
      return extxml_uci::type::EA_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EA_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_SettingsCommandStatusMT:
      return extxml_uci::type::EA_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::EA_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_TargetPointingType:
      return extxml_uci::type::EA_TargetPointingType::deserialize(propTree, dynamic_cast<uci::type::EA_TargetPointingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_TargetType:
      return extxml_uci::type::EA_TargetType::deserialize(propTree, dynamic_cast<uci::type::EA_TargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_TaskEscortType:
      return extxml_uci::type::EA_TaskEscortType::deserialize(propTree, dynamic_cast<uci::type::EA_TaskEscortType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_TaskProtectedAssetsType:
      return extxml_uci::type::EA_TaskProtectedAssetsType::deserialize(propTree, dynamic_cast<uci::type::EA_TaskProtectedAssetsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_TaskRouteRequirementsType:
      return extxml_uci::type::EA_TaskRouteRequirementsType::deserialize(propTree, dynamic_cast<uci::type::EA_TaskRouteRequirementsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_TaskSuppressionConstraintsType:
      return extxml_uci::type::EA_TaskSuppressionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::EA_TaskSuppressionConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_TaskThreatsType:
      return extxml_uci::type::EA_TaskThreatsType::deserialize(propTree, dynamic_cast<uci::type::EA_TaskThreatsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_TaskType:
      return extxml_uci::type::EA_TaskType::deserialize(propTree, dynamic_cast<uci::type::EA_TaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_TechniqueGroupIdentifierType:
      return extxml_uci::type::EA_TechniqueGroupIdentifierType::deserialize(propTree, dynamic_cast<uci::type::EA_TechniqueGroupIdentifierType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_TechniqueIdentifierType:
      return extxml_uci::type::EA_TechniqueIdentifierType::deserialize(propTree, dynamic_cast<uci::type::EA_TechniqueIdentifierType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eA_TechniqueType:
      return extxml_uci::type::EA_TechniqueType::deserialize(propTree, dynamic_cast<uci::type::EA_TechniqueType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::earthOrientationParametersDataChoiceType:
      return extxml_uci::type::EarthOrientationParametersDataChoiceType::deserialize(propTree, dynamic_cast<uci::type::EarthOrientationParametersDataChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::earthOrientationParametersID_Type:
      return extxml_uci::type::EarthOrientationParametersID_Type::deserialize(propTree, dynamic_cast<uci::type::EarthOrientationParametersID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::earthOrientationParametersMDT:
      return extxml_uci::type::EarthOrientationParametersMDT::deserialize(propTree, dynamic_cast<uci::type::EarthOrientationParametersMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::earthOrientationParametersMT:
      return extxml_uci::type::EarthOrientationParametersMT::deserialize(propTree, dynamic_cast<uci::type::EarthOrientationParametersMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eCEF_AccelerationAccelerationCovarianceType:
      return extxml_uci::type::ECEF_AccelerationAccelerationCovarianceType::deserialize(propTree, dynamic_cast<uci::type::ECEF_AccelerationAccelerationCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eCEF_AccelerationType:
      return extxml_uci::type::ECEF_AccelerationType::deserialize(propTree, dynamic_cast<uci::type::ECEF_AccelerationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eCEF_KinematicsType:
      return extxml_uci::type::ECEF_KinematicsType::deserialize(propTree, dynamic_cast<uci::type::ECEF_KinematicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eCEF_PositionAccelerationCovarianceType:
      return extxml_uci::type::ECEF_PositionAccelerationCovarianceType::deserialize(propTree, dynamic_cast<uci::type::ECEF_PositionAccelerationCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eCEF_PositionOrientationCovarianceType:
      return extxml_uci::type::ECEF_PositionOrientationCovarianceType::deserialize(propTree, dynamic_cast<uci::type::ECEF_PositionOrientationCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eCEF_PositionPositionCovarianceType:
      return extxml_uci::type::ECEF_PositionPositionCovarianceType::deserialize(propTree, dynamic_cast<uci::type::ECEF_PositionPositionCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eCEF_PositionType:
      return extxml_uci::type::ECEF_PositionType::deserialize(propTree, dynamic_cast<uci::type::ECEF_PositionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eCEF_PositionVelocityCovarianceType:
      return extxml_uci::type::ECEF_PositionVelocityCovarianceType::deserialize(propTree, dynamic_cast<uci::type::ECEF_PositionVelocityCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eCEF_SensorKinematicsType:
      return extxml_uci::type::ECEF_SensorKinematicsType::deserialize(propTree, dynamic_cast<uci::type::ECEF_SensorKinematicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eCEF_StateCovarianceType:
      return extxml_uci::type::ECEF_StateCovarianceType::deserialize(propTree, dynamic_cast<uci::type::ECEF_StateCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eCEF_UnitVectorType:
      return extxml_uci::type::ECEF_UnitVectorType::deserialize(propTree, dynamic_cast<uci::type::ECEF_UnitVectorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eCEF_VelocityAccelerationCovarianceType:
      return extxml_uci::type::ECEF_VelocityAccelerationCovarianceType::deserialize(propTree, dynamic_cast<uci::type::ECEF_VelocityAccelerationCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eCEF_VelocityOrientationCovarianceType:
      return extxml_uci::type::ECEF_VelocityOrientationCovarianceType::deserialize(propTree, dynamic_cast<uci::type::ECEF_VelocityOrientationCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eCEF_VelocityType:
      return extxml_uci::type::ECEF_VelocityType::deserialize(propTree, dynamic_cast<uci::type::ECEF_VelocityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eCEF_VelocityVelocityCovarianceType:
      return extxml_uci::type::ECEF_VelocityVelocityCovarianceType::deserialize(propTree, dynamic_cast<uci::type::ECEF_VelocityVelocityCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eEI_ID_Type:
      return extxml_uci::type::EEI_ID_Type::deserialize(propTree, dynamic_cast<uci::type::EEI_ID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eEI_MDT:
      return extxml_uci::type::EEI_MDT::deserialize(propTree, dynamic_cast<uci::type::EEI_MDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eEI_MT:
      return extxml_uci::type::EEI_MT::deserialize(propTree, dynamic_cast<uci::type::EEI_MT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectActivityMDT:
      return extxml_uci::type::EffectActivityMDT::deserialize(propTree, dynamic_cast<uci::type::EffectActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectActivityMT:
      return extxml_uci::type::EffectActivityMT::deserialize(propTree, dynamic_cast<uci::type::EffectActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectActivityType:
      return extxml_uci::type::EffectActivityType::deserialize(propTree, dynamic_cast<uci::type::EffectActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectAllocationInvalidType:
      return extxml_uci::type::EffectAllocationInvalidType::deserialize(propTree, dynamic_cast<uci::type::EffectAllocationInvalidType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectAllocationType:
      return extxml_uci::type::EffectAllocationType::deserialize(propTree, dynamic_cast<uci::type::EffectAllocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCancelCommandMDT:
      return extxml_uci::type::EffectCancelCommandMDT::deserialize(propTree, dynamic_cast<uci::type::EffectCancelCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCancelCommandMT:
      return extxml_uci::type::EffectCancelCommandMT::deserialize(propTree, dynamic_cast<uci::type::EffectCancelCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCancelCommandStatusMDT:
      return extxml_uci::type::EffectCancelCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectCancelCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCancelCommandStatusMT:
      return extxml_uci::type::EffectCancelCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectCancelCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCapabilityCommandType:
      return extxml_uci::type::EffectCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::EffectCapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCapabilityMDT:
      return extxml_uci::type::EffectCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::EffectCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCapabilityMT:
      return extxml_uci::type::EffectCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::EffectCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCapabilityOptionsType:
      return extxml_uci::type::EffectCapabilityOptionsType::deserialize(propTree, dynamic_cast<uci::type::EffectCapabilityOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCapabilityStatusMDT:
      return extxml_uci::type::EffectCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCapabilityStatusMT:
      return extxml_uci::type::EffectCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCapabilityType:
      return extxml_uci::type::EffectCapabilityType::deserialize(propTree, dynamic_cast<uci::type::EffectCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCommandMDT:
      return extxml_uci::type::EffectCommandMDT::deserialize(propTree, dynamic_cast<uci::type::EffectCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCommandMT:
      return extxml_uci::type::EffectCommandMT::deserialize(propTree, dynamic_cast<uci::type::EffectCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCommandStatusMDT:
      return extxml_uci::type::EffectCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCommandStatusMT:
      return extxml_uci::type::EffectCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectCommandType:
      return extxml_uci::type::EffectCommandType::deserialize(propTree, dynamic_cast<uci::type::EffectCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectExecutionApprovalStatusMDT:
      return extxml_uci::type::EffectExecutionApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectExecutionApprovalStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectExecutionApprovalStatusMT:
      return extxml_uci::type::EffectExecutionApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectExecutionApprovalStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectID_Type:
      return extxml_uci::type::EffectID_Type::deserialize(propTree, dynamic_cast<uci::type::EffectID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectMDT:
      return extxml_uci::type::EffectMDT::deserialize(propTree, dynamic_cast<uci::type::EffectMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectMT:
      return extxml_uci::type::EffectMT::deserialize(propTree, dynamic_cast<uci::type::EffectMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanActivationType:
      return extxml_uci::type::EffectPlanActivationType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanApprovalStatusMDT:
      return extxml_uci::type::EffectPlanApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanApprovalStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanApprovalStatusMT:
      return extxml_uci::type::EffectPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanCommandID_ChoiceType:
      return extxml_uci::type::EffectPlanCommandID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanCommandID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanCommandID_Type:
      return extxml_uci::type::EffectPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::EffectPlanCommandID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanCommandMDT:
      return extxml_uci::type::EffectPlanCommandMDT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanCommandMT:
      return extxml_uci::type::EffectPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanCommandStatusMDT:
      return extxml_uci::type::EffectPlanCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanCommandStatusMT:
      return extxml_uci::type::EffectPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanConstraintType:
      return extxml_uci::type::EffectPlanConstraintType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanExecutionStateType:
      return extxml_uci::type::EffectPlanExecutionStateType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanExecutionStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanExecutionStatusMDT:
      return extxml_uci::type::EffectPlanExecutionStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanExecutionStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanExecutionStatusMT:
      return extxml_uci::type::EffectPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanID_Type:
      return extxml_uci::type::EffectPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::EffectPlanID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanInputsType:
      return extxml_uci::type::EffectPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanInvalidType:
      return extxml_uci::type::EffectPlanInvalidType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanInvalidType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanMDT:
      return extxml_uci::type::EffectPlanMDT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanMT:
      return extxml_uci::type::EffectPlanMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanningResultType:
      return extxml_uci::type::EffectPlanningResultType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanningResultType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanningStatusMDT:
      return extxml_uci::type::EffectPlanningStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanningStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanningStatusMT:
      return extxml_uci::type::EffectPlanningStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanningStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanPartsType:
      return extxml_uci::type::EffectPlanPartsType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanPartsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanProcessDescriptionType:
      return extxml_uci::type::EffectPlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanProcessType:
      return extxml_uci::type::EffectPlanProcessType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanProcessType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanStatusMDT:
      return extxml_uci::type::EffectPlanStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanStatusMT:
      return extxml_uci::type::EffectPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanType:
      return extxml_uci::type::EffectPlanType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanValidationCommandMDT:
      return extxml_uci::type::EffectPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanValidationCommandMT:
      return extxml_uci::type::EffectPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanValidationCommandStatusMDT:
      return extxml_uci::type::EffectPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanValidationCommandStatusMT:
      return extxml_uci::type::EffectPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanValidationID_Type:
      return extxml_uci::type::EffectPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::EffectPlanValidationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanValidationInputsType:
      return extxml_uci::type::EffectPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanValidationInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanValidationMDT:
      return extxml_uci::type::EffectPlanValidationMDT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanValidationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectPlanValidationMT:
      return extxml_uci::type::EffectPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanValidationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectStatusMDT:
      return extxml_uci::type::EffectStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::effectStatusMT:
      return extxml_uci::type::EffectStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::electronicProtectionOptionsDefaultType:
      return extxml_uci::type::ElectronicProtectionOptionsDefaultType::deserialize(propTree, dynamic_cast<uci::type::ElectronicProtectionOptionsDefaultType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::electronicProtectionOptionsEnabledType:
      return extxml_uci::type::ElectronicProtectionOptionsEnabledType::deserialize(propTree, dynamic_cast<uci::type::ElectronicProtectionOptionsEnabledType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::electronicProtectionOptionsEnableType:
      return extxml_uci::type::ElectronicProtectionOptionsEnableType::deserialize(propTree, dynamic_cast<uci::type::ElectronicProtectionOptionsEnableType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::electronicProtectionOptionsSupportedType:
      return extxml_uci::type::ElectronicProtectionOptionsSupportedType::deserialize(propTree, dynamic_cast<uci::type::ElectronicProtectionOptionsSupportedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elementDetailsType:
      return extxml_uci::type::ElementDetailsType::deserialize(propTree, dynamic_cast<uci::type::ElementDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elementSetCloudType:
      return extxml_uci::type::ElementSetCloudType::deserialize(propTree, dynamic_cast<uci::type::ElementSetCloudType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elevationRequestMDT:
      return extxml_uci::type::ElevationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ElevationRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elevationRequestMT:
      return extxml_uci::type::ElevationRequestMT::deserialize(propTree, dynamic_cast<uci::type::ElevationRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elevationRequestPointsType:
      return extxml_uci::type::ElevationRequestPointsType::deserialize(propTree, dynamic_cast<uci::type::ElevationRequestPointsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elevationRequestStatusMDT:
      return extxml_uci::type::ElevationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ElevationRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elevationRequestStatusMT:
      return extxml_uci::type::ElevationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ElevationRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elevationVisibilityPointInfoFromSetType:
      return extxml_uci::type::ElevationVisibilityPointInfoFromSetType::deserialize(propTree, dynamic_cast<uci::type::ElevationVisibilityPointInfoFromSetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elevationVisibilityPointInfoSetType:
      return extxml_uci::type::ElevationVisibilityPointInfoSetType::deserialize(propTree, dynamic_cast<uci::type::ElevationVisibilityPointInfoSetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elevationVisibilityPointInfoType:
      return extxml_uci::type::ElevationVisibilityPointInfoType::deserialize(propTree, dynamic_cast<uci::type::ElevationVisibilityPointInfoType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elevationVisibilityRequestMDT:
      return extxml_uci::type::ElevationVisibilityRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ElevationVisibilityRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elevationVisibilityRequestMT:
      return extxml_uci::type::ElevationVisibilityRequestMT::deserialize(propTree, dynamic_cast<uci::type::ElevationVisibilityRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elevationVisibilityRequestPointsType:
      return extxml_uci::type::ElevationVisibilityRequestPointsType::deserialize(propTree, dynamic_cast<uci::type::ElevationVisibilityRequestPointsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elevationVisibilityRequestStatusMDT:
      return extxml_uci::type::ElevationVisibilityRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ElevationVisibilityRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::elevationVisibilityRequestStatusMT:
      return extxml_uci::type::ElevationVisibilityRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ElevationVisibilityRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::ellipseType:
      return extxml_uci::type::EllipseType::deserialize(propTree, dynamic_cast<uci::type::EllipseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::ellipsoidType:
      return extxml_uci::type::EllipsoidType::deserialize(propTree, dynamic_cast<uci::type::EllipsoidType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emconConstraintType:
      return extxml_uci::type::EmconConstraintType::deserialize(propTree, dynamic_cast<uci::type::EmconConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emconERP_Type:
      return extxml_uci::type::EmconERP_Type::deserialize(propTree, dynamic_cast<uci::type::EmconERP_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emconOverrideType:
      return extxml_uci::type::EmconOverrideType::deserialize(propTree, dynamic_cast<uci::type::EmconOverrideType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emconSettingType:
      return extxml_uci::type::EmconSettingType::deserialize(propTree, dynamic_cast<uci::type::EmconSettingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emergencyReferenceOpPointCategoriesType:
      return extxml_uci::type::EmergencyReferenceOpPointCategoriesType::deserialize(propTree, dynamic_cast<uci::type::EmergencyReferenceOpPointCategoriesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emergencyReferenceOpPointType:
      return extxml_uci::type::EmergencyReferenceOpPointType::deserialize(propTree, dynamic_cast<uci::type::EmergencyReferenceOpPointType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emergencyReferencePointType:
      return extxml_uci::type::EmergencyReferencePointType::deserialize(propTree, dynamic_cast<uci::type::EmergencyReferencePointType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emitterEntryType:
      return extxml_uci::type::EmitterEntryType::deserialize(propTree, dynamic_cast<uci::type::EmitterEntryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emitterFixedPositionType:
      return extxml_uci::type::EmitterFixedPositionType::deserialize(propTree, dynamic_cast<uci::type::EmitterFixedPositionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emitterFunctionType:
      return extxml_uci::type::EmitterFunctionType::deserialize(propTree, dynamic_cast<uci::type::EmitterFunctionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emitterIdentityCategoryType:
      return extxml_uci::type::EmitterIdentityCategoryType::deserialize(propTree, dynamic_cast<uci::type::EmitterIdentityCategoryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emitterIdentityConfidenceType:
      return extxml_uci::type::EmitterIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::EmitterIdentityConfidenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emitterIdentityType:
      return extxml_uci::type::EmitterIdentityType::deserialize(propTree, dynamic_cast<uci::type::EmitterIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emitterMultipleType:
      return extxml_uci::type::EmitterMultipleType::deserialize(propTree, dynamic_cast<uci::type::EmitterMultipleType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emitterSourceID_ChoiceType:
      return extxml_uci::type::EmitterSourceID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::EmitterSourceID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emitterTargetLocationDataType:
      return extxml_uci::type::EmitterTargetLocationDataType::deserialize(propTree, dynamic_cast<uci::type::EmitterTargetLocationDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emitterUncertaintyChoiceType:
      return extxml_uci::type::EmitterUncertaintyChoiceType::deserialize(propTree, dynamic_cast<uci::type::EmitterUncertaintyChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emitterUncertaintyType:
      return extxml_uci::type::EmitterUncertaintyType::deserialize(propTree, dynamic_cast<uci::type::EmitterUncertaintyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::emitterWaveformDataType:
      return extxml_uci::type::EmitterWaveformDataType::deserialize(propTree, dynamic_cast<uci::type::EmitterWaveformDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::endpointReferenceType:
      return extxml_uci::type::EndpointReferenceType::deserialize(propTree, dynamic_cast<uci::type::EndpointReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::endPointType:
      return extxml_uci::type::EndPointType::deserialize(propTree, dynamic_cast<uci::type::EndPointType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::enduranceBaseType:
      return extxml_uci::type::EnduranceBaseType::deserialize(propTree, dynamic_cast<uci::type::EnduranceBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::enduranceFootprintType:
      return extxml_uci::type::EnduranceFootprintType::deserialize(propTree, dynamic_cast<uci::type::EnduranceFootprintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::enduranceMultiStandardType:
      return extxml_uci::type::EnduranceMultiStandardType::deserialize(propTree, dynamic_cast<uci::type::EnduranceMultiStandardType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::enduranceRemainingType:
      return extxml_uci::type::EnduranceRemainingType::deserialize(propTree, dynamic_cast<uci::type::EnduranceRemainingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::enduranceType:
      return extxml_uci::type::EnduranceType::deserialize(propTree, dynamic_cast<uci::type::EnduranceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityAssignmentMemberType:
      return extxml_uci::type::EntityAssignmentMemberType::deserialize(propTree, dynamic_cast<uci::type::EntityAssignmentMemberType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityAssignmentType:
      return extxml_uci::type::EntityAssignmentType::deserialize(propTree, dynamic_cast<uci::type::EntityAssignmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityCapabilitySourceType:
      return extxml_uci::type::EntityCapabilitySourceType::deserialize(propTree, dynamic_cast<uci::type::EntityCapabilitySourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityCharacteristicType:
      return extxml_uci::type::EntityCharacteristicType::deserialize(propTree, dynamic_cast<uci::type::EntityCharacteristicType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityComparativeType:
      return extxml_uci::type::EntityComparativeType::deserialize(propTree, dynamic_cast<uci::type::EntityComparativeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityConfirmationMDT:
      return extxml_uci::type::EntityConfirmationMDT::deserialize(propTree, dynamic_cast<uci::type::EntityConfirmationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityConfirmationMT:
      return extxml_uci::type::EntityConfirmationMT::deserialize(propTree, dynamic_cast<uci::type::EntityConfirmationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityConfirmationRequestMDT:
      return extxml_uci::type::EntityConfirmationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::EntityConfirmationRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityConfirmationRequestMT:
      return extxml_uci::type::EntityConfirmationRequestMT::deserialize(propTree, dynamic_cast<uci::type::EntityConfirmationRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityConfirmationRequestStatusMDT:
      return extxml_uci::type::EntityConfirmationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EntityConfirmationRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityConfirmationRequestStatusMT:
      return extxml_uci::type::EntityConfirmationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::EntityConfirmationRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityContributorID_ChoiceType:
      return extxml_uci::type::EntityContributorID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::EntityContributorID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityDataType:
      return extxml_uci::type::EntityDataType::deserialize(propTree, dynamic_cast<uci::type::EntityDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityDimensionEstimateType:
      return extxml_uci::type::EntityDimensionEstimateType::deserialize(propTree, dynamic_cast<uci::type::EntityDimensionEstimateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityDimensionEstimateUncertaintyType:
      return extxml_uci::type::EntityDimensionEstimateUncertaintyType::deserialize(propTree, dynamic_cast<uci::type::EntityDimensionEstimateUncertaintyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityEphemerisBasisChoiceType:
      return extxml_uci::type::EntityEphemerisBasisChoiceType::deserialize(propTree, dynamic_cast<uci::type::EntityEphemerisBasisChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityEphemerisRequestParametersType:
      return extxml_uci::type::EntityEphemerisRequestParametersType::deserialize(propTree, dynamic_cast<uci::type::EntityEphemerisRequestParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityExternalType:
      return extxml_uci::type::EntityExternalType::deserialize(propTree, dynamic_cast<uci::type::EntityExternalType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityFilterType:
      return extxml_uci::type::EntityFilterType::deserialize(propTree, dynamic_cast<uci::type::EntityFilterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityFusionSourceType:
      return extxml_uci::type::EntityFusionSourceType::deserialize(propTree, dynamic_cast<uci::type::EntityFusionSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityID_Type:
      return extxml_uci::type::EntityID_Type::deserialize(propTree, dynamic_cast<uci::type::EntityID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityIdentityChoiceType:
      return extxml_uci::type::EntityIdentityChoiceType::deserialize(propTree, dynamic_cast<uci::type::EntityIdentityChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityIdentityType:
      return extxml_uci::type::EntityIdentityType::deserialize(propTree, dynamic_cast<uci::type::EntityIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityLostMDT:
      return extxml_uci::type::EntityLostMDT::deserialize(propTree, dynamic_cast<uci::type::EntityLostMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityLostMT:
      return extxml_uci::type::EntityLostMT::deserialize(propTree, dynamic_cast<uci::type::EntityLostMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityLostSourceType:
      return extxml_uci::type::EntityLostSourceType::deserialize(propTree, dynamic_cast<uci::type::EntityLostSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementClearIdentityType:
      return extxml_uci::type::EntityManagementClearIdentityType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementClearIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementDownType:
      return extxml_uci::type::EntityManagementDownType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementDownType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementDropRestrictType:
      return extxml_uci::type::EntityManagementDropRestrictType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementDropRestrictType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementDropType:
      return extxml_uci::type::EntityManagementDropType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementDropType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementKinematicsType:
      return extxml_uci::type::EntityManagementKinematicsType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementKinematicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementMergeType:
      return extxml_uci::type::EntityManagementMergeType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementMergeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementProposeCorrelationType:
      return extxml_uci::type::EntityManagementProposeCorrelationType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementProposeCorrelationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementRequestEntityStatusType:
      return extxml_uci::type::EntityManagementRequestEntityStatusType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementRequestEntityStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementRequestMDT:
      return extxml_uci::type::EntityManagementRequestMDT::deserialize(propTree, dynamic_cast<uci::type::EntityManagementRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementRequestMT:
      return extxml_uci::type::EntityManagementRequestMT::deserialize(propTree, dynamic_cast<uci::type::EntityManagementRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementRequestStatusMDT:
      return extxml_uci::type::EntityManagementRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EntityManagementRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementRequestStatusMT:
      return extxml_uci::type::EntityManagementRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::EntityManagementRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementRequestType:
      return extxml_uci::type::EntityManagementRequestType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementSetActivityByType:
      return extxml_uci::type::EntityManagementSetActivityByType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementSetActivityByType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementSetCapabilityType:
      return extxml_uci::type::EntityManagementSetCapabilityType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementSetCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementSetEnduranceType:
      return extxml_uci::type::EntityManagementSetEnduranceType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementSetEnduranceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementSetFusionEligibilityType:
      return extxml_uci::type::EntityManagementSetFusionEligibilityType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementSetFusionEligibilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementSetIdentityType:
      return extxml_uci::type::EntityManagementSetIdentityType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementSetIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementSetLink16MetadataType:
      return extxml_uci::type::EntityManagementSetLink16MetadataType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementSetLink16MetadataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementSetModeType:
      return extxml_uci::type::EntityManagementSetModeType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementSetModeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementSetPlatformStatusType:
      return extxml_uci::type::EntityManagementSetPlatformStatusType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementSetPlatformStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementSetSignalSummaryType:
      return extxml_uci::type::EntityManagementSetSignalSummaryType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementSetSignalSummaryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementSetStrengthType:
      return extxml_uci::type::EntityManagementSetStrengthType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementSetStrengthType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementSetVoiceControlType:
      return extxml_uci::type::EntityManagementSetVoiceControlType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementSetVoiceControlType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementSplitType:
      return extxml_uci::type::EntityManagementSplitType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementSplitType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityManagementSwapType:
      return extxml_uci::type::EntityManagementSwapType::deserialize(propTree, dynamic_cast<uci::type::EntityManagementSwapType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityMDT:
      return extxml_uci::type::EntityMDT::deserialize(propTree, dynamic_cast<uci::type::EntityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityMetadataMDT:
      return extxml_uci::type::EntityMetadataMDT::deserialize(propTree, dynamic_cast<uci::type::EntityMetadataMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityMetadataMT:
      return extxml_uci::type::EntityMetadataMT::deserialize(propTree, dynamic_cast<uci::type::EntityMetadataMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityMetadataPET:
      return extxml_uci::type::EntityMetadataPET::deserialize(propTree, dynamic_cast<uci::type::EntityMetadataPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityMetadataType:
      return extxml_uci::type::EntityMetadataType::deserialize(propTree, dynamic_cast<uci::type::EntityMetadataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityMT:
      return extxml_uci::type::EntityMT::deserialize(propTree, dynamic_cast<uci::type::EntityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityNominationResultType:
      return extxml_uci::type::EntityNominationResultType::deserialize(propTree, dynamic_cast<uci::type::EntityNominationResultType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityNotificationMDT:
      return extxml_uci::type::EntityNotificationMDT::deserialize(propTree, dynamic_cast<uci::type::EntityNotificationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityNotificationMT:
      return extxml_uci::type::EntityNotificationMT::deserialize(propTree, dynamic_cast<uci::type::EntityNotificationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalCSO_ID_Type:
      return extxml_uci::type::EntityOrbitalCSO_ID_Type::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalCSO_ID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalCSO_MDT:
      return extxml_uci::type::EntityOrbitalCSO_MDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalCSO_MDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalCSO_MT:
      return extxml_uci::type::EntityOrbitalCSO_MT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalCSO_MT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalElementSetID_Type:
      return extxml_uci::type::EntityOrbitalElementSetID_Type::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalElementSetMDT:
      return extxml_uci::type::EntityOrbitalElementSetMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalElementSetMT:
      return extxml_uci::type::EntityOrbitalElementSetMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalElementSetRequestMDT:
      return extxml_uci::type::EntityOrbitalElementSetRequestMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalElementSetRequestMT:
      return extxml_uci::type::EntityOrbitalElementSetRequestMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalElementSetRequestStatusMDT:
      return extxml_uci::type::EntityOrbitalElementSetRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalElementSetRequestStatusMT:
      return extxml_uci::type::EntityOrbitalElementSetRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalElementSetType:
      return extxml_uci::type::EntityOrbitalElementSetType::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalEphemerisID_Type:
      return extxml_uci::type::EntityOrbitalEphemerisID_Type::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalEphemerisMDT:
      return extxml_uci::type::EntityOrbitalEphemerisMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalEphemerisMT:
      return extxml_uci::type::EntityOrbitalEphemerisMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalEphemerisRequestMDT:
      return extxml_uci::type::EntityOrbitalEphemerisRequestMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalEphemerisRequestMT:
      return extxml_uci::type::EntityOrbitalEphemerisRequestMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalEphemerisRequestStatusMDT:
      return extxml_uci::type::EntityOrbitalEphemerisRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalEphemerisRequestStatusMT:
      return extxml_uci::type::EntityOrbitalEphemerisRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalEphemerisType:
      return extxml_uci::type::EntityOrbitalEphemerisType::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalManeuverMDT:
      return extxml_uci::type::EntityOrbitalManeuverMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalManeuverMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalManeuverMT:
      return extxml_uci::type::EntityOrbitalManeuverMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalManeuverMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalVCM_ID_Type:
      return extxml_uci::type::EntityOrbitalVCM_ID_Type::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_ID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalVCM_MDT:
      return extxml_uci::type::EntityOrbitalVCM_MDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_MDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalVCM_MT:
      return extxml_uci::type::EntityOrbitalVCM_MT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_MT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalVCM_RequestMDT:
      return extxml_uci::type::EntityOrbitalVCM_RequestMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_RequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalVCM_RequestMT:
      return extxml_uci::type::EntityOrbitalVCM_RequestMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_RequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalVCM_RequestStatusMDT:
      return extxml_uci::type::EntityOrbitalVCM_RequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_RequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalVCM_RequestStatusMT:
      return extxml_uci::type::EntityOrbitalVCM_RequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_RequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityOrbitalVCM_Type:
      return extxml_uci::type::EntityOrbitalVCM_Type::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityPositionType:
      return extxml_uci::type::EntityPositionType::deserialize(propTree, dynamic_cast<uci::type::EntityPositionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityPropagationMDT:
      return extxml_uci::type::EntityPropagationMDT::deserialize(propTree, dynamic_cast<uci::type::EntityPropagationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityPropagationMT:
      return extxml_uci::type::EntityPropagationMT::deserialize(propTree, dynamic_cast<uci::type::EntityPropagationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityRemoveInfoType:
      return extxml_uci::type::EntityRemoveInfoType::deserialize(propTree, dynamic_cast<uci::type::EntityRemoveInfoType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entitySignalSummaryType:
      return extxml_uci::type::EntitySignalSummaryType::deserialize(propTree, dynamic_cast<uci::type::EntitySignalSummaryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entitySourceIdentifierType:
      return extxml_uci::type::EntitySourceIdentifierType::deserialize(propTree, dynamic_cast<uci::type::EntitySourceIdentifierType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entitySourceSpecificDataType:
      return extxml_uci::type::EntitySourceSpecificDataType::deserialize(propTree, dynamic_cast<uci::type::EntitySourceSpecificDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entitySourceType:
      return extxml_uci::type::EntitySourceType::deserialize(propTree, dynamic_cast<uci::type::EntitySourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::entityStalenessThresholdsType:
      return extxml_uci::type::EntityStalenessThresholdsType::deserialize(propTree, dynamic_cast<uci::type::EntityStalenessThresholdsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::environmentIdentityConfidenceType:
      return extxml_uci::type::EnvironmentIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::EnvironmentIdentityConfidenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::environmentIdentityType:
      return extxml_uci::type::EnvironmentIdentityType::deserialize(propTree, dynamic_cast<uci::type::EnvironmentIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_CodesType:
      return extxml_uci::type::EOB_CodesType::deserialize(propTree, dynamic_cast<uci::type::EOB_CodesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_CorrelatedToType:
      return extxml_uci::type::EOB_CorrelatedToType::deserialize(propTree, dynamic_cast<uci::type::EOB_CorrelatedToType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_CorrelationRecordID_Type:
      return extxml_uci::type::EOB_CorrelationRecordID_Type::deserialize(propTree, dynamic_cast<uci::type::EOB_CorrelationRecordID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_CorrelationRecordMDT:
      return extxml_uci::type::EOB_CorrelationRecordMDT::deserialize(propTree, dynamic_cast<uci::type::EOB_CorrelationRecordMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_CorrelationRecordMT:
      return extxml_uci::type::EOB_CorrelationRecordMT::deserialize(propTree, dynamic_cast<uci::type::EOB_CorrelationRecordMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_CorrelationRecordType:
      return extxml_uci::type::EOB_CorrelationRecordType::deserialize(propTree, dynamic_cast<uci::type::EOB_CorrelationRecordType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_EmitterID_Type:
      return extxml_uci::type::EOB_EmitterID_Type::deserialize(propTree, dynamic_cast<uci::type::EOB_EmitterID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_EmitterIdentityType:
      return extxml_uci::type::EOB_EmitterIdentityType::deserialize(propTree, dynamic_cast<uci::type::EOB_EmitterIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_EmitterModeID_Type:
      return extxml_uci::type::EOB_EmitterModeID_Type::deserialize(propTree, dynamic_cast<uci::type::EOB_EmitterModeID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_EmitterModeType:
      return extxml_uci::type::EOB_EmitterModeType::deserialize(propTree, dynamic_cast<uci::type::EOB_EmitterModeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_EmitterType:
      return extxml_uci::type::EOB_EmitterType::deserialize(propTree, dynamic_cast<uci::type::EOB_EmitterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_EquipmentIdentityType:
      return extxml_uci::type::EOB_EquipmentIdentityType::deserialize(propTree, dynamic_cast<uci::type::EOB_EquipmentIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_EquipmentRecordType:
      return extxml_uci::type::EOB_EquipmentRecordType::deserialize(propTree, dynamic_cast<uci::type::EOB_EquipmentRecordType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_EquipmentType:
      return extxml_uci::type::EOB_EquipmentType::deserialize(propTree, dynamic_cast<uci::type::EOB_EquipmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_FixedPositionType:
      return extxml_uci::type::EOB_FixedPositionType::deserialize(propTree, dynamic_cast<uci::type::EOB_FixedPositionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_IdentityBaseType:
      return extxml_uci::type::EOB_IdentityBaseType::deserialize(propTree, dynamic_cast<uci::type::EOB_IdentityBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_IdentityConfidenceType:
      return extxml_uci::type::EOB_IdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::EOB_IdentityConfidenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_IdentityType:
      return extxml_uci::type::EOB_IdentityType::deserialize(propTree, dynamic_cast<uci::type::EOB_IdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_RecordID_Type:
      return extxml_uci::type::EOB_RecordID_Type::deserialize(propTree, dynamic_cast<uci::type::EOB_RecordID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_RecordMarkedType:
      return extxml_uci::type::EOB_RecordMarkedType::deserialize(propTree, dynamic_cast<uci::type::EOB_RecordMarkedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_SignalType:
      return extxml_uci::type::EOB_SignalType::deserialize(propTree, dynamic_cast<uci::type::EOB_SignalType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_SiteIdentityType:
      return extxml_uci::type::EOB_SiteIdentityType::deserialize(propTree, dynamic_cast<uci::type::EOB_SiteIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eOB_SitePIN_Type:
      return extxml_uci::type::EOB_SitePIN_Type::deserialize(propTree, dynamic_cast<uci::type::EOB_SitePIN_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::ephemerisOrbitalModelType:
      return extxml_uci::type::EphemerisOrbitalModelType::deserialize(propTree, dynamic_cast<uci::type::EphemerisOrbitalModelType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::ephemerisPropagatorChoiceType:
      return extxml_uci::type::EphemerisPropagatorChoiceType::deserialize(propTree, dynamic_cast<uci::type::EphemerisPropagatorChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::equatorialCoordinatesCovarianceType:
      return extxml_uci::type::EquatorialCoordinatesCovarianceType::deserialize(propTree, dynamic_cast<uci::type::EquatorialCoordinatesCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::equatorialCoordinatesType:
      return extxml_uci::type::EquatorialCoordinatesType::deserialize(propTree, dynamic_cast<uci::type::EquatorialCoordinatesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::equatorialKinematicsType:
      return extxml_uci::type::EquatorialKinematicsType::deserialize(propTree, dynamic_cast<uci::type::EquatorialKinematicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_AcquisitionTargetType:
      return extxml_uci::type::ESM_AcquisitionTargetType::deserialize(propTree, dynamic_cast<uci::type::ESM_AcquisitionTargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_ActivityCommandType:
      return extxml_uci::type::ESM_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::ESM_ActivityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_ActivityMDT:
      return extxml_uci::type::ESM_ActivityMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_ActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_ActivityMT:
      return extxml_uci::type::ESM_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::ESM_ActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_ActivityType:
      return extxml_uci::type::ESM_ActivityType::deserialize(propTree, dynamic_cast<uci::type::ESM_ActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_BinGroupActivationType:
      return extxml_uci::type::ESM_BinGroupActivationType::deserialize(propTree, dynamic_cast<uci::type::ESM_BinGroupActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_BinPrecedenceType:
      return extxml_uci::type::ESM_BinPrecedenceType::deserialize(propTree, dynamic_cast<uci::type::ESM_BinPrecedenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_BinProfileType:
      return extxml_uci::type::ESM_BinProfileType::deserialize(propTree, dynamic_cast<uci::type::ESM_BinProfileType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_BinType:
      return extxml_uci::type::ESM_BinType::deserialize(propTree, dynamic_cast<uci::type::ESM_BinType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_CapabilityCommandType:
      return extxml_uci::type::ESM_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_CapabilityMDT:
      return extxml_uci::type::ESM_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_CapabilityMT:
      return extxml_uci::type::ESM_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_CapabilityOptionsType:
      return extxml_uci::type::ESM_CapabilityOptionsType::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityOptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_CapabilityStatusMDT:
      return extxml_uci::type::ESM_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_CapabilityStatusMT:
      return extxml_uci::type::ESM_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_CapabilityType:
      return extxml_uci::type::ESM_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_ChangeDwellType:
      return extxml_uci::type::ESM_ChangeDwellType::deserialize(propTree, dynamic_cast<uci::type::ESM_ChangeDwellType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_ChangeGeolocationType:
      return extxml_uci::type::ESM_ChangeGeolocationType::deserialize(propTree, dynamic_cast<uci::type::ESM_ChangeGeolocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_CommandMDT:
      return extxml_uci::type::ESM_CommandMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_CommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_CommandMT:
      return extxml_uci::type::ESM_CommandMT::deserialize(propTree, dynamic_cast<uci::type::ESM_CommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_CommandResponseType:
      return extxml_uci::type::ESM_CommandResponseType::deserialize(propTree, dynamic_cast<uci::type::ESM_CommandResponseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_CommandStatusMDT:
      return extxml_uci::type::ESM_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_CommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_CommandStatusMT:
      return extxml_uci::type::ESM_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ESM_CommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_CommandType:
      return extxml_uci::type::ESM_CommandType::deserialize(propTree, dynamic_cast<uci::type::ESM_CommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_ConsentRequestMDT:
      return extxml_uci::type::ESM_ConsentRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_ConsentRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_ConsentRequestMT:
      return extxml_uci::type::ESM_ConsentRequestMT::deserialize(propTree, dynamic_cast<uci::type::ESM_ConsentRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_ConsentRequestStatusMDT:
      return extxml_uci::type::ESM_ConsentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_ConsentRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_ConsentRequestStatusMT:
      return extxml_uci::type::ESM_ConsentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ESM_ConsentRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_ConsentRequestType:
      return extxml_uci::type::ESM_ConsentRequestType::deserialize(propTree, dynamic_cast<uci::type::ESM_ConsentRequestType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_DwellCoverageType:
      return extxml_uci::type::ESM_DwellCoverageType::deserialize(propTree, dynamic_cast<uci::type::ESM_DwellCoverageType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_LocationType:
      return extxml_uci::type::ESM_LocationType::deserialize(propTree, dynamic_cast<uci::type::ESM_LocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_PerformanceProfileType:
      return extxml_uci::type::ESM_PerformanceProfileType::deserialize(propTree, dynamic_cast<uci::type::ESM_PerformanceProfileType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_ProfileEditType:
      return extxml_uci::type::ESM_ProfileEditType::deserialize(propTree, dynamic_cast<uci::type::ESM_ProfileEditType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_ProfileEntryType:
      return extxml_uci::type::ESM_ProfileEntryType::deserialize(propTree, dynamic_cast<uci::type::ESM_ProfileEntryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_ReceiveDwellType:
      return extxml_uci::type::ESM_ReceiveDwellType::deserialize(propTree, dynamic_cast<uci::type::ESM_ReceiveDwellType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::eSM_SettingsCommandMDT:
      return extxml_uci::type::ESM_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    default:
      return false;
  }
}

} // namespace base

} // namespace extxml_uci

