/** @file ExternalizerRead.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:20 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/base/ExternalizerRead.h"

#include <exception>
#include <istream>
#include <sstream>
#include <string>

#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/xml_parser.hpp>

#include "extxml_uci/base/ExternalizerRead1.h"
#include "extxml_uci/base/ExternalizerRead10.h"
#include "extxml_uci/base/ExternalizerRead2.h"
#include "extxml_uci/base/ExternalizerRead3.h"
#include "extxml_uci/base/ExternalizerRead4.h"
#include "extxml_uci/base/ExternalizerRead5.h"
#include "extxml_uci/base/ExternalizerRead6.h"
#include "extxml_uci/base/ExternalizerRead7.h"
#include "extxml_uci/base/ExternalizerRead8.h"
#include "extxml_uci/base/ExternalizerRead9.h"
#include "uci/base/Accessor.h"
#include "uci/base/UCIException.h"

/**  */
namespace extxml_uci {

/** The namespace in which all base data types are declared */
namespace base {

bool ExternalizerRead::read(std::istream& istream, uci::base::Accessor& accessor) {
  std::string nodeName;
  std::string nsPrefix;
  try {
    boost::property_tree::ptree propTree;
    boost::property_tree::xml_parser::read_xml(istream, propTree, boost::property_tree::xml_parser::no_comments);
    bool externalized{extxml_uci::base::ExternalizerRead1::read(propTree, accessor, nodeName, nsPrefix)};
    if (externalized) {
      return externalized;
    }
    externalized = extxml_uci::base::ExternalizerRead2::read(propTree, accessor, nodeName, nsPrefix);
    if (externalized) {
      return externalized;
    }
    externalized = extxml_uci::base::ExternalizerRead3::read(propTree, accessor, nodeName, nsPrefix);
    if (externalized) {
      return externalized;
    }
    externalized = extxml_uci::base::ExternalizerRead4::read(propTree, accessor, nodeName, nsPrefix);
    if (externalized) {
      return externalized;
    }
    externalized = extxml_uci::base::ExternalizerRead5::read(propTree, accessor, nodeName, nsPrefix);
    if (externalized) {
      return externalized;
    }
    externalized = extxml_uci::base::ExternalizerRead6::read(propTree, accessor, nodeName, nsPrefix);
    if (externalized) {
      return externalized;
    }
    externalized = extxml_uci::base::ExternalizerRead7::read(propTree, accessor, nodeName, nsPrefix);
    if (externalized) {
      return externalized;
    }
    externalized = extxml_uci::base::ExternalizerRead8::read(propTree, accessor, nodeName, nsPrefix);
    if (externalized) {
      return externalized;
    }
    externalized = extxml_uci::base::ExternalizerRead9::read(propTree, accessor, nodeName, nsPrefix);
    if (externalized) {
      return externalized;
    }
    externalized = extxml_uci::base::ExternalizerRead10::read(propTree, accessor, nodeName, nsPrefix);
    return externalized;
  } catch (const std::exception& e) {
    std::ostringstream errMsg;
    errMsg << "Error occurred during externalizer read of accessor " << nodeName << " (" << e.what() << ")";
    throw uci::base::UCIException(errMsg);
  }
}

} // namespace base

} // namespace extxml_uci

