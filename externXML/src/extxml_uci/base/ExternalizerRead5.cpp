/** @file ExternalizerRead5.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:20 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/base/ExternalizerRead5.h"

#include <string>

#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/MSTGTA_RevA_Type.h"
#include "extxml_uci/type/MSTGTA_Type.h"
#include "extxml_uci/type/MTI_ActivityStatusBaseType.h"
#include "extxml_uci/type/MTI_ActivityStatusDetailType.h"
#include "extxml_uci/type/MTI_OpZoneFilterAreaType.h"
#include "extxml_uci/type/MTI_PredictedActivityDetailType.h"
#include "extxml_uci/type/MTI_STANAG_4607_OpZoneFilterAreaType.h"
#include "extxml_uci/type/MTI_TargetClassType.h"
#include "extxml_uci/type/MissionPlanExecutionStateType.h"
#include "extxml_uci/type/MissionPlanExecutionStatusMDT.h"
#include "extxml_uci/type/MissionPlanExecutionStatusMT.h"
#include "extxml_uci/type/MissionPlanID_Type.h"
#include "extxml_uci/type/MissionPlanInputsType.h"
#include "extxml_uci/type/MissionPlanMDT.h"
#include "extxml_uci/type/MissionPlanMT.h"
#include "extxml_uci/type/MissionPlanMetricsReportID_Type.h"
#include "extxml_uci/type/MissionPlanMetricsReportMDT.h"
#include "extxml_uci/type/MissionPlanMetricsReportMT.h"
#include "extxml_uci/type/MissionPlanMetricsReportRequestMDT.h"
#include "extxml_uci/type/MissionPlanMetricsReportRequestMT.h"
#include "extxml_uci/type/MissionPlanMetricsReportRequestStatusMDT.h"
#include "extxml_uci/type/MissionPlanMetricsReportRequestStatusMT.h"
#include "extxml_uci/type/MissionPlanNavigationType.h"
#include "extxml_uci/type/MissionPlanProcessDescriptionType.h"
#include "extxml_uci/type/MissionPlanProcessType.h"
#include "extxml_uci/type/MissionPlanStatusMDT.h"
#include "extxml_uci/type/MissionPlanStatusMT.h"
#include "extxml_uci/type/MissionPlanStatusType.h"
#include "extxml_uci/type/MissionPlanSubplanActivationType.h"
#include "extxml_uci/type/MissionPlanValidationCommandMDT.h"
#include "extxml_uci/type/MissionPlanValidationCommandMT.h"
#include "extxml_uci/type/MissionPlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/MissionPlanValidationCommandStatusMT.h"
#include "extxml_uci/type/MissionPlanValidationID_Type.h"
#include "extxml_uci/type/MissionPlanValidationInputsType.h"
#include "extxml_uci/type/MissionPlanValidationMDT.h"
#include "extxml_uci/type/MissionPlanValidationMT.h"
#include "extxml_uci/type/MissionPlanningAutonomyResponseChoiceType.h"
#include "extxml_uci/type/MissionPlanningAutonomySettingByResultType.h"
#include "extxml_uci/type/MissionPlanningAutonomySettingType.h"
#include "extxml_uci/type/MissionPlanningByResultAutonomousActionType.h"
#include "extxml_uci/type/MissionPlanningOrchestrationID_Type.h"
#include "extxml_uci/type/MissionPlanningOrchestrationMDT.h"
#include "extxml_uci/type/MissionPlanningOrchestrationMT.h"
#include "extxml_uci/type/MissionRequirementStatusMDT.h"
#include "extxml_uci/type/MissionRequirementStatusMT.h"
#include "extxml_uci/type/MissionRequirementStatusType.h"
#include "extxml_uci/type/MissionTraceabilityType.h"
#include "extxml_uci/type/ModRateDataType.h"
#include "extxml_uci/type/ModeS_InterrogatorAddressType.h"
#include "extxml_uci/type/ModeS_OptionsType.h"
#include "extxml_uci/type/ModifyRF_ThreadInstanceType.h"
#include "extxml_uci/type/ModulationOnPulseDataBaseType.h"
#include "extxml_uci/type/ModulationOnPulseDataType.h"
#include "extxml_uci/type/ModulationParameterType.h"
#include "extxml_uci/type/MultiObjectType.h"
#include "extxml_uci/type/MultistaticEmitterDataID_Type.h"
#include "extxml_uci/type/MultistaticEmitterDataMDT.h"
#include "extxml_uci/type/MultistaticEmitterDataMT.h"
#include "extxml_uci/type/MultistaticEmitterID_Type.h"
#include "extxml_uci/type/MultistaticEmitterType.h"
#include "extxml_uci/type/MultistaticModeOptionsEmployedType.h"
#include "extxml_uci/type/MultistaticModeType.h"
#include "extxml_uci/type/MultistaticOptionsSupportedType.h"
#include "extxml_uci/type/MunitionInFlightType.h"
#include "extxml_uci/type/MustFlyLocationType.h"
#include "extxml_uci/type/MustFlyType.h"
#include "extxml_uci/type/MvAnomalyEventID_Type.h"
#include "extxml_uci/type/MvAnomalyEventMDT.h"
#include "extxml_uci/type/MvAnomalyEventMT.h"
#include "extxml_uci/type/MvObservationType.h"
#include "extxml_uci/type/NATO_Link1DataLinkIdentifierType.h"
#include "extxml_uci/type/NATO_Link1QuerySpecificDataType.h"
#include "extxml_uci/type/NED_ConeType.h"
#include "extxml_uci/type/NED_LOS_Type.h"
#include "extxml_uci/type/NITF_PackingPlanPET.h"
#include "extxml_uci/type/NITF_PackingPlanRevA_Type.h"
#include "extxml_uci/type/NITF_PackingPlanType.h"
#include "extxml_uci/type/NameValuePairType.h"
#include "extxml_uci/type/NameValuePairValueType.h"
#include "extxml_uci/type/NamedElementType.h"
#include "extxml_uci/type/Narrowband_SOI_ParamsType.h"
#include "extxml_uci/type/NavigationReportMDT.h"
#include "extxml_uci/type/NavigationReportMT.h"
#include "extxml_uci/type/NavigationSolutionCorrectionsType.h"
#include "extxml_uci/type/NavigationSourceType.h"
#include "extxml_uci/type/NavigationType.h"
#include "extxml_uci/type/NetworkDataRateRangeType.h"
#include "extxml_uci/type/NetworkEndpointType.h"
#include "extxml_uci/type/NetworkLinkID_Type.h"
#include "extxml_uci/type/NextPathSegmentType.h"
#include "extxml_uci/type/NormalizationTableType.h"
#include "extxml_uci/type/NotificationBaseType.h"
#include "extxml_uci/type/NotificationID_Type.h"
#include "extxml_uci/type/NotificationSourceType.h"
#include "extxml_uci/type/OB_CorrelationInputType.h"
#include "extxml_uci/type/OB_SensorID_Type.h"
#include "extxml_uci/type/OB_SensorIdentityType.h"
#include "extxml_uci/type/OB_SensorType.h"
#include "extxml_uci/type/ObjectCorrelationType.h"
#include "extxml_uci/type/ObjectInstanceDamageEstimateType.h"
#include "extxml_uci/type/ObjectKinematicsChoiceType.h"
#include "extxml_uci/type/ObjectTypeDamageEstimateType.h"
#include "extxml_uci/type/ObservationCountsByHourType.h"
#include "extxml_uci/type/ObservationMeasurementID_Type.h"
#include "extxml_uci/type/ObservationMeasurementReportID_Type.h"
#include "extxml_uci/type/ObservationMeasurementReportMDT.h"
#include "extxml_uci/type/ObservationMeasurementReportMT.h"
#include "extxml_uci/type/ObservationMeasurementSourceType.h"
#include "extxml_uci/type/ObservationMeasurementType.h"
#include "extxml_uci/type/ObservationReportID_Type.h"
#include "extxml_uci/type/ObservationReportMDT.h"
#include "extxml_uci/type/ObservationReportMT.h"
#include "extxml_uci/type/ObservationsPerTrackLimitsType.h"
#include "extxml_uci/type/OffsetLocationErrorType.h"
#include "extxml_uci/type/OffsetLocationType.h"
#include "extxml_uci/type/OffsetTimeType.h"
#include "extxml_uci/type/OpBaseType.h"
#include "extxml_uci/type/OpConstraintScoreType.h"
#include "extxml_uci/type/OpConstraintWeightingType.h"
#include "extxml_uci/type/OpConstraintWeightingValueType.h"
#include "extxml_uci/type/OpDescriptionType.h"
#include "extxml_uci/type/OpID_ChoiceType.h"
#include "extxml_uci/type/OpInteractingAssetType.h"
#include "extxml_uci/type/OpLineID_Type.h"
#include "extxml_uci/type/OpLineMDT.h"
#include "extxml_uci/type/OpLineMT.h"
#include "extxml_uci/type/OpLineType.h"
#include "extxml_uci/type/OpNotificationEXT.h"
#include "extxml_uci/type/OpNotificationMDT.h"
#include "extxml_uci/type/OpNotificationMT.h"
#include "extxml_uci/type/OpPointBaseType.h"
#include "extxml_uci/type/OpPointCategoriesType.h"
#include "extxml_uci/type/OpPointCategoriesUniqueDataType.h"
#include "extxml_uci/type/OpPointChoiceType.h"
#include "extxml_uci/type/OpPointID_Type.h"
#include "extxml_uci/type/OpPointMDT.h"
#include "extxml_uci/type/OpPointMT.h"
#include "extxml_uci/type/OpPointPositionType.h"
#include "extxml_uci/type/OpPointReferenceType.h"
#include "extxml_uci/type/OpRoutingID_Type.h"
#include "extxml_uci/type/OpRoutingMDT.h"
#include "extxml_uci/type/OpRoutingMT.h"
#include "extxml_uci/type/OpVolumeID_Type.h"
#include "extxml_uci/type/OpVolumeKinematicsType.h"
#include "extxml_uci/type/OpVolumeMDT.h"
#include "extxml_uci/type/OpVolumeMT.h"
#include "extxml_uci/type/OpVolumeType.h"
#include "extxml_uci/type/OpZoneCategoryType.h"
#include "extxml_uci/type/OpZoneFilterAreaPET.h"
#include "extxml_uci/type/OpZoneID_Type.h"
#include "extxml_uci/type/OpZoneJammingType.h"
#include "extxml_uci/type/OpZoneMDT.h"
#include "extxml_uci/type/OpZoneMT.h"
#include "extxml_uci/type/OpZoneMissileDataType.h"
#include "extxml_uci/type/OpZoneNoFireType.h"
#include "extxml_uci/type/OpZoneNoFlyType.h"
#include "extxml_uci/type/OpZoneTrackAreaDomainSourceType.h"
#include "extxml_uci/type/OpZoneType.h"
#include "extxml_uci/type/OpZoneWeaponRestrictionType.h"
#include "extxml_uci/type/OpZoneWeatherType.h"
#include "extxml_uci/type/OpaqueCapabilityMDT.h"
#include "extxml_uci/type/OpaqueCapabilityMT.h"
#include "extxml_uci/type/OpaqueCapabilityStatusMDT.h"
#include "extxml_uci/type/OpaqueCapabilityStatusMT.h"
#include "extxml_uci/type/OpaqueCapabilityType.h"
#include "extxml_uci/type/OpaqueSettingsCommandMDT.h"
#include "extxml_uci/type/OpaqueSettingsCommandMT.h"
#include "extxml_uci/type/OpaqueSettingsCommandStatusMDT.h"
#include "extxml_uci/type/OpaqueSettingsCommandStatusMT.h"
#include "extxml_uci/type/OperationalScheduleType.h"
#include "extxml_uci/type/OperationsAreaDataLinkNativeFilterType.h"
#include "extxml_uci/type/OperatorActionAutonomousType.h"
#include "extxml_uci/type/OperatorActionCommandMDT.h"
#include "extxml_uci/type/OperatorActionCommandMT.h"
#include "extxml_uci/type/OperatorActionCommandStatusMDT.h"
#include "extxml_uci/type/OperatorActionCommandStatusMT.h"
#include "extxml_uci/type/OperatorActionControlledType.h"
#include "extxml_uci/type/OperatorActionID_Type.h"
#include "extxml_uci/type/OperatorActionType.h"
#include "extxml_uci/type/OperatorAnnotationID_Type.h"
#include "extxml_uci/type/OperatorAnnotationMDT.h"
#include "extxml_uci/type/OperatorAnnotationMT.h"
#include "extxml_uci/type/OperatorCommTerminalDesignationStatusType.h"
#include "extxml_uci/type/OperatorDefaultActionType.h"
#include "extxml_uci/type/OperatorGatewayDesignationStatusType.h"
#include "extxml_uci/type/OperatorID_Type.h"
#include "extxml_uci/type/OperatorLocationOfInterestClauseType.h"
#include "extxml_uci/type/OperatorLocationOfInterestComparativeType.h"
#include "extxml_uci/type/OperatorLocationOfInterestID_Type.h"
#include "extxml_uci/type/OperatorLocationOfInterestMDT.h"
#include "extxml_uci/type/OperatorLocationOfInterestMT.h"
#include "extxml_uci/type/OperatorMDT.h"
#include "extxml_uci/type/OperatorMT.h"
#include "extxml_uci/type/OperatorNameType.h"
#include "extxml_uci/type/OperatorNotificationAckID_Type.h"
#include "extxml_uci/type/OperatorNotificationAckMDT.h"
#include "extxml_uci/type/OperatorNotificationAckMT.h"
#include "extxml_uci/type/OperatorNotificationActionType.h"
#include "extxml_uci/type/OperatorNotificationID_Type.h"
#include "extxml_uci/type/OperatorNotificationMDT.h"
#include "extxml_uci/type/OperatorNotificationMT.h"
#include "extxml_uci/type/OperatorNotificationOverrideID_Type.h"
#include "extxml_uci/type/OperatorNotificationOverrideMDT.h"
#include "extxml_uci/type/OperatorNotificationOverrideMT.h"
#include "extxml_uci/type/OperatorRecommendationType.h"
#include "extxml_uci/type/OperatorRoleID_Type.h"
#include "extxml_uci/type/OperatorRoleMDT.h"
#include "extxml_uci/type/OperatorRoleMT.h"
#include "extxml_uci/type/OperatorRoleType.h"
#include "extxml_uci/type/OpsClockDayType.h"
#include "extxml_uci/type/OpticalCollectionConstraintsType.h"
#include "extxml_uci/type/OpticalImageParamsType.h"
#include "extxml_uci/type/OrbitAccuracyType.h"
#include "extxml_uci/type/OrbitActivityExecutionStatusType.h"
#include "extxml_uci/type/OrbitActivityKinematicReferenceType.h"
#include "extxml_uci/type/OrbitActivityMetricsType.h"
#include "extxml_uci/type/OrbitActivityPlanActivationType.h"
#include "extxml_uci/type/OrbitActivityPlanApprovalStatusMDT.h"
#include "extxml_uci/type/OrbitActivityPlanApprovalStatusMT.h"
#include "extxml_uci/type/OrbitActivityPlanCommandID_ChoiceType.h"
#include "extxml_uci/type/OrbitActivityPlanCommandID_Type.h"
#include "extxml_uci/type/OrbitActivityPlanCommandMDT.h"
#include "extxml_uci/type/OrbitActivityPlanCommandMT.h"
#include "extxml_uci/type/OrbitActivityPlanCommandStatusMDT.h"
#include "extxml_uci/type/OrbitActivityPlanCommandStatusMT.h"
#include "extxml_uci/type/OrbitActivityPlanConstraintType.h"
#include "extxml_uci/type/OrbitActivityPlanExecutionStateType.h"
#include "extxml_uci/type/OrbitActivityPlanExecutionStatusMDT.h"
#include "extxml_uci/type/OrbitActivityPlanExecutionStatusMT.h"
#include "extxml_uci/type/OrbitActivityPlanID_Type.h"
#include "extxml_uci/type/OrbitActivityPlanInputsType.h"
#include "extxml_uci/type/OrbitActivityPlanInvalidType.h"
#include "extxml_uci/type/OrbitActivityPlanMDT.h"
#include "extxml_uci/type/OrbitActivityPlanMT.h"
#include "extxml_uci/type/OrbitActivityPlanStatusMDT.h"
#include "extxml_uci/type/OrbitActivityPlanStatusMT.h"
#include "extxml_uci/type/OrbitActivityPlanStatusType.h"
#include "extxml_uci/type/OrbitActivityPlanType.h"
#include "extxml_uci/type/OrbitActivityPlanValidationCommandMDT.h"
#include "extxml_uci/type/OrbitActivityPlanValidationCommandMT.h"
#include "extxml_uci/type/OrbitActivityPlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/OrbitActivityPlanValidationCommandStatusMT.h"
#include "extxml_uci/type/OrbitActivityPlanValidationID_Type.h"
#include "extxml_uci/type/OrbitActivityPlanValidationInputsType.h"
#include "extxml_uci/type/OrbitActivityPlanValidationMDT.h"
#include "extxml_uci/type/OrbitActivityPlanValidationMT.h"
#include "extxml_uci/type/OrbitActivityType.h"
#include "extxml_uci/type/OrbitBreakupEventDetailsType.h"
#include "extxml_uci/type/OrbitChangeActivityMDT.h"
#include "extxml_uci/type/OrbitChangeActivityMT.h"
#include "extxml_uci/type/OrbitChangeActivityType.h"
#include "extxml_uci/type/OrbitChangeCapabilityMDT.h"
#include "extxml_uci/type/OrbitChangeCapabilityMT.h"
#include "extxml_uci/type/OrbitChangeCapabilityStatusMDT.h"
#include "extxml_uci/type/OrbitChangeCapabilityStatusMT.h"
#include "extxml_uci/type/OrbitChangeCapabilityType.h"
#include "extxml_uci/type/OrbitChangeChoiceType.h"
#include "extxml_uci/type/OrbitChangeMagnitudeType.h"
#include "extxml_uci/type/OrbitChangeTaskBaseType.h"
#include "extxml_uci/type/OrbitChangeTaskType.h"
#include "extxml_uci/type/OrbitCollisionType.h"
#include "extxml_uci/type/OrbitConflictObjectType.h"
#include "extxml_uci/type/OrbitConjunctionAssessmentID_Type.h"
#include "extxml_uci/type/OrbitConjunctionAssessmentMDT.h"
#include "extxml_uci/type/OrbitConjunctionAssessmentMT.h"
#include "extxml_uci/type/OrbitConjunctionAssessmentRequestMDT.h"
#include "extxml_uci/type/OrbitConjunctionAssessmentRequestMT.h"
#include "extxml_uci/type/OrbitConjunctionAssessmentRequestStatusMDT.h"
#include "extxml_uci/type/OrbitConjunctionAssessmentRequestStatusMT.h"
#include "extxml_uci/type/OrbitDurationType.h"
#include "extxml_uci/type/OrbitEstimationStartType.h"
#include "extxml_uci/type/OrbitExecutionPlanSetType.h"
#include "extxml_uci/type/OrbitGuidelineType.h"
#include "extxml_uci/type/OrbitKinematicsChangeSummaryType.h"
#include "extxml_uci/type/OrbitKinematicsParametersType.h"
#include "extxml_uci/type/OrbitKinematicsReferencesType.h"
#include "extxml_uci/type/OrbitKinematicsSequenceID_Type.h"
#include "extxml_uci/type/OrbitKinematicsSequenceInsertionType.h"
#include "extxml_uci/type/OrbitKinematicsSequenceModificationDetailsType.h"
#include "extxml_uci/type/OrbitKinematicsSequenceReplaceOrModifyChoiceType.h"
#include "extxml_uci/type/OrbitKinematicsSequenceTrimType.h"
#include "extxml_uci/type/OrbitKinematicsSequenceType.h"
#include "extxml_uci/type/OrbitKinematicsSetParametersType.h"
#include "extxml_uci/type/OrbitKinematicsSourceType.h"
#include "extxml_uci/type/OrbitKinematicsType.h"
#include "extxml_uci/type/OrbitManeuverSegmentID_Type.h"
#include "extxml_uci/type/OrbitManeuverSegmentMetricsType.h"
#include "extxml_uci/type/OrbitManeuverSegmentType.h"
#include "extxml_uci/type/OrbitManeuverSequenceMetricsType.h"
#include "extxml_uci/type/OrbitManeuverType.h"
#include "extxml_uci/type/OrbitMetricsID_Type.h"
#include "extxml_uci/type/OrbitMetricsMDT.h"
#include "extxml_uci/type/OrbitMetricsMT.h"
#include "extxml_uci/type/OrbitMetricsRequestMDT.h"
#include "extxml_uci/type/OrbitMetricsRequestMT.h"
#include "extxml_uci/type/OrbitMetricsRequestStatusMDT.h"
#include "extxml_uci/type/OrbitMetricsRequestStatusMT.h"
#include "extxml_uci/type/OrbitModificationDetailsType.h"
#include "extxml_uci/type/OrbitModificationRequestMDT.h"
#include "extxml_uci/type/OrbitModificationRequestMT.h"
#include "extxml_uci/type/OrbitModificationRequestStatusMDT.h"
#include "extxml_uci/type/OrbitModificationRequestStatusMT.h"
#include "extxml_uci/type/OrbitObjectBreakupType.h"
#include "extxml_uci/type/OrbitPlanActivationType.h"
#include "extxml_uci/type/OrbitPlanApprovalStatusMDT.h"
#include "extxml_uci/type/OrbitPlanApprovalStatusMT.h"
#include "extxml_uci/type/OrbitPlanCommandID_ChoiceType.h"
#include "extxml_uci/type/OrbitPlanCommandID_Type.h"
#include "extxml_uci/type/OrbitPlanCommandMDT.h"
#include "extxml_uci/type/OrbitPlanCommandMT.h"
#include "extxml_uci/type/OrbitPlanCommandStatusMDT.h"
#include "extxml_uci/type/OrbitPlanCommandStatusMT.h"
#include "extxml_uci/type/OrbitPlanConstraintType.h"
#include "extxml_uci/type/OrbitPlanExecutionStateType.h"
#include "extxml_uci/type/OrbitPlanExecutionStatusMDT.h"
#include "extxml_uci/type/OrbitPlanExecutionStatusMT.h"
#include "extxml_uci/type/OrbitPlanID_Type.h"
#include "extxml_uci/type/OrbitPlanInputsType.h"
#include "extxml_uci/type/OrbitPlanInvalidType.h"
#include "extxml_uci/type/OrbitPlanMDT.h"
#include "extxml_uci/type/OrbitPlanMT.h"
#include "extxml_uci/type/OrbitPlanPartsType.h"
#include "extxml_uci/type/OrbitPlanProcessDescriptionType.h"
#include "extxml_uci/type/OrbitPlanProcessType.h"
#include "extxml_uci/type/OrbitPlanStatusMDT.h"
#include "extxml_uci/type/OrbitPlanStatusMT.h"
#include "extxml_uci/type/OrbitPlanStatusType.h"
#include "extxml_uci/type/OrbitPlanType.h"
#include "extxml_uci/type/OrbitPlanValidationCommandMDT.h"
#include "extxml_uci/type/OrbitPlanValidationCommandMT.h"
#include "extxml_uci/type/OrbitPlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/OrbitPlanValidationCommandStatusMT.h"
#include "extxml_uci/type/OrbitPlanValidationID_Type.h"
#include "extxml_uci/type/OrbitPlanValidationInputsType.h"
#include "extxml_uci/type/OrbitPlanValidationInvalidManeuverSegmentType.h"
#include "extxml_uci/type/OrbitPlanValidationInvalidSequenceType.h"
#include "extxml_uci/type/OrbitPlanValidationMDT.h"
#include "extxml_uci/type/OrbitPlanValidationMT.h"
#include "extxml_uci/type/OrbitPlanningCandidateType.h"
#include "extxml_uci/type/OrbitPlanningStateType.h"
#include "extxml_uci/type/OrbitRegimeType.h"
#include "extxml_uci/type/OrbitSequenceCompletedType.h"
#include "extxml_uci/type/OrbitSequenceEstimateType.h"
#include "extxml_uci/type/OrbitSequenceInsertionPositionChoiceType.h"
#include "extxml_uci/type/OrbitTransitionSequenceType.h"
#include "extxml_uci/type/OrbitType.h"
#include "extxml_uci/type/OrbitValidationErrorType.h"
#include "extxml_uci/type/OrbitalAnalysisObjectType.h"
#include "extxml_uci/type/OrbitalConjunctionID_Type.h"
#include "extxml_uci/type/OrbitalConjunctionObjectType.h"
#include "extxml_uci/type/OrbitalConjunctionType.h"
#include "extxml_uci/type/OrbitalDebrisCloudID_Type.h"
#include "extxml_uci/type/OrbitalDebrisCloudType.h"
#include "extxml_uci/type/OrbitalDebrisEstimateID_Type.h"
#include "extxml_uci/type/OrbitalDebrisEstimateMDT.h"
#include "extxml_uci/type/OrbitalDebrisEstimateMT.h"
#include "extxml_uci/type/OrbitalDebrisEstimateRequestMDT.h"
#include "extxml_uci/type/OrbitalDebrisEstimateRequestMT.h"
#include "extxml_uci/type/OrbitalDebrisEstimateRequestStatusMDT.h"
#include "extxml_uci/type/OrbitalDebrisEstimateRequestStatusMT.h"
#include "extxml_uci/type/OrbitalDebrisEstimateType.h"
#include "extxml_uci/type/OrbitalDebrisID_Type.h"
#include "extxml_uci/type/OrbitalDebrisType.h"
#include "extxml_uci/type/OrbitalDeltaVelocity_A_Type.h"
#include "extxml_uci/type/OrbitalDeltaVelocity_B_Type.h"
#include "extxml_uci/type/OrbitalDockingEventType.h"
#include "extxml_uci/type/OrbitalElementSetParametersType.h"
#include "extxml_uci/type/OrbitalElementSetRequestParametersType.h"
#include "extxml_uci/type/OrbitalElementSetSourceType.h"
#include "extxml_uci/type/OrbitalEphemerisChoiceType.h"
#include "extxml_uci/type/OrbitalEphemerisParametersType.h"
#include "extxml_uci/type/OrbitalEphemerisRequestParametersType.h"
#include "extxml_uci/type/OrbitalEphemerisSourceType.h"
#include "extxml_uci/type/OrbitalEphemerisType.h"
#include "extxml_uci/type/OrbitalFiltersQueryType.h"
#include "extxml_uci/type/OrbitalKinematicsAccelerationType.h"
#include "extxml_uci/type/OrbitalKinematicsChoiceType.h"
#include "extxml_uci/type/OrbitalKinematicsFrameChoiceType.h"
#include "extxml_uci/type/OrbitalKinematicsObjectRelativeType.h"
#include "extxml_uci/type/OrbitalKinematicsRelativeEphemerisType.h"
#include "extxml_uci/type/OrbitalKinematicsRelativeStateVectorType.h"
#include "extxml_uci/type/OrbitalKinematicsStandardEphemerisType.h"
#include "extxml_uci/type/OrbitalKinematicsStandardFrameChoiceType.h"
#include "extxml_uci/type/OrbitalKinematicsTLE_SV_Type.h"
#include "extxml_uci/type/OrbitalKinematicsVelocityType.h"
#include "extxml_uci/type/OrbitalManeuverDetailsBaseType.h"
#include "extxml_uci/type/OrbitalManeuverDetailsType.h"
#include "extxml_uci/type/OrbitalManeuverID_Type.h"
#include "extxml_uci/type/OrbitalModelType.h"
#include "extxml_uci/type/OrbitalObjectComparisonDeltaType.h"
#include "extxml_uci/type/OrbitalObjectKinematicsSourceType.h"
#include "extxml_uci/type/OrbitalObjectMetricsType.h"
#include "extxml_uci/type/OrbitalProximityOperationsEventType.h"
#include "extxml_uci/type/OrbitalRendezvousEventType.h"
#include "extxml_uci/type/OrbitalSeparationEventType.h"
#include "extxml_uci/type/OrbitalSingleVectorParametersType.h"
#include "extxml_uci/type/OrbitalSurveillanceActivityDetailType.h"
#include "extxml_uci/type/OrbitalSurveillanceActivityMDT.h"
#include "extxml_uci/type/OrbitalSurveillanceActivityMT.h"
#include "extxml_uci/type/OrbitalSurveillanceActivityType.h"
#include "extxml_uci/type/OrbitalSurveillanceCapabilityMDT.h"
#include "extxml_uci/type/OrbitalSurveillanceCapabilityMT.h"
#include "extxml_uci/type/OrbitalSurveillanceCapabilityStatusMDT.h"
#include "extxml_uci/type/OrbitalSurveillanceCapabilityStatusMT.h"
#include "extxml_uci/type/OrbitalSurveillanceCapabilityType.h"
#include "extxml_uci/type/OrbitalSurveillanceCollectionRequirementsType.h"
#include "extxml_uci/type/OrbitalSurveillanceLocationTargetType.h"
#include "extxml_uci/type/OrbitalSurveillanceObjectBaseType.h"
#include "extxml_uci/type/OrbitalSurveillanceObjectType.h"
#include "extxml_uci/type/OrbitalSurveillanceObjectsType.h"
#include "extxml_uci/type/OrbitalSurveillanceSearchType.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorActivityMDT.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorActivityMT.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorActivityType.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorCapabilityMDT.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorCapabilityMT.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorCapabilityStatusMDT.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorCapabilityStatusMT.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorCapabilityType.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorMinimumCollectionRequirementsType.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorMinimumSizeType.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorReportingCategoriesType.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorSensitivityConstraintType.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorSubCapabilityType.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorTargetType.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorTaskBaseType.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorTaskType.h"
#include "extxml_uci/type/OrbitalSurveillanceSpecificDataType.h"
#include "extxml_uci/type/OrbitalSurveillanceSubCapabilityDetailsChoiceType.h"
#include "extxml_uci/type/OrbitalSurveillanceTargetType.h"
#include "extxml_uci/type/OrbitalSurveillanceTaskBaseType.h"
#include "extxml_uci/type/OrbitalSurveillanceTaskType.h"
#include "extxml_uci/type/OrbitalSurveillanceZoneTargetType.h"
#include "extxml_uci/type/OrbitalToleranceValuesType.h"
#include "extxml_uci/type/OrbitalUndockingEventType.h"
#include "extxml_uci/type/OrbitalVCM_ParametersType.h"
#include "extxml_uci/type/OrbitalVCM_RequestParametersType.h"
#include "extxml_uci/type/OrbitalVCM_Type.h"
#include "extxml_uci/type/OrbitalVolumeType.h"
#include "extxml_uci/type/OrderOfBattleC2_EmitterType.h"
#include "extxml_uci/type/OrderOfBattleEmitterType.h"
#include "extxml_uci/type/OrderOfBattleID_Type.h"
#include "extxml_uci/type/OrderOfBattleMDT.h"
#include "extxml_uci/type/OrderOfBattleMT.h"
#include "extxml_uci/type/OrderOfBattleTimestampsType.h"
#include "extxml_uci/type/OrderTraceabilityType.h"
#include "extxml_uci/type/OrientationAccelerationType.h"
#include "extxml_uci/type/OrientationCovarianceType.h"
#include "extxml_uci/type/OrientationRateType.h"
#include "extxml_uci/type/OrientationType.h"
#include "extxml_uci/type/OtherSystemConstrainingPlansType.h"
#include "extxml_uci/type/PATCHB_Type.h"
#include "extxml_uci/type/PackageID_Type.h"
#include "extxml_uci/type/PackageMDT.h"
#include "extxml_uci/type/PackageMT.h"
#include "extxml_uci/type/PackagePartnerBaseType.h"
#include "extxml_uci/type/PackagePartnerStatusType.h"
#include "extxml_uci/type/PackageStatusMDT.h"
#include "extxml_uci/type/PackageStatusMT.h"
#include "extxml_uci/type/ParameterAssertType.h"
#include "extxml_uci/type/ParameterID_Type.h"
#include "extxml_uci/type/ParameterValueType.h"
#include "extxml_uci/type/PathConstraintsType.h"
#include "extxml_uci/type/PathID_Type.h"
#include "extxml_uci/type/PathMetricsType.h"
#include "extxml_uci/type/PathSegmentConditionType.h"
#include "extxml_uci/type/PathSegmentModificationType.h"
#include "extxml_uci/type/PathSegmentSpeedChoiceType.h"
#include "extxml_uci/type/PathSegmentSpeedType.h"
#include "extxml_uci/type/PathSegmentSpeedValueType.h"
#include "extxml_uci/type/PathSegmentThreatAssessmentType.h"
#include "extxml_uci/type/PathSegmentType.h"
#include "extxml_uci/type/PathThreatAssessmentType.h"
#include "extxml_uci/type/PathType.h"
#include "extxml_uci/type/PathVulnerabilitySegmentType.h"
#include "extxml_uci/type/PathVulnerabilityType.h"
#include "extxml_uci/type/PercentRangeType.h"
#include "extxml_uci/type/PercentileRCSType.h"
#include "extxml_uci/type/PerformanceMetricSetType.h"
#include "extxml_uci/type/PeriodPerformanceFeedbackType.h"
#include "extxml_uci/type/PhotometryParamsType.h"
#include "extxml_uci/type/PhysicalModelType.h"
#include "extxml_uci/type/PixelCountSettingsType.h"
#include "extxml_uci/type/PixelDataType.h"
#include "extxml_uci/type/PixelOutputDataType.h"
#include "extxml_uci/type/PixelReferenceCoordinateType.h"
#include "extxml_uci/type/PixelScalingSettingsType.h"
#include "extxml_uci/type/PlanActivationAutonomyType.h"
#include "extxml_uci/type/PlanActivationPolicyType.h"
#include "extxml_uci/type/PlanActivationStateType.h"
#include "extxml_uci/type/PlanActivationStatusType.h"
#include "extxml_uci/type/PlanApplicabilityModificationType.h"
#include "extxml_uci/type/PlanApplicabilityType.h"
#include "extxml_uci/type/PlanCommandStatusType.h"
#include "extxml_uci/type/PlanInputsCoreType.h"
#include "extxml_uci/type/PlanInterfaceCommandType.h"
#include "extxml_uci/type/PlanInterfaceStateType.h"
#include "extxml_uci/type/PlanModificationDetailsType.h"
#include "extxml_uci/type/PlanModificationRequestMDT.h"
#include "uci/base/accessorType.h"
#include "uci/type/MSTGTA_RevA_Type.h"
#include "uci/type/MSTGTA_Type.h"
#include "uci/type/MTI_ActivityStatusBaseType.h"
#include "uci/type/MTI_ActivityStatusDetailType.h"
#include "uci/type/MTI_OpZoneFilterAreaType.h"
#include "uci/type/MTI_PredictedActivityDetailType.h"
#include "uci/type/MTI_STANAG_4607_OpZoneFilterAreaType.h"
#include "uci/type/MTI_TargetClassType.h"
#include "uci/type/MissionPlanExecutionStateType.h"
#include "uci/type/MissionPlanExecutionStatusMDT.h"
#include "uci/type/MissionPlanExecutionStatusMT.h"
#include "uci/type/MissionPlanID_Type.h"
#include "uci/type/MissionPlanInputsType.h"
#include "uci/type/MissionPlanMDT.h"
#include "uci/type/MissionPlanMT.h"
#include "uci/type/MissionPlanMetricsReportID_Type.h"
#include "uci/type/MissionPlanMetricsReportMDT.h"
#include "uci/type/MissionPlanMetricsReportMT.h"
#include "uci/type/MissionPlanMetricsReportRequestMDT.h"
#include "uci/type/MissionPlanMetricsReportRequestMT.h"
#include "uci/type/MissionPlanMetricsReportRequestStatusMDT.h"
#include "uci/type/MissionPlanMetricsReportRequestStatusMT.h"
#include "uci/type/MissionPlanNavigationType.h"
#include "uci/type/MissionPlanProcessDescriptionType.h"
#include "uci/type/MissionPlanProcessType.h"
#include "uci/type/MissionPlanStatusMDT.h"
#include "uci/type/MissionPlanStatusMT.h"
#include "uci/type/MissionPlanStatusType.h"
#include "uci/type/MissionPlanSubplanActivationType.h"
#include "uci/type/MissionPlanValidationCommandMDT.h"
#include "uci/type/MissionPlanValidationCommandMT.h"
#include "uci/type/MissionPlanValidationCommandStatusMDT.h"
#include "uci/type/MissionPlanValidationCommandStatusMT.h"
#include "uci/type/MissionPlanValidationID_Type.h"
#include "uci/type/MissionPlanValidationInputsType.h"
#include "uci/type/MissionPlanValidationMDT.h"
#include "uci/type/MissionPlanValidationMT.h"
#include "uci/type/MissionPlanningAutonomyResponseChoiceType.h"
#include "uci/type/MissionPlanningAutonomySettingByResultType.h"
#include "uci/type/MissionPlanningAutonomySettingType.h"
#include "uci/type/MissionPlanningByResultAutonomousActionType.h"
#include "uci/type/MissionPlanningOrchestrationID_Type.h"
#include "uci/type/MissionPlanningOrchestrationMDT.h"
#include "uci/type/MissionPlanningOrchestrationMT.h"
#include "uci/type/MissionRequirementStatusMDT.h"
#include "uci/type/MissionRequirementStatusMT.h"
#include "uci/type/MissionRequirementStatusType.h"
#include "uci/type/MissionTraceabilityType.h"
#include "uci/type/ModRateDataType.h"
#include "uci/type/ModeS_InterrogatorAddressType.h"
#include "uci/type/ModeS_OptionsType.h"
#include "uci/type/ModifyRF_ThreadInstanceType.h"
#include "uci/type/ModulationOnPulseDataBaseType.h"
#include "uci/type/ModulationOnPulseDataType.h"
#include "uci/type/ModulationParameterType.h"
#include "uci/type/MultiObjectType.h"
#include "uci/type/MultistaticEmitterDataID_Type.h"
#include "uci/type/MultistaticEmitterDataMDT.h"
#include "uci/type/MultistaticEmitterDataMT.h"
#include "uci/type/MultistaticEmitterID_Type.h"
#include "uci/type/MultistaticEmitterType.h"
#include "uci/type/MultistaticModeOptionsEmployedType.h"
#include "uci/type/MultistaticModeType.h"
#include "uci/type/MultistaticOptionsSupportedType.h"
#include "uci/type/MunitionInFlightType.h"
#include "uci/type/MustFlyLocationType.h"
#include "uci/type/MustFlyType.h"
#include "uci/type/MvAnomalyEventID_Type.h"
#include "uci/type/MvAnomalyEventMDT.h"
#include "uci/type/MvAnomalyEventMT.h"
#include "uci/type/MvObservationType.h"
#include "uci/type/NATO_Link1DataLinkIdentifierType.h"
#include "uci/type/NATO_Link1QuerySpecificDataType.h"
#include "uci/type/NED_ConeType.h"
#include "uci/type/NED_LOS_Type.h"
#include "uci/type/NITF_PackingPlanPET.h"
#include "uci/type/NITF_PackingPlanRevA_Type.h"
#include "uci/type/NITF_PackingPlanType.h"
#include "uci/type/NameValuePairType.h"
#include "uci/type/NameValuePairValueType.h"
#include "uci/type/NamedElementType.h"
#include "uci/type/Narrowband_SOI_ParamsType.h"
#include "uci/type/NavigationReportMDT.h"
#include "uci/type/NavigationReportMT.h"
#include "uci/type/NavigationSolutionCorrectionsType.h"
#include "uci/type/NavigationSourceType.h"
#include "uci/type/NavigationType.h"
#include "uci/type/NetworkDataRateRangeType.h"
#include "uci/type/NetworkEndpointType.h"
#include "uci/type/NetworkLinkID_Type.h"
#include "uci/type/NextPathSegmentType.h"
#include "uci/type/NormalizationTableType.h"
#include "uci/type/NotificationBaseType.h"
#include "uci/type/NotificationID_Type.h"
#include "uci/type/NotificationSourceType.h"
#include "uci/type/OB_CorrelationInputType.h"
#include "uci/type/OB_SensorID_Type.h"
#include "uci/type/OB_SensorIdentityType.h"
#include "uci/type/OB_SensorType.h"
#include "uci/type/ObjectCorrelationType.h"
#include "uci/type/ObjectInstanceDamageEstimateType.h"
#include "uci/type/ObjectKinematicsChoiceType.h"
#include "uci/type/ObjectTypeDamageEstimateType.h"
#include "uci/type/ObservationCountsByHourType.h"
#include "uci/type/ObservationMeasurementID_Type.h"
#include "uci/type/ObservationMeasurementReportID_Type.h"
#include "uci/type/ObservationMeasurementReportMDT.h"
#include "uci/type/ObservationMeasurementReportMT.h"
#include "uci/type/ObservationMeasurementSourceType.h"
#include "uci/type/ObservationMeasurementType.h"
#include "uci/type/ObservationReportID_Type.h"
#include "uci/type/ObservationReportMDT.h"
#include "uci/type/ObservationReportMT.h"
#include "uci/type/ObservationsPerTrackLimitsType.h"
#include "uci/type/OffsetLocationErrorType.h"
#include "uci/type/OffsetLocationType.h"
#include "uci/type/OffsetTimeType.h"
#include "uci/type/OpBaseType.h"
#include "uci/type/OpConstraintScoreType.h"
#include "uci/type/OpConstraintWeightingType.h"
#include "uci/type/OpConstraintWeightingValueType.h"
#include "uci/type/OpDescriptionType.h"
#include "uci/type/OpID_ChoiceType.h"
#include "uci/type/OpInteractingAssetType.h"
#include "uci/type/OpLineID_Type.h"
#include "uci/type/OpLineMDT.h"
#include "uci/type/OpLineMT.h"
#include "uci/type/OpLineType.h"
#include "uci/type/OpNotificationEXT.h"
#include "uci/type/OpNotificationMDT.h"
#include "uci/type/OpNotificationMT.h"
#include "uci/type/OpPointBaseType.h"
#include "uci/type/OpPointCategoriesType.h"
#include "uci/type/OpPointCategoriesUniqueDataType.h"
#include "uci/type/OpPointChoiceType.h"
#include "uci/type/OpPointID_Type.h"
#include "uci/type/OpPointMDT.h"
#include "uci/type/OpPointMT.h"
#include "uci/type/OpPointPositionType.h"
#include "uci/type/OpPointReferenceType.h"
#include "uci/type/OpRoutingID_Type.h"
#include "uci/type/OpRoutingMDT.h"
#include "uci/type/OpRoutingMT.h"
#include "uci/type/OpVolumeID_Type.h"
#include "uci/type/OpVolumeKinematicsType.h"
#include "uci/type/OpVolumeMDT.h"
#include "uci/type/OpVolumeMT.h"
#include "uci/type/OpVolumeType.h"
#include "uci/type/OpZoneCategoryType.h"
#include "uci/type/OpZoneFilterAreaPET.h"
#include "uci/type/OpZoneID_Type.h"
#include "uci/type/OpZoneJammingType.h"
#include "uci/type/OpZoneMDT.h"
#include "uci/type/OpZoneMT.h"
#include "uci/type/OpZoneMissileDataType.h"
#include "uci/type/OpZoneNoFireType.h"
#include "uci/type/OpZoneNoFlyType.h"
#include "uci/type/OpZoneTrackAreaDomainSourceType.h"
#include "uci/type/OpZoneType.h"
#include "uci/type/OpZoneWeaponRestrictionType.h"
#include "uci/type/OpZoneWeatherType.h"
#include "uci/type/OpaqueCapabilityMDT.h"
#include "uci/type/OpaqueCapabilityMT.h"
#include "uci/type/OpaqueCapabilityStatusMDT.h"
#include "uci/type/OpaqueCapabilityStatusMT.h"
#include "uci/type/OpaqueCapabilityType.h"
#include "uci/type/OpaqueSettingsCommandMDT.h"
#include "uci/type/OpaqueSettingsCommandMT.h"
#include "uci/type/OpaqueSettingsCommandStatusMDT.h"
#include "uci/type/OpaqueSettingsCommandStatusMT.h"
#include "uci/type/OperationalScheduleType.h"
#include "uci/type/OperationsAreaDataLinkNativeFilterType.h"
#include "uci/type/OperatorActionAutonomousType.h"
#include "uci/type/OperatorActionCommandMDT.h"
#include "uci/type/OperatorActionCommandMT.h"
#include "uci/type/OperatorActionCommandStatusMDT.h"
#include "uci/type/OperatorActionCommandStatusMT.h"
#include "uci/type/OperatorActionControlledType.h"
#include "uci/type/OperatorActionID_Type.h"
#include "uci/type/OperatorActionType.h"
#include "uci/type/OperatorAnnotationID_Type.h"
#include "uci/type/OperatorAnnotationMDT.h"
#include "uci/type/OperatorAnnotationMT.h"
#include "uci/type/OperatorCommTerminalDesignationStatusType.h"
#include "uci/type/OperatorDefaultActionType.h"
#include "uci/type/OperatorGatewayDesignationStatusType.h"
#include "uci/type/OperatorID_Type.h"
#include "uci/type/OperatorLocationOfInterestClauseType.h"
#include "uci/type/OperatorLocationOfInterestComparativeType.h"
#include "uci/type/OperatorLocationOfInterestID_Type.h"
#include "uci/type/OperatorLocationOfInterestMDT.h"
#include "uci/type/OperatorLocationOfInterestMT.h"
#include "uci/type/OperatorMDT.h"
#include "uci/type/OperatorMT.h"
#include "uci/type/OperatorNameType.h"
#include "uci/type/OperatorNotificationAckID_Type.h"
#include "uci/type/OperatorNotificationAckMDT.h"
#include "uci/type/OperatorNotificationAckMT.h"
#include "uci/type/OperatorNotificationActionType.h"
#include "uci/type/OperatorNotificationID_Type.h"
#include "uci/type/OperatorNotificationMDT.h"
#include "uci/type/OperatorNotificationMT.h"
#include "uci/type/OperatorNotificationOverrideID_Type.h"
#include "uci/type/OperatorNotificationOverrideMDT.h"
#include "uci/type/OperatorNotificationOverrideMT.h"
#include "uci/type/OperatorRecommendationType.h"
#include "uci/type/OperatorRoleID_Type.h"
#include "uci/type/OperatorRoleMDT.h"
#include "uci/type/OperatorRoleMT.h"
#include "uci/type/OperatorRoleType.h"
#include "uci/type/OpsClockDayType.h"
#include "uci/type/OpticalCollectionConstraintsType.h"
#include "uci/type/OpticalImageParamsType.h"
#include "uci/type/OrbitAccuracyType.h"
#include "uci/type/OrbitActivityExecutionStatusType.h"
#include "uci/type/OrbitActivityKinematicReferenceType.h"
#include "uci/type/OrbitActivityMetricsType.h"
#include "uci/type/OrbitActivityPlanActivationType.h"
#include "uci/type/OrbitActivityPlanApprovalStatusMDT.h"
#include "uci/type/OrbitActivityPlanApprovalStatusMT.h"
#include "uci/type/OrbitActivityPlanCommandID_ChoiceType.h"
#include "uci/type/OrbitActivityPlanCommandID_Type.h"
#include "uci/type/OrbitActivityPlanCommandMDT.h"
#include "uci/type/OrbitActivityPlanCommandMT.h"
#include "uci/type/OrbitActivityPlanCommandStatusMDT.h"
#include "uci/type/OrbitActivityPlanCommandStatusMT.h"
#include "uci/type/OrbitActivityPlanConstraintType.h"
#include "uci/type/OrbitActivityPlanExecutionStateType.h"
#include "uci/type/OrbitActivityPlanExecutionStatusMDT.h"
#include "uci/type/OrbitActivityPlanExecutionStatusMT.h"
#include "uci/type/OrbitActivityPlanID_Type.h"
#include "uci/type/OrbitActivityPlanInputsType.h"
#include "uci/type/OrbitActivityPlanInvalidType.h"
#include "uci/type/OrbitActivityPlanMDT.h"
#include "uci/type/OrbitActivityPlanMT.h"
#include "uci/type/OrbitActivityPlanStatusMDT.h"
#include "uci/type/OrbitActivityPlanStatusMT.h"
#include "uci/type/OrbitActivityPlanStatusType.h"
#include "uci/type/OrbitActivityPlanType.h"
#include "uci/type/OrbitActivityPlanValidationCommandMDT.h"
#include "uci/type/OrbitActivityPlanValidationCommandMT.h"
#include "uci/type/OrbitActivityPlanValidationCommandStatusMDT.h"
#include "uci/type/OrbitActivityPlanValidationCommandStatusMT.h"
#include "uci/type/OrbitActivityPlanValidationID_Type.h"
#include "uci/type/OrbitActivityPlanValidationInputsType.h"
#include "uci/type/OrbitActivityPlanValidationMDT.h"
#include "uci/type/OrbitActivityPlanValidationMT.h"
#include "uci/type/OrbitActivityType.h"
#include "uci/type/OrbitBreakupEventDetailsType.h"
#include "uci/type/OrbitChangeActivityMDT.h"
#include "uci/type/OrbitChangeActivityMT.h"
#include "uci/type/OrbitChangeActivityType.h"
#include "uci/type/OrbitChangeCapabilityMDT.h"
#include "uci/type/OrbitChangeCapabilityMT.h"
#include "uci/type/OrbitChangeCapabilityStatusMDT.h"
#include "uci/type/OrbitChangeCapabilityStatusMT.h"
#include "uci/type/OrbitChangeCapabilityType.h"
#include "uci/type/OrbitChangeChoiceType.h"
#include "uci/type/OrbitChangeMagnitudeType.h"
#include "uci/type/OrbitChangeTaskBaseType.h"
#include "uci/type/OrbitChangeTaskType.h"
#include "uci/type/OrbitCollisionType.h"
#include "uci/type/OrbitConflictObjectType.h"
#include "uci/type/OrbitConjunctionAssessmentID_Type.h"
#include "uci/type/OrbitConjunctionAssessmentMDT.h"
#include "uci/type/OrbitConjunctionAssessmentMT.h"
#include "uci/type/OrbitConjunctionAssessmentRequestMDT.h"
#include "uci/type/OrbitConjunctionAssessmentRequestMT.h"
#include "uci/type/OrbitConjunctionAssessmentRequestStatusMDT.h"
#include "uci/type/OrbitConjunctionAssessmentRequestStatusMT.h"
#include "uci/type/OrbitDurationType.h"
#include "uci/type/OrbitEstimationStartType.h"
#include "uci/type/OrbitExecutionPlanSetType.h"
#include "uci/type/OrbitGuidelineType.h"
#include "uci/type/OrbitKinematicsChangeSummaryType.h"
#include "uci/type/OrbitKinematicsParametersType.h"
#include "uci/type/OrbitKinematicsReferencesType.h"
#include "uci/type/OrbitKinematicsSequenceID_Type.h"
#include "uci/type/OrbitKinematicsSequenceInsertionType.h"
#include "uci/type/OrbitKinematicsSequenceModificationDetailsType.h"
#include "uci/type/OrbitKinematicsSequenceReplaceOrModifyChoiceType.h"
#include "uci/type/OrbitKinematicsSequenceTrimType.h"
#include "uci/type/OrbitKinematicsSequenceType.h"
#include "uci/type/OrbitKinematicsSetParametersType.h"
#include "uci/type/OrbitKinematicsSourceType.h"
#include "uci/type/OrbitKinematicsType.h"
#include "uci/type/OrbitManeuverSegmentID_Type.h"
#include "uci/type/OrbitManeuverSegmentMetricsType.h"
#include "uci/type/OrbitManeuverSegmentType.h"
#include "uci/type/OrbitManeuverSequenceMetricsType.h"
#include "uci/type/OrbitManeuverType.h"
#include "uci/type/OrbitMetricsID_Type.h"
#include "uci/type/OrbitMetricsMDT.h"
#include "uci/type/OrbitMetricsMT.h"
#include "uci/type/OrbitMetricsRequestMDT.h"
#include "uci/type/OrbitMetricsRequestMT.h"
#include "uci/type/OrbitMetricsRequestStatusMDT.h"
#include "uci/type/OrbitMetricsRequestStatusMT.h"
#include "uci/type/OrbitModificationDetailsType.h"
#include "uci/type/OrbitModificationRequestMDT.h"
#include "uci/type/OrbitModificationRequestMT.h"
#include "uci/type/OrbitModificationRequestStatusMDT.h"
#include "uci/type/OrbitModificationRequestStatusMT.h"
#include "uci/type/OrbitObjectBreakupType.h"
#include "uci/type/OrbitPlanActivationType.h"
#include "uci/type/OrbitPlanApprovalStatusMDT.h"
#include "uci/type/OrbitPlanApprovalStatusMT.h"
#include "uci/type/OrbitPlanCommandID_ChoiceType.h"
#include "uci/type/OrbitPlanCommandID_Type.h"
#include "uci/type/OrbitPlanCommandMDT.h"
#include "uci/type/OrbitPlanCommandMT.h"
#include "uci/type/OrbitPlanCommandStatusMDT.h"
#include "uci/type/OrbitPlanCommandStatusMT.h"
#include "uci/type/OrbitPlanConstraintType.h"
#include "uci/type/OrbitPlanExecutionStateType.h"
#include "uci/type/OrbitPlanExecutionStatusMDT.h"
#include "uci/type/OrbitPlanExecutionStatusMT.h"
#include "uci/type/OrbitPlanID_Type.h"
#include "uci/type/OrbitPlanInputsType.h"
#include "uci/type/OrbitPlanInvalidType.h"
#include "uci/type/OrbitPlanMDT.h"
#include "uci/type/OrbitPlanMT.h"
#include "uci/type/OrbitPlanPartsType.h"
#include "uci/type/OrbitPlanProcessDescriptionType.h"
#include "uci/type/OrbitPlanProcessType.h"
#include "uci/type/OrbitPlanStatusMDT.h"
#include "uci/type/OrbitPlanStatusMT.h"
#include "uci/type/OrbitPlanStatusType.h"
#include "uci/type/OrbitPlanType.h"
#include "uci/type/OrbitPlanValidationCommandMDT.h"
#include "uci/type/OrbitPlanValidationCommandMT.h"
#include "uci/type/OrbitPlanValidationCommandStatusMDT.h"
#include "uci/type/OrbitPlanValidationCommandStatusMT.h"
#include "uci/type/OrbitPlanValidationID_Type.h"
#include "uci/type/OrbitPlanValidationInputsType.h"
#include "uci/type/OrbitPlanValidationInvalidManeuverSegmentType.h"
#include "uci/type/OrbitPlanValidationInvalidSequenceType.h"
#include "uci/type/OrbitPlanValidationMDT.h"
#include "uci/type/OrbitPlanValidationMT.h"
#include "uci/type/OrbitPlanningCandidateType.h"
#include "uci/type/OrbitPlanningStateType.h"
#include "uci/type/OrbitRegimeType.h"
#include "uci/type/OrbitSequenceCompletedType.h"
#include "uci/type/OrbitSequenceEstimateType.h"
#include "uci/type/OrbitSequenceInsertionPositionChoiceType.h"
#include "uci/type/OrbitTransitionSequenceType.h"
#include "uci/type/OrbitType.h"
#include "uci/type/OrbitValidationErrorType.h"
#include "uci/type/OrbitalAnalysisObjectType.h"
#include "uci/type/OrbitalConjunctionID_Type.h"
#include "uci/type/OrbitalConjunctionObjectType.h"
#include "uci/type/OrbitalConjunctionType.h"
#include "uci/type/OrbitalDebrisCloudID_Type.h"
#include "uci/type/OrbitalDebrisCloudType.h"
#include "uci/type/OrbitalDebrisEstimateID_Type.h"
#include "uci/type/OrbitalDebrisEstimateMDT.h"
#include "uci/type/OrbitalDebrisEstimateMT.h"
#include "uci/type/OrbitalDebrisEstimateRequestMDT.h"
#include "uci/type/OrbitalDebrisEstimateRequestMT.h"
#include "uci/type/OrbitalDebrisEstimateRequestStatusMDT.h"
#include "uci/type/OrbitalDebrisEstimateRequestStatusMT.h"
#include "uci/type/OrbitalDebrisEstimateType.h"
#include "uci/type/OrbitalDebrisID_Type.h"
#include "uci/type/OrbitalDebrisType.h"
#include "uci/type/OrbitalDeltaVelocity_A_Type.h"
#include "uci/type/OrbitalDeltaVelocity_B_Type.h"
#include "uci/type/OrbitalDockingEventType.h"
#include "uci/type/OrbitalElementSetParametersType.h"
#include "uci/type/OrbitalElementSetRequestParametersType.h"
#include "uci/type/OrbitalElementSetSourceType.h"
#include "uci/type/OrbitalEphemerisChoiceType.h"
#include "uci/type/OrbitalEphemerisParametersType.h"
#include "uci/type/OrbitalEphemerisRequestParametersType.h"
#include "uci/type/OrbitalEphemerisSourceType.h"
#include "uci/type/OrbitalEphemerisType.h"
#include "uci/type/OrbitalFiltersQueryType.h"
#include "uci/type/OrbitalKinematicsAccelerationType.h"
#include "uci/type/OrbitalKinematicsChoiceType.h"
#include "uci/type/OrbitalKinematicsFrameChoiceType.h"
#include "uci/type/OrbitalKinematicsObjectRelativeType.h"
#include "uci/type/OrbitalKinematicsRelativeEphemerisType.h"
#include "uci/type/OrbitalKinematicsRelativeStateVectorType.h"
#include "uci/type/OrbitalKinematicsStandardEphemerisType.h"
#include "uci/type/OrbitalKinematicsStandardFrameChoiceType.h"
#include "uci/type/OrbitalKinematicsTLE_SV_Type.h"
#include "uci/type/OrbitalKinematicsVelocityType.h"
#include "uci/type/OrbitalManeuverDetailsBaseType.h"
#include "uci/type/OrbitalManeuverDetailsType.h"
#include "uci/type/OrbitalManeuverID_Type.h"
#include "uci/type/OrbitalModelType.h"
#include "uci/type/OrbitalObjectComparisonDeltaType.h"
#include "uci/type/OrbitalObjectKinematicsSourceType.h"
#include "uci/type/OrbitalObjectMetricsType.h"
#include "uci/type/OrbitalProximityOperationsEventType.h"
#include "uci/type/OrbitalRendezvousEventType.h"
#include "uci/type/OrbitalSeparationEventType.h"
#include "uci/type/OrbitalSingleVectorParametersType.h"
#include "uci/type/OrbitalSurveillanceActivityDetailType.h"
#include "uci/type/OrbitalSurveillanceActivityMDT.h"
#include "uci/type/OrbitalSurveillanceActivityMT.h"
#include "uci/type/OrbitalSurveillanceActivityType.h"
#include "uci/type/OrbitalSurveillanceCapabilityMDT.h"
#include "uci/type/OrbitalSurveillanceCapabilityMT.h"
#include "uci/type/OrbitalSurveillanceCapabilityStatusMDT.h"
#include "uci/type/OrbitalSurveillanceCapabilityStatusMT.h"
#include "uci/type/OrbitalSurveillanceCapabilityType.h"
#include "uci/type/OrbitalSurveillanceCollectionRequirementsType.h"
#include "uci/type/OrbitalSurveillanceLocationTargetType.h"
#include "uci/type/OrbitalSurveillanceObjectBaseType.h"
#include "uci/type/OrbitalSurveillanceObjectType.h"
#include "uci/type/OrbitalSurveillanceObjectsType.h"
#include "uci/type/OrbitalSurveillanceSearchType.h"
#include "uci/type/OrbitalSurveillanceSensorActivityMDT.h"
#include "uci/type/OrbitalSurveillanceSensorActivityMT.h"
#include "uci/type/OrbitalSurveillanceSensorActivityType.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityMDT.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityMT.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityStatusMDT.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityStatusMT.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityType.h"
#include "uci/type/OrbitalSurveillanceSensorMinimumCollectionRequirementsType.h"
#include "uci/type/OrbitalSurveillanceSensorMinimumSizeType.h"
#include "uci/type/OrbitalSurveillanceSensorReportingCategoriesType.h"
#include "uci/type/OrbitalSurveillanceSensorSensitivityConstraintType.h"
#include "uci/type/OrbitalSurveillanceSensorSubCapabilityType.h"
#include "uci/type/OrbitalSurveillanceSensorTargetType.h"
#include "uci/type/OrbitalSurveillanceSensorTaskBaseType.h"
#include "uci/type/OrbitalSurveillanceSensorTaskType.h"
#include "uci/type/OrbitalSurveillanceSpecificDataType.h"
#include "uci/type/OrbitalSurveillanceSubCapabilityDetailsChoiceType.h"
#include "uci/type/OrbitalSurveillanceTargetType.h"
#include "uci/type/OrbitalSurveillanceTaskBaseType.h"
#include "uci/type/OrbitalSurveillanceTaskType.h"
#include "uci/type/OrbitalSurveillanceZoneTargetType.h"
#include "uci/type/OrbitalToleranceValuesType.h"
#include "uci/type/OrbitalUndockingEventType.h"
#include "uci/type/OrbitalVCM_ParametersType.h"
#include "uci/type/OrbitalVCM_RequestParametersType.h"
#include "uci/type/OrbitalVCM_Type.h"
#include "uci/type/OrbitalVolumeType.h"
#include "uci/type/OrderOfBattleC2_EmitterType.h"
#include "uci/type/OrderOfBattleEmitterType.h"
#include "uci/type/OrderOfBattleID_Type.h"
#include "uci/type/OrderOfBattleMDT.h"
#include "uci/type/OrderOfBattleMT.h"
#include "uci/type/OrderOfBattleTimestampsType.h"
#include "uci/type/OrderTraceabilityType.h"
#include "uci/type/OrientationAccelerationType.h"
#include "uci/type/OrientationCovarianceType.h"
#include "uci/type/OrientationRateType.h"
#include "uci/type/OrientationType.h"
#include "uci/type/OtherSystemConstrainingPlansType.h"
#include "uci/type/PATCHB_Type.h"
#include "uci/type/PackageID_Type.h"
#include "uci/type/PackageMDT.h"
#include "uci/type/PackageMT.h"
#include "uci/type/PackagePartnerBaseType.h"
#include "uci/type/PackagePartnerStatusType.h"
#include "uci/type/PackageStatusMDT.h"
#include "uci/type/PackageStatusMT.h"
#include "uci/type/ParameterAssertType.h"
#include "uci/type/ParameterID_Type.h"
#include "uci/type/ParameterValueType.h"
#include "uci/type/PathConstraintsType.h"
#include "uci/type/PathID_Type.h"
#include "uci/type/PathMetricsType.h"
#include "uci/type/PathSegmentConditionType.h"
#include "uci/type/PathSegmentModificationType.h"
#include "uci/type/PathSegmentSpeedChoiceType.h"
#include "uci/type/PathSegmentSpeedType.h"
#include "uci/type/PathSegmentSpeedValueType.h"
#include "uci/type/PathSegmentThreatAssessmentType.h"
#include "uci/type/PathSegmentType.h"
#include "uci/type/PathThreatAssessmentType.h"
#include "uci/type/PathType.h"
#include "uci/type/PathVulnerabilitySegmentType.h"
#include "uci/type/PathVulnerabilityType.h"
#include "uci/type/PercentRangeType.h"
#include "uci/type/PercentileRCSType.h"
#include "uci/type/PerformanceMetricSetType.h"
#include "uci/type/PeriodPerformanceFeedbackType.h"
#include "uci/type/PhotometryParamsType.h"
#include "uci/type/PhysicalModelType.h"
#include "uci/type/PixelCountSettingsType.h"
#include "uci/type/PixelDataType.h"
#include "uci/type/PixelOutputDataType.h"
#include "uci/type/PixelReferenceCoordinateType.h"
#include "uci/type/PixelScalingSettingsType.h"
#include "uci/type/PlanActivationAutonomyType.h"
#include "uci/type/PlanActivationPolicyType.h"
#include "uci/type/PlanActivationStateType.h"
#include "uci/type/PlanActivationStatusType.h"
#include "uci/type/PlanApplicabilityModificationType.h"
#include "uci/type/PlanApplicabilityType.h"
#include "uci/type/PlanCommandStatusType.h"
#include "uci/type/PlanInputsCoreType.h"
#include "uci/type/PlanInterfaceCommandType.h"
#include "uci/type/PlanInterfaceStateType.h"
#include "uci/type/PlanModificationDetailsType.h"
#include "uci/type/PlanModificationRequestMDT.h"

/**  */
namespace extxml_uci {

/** The namespace in which all base data types are declared */
namespace base {

bool extxml_uci::base::ExternalizerRead5::read(const boost::property_tree::ptree& propTree, uci::base::Accessor& accessor, std::string& nodeName, std::string& nsPrefix) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::missionPlanExecutionStateType:
      return extxml_uci::type::MissionPlanExecutionStateType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanExecutionStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanExecutionStatusMDT:
      return extxml_uci::type::MissionPlanExecutionStatusMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanExecutionStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanExecutionStatusMT:
      return extxml_uci::type::MissionPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanID_Type:
      return extxml_uci::type::MissionPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanInputsType:
      return extxml_uci::type::MissionPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanMDT:
      return extxml_uci::type::MissionPlanMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanMetricsReportID_Type:
      return extxml_uci::type::MissionPlanMetricsReportID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanMetricsReportMDT:
      return extxml_uci::type::MissionPlanMetricsReportMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanMetricsReportMT:
      return extxml_uci::type::MissionPlanMetricsReportMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanMetricsReportRequestMDT:
      return extxml_uci::type::MissionPlanMetricsReportRequestMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanMetricsReportRequestMT:
      return extxml_uci::type::MissionPlanMetricsReportRequestMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanMetricsReportRequestStatusMDT:
      return extxml_uci::type::MissionPlanMetricsReportRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanMetricsReportRequestStatusMT:
      return extxml_uci::type::MissionPlanMetricsReportRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanMT:
      return extxml_uci::type::MissionPlanMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanNavigationType:
      return extxml_uci::type::MissionPlanNavigationType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanNavigationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanningAutonomyResponseChoiceType:
      return extxml_uci::type::MissionPlanningAutonomyResponseChoiceType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanningAutonomyResponseChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanningAutonomySettingByResultType:
      return extxml_uci::type::MissionPlanningAutonomySettingByResultType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanningAutonomySettingByResultType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanningAutonomySettingType:
      return extxml_uci::type::MissionPlanningAutonomySettingType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanningAutonomySettingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanningByResultAutonomousActionType:
      return extxml_uci::type::MissionPlanningByResultAutonomousActionType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanningByResultAutonomousActionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanningOrchestrationID_Type:
      return extxml_uci::type::MissionPlanningOrchestrationID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanningOrchestrationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanningOrchestrationMDT:
      return extxml_uci::type::MissionPlanningOrchestrationMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanningOrchestrationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanningOrchestrationMT:
      return extxml_uci::type::MissionPlanningOrchestrationMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanningOrchestrationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanProcessDescriptionType:
      return extxml_uci::type::MissionPlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanProcessType:
      return extxml_uci::type::MissionPlanProcessType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanProcessType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanStatusMDT:
      return extxml_uci::type::MissionPlanStatusMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanStatusMT:
      return extxml_uci::type::MissionPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanStatusType:
      return extxml_uci::type::MissionPlanStatusType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanSubplanActivationType:
      return extxml_uci::type::MissionPlanSubplanActivationType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanSubplanActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanValidationCommandMDT:
      return extxml_uci::type::MissionPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanValidationCommandMT:
      return extxml_uci::type::MissionPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanValidationCommandStatusMDT:
      return extxml_uci::type::MissionPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanValidationCommandStatusMT:
      return extxml_uci::type::MissionPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanValidationID_Type:
      return extxml_uci::type::MissionPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanValidationInputsType:
      return extxml_uci::type::MissionPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanValidationMDT:
      return extxml_uci::type::MissionPlanValidationMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionPlanValidationMT:
      return extxml_uci::type::MissionPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionRequirementStatusMDT:
      return extxml_uci::type::MissionRequirementStatusMDT::deserialize(propTree, dynamic_cast<uci::type::MissionRequirementStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionRequirementStatusMT:
      return extxml_uci::type::MissionRequirementStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionRequirementStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionRequirementStatusType:
      return extxml_uci::type::MissionRequirementStatusType::deserialize(propTree, dynamic_cast<uci::type::MissionRequirementStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::missionTraceabilityType:
      return extxml_uci::type::MissionTraceabilityType::deserialize(propTree, dynamic_cast<uci::type::MissionTraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::modeS_InterrogatorAddressType:
      return extxml_uci::type::ModeS_InterrogatorAddressType::deserialize(propTree, dynamic_cast<uci::type::ModeS_InterrogatorAddressType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::modeS_OptionsType:
      return extxml_uci::type::ModeS_OptionsType::deserialize(propTree, dynamic_cast<uci::type::ModeS_OptionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::modifyRF_ThreadInstanceType:
      return extxml_uci::type::ModifyRF_ThreadInstanceType::deserialize(propTree, dynamic_cast<uci::type::ModifyRF_ThreadInstanceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::modRateDataType:
      return extxml_uci::type::ModRateDataType::deserialize(propTree, dynamic_cast<uci::type::ModRateDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::modulationOnPulseDataBaseType:
      return extxml_uci::type::ModulationOnPulseDataBaseType::deserialize(propTree, dynamic_cast<uci::type::ModulationOnPulseDataBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::modulationOnPulseDataType:
      return extxml_uci::type::ModulationOnPulseDataType::deserialize(propTree, dynamic_cast<uci::type::ModulationOnPulseDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::modulationParameterType:
      return extxml_uci::type::ModulationParameterType::deserialize(propTree, dynamic_cast<uci::type::ModulationParameterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mSTGTA_RevA_Type:
      return extxml_uci::type::MSTGTA_RevA_Type::deserialize(propTree, dynamic_cast<uci::type::MSTGTA_RevA_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mSTGTA_Type:
      return extxml_uci::type::MSTGTA_Type::deserialize(propTree, dynamic_cast<uci::type::MSTGTA_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mTI_ActivityStatusBaseType:
      return extxml_uci::type::MTI_ActivityStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::MTI_ActivityStatusBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mTI_ActivityStatusDetailType:
      return extxml_uci::type::MTI_ActivityStatusDetailType::deserialize(propTree, dynamic_cast<uci::type::MTI_ActivityStatusDetailType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mTI_OpZoneFilterAreaType:
      return extxml_uci::type::MTI_OpZoneFilterAreaType::deserialize(propTree, dynamic_cast<uci::type::MTI_OpZoneFilterAreaType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mTI_PredictedActivityDetailType:
      return extxml_uci::type::MTI_PredictedActivityDetailType::deserialize(propTree, dynamic_cast<uci::type::MTI_PredictedActivityDetailType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mTI_STANAG_4607_OpZoneFilterAreaType:
      return extxml_uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::deserialize(propTree, dynamic_cast<uci::type::MTI_STANAG_4607_OpZoneFilterAreaType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mTI_TargetClassType:
      return extxml_uci::type::MTI_TargetClassType::deserialize(propTree, dynamic_cast<uci::type::MTI_TargetClassType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::multiObjectType:
      return extxml_uci::type::MultiObjectType::deserialize(propTree, dynamic_cast<uci::type::MultiObjectType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::multistaticEmitterDataID_Type:
      return extxml_uci::type::MultistaticEmitterDataID_Type::deserialize(propTree, dynamic_cast<uci::type::MultistaticEmitterDataID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::multistaticEmitterDataMDT:
      return extxml_uci::type::MultistaticEmitterDataMDT::deserialize(propTree, dynamic_cast<uci::type::MultistaticEmitterDataMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::multistaticEmitterDataMT:
      return extxml_uci::type::MultistaticEmitterDataMT::deserialize(propTree, dynamic_cast<uci::type::MultistaticEmitterDataMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::multistaticEmitterID_Type:
      return extxml_uci::type::MultistaticEmitterID_Type::deserialize(propTree, dynamic_cast<uci::type::MultistaticEmitterID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::multistaticEmitterType:
      return extxml_uci::type::MultistaticEmitterType::deserialize(propTree, dynamic_cast<uci::type::MultistaticEmitterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::multistaticModeOptionsEmployedType:
      return extxml_uci::type::MultistaticModeOptionsEmployedType::deserialize(propTree, dynamic_cast<uci::type::MultistaticModeOptionsEmployedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::multistaticModeType:
      return extxml_uci::type::MultistaticModeType::deserialize(propTree, dynamic_cast<uci::type::MultistaticModeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::multistaticOptionsSupportedType:
      return extxml_uci::type::MultistaticOptionsSupportedType::deserialize(propTree, dynamic_cast<uci::type::MultistaticOptionsSupportedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::munitionInFlightType:
      return extxml_uci::type::MunitionInFlightType::deserialize(propTree, dynamic_cast<uci::type::MunitionInFlightType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mustFlyLocationType:
      return extxml_uci::type::MustFlyLocationType::deserialize(propTree, dynamic_cast<uci::type::MustFlyLocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mustFlyType:
      return extxml_uci::type::MustFlyType::deserialize(propTree, dynamic_cast<uci::type::MustFlyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mvAnomalyEventID_Type:
      return extxml_uci::type::MvAnomalyEventID_Type::deserialize(propTree, dynamic_cast<uci::type::MvAnomalyEventID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mvAnomalyEventMDT:
      return extxml_uci::type::MvAnomalyEventMDT::deserialize(propTree, dynamic_cast<uci::type::MvAnomalyEventMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mvAnomalyEventMT:
      return extxml_uci::type::MvAnomalyEventMT::deserialize(propTree, dynamic_cast<uci::type::MvAnomalyEventMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::mvObservationType:
      return extxml_uci::type::MvObservationType::deserialize(propTree, dynamic_cast<uci::type::MvObservationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::namedElementType:
      return extxml_uci::type::NamedElementType::deserialize(propTree, dynamic_cast<uci::type::NamedElementType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::nameValuePairType:
      return extxml_uci::type::NameValuePairType::deserialize(propTree, dynamic_cast<uci::type::NameValuePairType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::nameValuePairValueType:
      return extxml_uci::type::NameValuePairValueType::deserialize(propTree, dynamic_cast<uci::type::NameValuePairValueType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::narrowband_SOI_ParamsType:
      return extxml_uci::type::Narrowband_SOI_ParamsType::deserialize(propTree, dynamic_cast<uci::type::Narrowband_SOI_ParamsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::nATO_Link1DataLinkIdentifierType:
      return extxml_uci::type::NATO_Link1DataLinkIdentifierType::deserialize(propTree, dynamic_cast<uci::type::NATO_Link1DataLinkIdentifierType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::nATO_Link1QuerySpecificDataType:
      return extxml_uci::type::NATO_Link1QuerySpecificDataType::deserialize(propTree, dynamic_cast<uci::type::NATO_Link1QuerySpecificDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::navigationReportMDT:
      return extxml_uci::type::NavigationReportMDT::deserialize(propTree, dynamic_cast<uci::type::NavigationReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::navigationReportMT:
      return extxml_uci::type::NavigationReportMT::deserialize(propTree, dynamic_cast<uci::type::NavigationReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::navigationSolutionCorrectionsType:
      return extxml_uci::type::NavigationSolutionCorrectionsType::deserialize(propTree, dynamic_cast<uci::type::NavigationSolutionCorrectionsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::navigationSourceType:
      return extxml_uci::type::NavigationSourceType::deserialize(propTree, dynamic_cast<uci::type::NavigationSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::navigationType:
      return extxml_uci::type::NavigationType::deserialize(propTree, dynamic_cast<uci::type::NavigationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::nED_ConeType:
      return extxml_uci::type::NED_ConeType::deserialize(propTree, dynamic_cast<uci::type::NED_ConeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::nED_LOS_Type:
      return extxml_uci::type::NED_LOS_Type::deserialize(propTree, dynamic_cast<uci::type::NED_LOS_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::networkDataRateRangeType:
      return extxml_uci::type::NetworkDataRateRangeType::deserialize(propTree, dynamic_cast<uci::type::NetworkDataRateRangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::networkEndpointType:
      return extxml_uci::type::NetworkEndpointType::deserialize(propTree, dynamic_cast<uci::type::NetworkEndpointType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::networkLinkID_Type:
      return extxml_uci::type::NetworkLinkID_Type::deserialize(propTree, dynamic_cast<uci::type::NetworkLinkID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::nextPathSegmentType:
      return extxml_uci::type::NextPathSegmentType::deserialize(propTree, dynamic_cast<uci::type::NextPathSegmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::nITF_PackingPlanPET:
      return extxml_uci::type::NITF_PackingPlanPET::deserialize(propTree, dynamic_cast<uci::type::NITF_PackingPlanPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::nITF_PackingPlanRevA_Type:
      return extxml_uci::type::NITF_PackingPlanRevA_Type::deserialize(propTree, dynamic_cast<uci::type::NITF_PackingPlanRevA_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::nITF_PackingPlanType:
      return extxml_uci::type::NITF_PackingPlanType::deserialize(propTree, dynamic_cast<uci::type::NITF_PackingPlanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::normalizationTableType:
      return extxml_uci::type::NormalizationTableType::deserialize(propTree, dynamic_cast<uci::type::NormalizationTableType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::notificationBaseType:
      return extxml_uci::type::NotificationBaseType::deserialize(propTree, dynamic_cast<uci::type::NotificationBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::notificationID_Type:
      return extxml_uci::type::NotificationID_Type::deserialize(propTree, dynamic_cast<uci::type::NotificationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::notificationSourceType:
      return extxml_uci::type::NotificationSourceType::deserialize(propTree, dynamic_cast<uci::type::NotificationSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::oB_CorrelationInputType:
      return extxml_uci::type::OB_CorrelationInputType::deserialize(propTree, dynamic_cast<uci::type::OB_CorrelationInputType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::oB_SensorID_Type:
      return extxml_uci::type::OB_SensorID_Type::deserialize(propTree, dynamic_cast<uci::type::OB_SensorID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::oB_SensorIdentityType:
      return extxml_uci::type::OB_SensorIdentityType::deserialize(propTree, dynamic_cast<uci::type::OB_SensorIdentityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::oB_SensorType:
      return extxml_uci::type::OB_SensorType::deserialize(propTree, dynamic_cast<uci::type::OB_SensorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::objectCorrelationType:
      return extxml_uci::type::ObjectCorrelationType::deserialize(propTree, dynamic_cast<uci::type::ObjectCorrelationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::objectInstanceDamageEstimateType:
      return extxml_uci::type::ObjectInstanceDamageEstimateType::deserialize(propTree, dynamic_cast<uci::type::ObjectInstanceDamageEstimateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::objectKinematicsChoiceType:
      return extxml_uci::type::ObjectKinematicsChoiceType::deserialize(propTree, dynamic_cast<uci::type::ObjectKinematicsChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::objectTypeDamageEstimateType:
      return extxml_uci::type::ObjectTypeDamageEstimateType::deserialize(propTree, dynamic_cast<uci::type::ObjectTypeDamageEstimateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::observationCountsByHourType:
      return extxml_uci::type::ObservationCountsByHourType::deserialize(propTree, dynamic_cast<uci::type::ObservationCountsByHourType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::observationMeasurementID_Type:
      return extxml_uci::type::ObservationMeasurementID_Type::deserialize(propTree, dynamic_cast<uci::type::ObservationMeasurementID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::observationMeasurementReportID_Type:
      return extxml_uci::type::ObservationMeasurementReportID_Type::deserialize(propTree, dynamic_cast<uci::type::ObservationMeasurementReportID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::observationMeasurementReportMDT:
      return extxml_uci::type::ObservationMeasurementReportMDT::deserialize(propTree, dynamic_cast<uci::type::ObservationMeasurementReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::observationMeasurementReportMT:
      return extxml_uci::type::ObservationMeasurementReportMT::deserialize(propTree, dynamic_cast<uci::type::ObservationMeasurementReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::observationMeasurementSourceType:
      return extxml_uci::type::ObservationMeasurementSourceType::deserialize(propTree, dynamic_cast<uci::type::ObservationMeasurementSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::observationMeasurementType:
      return extxml_uci::type::ObservationMeasurementType::deserialize(propTree, dynamic_cast<uci::type::ObservationMeasurementType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::observationReportID_Type:
      return extxml_uci::type::ObservationReportID_Type::deserialize(propTree, dynamic_cast<uci::type::ObservationReportID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::observationReportMDT:
      return extxml_uci::type::ObservationReportMDT::deserialize(propTree, dynamic_cast<uci::type::ObservationReportMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::observationReportMT:
      return extxml_uci::type::ObservationReportMT::deserialize(propTree, dynamic_cast<uci::type::ObservationReportMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::observationsPerTrackLimitsType:
      return extxml_uci::type::ObservationsPerTrackLimitsType::deserialize(propTree, dynamic_cast<uci::type::ObservationsPerTrackLimitsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::offsetLocationErrorType:
      return extxml_uci::type::OffsetLocationErrorType::deserialize(propTree, dynamic_cast<uci::type::OffsetLocationErrorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::offsetLocationType:
      return extxml_uci::type::OffsetLocationType::deserialize(propTree, dynamic_cast<uci::type::OffsetLocationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::offsetTimeType:
      return extxml_uci::type::OffsetTimeType::deserialize(propTree, dynamic_cast<uci::type::OffsetTimeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opaqueCapabilityMDT:
      return extxml_uci::type::OpaqueCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::OpaqueCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opaqueCapabilityMT:
      return extxml_uci::type::OpaqueCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::OpaqueCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opaqueCapabilityStatusMDT:
      return extxml_uci::type::OpaqueCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OpaqueCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opaqueCapabilityStatusMT:
      return extxml_uci::type::OpaqueCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::OpaqueCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opaqueCapabilityType:
      return extxml_uci::type::OpaqueCapabilityType::deserialize(propTree, dynamic_cast<uci::type::OpaqueCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opaqueSettingsCommandMDT:
      return extxml_uci::type::OpaqueSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::OpaqueSettingsCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opaqueSettingsCommandMT:
      return extxml_uci::type::OpaqueSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::OpaqueSettingsCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opaqueSettingsCommandStatusMDT:
      return extxml_uci::type::OpaqueSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OpaqueSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opaqueSettingsCommandStatusMT:
      return extxml_uci::type::OpaqueSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::OpaqueSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opBaseType:
      return extxml_uci::type::OpBaseType::deserialize(propTree, dynamic_cast<uci::type::OpBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opConstraintScoreType:
      return extxml_uci::type::OpConstraintScoreType::deserialize(propTree, dynamic_cast<uci::type::OpConstraintScoreType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opConstraintWeightingType:
      return extxml_uci::type::OpConstraintWeightingType::deserialize(propTree, dynamic_cast<uci::type::OpConstraintWeightingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opConstraintWeightingValueType:
      return extxml_uci::type::OpConstraintWeightingValueType::deserialize(propTree, dynamic_cast<uci::type::OpConstraintWeightingValueType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opDescriptionType:
      return extxml_uci::type::OpDescriptionType::deserialize(propTree, dynamic_cast<uci::type::OpDescriptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operationalScheduleType:
      return extxml_uci::type::OperationalScheduleType::deserialize(propTree, dynamic_cast<uci::type::OperationalScheduleType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operationsAreaDataLinkNativeFilterType:
      return extxml_uci::type::OperationsAreaDataLinkNativeFilterType::deserialize(propTree, dynamic_cast<uci::type::OperationsAreaDataLinkNativeFilterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorActionAutonomousType:
      return extxml_uci::type::OperatorActionAutonomousType::deserialize(propTree, dynamic_cast<uci::type::OperatorActionAutonomousType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorActionCommandMDT:
      return extxml_uci::type::OperatorActionCommandMDT::deserialize(propTree, dynamic_cast<uci::type::OperatorActionCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorActionCommandMT:
      return extxml_uci::type::OperatorActionCommandMT::deserialize(propTree, dynamic_cast<uci::type::OperatorActionCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorActionCommandStatusMDT:
      return extxml_uci::type::OperatorActionCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OperatorActionCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorActionCommandStatusMT:
      return extxml_uci::type::OperatorActionCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::OperatorActionCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorActionControlledType:
      return extxml_uci::type::OperatorActionControlledType::deserialize(propTree, dynamic_cast<uci::type::OperatorActionControlledType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorActionID_Type:
      return extxml_uci::type::OperatorActionID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorActionID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorActionType:
      return extxml_uci::type::OperatorActionType::deserialize(propTree, dynamic_cast<uci::type::OperatorActionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorAnnotationID_Type:
      return extxml_uci::type::OperatorAnnotationID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorAnnotationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorAnnotationMDT:
      return extxml_uci::type::OperatorAnnotationMDT::deserialize(propTree, dynamic_cast<uci::type::OperatorAnnotationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorAnnotationMT:
      return extxml_uci::type::OperatorAnnotationMT::deserialize(propTree, dynamic_cast<uci::type::OperatorAnnotationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorCommTerminalDesignationStatusType:
      return extxml_uci::type::OperatorCommTerminalDesignationStatusType::deserialize(propTree, dynamic_cast<uci::type::OperatorCommTerminalDesignationStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorDefaultActionType:
      return extxml_uci::type::OperatorDefaultActionType::deserialize(propTree, dynamic_cast<uci::type::OperatorDefaultActionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorGatewayDesignationStatusType:
      return extxml_uci::type::OperatorGatewayDesignationStatusType::deserialize(propTree, dynamic_cast<uci::type::OperatorGatewayDesignationStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorID_Type:
      return extxml_uci::type::OperatorID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorLocationOfInterestClauseType:
      return extxml_uci::type::OperatorLocationOfInterestClauseType::deserialize(propTree, dynamic_cast<uci::type::OperatorLocationOfInterestClauseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorLocationOfInterestComparativeType:
      return extxml_uci::type::OperatorLocationOfInterestComparativeType::deserialize(propTree, dynamic_cast<uci::type::OperatorLocationOfInterestComparativeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorLocationOfInterestID_Type:
      return extxml_uci::type::OperatorLocationOfInterestID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorLocationOfInterestID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorLocationOfInterestMDT:
      return extxml_uci::type::OperatorLocationOfInterestMDT::deserialize(propTree, dynamic_cast<uci::type::OperatorLocationOfInterestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorLocationOfInterestMT:
      return extxml_uci::type::OperatorLocationOfInterestMT::deserialize(propTree, dynamic_cast<uci::type::OperatorLocationOfInterestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorMDT:
      return extxml_uci::type::OperatorMDT::deserialize(propTree, dynamic_cast<uci::type::OperatorMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorMT:
      return extxml_uci::type::OperatorMT::deserialize(propTree, dynamic_cast<uci::type::OperatorMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorNameType:
      return extxml_uci::type::OperatorNameType::deserialize(propTree, dynamic_cast<uci::type::OperatorNameType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorNotificationAckID_Type:
      return extxml_uci::type::OperatorNotificationAckID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationAckID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorNotificationAckMDT:
      return extxml_uci::type::OperatorNotificationAckMDT::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationAckMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorNotificationAckMT:
      return extxml_uci::type::OperatorNotificationAckMT::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationAckMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorNotificationActionType:
      return extxml_uci::type::OperatorNotificationActionType::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationActionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorNotificationID_Type:
      return extxml_uci::type::OperatorNotificationID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorNotificationMDT:
      return extxml_uci::type::OperatorNotificationMDT::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorNotificationMT:
      return extxml_uci::type::OperatorNotificationMT::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorNotificationOverrideID_Type:
      return extxml_uci::type::OperatorNotificationOverrideID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationOverrideID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorNotificationOverrideMDT:
      return extxml_uci::type::OperatorNotificationOverrideMDT::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationOverrideMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorNotificationOverrideMT:
      return extxml_uci::type::OperatorNotificationOverrideMT::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationOverrideMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorRecommendationType:
      return extxml_uci::type::OperatorRecommendationType::deserialize(propTree, dynamic_cast<uci::type::OperatorRecommendationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorRoleID_Type:
      return extxml_uci::type::OperatorRoleID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorRoleID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorRoleMDT:
      return extxml_uci::type::OperatorRoleMDT::deserialize(propTree, dynamic_cast<uci::type::OperatorRoleMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorRoleMT:
      return extxml_uci::type::OperatorRoleMT::deserialize(propTree, dynamic_cast<uci::type::OperatorRoleMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::operatorRoleType:
      return extxml_uci::type::OperatorRoleType::deserialize(propTree, dynamic_cast<uci::type::OperatorRoleType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opID_ChoiceType:
      return extxml_uci::type::OpID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::OpID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opInteractingAssetType:
      return extxml_uci::type::OpInteractingAssetType::deserialize(propTree, dynamic_cast<uci::type::OpInteractingAssetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opLineID_Type:
      return extxml_uci::type::OpLineID_Type::deserialize(propTree, dynamic_cast<uci::type::OpLineID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opLineMDT:
      return extxml_uci::type::OpLineMDT::deserialize(propTree, dynamic_cast<uci::type::OpLineMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opLineMT:
      return extxml_uci::type::OpLineMT::deserialize(propTree, dynamic_cast<uci::type::OpLineMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opLineType:
      return extxml_uci::type::OpLineType::deserialize(propTree, dynamic_cast<uci::type::OpLineType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opNotificationEXT:
      return extxml_uci::type::OpNotificationEXT::deserialize(propTree, dynamic_cast<uci::type::OpNotificationEXT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opNotificationMDT:
      return extxml_uci::type::OpNotificationMDT::deserialize(propTree, dynamic_cast<uci::type::OpNotificationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opNotificationMT:
      return extxml_uci::type::OpNotificationMT::deserialize(propTree, dynamic_cast<uci::type::OpNotificationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opPointBaseType:
      return extxml_uci::type::OpPointBaseType::deserialize(propTree, dynamic_cast<uci::type::OpPointBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opPointCategoriesType:
      return extxml_uci::type::OpPointCategoriesType::deserialize(propTree, dynamic_cast<uci::type::OpPointCategoriesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opPointCategoriesUniqueDataType:
      return extxml_uci::type::OpPointCategoriesUniqueDataType::deserialize(propTree, dynamic_cast<uci::type::OpPointCategoriesUniqueDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opPointChoiceType:
      return extxml_uci::type::OpPointChoiceType::deserialize(propTree, dynamic_cast<uci::type::OpPointChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opPointID_Type:
      return extxml_uci::type::OpPointID_Type::deserialize(propTree, dynamic_cast<uci::type::OpPointID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opPointMDT:
      return extxml_uci::type::OpPointMDT::deserialize(propTree, dynamic_cast<uci::type::OpPointMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opPointMT:
      return extxml_uci::type::OpPointMT::deserialize(propTree, dynamic_cast<uci::type::OpPointMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opPointPositionType:
      return extxml_uci::type::OpPointPositionType::deserialize(propTree, dynamic_cast<uci::type::OpPointPositionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opPointReferenceType:
      return extxml_uci::type::OpPointReferenceType::deserialize(propTree, dynamic_cast<uci::type::OpPointReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opRoutingID_Type:
      return extxml_uci::type::OpRoutingID_Type::deserialize(propTree, dynamic_cast<uci::type::OpRoutingID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opRoutingMDT:
      return extxml_uci::type::OpRoutingMDT::deserialize(propTree, dynamic_cast<uci::type::OpRoutingMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opRoutingMT:
      return extxml_uci::type::OpRoutingMT::deserialize(propTree, dynamic_cast<uci::type::OpRoutingMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opsClockDayType:
      return extxml_uci::type::OpsClockDayType::deserialize(propTree, dynamic_cast<uci::type::OpsClockDayType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opticalCollectionConstraintsType:
      return extxml_uci::type::OpticalCollectionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::OpticalCollectionConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opticalImageParamsType:
      return extxml_uci::type::OpticalImageParamsType::deserialize(propTree, dynamic_cast<uci::type::OpticalImageParamsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opVolumeID_Type:
      return extxml_uci::type::OpVolumeID_Type::deserialize(propTree, dynamic_cast<uci::type::OpVolumeID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opVolumeKinematicsType:
      return extxml_uci::type::OpVolumeKinematicsType::deserialize(propTree, dynamic_cast<uci::type::OpVolumeKinematicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opVolumeMDT:
      return extxml_uci::type::OpVolumeMDT::deserialize(propTree, dynamic_cast<uci::type::OpVolumeMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opVolumeMT:
      return extxml_uci::type::OpVolumeMT::deserialize(propTree, dynamic_cast<uci::type::OpVolumeMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opVolumeType:
      return extxml_uci::type::OpVolumeType::deserialize(propTree, dynamic_cast<uci::type::OpVolumeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opZoneCategoryType:
      return extxml_uci::type::OpZoneCategoryType::deserialize(propTree, dynamic_cast<uci::type::OpZoneCategoryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opZoneFilterAreaPET:
      return extxml_uci::type::OpZoneFilterAreaPET::deserialize(propTree, dynamic_cast<uci::type::OpZoneFilterAreaPET&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opZoneID_Type:
      return extxml_uci::type::OpZoneID_Type::deserialize(propTree, dynamic_cast<uci::type::OpZoneID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opZoneJammingType:
      return extxml_uci::type::OpZoneJammingType::deserialize(propTree, dynamic_cast<uci::type::OpZoneJammingType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opZoneMDT:
      return extxml_uci::type::OpZoneMDT::deserialize(propTree, dynamic_cast<uci::type::OpZoneMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opZoneMissileDataType:
      return extxml_uci::type::OpZoneMissileDataType::deserialize(propTree, dynamic_cast<uci::type::OpZoneMissileDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opZoneMT:
      return extxml_uci::type::OpZoneMT::deserialize(propTree, dynamic_cast<uci::type::OpZoneMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opZoneNoFireType:
      return extxml_uci::type::OpZoneNoFireType::deserialize(propTree, dynamic_cast<uci::type::OpZoneNoFireType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opZoneNoFlyType:
      return extxml_uci::type::OpZoneNoFlyType::deserialize(propTree, dynamic_cast<uci::type::OpZoneNoFlyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opZoneTrackAreaDomainSourceType:
      return extxml_uci::type::OpZoneTrackAreaDomainSourceType::deserialize(propTree, dynamic_cast<uci::type::OpZoneTrackAreaDomainSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opZoneType:
      return extxml_uci::type::OpZoneType::deserialize(propTree, dynamic_cast<uci::type::OpZoneType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opZoneWeaponRestrictionType:
      return extxml_uci::type::OpZoneWeaponRestrictionType::deserialize(propTree, dynamic_cast<uci::type::OpZoneWeaponRestrictionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::opZoneWeatherType:
      return extxml_uci::type::OpZoneWeatherType::deserialize(propTree, dynamic_cast<uci::type::OpZoneWeatherType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitAccuracyType:
      return extxml_uci::type::OrbitAccuracyType::deserialize(propTree, dynamic_cast<uci::type::OrbitAccuracyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityExecutionStatusType:
      return extxml_uci::type::OrbitActivityExecutionStatusType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityExecutionStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityKinematicReferenceType:
      return extxml_uci::type::OrbitActivityKinematicReferenceType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityKinematicReferenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityMetricsType:
      return extxml_uci::type::OrbitActivityMetricsType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityMetricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanActivationType:
      return extxml_uci::type::OrbitActivityPlanActivationType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanApprovalStatusMDT:
      return extxml_uci::type::OrbitActivityPlanApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanApprovalStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanApprovalStatusMT:
      return extxml_uci::type::OrbitActivityPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanCommandID_ChoiceType:
      return extxml_uci::type::OrbitActivityPlanCommandID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanCommandID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanCommandID_Type:
      return extxml_uci::type::OrbitActivityPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanCommandID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanCommandMDT:
      return extxml_uci::type::OrbitActivityPlanCommandMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanCommandMT:
      return extxml_uci::type::OrbitActivityPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanCommandStatusMDT:
      return extxml_uci::type::OrbitActivityPlanCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanCommandStatusMT:
      return extxml_uci::type::OrbitActivityPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanConstraintType:
      return extxml_uci::type::OrbitActivityPlanConstraintType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanExecutionStateType:
      return extxml_uci::type::OrbitActivityPlanExecutionStateType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanExecutionStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanExecutionStatusMDT:
      return extxml_uci::type::OrbitActivityPlanExecutionStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanExecutionStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanExecutionStatusMT:
      return extxml_uci::type::OrbitActivityPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanID_Type:
      return extxml_uci::type::OrbitActivityPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanInputsType:
      return extxml_uci::type::OrbitActivityPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanInvalidType:
      return extxml_uci::type::OrbitActivityPlanInvalidType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanInvalidType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanMDT:
      return extxml_uci::type::OrbitActivityPlanMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanMT:
      return extxml_uci::type::OrbitActivityPlanMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanStatusMDT:
      return extxml_uci::type::OrbitActivityPlanStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanStatusMT:
      return extxml_uci::type::OrbitActivityPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanStatusType:
      return extxml_uci::type::OrbitActivityPlanStatusType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanType:
      return extxml_uci::type::OrbitActivityPlanType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanValidationCommandMDT:
      return extxml_uci::type::OrbitActivityPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanValidationCommandMT:
      return extxml_uci::type::OrbitActivityPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanValidationCommandStatusMDT:
      return extxml_uci::type::OrbitActivityPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanValidationCommandStatusMT:
      return extxml_uci::type::OrbitActivityPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanValidationID_Type:
      return extxml_uci::type::OrbitActivityPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanValidationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanValidationInputsType:
      return extxml_uci::type::OrbitActivityPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanValidationInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanValidationMDT:
      return extxml_uci::type::OrbitActivityPlanValidationMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanValidationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityPlanValidationMT:
      return extxml_uci::type::OrbitActivityPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanValidationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitActivityType:
      return extxml_uci::type::OrbitActivityType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalAnalysisObjectType:
      return extxml_uci::type::OrbitalAnalysisObjectType::deserialize(propTree, dynamic_cast<uci::type::OrbitalAnalysisObjectType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalConjunctionID_Type:
      return extxml_uci::type::OrbitalConjunctionID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitalConjunctionID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalConjunctionObjectType:
      return extxml_uci::type::OrbitalConjunctionObjectType::deserialize(propTree, dynamic_cast<uci::type::OrbitalConjunctionObjectType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalConjunctionType:
      return extxml_uci::type::OrbitalConjunctionType::deserialize(propTree, dynamic_cast<uci::type::OrbitalConjunctionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDebrisCloudID_Type:
      return extxml_uci::type::OrbitalDebrisCloudID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisCloudID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDebrisCloudType:
      return extxml_uci::type::OrbitalDebrisCloudType::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisCloudType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDebrisEstimateID_Type:
      return extxml_uci::type::OrbitalDebrisEstimateID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisEstimateID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDebrisEstimateMDT:
      return extxml_uci::type::OrbitalDebrisEstimateMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisEstimateMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDebrisEstimateMT:
      return extxml_uci::type::OrbitalDebrisEstimateMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisEstimateMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDebrisEstimateRequestMDT:
      return extxml_uci::type::OrbitalDebrisEstimateRequestMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisEstimateRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDebrisEstimateRequestMT:
      return extxml_uci::type::OrbitalDebrisEstimateRequestMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisEstimateRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDebrisEstimateRequestStatusMDT:
      return extxml_uci::type::OrbitalDebrisEstimateRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisEstimateRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDebrisEstimateRequestStatusMT:
      return extxml_uci::type::OrbitalDebrisEstimateRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisEstimateRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDebrisEstimateType:
      return extxml_uci::type::OrbitalDebrisEstimateType::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisEstimateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDebrisID_Type:
      return extxml_uci::type::OrbitalDebrisID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDebrisType:
      return extxml_uci::type::OrbitalDebrisType::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDeltaVelocity_A_Type:
      return extxml_uci::type::OrbitalDeltaVelocity_A_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitalDeltaVelocity_A_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDeltaVelocity_B_Type:
      return extxml_uci::type::OrbitalDeltaVelocity_B_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitalDeltaVelocity_B_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalDockingEventType:
      return extxml_uci::type::OrbitalDockingEventType::deserialize(propTree, dynamic_cast<uci::type::OrbitalDockingEventType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalElementSetParametersType:
      return extxml_uci::type::OrbitalElementSetParametersType::deserialize(propTree, dynamic_cast<uci::type::OrbitalElementSetParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalElementSetRequestParametersType:
      return extxml_uci::type::OrbitalElementSetRequestParametersType::deserialize(propTree, dynamic_cast<uci::type::OrbitalElementSetRequestParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalElementSetSourceType:
      return extxml_uci::type::OrbitalElementSetSourceType::deserialize(propTree, dynamic_cast<uci::type::OrbitalElementSetSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalEphemerisChoiceType:
      return extxml_uci::type::OrbitalEphemerisChoiceType::deserialize(propTree, dynamic_cast<uci::type::OrbitalEphemerisChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalEphemerisParametersType:
      return extxml_uci::type::OrbitalEphemerisParametersType::deserialize(propTree, dynamic_cast<uci::type::OrbitalEphemerisParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalEphemerisRequestParametersType:
      return extxml_uci::type::OrbitalEphemerisRequestParametersType::deserialize(propTree, dynamic_cast<uci::type::OrbitalEphemerisRequestParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalEphemerisSourceType:
      return extxml_uci::type::OrbitalEphemerisSourceType::deserialize(propTree, dynamic_cast<uci::type::OrbitalEphemerisSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalEphemerisType:
      return extxml_uci::type::OrbitalEphemerisType::deserialize(propTree, dynamic_cast<uci::type::OrbitalEphemerisType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalFiltersQueryType:
      return extxml_uci::type::OrbitalFiltersQueryType::deserialize(propTree, dynamic_cast<uci::type::OrbitalFiltersQueryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalKinematicsAccelerationType:
      return extxml_uci::type::OrbitalKinematicsAccelerationType::deserialize(propTree, dynamic_cast<uci::type::OrbitalKinematicsAccelerationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalKinematicsChoiceType:
      return extxml_uci::type::OrbitalKinematicsChoiceType::deserialize(propTree, dynamic_cast<uci::type::OrbitalKinematicsChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalKinematicsFrameChoiceType:
      return extxml_uci::type::OrbitalKinematicsFrameChoiceType::deserialize(propTree, dynamic_cast<uci::type::OrbitalKinematicsFrameChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalKinematicsObjectRelativeType:
      return extxml_uci::type::OrbitalKinematicsObjectRelativeType::deserialize(propTree, dynamic_cast<uci::type::OrbitalKinematicsObjectRelativeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalKinematicsRelativeEphemerisType:
      return extxml_uci::type::OrbitalKinematicsRelativeEphemerisType::deserialize(propTree, dynamic_cast<uci::type::OrbitalKinematicsRelativeEphemerisType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalKinematicsRelativeStateVectorType:
      return extxml_uci::type::OrbitalKinematicsRelativeStateVectorType::deserialize(propTree, dynamic_cast<uci::type::OrbitalKinematicsRelativeStateVectorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalKinematicsStandardEphemerisType:
      return extxml_uci::type::OrbitalKinematicsStandardEphemerisType::deserialize(propTree, dynamic_cast<uci::type::OrbitalKinematicsStandardEphemerisType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalKinematicsStandardFrameChoiceType:
      return extxml_uci::type::OrbitalKinematicsStandardFrameChoiceType::deserialize(propTree, dynamic_cast<uci::type::OrbitalKinematicsStandardFrameChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalKinematicsTLE_SV_Type:
      return extxml_uci::type::OrbitalKinematicsTLE_SV_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitalKinematicsTLE_SV_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalKinematicsVelocityType:
      return extxml_uci::type::OrbitalKinematicsVelocityType::deserialize(propTree, dynamic_cast<uci::type::OrbitalKinematicsVelocityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalManeuverDetailsBaseType:
      return extxml_uci::type::OrbitalManeuverDetailsBaseType::deserialize(propTree, dynamic_cast<uci::type::OrbitalManeuverDetailsBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalManeuverDetailsType:
      return extxml_uci::type::OrbitalManeuverDetailsType::deserialize(propTree, dynamic_cast<uci::type::OrbitalManeuverDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalManeuverID_Type:
      return extxml_uci::type::OrbitalManeuverID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitalManeuverID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalModelType:
      return extxml_uci::type::OrbitalModelType::deserialize(propTree, dynamic_cast<uci::type::OrbitalModelType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalObjectComparisonDeltaType:
      return extxml_uci::type::OrbitalObjectComparisonDeltaType::deserialize(propTree, dynamic_cast<uci::type::OrbitalObjectComparisonDeltaType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalObjectKinematicsSourceType:
      return extxml_uci::type::OrbitalObjectKinematicsSourceType::deserialize(propTree, dynamic_cast<uci::type::OrbitalObjectKinematicsSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalObjectMetricsType:
      return extxml_uci::type::OrbitalObjectMetricsType::deserialize(propTree, dynamic_cast<uci::type::OrbitalObjectMetricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalProximityOperationsEventType:
      return extxml_uci::type::OrbitalProximityOperationsEventType::deserialize(propTree, dynamic_cast<uci::type::OrbitalProximityOperationsEventType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalRendezvousEventType:
      return extxml_uci::type::OrbitalRendezvousEventType::deserialize(propTree, dynamic_cast<uci::type::OrbitalRendezvousEventType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSeparationEventType:
      return extxml_uci::type::OrbitalSeparationEventType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSeparationEventType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSingleVectorParametersType:
      return extxml_uci::type::OrbitalSingleVectorParametersType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSingleVectorParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceActivityDetailType:
      return extxml_uci::type::OrbitalSurveillanceActivityDetailType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceActivityDetailType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceActivityMDT:
      return extxml_uci::type::OrbitalSurveillanceActivityMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceActivityMT:
      return extxml_uci::type::OrbitalSurveillanceActivityMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceActivityType:
      return extxml_uci::type::OrbitalSurveillanceActivityType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceCapabilityMDT:
      return extxml_uci::type::OrbitalSurveillanceCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceCapabilityMT:
      return extxml_uci::type::OrbitalSurveillanceCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceCapabilityStatusMDT:
      return extxml_uci::type::OrbitalSurveillanceCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceCapabilityStatusMT:
      return extxml_uci::type::OrbitalSurveillanceCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceCapabilityType:
      return extxml_uci::type::OrbitalSurveillanceCapabilityType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceCollectionRequirementsType:
      return extxml_uci::type::OrbitalSurveillanceCollectionRequirementsType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceCollectionRequirementsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceLocationTargetType:
      return extxml_uci::type::OrbitalSurveillanceLocationTargetType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceLocationTargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceObjectBaseType:
      return extxml_uci::type::OrbitalSurveillanceObjectBaseType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceObjectBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceObjectsType:
      return extxml_uci::type::OrbitalSurveillanceObjectsType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceObjectsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceObjectType:
      return extxml_uci::type::OrbitalSurveillanceObjectType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceObjectType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSearchType:
      return extxml_uci::type::OrbitalSurveillanceSearchType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSearchType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorActivityMDT:
      return extxml_uci::type::OrbitalSurveillanceSensorActivityMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorActivityMT:
      return extxml_uci::type::OrbitalSurveillanceSensorActivityMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorActivityType:
      return extxml_uci::type::OrbitalSurveillanceSensorActivityType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityMDT:
      return extxml_uci::type::OrbitalSurveillanceSensorCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityMT:
      return extxml_uci::type::OrbitalSurveillanceSensorCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityStatusMDT:
      return extxml_uci::type::OrbitalSurveillanceSensorCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityStatusMT:
      return extxml_uci::type::OrbitalSurveillanceSensorCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityType:
      return extxml_uci::type::OrbitalSurveillanceSensorCapabilityType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorMinimumCollectionRequirementsType:
      return extxml_uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorMinimumCollectionRequirementsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorMinimumSizeType:
      return extxml_uci::type::OrbitalSurveillanceSensorMinimumSizeType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorMinimumSizeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorReportingCategoriesType:
      return extxml_uci::type::OrbitalSurveillanceSensorReportingCategoriesType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorReportingCategoriesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorSensitivityConstraintType:
      return extxml_uci::type::OrbitalSurveillanceSensorSensitivityConstraintType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorSensitivityConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorSubCapabilityType:
      return extxml_uci::type::OrbitalSurveillanceSensorSubCapabilityType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorSubCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorTargetType:
      return extxml_uci::type::OrbitalSurveillanceSensorTargetType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorTargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorTaskBaseType:
      return extxml_uci::type::OrbitalSurveillanceSensorTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorTaskBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSensorTaskType:
      return extxml_uci::type::OrbitalSurveillanceSensorTaskType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorTaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSpecificDataType:
      return extxml_uci::type::OrbitalSurveillanceSpecificDataType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSpecificDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceSubCapabilityDetailsChoiceType:
      return extxml_uci::type::OrbitalSurveillanceSubCapabilityDetailsChoiceType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSubCapabilityDetailsChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceTargetType:
      return extxml_uci::type::OrbitalSurveillanceTargetType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceTargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceTaskBaseType:
      return extxml_uci::type::OrbitalSurveillanceTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceTaskBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceTaskType:
      return extxml_uci::type::OrbitalSurveillanceTaskType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceTaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalSurveillanceZoneTargetType:
      return extxml_uci::type::OrbitalSurveillanceZoneTargetType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceZoneTargetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalToleranceValuesType:
      return extxml_uci::type::OrbitalToleranceValuesType::deserialize(propTree, dynamic_cast<uci::type::OrbitalToleranceValuesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalUndockingEventType:
      return extxml_uci::type::OrbitalUndockingEventType::deserialize(propTree, dynamic_cast<uci::type::OrbitalUndockingEventType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalVCM_ParametersType:
      return extxml_uci::type::OrbitalVCM_ParametersType::deserialize(propTree, dynamic_cast<uci::type::OrbitalVCM_ParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalVCM_RequestParametersType:
      return extxml_uci::type::OrbitalVCM_RequestParametersType::deserialize(propTree, dynamic_cast<uci::type::OrbitalVCM_RequestParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalVCM_Type:
      return extxml_uci::type::OrbitalVCM_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitalVCM_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitalVolumeType:
      return extxml_uci::type::OrbitalVolumeType::deserialize(propTree, dynamic_cast<uci::type::OrbitalVolumeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitBreakupEventDetailsType:
      return extxml_uci::type::OrbitBreakupEventDetailsType::deserialize(propTree, dynamic_cast<uci::type::OrbitBreakupEventDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitChangeActivityMDT:
      return extxml_uci::type::OrbitChangeActivityMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeActivityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitChangeActivityMT:
      return extxml_uci::type::OrbitChangeActivityMT::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeActivityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitChangeActivityType:
      return extxml_uci::type::OrbitChangeActivityType::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeActivityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitChangeCapabilityMDT:
      return extxml_uci::type::OrbitChangeCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeCapabilityMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitChangeCapabilityMT:
      return extxml_uci::type::OrbitChangeCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeCapabilityMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitChangeCapabilityStatusMDT:
      return extxml_uci::type::OrbitChangeCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitChangeCapabilityStatusMT:
      return extxml_uci::type::OrbitChangeCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeCapabilityStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitChangeCapabilityType:
      return extxml_uci::type::OrbitChangeCapabilityType::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeCapabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitChangeChoiceType:
      return extxml_uci::type::OrbitChangeChoiceType::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitChangeMagnitudeType:
      return extxml_uci::type::OrbitChangeMagnitudeType::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeMagnitudeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitChangeTaskBaseType:
      return extxml_uci::type::OrbitChangeTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeTaskBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitChangeTaskType:
      return extxml_uci::type::OrbitChangeTaskType::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeTaskType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitCollisionType:
      return extxml_uci::type::OrbitCollisionType::deserialize(propTree, dynamic_cast<uci::type::OrbitCollisionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitConflictObjectType:
      return extxml_uci::type::OrbitConflictObjectType::deserialize(propTree, dynamic_cast<uci::type::OrbitConflictObjectType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitConjunctionAssessmentID_Type:
      return extxml_uci::type::OrbitConjunctionAssessmentID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitConjunctionAssessmentID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitConjunctionAssessmentMDT:
      return extxml_uci::type::OrbitConjunctionAssessmentMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitConjunctionAssessmentMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitConjunctionAssessmentMT:
      return extxml_uci::type::OrbitConjunctionAssessmentMT::deserialize(propTree, dynamic_cast<uci::type::OrbitConjunctionAssessmentMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitConjunctionAssessmentRequestMDT:
      return extxml_uci::type::OrbitConjunctionAssessmentRequestMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitConjunctionAssessmentRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitConjunctionAssessmentRequestMT:
      return extxml_uci::type::OrbitConjunctionAssessmentRequestMT::deserialize(propTree, dynamic_cast<uci::type::OrbitConjunctionAssessmentRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitConjunctionAssessmentRequestStatusMDT:
      return extxml_uci::type::OrbitConjunctionAssessmentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitConjunctionAssessmentRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitConjunctionAssessmentRequestStatusMT:
      return extxml_uci::type::OrbitConjunctionAssessmentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitConjunctionAssessmentRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitDurationType:
      return extxml_uci::type::OrbitDurationType::deserialize(propTree, dynamic_cast<uci::type::OrbitDurationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitEstimationStartType:
      return extxml_uci::type::OrbitEstimationStartType::deserialize(propTree, dynamic_cast<uci::type::OrbitEstimationStartType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitExecutionPlanSetType:
      return extxml_uci::type::OrbitExecutionPlanSetType::deserialize(propTree, dynamic_cast<uci::type::OrbitExecutionPlanSetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitGuidelineType:
      return extxml_uci::type::OrbitGuidelineType::deserialize(propTree, dynamic_cast<uci::type::OrbitGuidelineType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitKinematicsChangeSummaryType:
      return extxml_uci::type::OrbitKinematicsChangeSummaryType::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsChangeSummaryType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitKinematicsParametersType:
      return extxml_uci::type::OrbitKinematicsParametersType::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitKinematicsReferencesType:
      return extxml_uci::type::OrbitKinematicsReferencesType::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsReferencesType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitKinematicsSequenceID_Type:
      return extxml_uci::type::OrbitKinematicsSequenceID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsSequenceID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitKinematicsSequenceInsertionType:
      return extxml_uci::type::OrbitKinematicsSequenceInsertionType::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsSequenceInsertionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitKinematicsSequenceModificationDetailsType:
      return extxml_uci::type::OrbitKinematicsSequenceModificationDetailsType::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsSequenceModificationDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitKinematicsSequenceReplaceOrModifyChoiceType:
      return extxml_uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsSequenceReplaceOrModifyChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitKinematicsSequenceTrimType:
      return extxml_uci::type::OrbitKinematicsSequenceTrimType::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsSequenceTrimType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitKinematicsSequenceType:
      return extxml_uci::type::OrbitKinematicsSequenceType::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsSequenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitKinematicsSetParametersType:
      return extxml_uci::type::OrbitKinematicsSetParametersType::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsSetParametersType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitKinematicsSourceType:
      return extxml_uci::type::OrbitKinematicsSourceType::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsSourceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitKinematicsType:
      return extxml_uci::type::OrbitKinematicsType::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitManeuverSegmentID_Type:
      return extxml_uci::type::OrbitManeuverSegmentID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitManeuverSegmentID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitManeuverSegmentMetricsType:
      return extxml_uci::type::OrbitManeuverSegmentMetricsType::deserialize(propTree, dynamic_cast<uci::type::OrbitManeuverSegmentMetricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitManeuverSegmentType:
      return extxml_uci::type::OrbitManeuverSegmentType::deserialize(propTree, dynamic_cast<uci::type::OrbitManeuverSegmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitManeuverSequenceMetricsType:
      return extxml_uci::type::OrbitManeuverSequenceMetricsType::deserialize(propTree, dynamic_cast<uci::type::OrbitManeuverSequenceMetricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitManeuverType:
      return extxml_uci::type::OrbitManeuverType::deserialize(propTree, dynamic_cast<uci::type::OrbitManeuverType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitMetricsID_Type:
      return extxml_uci::type::OrbitMetricsID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitMetricsID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitMetricsMDT:
      return extxml_uci::type::OrbitMetricsMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitMetricsMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitMetricsMT:
      return extxml_uci::type::OrbitMetricsMT::deserialize(propTree, dynamic_cast<uci::type::OrbitMetricsMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitMetricsRequestMDT:
      return extxml_uci::type::OrbitMetricsRequestMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitMetricsRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitMetricsRequestMT:
      return extxml_uci::type::OrbitMetricsRequestMT::deserialize(propTree, dynamic_cast<uci::type::OrbitMetricsRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitMetricsRequestStatusMDT:
      return extxml_uci::type::OrbitMetricsRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitMetricsRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitMetricsRequestStatusMT:
      return extxml_uci::type::OrbitMetricsRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitMetricsRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitModificationDetailsType:
      return extxml_uci::type::OrbitModificationDetailsType::deserialize(propTree, dynamic_cast<uci::type::OrbitModificationDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitModificationRequestMDT:
      return extxml_uci::type::OrbitModificationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitModificationRequestMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitModificationRequestMT:
      return extxml_uci::type::OrbitModificationRequestMT::deserialize(propTree, dynamic_cast<uci::type::OrbitModificationRequestMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitModificationRequestStatusMDT:
      return extxml_uci::type::OrbitModificationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitModificationRequestStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitModificationRequestStatusMT:
      return extxml_uci::type::OrbitModificationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitModificationRequestStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitObjectBreakupType:
      return extxml_uci::type::OrbitObjectBreakupType::deserialize(propTree, dynamic_cast<uci::type::OrbitObjectBreakupType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanActivationType:
      return extxml_uci::type::OrbitPlanActivationType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanActivationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanApprovalStatusMDT:
      return extxml_uci::type::OrbitPlanApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanApprovalStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanApprovalStatusMT:
      return extxml_uci::type::OrbitPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanCommandID_ChoiceType:
      return extxml_uci::type::OrbitPlanCommandID_ChoiceType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanCommandID_ChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanCommandID_Type:
      return extxml_uci::type::OrbitPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanCommandID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanCommandMDT:
      return extxml_uci::type::OrbitPlanCommandMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanCommandMT:
      return extxml_uci::type::OrbitPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanCommandStatusMDT:
      return extxml_uci::type::OrbitPlanCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanCommandStatusMT:
      return extxml_uci::type::OrbitPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanConstraintType:
      return extxml_uci::type::OrbitPlanConstraintType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanConstraintType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanExecutionStateType:
      return extxml_uci::type::OrbitPlanExecutionStateType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanExecutionStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanExecutionStatusMDT:
      return extxml_uci::type::OrbitPlanExecutionStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanExecutionStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanExecutionStatusMT:
      return extxml_uci::type::OrbitPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanID_Type:
      return extxml_uci::type::OrbitPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanInputsType:
      return extxml_uci::type::OrbitPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanInvalidType:
      return extxml_uci::type::OrbitPlanInvalidType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanInvalidType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanMDT:
      return extxml_uci::type::OrbitPlanMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanMT:
      return extxml_uci::type::OrbitPlanMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanningCandidateType:
      return extxml_uci::type::OrbitPlanningCandidateType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanningCandidateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanningStateType:
      return extxml_uci::type::OrbitPlanningStateType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanningStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanPartsType:
      return extxml_uci::type::OrbitPlanPartsType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanPartsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanProcessDescriptionType:
      return extxml_uci::type::OrbitPlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanProcessType:
      return extxml_uci::type::OrbitPlanProcessType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanProcessType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanStatusMDT:
      return extxml_uci::type::OrbitPlanStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanStatusMT:
      return extxml_uci::type::OrbitPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanStatusType:
      return extxml_uci::type::OrbitPlanStatusType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanType:
      return extxml_uci::type::OrbitPlanType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanValidationCommandMDT:
      return extxml_uci::type::OrbitPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanValidationCommandMT:
      return extxml_uci::type::OrbitPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanValidationCommandStatusMDT:
      return extxml_uci::type::OrbitPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanValidationCommandStatusMT:
      return extxml_uci::type::OrbitPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanValidationID_Type:
      return extxml_uci::type::OrbitPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanValidationInputsType:
      return extxml_uci::type::OrbitPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationInputsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanValidationInvalidManeuverSegmentType:
      return extxml_uci::type::OrbitPlanValidationInvalidManeuverSegmentType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationInvalidManeuverSegmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanValidationInvalidSequenceType:
      return extxml_uci::type::OrbitPlanValidationInvalidSequenceType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationInvalidSequenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanValidationMDT:
      return extxml_uci::type::OrbitPlanValidationMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitPlanValidationMT:
      return extxml_uci::type::OrbitPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitRegimeType:
      return extxml_uci::type::OrbitRegimeType::deserialize(propTree, dynamic_cast<uci::type::OrbitRegimeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitSequenceCompletedType:
      return extxml_uci::type::OrbitSequenceCompletedType::deserialize(propTree, dynamic_cast<uci::type::OrbitSequenceCompletedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitSequenceEstimateType:
      return extxml_uci::type::OrbitSequenceEstimateType::deserialize(propTree, dynamic_cast<uci::type::OrbitSequenceEstimateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitSequenceInsertionPositionChoiceType:
      return extxml_uci::type::OrbitSequenceInsertionPositionChoiceType::deserialize(propTree, dynamic_cast<uci::type::OrbitSequenceInsertionPositionChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitTransitionSequenceType:
      return extxml_uci::type::OrbitTransitionSequenceType::deserialize(propTree, dynamic_cast<uci::type::OrbitTransitionSequenceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitType:
      return extxml_uci::type::OrbitType::deserialize(propTree, dynamic_cast<uci::type::OrbitType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orbitValidationErrorType:
      return extxml_uci::type::OrbitValidationErrorType::deserialize(propTree, dynamic_cast<uci::type::OrbitValidationErrorType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orderOfBattleC2_EmitterType:
      return extxml_uci::type::OrderOfBattleC2_EmitterType::deserialize(propTree, dynamic_cast<uci::type::OrderOfBattleC2_EmitterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orderOfBattleEmitterType:
      return extxml_uci::type::OrderOfBattleEmitterType::deserialize(propTree, dynamic_cast<uci::type::OrderOfBattleEmitterType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orderOfBattleID_Type:
      return extxml_uci::type::OrderOfBattleID_Type::deserialize(propTree, dynamic_cast<uci::type::OrderOfBattleID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orderOfBattleMDT:
      return extxml_uci::type::OrderOfBattleMDT::deserialize(propTree, dynamic_cast<uci::type::OrderOfBattleMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orderOfBattleMT:
      return extxml_uci::type::OrderOfBattleMT::deserialize(propTree, dynamic_cast<uci::type::OrderOfBattleMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orderOfBattleTimestampsType:
      return extxml_uci::type::OrderOfBattleTimestampsType::deserialize(propTree, dynamic_cast<uci::type::OrderOfBattleTimestampsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orderTraceabilityType:
      return extxml_uci::type::OrderTraceabilityType::deserialize(propTree, dynamic_cast<uci::type::OrderTraceabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orientationAccelerationType:
      return extxml_uci::type::OrientationAccelerationType::deserialize(propTree, dynamic_cast<uci::type::OrientationAccelerationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orientationCovarianceType:
      return extxml_uci::type::OrientationCovarianceType::deserialize(propTree, dynamic_cast<uci::type::OrientationCovarianceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orientationRateType:
      return extxml_uci::type::OrientationRateType::deserialize(propTree, dynamic_cast<uci::type::OrientationRateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::orientationType:
      return extxml_uci::type::OrientationType::deserialize(propTree, dynamic_cast<uci::type::OrientationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::otherSystemConstrainingPlansType:
      return extxml_uci::type::OtherSystemConstrainingPlansType::deserialize(propTree, dynamic_cast<uci::type::OtherSystemConstrainingPlansType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::packageID_Type:
      return extxml_uci::type::PackageID_Type::deserialize(propTree, dynamic_cast<uci::type::PackageID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::packageMDT:
      return extxml_uci::type::PackageMDT::deserialize(propTree, dynamic_cast<uci::type::PackageMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::packageMT:
      return extxml_uci::type::PackageMT::deserialize(propTree, dynamic_cast<uci::type::PackageMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::packagePartnerBaseType:
      return extxml_uci::type::PackagePartnerBaseType::deserialize(propTree, dynamic_cast<uci::type::PackagePartnerBaseType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::packagePartnerStatusType:
      return extxml_uci::type::PackagePartnerStatusType::deserialize(propTree, dynamic_cast<uci::type::PackagePartnerStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::packageStatusMDT:
      return extxml_uci::type::PackageStatusMDT::deserialize(propTree, dynamic_cast<uci::type::PackageStatusMDT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::packageStatusMT:
      return extxml_uci::type::PackageStatusMT::deserialize(propTree, dynamic_cast<uci::type::PackageStatusMT&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::parameterAssertType:
      return extxml_uci::type::ParameterAssertType::deserialize(propTree, dynamic_cast<uci::type::ParameterAssertType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::parameterID_Type:
      return extxml_uci::type::ParameterID_Type::deserialize(propTree, dynamic_cast<uci::type::ParameterID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::parameterValueType:
      return extxml_uci::type::ParameterValueType::deserialize(propTree, dynamic_cast<uci::type::ParameterValueType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pATCHB_Type:
      return extxml_uci::type::PATCHB_Type::deserialize(propTree, dynamic_cast<uci::type::PATCHB_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathConstraintsType:
      return extxml_uci::type::PathConstraintsType::deserialize(propTree, dynamic_cast<uci::type::PathConstraintsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathID_Type:
      return extxml_uci::type::PathID_Type::deserialize(propTree, dynamic_cast<uci::type::PathID_Type&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathMetricsType:
      return extxml_uci::type::PathMetricsType::deserialize(propTree, dynamic_cast<uci::type::PathMetricsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathSegmentConditionType:
      return extxml_uci::type::PathSegmentConditionType::deserialize(propTree, dynamic_cast<uci::type::PathSegmentConditionType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathSegmentModificationType:
      return extxml_uci::type::PathSegmentModificationType::deserialize(propTree, dynamic_cast<uci::type::PathSegmentModificationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathSegmentSpeedChoiceType:
      return extxml_uci::type::PathSegmentSpeedChoiceType::deserialize(propTree, dynamic_cast<uci::type::PathSegmentSpeedChoiceType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathSegmentSpeedType:
      return extxml_uci::type::PathSegmentSpeedType::deserialize(propTree, dynamic_cast<uci::type::PathSegmentSpeedType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathSegmentSpeedValueType:
      return extxml_uci::type::PathSegmentSpeedValueType::deserialize(propTree, dynamic_cast<uci::type::PathSegmentSpeedValueType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathSegmentThreatAssessmentType:
      return extxml_uci::type::PathSegmentThreatAssessmentType::deserialize(propTree, dynamic_cast<uci::type::PathSegmentThreatAssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathSegmentType:
      return extxml_uci::type::PathSegmentType::deserialize(propTree, dynamic_cast<uci::type::PathSegmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathThreatAssessmentType:
      return extxml_uci::type::PathThreatAssessmentType::deserialize(propTree, dynamic_cast<uci::type::PathThreatAssessmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathType:
      return extxml_uci::type::PathType::deserialize(propTree, dynamic_cast<uci::type::PathType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathVulnerabilitySegmentType:
      return extxml_uci::type::PathVulnerabilitySegmentType::deserialize(propTree, dynamic_cast<uci::type::PathVulnerabilitySegmentType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pathVulnerabilityType:
      return extxml_uci::type::PathVulnerabilityType::deserialize(propTree, dynamic_cast<uci::type::PathVulnerabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::percentileRCSType:
      return extxml_uci::type::PercentileRCSType::deserialize(propTree, dynamic_cast<uci::type::PercentileRCSType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::percentRangeType:
      return extxml_uci::type::PercentRangeType::deserialize(propTree, dynamic_cast<uci::type::PercentRangeType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::performanceMetricSetType:
      return extxml_uci::type::PerformanceMetricSetType::deserialize(propTree, dynamic_cast<uci::type::PerformanceMetricSetType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::periodPerformanceFeedbackType:
      return extxml_uci::type::PeriodPerformanceFeedbackType::deserialize(propTree, dynamic_cast<uci::type::PeriodPerformanceFeedbackType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::photometryParamsType:
      return extxml_uci::type::PhotometryParamsType::deserialize(propTree, dynamic_cast<uci::type::PhotometryParamsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::physicalModelType:
      return extxml_uci::type::PhysicalModelType::deserialize(propTree, dynamic_cast<uci::type::PhysicalModelType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pixelCountSettingsType:
      return extxml_uci::type::PixelCountSettingsType::deserialize(propTree, dynamic_cast<uci::type::PixelCountSettingsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pixelDataType:
      return extxml_uci::type::PixelDataType::deserialize(propTree, dynamic_cast<uci::type::PixelDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pixelOutputDataType:
      return extxml_uci::type::PixelOutputDataType::deserialize(propTree, dynamic_cast<uci::type::PixelOutputDataType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pixelReferenceCoordinateType:
      return extxml_uci::type::PixelReferenceCoordinateType::deserialize(propTree, dynamic_cast<uci::type::PixelReferenceCoordinateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::pixelScalingSettingsType:
      return extxml_uci::type::PixelScalingSettingsType::deserialize(propTree, dynamic_cast<uci::type::PixelScalingSettingsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planActivationAutonomyType:
      return extxml_uci::type::PlanActivationAutonomyType::deserialize(propTree, dynamic_cast<uci::type::PlanActivationAutonomyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planActivationPolicyType:
      return extxml_uci::type::PlanActivationPolicyType::deserialize(propTree, dynamic_cast<uci::type::PlanActivationPolicyType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planActivationStateType:
      return extxml_uci::type::PlanActivationStateType::deserialize(propTree, dynamic_cast<uci::type::PlanActivationStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planActivationStatusType:
      return extxml_uci::type::PlanActivationStatusType::deserialize(propTree, dynamic_cast<uci::type::PlanActivationStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planApplicabilityModificationType:
      return extxml_uci::type::PlanApplicabilityModificationType::deserialize(propTree, dynamic_cast<uci::type::PlanApplicabilityModificationType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planApplicabilityType:
      return extxml_uci::type::PlanApplicabilityType::deserialize(propTree, dynamic_cast<uci::type::PlanApplicabilityType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planCommandStatusType:
      return extxml_uci::type::PlanCommandStatusType::deserialize(propTree, dynamic_cast<uci::type::PlanCommandStatusType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planInputsCoreType:
      return extxml_uci::type::PlanInputsCoreType::deserialize(propTree, dynamic_cast<uci::type::PlanInputsCoreType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planInterfaceCommandType:
      return extxml_uci::type::PlanInterfaceCommandType::deserialize(propTree, dynamic_cast<uci::type::PlanInterfaceCommandType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planInterfaceStateType:
      return extxml_uci::type::PlanInterfaceStateType::deserialize(propTree, dynamic_cast<uci::type::PlanInterfaceStateType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planModificationDetailsType:
      return extxml_uci::type::PlanModificationDetailsType::deserialize(propTree, dynamic_cast<uci::type::PlanModificationDetailsType&>(accessor), nodeName, nsPrefix, true);
    case uci::type::accessorType::planModificationRequestMDT:
      return extxml_uci::type::PlanModificationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::PlanModificationRequestMDT&>(accessor), nodeName, nsPrefix, true);
    default:
      return false;
  }
}

} // namespace base

} // namespace extxml_uci

