/** @file DerivedTypesDeserializer.cpp
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:20 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#include "extxml_uci/util/DerivedTypesDeserializer.h"

#include <string>

#include <boost/property_tree/ptree.hpp>

#include "extxml_uci/type/ACO_FileTraceabilityType.h"
#include "extxml_uci/type/ACO_TraceabilityType.h"
#include "extxml_uci/type/ACTDF_FileTraceabilityType.h"
#include "extxml_uci/type/ACTDF_TaskID_Type.h"
#include "extxml_uci/type/ACTDF_TraceabilityType.h"
#include "extxml_uci/type/AMTI_ActivityCommandType.h"
#include "extxml_uci/type/AMTI_ActivityMT.h"
#include "extxml_uci/type/AMTI_ActivityType.h"
#include "extxml_uci/type/AMTI_CapabilityCommandType.h"
#include "extxml_uci/type/AMTI_CapabilityMDT.h"
#include "extxml_uci/type/AMTI_CapabilityMT.h"
#include "extxml_uci/type/AMTI_CapabilityStatusMDT.h"
#include "extxml_uci/type/AMTI_CapabilityStatusMT.h"
#include "extxml_uci/type/AMTI_CapabilityType.h"
#include "extxml_uci/type/AMTI_CollectionConstraintsType.h"
#include "extxml_uci/type/AMTI_CommandMT.h"
#include "extxml_uci/type/AMTI_CommandStatusMDT.h"
#include "extxml_uci/type/AMTI_CommandStatusMT.h"
#include "extxml_uci/type/AMTI_SettingsCommandMDT.h"
#include "extxml_uci/type/AMTI_SettingsCommandMT.h"
#include "extxml_uci/type/AMTI_SettingsCommandStatusMDT.h"
#include "extxml_uci/type/AMTI_SettingsCommandStatusMT.h"
#include "extxml_uci/type/AMTI_TaskBaseType.h"
#include "extxml_uci/type/AMTI_TaskType.h"
#include "extxml_uci/type/AO_ActivityCommandType.h"
#include "extxml_uci/type/AO_ActivityMT.h"
#include "extxml_uci/type/AO_ActivityType.h"
#include "extxml_uci/type/AO_CapabilityCommandType.h"
#include "extxml_uci/type/AO_CapabilityMDT.h"
#include "extxml_uci/type/AO_CapabilityMT.h"
#include "extxml_uci/type/AO_CapabilityStatusMDT.h"
#include "extxml_uci/type/AO_CapabilityStatusMT.h"
#include "extxml_uci/type/AO_CapabilityType.h"
#include "extxml_uci/type/AO_CommandMT.h"
#include "extxml_uci/type/AO_CommandStatusMDT.h"
#include "extxml_uci/type/AO_CommandStatusMT.h"
#include "extxml_uci/type/AO_ConsentRequestMT.h"
#include "extxml_uci/type/AO_ConsentRequestStatusMDT.h"
#include "extxml_uci/type/AO_ConsentRequestStatusMT.h"
#include "extxml_uci/type/AO_ConsentRequestType.h"
#include "extxml_uci/type/AO_SettingsCommandMDT.h"
#include "extxml_uci/type/AO_SettingsCommandMT.h"
#include "extxml_uci/type/AO_SettingsCommandStatusMDT.h"
#include "extxml_uci/type/AO_SettingsCommandStatusMT.h"
#include "extxml_uci/type/AO_TaskBaseType.h"
#include "extxml_uci/type/AO_TaskType.h"
#include "extxml_uci/type/ATO_FileTraceabilityType.h"
#include "extxml_uci/type/ATO_TraceabilityType.h"
#include "extxml_uci/type/ATR_ProcessingParametersType.h"
#include "extxml_uci/type/ATR_ProcessingResultsType.h"
#include "extxml_uci/type/AccessAssessmentID_Type.h"
#include "extxml_uci/type/AccessAssessmentMT.h"
#include "extxml_uci/type/AccessAssessmentRequestMDT.h"
#include "extxml_uci/type/AccessAssessmentRequestMT.h"
#include "extxml_uci/type/AccessAssessmentRequestStatusMDT.h"
#include "extxml_uci/type/AccessAssessmentRequestStatusMT.h"
#include "extxml_uci/type/AchievabilityAssessmentPET.h"
#include "extxml_uci/type/AchievabilityAssessmentRequestPET.h"
#include "extxml_uci/type/ActionActivityMT.h"
#include "extxml_uci/type/ActionActivityType.h"
#include "extxml_uci/type/ActionAllocationType.h"
#include "extxml_uci/type/ActionCancelCommandMDT.h"
#include "extxml_uci/type/ActionCancelCommandMT.h"
#include "extxml_uci/type/ActionCancelCommandStatusMDT.h"
#include "extxml_uci/type/ActionCancelCommandStatusMT.h"
#include "extxml_uci/type/ActionCapabilityCommandType.h"
#include "extxml_uci/type/ActionCapabilityMDT.h"
#include "extxml_uci/type/ActionCapabilityMT.h"
#include "extxml_uci/type/ActionCapabilityStatusMDT.h"
#include "extxml_uci/type/ActionCapabilityStatusMT.h"
#include "extxml_uci/type/ActionCapabilityType.h"
#include "extxml_uci/type/ActionCommandMT.h"
#include "extxml_uci/type/ActionCommandStatusMDT.h"
#include "extxml_uci/type/ActionCommandStatusMT.h"
#include "extxml_uci/type/ActionExecutionApprovalStatusMDT.h"
#include "extxml_uci/type/ActionExecutionApprovalStatusMT.h"
#include "extxml_uci/type/ActionID_Type.h"
#include "extxml_uci/type/ActionMT.h"
#include "extxml_uci/type/ActionPlanApprovalStatusMT.h"
#include "extxml_uci/type/ActionPlanCommandID_Type.h"
#include "extxml_uci/type/ActionPlanCommandMT.h"
#include "extxml_uci/type/ActionPlanCommandStatusMT.h"
#include "extxml_uci/type/ActionPlanExecutionStatusMT.h"
#include "extxml_uci/type/ActionPlanID_Type.h"
#include "extxml_uci/type/ActionPlanInputsType.h"
#include "extxml_uci/type/ActionPlanMT.h"
#include "extxml_uci/type/ActionPlanProcessDescriptionType.h"
#include "extxml_uci/type/ActionPlanStatusMT.h"
#include "extxml_uci/type/ActionPlanValidationCommandMDT.h"
#include "extxml_uci/type/ActionPlanValidationCommandMT.h"
#include "extxml_uci/type/ActionPlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/ActionPlanValidationCommandStatusMT.h"
#include "extxml_uci/type/ActionPlanValidationID_Type.h"
#include "extxml_uci/type/ActionPlanValidationInputsType.h"
#include "extxml_uci/type/ActionPlanValidationMT.h"
#include "extxml_uci/type/ActionPlanningResultType.h"
#include "extxml_uci/type/ActionPlanningStatusMDT.h"
#include "extxml_uci/type/ActionPlanningStatusMT.h"
#include "extxml_uci/type/ActionStatusMDT.h"
#include "extxml_uci/type/ActionStatusMT.h"
#include "extxml_uci/type/ActivityBaseType.h"
#include "extxml_uci/type/ActivityCommandBaseType.h"
#include "extxml_uci/type/ActivityExecutionStatusType.h"
#include "extxml_uci/type/ActivityID_Type.h"
#include "extxml_uci/type/ActivityMetricsID_Type.h"
#include "extxml_uci/type/ActivityMetricsMT.h"
#include "extxml_uci/type/ActivityMetricsRequestMDT.h"
#include "extxml_uci/type/ActivityMetricsRequestMT.h"
#include "extxml_uci/type/ActivityMetricsRequestStatusMDT.h"
#include "extxml_uci/type/ActivityMetricsRequestStatusMT.h"
#include "extxml_uci/type/ActivityPlanApprovalStatusMT.h"
#include "extxml_uci/type/ActivityPlanCommandID_Type.h"
#include "extxml_uci/type/ActivityPlanCommandMT.h"
#include "extxml_uci/type/ActivityPlanCommandStatusMT.h"
#include "extxml_uci/type/ActivityPlanExecutionStatusMT.h"
#include "extxml_uci/type/ActivityPlanID_Type.h"
#include "extxml_uci/type/ActivityPlanInputsType.h"
#include "extxml_uci/type/ActivityPlanMT.h"
#include "extxml_uci/type/ActivityPlanPartsCommandType.h"
#include "extxml_uci/type/ActivityPlanPartsType.h"
#include "extxml_uci/type/ActivityPlanProcessDescriptionType.h"
#include "extxml_uci/type/ActivityPlanStatusMT.h"
#include "extxml_uci/type/ActivityPlanStatusType.h"
#include "extxml_uci/type/ActivityPlanValidationCommandMDT.h"
#include "extxml_uci/type/ActivityPlanValidationCommandMT.h"
#include "extxml_uci/type/ActivityPlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/ActivityPlanValidationCommandStatusMT.h"
#include "extxml_uci/type/ActivityPlanValidationID_Type.h"
#include "extxml_uci/type/ActivityPlanValidationInputsType.h"
#include "extxml_uci/type/ActivityPlanValidationMT.h"
#include "extxml_uci/type/AirSampleActivityMT.h"
#include "extxml_uci/type/AirSampleActivityType.h"
#include "extxml_uci/type/AirSampleCapabilityCommandType.h"
#include "extxml_uci/type/AirSampleCapabilityMDT.h"
#include "extxml_uci/type/AirSampleCapabilityMT.h"
#include "extxml_uci/type/AirSampleCapabilityStatusMDT.h"
#include "extxml_uci/type/AirSampleCapabilityStatusMT.h"
#include "extxml_uci/type/AirSampleCapabilityType.h"
#include "extxml_uci/type/AirSampleCommandMT.h"
#include "extxml_uci/type/AirSampleCommandStatusMDT.h"
#include "extxml_uci/type/AirSampleCommandStatusMT.h"
#include "extxml_uci/type/AirSampleSettingsCommandMDT.h"
#include "extxml_uci/type/AirSampleSettingsCommandMT.h"
#include "extxml_uci/type/AirSampleSettingsCommandStatusMDT.h"
#include "extxml_uci/type/AirSampleSettingsCommandStatusMT.h"
#include "extxml_uci/type/AirSampleTaskBaseType.h"
#include "extxml_uci/type/AirSampleTaskType.h"
#include "extxml_uci/type/AirfieldGeneralStoreType.h"
#include "extxml_uci/type/AirfieldID_Type.h"
#include "extxml_uci/type/AirfieldReportID_Type.h"
#include "extxml_uci/type/AirfieldReportMT.h"
#include "extxml_uci/type/AirfieldStoreType.h"
#include "extxml_uci/type/AirfieldStoresPET.h"
#include "extxml_uci/type/AnalysisRouteID_Type.h"
#include "extxml_uci/type/AnalysisRouteMT.h"
#include "extxml_uci/type/AnalysisRouteRequestMDT.h"
#include "extxml_uci/type/AnalysisRouteRequestMT.h"
#include "extxml_uci/type/AnalysisRouteRequestStatusMDT.h"
#include "extxml_uci/type/AnalysisRouteRequestStatusMT.h"
#include "extxml_uci/type/AnglePairType.h"
#include "extxml_uci/type/AntennaID_Type.h"
#include "extxml_uci/type/AntennaResourceID_Type.h"
#include "extxml_uci/type/ApplicabilityType.h"
#include "extxml_uci/type/ApprovalAuthorityID_Type.h"
#include "extxml_uci/type/ApprovalAuthorityMDT.h"
#include "extxml_uci/type/ApprovalAuthorityMT.h"
#include "extxml_uci/type/ApprovalAuthorityRequestMDT.h"
#include "extxml_uci/type/ApprovalAuthorityRequestMT.h"
#include "extxml_uci/type/ApprovalAuthorityRequestStatusMDT.h"
#include "extxml_uci/type/ApprovalAuthorityRequestStatusMT.h"
#include "extxml_uci/type/ApprovalManagementCommandMDT.h"
#include "extxml_uci/type/ApprovalManagementCommandMT.h"
#include "extxml_uci/type/ApprovalManagementCommandStatusMDT.h"
#include "extxml_uci/type/ApprovalManagementCommandStatusMT.h"
#include "extxml_uci/type/ApprovalPolicyBaseType.h"
#include "extxml_uci/type/ApprovalPolicyID_Type.h"
#include "extxml_uci/type/ApprovalPolicyMDT.h"
#include "extxml_uci/type/ApprovalPolicyMT.h"
#include "extxml_uci/type/ApprovalRequestMDT.h"
#include "extxml_uci/type/ApprovalRequestMT.h"
#include "extxml_uci/type/ApprovalRequestStatusMDT.h"
#include "extxml_uci/type/ApprovalRequestStatusMT.h"
#include "extxml_uci/type/AssessmentID_Type.h"
#include "extxml_uci/type/AssessmentMT.h"
#include "extxml_uci/type/AssessmentRequestMDT.h"
#include "extxml_uci/type/AssessmentRequestMT.h"
#include "extxml_uci/type/AssessmentRequestStatusMDT.h"
#include "extxml_uci/type/AssessmentRequestStatusMT.h"
#include "extxml_uci/type/AssessmentStatusType.h"
#include "extxml_uci/type/AugmentationProcessingParametersType.h"
#include "extxml_uci/type/AuthorizationID_Type.h"
#include "extxml_uci/type/AuthorizationMDT.h"
#include "extxml_uci/type/AuthorizationMT.h"
#include "extxml_uci/type/AutonomousPlanCommandType.h"
#include "extxml_uci/type/AutonomousPlanningActionID_Type.h"
#include "extxml_uci/type/AutonomousPlanningConstrainingPlansType.h"
#include "extxml_uci/type/AutonomousPlanningOtherSystemConstrainingPlansType.h"
#include "extxml_uci/type/AzElRequiredReferenceType.h"
#include "extxml_uci/type/BIT_ID_Type.h"
#include "extxml_uci/type/BaseEOB_RecordType.h"
#include "extxml_uci/type/BeamID_Type.h"
#include "extxml_uci/type/BehaviorType.h"
#include "extxml_uci/type/ByRequirementPolicyType.h"
#include "extxml_uci/type/ByResultPolicyType.h"
#include "extxml_uci/type/ByTriggerPolicyType.h"
#include "extxml_uci/type/COE_OrbitBaseType.h"
#include "extxml_uci/type/COE_OrbitType.h"
#include "extxml_uci/type/COMINT_ActivityCommandType.h"
#include "extxml_uci/type/COMINT_ActivityMT.h"
#include "extxml_uci/type/COMINT_ActivityType.h"
#include "extxml_uci/type/COMINT_CapabilityCommandType.h"
#include "extxml_uci/type/COMINT_CapabilityMDT.h"
#include "extxml_uci/type/COMINT_CapabilityMT.h"
#include "extxml_uci/type/COMINT_CapabilityStatusMDT.h"
#include "extxml_uci/type/COMINT_CapabilityStatusMT.h"
#include "extxml_uci/type/COMINT_CapabilityType.h"
#include "extxml_uci/type/COMINT_CommandMT.h"
#include "extxml_uci/type/COMINT_CommandStatusMDT.h"
#include "extxml_uci/type/COMINT_CommandStatusMT.h"
#include "extxml_uci/type/COMINT_ConsentRequestMT.h"
#include "extxml_uci/type/COMINT_ConsentRequestStatusMDT.h"
#include "extxml_uci/type/COMINT_ConsentRequestStatusMT.h"
#include "extxml_uci/type/COMINT_ConsentRequestType.h"
#include "extxml_uci/type/COMINT_ProcessingParametersType.h"
#include "extxml_uci/type/COMINT_SettingsCommandMDT.h"
#include "extxml_uci/type/COMINT_SettingsCommandMT.h"
#include "extxml_uci/type/COMINT_SettingsCommandStatusMDT.h"
#include "extxml_uci/type/COMINT_SettingsCommandStatusMT.h"
#include "extxml_uci/type/COMINT_TaskBaseType.h"
#include "extxml_uci/type/COMINT_TaskType.h"
#include "extxml_uci/type/CS_ActivityDetailType.h"
#include "extxml_uci/type/CS_ActivityType.h"
#include "extxml_uci/type/CS_AssessmentType.h"
#include "extxml_uci/type/CS_CapabilityType.h"
#include "extxml_uci/type/CalibrationID_Type.h"
#include "extxml_uci/type/CallSignType.h"
#include "extxml_uci/type/CannotComplyType.h"
#include "extxml_uci/type/CapabilityBaseType.h"
#include "extxml_uci/type/CapabilityCommandBaseType.h"
#include "extxml_uci/type/CapabilityCommandStatusBaseType.h"
#include "extxml_uci/type/CapabilityConfigurationID_Type.h"
#include "extxml_uci/type/CapabilityConsentRequestStatusBaseType.h"
#include "extxml_uci/type/CapabilityCoverageAreaID_Type.h"
#include "extxml_uci/type/CapabilityCoverageAreaMT.h"
#include "extxml_uci/type/CapabilityCoverageAreaRequestMDT.h"
#include "extxml_uci/type/CapabilityCoverageAreaRequestMT.h"
#include "extxml_uci/type/CapabilityCoverageAreaRequestStatusMDT.h"
#include "extxml_uci/type/CapabilityCoverageAreaRequestStatusMT.h"
#include "extxml_uci/type/CapabilityDeclarationBaseType.h"
#include "extxml_uci/type/CapabilityID_Type.h"
#include "extxml_uci/type/CapabilitySettingsCommandBaseType.h"
#include "extxml_uci/type/CapabilitySettingsCommandStatusBaseType.h"
#include "extxml_uci/type/CapabilityStatusBaseType.h"
#include "extxml_uci/type/CapabilityStatusType.h"
#include "extxml_uci/type/CapabilityTaxonomyUniversalBaseType.h"
#include "extxml_uci/type/CapabilityTaxonomyUniversalType.h"
#include "extxml_uci/type/CargoDeliveryCapabilityMT.h"
#include "extxml_uci/type/CargoDeliveryCapabilityStatusMDT.h"
#include "extxml_uci/type/CargoDeliveryCapabilityStatusMT.h"
#include "extxml_uci/type/CargoDeliveryCapabilityType.h"
#include "extxml_uci/type/CargoID_Type.h"
#include "extxml_uci/type/CargoStatusMT.h"
#include "extxml_uci/type/CenterPointImageRegionOfInterestType.h"
#include "extxml_uci/type/CollectionConstraintsType.h"
#include "extxml_uci/type/ColorDepthSettingsType.h"
#include "extxml_uci/type/CommActionExtendedType.h"
#include "extxml_uci/type/CommActionType.h"
#include "extxml_uci/type/CommAntennaModeType.h"
#include "extxml_uci/type/CommAssetEstimationRequestMDT.h"
#include "extxml_uci/type/CommAssetEstimationRequestMT.h"
#include "extxml_uci/type/CommAssetEstimationRequestStatusMDT.h"
#include "extxml_uci/type/CommAssetEstimationRequestStatusMT.h"
#include "extxml_uci/type/CommAssetID_Type.h"
#include "extxml_uci/type/CommAssetMT.h"
#include "extxml_uci/type/CommAssetOrbitID_Type.h"
#include "extxml_uci/type/CommAssetOrbitMT.h"
#include "extxml_uci/type/CommAssetPositionReportMT.h"
#include "extxml_uci/type/CommBLOS_CommWaveformActivityCommandType.h"
#include "extxml_uci/type/CommBLOS_CommWaveformActivityType.h"
#include "extxml_uci/type/CommBLOS_CommWaveformCapabilityCommandType.h"
#include "extxml_uci/type/CommCDL_CommWaveformActivityCommandType.h"
#include "extxml_uci/type/CommCDL_CommWaveformActivityType.h"
#include "extxml_uci/type/CommCDL_CommWaveformCapabilityCommandType.h"
#include "extxml_uci/type/CommConfigurationID_Type.h"
#include "extxml_uci/type/CommCoverageDataType.h"
#include "extxml_uci/type/CommCoverageUserDataType.h"
#include "extxml_uci/type/CommDataType.h"
#include "extxml_uci/type/CommEffectivityID_Type.h"
#include "extxml_uci/type/CommIFDL_CommWaveformActivityCommandType.h"
#include "extxml_uci/type/CommIFDL_CommWaveformActivityType.h"
#include "extxml_uci/type/CommIFDL_CommWaveformCapabilityCommandType.h"
#include "extxml_uci/type/CommLink16CommWaveformActivityCommandType.h"
#include "extxml_uci/type/CommLink16CommWaveformActivityType.h"
#include "extxml_uci/type/CommLink16CommWaveformCapabilityCommandType.h"
#include "extxml_uci/type/CommMADL_CommWaveformActivityCommandType.h"
#include "extxml_uci/type/CommMADL_CommWaveformActivityType.h"
#include "extxml_uci/type/CommMADL_CommWaveformCapabilityCommandType.h"
#include "extxml_uci/type/CommOutageType.h"
#include "extxml_uci/type/CommPTW_CommWaveformActivityCommandType.h"
#include "extxml_uci/type/CommPTW_CommWaveformActivityType.h"
#include "extxml_uci/type/CommPTW_CommWaveformCapabilityCommandType.h"
#include "extxml_uci/type/CommPointingCommandMDT.h"
#include "extxml_uci/type/CommPointingCommandMT.h"
#include "extxml_uci/type/CommPointingCommandStatusMDT.h"
#include "extxml_uci/type/CommPointingCommandStatusMT.h"
#include "extxml_uci/type/CommPointingID_Type.h"
#include "extxml_uci/type/CommPointingMT.h"
#include "extxml_uci/type/CommPointingRequestMDT.h"
#include "extxml_uci/type/CommPointingRequestMT.h"
#include "extxml_uci/type/CommPointingRequestStatusMDT.h"
#include "extxml_uci/type/CommPointingRequestStatusMT.h"
#include "extxml_uci/type/CommProfileID_Type.h"
#include "extxml_uci/type/CommRelayActivityMT.h"
#include "extxml_uci/type/CommRelayActivityType.h"
#include "extxml_uci/type/CommRelayCapabilityCommandType.h"
#include "extxml_uci/type/CommRelayCapabilityMDT.h"
#include "extxml_uci/type/CommRelayCapabilityMT.h"
#include "extxml_uci/type/CommRelayCapabilityStatusMDT.h"
#include "extxml_uci/type/CommRelayCapabilityStatusMT.h"
#include "extxml_uci/type/CommRelayCapabilityType.h"
#include "extxml_uci/type/CommRelayCommandMT.h"
#include "extxml_uci/type/CommRelayCommandStatusMDT.h"
#include "extxml_uci/type/CommRelayCommandStatusMT.h"
#include "extxml_uci/type/CommRelaySettingsCommandMDT.h"
#include "extxml_uci/type/CommRelaySettingsCommandMT.h"
#include "extxml_uci/type/CommRelaySettingsCommandStatusMDT.h"
#include "extxml_uci/type/CommRelaySettingsCommandStatusMT.h"
#include "extxml_uci/type/CommRelayTaskBaseType.h"
#include "extxml_uci/type/CommRelayTaskType.h"
#include "extxml_uci/type/CommSINCGARS_CommWaveformActivityCommandType.h"
#include "extxml_uci/type/CommSINCGARS_CommWaveformActivityType.h"
#include "extxml_uci/type/CommSINCGARS_CommWaveformCapabilityCommandType.h"
#include "extxml_uci/type/CommScheduleAllocationID_Type.h"
#include "extxml_uci/type/CommScheduleAllocationMT.h"
#include "extxml_uci/type/CommScheduleAllocationUpdateRequestMDT.h"
#include "extxml_uci/type/CommScheduleAllocationUpdateRequestMT.h"
#include "extxml_uci/type/CommScheduleAllocationUpdateRequestStatusMDT.h"
#include "extxml_uci/type/CommScheduleAllocationUpdateRequestStatusMT.h"
#include "extxml_uci/type/CommScheduleAvailabilityID_Type.h"
#include "extxml_uci/type/CommScheduleAvailabilityMT.h"
#include "extxml_uci/type/CommSchedulingRequestMDT.h"
#include "extxml_uci/type/CommSchedulingRequestMT.h"
#include "extxml_uci/type/CommSchedulingRequestStatusMDT.h"
#include "extxml_uci/type/CommSchedulingRequestStatusMT.h"
#include "extxml_uci/type/CommSchedulingRequirementID_Type.h"
#include "extxml_uci/type/CommSchedulingRequirementMT.h"
#include "extxml_uci/type/CommStarlinkCommWaveformActivityCommandType.h"
#include "extxml_uci/type/CommStarlinkCommWaveformActivityType.h"
#include "extxml_uci/type/CommStarlinkCommWaveformCapabilityCommandType.h"
#include "extxml_uci/type/CommSystemID_Type.h"
#include "extxml_uci/type/CommSystemMT.h"
#include "extxml_uci/type/CommTerminalActivityCommandType.h"
#include "extxml_uci/type/CommTerminalActivityMT.h"
#include "extxml_uci/type/CommTerminalActivityType.h"
#include "extxml_uci/type/CommTerminalCapabilityCommandType.h"
#include "extxml_uci/type/CommTerminalCapabilityMDT.h"
#include "extxml_uci/type/CommTerminalCapabilityMT.h"
#include "extxml_uci/type/CommTerminalCapabilityStatusMDT.h"
#include "extxml_uci/type/CommTerminalCapabilityStatusMT.h"
#include "extxml_uci/type/CommTerminalCapabilityStatusType.h"
#include "extxml_uci/type/CommTerminalCapabilityType.h"
#include "extxml_uci/type/CommTerminalCommandMT.h"
#include "extxml_uci/type/CommTerminalCommandStatusMDT.h"
#include "extxml_uci/type/CommTerminalCommandStatusMT.h"
#include "extxml_uci/type/CommTerminalPlanActivationCommandMDT.h"
#include "extxml_uci/type/CommTerminalPlanActivationCommandMT.h"
#include "extxml_uci/type/CommTerminalPlanActivationCommandStatusMDT.h"
#include "extxml_uci/type/CommTerminalPlanActivationCommandStatusMT.h"
#include "extxml_uci/type/CommTerminalPlanActivationStatusMT.h"
#include "extxml_uci/type/CommTerminalPlanID_Type.h"
#include "extxml_uci/type/CommTerminalPlanMT.h"
#include "extxml_uci/type/CommTerminalPlanOverrideRequestMT.h"
#include "extxml_uci/type/CommTerminalPlanOverrideRequestStatusMDT.h"
#include "extxml_uci/type/CommTerminalPlanOverrideRequestStatusMT.h"
#include "extxml_uci/type/CommTerminalPlanOverrideRequestType.h"
#include "extxml_uci/type/CommTerminalSettingsCommandMDT.h"
#include "extxml_uci/type/CommTerminalSettingsCommandMT.h"
#include "extxml_uci/type/CommTerminalSettingsCommandStatusMDT.h"
#include "extxml_uci/type/CommTerminalSettingsCommandStatusMT.h"
#include "extxml_uci/type/CommUHF_SATCOM_CommWaveformActivityCommandType.h"
#include "extxml_uci/type/CommUHF_SATCOM_CommWaveformActivityType.h"
#include "extxml_uci/type/CommUHF_SATCOM_CommWaveformCapabilityCommandType.h"
#include "extxml_uci/type/CommUserIO_ID_Type.h"
#include "extxml_uci/type/CommUserLinkID_Type.h"
#include "extxml_uci/type/CommUtilizationRequestMDT.h"
#include "extxml_uci/type/CommUtilizationRequestMT.h"
#include "extxml_uci/type/CommUtilizationRequestStatusMDT.h"
#include "extxml_uci/type/CommUtilizationRequestStatusMT.h"
#include "extxml_uci/type/CommWaveformActivityCommandPET.h"
#include "extxml_uci/type/CommWaveformActivityPET.h"
#include "extxml_uci/type/CommWaveformCapabilityCommandPET.h"
#include "extxml_uci/type/CommandBaseType.h"
#include "extxml_uci/type/CommandID_Type.h"
#include "extxml_uci/type/CommandStatusBaseType.h"
#include "extxml_uci/type/CommandableCapabilityDeclarationType.h"
#include "extxml_uci/type/CompletedRequirementMetricsType.h"
#include "extxml_uci/type/ComponentConfigurationDataRequestMDT.h"
#include "extxml_uci/type/ComponentConfigurationDataRequestMT.h"
#include "extxml_uci/type/ComponentConfigurationDataRequestStatusMDT.h"
#include "extxml_uci/type/ComponentConfigurationDataRequestStatusMT.h"
#include "extxml_uci/type/ComponentConfigurationID_Type.h"
#include "extxml_uci/type/ComponentConfigurationMT.h"
#include "extxml_uci/type/ComponentConfigurationPET.h"
#include "extxml_uci/type/ComponentConfigurationTreeType.h"
#include "extxml_uci/type/ComponentConfigurationType.h"
#include "extxml_uci/type/ComponentDetailedStatusInfoType.h"
#include "extxml_uci/type/ComponentDetailedStatusType.h"
#include "extxml_uci/type/ComponentElementID_Type.h"
#include "extxml_uci/type/ComponentExtendedStatusPET.h"
#include "extxml_uci/type/ComponentID_Type.h"
#include "extxml_uci/type/ComponentSettingsCommandMDT.h"
#include "extxml_uci/type/ComponentSettingsCommandMT.h"
#include "extxml_uci/type/ComponentSettingsCommandStatusMDT.h"
#include "extxml_uci/type/ComponentSettingsCommandStatusMT.h"
#include "extxml_uci/type/ComponentStatusDataRequestMDT.h"
#include "extxml_uci/type/ComponentStatusDataRequestMT.h"
#include "extxml_uci/type/ComponentStatusDataRequestStatusMDT.h"
#include "extxml_uci/type/ComponentStatusDataRequestStatusMT.h"
#include "extxml_uci/type/ComponentStatusMT.h"
#include "extxml_uci/type/ComponentTemperatureType.h"
#include "extxml_uci/type/CompressionRatioSettingsType.h"
#include "extxml_uci/type/ConstrainingPlanPartsType.h"
#include "extxml_uci/type/ControlInterfacesCommandMDT.h"
#include "extxml_uci/type/ControlInterfacesCommandMT.h"
#include "extxml_uci/type/ControlInterfacesCommandStatusMDT.h"
#include "extxml_uci/type/ControlInterfacesCommandStatusMT.h"
#include "extxml_uci/type/ControlRequestMDT.h"
#include "extxml_uci/type/ControlRequestMT.h"
#include "extxml_uci/type/ControlRequestStatusMDT.h"
#include "extxml_uci/type/ControlRequestStatusMT.h"
#include "extxml_uci/type/ControlSourcesCommandMDT.h"
#include "extxml_uci/type/ControlSourcesCommandMT.h"
#include "extxml_uci/type/ControlSourcesCommandStatusMDT.h"
#include "extxml_uci/type/ControlSourcesCommandStatusMT.h"
#include "extxml_uci/type/ControlStatusMT.h"
#include "extxml_uci/type/CoordinatedRequirementSetID_Type.h"
#include "extxml_uci/type/CoordinatedRequirementSetMT.h"
#include "extxml_uci/type/CoordinatedRequirementSetStatusMT.h"
#include "extxml_uci/type/CornerPointImageRegionOfInterestType.h"
#include "extxml_uci/type/CorrelatedEntityID_Type.h"
#include "extxml_uci/type/CounterSpaceActivityMT.h"
#include "extxml_uci/type/CounterSpaceCapabilityMDT.h"
#include "extxml_uci/type/CounterSpaceCapabilityMT.h"
#include "extxml_uci/type/CounterSpaceCapabilityStatusMDT.h"
#include "extxml_uci/type/CounterSpaceCapabilityStatusMT.h"
#include "extxml_uci/type/CounterSpaceDeconflictionID_Type.h"
#include "extxml_uci/type/CounterSpaceDeconflictionMDT.h"
#include "extxml_uci/type/CounterSpaceDeconflictionMT.h"
#include "extxml_uci/type/CounterSpaceReportID_Type.h"
#include "extxml_uci/type/CounterSpaceReportMT.h"
#include "extxml_uci/type/CryptoCommandMT.h"
#include "extxml_uci/type/CryptoCommandStatusMDT.h"
#include "extxml_uci/type/CryptoCommandStatusMT.h"
#include "extxml_uci/type/CryptoCommandType.h"
#include "extxml_uci/type/CryptoPortID_Type.h"
#include "extxml_uci/type/CryptoSlotGroupID_Type.h"
#include "extxml_uci/type/CryptoStatusMT.h"
#include "extxml_uci/type/CryptoStatusType.h"
#include "extxml_uci/type/DLZ_ID_Type.h"
#include "extxml_uci/type/DLZ_MT.h"
#include "extxml_uci/type/DLZ_RequestMDT.h"
#include "extxml_uci/type/DLZ_RequestMT.h"
#include "extxml_uci/type/DLZ_RequestStatusMDT.h"
#include "extxml_uci/type/DLZ_RequestStatusMT.h"
#include "extxml_uci/type/DMPI_AchievabilityAssessmentRequestType.h"
#include "extxml_uci/type/DMPI_AchievabilityAssessmentType.h"
#include "extxml_uci/type/DMPI_CancelCommandMDT.h"
#include "extxml_uci/type/DMPI_CancelCommandMT.h"
#include "extxml_uci/type/DMPI_CancelCommandStatusMDT.h"
#include "extxml_uci/type/DMPI_CancelCommandStatusMT.h"
#include "extxml_uci/type/DMPI_DesignationID_Type.h"
#include "extxml_uci/type/DMPI_DesignationMDT.h"
#include "extxml_uci/type/DMPI_DesignationMT.h"
#include "extxml_uci/type/DMPI_DesignationRequestMDT.h"
#include "extxml_uci/type/DMPI_DesignationRequestMT.h"
#include "extxml_uci/type/DMPI_DesignationRequestStatusMDT.h"
#include "extxml_uci/type/DMPI_DesignationRequestStatusMT.h"
#include "extxml_uci/type/DMPI_ID_Type.h"
#include "extxml_uci/type/DMPI_MDT.h"
#include "extxml_uci/type/DMPI_MT.h"
#include "extxml_uci/type/DMPI_PatternID_Type.h"
#include "extxml_uci/type/DMPI_PatternMDT.h"
#include "extxml_uci/type/DMPI_PatternMT.h"
#include "extxml_uci/type/DMPI_PatternType.h"
#include "extxml_uci/type/DMPI_RadialPatternType.h"
#include "extxml_uci/type/DMPI_StatusMT.h"
#include "extxml_uci/type/DMPI_XbyY_PatternType.h"
#include "extxml_uci/type/DVR_ProcessingParametersType.h"
#include "extxml_uci/type/DamageAssessmentDetailType.h"
#include "extxml_uci/type/DamageAssessmentID_Type.h"
#include "extxml_uci/type/DamageAssessmentMT.h"
#include "extxml_uci/type/DamageAssessmentRequestMDT.h"
#include "extxml_uci/type/DamageAssessmentRequestMT.h"
#include "extxml_uci/type/DamageAssessmentRequestStatusMDT.h"
#include "extxml_uci/type/DamageAssessmentRequestStatusMT.h"
#include "extxml_uci/type/DamageEstimateID_Type.h"
#include "extxml_uci/type/DamageEstimateMT.h"
#include "extxml_uci/type/DamageEstimateRequestMDT.h"
#include "extxml_uci/type/DamageEstimateRequestMT.h"
#include "extxml_uci/type/DamageEstimateRequestStatusMDT.h"
#include "extxml_uci/type/DamageEstimateRequestStatusMT.h"
#include "extxml_uci/type/DamageInformationSourceType.h"
#include "extxml_uci/type/DamageInformationWeatherSourceType.h"
#include "extxml_uci/type/DamageReportDetailType.h"
#include "extxml_uci/type/DamageReportID_Type.h"
#include "extxml_uci/type/DamageReportMT.h"
#include "extxml_uci/type/DamageSummaryID_Type.h"
#include "extxml_uci/type/DamageSummaryMT.h"
#include "extxml_uci/type/DamagedFunctionType.h"
#include "extxml_uci/type/DataDeleteRequestMDT.h"
#include "extxml_uci/type/DataDeleteRequestMT.h"
#include "extxml_uci/type/DataDeleteRequestStatusMDT.h"
#include "extxml_uci/type/DataDeleteRequestStatusMT.h"
#include "extxml_uci/type/DataDestinationID_Type.h"
#include "extxml_uci/type/DataLinkIdentifierPET.h"
#include "extxml_uci/type/DataLinkNativeFilterPET.h"
#include "extxml_uci/type/DataLinkNativeFilter_NetworkLinkType.h"
#include "extxml_uci/type/DataLinkNativeInfoPET.h"
#include "extxml_uci/type/DataManagementRequestMDT.h"
#include "extxml_uci/type/DataManagementRequestMT.h"
#include "extxml_uci/type/DataManagementRequestStatusMDT.h"
#include "extxml_uci/type/DataManagementRequestStatusMT.h"
#include "extxml_uci/type/DataPlanActivationCommandMDT.h"
#include "extxml_uci/type/DataPlanActivationCommandMT.h"
#include "extxml_uci/type/DataPlanActivationCommandStatusMDT.h"
#include "extxml_uci/type/DataPlanActivationCommandStatusMT.h"
#include "extxml_uci/type/DataPlanActivationStatusMT.h"
#include "extxml_uci/type/DataPlanID_Type.h"
#include "extxml_uci/type/DataPlanMT.h"
#include "extxml_uci/type/DataPlanOverrideRequestMT.h"
#include "extxml_uci/type/DataPlanOverrideRequestStatusMDT.h"
#include "extxml_uci/type/DataPlanOverrideRequestStatusMT.h"
#include "extxml_uci/type/DataPlanOverrideRequestType.h"
#include "extxml_uci/type/DataRateDataType.h"
#include "extxml_uci/type/DataRecordBaseType.h"
#include "extxml_uci/type/DataRecordInstanceID_Type.h"
#include "extxml_uci/type/DataRecordListBaseType.h"
#include "extxml_uci/type/DataRecordListID_Type.h"
#include "extxml_uci/type/DataRecordListManagementRequestMDT.h"
#include "extxml_uci/type/DataRecordListManagementRequestMT.h"
#include "extxml_uci/type/DataRecordListManagementRequestStatusMDT.h"
#include "extxml_uci/type/DataRecordListManagementRequestStatusMT.h"
#include "extxml_uci/type/DataRecordManagementRequestMDT.h"
#include "extxml_uci/type/DataRecordManagementRequestMT.h"
#include "extxml_uci/type/DataRecordManagementRequestStatusMDT.h"
#include "extxml_uci/type/DataRecordManagementRequestStatusMT.h"
#include "extxml_uci/type/DataStorageUtilizationRequestMDT.h"
#include "extxml_uci/type/DataStorageUtilizationRequestMT.h"
#include "extxml_uci/type/DataStorageUtilizationRequestStatusMDT.h"
#include "extxml_uci/type/DataStorageUtilizationRequestStatusMT.h"
#include "extxml_uci/type/DataUpdateRequestMDT.h"
#include "extxml_uci/type/DataUpdateRequestMT.h"
#include "extxml_uci/type/DataUpdateRequestStatusMDT.h"
#include "extxml_uci/type/DataUpdateRequestStatusMT.h"
#include "extxml_uci/type/DeploymentDetectionType.h"
#include "extxml_uci/type/DesignationID_Type.h"
#include "extxml_uci/type/DesignationMT.h"
#include "extxml_uci/type/DesignationRequestMDT.h"
#include "extxml_uci/type/DesignationRequestMT.h"
#include "extxml_uci/type/DesignationRequestStatusMDT.h"
#include "extxml_uci/type/DesignationRequestStatusMT.h"
#include "extxml_uci/type/DiscreteDataLinkIdentifierType.h"
#include "extxml_uci/type/DiscreteStatusMT.h"
#include "extxml_uci/type/DisseminationConstrainedSubplanType.h"
#include "extxml_uci/type/DisseminationSubplanType.h"
#include "extxml_uci/type/DoorCommandMT.h"
#include "extxml_uci/type/DoorCommandStatusMDT.h"
#include "extxml_uci/type/DoorCommandStatusMT.h"
#include "extxml_uci/type/DoorCommandType.h"
#include "extxml_uci/type/DoorStatusMT.h"
#include "extxml_uci/type/DoorStatusType.h"
#include "extxml_uci/type/DwellID_Type.h"
#include "extxml_uci/type/EA_ActivityCommandType.h"
#include "extxml_uci/type/EA_ActivityMT.h"
#include "extxml_uci/type/EA_ActivityType.h"
#include "extxml_uci/type/EA_CapabilityCommandType.h"
#include "extxml_uci/type/EA_CapabilityMDT.h"
#include "extxml_uci/type/EA_CapabilityMT.h"
#include "extxml_uci/type/EA_CapabilityStatusMDT.h"
#include "extxml_uci/type/EA_CapabilityStatusMT.h"
#include "extxml_uci/type/EA_CapabilityType.h"
#include "extxml_uci/type/EA_CommandMT.h"
#include "extxml_uci/type/EA_CommandStatusMDT.h"
#include "extxml_uci/type/EA_CommandStatusMT.h"
#include "extxml_uci/type/EA_ConsentRequestMT.h"
#include "extxml_uci/type/EA_ConsentRequestStatusMDT.h"
#include "extxml_uci/type/EA_ConsentRequestStatusMT.h"
#include "extxml_uci/type/EA_ConsentRequestType.h"
#include "extxml_uci/type/EA_SettingsCommandMDT.h"
#include "extxml_uci/type/EA_SettingsCommandMT.h"
#include "extxml_uci/type/EA_SettingsCommandStatusMDT.h"
#include "extxml_uci/type/EA_SettingsCommandStatusMT.h"
#include "extxml_uci/type/EA_TechniqueIdentifierType.h"
#include "extxml_uci/type/ECEF_UnitVectorType.h"
#include "extxml_uci/type/EEI_ID_Type.h"
#include "extxml_uci/type/EEI_MDT.h"
#include "extxml_uci/type/EEI_MT.h"
#include "extxml_uci/type/EOB_CorrelationRecordID_Type.h"
#include "extxml_uci/type/EOB_CorrelationRecordMDT.h"
#include "extxml_uci/type/EOB_CorrelationRecordMT.h"
#include "extxml_uci/type/EOB_EmitterID_Type.h"
#include "extxml_uci/type/EOB_EmitterModeID_Type.h"
#include "extxml_uci/type/EOB_EmitterModeType.h"
#include "extxml_uci/type/EOB_EmitterType.h"
#include "extxml_uci/type/EOB_EquipmentIdentityType.h"
#include "extxml_uci/type/EOB_EquipmentRecordType.h"
#include "extxml_uci/type/EOB_EquipmentType.h"
#include "extxml_uci/type/EOB_FixedPositionType.h"
#include "extxml_uci/type/EOB_IdentityBaseType.h"
#include "extxml_uci/type/EOB_RecordID_Type.h"
#include "extxml_uci/type/EOB_RecordMarkedType.h"
#include "extxml_uci/type/EOB_SignalType.h"
#include "extxml_uci/type/EOB_SiteIdentityType.h"
#include "extxml_uci/type/EOB_SitePIN_Type.h"
#include "extxml_uci/type/ESM_ActivityCommandType.h"
#include "extxml_uci/type/ESM_ActivityMT.h"
#include "extxml_uci/type/ESM_ActivityType.h"
#include "extxml_uci/type/ESM_CapabilityCommandType.h"
#include "extxml_uci/type/ESM_CapabilityMDT.h"
#include "extxml_uci/type/ESM_CapabilityMT.h"
#include "extxml_uci/type/ESM_CapabilityStatusMDT.h"
#include "extxml_uci/type/ESM_CapabilityStatusMT.h"
#include "extxml_uci/type/ESM_CapabilityType.h"
#include "extxml_uci/type/ESM_CommandMT.h"
#include "extxml_uci/type/ESM_CommandStatusMDT.h"
#include "extxml_uci/type/ESM_CommandStatusMT.h"
#include "extxml_uci/type/ESM_ConsentRequestMT.h"
#include "extxml_uci/type/ESM_ConsentRequestStatusMDT.h"
#include "extxml_uci/type/ESM_ConsentRequestStatusMT.h"
#include "extxml_uci/type/ESM_ConsentRequestType.h"
#include "extxml_uci/type/ESM_SettingsCommandMDT.h"
#include "extxml_uci/type/ESM_SettingsCommandMT.h"
#include "extxml_uci/type/ESM_SettingsCommandStatusMDT.h"
#include "extxml_uci/type/ESM_SettingsCommandStatusMT.h"
#include "extxml_uci/type/ESM_TaskBaseType.h"
#include "extxml_uci/type/ESM_TaskType.h"
#include "extxml_uci/type/EW_ConfigurationID_Type.h"
#include "extxml_uci/type/EW_ConfigurationMT.h"
#include "extxml_uci/type/EW_CoordinationDataLinkIdentifierType.h"
#include "extxml_uci/type/EW_IndexNumberDataLinkIdentifierType.h"
#include "extxml_uci/type/EarthOrientationParametersID_Type.h"
#include "extxml_uci/type/EarthOrientationParametersMT.h"
#include "extxml_uci/type/EffectActivityMT.h"
#include "extxml_uci/type/EffectActivityType.h"
#include "extxml_uci/type/EffectAllocationType.h"
#include "extxml_uci/type/EffectCancelCommandMDT.h"
#include "extxml_uci/type/EffectCancelCommandMT.h"
#include "extxml_uci/type/EffectCancelCommandStatusMDT.h"
#include "extxml_uci/type/EffectCancelCommandStatusMT.h"
#include "extxml_uci/type/EffectCapabilityCommandType.h"
#include "extxml_uci/type/EffectCapabilityMDT.h"
#include "extxml_uci/type/EffectCapabilityMT.h"
#include "extxml_uci/type/EffectCapabilityStatusMDT.h"
#include "extxml_uci/type/EffectCapabilityStatusMT.h"
#include "extxml_uci/type/EffectCapabilityType.h"
#include "extxml_uci/type/EffectCommandMT.h"
#include "extxml_uci/type/EffectCommandStatusMDT.h"
#include "extxml_uci/type/EffectCommandStatusMT.h"
#include "extxml_uci/type/EffectExecutionApprovalStatusMDT.h"
#include "extxml_uci/type/EffectExecutionApprovalStatusMT.h"
#include "extxml_uci/type/EffectID_Type.h"
#include "extxml_uci/type/EffectMT.h"
#include "extxml_uci/type/EffectPlanApprovalStatusMT.h"
#include "extxml_uci/type/EffectPlanCommandID_Type.h"
#include "extxml_uci/type/EffectPlanCommandMT.h"
#include "extxml_uci/type/EffectPlanCommandStatusMT.h"
#include "extxml_uci/type/EffectPlanExecutionStatusMT.h"
#include "extxml_uci/type/EffectPlanID_Type.h"
#include "extxml_uci/type/EffectPlanInputsType.h"
#include "extxml_uci/type/EffectPlanMT.h"
#include "extxml_uci/type/EffectPlanProcessDescriptionType.h"
#include "extxml_uci/type/EffectPlanStatusMT.h"
#include "extxml_uci/type/EffectPlanValidationCommandMDT.h"
#include "extxml_uci/type/EffectPlanValidationCommandMT.h"
#include "extxml_uci/type/EffectPlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/EffectPlanValidationCommandStatusMT.h"
#include "extxml_uci/type/EffectPlanValidationID_Type.h"
#include "extxml_uci/type/EffectPlanValidationInputsType.h"
#include "extxml_uci/type/EffectPlanValidationMT.h"
#include "extxml_uci/type/EffectPlanningResultType.h"
#include "extxml_uci/type/EffectPlanningStatusMDT.h"
#include "extxml_uci/type/EffectPlanningStatusMT.h"
#include "extxml_uci/type/EffectStatusMDT.h"
#include "extxml_uci/type/EffectStatusMT.h"
#include "extxml_uci/type/ElevationRequestMDT.h"
#include "extxml_uci/type/ElevationRequestMT.h"
#include "extxml_uci/type/ElevationRequestStatusMDT.h"
#include "extxml_uci/type/ElevationRequestStatusMT.h"
#include "extxml_uci/type/ElevationVisibilityRequestMDT.h"
#include "extxml_uci/type/ElevationVisibilityRequestMT.h"
#include "extxml_uci/type/ElevationVisibilityRequestStatusMDT.h"
#include "extxml_uci/type/ElevationVisibilityRequestStatusMT.h"
#include "extxml_uci/type/EllipseType.h"
#include "extxml_uci/type/EmergencyReferenceOpPointType.h"
#include "extxml_uci/type/EmitterFixedPositionType.h"
#include "extxml_uci/type/EnduranceBaseType.h"
#include "extxml_uci/type/EnduranceType.h"
#include "extxml_uci/type/EntityConfirmationMT.h"
#include "extxml_uci/type/EntityConfirmationRequestMDT.h"
#include "extxml_uci/type/EntityConfirmationRequestMT.h"
#include "extxml_uci/type/EntityConfirmationRequestStatusMDT.h"
#include "extxml_uci/type/EntityConfirmationRequestStatusMT.h"
#include "extxml_uci/type/EntityEphemerisRequestParametersType.h"
#include "extxml_uci/type/EntityID_Type.h"
#include "extxml_uci/type/EntityIdentityType.h"
#include "extxml_uci/type/EntityLostMT.h"
#include "extxml_uci/type/EntityMT.h"
#include "extxml_uci/type/EntityManagementRequestMDT.h"
#include "extxml_uci/type/EntityManagementRequestMT.h"
#include "extxml_uci/type/EntityManagementRequestStatusMDT.h"
#include "extxml_uci/type/EntityManagementRequestStatusMT.h"
#include "extxml_uci/type/EntityMetadataMT.h"
#include "extxml_uci/type/EntityMetadataPET.h"
#include "extxml_uci/type/EntityNotificationMDT.h"
#include "extxml_uci/type/EntityNotificationMT.h"
#include "extxml_uci/type/EntityOrbitalCSO_ID_Type.h"
#include "extxml_uci/type/EntityOrbitalCSO_MT.h"
#include "extxml_uci/type/EntityOrbitalElementSetID_Type.h"
#include "extxml_uci/type/EntityOrbitalElementSetMDT.h"
#include "extxml_uci/type/EntityOrbitalElementSetMT.h"
#include "extxml_uci/type/EntityOrbitalElementSetRequestMDT.h"
#include "extxml_uci/type/EntityOrbitalElementSetRequestMT.h"
#include "extxml_uci/type/EntityOrbitalElementSetRequestStatusMDT.h"
#include "extxml_uci/type/EntityOrbitalElementSetRequestStatusMT.h"
#include "extxml_uci/type/EntityOrbitalElementSetType.h"
#include "extxml_uci/type/EntityOrbitalEphemerisID_Type.h"
#include "extxml_uci/type/EntityOrbitalEphemerisMDT.h"
#include "extxml_uci/type/EntityOrbitalEphemerisMT.h"
#include "extxml_uci/type/EntityOrbitalEphemerisRequestMDT.h"
#include "extxml_uci/type/EntityOrbitalEphemerisRequestMT.h"
#include "extxml_uci/type/EntityOrbitalEphemerisRequestStatusMDT.h"
#include "extxml_uci/type/EntityOrbitalEphemerisRequestStatusMT.h"
#include "extxml_uci/type/EntityOrbitalEphemerisType.h"
#include "extxml_uci/type/EntityOrbitalManeuverMT.h"
#include "extxml_uci/type/EntityOrbitalVCM_ID_Type.h"
#include "extxml_uci/type/EntityOrbitalVCM_MDT.h"
#include "extxml_uci/type/EntityOrbitalVCM_MT.h"
#include "extxml_uci/type/EntityOrbitalVCM_RequestMDT.h"
#include "extxml_uci/type/EntityOrbitalVCM_RequestMT.h"
#include "extxml_uci/type/EntityOrbitalVCM_RequestStatusMDT.h"
#include "extxml_uci/type/EntityOrbitalVCM_RequestStatusMT.h"
#include "extxml_uci/type/EntityOrbitalVCM_Type.h"
#include "extxml_uci/type/EntityPropagationMT.h"
#include "extxml_uci/type/ExecutionPlanSetBaseType.h"
#include "extxml_uci/type/ExecutionPlanSetID_Type.h"
#include "extxml_uci/type/ExecutionSequenceInsertionType.h"
#include "extxml_uci/type/ExecutionSequencePlanSetsType.h"
#include "extxml_uci/type/ExecutionSequenceType.h"
#include "extxml_uci/type/ExternalDataRequestMDT.h"
#include "extxml_uci/type/ExternalDataRequestMT.h"
#include "extxml_uci/type/ExternalDataRequestStatusMDT.h"
#include "extxml_uci/type/ExternalDataRequestStatusMT.h"
#include "extxml_uci/type/ExternalRequestedDataID_Type.h"
#include "extxml_uci/type/FOV_ActivityType.h"
#include "extxml_uci/type/FOV_Type.h"
#include "extxml_uci/type/FOV_VolumeType.h"
#include "extxml_uci/type/FaultID_Type.h"
#include "extxml_uci/type/FaultMDT.h"
#include "extxml_uci/type/FaultMT.h"
#include "extxml_uci/type/FileLocationID_Type.h"
#include "extxml_uci/type/FileLocationMDT.h"
#include "extxml_uci/type/FileLocationMT.h"
#include "extxml_uci/type/FileMetadataID_Type.h"
#include "extxml_uci/type/FileMetadataMDT.h"
#include "extxml_uci/type/FileMetadataMT.h"
#include "extxml_uci/type/FilterID_Type.h"
#include "extxml_uci/type/FixedPositionType.h"
#include "extxml_uci/type/FlightActivityMT.h"
#include "extxml_uci/type/FlightActivityType.h"
#include "extxml_uci/type/FlightCapabilityMDT.h"
#include "extxml_uci/type/FlightCapabilityMT.h"
#include "extxml_uci/type/FlightCapabilityStatusMDT.h"
#include "extxml_uci/type/FlightCapabilityStatusMT.h"
#include "extxml_uci/type/FlightCapabilityType.h"
#include "extxml_uci/type/FlightTaskBaseType.h"
#include "extxml_uci/type/FlightTaskType.h"
#include "extxml_uci/type/FloatMinMaxType.h"
#include "extxml_uci/type/ForeignKeyMapDRL.h"
#include "extxml_uci/type/ForeignKeyMapID_Type.h"
#include "extxml_uci/type/ForeignKeyMapMDT.h"
#include "extxml_uci/type/ForeignKeyMapML.h"
#include "extxml_uci/type/ForeignKeyMapMT.h"
#include "extxml_uci/type/ForeignKeyPairDRLE.h"
#include "extxml_uci/type/ForeignKeyPairID_Type.h"
#include "extxml_uci/type/ForeignKeyPairMDT.h"
#include "extxml_uci/type/ForeignKeyPairMT.h"
#include "extxml_uci/type/ForeignKeyType.h"
#include "extxml_uci/type/FrequencyDataBaseType.h"
#include "extxml_uci/type/FrequencyDataType.h"
#include "extxml_uci/type/FuelSubsystemExtendedStatusType.h"
#include "extxml_uci/type/FuelTankComponentExtendedStatusType.h"
#include "extxml_uci/type/FunctionID_Type.h"
#include "extxml_uci/type/FunctionalDamageConfidenceType.h"
#include "extxml_uci/type/FunctionalDamageProbabilityType.h"
#include "extxml_uci/type/FusionSettingsMT.h"
#include "extxml_uci/type/FusionSettingsRequestMDT.h"
#include "extxml_uci/type/FusionSettingsRequestMT.h"
#include "extxml_uci/type/FusionSettingsRequestStatusMDT.h"
#include "extxml_uci/type/FusionSettingsRequestStatusMT.h"
#include "extxml_uci/type/GatewayActivityCommandType.h"
#include "extxml_uci/type/GatewayActivityMT.h"
#include "extxml_uci/type/GatewayActivityType.h"
#include "extxml_uci/type/GatewayCapabilityCommandType.h"
#include "extxml_uci/type/GatewayCapabilityMDT.h"
#include "extxml_uci/type/GatewayCapabilityMT.h"
#include "extxml_uci/type/GatewayCapabilitySettingsCommandBaseType.h"
#include "extxml_uci/type/GatewayCapabilityStatusMDT.h"
#include "extxml_uci/type/GatewayCapabilityStatusMT.h"
#include "extxml_uci/type/GatewayCapabilityStatusType.h"
#include "extxml_uci/type/GatewayCapabilityType.h"
#include "extxml_uci/type/GatewayCommandMT.h"
#include "extxml_uci/type/GatewayCommandStatusMDT.h"
#include "extxml_uci/type/GatewayCommandStatusMT.h"
#include "extxml_uci/type/GatewayConfigurationPET.h"
#include "extxml_uci/type/GatewayLink16ConfigurationAnnulusType.h"
#include "extxml_uci/type/GatewayLink16ConfigurationCircleType.h"
#include "extxml_uci/type/GatewayLink16ConfigurationCircularSectorType.h"
#include "extxml_uci/type/GatewayLink16ConfigurationClosedAreaType.h"
#include "extxml_uci/type/GatewayLink16ConfigurationRectangleType.h"
#include "extxml_uci/type/GatewayNativeStatisticsPET.h"
#include "extxml_uci/type/GatewaySettingsCommandMDT.h"
#include "extxml_uci/type/GatewaySettingsCommandMT.h"
#include "extxml_uci/type/GatewaySettingsCommandStatusMDT.h"
#include "extxml_uci/type/GatewaySettingsCommandStatusMT.h"
#include "extxml_uci/type/GenericDataLinkNativeInfoType.h"
#include "extxml_uci/type/GeoFiltersQueryType.h"
#include "extxml_uci/type/GimbalAxisID_Type.h"
#include "extxml_uci/type/ID_Type.h"
#include "extxml_uci/type/IFF_ActivityCommandType.h"
#include "extxml_uci/type/IFF_ActivityMT.h"
#include "extxml_uci/type/IFF_ActivityTransponderType.h"
#include "extxml_uci/type/IFF_ActivityType.h"
#include "extxml_uci/type/IFF_CapabilityCommandType.h"
#include "extxml_uci/type/IFF_CapabilityMDT.h"
#include "extxml_uci/type/IFF_CapabilityMT.h"
#include "extxml_uci/type/IFF_CapabilityStatusMDT.h"
#include "extxml_uci/type/IFF_CapabilityStatusMT.h"
#include "extxml_uci/type/IFF_CapabilityType.h"
#include "extxml_uci/type/IFF_CollectionConstraintsType.h"
#include "extxml_uci/type/IFF_CommandMT.h"
#include "extxml_uci/type/IFF_CommandStatusMDT.h"
#include "extxml_uci/type/IFF_CommandStatusMT.h"
#include "extxml_uci/type/IFF_ConsentRequestMT.h"
#include "extxml_uci/type/IFF_ConsentRequestStatusMDT.h"
#include "extxml_uci/type/IFF_ConsentRequestStatusMT.h"
#include "extxml_uci/type/IFF_ConsentRequestType.h"
#include "extxml_uci/type/IFF_SettingsCommandMDT.h"
#include "extxml_uci/type/IFF_SettingsCommandMT.h"
#include "extxml_uci/type/IFF_SettingsCommandStatusMDT.h"
#include "extxml_uci/type/IFF_SettingsCommandStatusMT.h"
#include "extxml_uci/type/IFF_TransponderModeControlType.h"
#include "extxml_uci/type/IJMS_DataLinkIdentifierType.h"
#include "extxml_uci/type/IJMS_QuerySpecificDataType.h"
#include "extxml_uci/type/IO_PortCommandMT.h"
#include "extxml_uci/type/IO_PortCommandStatusMDT.h"
#include "extxml_uci/type/IO_PortCommandStatusMT.h"
#include "extxml_uci/type/IO_PortCommandType.h"
#include "extxml_uci/type/IO_PortStatusMT.h"
#include "extxml_uci/type/IO_PortStatusType.h"
#include "extxml_uci/type/IP_DataLinkNativeInfoType.h"
#include "extxml_uci/type/IPv4_DataLinkNativeInfoType.h"
#include "extxml_uci/type/IPv6_DataLinkNativeInfoType.h"
#include "extxml_uci/type/IdentityConfidenceType.h"
#include "extxml_uci/type/IdentityType.h"
#include "extxml_uci/type/ImageAugmentationParametersType.h"
#include "extxml_uci/type/ImageGeoRegistrationProcessingResultsType.h"
#include "extxml_uci/type/ImagePixelGeoLocationProcessingParametersType.h"
#include "extxml_uci/type/ImagePixelGeoLocationProcessingResultsType.h"
#include "extxml_uci/type/ImageRegionOfInterestPET.h"
#include "extxml_uci/type/InertialStateRelativeType.h"
#include "extxml_uci/type/JREAP_GatewayNativeStatisticsType.h"
#include "extxml_uci/type/LAR_ID_Type.h"
#include "extxml_uci/type/LAR_MT.h"
#include "extxml_uci/type/LAR_ReportMT.h"
#include "extxml_uci/type/LAR_RequestMDT.h"
#include "extxml_uci/type/LAR_RequestMT.h"
#include "extxml_uci/type/LAR_RequestStatusMDT.h"
#include "extxml_uci/type/LAR_RequestStatusMT.h"
#include "extxml_uci/type/LOS_MeasurementWithUncertaintyType.h"
#include "extxml_uci/type/LOS_VariableA_Type.h"
#include "extxml_uci/type/LOS_VariableB_Type.h"
#include "extxml_uci/type/LaunchObjectID_Type.h"
#include "extxml_uci/type/LaunchObservationID_Type.h"
#include "extxml_uci/type/LaunchObservationMDT.h"
#include "extxml_uci/type/LaunchObservationMT.h"
#include "extxml_uci/type/LineDataStatusType.h"
#include "extxml_uci/type/LinePoint2D_Type.h"
#include "extxml_uci/type/LineTargetType.h"
#include "extxml_uci/type/LineType.h"
#include "extxml_uci/type/Link11DataLinkIdentifierType.h"
#include "extxml_uci/type/Link11QuerySpecificDataType.h"
#include "extxml_uci/type/Link16DataLinkIdentifierType.h"
#include "extxml_uci/type/Link16DataLinkNativeInfoType.h"
#include "extxml_uci/type/Link16EntityDataLinkNativeFilterType.h"
#include "extxml_uci/type/Link16EntityMetadataType.h"
#include "extxml_uci/type/Link16GatewayConfigurationType.h"
#include "extxml_uci/type/Link16InterfaceDataLinkNativeInfoType.h"
#include "extxml_uci/type/Link16SystemMetadataType.h"
#include "extxml_uci/type/Link16TN_QuerySpecificDataType.h"
#include "extxml_uci/type/LocatedEllipseType.h"
#include "extxml_uci/type/LocatedRectangleType.h"
#include "extxml_uci/type/LocationAndStatusBaseType.h"
#include "extxml_uci/type/LocationAndStatusExpireType.h"
#include "extxml_uci/type/LogMT.h"
#include "extxml_uci/type/MDF_ID_Type.h"
#include "extxml_uci/type/MDF_SubCategoryFileID_Type.h"
#include "extxml_uci/type/MDF_SubCategoryID_Type.h"
#include "extxml_uci/type/MTI_ActivityStatusBaseType.h"
#include "extxml_uci/type/MTI_ActivityStatusDetailType.h"
#include "extxml_uci/type/MTI_OpZoneFilterAreaType.h"
#include "extxml_uci/type/MTI_STANAG_4607_OpZoneFilterAreaType.h"
#include "extxml_uci/type/ManagedListBaseType.h"
#include "extxml_uci/type/MeasurementGroupID_Type.h"
#include "extxml_uci/type/MeasurementID_Type.h"
#include "extxml_uci/type/MessageConfigurationID_Type.h"
#include "extxml_uci/type/MessageTransmissionFilterRecordDRLE.h"
#include "extxml_uci/type/MessageTransmissionFilterRecordID_Type.h"
#include "extxml_uci/type/MessageTransmissionFilterRecordMDT.h"
#include "extxml_uci/type/MessageTransmissionFilterRecordMT.h"
#include "extxml_uci/type/MessageTransmissionListDRL.h"
#include "extxml_uci/type/MessageTransmissionListID_Type.h"
#include "extxml_uci/type/MessageTransmissionListMDT.h"
#include "extxml_uci/type/MessageTransmissionListMT.h"
#include "extxml_uci/type/MessageType.h"
#include "extxml_uci/type/MetadataID_Type.h"
#include "extxml_uci/type/MissionActivationRequestMDT.h"
#include "extxml_uci/type/MissionActivationRequestMT.h"
#include "extxml_uci/type/MissionActivationRequestStatusMDT.h"
#include "extxml_uci/type/MissionActivationRequestStatusMT.h"
#include "extxml_uci/type/MissionContingencyAlertID_Type.h"
#include "extxml_uci/type/MissionContingencyAlertMT.h"
#include "extxml_uci/type/MissionDefinitionID_Type.h"
#include "extxml_uci/type/MissionDefinitionMDT.h"
#include "extxml_uci/type/MissionDefinitionMT.h"
#include "extxml_uci/type/MissionEnvironmentObjectActionType.h"
#include "extxml_uci/type/MissionEnvironmentObjectBaseType.h"
#include "extxml_uci/type/MissionEnvironmentObjectEffectType.h"
#include "extxml_uci/type/MissionEnvironmentObjectEntityType.h"
#include "extxml_uci/type/MissionEnvironmentObjectOpLineType.h"
#include "extxml_uci/type/MissionEnvironmentObjectOpPointType.h"
#include "extxml_uci/type/MissionEnvironmentObjectOpVolumeType.h"
#include "extxml_uci/type/MissionEnvironmentObjectOpZoneType.h"
#include "extxml_uci/type/MissionEnvironmentObjectResponseType.h"
#include "extxml_uci/type/MissionEnvironmentObjectSystemType.h"
#include "extxml_uci/type/MissionEnvironmentObjectTaskType.h"
#include "extxml_uci/type/MissionEnvironmentOverrideID_Type.h"
#include "extxml_uci/type/MissionEnvironmentOverrideMDT.h"
#include "extxml_uci/type/MissionEnvironmentOverrideMT.h"
#include "extxml_uci/type/MissionID_Type.h"
#include "extxml_uci/type/MissionPlanActivationApprovalStatusMT.h"
#include "extxml_uci/type/MissionPlanActivationCommandID_Type.h"
#include "extxml_uci/type/MissionPlanActivationCommandMT.h"
#include "extxml_uci/type/MissionPlanActivationCommandStatusMT.h"
#include "extxml_uci/type/MissionPlanActivationStatusMT.h"
#include "extxml_uci/type/MissionPlanApprovalStatusMT.h"
#include "extxml_uci/type/MissionPlanCommandID_Type.h"
#include "extxml_uci/type/MissionPlanCommandMT.h"
#include "extxml_uci/type/MissionPlanCommandStatusMT.h"
#include "extxml_uci/type/MissionPlanExecutionStatusMT.h"
#include "extxml_uci/type/MissionPlanID_Type.h"
#include "extxml_uci/type/MissionPlanInputsType.h"
#include "extxml_uci/type/MissionPlanMT.h"
#include "extxml_uci/type/MissionPlanMetricsReportID_Type.h"
#include "extxml_uci/type/MissionPlanMetricsReportMT.h"
#include "extxml_uci/type/MissionPlanMetricsReportRequestMDT.h"
#include "extxml_uci/type/MissionPlanMetricsReportRequestMT.h"
#include "extxml_uci/type/MissionPlanMetricsReportRequestStatusMDT.h"
#include "extxml_uci/type/MissionPlanMetricsReportRequestStatusMT.h"
#include "extxml_uci/type/MissionPlanProcessDescriptionType.h"
#include "extxml_uci/type/MissionPlanStatusMT.h"
#include "extxml_uci/type/MissionPlanValidationCommandMDT.h"
#include "extxml_uci/type/MissionPlanValidationCommandMT.h"
#include "extxml_uci/type/MissionPlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/MissionPlanValidationCommandStatusMT.h"
#include "extxml_uci/type/MissionPlanValidationID_Type.h"
#include "extxml_uci/type/MissionPlanValidationInputsType.h"
#include "extxml_uci/type/MissionPlanValidationMT.h"
#include "extxml_uci/type/MissionPlanningOrchestrationID_Type.h"
#include "extxml_uci/type/MissionPlanningOrchestrationMDT.h"
#include "extxml_uci/type/MissionPlanningOrchestrationMT.h"
#include "extxml_uci/type/MissionRequirementStatusMT.h"
#include "extxml_uci/type/ModRateDataType.h"
#include "extxml_uci/type/ModulationOnPulseDataBaseType.h"
#include "extxml_uci/type/ModulationOnPulseDataType.h"
#include "extxml_uci/type/MultiObjectType.h"
#include "extxml_uci/type/MultistaticEmitterDataID_Type.h"
#include "extxml_uci/type/MultistaticEmitterDataMT.h"
#include "extxml_uci/type/MultistaticEmitterID_Type.h"
#include "extxml_uci/type/MvAnomalyEventID_Type.h"
#include "extxml_uci/type/MvAnomalyEventMDT.h"
#include "extxml_uci/type/MvAnomalyEventMT.h"
#include "extxml_uci/type/NATO_Link1DataLinkIdentifierType.h"
#include "extxml_uci/type/NATO_Link1QuerySpecificDataType.h"
#include "extxml_uci/type/NITF_PackingPlanPET.h"
#include "extxml_uci/type/NITF_PackingPlanRevA_Type.h"
#include "extxml_uci/type/NITF_PackingPlanType.h"
#include "extxml_uci/type/NameValuePairType.h"
#include "extxml_uci/type/NavigationReportMT.h"
#include "extxml_uci/type/NetworkLinkID_Type.h"
#include "extxml_uci/type/NotificationBaseType.h"
#include "extxml_uci/type/NotificationID_Type.h"
#include "extxml_uci/type/OB_SensorID_Type.h"
#include "extxml_uci/type/ObservationMeasurementID_Type.h"
#include "extxml_uci/type/ObservationMeasurementReportID_Type.h"
#include "extxml_uci/type/ObservationMeasurementReportMT.h"
#include "extxml_uci/type/ObservationReportID_Type.h"
#include "extxml_uci/type/ObservationReportMT.h"
#include "extxml_uci/type/OffsetLocationErrorType.h"
#include "extxml_uci/type/OffsetLocationType.h"
#include "extxml_uci/type/OpBaseType.h"
#include "extxml_uci/type/OpLineID_Type.h"
#include "extxml_uci/type/OpLineMDT.h"
#include "extxml_uci/type/OpLineMT.h"
#include "extxml_uci/type/OpLineType.h"
#include "extxml_uci/type/OpNotificationMDT.h"
#include "extxml_uci/type/OpNotificationMT.h"
#include "extxml_uci/type/OpPointBaseType.h"
#include "extxml_uci/type/OpPointID_Type.h"
#include "extxml_uci/type/OpPointMDT.h"
#include "extxml_uci/type/OpPointMT.h"
#include "extxml_uci/type/OpRoutingID_Type.h"
#include "extxml_uci/type/OpRoutingMT.h"
#include "extxml_uci/type/OpVolumeID_Type.h"
#include "extxml_uci/type/OpVolumeMDT.h"
#include "extxml_uci/type/OpVolumeMT.h"
#include "extxml_uci/type/OpZoneFilterAreaPET.h"
#include "extxml_uci/type/OpZoneID_Type.h"
#include "extxml_uci/type/OpZoneMDT.h"
#include "extxml_uci/type/OpZoneMT.h"
#include "extxml_uci/type/OpZoneType.h"
#include "extxml_uci/type/OpaqueCapabilityMDT.h"
#include "extxml_uci/type/OpaqueCapabilityMT.h"
#include "extxml_uci/type/OpaqueCapabilityStatusMDT.h"
#include "extxml_uci/type/OpaqueCapabilityStatusMT.h"
#include "extxml_uci/type/OpaqueSettingsCommandMDT.h"
#include "extxml_uci/type/OpaqueSettingsCommandMT.h"
#include "extxml_uci/type/OpaqueSettingsCommandStatusMDT.h"
#include "extxml_uci/type/OpaqueSettingsCommandStatusMT.h"
#include "extxml_uci/type/OperationsAreaDataLinkNativeFilterType.h"
#include "extxml_uci/type/OperatorActionCommandMDT.h"
#include "extxml_uci/type/OperatorActionCommandMT.h"
#include "extxml_uci/type/OperatorActionCommandStatusMDT.h"
#include "extxml_uci/type/OperatorActionCommandStatusMT.h"
#include "extxml_uci/type/OperatorActionID_Type.h"
#include "extxml_uci/type/OperatorAnnotationID_Type.h"
#include "extxml_uci/type/OperatorAnnotationMDT.h"
#include "extxml_uci/type/OperatorAnnotationMT.h"
#include "extxml_uci/type/OperatorID_Type.h"
#include "extxml_uci/type/OperatorLocationOfInterestID_Type.h"
#include "extxml_uci/type/OperatorLocationOfInterestMDT.h"
#include "extxml_uci/type/OperatorLocationOfInterestMT.h"
#include "extxml_uci/type/OperatorMDT.h"
#include "extxml_uci/type/OperatorMT.h"
#include "extxml_uci/type/OperatorNotificationAckID_Type.h"
#include "extxml_uci/type/OperatorNotificationAckMT.h"
#include "extxml_uci/type/OperatorNotificationID_Type.h"
#include "extxml_uci/type/OperatorNotificationMT.h"
#include "extxml_uci/type/OperatorNotificationOverrideID_Type.h"
#include "extxml_uci/type/OperatorNotificationOverrideMT.h"
#include "extxml_uci/type/OperatorRoleID_Type.h"
#include "extxml_uci/type/OperatorRoleMDT.h"
#include "extxml_uci/type/OperatorRoleMT.h"
#include "extxml_uci/type/OpticalCollectionConstraintsType.h"
#include "extxml_uci/type/OrbitActivityExecutionStatusType.h"
#include "extxml_uci/type/OrbitActivityPlanApprovalStatusMT.h"
#include "extxml_uci/type/OrbitActivityPlanCommandID_Type.h"
#include "extxml_uci/type/OrbitActivityPlanCommandMT.h"
#include "extxml_uci/type/OrbitActivityPlanCommandStatusMT.h"
#include "extxml_uci/type/OrbitActivityPlanExecutionStatusMT.h"
#include "extxml_uci/type/OrbitActivityPlanID_Type.h"
#include "extxml_uci/type/OrbitActivityPlanInputsType.h"
#include "extxml_uci/type/OrbitActivityPlanMT.h"
#include "extxml_uci/type/OrbitActivityPlanStatusMT.h"
#include "extxml_uci/type/OrbitActivityPlanStatusType.h"
#include "extxml_uci/type/OrbitActivityPlanValidationCommandMDT.h"
#include "extxml_uci/type/OrbitActivityPlanValidationCommandMT.h"
#include "extxml_uci/type/OrbitActivityPlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/OrbitActivityPlanValidationCommandStatusMT.h"
#include "extxml_uci/type/OrbitActivityPlanValidationID_Type.h"
#include "extxml_uci/type/OrbitActivityPlanValidationInputsType.h"
#include "extxml_uci/type/OrbitActivityPlanValidationMT.h"
#include "extxml_uci/type/OrbitActivityType.h"
#include "extxml_uci/type/OrbitChangeActivityMT.h"
#include "extxml_uci/type/OrbitChangeActivityType.h"
#include "extxml_uci/type/OrbitChangeCapabilityMDT.h"
#include "extxml_uci/type/OrbitChangeCapabilityMT.h"
#include "extxml_uci/type/OrbitChangeCapabilityStatusMDT.h"
#include "extxml_uci/type/OrbitChangeCapabilityStatusMT.h"
#include "extxml_uci/type/OrbitChangeCapabilityType.h"
#include "extxml_uci/type/OrbitChangeTaskBaseType.h"
#include "extxml_uci/type/OrbitChangeTaskType.h"
#include "extxml_uci/type/OrbitConjunctionAssessmentID_Type.h"
#include "extxml_uci/type/OrbitConjunctionAssessmentMT.h"
#include "extxml_uci/type/OrbitConjunctionAssessmentRequestMDT.h"
#include "extxml_uci/type/OrbitConjunctionAssessmentRequestMT.h"
#include "extxml_uci/type/OrbitConjunctionAssessmentRequestStatusMDT.h"
#include "extxml_uci/type/OrbitConjunctionAssessmentRequestStatusMT.h"
#include "extxml_uci/type/OrbitExecutionPlanSetType.h"
#include "extxml_uci/type/OrbitKinematicsParametersType.h"
#include "extxml_uci/type/OrbitKinematicsSequenceID_Type.h"
#include "extxml_uci/type/OrbitKinematicsSequenceInsertionType.h"
#include "extxml_uci/type/OrbitKinematicsSequenceType.h"
#include "extxml_uci/type/OrbitKinematicsType.h"
#include "extxml_uci/type/OrbitManeuverSegmentID_Type.h"
#include "extxml_uci/type/OrbitMetricsID_Type.h"
#include "extxml_uci/type/OrbitMetricsMT.h"
#include "extxml_uci/type/OrbitMetricsRequestMDT.h"
#include "extxml_uci/type/OrbitMetricsRequestMT.h"
#include "extxml_uci/type/OrbitMetricsRequestStatusMDT.h"
#include "extxml_uci/type/OrbitMetricsRequestStatusMT.h"
#include "extxml_uci/type/OrbitModificationRequestMDT.h"
#include "extxml_uci/type/OrbitModificationRequestMT.h"
#include "extxml_uci/type/OrbitModificationRequestStatusMDT.h"
#include "extxml_uci/type/OrbitModificationRequestStatusMT.h"
#include "extxml_uci/type/OrbitPlanApprovalStatusMT.h"
#include "extxml_uci/type/OrbitPlanCommandID_Type.h"
#include "extxml_uci/type/OrbitPlanCommandMT.h"
#include "extxml_uci/type/OrbitPlanCommandStatusMT.h"
#include "extxml_uci/type/OrbitPlanExecutionStatusMT.h"
#include "extxml_uci/type/OrbitPlanID_Type.h"
#include "extxml_uci/type/OrbitPlanInputsType.h"
#include "extxml_uci/type/OrbitPlanMT.h"
#include "extxml_uci/type/OrbitPlanProcessDescriptionType.h"
#include "extxml_uci/type/OrbitPlanStatusMT.h"
#include "extxml_uci/type/OrbitPlanStatusType.h"
#include "extxml_uci/type/OrbitPlanValidationCommandMDT.h"
#include "extxml_uci/type/OrbitPlanValidationCommandMT.h"
#include "extxml_uci/type/OrbitPlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/OrbitPlanValidationCommandStatusMT.h"
#include "extxml_uci/type/OrbitPlanValidationID_Type.h"
#include "extxml_uci/type/OrbitPlanValidationInputsType.h"
#include "extxml_uci/type/OrbitPlanValidationMT.h"
#include "extxml_uci/type/OrbitPlanningCandidateType.h"
#include "extxml_uci/type/OrbitSequenceCompletedType.h"
#include "extxml_uci/type/OrbitSequenceEstimateType.h"
#include "extxml_uci/type/OrbitalConjunctionID_Type.h"
#include "extxml_uci/type/OrbitalDebrisCloudID_Type.h"
#include "extxml_uci/type/OrbitalDebrisEstimateID_Type.h"
#include "extxml_uci/type/OrbitalDebrisEstimateMT.h"
#include "extxml_uci/type/OrbitalDebrisEstimateRequestMDT.h"
#include "extxml_uci/type/OrbitalDebrisEstimateRequestMT.h"
#include "extxml_uci/type/OrbitalDebrisEstimateRequestStatusMDT.h"
#include "extxml_uci/type/OrbitalDebrisEstimateRequestStatusMT.h"
#include "extxml_uci/type/OrbitalDebrisID_Type.h"
#include "extxml_uci/type/OrbitalEphemerisRequestParametersType.h"
#include "extxml_uci/type/OrbitalFiltersQueryType.h"
#include "extxml_uci/type/OrbitalManeuverDetailsBaseType.h"
#include "extxml_uci/type/OrbitalManeuverDetailsType.h"
#include "extxml_uci/type/OrbitalManeuverID_Type.h"
#include "extxml_uci/type/OrbitalSurveillanceActivityDetailType.h"
#include "extxml_uci/type/OrbitalSurveillanceActivityMT.h"
#include "extxml_uci/type/OrbitalSurveillanceActivityType.h"
#include "extxml_uci/type/OrbitalSurveillanceCapabilityMDT.h"
#include "extxml_uci/type/OrbitalSurveillanceCapabilityMT.h"
#include "extxml_uci/type/OrbitalSurveillanceCapabilityStatusMDT.h"
#include "extxml_uci/type/OrbitalSurveillanceCapabilityStatusMT.h"
#include "extxml_uci/type/OrbitalSurveillanceCapabilityType.h"
#include "extxml_uci/type/OrbitalSurveillanceObjectBaseType.h"
#include "extxml_uci/type/OrbitalSurveillanceObjectType.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorActivityMT.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorActivityType.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorCapabilityMDT.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorCapabilityMT.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorCapabilityStatusMDT.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorCapabilityStatusMT.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorCapabilityType.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorTaskBaseType.h"
#include "extxml_uci/type/OrbitalSurveillanceSensorTaskType.h"
#include "extxml_uci/type/OrbitalSurveillanceTaskBaseType.h"
#include "extxml_uci/type/OrbitalSurveillanceTaskType.h"
#include "extxml_uci/type/OrderOfBattleC2_EmitterType.h"
#include "extxml_uci/type/OrderOfBattleEmitterType.h"
#include "extxml_uci/type/OrderOfBattleID_Type.h"
#include "extxml_uci/type/OrderOfBattleMDT.h"
#include "extxml_uci/type/OrderOfBattleMT.h"
#include "extxml_uci/type/PO_ActivityCommandType.h"
#include "extxml_uci/type/PO_ActivityMT.h"
#include "extxml_uci/type/PO_ActivityType.h"
#include "extxml_uci/type/PO_ApertureID_Type.h"
#include "extxml_uci/type/PO_CapabilityCommandType.h"
#include "extxml_uci/type/PO_CapabilityMDT.h"
#include "extxml_uci/type/PO_CapabilityMT.h"
#include "extxml_uci/type/PO_CapabilityStatusMDT.h"
#include "extxml_uci/type/PO_CapabilityStatusMT.h"
#include "extxml_uci/type/PO_CapabilityStatusType.h"
#include "extxml_uci/type/PO_CapabilityType.h"
#include "extxml_uci/type/PO_CollectionConstraintsType.h"
#include "extxml_uci/type/PO_CommandMT.h"
#include "extxml_uci/type/PO_CommandStatusMDT.h"
#include "extxml_uci/type/PO_CommandStatusMT.h"
#include "extxml_uci/type/PO_FPA_ChannelID_Type.h"
#include "extxml_uci/type/PO_FPA_ID_Type.h"
#include "extxml_uci/type/PO_FilterID_Type.h"
#include "extxml_uci/type/PO_LensID_Type.h"
#include "extxml_uci/type/PO_ProcessingStageID_Type.h"
#include "extxml_uci/type/PO_ProductGeneratorID_Type.h"
#include "extxml_uci/type/PO_ProductGeneratorOutputID_Type.h"
#include "extxml_uci/type/PO_ProductOutputCommandImageryType.h"
#include "extxml_uci/type/PO_SettingsCommandMDT.h"
#include "extxml_uci/type/PO_SettingsCommandMT.h"
#include "extxml_uci/type/PO_SettingsCommandStatusMDT.h"
#include "extxml_uci/type/PO_SettingsCommandStatusMT.h"
#include "extxml_uci/type/PO_TaskBaseType.h"
#include "extxml_uci/type/PO_TaskType.h"
#include "extxml_uci/type/PO_WindowID_Type.h"
#include "extxml_uci/type/PRI_DataBaseType.h"
#include "extxml_uci/type/PRI_DataType.h"
#include "extxml_uci/type/PackageID_Type.h"
#include "extxml_uci/type/PackageMDT.h"
#include "extxml_uci/type/PackageMT.h"
#include "extxml_uci/type/PackageStatusMT.h"
#include "extxml_uci/type/ParameterID_Type.h"
#include "extxml_uci/type/PathID_Type.h"
#include "extxml_uci/type/PixelCountSettingsType.h"
#include "extxml_uci/type/PixelDataType.h"
#include "extxml_uci/type/PixelOutputDataType.h"
#include "extxml_uci/type/PlanInputsCoreType.h"
#include "extxml_uci/type/PlanModificationRequestMDT.h"
#include "extxml_uci/type/PlanModificationRequestMT.h"
#include "extxml_uci/type/PlanModificationRequestStatusMDT.h"
#include "extxml_uci/type/PlanModificationRequestStatusMT.h"
#include "extxml_uci/type/PlanPartsBaseType.h"
#include "extxml_uci/type/PlanPartsType.h"
#include "extxml_uci/type/PlanScoresID_Type.h"
#include "extxml_uci/type/PlanScoresMT.h"
#include "extxml_uci/type/PlanScoresRequestMDT.h"
#include "extxml_uci/type/PlanScoresRequestMT.h"
#include "extxml_uci/type/PlanScoresRequestStatusMDT.h"
#include "extxml_uci/type/PlanScoresRequestStatusMT.h"
#include "extxml_uci/type/PlanStatusType.h"
#include "extxml_uci/type/PlanValidationInputsBaseType.h"
#include "extxml_uci/type/PlannedActivityBaseType.h"
#include "extxml_uci/type/PlannedActivityExecutionStatusType.h"
#include "extxml_uci/type/PlannedActivityID_Type.h"
#include "extxml_uci/type/PlannedActivityTriggerType.h"
#include "extxml_uci/type/PlannedActivityType.h"
#include "extxml_uci/type/PlannedCommActionExtendedType.h"
#include "extxml_uci/type/PlannedCommActionType.h"
#include "extxml_uci/type/PlanningAllowedType.h"
#include "extxml_uci/type/PlanningApplicabilitySystemType.h"
#include "extxml_uci/type/PlanningCandidateBaseType.h"
#include "extxml_uci/type/PlanningDiscoveryBaseType.h"
#include "extxml_uci/type/PlanningFunctionID_Type.h"
#include "extxml_uci/type/PlanningFunctionMT.h"
#include "extxml_uci/type/PlanningFunctionSettingsCommandMDT.h"
#include "extxml_uci/type/PlanningFunctionSettingsCommandMT.h"
#include "extxml_uci/type/PlanningFunctionSettingsCommandStatusMDT.h"
#include "extxml_uci/type/PlanningFunctionSettingsCommandStatusMT.h"
#include "extxml_uci/type/PlanningFunctionStatusMT.h"
#include "extxml_uci/type/PlanningInterfaceType.h"
#include "extxml_uci/type/PlanningInterfacesType.h"
#include "extxml_uci/type/PlanningLocationType.h"
#include "extxml_uci/type/PlanningProcessID_Type.h"
#include "extxml_uci/type/PlansReferenceBaseType.h"
#include "extxml_uci/type/PlansReferenceType.h"
#include "extxml_uci/type/PlatformIdentityConfidenceType.h"
#include "extxml_uci/type/PlatformIdentityType.h"
#include "extxml_uci/type/Point2D_ReportedType.h"
#include "extxml_uci/type/Point2D_Type.h"
#include "extxml_uci/type/Point3D_Type.h"
#include "extxml_uci/type/PositionAndVelocityCovarianceType.h"
#include "extxml_uci/type/PositionReportDetailedMT.h"
#include "extxml_uci/type/PositionReportMT.h"
#include "extxml_uci/type/PrioritizationListID_Type.h"
#include "extxml_uci/type/PrioritizationListMDT.h"
#include "extxml_uci/type/PrioritizationListMT.h"
#include "extxml_uci/type/ProcessingConstrainedSubPlanType.h"
#include "extxml_uci/type/ProcessingParametersPET.h"
#include "extxml_uci/type/ProcessingResultsPET.h"
#include "extxml_uci/type/ProductClassificationPlanID_Type.h"
#include "extxml_uci/type/ProductClassificationPlanMT.h"
#include "extxml_uci/type/ProductClassificationReportID_Type.h"
#include "extxml_uci/type/ProductClassificationReportMT.h"
#include "extxml_uci/type/ProductClassificationRequestMDT.h"
#include "extxml_uci/type/ProductClassificationRequestMT.h"
#include "extxml_uci/type/ProductClassificationRequestStatusMDT.h"
#include "extxml_uci/type/ProductClassificationRequestStatusMT.h"
#include "extxml_uci/type/ProductClassificationTaskMDT.h"
#include "extxml_uci/type/ProductClassificationTaskMT.h"
#include "extxml_uci/type/ProductClassificationTaskStatusMDT.h"
#include "extxml_uci/type/ProductClassificationTaskStatusMT.h"
#include "extxml_uci/type/ProductCollectionPathType.h"
#include "extxml_uci/type/ProductDisseminationConfigurationID_Type.h"
#include "extxml_uci/type/ProductDisseminationConfigurationMDT.h"
#include "extxml_uci/type/ProductDisseminationConfigurationMT.h"
#include "extxml_uci/type/ProductDisseminationDestinationID_Type.h"
#include "extxml_uci/type/ProductDisseminationDestinationMDT.h"
#include "extxml_uci/type/ProductDisseminationDestinationMT.h"
#include "extxml_uci/type/ProductDisseminationPlanID_Type.h"
#include "extxml_uci/type/ProductDisseminationPlanMT.h"
#include "extxml_uci/type/ProductDisseminationReportID_Type.h"
#include "extxml_uci/type/ProductDisseminationReportMT.h"
#include "extxml_uci/type/ProductDisseminationRequestMDT.h"
#include "extxml_uci/type/ProductDisseminationRequestMT.h"
#include "extxml_uci/type/ProductDisseminationRequestStatusMDT.h"
#include "extxml_uci/type/ProductDisseminationRequestStatusMT.h"
#include "extxml_uci/type/ProductDisseminationTaskMDT.h"
#include "extxml_uci/type/ProductDisseminationTaskMT.h"
#include "extxml_uci/type/ProductDisseminationTaskStatusMDT.h"
#include "extxml_uci/type/ProductDisseminationTaskStatusMT.h"
#include "extxml_uci/type/ProductDownloadPlanID_Type.h"
#include "extxml_uci/type/ProductDownloadPlanMT.h"
#include "extxml_uci/type/ProductDownloadReportID_Type.h"
#include "extxml_uci/type/ProductDownloadReportMT.h"
#include "extxml_uci/type/ProductDownloadRequestMDT.h"
#include "extxml_uci/type/ProductDownloadRequestMT.h"
#include "extxml_uci/type/ProductDownloadRequestStatusMDT.h"
#include "extxml_uci/type/ProductDownloadRequestStatusMT.h"
#include "extxml_uci/type/ProductDownloadTaskMDT.h"
#include "extxml_uci/type/ProductDownloadTaskMT.h"
#include "extxml_uci/type/ProductDownloadTaskStatusMDT.h"
#include "extxml_uci/type/ProductDownloadTaskStatusMT.h"
#include "extxml_uci/type/ProductLocationID_Type.h"
#include "extxml_uci/type/ProductLocationMDT.h"
#include "extxml_uci/type/ProductLocationMT.h"
#include "extxml_uci/type/ProductManagementTaskDataType.h"
#include "extxml_uci/type/ProductManagementTaskStatusDataType.h"
#include "extxml_uci/type/ProductMetadataID_Type.h"
#include "extxml_uci/type/ProductMetadataMDT.h"
#include "extxml_uci/type/ProductMetadataMT.h"
#include "extxml_uci/type/ProductOutputCapabilityImageryType.h"
#include "extxml_uci/type/ProductOutputCapabilityStatusImageryType.h"
#include "extxml_uci/type/ProductOutputCommandBasicType.h"
#include "extxml_uci/type/ProductOutputCommandImageryType.h"
#include "extxml_uci/type/ProductOutputCommandSMTI_Type.h"
#include "extxml_uci/type/ProductOutputStatusType.h"
#include "extxml_uci/type/ProductOutputType.h"
#include "extxml_uci/type/ProductProcessingClassificationType.h"
#include "extxml_uci/type/ProductProcessingFunctionMT.h"
#include "extxml_uci/type/ProductProcessingFunctionStatusMT.h"
#include "extxml_uci/type/ProductProcessingPlanID_Type.h"
#include "extxml_uci/type/ProductProcessingPlanMT.h"
#include "extxml_uci/type/ProductProcessingReportID_Type.h"
#include "extxml_uci/type/ProductProcessingReportMT.h"
#include "extxml_uci/type/ProductProcessingRequestMDT.h"
#include "extxml_uci/type/ProductProcessingRequestMT.h"
#include "extxml_uci/type/ProductProcessingRequestStatusMDT.h"
#include "extxml_uci/type/ProductProcessingRequestStatusMT.h"
#include "extxml_uci/type/ProductProcessingTaskMDT.h"
#include "extxml_uci/type/ProductProcessingTaskMT.h"
#include "extxml_uci/type/ProductProcessingTaskStatusMDT.h"
#include "extxml_uci/type/ProductProcessingTaskStatusMT.h"
#include "extxml_uci/type/ProductProcessingType.h"
#include "extxml_uci/type/ProductRateSettingsType.h"
#include "extxml_uci/type/ProductSizeSettingsType.h"
#include "extxml_uci/type/PropagatorSettingsDataRequestMDT.h"
#include "extxml_uci/type/PropagatorSettingsDataRequestMT.h"
#include "extxml_uci/type/PropagatorSettingsDataRequestStatusMDT.h"
#include "extxml_uci/type/PropagatorSettingsDataRequestStatusMT.h"
#include "extxml_uci/type/PropagatorSettingsID_Type.h"
#include "extxml_uci/type/PropagatorSettingsMT.h"
#include "extxml_uci/type/ProximityOperationsType.h"
#include "extxml_uci/type/PulseDataID_Type.h"
#include "extxml_uci/type/PulseDataMT.h"
#include "extxml_uci/type/PumpComponentExtendedStatusType.h"
#include "extxml_uci/type/QueryDataRequestMDT.h"
#include "extxml_uci/type/QueryDataRequestMT.h"
#include "extxml_uci/type/QueryDataRequestStatusMDT.h"
#include "extxml_uci/type/QueryDataRequestStatusMT.h"
#include "extxml_uci/type/QueryPET.h"
#include "extxml_uci/type/QuerySpecificDataPET.h"
#include "extxml_uci/type/QueryType.h"
#include "extxml_uci/type/RDMA_InitializeID_Type.h"
#include "extxml_uci/type/RDMA_InitializeMT.h"
#include "extxml_uci/type/RDMA_InitializeSetupID_Type.h"
#include "extxml_uci/type/RDMA_InitializeSetupMT.h"
#include "extxml_uci/type/RFD_ComponentIdentifierType.h"
#include "extxml_uci/type/RF_ControlCommandMDT.h"
#include "extxml_uci/type/RF_ControlCommandMT.h"
#include "extxml_uci/type/RF_ControlCommandStatusMDT.h"
#include "extxml_uci/type/RF_ControlCommandStatusMT.h"
#include "extxml_uci/type/RF_ProfileID_Type.h"
#include "extxml_uci/type/RF_ProfileMT.h"
#include "extxml_uci/type/RF_ReportID_Type.h"
#include "extxml_uci/type/RF_ReportMT.h"
#include "extxml_uci/type/RF_ResourceAllocationID_Type.h"
#include "extxml_uci/type/RF_ResourceAllocationMT.h"
#include "extxml_uci/type/RF_ResourceAllocationRequestMDT.h"
#include "extxml_uci/type/RF_ResourceAllocationRequestMT.h"
#include "extxml_uci/type/RF_ResourceAllocationRequestStatusMDT.h"
#include "extxml_uci/type/RF_ResourceAllocationRequestStatusMT.h"
#include "extxml_uci/type/RF_ThreadInstanceSetupCommandMDT.h"
#include "extxml_uci/type/RF_ThreadInstanceSetupCommandMT.h"
#include "extxml_uci/type/RF_ThreadInstanceSetupCommandStatusMDT.h"
#include "extxml_uci/type/RF_ThreadInstanceSetupCommandStatusMT.h"
#include "extxml_uci/type/RSO_ApproachType.h"
#include "extxml_uci/type/RSTA_FileTraceabilityType.h"
#include "extxml_uci/type/RSTA_TraceabilityType.h"
#include "extxml_uci/type/RadarActivityCommandType.h"
#include "extxml_uci/type/RadarAltimeterActivityCommandType.h"
#include "extxml_uci/type/RadarAltimeterActivityMT.h"
#include "extxml_uci/type/RadarAltimeterActivityType.h"
#include "extxml_uci/type/RadarAltimeterCapabilityCommandType.h"
#include "extxml_uci/type/RadarAltimeterCapabilityMDT.h"
#include "extxml_uci/type/RadarAltimeterCapabilityMT.h"
#include "extxml_uci/type/RadarAltimeterCapabilityStatusMDT.h"
#include "extxml_uci/type/RadarAltimeterCapabilityStatusMT.h"
#include "extxml_uci/type/RadarAltimeterCapabilityType.h"
#include "extxml_uci/type/RadarAltimeterCollectionOptionsType.h"
#include "extxml_uci/type/RadarAltimeterCommandMT.h"
#include "extxml_uci/type/RadarAltimeterCommandStatusMDT.h"
#include "extxml_uci/type/RadarAltimeterCommandStatusMT.h"
#include "extxml_uci/type/RadarAltimeterReportID_Type.h"
#include "extxml_uci/type/RadarAltimeterReportMT.h"
#include "extxml_uci/type/RadarAltimeterSettingsCommandMDT.h"
#include "extxml_uci/type/RadarAltimeterSettingsCommandMT.h"
#include "extxml_uci/type/RadarAltimeterSettingsCommandStatusMDT.h"
#include "extxml_uci/type/RadarAltimeterSettingsCommandStatusMT.h"
#include "extxml_uci/type/RadarCollectionOptionsType.h"
#include "extxml_uci/type/RectangleType.h"
#include "extxml_uci/type/ReferenceActivityMT.h"
#include "extxml_uci/type/ReferenceActivityType.h"
#include "extxml_uci/type/ReferenceCapabilityMDT.h"
#include "extxml_uci/type/ReferenceCapabilityMT.h"
#include "extxml_uci/type/ReferenceCapabilityStatusMDT.h"
#include "extxml_uci/type/ReferenceCapabilityStatusMT.h"
#include "extxml_uci/type/ReferenceCapabilityType.h"
#include "extxml_uci/type/ReferenceFrameID_Type.h"
#include "extxml_uci/type/ReferenceFrameMT.h"
#include "extxml_uci/type/RefuelActivityCommandType.h"
#include "extxml_uci/type/RefuelActivityMT.h"
#include "extxml_uci/type/RefuelActivityType.h"
#include "extxml_uci/type/RefuelCapabilityDrogueCommandType.h"
#include "extxml_uci/type/RefuelCapabilityDrogueCommonType.h"
#include "extxml_uci/type/RefuelCapabilityDrogueStatusType.h"
#include "extxml_uci/type/RefuelCapabilityExtendCommandType.h"
#include "extxml_uci/type/RefuelCapabilityMDT.h"
#include "extxml_uci/type/RefuelCapabilityMT.h"
#include "extxml_uci/type/RefuelCapabilityStatusMDT.h"
#include "extxml_uci/type/RefuelCapabilityStatusMT.h"
#include "extxml_uci/type/RefuelCapabilityType.h"
#include "extxml_uci/type/RefuelCommandMT.h"
#include "extxml_uci/type/RefuelCommandStatusMDT.h"
#include "extxml_uci/type/RefuelCommandStatusMT.h"
#include "extxml_uci/type/RefuelSettingsCommandMDT.h"
#include "extxml_uci/type/RefuelSettingsCommandMT.h"
#include "extxml_uci/type/RefuelSettingsCommandStatusMDT.h"
#include "extxml_uci/type/RefuelSettingsCommandStatusMT.h"
#include "extxml_uci/type/RefuelTaskBaseType.h"
#include "extxml_uci/type/RefuelTaskType.h"
#include "extxml_uci/type/RelationshipDesignationID_Type.h"
#include "extxml_uci/type/RelationshipDesignationMDT.h"
#include "extxml_uci/type/RelationshipDesignationMT.h"
#include "extxml_uci/type/RequestBaseType.h"
#include "extxml_uci/type/RequestID_Type.h"
#include "extxml_uci/type/RequestStatusBaseType.h"
#include "extxml_uci/type/RequirementAllocationBaseType.h"
#include "extxml_uci/type/RequirementAllocationWindowID_Type.h"
#include "extxml_uci/type/RequirementDependencyBaseType.h"
#include "extxml_uci/type/RequirementDependencyType.h"
#include "extxml_uci/type/RequirementExecutionApprovalStatusBaseType.h"
#include "extxml_uci/type/RequirementExecutionStatusDetailsType.h"
#include "extxml_uci/type/RequirementFailedTriggerType.h"
#include "extxml_uci/type/RequirementGenerationDependencyType.h"
#include "extxml_uci/type/RequirementMetricsID_Type.h"
#include "extxml_uci/type/RequirementMetricsMT.h"
#include "extxml_uci/type/RequirementMetricsReportType.h"
#include "extxml_uci/type/RequirementMetricsRequestMDT.h"
#include "extxml_uci/type/RequirementMetricsRequestMT.h"
#include "extxml_uci/type/RequirementMetricsRequestStatusMDT.h"
#include "extxml_uci/type/RequirementMetricsRequestStatusMT.h"
#include "extxml_uci/type/RequirementOptionsCommandMDT.h"
#include "extxml_uci/type/RequirementOptionsCommandMT.h"
#include "extxml_uci/type/RequirementOptionsCommandStatusMT.h"
#include "extxml_uci/type/RequirementOptionsID_Type.h"
#include "extxml_uci/type/RequirementOptionsMT.h"
#include "extxml_uci/type/RequirementPlanningCandidateType.h"
#include "extxml_uci/type/RequirementPlanningResultBaseType.h"
#include "extxml_uci/type/RequirementPlanningResultType.h"
#include "extxml_uci/type/RequirementPlanningStatusDetailsType.h"
#include "extxml_uci/type/RequirementSetID_Type.h"
#include "extxml_uci/type/RequirementSetMDT.h"
#include "extxml_uci/type/RequirementSetMT.h"
#include "extxml_uci/type/RequirementTaxonomyDetailedType.h"
#include "extxml_uci/type/RequirementTaxonomyType.h"
#include "extxml_uci/type/RequirementTriggerType.h"
#include "extxml_uci/type/RequirementsReferenceLockableType.h"
#include "extxml_uci/type/RequirementsReferenceType.h"
#include "extxml_uci/type/RequirementsTemplateID_Type.h"
#include "extxml_uci/type/ResendDataRequestMDT.h"
#include "extxml_uci/type/ResendDataRequestMT.h"
#include "extxml_uci/type/ResendDataRequestStatusMDT.h"
#include "extxml_uci/type/ResendDataRequestStatusMT.h"
#include "extxml_uci/type/ResponseActivityMT.h"
#include "extxml_uci/type/ResponseActivityType.h"
#include "extxml_uci/type/ResponseAllocationType.h"
#include "extxml_uci/type/ResponseCancelCommandMDT.h"
#include "extxml_uci/type/ResponseCancelCommandMT.h"
#include "extxml_uci/type/ResponseCancelCommandStatusMDT.h"
#include "extxml_uci/type/ResponseCancelCommandStatusMT.h"
#include "extxml_uci/type/ResponseCapabilityCommandType.h"
#include "extxml_uci/type/ResponseCapabilityMDT.h"
#include "extxml_uci/type/ResponseCapabilityMT.h"
#include "extxml_uci/type/ResponseCapabilityStatusMDT.h"
#include "extxml_uci/type/ResponseCapabilityStatusMT.h"
#include "extxml_uci/type/ResponseCapabilityType.h"
#include "extxml_uci/type/ResponseCommandMT.h"
#include "extxml_uci/type/ResponseCommandStatusMDT.h"
#include "extxml_uci/type/ResponseCommandStatusMT.h"
#include "extxml_uci/type/ResponseExecutionApprovalStatusMDT.h"
#include "extxml_uci/type/ResponseExecutionApprovalStatusMT.h"
#include "extxml_uci/type/ResponseID_Type.h"
#include "extxml_uci/type/ResponseMT.h"
#include "extxml_uci/type/ResponsePlanApprovalStatusMT.h"
#include "extxml_uci/type/ResponsePlanCommandID_Type.h"
#include "extxml_uci/type/ResponsePlanCommandMT.h"
#include "extxml_uci/type/ResponsePlanCommandStatusMT.h"
#include "extxml_uci/type/ResponsePlanExecutionStatusMT.h"
#include "extxml_uci/type/ResponsePlanID_Type.h"
#include "extxml_uci/type/ResponsePlanInputsType.h"
#include "extxml_uci/type/ResponsePlanMT.h"
#include "extxml_uci/type/ResponsePlanProcessDescriptionType.h"
#include "extxml_uci/type/ResponsePlanStatusMT.h"
#include "extxml_uci/type/ResponsePlanValidationCommandMDT.h"
#include "extxml_uci/type/ResponsePlanValidationCommandMT.h"
#include "extxml_uci/type/ResponsePlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/ResponsePlanValidationCommandStatusMT.h"
#include "extxml_uci/type/ResponsePlanValidationID_Type.h"
#include "extxml_uci/type/ResponsePlanValidationInputsType.h"
#include "extxml_uci/type/ResponsePlanValidationMT.h"
#include "extxml_uci/type/ResponsePlanningResultType.h"
#include "extxml_uci/type/ResponsePlanningStatusMDT.h"
#include "extxml_uci/type/ResponsePlanningStatusMT.h"
#include "extxml_uci/type/ResponseStatusMDT.h"
#include "extxml_uci/type/ResponseStatusMT.h"
#include "extxml_uci/type/RouteActivityExecutionStatusType.h"
#include "extxml_uci/type/RouteActivityPlanApprovalStatusMT.h"
#include "extxml_uci/type/RouteActivityPlanCommandID_Type.h"
#include "extxml_uci/type/RouteActivityPlanCommandMT.h"
#include "extxml_uci/type/RouteActivityPlanCommandStatusMT.h"
#include "extxml_uci/type/RouteActivityPlanExecutionStatusMT.h"
#include "extxml_uci/type/RouteActivityPlanID_Type.h"
#include "extxml_uci/type/RouteActivityPlanInputsType.h"
#include "extxml_uci/type/RouteActivityPlanMT.h"
#include "extxml_uci/type/RouteActivityPlanStatusMT.h"
#include "extxml_uci/type/RouteActivityPlanStatusType.h"
#include "extxml_uci/type/RouteActivityPlanValidationCommandMDT.h"
#include "extxml_uci/type/RouteActivityPlanValidationCommandMT.h"
#include "extxml_uci/type/RouteActivityPlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/RouteActivityPlanValidationCommandStatusMT.h"
#include "extxml_uci/type/RouteActivityPlanValidationID_Type.h"
#include "extxml_uci/type/RouteActivityPlanValidationInputsType.h"
#include "extxml_uci/type/RouteActivityPlanValidationMT.h"
#include "extxml_uci/type/RouteActivityType.h"
#include "extxml_uci/type/RouteExecutionPlanSetType.h"
#include "extxml_uci/type/RouteMetricsID_Type.h"
#include "extxml_uci/type/RouteMetricsMT.h"
#include "extxml_uci/type/RouteMetricsRequestMDT.h"
#include "extxml_uci/type/RouteMetricsRequestMT.h"
#include "extxml_uci/type/RouteMetricsRequestStatusMDT.h"
#include "extxml_uci/type/RouteMetricsRequestStatusMT.h"
#include "extxml_uci/type/RouteModificationRequestMDT.h"
#include "extxml_uci/type/RouteModificationRequestMT.h"
#include "extxml_uci/type/RouteModificationRequestStatusMDT.h"
#include "extxml_uci/type/RouteModificationRequestStatusMT.h"
#include "extxml_uci/type/RoutePlanApprovalStatusMT.h"
#include "extxml_uci/type/RoutePlanCommandID_Type.h"
#include "extxml_uci/type/RoutePlanCommandMT.h"
#include "extxml_uci/type/RoutePlanCommandStatusMT.h"
#include "extxml_uci/type/RoutePlanExecutionStatusMT.h"
#include "extxml_uci/type/RoutePlanID_Type.h"
#include "extxml_uci/type/RoutePlanInputsType.h"
#include "extxml_uci/type/RoutePlanMT.h"
#include "extxml_uci/type/RoutePlanProcessDescriptionType.h"
#include "extxml_uci/type/RoutePlanStatusMT.h"
#include "extxml_uci/type/RoutePlanStatusType.h"
#include "extxml_uci/type/RoutePlanValidationCommandMDT.h"
#include "extxml_uci/type/RoutePlanValidationCommandMT.h"
#include "extxml_uci/type/RoutePlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/RoutePlanValidationCommandStatusMT.h"
#include "extxml_uci/type/RoutePlanValidationID_Type.h"
#include "extxml_uci/type/RoutePlanValidationInputsType.h"
#include "extxml_uci/type/RoutePlanValidationMT.h"
#include "extxml_uci/type/RoutePlanningCandidateType.h"
#include "extxml_uci/type/RouteVulnerabilityMetricsRequestType.h"
#include "extxml_uci/type/RunwayID_Type.h"
#include "extxml_uci/type/SAR_ActivityCommandType.h"
#include "extxml_uci/type/SAR_ActivityMT.h"
#include "extxml_uci/type/SAR_ActivityType.h"
#include "extxml_uci/type/SAR_AutomaticTargetDetectionParametersType.h"
#include "extxml_uci/type/SAR_CapabilityCommandType.h"
#include "extxml_uci/type/SAR_CapabilityMDT.h"
#include "extxml_uci/type/SAR_CapabilityMT.h"
#include "extxml_uci/type/SAR_CapabilityStatusMDT.h"
#include "extxml_uci/type/SAR_CapabilityStatusMT.h"
#include "extxml_uci/type/SAR_CapabilityStatusType.h"
#include "extxml_uci/type/SAR_CapabilityType.h"
#include "extxml_uci/type/SAR_CoherentChangeDetectionParametersType.h"
#include "extxml_uci/type/SAR_CollectionConstraintsType.h"
#include "extxml_uci/type/SAR_CollectionOptionsType.h"
#include "extxml_uci/type/SAR_CommandMT.h"
#include "extxml_uci/type/SAR_CommandStatusMDT.h"
#include "extxml_uci/type/SAR_CommandStatusMT.h"
#include "extxml_uci/type/SAR_DynamicImageParametersType.h"
#include "extxml_uci/type/SAR_ProcessingParametersType.h"
#include "extxml_uci/type/SAR_SettingsCommandMDT.h"
#include "extxml_uci/type/SAR_SettingsCommandMT.h"
#include "extxml_uci/type/SAR_SettingsCommandStatusMDT.h"
#include "extxml_uci/type/SAR_SettingsCommandStatusMT.h"
#include "extxml_uci/type/SAR_TaskAchievabilityAssessmentRequestType.h"
#include "extxml_uci/type/SAR_TaskAchievabilityAssessmentType.h"
#include "extxml_uci/type/SAR_TaskBaseType.h"
#include "extxml_uci/type/SAR_TaskType.h"
#include "extxml_uci/type/SAR_TwoColorMultiViewParametersType.h"
#include "extxml_uci/type/SMTI_ActivityCommandType.h"
#include "extxml_uci/type/SMTI_ActivityMT.h"
#include "extxml_uci/type/SMTI_ActivityType.h"
#include "extxml_uci/type/SMTI_CapabilityCommandType.h"
#include "extxml_uci/type/SMTI_CapabilityMDT.h"
#include "extxml_uci/type/SMTI_CapabilityMT.h"
#include "extxml_uci/type/SMTI_CapabilityStatusMDT.h"
#include "extxml_uci/type/SMTI_CapabilityStatusMT.h"
#include "extxml_uci/type/SMTI_CapabilityType.h"
#include "extxml_uci/type/SMTI_CollectionConstraintsType.h"
#include "extxml_uci/type/SMTI_CollectionOptionsType.h"
#include "extxml_uci/type/SMTI_CommandMT.h"
#include "extxml_uci/type/SMTI_CommandStatusMDT.h"
#include "extxml_uci/type/SMTI_CommandStatusMT.h"
#include "extxml_uci/type/SMTI_SettingsCommandMDT.h"
#include "extxml_uci/type/SMTI_SettingsCommandMT.h"
#include "extxml_uci/type/SMTI_SettingsCommandStatusMDT.h"
#include "extxml_uci/type/SMTI_SettingsCommandStatusMT.h"
#include "extxml_uci/type/SMTI_TaskBaseType.h"
#include "extxml_uci/type/SMTI_TaskType.h"
#include "extxml_uci/type/SOB_C2_RecordBaseType.h"
#include "extxml_uci/type/SOB_C2_RecordID_Type.h"
#include "extxml_uci/type/SOB_C2_RecordMDT.h"
#include "extxml_uci/type/SOB_C2_RecordMT.h"
#include "extxml_uci/type/SOB_C2_RecordType.h"
#include "extxml_uci/type/SOB_CorrelationRecordID_Type.h"
#include "extxml_uci/type/SOB_CorrelationRecordMDT.h"
#include "extxml_uci/type/SOB_CorrelationRecordMT.h"
#include "extxml_uci/type/SOB_SatelliteRecordBaseType.h"
#include "extxml_uci/type/SOB_SatelliteRecordID_Type.h"
#include "extxml_uci/type/SOB_SatelliteRecordMDT.h"
#include "extxml_uci/type/SOB_SatelliteRecordMT.h"
#include "extxml_uci/type/SOB_SatelliteRecordType.h"
#include "extxml_uci/type/STANAG_4607_PackingPlanPET.h"
#include "extxml_uci/type/STANAG_4607_PackingPlanRevA_Type.h"
#include "extxml_uci/type/STANAG_4607_PackingPlanType.h"
#include "extxml_uci/type/SatelliteCharacteristicsID_Type.h"
#include "extxml_uci/type/SatelliteCharacteristicsMDT.h"
#include "extxml_uci/type/SatelliteCharacteristicsMT.h"
#include "extxml_uci/type/SatellitePhysicalConfigurationID_Type.h"
#include "extxml_uci/type/ScanDataBaseType.h"
#include "extxml_uci/type/ScanDataType.h"
#include "extxml_uci/type/ScoringProcessID_Type.h"
#include "extxml_uci/type/SectorType.h"
#include "extxml_uci/type/SecurityAuditRecordID_Type.h"
#include "extxml_uci/type/SecurityAuditRecordMT.h"
#include "extxml_uci/type/SegmentCompletedType.h"
#include "extxml_uci/type/SegmentEstimateType.h"
#include "extxml_uci/type/SegmentID_Type.h"
#include "extxml_uci/type/SelectionQuerySpecificDataType.h"
#include "extxml_uci/type/SelfDefenseStatusMDT.h"
#include "extxml_uci/type/SelfDefenseStatusMT.h"
#include "extxml_uci/type/SensorConstraintsBaseType.h"
#include "extxml_uci/type/SensorConstraintsType.h"
#include "extxml_uci/type/SeparationParametersType.h"
#include "extxml_uci/type/ServiceConfigurationChangeRequestMDT.h"
#include "extxml_uci/type/ServiceConfigurationChangeRequestMT.h"
#include "extxml_uci/type/ServiceConfigurationChangeRequestStatusMDT.h"
#include "extxml_uci/type/ServiceConfigurationChangeRequestStatusMT.h"
#include "extxml_uci/type/ServiceConfigurationParamsDataRequestMDT.h"
#include "extxml_uci/type/ServiceConfigurationParamsDataRequestMT.h"
#include "extxml_uci/type/ServiceConfigurationParamsDataRequestStatusMDT.h"
#include "extxml_uci/type/ServiceConfigurationParamsDataRequestStatusMT.h"
#include "extxml_uci/type/ServiceConfigurationParamsMT.h"
#include "extxml_uci/type/ServiceErrorReportID_Type.h"
#include "extxml_uci/type/ServiceErrorReportMT.h"
#include "extxml_uci/type/ServiceID_Type.h"
#include "extxml_uci/type/ServiceLifecycleCommandMDT.h"
#include "extxml_uci/type/ServiceLifecycleCommandMT.h"
#include "extxml_uci/type/ServiceLifecycleCommandStatusMDT.h"
#include "extxml_uci/type/ServiceLifecycleCommandStatusMT.h"
#include "extxml_uci/type/ServiceRegistrationRequestMDT.h"
#include "extxml_uci/type/ServiceRegistrationRequestMT.h"
#include "extxml_uci/type/ServiceRegistrationRequestStatusMDT.h"
#include "extxml_uci/type/ServiceRegistrationRequestStatusMT.h"
#include "extxml_uci/type/ServiceSettingsCommandMDT.h"
#include "extxml_uci/type/ServiceSettingsCommandMT.h"
#include "extxml_uci/type/ServiceSettingsCommandStatusMDT.h"
#include "extxml_uci/type/ServiceSettingsCommandStatusMT.h"
#include "extxml_uci/type/ServiceStatusDataRequestMDT.h"
#include "extxml_uci/type/ServiceStatusDataRequestMT.h"
#include "extxml_uci/type/ServiceStatusDataRequestStatusMDT.h"
#include "extxml_uci/type/ServiceStatusDataRequestStatusMT.h"
#include "extxml_uci/type/ServiceStatusMT.h"
#include "extxml_uci/type/SharedApertureSupportCapabilityStatusMDT.h"
#include "extxml_uci/type/SharedApertureSupportCapabilityStatusMT.h"
#include "extxml_uci/type/SharedRF_ApertureActivityBaseType.h"
#include "extxml_uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "extxml_uci/type/SharedRF_ApertureCapabilityCommandBaseType.h"
#include "extxml_uci/type/SignalEmitterKinematicsFixedType.h"
#include "extxml_uci/type/SignalID_Type.h"
#include "extxml_uci/type/SignalIdentityType.h"
#include "extxml_uci/type/SignalPulseWidthBaseType.h"
#include "extxml_uci/type/SignalPulseWidthType.h"
#include "extxml_uci/type/SignalRelativeType.h"
#include "extxml_uci/type/SignalReportID_Type.h"
#include "extxml_uci/type/SignalReportMT.h"
#include "extxml_uci/type/SpaceWeatherID_Type.h"
#include "extxml_uci/type/SpaceWeatherMT.h"
#include "extxml_uci/type/SpecialCodeDataLinkIdentifierType.h"
#include "extxml_uci/type/SpecificBlueSeparationType.h"
#include "extxml_uci/type/SpecificEmitterIdentityConfidenceType.h"
#include "extxml_uci/type/SpecificEmitterIdentityType.h"
#include "extxml_uci/type/SpecificIdentityConfidenceType.h"
#include "extxml_uci/type/SpecificIdentityType.h"
#include "extxml_uci/type/SpecificRedSeparationType.h"
#include "extxml_uci/type/SpecificVehicleIdentityConfidenceType.h"
#include "extxml_uci/type/SpectralDensityReportID_Type.h"
#include "extxml_uci/type/SpectralDensityReportMT.h"
#include "extxml_uci/type/StandardIdentityConfidenceType.h"
#include "extxml_uci/type/StandardIdentityType.h"
#include "extxml_uci/type/StateCovarianceNED_Type.h"
#include "extxml_uci/type/StoreCarriageCapabilityStatusBaseType.h"
#include "extxml_uci/type/StoreCarriageCapabilityStatusMT.h"
#include "extxml_uci/type/StoreCarriageCapabilityStatusType.h"
#include "extxml_uci/type/StoreCarriageStatusType.h"
#include "extxml_uci/type/StoreInformationBaseType.h"
#include "extxml_uci/type/StoreInformationType.h"
#include "extxml_uci/type/StoreLoadoutConfigurationID_Type.h"
#include "extxml_uci/type/StoreLoadoutConfigurationMT.h"
#include "extxml_uci/type/StoreLoadoutItemPET.h"
#include "extxml_uci/type/StoreLoadoutItemType.h"
#include "extxml_uci/type/StoreManagementCommandMT.h"
#include "extxml_uci/type/StoreManagementCommandStatusMDT.h"
#include "extxml_uci/type/StoreManagementCommandStatusMT.h"
#include "extxml_uci/type/StoreManagementCommandType.h"
#include "extxml_uci/type/StoreManagementReportID_Type.h"
#include "extxml_uci/type/StoreManagementReportMT.h"
#include "extxml_uci/type/StoreManagementStatusMDT.h"
#include "extxml_uci/type/StoreManagementStatusMT.h"
#include "extxml_uci/type/StoreStatusBaseType.h"
#include "extxml_uci/type/StoreStatusType.h"
#include "extxml_uci/type/StoreType.h"
#include "extxml_uci/type/StrikeActivityCommandType.h"
#include "extxml_uci/type/StrikeActivityMT.h"
#include "extxml_uci/type/StrikeActivityType.h"
#include "extxml_uci/type/StrikeCapabilityCommandType.h"
#include "extxml_uci/type/StrikeCapabilityMDT.h"
#include "extxml_uci/type/StrikeCapabilityMT.h"
#include "extxml_uci/type/StrikeCapabilityStatusMDT.h"
#include "extxml_uci/type/StrikeCapabilityStatusMT.h"
#include "extxml_uci/type/StrikeCapabilityStatusType.h"
#include "extxml_uci/type/StrikeCapabilityType.h"
#include "extxml_uci/type/StrikeCommandMT.h"
#include "extxml_uci/type/StrikeCommandStatusMDT.h"
#include "extxml_uci/type/StrikeCommandStatusMT.h"
#include "extxml_uci/type/StrikeConsentRequestMT.h"
#include "extxml_uci/type/StrikeConsentRequestStatusMDT.h"
#include "extxml_uci/type/StrikeConsentRequestStatusMT.h"
#include "extxml_uci/type/StrikeConsentRequestType.h"
#include "extxml_uci/type/StrikeSettingsCommandMDT.h"
#include "extxml_uci/type/StrikeSettingsCommandMT.h"
#include "extxml_uci/type/StrikeSettingsCommandStatusMDT.h"
#include "extxml_uci/type/StrikeSettingsCommandStatusMT.h"
#include "extxml_uci/type/StrikeTaskAchievabilityAssessmentRequestType.h"
#include "extxml_uci/type/StrikeTaskAchievabilityAssessmentType.h"
#include "extxml_uci/type/StrikeTaskWeaponType.h"
#include "extxml_uci/type/SubCapabilityID_Type.h"
#include "extxml_uci/type/SubsystemBIT_CommandMDT.h"
#include "extxml_uci/type/SubsystemBIT_CommandMT.h"
#include "extxml_uci/type/SubsystemBIT_CommandStatusMDT.h"
#include "extxml_uci/type/SubsystemBIT_CommandStatusMT.h"
#include "extxml_uci/type/SubsystemBIT_ConfigurationID_Type.h"
#include "extxml_uci/type/SubsystemBIT_ConfigurationMT.h"
#include "extxml_uci/type/SubsystemBIT_StatusMT.h"
#include "extxml_uci/type/SubsystemCalibrationCommandMDT.h"
#include "extxml_uci/type/SubsystemCalibrationCommandMT.h"
#include "extxml_uci/type/SubsystemCalibrationCommandStatusMDT.h"
#include "extxml_uci/type/SubsystemCalibrationCommandStatusMT.h"
#include "extxml_uci/type/SubsystemCalibrationConfigurationID_Type.h"
#include "extxml_uci/type/SubsystemCalibrationConfigurationMT.h"
#include "extxml_uci/type/SubsystemCalibrationStatusMT.h"
#include "extxml_uci/type/SubsystemCommandStatusBaseType.h"
#include "extxml_uci/type/SubsystemConfigurationDataRequestMDT.h"
#include "extxml_uci/type/SubsystemConfigurationDataRequestMT.h"
#include "extxml_uci/type/SubsystemConfigurationDataRequestStatusMDT.h"
#include "extxml_uci/type/SubsystemConfigurationDataRequestStatusMT.h"
#include "extxml_uci/type/SubsystemConfigurationID_Type.h"
#include "extxml_uci/type/SubsystemConfigurationMT.h"
#include "extxml_uci/type/SubsystemEraseCommandMDT.h"
#include "extxml_uci/type/SubsystemEraseCommandMT.h"
#include "extxml_uci/type/SubsystemEraseCommandStatusMDT.h"
#include "extxml_uci/type/SubsystemEraseCommandStatusMT.h"
#include "extxml_uci/type/SubsystemExtendedStatusPET.h"
#include "extxml_uci/type/SubsystemID_Type.h"
#include "extxml_uci/type/SubsystemMaintenanceCommandMDT.h"
#include "extxml_uci/type/SubsystemMaintenanceCommandMT.h"
#include "extxml_uci/type/SubsystemMaintenanceCommandStatusMDT.h"
#include "extxml_uci/type/SubsystemMaintenanceCommandStatusMT.h"
#include "extxml_uci/type/SubsystemMaintenanceConfigurationID_Type.h"
#include "extxml_uci/type/SubsystemMaintenanceConfigurationMT.h"
#include "extxml_uci/type/SubsystemMaintenanceID_Type.h"
#include "extxml_uci/type/SubsystemMaintenanceStatusMT.h"
#include "extxml_uci/type/SubsystemMaintenanceTestCommandPET.h"
#include "extxml_uci/type/SubsystemMaintenanceTestCommandType.h"
#include "extxml_uci/type/SubsystemMaintenanceTestPET.h"
#include "extxml_uci/type/SubsystemMaintenanceTestResultPET.h"
#include "extxml_uci/type/SubsystemMaintenanceTestResultType.h"
#include "extxml_uci/type/SubsystemMaintenanceTestType.h"
#include "extxml_uci/type/SubsystemSettingsCommandMDT.h"
#include "extxml_uci/type/SubsystemSettingsCommandMT.h"
#include "extxml_uci/type/SubsystemSettingsCommandStatusMDT.h"
#include "extxml_uci/type/SubsystemSettingsCommandStatusMT.h"
#include "extxml_uci/type/SubsystemStateCommandMDT.h"
#include "extxml_uci/type/SubsystemStateCommandMT.h"
#include "extxml_uci/type/SubsystemStateCommandStatusMDT.h"
#include "extxml_uci/type/SubsystemStateCommandStatusMT.h"
#include "extxml_uci/type/SubsystemStatusDataRequestMDT.h"
#include "extxml_uci/type/SubsystemStatusDataRequestMT.h"
#include "extxml_uci/type/SubsystemStatusDataRequestStatusMDT.h"
#include "extxml_uci/type/SubsystemStatusDataRequestStatusMT.h"
#include "extxml_uci/type/SubsystemStatusDetailedDataRequestMDT.h"
#include "extxml_uci/type/SubsystemStatusDetailedDataRequestMT.h"
#include "extxml_uci/type/SubsystemStatusDetailedDataRequestStatusMDT.h"
#include "extxml_uci/type/SubsystemStatusDetailedDataRequestStatusMT.h"
#include "extxml_uci/type/SubsystemStatusDetailedMT.h"
#include "extxml_uci/type/SubsystemStatusMT.h"
#include "extxml_uci/type/SubsystemStreamMT.h"
#include "extxml_uci/type/SupportCapabilityCommandBaseType.h"
#include "extxml_uci/type/SupportCapabilityCommandStatusBaseType.h"
#include "extxml_uci/type/SupportCapabilityID_Type.h"
#include "extxml_uci/type/SupportCapabilityStatusBaseType.h"
#include "extxml_uci/type/SupportedResolutionID_Type.h"
#include "extxml_uci/type/SurvivabilityRiskLevelID_Type.h"
#include "extxml_uci/type/SurvivabilityRiskLevelMT.h"
#include "extxml_uci/type/SystemDeploymentActivityMT.h"
#include "extxml_uci/type/SystemDeploymentActivityType.h"
#include "extxml_uci/type/SystemDeploymentCapabilityMDT.h"
#include "extxml_uci/type/SystemDeploymentCapabilityMT.h"
#include "extxml_uci/type/SystemDeploymentCapabilityStatusMDT.h"
#include "extxml_uci/type/SystemDeploymentCapabilityStatusMT.h"
#include "extxml_uci/type/SystemDeploymentCapabilityStatusType.h"
#include "extxml_uci/type/SystemDeploymentCapabilityType.h"
#include "extxml_uci/type/SystemDeploymentTaskBaseType.h"
#include "extxml_uci/type/SystemDeploymentTaskType.h"
#include "extxml_uci/type/SystemEphemerisRequestParametersType.h"
#include "extxml_uci/type/SystemEstimationRequestMDT.h"
#include "extxml_uci/type/SystemEstimationRequestMT.h"
#include "extxml_uci/type/SystemEstimationRequestStatusMDT.h"
#include "extxml_uci/type/SystemEstimationRequestStatusMT.h"
#include "extxml_uci/type/SystemID_Type.h"
#include "extxml_uci/type/SystemIdentityType.h"
#include "extxml_uci/type/SystemManagementRequestMDT.h"
#include "extxml_uci/type/SystemManagementRequestMT.h"
#include "extxml_uci/type/SystemManagementRequestStatusMDT.h"
#include "extxml_uci/type/SystemManagementRequestStatusMT.h"
#include "extxml_uci/type/SystemMetadataMT.h"
#include "extxml_uci/type/SystemMetadataPET.h"
#include "extxml_uci/type/SystemNotificationMDT.h"
#include "extxml_uci/type/SystemNotificationMT.h"
#include "extxml_uci/type/SystemOrbitReportMT.h"
#include "extxml_uci/type/SystemOrbitalElementSetID_Type.h"
#include "extxml_uci/type/SystemOrbitalElementSetMDT.h"
#include "extxml_uci/type/SystemOrbitalElementSetMT.h"
#include "extxml_uci/type/SystemOrbitalElementSetRequestMDT.h"
#include "extxml_uci/type/SystemOrbitalElementSetRequestMT.h"
#include "extxml_uci/type/SystemOrbitalElementSetRequestStatusMDT.h"
#include "extxml_uci/type/SystemOrbitalElementSetRequestStatusMT.h"
#include "extxml_uci/type/SystemOrbitalElementSetType.h"
#include "extxml_uci/type/SystemOrbitalEphemerisID_Type.h"
#include "extxml_uci/type/SystemOrbitalEphemerisMDT.h"
#include "extxml_uci/type/SystemOrbitalEphemerisMT.h"
#include "extxml_uci/type/SystemOrbitalEphemerisRequestMDT.h"
#include "extxml_uci/type/SystemOrbitalEphemerisRequestMT.h"
#include "extxml_uci/type/SystemOrbitalEphemerisRequestStatusMDT.h"
#include "extxml_uci/type/SystemOrbitalEphemerisRequestStatusMT.h"
#include "extxml_uci/type/SystemOrbitalEphemerisType.h"
#include "extxml_uci/type/SystemOrbitalPositionReportMT.h"
#include "extxml_uci/type/SystemOrbitalVCM_ID_Type.h"
#include "extxml_uci/type/SystemOrbitalVCM_MDT.h"
#include "extxml_uci/type/SystemOrbitalVCM_MT.h"
#include "extxml_uci/type/SystemOrbitalVCM_RequestMDT.h"
#include "extxml_uci/type/SystemOrbitalVCM_RequestMT.h"
#include "extxml_uci/type/SystemOrbitalVCM_RequestStatusMDT.h"
#include "extxml_uci/type/SystemOrbitalVCM_RequestStatusMT.h"
#include "extxml_uci/type/SystemOrbitalVCM_Type.h"
#include "extxml_uci/type/SystemReadinessID_Type.h"
#include "extxml_uci/type/SystemReadinessMDT.h"
#include "extxml_uci/type/SystemReadinessMT.h"
#include "extxml_uci/type/SystemStatusMT.h"
#include "extxml_uci/type/SystemTimeAtReferenceMT.h"
#include "extxml_uci/type/SystemsNeededRequestMDT.h"
#include "extxml_uci/type/SystemsNeededRequestMT.h"
#include "extxml_uci/type/SystemsNeededRequestStatusMDT.h"
#include "extxml_uci/type/SystemsNeededRequestStatusMT.h"
#include "extxml_uci/type/TLE_BaseType.h"
#include "extxml_uci/type/TLE_Type.h"
#include "extxml_uci/type/TLE_WithParametersType.h"
#include "extxml_uci/type/TacticalOrderActivityMT.h"
#include "extxml_uci/type/TacticalOrderActivityType.h"
#include "extxml_uci/type/TacticalOrderCapabilityMDT.h"
#include "extxml_uci/type/TacticalOrderCapabilityMT.h"
#include "extxml_uci/type/TacticalOrderCapabilityStatusMDT.h"
#include "extxml_uci/type/TacticalOrderCapabilityStatusMT.h"
#include "extxml_uci/type/TacticalOrderCapabilityType.h"
#include "extxml_uci/type/TacticalOrderTaskBaseType.h"
#include "extxml_uci/type/TacticalOrderTaskType.h"
#include "extxml_uci/type/TagAssociationID_Type.h"
#include "extxml_uci/type/TagAssociationMDT.h"
#include "extxml_uci/type/TagAssociationMT.h"
#include "extxml_uci/type/TaskAchievabilityAssessmentPET.h"
#include "extxml_uci/type/TaskAchievabilityAssessmentRequestPET.h"
#include "extxml_uci/type/TaskAllocationType.h"
#include "extxml_uci/type/TaskCancelCommandMDT.h"
#include "extxml_uci/type/TaskCancelCommandMT.h"
#include "extxml_uci/type/TaskCancelCommandStatusMDT.h"
#include "extxml_uci/type/TaskCancelCommandStatusMT.h"
#include "extxml_uci/type/TaskCapabilityCommandType.h"
#include "extxml_uci/type/TaskCommandMT.h"
#include "extxml_uci/type/TaskCommandStatusMDT.h"
#include "extxml_uci/type/TaskCommandStatusMT.h"
#include "extxml_uci/type/TaskExecutionApprovalStatusMDT.h"
#include "extxml_uci/type/TaskExecutionApprovalStatusMT.h"
#include "extxml_uci/type/TaskID_Type.h"
#include "extxml_uci/type/TaskMT.h"
#include "extxml_uci/type/TaskPlanApprovalStatusMT.h"
#include "extxml_uci/type/TaskPlanCommandID_Type.h"
#include "extxml_uci/type/TaskPlanCommandMT.h"
#include "extxml_uci/type/TaskPlanCommandStatusMT.h"
#include "extxml_uci/type/TaskPlanExecutionStatusMT.h"
#include "extxml_uci/type/TaskPlanID_Type.h"
#include "extxml_uci/type/TaskPlanInputsType.h"
#include "extxml_uci/type/TaskPlanMT.h"
#include "extxml_uci/type/TaskPlanProcessDescriptionType.h"
#include "extxml_uci/type/TaskPlanStatusMT.h"
#include "extxml_uci/type/TaskPlanValidationCommandMDT.h"
#include "extxml_uci/type/TaskPlanValidationCommandMT.h"
#include "extxml_uci/type/TaskPlanValidationCommandStatusMDT.h"
#include "extxml_uci/type/TaskPlanValidationCommandStatusMT.h"
#include "extxml_uci/type/TaskPlanValidationID_Type.h"
#include "extxml_uci/type/TaskPlanValidationInputsType.h"
#include "extxml_uci/type/TaskPlanValidationMT.h"
#include "extxml_uci/type/TaskPlanningResultType.h"
#include "extxml_uci/type/TaskPlanningStatusMDT.h"
#include "extxml_uci/type/TaskPlanningStatusMT.h"
#include "extxml_uci/type/TaskStatusMDT.h"
#include "extxml_uci/type/TaskStatusMT.h"
#include "extxml_uci/type/TemperatureStatusType.h"
#include "extxml_uci/type/ThreatAssessmentRequestType.h"
#include "extxml_uci/type/TimeAndPolarDataType.h"
#include "extxml_uci/type/TimeAndPolarRecordType.h"
#include "extxml_uci/type/TimedZoneType.h"
#include "extxml_uci/type/TrackOptionsID_Type.h"
#include "extxml_uci/type/TrackingOpZoneFilterAreaType.h"
#include "extxml_uci/type/TurretCommandMT.h"
#include "extxml_uci/type/TurretCommandStatusMDT.h"
#include "extxml_uci/type/TurretCommandStatusMT.h"
#include "extxml_uci/type/TurretCommandType.h"
#include "extxml_uci/type/TurretReportID_Type.h"
#include "extxml_uci/type/TurretReportMT.h"
#include "extxml_uci/type/TurretStatusMDT.h"
#include "extxml_uci/type/TurretStatusMT.h"
#include "extxml_uci/type/UMID_AudioID_Type.h"
#include "extxml_uci/type/UMID_DataID_Type.h"
#include "extxml_uci/type/UMID_SystemID_Type.h"
#include "extxml_uci/type/UMID_VideoID_Type.h"
#include "extxml_uci/type/UnallocatedReasonType.h"
#include "extxml_uci/type/UnitID_Type.h"
#include "extxml_uci/type/UnitVectorType.h"
#include "extxml_uci/type/UnsignedIntegerMinMaxType.h"
#include "extxml_uci/type/ValidationCommandBaseType.h"
#include "extxml_uci/type/ValidationCommandStatusBaseType.h"
#include "extxml_uci/type/ValveDataStatusType.h"
#include "extxml_uci/type/VehicleConfigurationType.h"
#include "extxml_uci/type/VehicleIdentificationType.h"
#include "extxml_uci/type/Velocity2D_Type.h"
#include "extxml_uci/type/Velocity2D_UncertaintyType.h"
#include "extxml_uci/type/VersionedID_Type.h"
#include "extxml_uci/type/VideoAugmentationParametersType.h"
#include "extxml_uci/type/WeaponeeringLocationType.h"
#include "extxml_uci/type/WeaponeeringStoreType.h"
#include "extxml_uci/type/WeaponeeringTargetType.h"
#include "extxml_uci/type/WeaponeeringType.h"
#include "extxml_uci/type/WeatherAugmentationParametersType.h"
#include "extxml_uci/type/WeatherDatasetID_Type.h"
#include "extxml_uci/type/WeatherDatasetMDT.h"
#include "extxml_uci/type/WeatherDatasetMT.h"
#include "extxml_uci/type/WeatherMT.h"
#include "extxml_uci/type/WeatherObservationMT.h"
#include "extxml_uci/type/WeatherRadarActivityMT.h"
#include "extxml_uci/type/WeatherRadarActivityType.h"
#include "extxml_uci/type/WeatherRadarCapabilityCommandType.h"
#include "extxml_uci/type/WeatherRadarCapabilityMDT.h"
#include "extxml_uci/type/WeatherRadarCapabilityMT.h"
#include "extxml_uci/type/WeatherRadarCapabilityStatusMDT.h"
#include "extxml_uci/type/WeatherRadarCapabilityStatusMT.h"
#include "extxml_uci/type/WeatherRadarCapabilityType.h"
#include "extxml_uci/type/WeatherRadarCommandMT.h"
#include "extxml_uci/type/WeatherRadarCommandStatusMDT.h"
#include "extxml_uci/type/WeatherRadarCommandStatusMT.h"
#include "extxml_uci/type/WeatherRadarObservationMT.h"
#include "extxml_uci/type/WeatherRadarSettingsCommandMDT.h"
#include "extxml_uci/type/WeatherRadarSettingsCommandMT.h"
#include "extxml_uci/type/WeatherRadarSettingsCommandStatusMDT.h"
#include "extxml_uci/type/WeatherRadarSettingsCommandStatusMT.h"
#include "extxml_uci/type/WeatherReportGridDataType.h"
#include "extxml_uci/type/WorkingEOB_ID_Type.h"
#include "extxml_uci/type/WorkingEOB_MDT.h"
#include "extxml_uci/type/WorkingEOB_MT.h"
#include "extxml_uci/type/WorkingEOB_RequestMDT.h"
#include "extxml_uci/type/WorkingEOB_RequestMT.h"
#include "extxml_uci/type/WorkingEOB_RequestStatusMDT.h"
#include "extxml_uci/type/WorkingEOB_RequestStatusMT.h"
#include "extxml_uci/type/WorkingSOB_ID_Type.h"
#include "extxml_uci/type/WorkingSOB_MDT.h"
#include "extxml_uci/type/WorkingSOB_MT.h"
#include "extxml_uci/type/WorkingSOB_RequestMDT.h"
#include "extxml_uci/type/WorkingSOB_RequestMT.h"
#include "extxml_uci/type/WorkingSOB_RequestStatusMDT.h"
#include "extxml_uci/type/WorkingSOB_RequestStatusMT.h"
#include "extxml_uci/type/ZoneExternalType.h"
#include "extxml_uci/type/ZoneInclusionType.h"
#include "extxml_uci/type/ZoneType.h"
#include "uci/base/Accessor.h"
#include "uci/base/UCIException.h"
#include "uci/base/accessorType.h"
#include "uci/type/ACO_FileTraceabilityType.h"
#include "uci/type/ACO_TraceabilityType.h"
#include "uci/type/ACTDF_FileTraceabilityType.h"
#include "uci/type/ACTDF_TaskID_Type.h"
#include "uci/type/ACTDF_TraceabilityType.h"
#include "uci/type/AMTI_ActivityCommandType.h"
#include "uci/type/AMTI_ActivityMT.h"
#include "uci/type/AMTI_ActivityType.h"
#include "uci/type/AMTI_CapabilityCommandType.h"
#include "uci/type/AMTI_CapabilityMDT.h"
#include "uci/type/AMTI_CapabilityMT.h"
#include "uci/type/AMTI_CapabilityStatusMDT.h"
#include "uci/type/AMTI_CapabilityStatusMT.h"
#include "uci/type/AMTI_CapabilityType.h"
#include "uci/type/AMTI_CollectionConstraintsType.h"
#include "uci/type/AMTI_CommandMT.h"
#include "uci/type/AMTI_CommandStatusMDT.h"
#include "uci/type/AMTI_CommandStatusMT.h"
#include "uci/type/AMTI_SettingsCommandMDT.h"
#include "uci/type/AMTI_SettingsCommandMT.h"
#include "uci/type/AMTI_SettingsCommandStatusMDT.h"
#include "uci/type/AMTI_SettingsCommandStatusMT.h"
#include "uci/type/AMTI_TaskBaseType.h"
#include "uci/type/AMTI_TaskType.h"
#include "uci/type/AO_ActivityCommandType.h"
#include "uci/type/AO_ActivityMT.h"
#include "uci/type/AO_ActivityType.h"
#include "uci/type/AO_CapabilityCommandType.h"
#include "uci/type/AO_CapabilityMDT.h"
#include "uci/type/AO_CapabilityMT.h"
#include "uci/type/AO_CapabilityStatusMDT.h"
#include "uci/type/AO_CapabilityStatusMT.h"
#include "uci/type/AO_CapabilityType.h"
#include "uci/type/AO_CommandMT.h"
#include "uci/type/AO_CommandStatusMDT.h"
#include "uci/type/AO_CommandStatusMT.h"
#include "uci/type/AO_ConsentRequestMT.h"
#include "uci/type/AO_ConsentRequestStatusMDT.h"
#include "uci/type/AO_ConsentRequestStatusMT.h"
#include "uci/type/AO_ConsentRequestType.h"
#include "uci/type/AO_SettingsCommandMDT.h"
#include "uci/type/AO_SettingsCommandMT.h"
#include "uci/type/AO_SettingsCommandStatusMDT.h"
#include "uci/type/AO_SettingsCommandStatusMT.h"
#include "uci/type/AO_TaskBaseType.h"
#include "uci/type/AO_TaskType.h"
#include "uci/type/ATO_FileTraceabilityType.h"
#include "uci/type/ATO_TraceabilityType.h"
#include "uci/type/ATR_ProcessingParametersType.h"
#include "uci/type/ATR_ProcessingResultsType.h"
#include "uci/type/AccessAssessmentID_Type.h"
#include "uci/type/AccessAssessmentMT.h"
#include "uci/type/AccessAssessmentRequestMDT.h"
#include "uci/type/AccessAssessmentRequestMT.h"
#include "uci/type/AccessAssessmentRequestStatusMDT.h"
#include "uci/type/AccessAssessmentRequestStatusMT.h"
#include "uci/type/AchievabilityAssessmentPET.h"
#include "uci/type/AchievabilityAssessmentRequestPET.h"
#include "uci/type/ActionActivityMT.h"
#include "uci/type/ActionActivityType.h"
#include "uci/type/ActionAllocationType.h"
#include "uci/type/ActionCancelCommandMDT.h"
#include "uci/type/ActionCancelCommandMT.h"
#include "uci/type/ActionCancelCommandStatusMDT.h"
#include "uci/type/ActionCancelCommandStatusMT.h"
#include "uci/type/ActionCapabilityCommandType.h"
#include "uci/type/ActionCapabilityMDT.h"
#include "uci/type/ActionCapabilityMT.h"
#include "uci/type/ActionCapabilityStatusMDT.h"
#include "uci/type/ActionCapabilityStatusMT.h"
#include "uci/type/ActionCapabilityType.h"
#include "uci/type/ActionCommandMT.h"
#include "uci/type/ActionCommandStatusMDT.h"
#include "uci/type/ActionCommandStatusMT.h"
#include "uci/type/ActionExecutionApprovalStatusMDT.h"
#include "uci/type/ActionExecutionApprovalStatusMT.h"
#include "uci/type/ActionID_Type.h"
#include "uci/type/ActionMT.h"
#include "uci/type/ActionPlanApprovalStatusMT.h"
#include "uci/type/ActionPlanCommandID_Type.h"
#include "uci/type/ActionPlanCommandMT.h"
#include "uci/type/ActionPlanCommandStatusMT.h"
#include "uci/type/ActionPlanExecutionStatusMT.h"
#include "uci/type/ActionPlanID_Type.h"
#include "uci/type/ActionPlanInputsType.h"
#include "uci/type/ActionPlanMT.h"
#include "uci/type/ActionPlanProcessDescriptionType.h"
#include "uci/type/ActionPlanStatusMT.h"
#include "uci/type/ActionPlanValidationCommandMDT.h"
#include "uci/type/ActionPlanValidationCommandMT.h"
#include "uci/type/ActionPlanValidationCommandStatusMDT.h"
#include "uci/type/ActionPlanValidationCommandStatusMT.h"
#include "uci/type/ActionPlanValidationID_Type.h"
#include "uci/type/ActionPlanValidationInputsType.h"
#include "uci/type/ActionPlanValidationMT.h"
#include "uci/type/ActionPlanningResultType.h"
#include "uci/type/ActionPlanningStatusMDT.h"
#include "uci/type/ActionPlanningStatusMT.h"
#include "uci/type/ActionStatusMDT.h"
#include "uci/type/ActionStatusMT.h"
#include "uci/type/ActivityBaseType.h"
#include "uci/type/ActivityCommandBaseType.h"
#include "uci/type/ActivityExecutionStatusType.h"
#include "uci/type/ActivityID_Type.h"
#include "uci/type/ActivityMetricsID_Type.h"
#include "uci/type/ActivityMetricsMT.h"
#include "uci/type/ActivityMetricsRequestMDT.h"
#include "uci/type/ActivityMetricsRequestMT.h"
#include "uci/type/ActivityMetricsRequestStatusMDT.h"
#include "uci/type/ActivityMetricsRequestStatusMT.h"
#include "uci/type/ActivityPlanApprovalStatusMT.h"
#include "uci/type/ActivityPlanCommandID_Type.h"
#include "uci/type/ActivityPlanCommandMT.h"
#include "uci/type/ActivityPlanCommandStatusMT.h"
#include "uci/type/ActivityPlanExecutionStatusMT.h"
#include "uci/type/ActivityPlanID_Type.h"
#include "uci/type/ActivityPlanInputsType.h"
#include "uci/type/ActivityPlanMT.h"
#include "uci/type/ActivityPlanPartsCommandType.h"
#include "uci/type/ActivityPlanPartsType.h"
#include "uci/type/ActivityPlanProcessDescriptionType.h"
#include "uci/type/ActivityPlanStatusMT.h"
#include "uci/type/ActivityPlanStatusType.h"
#include "uci/type/ActivityPlanValidationCommandMDT.h"
#include "uci/type/ActivityPlanValidationCommandMT.h"
#include "uci/type/ActivityPlanValidationCommandStatusMDT.h"
#include "uci/type/ActivityPlanValidationCommandStatusMT.h"
#include "uci/type/ActivityPlanValidationID_Type.h"
#include "uci/type/ActivityPlanValidationInputsType.h"
#include "uci/type/ActivityPlanValidationMT.h"
#include "uci/type/AirSampleActivityMT.h"
#include "uci/type/AirSampleActivityType.h"
#include "uci/type/AirSampleCapabilityCommandType.h"
#include "uci/type/AirSampleCapabilityMDT.h"
#include "uci/type/AirSampleCapabilityMT.h"
#include "uci/type/AirSampleCapabilityStatusMDT.h"
#include "uci/type/AirSampleCapabilityStatusMT.h"
#include "uci/type/AirSampleCapabilityType.h"
#include "uci/type/AirSampleCommandMT.h"
#include "uci/type/AirSampleCommandStatusMDT.h"
#include "uci/type/AirSampleCommandStatusMT.h"
#include "uci/type/AirSampleSettingsCommandMDT.h"
#include "uci/type/AirSampleSettingsCommandMT.h"
#include "uci/type/AirSampleSettingsCommandStatusMDT.h"
#include "uci/type/AirSampleSettingsCommandStatusMT.h"
#include "uci/type/AirSampleTaskBaseType.h"
#include "uci/type/AirSampleTaskType.h"
#include "uci/type/AirfieldGeneralStoreType.h"
#include "uci/type/AirfieldID_Type.h"
#include "uci/type/AirfieldReportID_Type.h"
#include "uci/type/AirfieldReportMT.h"
#include "uci/type/AirfieldStoreType.h"
#include "uci/type/AirfieldStoresPET.h"
#include "uci/type/AnalysisRouteID_Type.h"
#include "uci/type/AnalysisRouteMT.h"
#include "uci/type/AnalysisRouteRequestMDT.h"
#include "uci/type/AnalysisRouteRequestMT.h"
#include "uci/type/AnalysisRouteRequestStatusMDT.h"
#include "uci/type/AnalysisRouteRequestStatusMT.h"
#include "uci/type/AnglePairType.h"
#include "uci/type/AntennaID_Type.h"
#include "uci/type/AntennaResourceID_Type.h"
#include "uci/type/ApplicabilityType.h"
#include "uci/type/ApprovalAuthorityID_Type.h"
#include "uci/type/ApprovalAuthorityMDT.h"
#include "uci/type/ApprovalAuthorityMT.h"
#include "uci/type/ApprovalAuthorityRequestMDT.h"
#include "uci/type/ApprovalAuthorityRequestMT.h"
#include "uci/type/ApprovalAuthorityRequestStatusMDT.h"
#include "uci/type/ApprovalAuthorityRequestStatusMT.h"
#include "uci/type/ApprovalManagementCommandMDT.h"
#include "uci/type/ApprovalManagementCommandMT.h"
#include "uci/type/ApprovalManagementCommandStatusMDT.h"
#include "uci/type/ApprovalManagementCommandStatusMT.h"
#include "uci/type/ApprovalPolicyBaseType.h"
#include "uci/type/ApprovalPolicyID_Type.h"
#include "uci/type/ApprovalPolicyMDT.h"
#include "uci/type/ApprovalPolicyMT.h"
#include "uci/type/ApprovalRequestMDT.h"
#include "uci/type/ApprovalRequestMT.h"
#include "uci/type/ApprovalRequestStatusMDT.h"
#include "uci/type/ApprovalRequestStatusMT.h"
#include "uci/type/AssessmentID_Type.h"
#include "uci/type/AssessmentMT.h"
#include "uci/type/AssessmentRequestMDT.h"
#include "uci/type/AssessmentRequestMT.h"
#include "uci/type/AssessmentRequestStatusMDT.h"
#include "uci/type/AssessmentRequestStatusMT.h"
#include "uci/type/AssessmentStatusType.h"
#include "uci/type/AugmentationProcessingParametersType.h"
#include "uci/type/AuthorizationID_Type.h"
#include "uci/type/AuthorizationMDT.h"
#include "uci/type/AuthorizationMT.h"
#include "uci/type/AutonomousPlanCommandType.h"
#include "uci/type/AutonomousPlanningActionID_Type.h"
#include "uci/type/AutonomousPlanningConstrainingPlansType.h"
#include "uci/type/AutonomousPlanningOtherSystemConstrainingPlansType.h"
#include "uci/type/AzElRequiredReferenceType.h"
#include "uci/type/BIT_ID_Type.h"
#include "uci/type/BaseEOB_RecordType.h"
#include "uci/type/BeamID_Type.h"
#include "uci/type/BehaviorType.h"
#include "uci/type/ByRequirementPolicyType.h"
#include "uci/type/ByResultPolicyType.h"
#include "uci/type/ByTriggerPolicyType.h"
#include "uci/type/COE_OrbitBaseType.h"
#include "uci/type/COE_OrbitType.h"
#include "uci/type/COMINT_ActivityCommandType.h"
#include "uci/type/COMINT_ActivityMT.h"
#include "uci/type/COMINT_ActivityType.h"
#include "uci/type/COMINT_CapabilityCommandType.h"
#include "uci/type/COMINT_CapabilityMDT.h"
#include "uci/type/COMINT_CapabilityMT.h"
#include "uci/type/COMINT_CapabilityStatusMDT.h"
#include "uci/type/COMINT_CapabilityStatusMT.h"
#include "uci/type/COMINT_CapabilityType.h"
#include "uci/type/COMINT_CommandMT.h"
#include "uci/type/COMINT_CommandStatusMDT.h"
#include "uci/type/COMINT_CommandStatusMT.h"
#include "uci/type/COMINT_ConsentRequestMT.h"
#include "uci/type/COMINT_ConsentRequestStatusMDT.h"
#include "uci/type/COMINT_ConsentRequestStatusMT.h"
#include "uci/type/COMINT_ConsentRequestType.h"
#include "uci/type/COMINT_ProcessingParametersType.h"
#include "uci/type/COMINT_SettingsCommandMDT.h"
#include "uci/type/COMINT_SettingsCommandMT.h"
#include "uci/type/COMINT_SettingsCommandStatusMDT.h"
#include "uci/type/COMINT_SettingsCommandStatusMT.h"
#include "uci/type/COMINT_TaskBaseType.h"
#include "uci/type/COMINT_TaskType.h"
#include "uci/type/CS_ActivityDetailType.h"
#include "uci/type/CS_ActivityType.h"
#include "uci/type/CS_AssessmentType.h"
#include "uci/type/CS_CapabilityType.h"
#include "uci/type/CalibrationID_Type.h"
#include "uci/type/CallSignType.h"
#include "uci/type/CannotComplyType.h"
#include "uci/type/CapabilityBaseType.h"
#include "uci/type/CapabilityCommandBaseType.h"
#include "uci/type/CapabilityCommandStatusBaseType.h"
#include "uci/type/CapabilityConfigurationID_Type.h"
#include "uci/type/CapabilityConsentRequestStatusBaseType.h"
#include "uci/type/CapabilityCoverageAreaID_Type.h"
#include "uci/type/CapabilityCoverageAreaMT.h"
#include "uci/type/CapabilityCoverageAreaRequestMDT.h"
#include "uci/type/CapabilityCoverageAreaRequestMT.h"
#include "uci/type/CapabilityCoverageAreaRequestStatusMDT.h"
#include "uci/type/CapabilityCoverageAreaRequestStatusMT.h"
#include "uci/type/CapabilityDeclarationBaseType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/CapabilitySettingsCommandBaseType.h"
#include "uci/type/CapabilitySettingsCommandStatusBaseType.h"
#include "uci/type/CapabilityStatusBaseType.h"
#include "uci/type/CapabilityStatusType.h"
#include "uci/type/CapabilityTaxonomyUniversalBaseType.h"
#include "uci/type/CapabilityTaxonomyUniversalType.h"
#include "uci/type/CargoDeliveryCapabilityMT.h"
#include "uci/type/CargoDeliveryCapabilityStatusMDT.h"
#include "uci/type/CargoDeliveryCapabilityStatusMT.h"
#include "uci/type/CargoDeliveryCapabilityType.h"
#include "uci/type/CargoID_Type.h"
#include "uci/type/CargoStatusMT.h"
#include "uci/type/CenterPointImageRegionOfInterestType.h"
#include "uci/type/CollectionConstraintsType.h"
#include "uci/type/ColorDepthSettingsType.h"
#include "uci/type/CommActionExtendedType.h"
#include "uci/type/CommActionType.h"
#include "uci/type/CommAntennaModeType.h"
#include "uci/type/CommAssetEstimationRequestMDT.h"
#include "uci/type/CommAssetEstimationRequestMT.h"
#include "uci/type/CommAssetEstimationRequestStatusMDT.h"
#include "uci/type/CommAssetEstimationRequestStatusMT.h"
#include "uci/type/CommAssetID_Type.h"
#include "uci/type/CommAssetMT.h"
#include "uci/type/CommAssetOrbitID_Type.h"
#include "uci/type/CommAssetOrbitMT.h"
#include "uci/type/CommAssetPositionReportMT.h"
#include "uci/type/CommBLOS_CommWaveformActivityCommandType.h"
#include "uci/type/CommBLOS_CommWaveformActivityType.h"
#include "uci/type/CommBLOS_CommWaveformCapabilityCommandType.h"
#include "uci/type/CommCDL_CommWaveformActivityCommandType.h"
#include "uci/type/CommCDL_CommWaveformActivityType.h"
#include "uci/type/CommCDL_CommWaveformCapabilityCommandType.h"
#include "uci/type/CommConfigurationID_Type.h"
#include "uci/type/CommCoverageDataType.h"
#include "uci/type/CommCoverageUserDataType.h"
#include "uci/type/CommDataType.h"
#include "uci/type/CommEffectivityID_Type.h"
#include "uci/type/CommIFDL_CommWaveformActivityCommandType.h"
#include "uci/type/CommIFDL_CommWaveformActivityType.h"
#include "uci/type/CommIFDL_CommWaveformCapabilityCommandType.h"
#include "uci/type/CommLink16CommWaveformActivityCommandType.h"
#include "uci/type/CommLink16CommWaveformActivityType.h"
#include "uci/type/CommLink16CommWaveformCapabilityCommandType.h"
#include "uci/type/CommMADL_CommWaveformActivityCommandType.h"
#include "uci/type/CommMADL_CommWaveformActivityType.h"
#include "uci/type/CommMADL_CommWaveformCapabilityCommandType.h"
#include "uci/type/CommOutageType.h"
#include "uci/type/CommPTW_CommWaveformActivityCommandType.h"
#include "uci/type/CommPTW_CommWaveformActivityType.h"
#include "uci/type/CommPTW_CommWaveformCapabilityCommandType.h"
#include "uci/type/CommPointingCommandMDT.h"
#include "uci/type/CommPointingCommandMT.h"
#include "uci/type/CommPointingCommandStatusMDT.h"
#include "uci/type/CommPointingCommandStatusMT.h"
#include "uci/type/CommPointingID_Type.h"
#include "uci/type/CommPointingMT.h"
#include "uci/type/CommPointingRequestMDT.h"
#include "uci/type/CommPointingRequestMT.h"
#include "uci/type/CommPointingRequestStatusMDT.h"
#include "uci/type/CommPointingRequestStatusMT.h"
#include "uci/type/CommProfileID_Type.h"
#include "uci/type/CommRelayActivityMT.h"
#include "uci/type/CommRelayActivityType.h"
#include "uci/type/CommRelayCapabilityCommandType.h"
#include "uci/type/CommRelayCapabilityMDT.h"
#include "uci/type/CommRelayCapabilityMT.h"
#include "uci/type/CommRelayCapabilityStatusMDT.h"
#include "uci/type/CommRelayCapabilityStatusMT.h"
#include "uci/type/CommRelayCapabilityType.h"
#include "uci/type/CommRelayCommandMT.h"
#include "uci/type/CommRelayCommandStatusMDT.h"
#include "uci/type/CommRelayCommandStatusMT.h"
#include "uci/type/CommRelaySettingsCommandMDT.h"
#include "uci/type/CommRelaySettingsCommandMT.h"
#include "uci/type/CommRelaySettingsCommandStatusMDT.h"
#include "uci/type/CommRelaySettingsCommandStatusMT.h"
#include "uci/type/CommRelayTaskBaseType.h"
#include "uci/type/CommRelayTaskType.h"
#include "uci/type/CommSINCGARS_CommWaveformActivityCommandType.h"
#include "uci/type/CommSINCGARS_CommWaveformActivityType.h"
#include "uci/type/CommSINCGARS_CommWaveformCapabilityCommandType.h"
#include "uci/type/CommScheduleAllocationID_Type.h"
#include "uci/type/CommScheduleAllocationMT.h"
#include "uci/type/CommScheduleAllocationUpdateRequestMDT.h"
#include "uci/type/CommScheduleAllocationUpdateRequestMT.h"
#include "uci/type/CommScheduleAllocationUpdateRequestStatusMDT.h"
#include "uci/type/CommScheduleAllocationUpdateRequestStatusMT.h"
#include "uci/type/CommScheduleAvailabilityID_Type.h"
#include "uci/type/CommScheduleAvailabilityMT.h"
#include "uci/type/CommSchedulingRequestMDT.h"
#include "uci/type/CommSchedulingRequestMT.h"
#include "uci/type/CommSchedulingRequestStatusMDT.h"
#include "uci/type/CommSchedulingRequestStatusMT.h"
#include "uci/type/CommSchedulingRequirementID_Type.h"
#include "uci/type/CommSchedulingRequirementMT.h"
#include "uci/type/CommStarlinkCommWaveformActivityCommandType.h"
#include "uci/type/CommStarlinkCommWaveformActivityType.h"
#include "uci/type/CommStarlinkCommWaveformCapabilityCommandType.h"
#include "uci/type/CommSystemID_Type.h"
#include "uci/type/CommSystemMT.h"
#include "uci/type/CommTerminalActivityCommandType.h"
#include "uci/type/CommTerminalActivityMT.h"
#include "uci/type/CommTerminalActivityType.h"
#include "uci/type/CommTerminalCapabilityCommandType.h"
#include "uci/type/CommTerminalCapabilityMDT.h"
#include "uci/type/CommTerminalCapabilityMT.h"
#include "uci/type/CommTerminalCapabilityStatusMDT.h"
#include "uci/type/CommTerminalCapabilityStatusMT.h"
#include "uci/type/CommTerminalCapabilityStatusType.h"
#include "uci/type/CommTerminalCapabilityType.h"
#include "uci/type/CommTerminalCommandMT.h"
#include "uci/type/CommTerminalCommandStatusMDT.h"
#include "uci/type/CommTerminalCommandStatusMT.h"
#include "uci/type/CommTerminalPlanActivationCommandMDT.h"
#include "uci/type/CommTerminalPlanActivationCommandMT.h"
#include "uci/type/CommTerminalPlanActivationCommandStatusMDT.h"
#include "uci/type/CommTerminalPlanActivationCommandStatusMT.h"
#include "uci/type/CommTerminalPlanActivationStatusMT.h"
#include "uci/type/CommTerminalPlanID_Type.h"
#include "uci/type/CommTerminalPlanMT.h"
#include "uci/type/CommTerminalPlanOverrideRequestMT.h"
#include "uci/type/CommTerminalPlanOverrideRequestStatusMDT.h"
#include "uci/type/CommTerminalPlanOverrideRequestStatusMT.h"
#include "uci/type/CommTerminalPlanOverrideRequestType.h"
#include "uci/type/CommTerminalSettingsCommandMDT.h"
#include "uci/type/CommTerminalSettingsCommandMT.h"
#include "uci/type/CommTerminalSettingsCommandStatusMDT.h"
#include "uci/type/CommTerminalSettingsCommandStatusMT.h"
#include "uci/type/CommUHF_SATCOM_CommWaveformActivityCommandType.h"
#include "uci/type/CommUHF_SATCOM_CommWaveformActivityType.h"
#include "uci/type/CommUHF_SATCOM_CommWaveformCapabilityCommandType.h"
#include "uci/type/CommUserIO_ID_Type.h"
#include "uci/type/CommUserLinkID_Type.h"
#include "uci/type/CommUtilizationRequestMDT.h"
#include "uci/type/CommUtilizationRequestMT.h"
#include "uci/type/CommUtilizationRequestStatusMDT.h"
#include "uci/type/CommUtilizationRequestStatusMT.h"
#include "uci/type/CommWaveformActivityCommandPET.h"
#include "uci/type/CommWaveformActivityPET.h"
#include "uci/type/CommWaveformCapabilityCommandPET.h"
#include "uci/type/CommandBaseType.h"
#include "uci/type/CommandID_Type.h"
#include "uci/type/CommandStatusBaseType.h"
#include "uci/type/CommandableCapabilityDeclarationType.h"
#include "uci/type/CompletedRequirementMetricsType.h"
#include "uci/type/ComponentConfigurationDataRequestMDT.h"
#include "uci/type/ComponentConfigurationDataRequestMT.h"
#include "uci/type/ComponentConfigurationDataRequestStatusMDT.h"
#include "uci/type/ComponentConfigurationDataRequestStatusMT.h"
#include "uci/type/ComponentConfigurationID_Type.h"
#include "uci/type/ComponentConfigurationMT.h"
#include "uci/type/ComponentConfigurationPET.h"
#include "uci/type/ComponentConfigurationTreeType.h"
#include "uci/type/ComponentConfigurationType.h"
#include "uci/type/ComponentDetailedStatusInfoType.h"
#include "uci/type/ComponentDetailedStatusType.h"
#include "uci/type/ComponentElementID_Type.h"
#include "uci/type/ComponentExtendedStatusPET.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/ComponentSettingsCommandMDT.h"
#include "uci/type/ComponentSettingsCommandMT.h"
#include "uci/type/ComponentSettingsCommandStatusMDT.h"
#include "uci/type/ComponentSettingsCommandStatusMT.h"
#include "uci/type/ComponentStatusDataRequestMDT.h"
#include "uci/type/ComponentStatusDataRequestMT.h"
#include "uci/type/ComponentStatusDataRequestStatusMDT.h"
#include "uci/type/ComponentStatusDataRequestStatusMT.h"
#include "uci/type/ComponentStatusMT.h"
#include "uci/type/ComponentTemperatureType.h"
#include "uci/type/CompressionRatioSettingsType.h"
#include "uci/type/ConstrainingPlanPartsType.h"
#include "uci/type/ControlInterfacesCommandMDT.h"
#include "uci/type/ControlInterfacesCommandMT.h"
#include "uci/type/ControlInterfacesCommandStatusMDT.h"
#include "uci/type/ControlInterfacesCommandStatusMT.h"
#include "uci/type/ControlRequestMDT.h"
#include "uci/type/ControlRequestMT.h"
#include "uci/type/ControlRequestStatusMDT.h"
#include "uci/type/ControlRequestStatusMT.h"
#include "uci/type/ControlSourcesCommandMDT.h"
#include "uci/type/ControlSourcesCommandMT.h"
#include "uci/type/ControlSourcesCommandStatusMDT.h"
#include "uci/type/ControlSourcesCommandStatusMT.h"
#include "uci/type/ControlStatusMT.h"
#include "uci/type/CoordinatedRequirementSetID_Type.h"
#include "uci/type/CoordinatedRequirementSetMT.h"
#include "uci/type/CoordinatedRequirementSetStatusMT.h"
#include "uci/type/CornerPointImageRegionOfInterestType.h"
#include "uci/type/CorrelatedEntityID_Type.h"
#include "uci/type/CounterSpaceActivityMT.h"
#include "uci/type/CounterSpaceCapabilityMDT.h"
#include "uci/type/CounterSpaceCapabilityMT.h"
#include "uci/type/CounterSpaceCapabilityStatusMDT.h"
#include "uci/type/CounterSpaceCapabilityStatusMT.h"
#include "uci/type/CounterSpaceDeconflictionID_Type.h"
#include "uci/type/CounterSpaceDeconflictionMDT.h"
#include "uci/type/CounterSpaceDeconflictionMT.h"
#include "uci/type/CounterSpaceReportID_Type.h"
#include "uci/type/CounterSpaceReportMT.h"
#include "uci/type/CryptoCommandMT.h"
#include "uci/type/CryptoCommandStatusMDT.h"
#include "uci/type/CryptoCommandStatusMT.h"
#include "uci/type/CryptoCommandType.h"
#include "uci/type/CryptoPortID_Type.h"
#include "uci/type/CryptoSlotGroupID_Type.h"
#include "uci/type/CryptoStatusMT.h"
#include "uci/type/CryptoStatusType.h"
#include "uci/type/DLZ_ID_Type.h"
#include "uci/type/DLZ_MT.h"
#include "uci/type/DLZ_RequestMDT.h"
#include "uci/type/DLZ_RequestMT.h"
#include "uci/type/DLZ_RequestStatusMDT.h"
#include "uci/type/DLZ_RequestStatusMT.h"
#include "uci/type/DMPI_AchievabilityAssessmentRequestType.h"
#include "uci/type/DMPI_AchievabilityAssessmentType.h"
#include "uci/type/DMPI_CancelCommandMDT.h"
#include "uci/type/DMPI_CancelCommandMT.h"
#include "uci/type/DMPI_CancelCommandStatusMDT.h"
#include "uci/type/DMPI_CancelCommandStatusMT.h"
#include "uci/type/DMPI_DesignationID_Type.h"
#include "uci/type/DMPI_DesignationMDT.h"
#include "uci/type/DMPI_DesignationMT.h"
#include "uci/type/DMPI_DesignationRequestMDT.h"
#include "uci/type/DMPI_DesignationRequestMT.h"
#include "uci/type/DMPI_DesignationRequestStatusMDT.h"
#include "uci/type/DMPI_DesignationRequestStatusMT.h"
#include "uci/type/DMPI_ID_Type.h"
#include "uci/type/DMPI_MDT.h"
#include "uci/type/DMPI_MT.h"
#include "uci/type/DMPI_PatternID_Type.h"
#include "uci/type/DMPI_PatternMDT.h"
#include "uci/type/DMPI_PatternMT.h"
#include "uci/type/DMPI_PatternType.h"
#include "uci/type/DMPI_RadialPatternType.h"
#include "uci/type/DMPI_StatusMT.h"
#include "uci/type/DMPI_XbyY_PatternType.h"
#include "uci/type/DVR_ProcessingParametersType.h"
#include "uci/type/DamageAssessmentDetailType.h"
#include "uci/type/DamageAssessmentID_Type.h"
#include "uci/type/DamageAssessmentMT.h"
#include "uci/type/DamageAssessmentRequestMDT.h"
#include "uci/type/DamageAssessmentRequestMT.h"
#include "uci/type/DamageAssessmentRequestStatusMDT.h"
#include "uci/type/DamageAssessmentRequestStatusMT.h"
#include "uci/type/DamageEstimateID_Type.h"
#include "uci/type/DamageEstimateMT.h"
#include "uci/type/DamageEstimateRequestMDT.h"
#include "uci/type/DamageEstimateRequestMT.h"
#include "uci/type/DamageEstimateRequestStatusMDT.h"
#include "uci/type/DamageEstimateRequestStatusMT.h"
#include "uci/type/DamageInformationSourceType.h"
#include "uci/type/DamageInformationWeatherSourceType.h"
#include "uci/type/DamageReportDetailType.h"
#include "uci/type/DamageReportID_Type.h"
#include "uci/type/DamageReportMT.h"
#include "uci/type/DamageSummaryID_Type.h"
#include "uci/type/DamageSummaryMT.h"
#include "uci/type/DamagedFunctionType.h"
#include "uci/type/DataDeleteRequestMDT.h"
#include "uci/type/DataDeleteRequestMT.h"
#include "uci/type/DataDeleteRequestStatusMDT.h"
#include "uci/type/DataDeleteRequestStatusMT.h"
#include "uci/type/DataDestinationID_Type.h"
#include "uci/type/DataLinkIdentifierPET.h"
#include "uci/type/DataLinkNativeFilterPET.h"
#include "uci/type/DataLinkNativeFilter_NetworkLinkType.h"
#include "uci/type/DataLinkNativeInfoPET.h"
#include "uci/type/DataManagementRequestMDT.h"
#include "uci/type/DataManagementRequestMT.h"
#include "uci/type/DataManagementRequestStatusMDT.h"
#include "uci/type/DataManagementRequestStatusMT.h"
#include "uci/type/DataPlanActivationCommandMDT.h"
#include "uci/type/DataPlanActivationCommandMT.h"
#include "uci/type/DataPlanActivationCommandStatusMDT.h"
#include "uci/type/DataPlanActivationCommandStatusMT.h"
#include "uci/type/DataPlanActivationStatusMT.h"
#include "uci/type/DataPlanID_Type.h"
#include "uci/type/DataPlanMT.h"
#include "uci/type/DataPlanOverrideRequestMT.h"
#include "uci/type/DataPlanOverrideRequestStatusMDT.h"
#include "uci/type/DataPlanOverrideRequestStatusMT.h"
#include "uci/type/DataPlanOverrideRequestType.h"
#include "uci/type/DataRateDataType.h"
#include "uci/type/DataRecordBaseType.h"
#include "uci/type/DataRecordInstanceID_Type.h"
#include "uci/type/DataRecordListBaseType.h"
#include "uci/type/DataRecordListID_Type.h"
#include "uci/type/DataRecordListManagementRequestMDT.h"
#include "uci/type/DataRecordListManagementRequestMT.h"
#include "uci/type/DataRecordListManagementRequestStatusMDT.h"
#include "uci/type/DataRecordListManagementRequestStatusMT.h"
#include "uci/type/DataRecordManagementRequestMDT.h"
#include "uci/type/DataRecordManagementRequestMT.h"
#include "uci/type/DataRecordManagementRequestStatusMDT.h"
#include "uci/type/DataRecordManagementRequestStatusMT.h"
#include "uci/type/DataStorageUtilizationRequestMDT.h"
#include "uci/type/DataStorageUtilizationRequestMT.h"
#include "uci/type/DataStorageUtilizationRequestStatusMDT.h"
#include "uci/type/DataStorageUtilizationRequestStatusMT.h"
#include "uci/type/DataUpdateRequestMDT.h"
#include "uci/type/DataUpdateRequestMT.h"
#include "uci/type/DataUpdateRequestStatusMDT.h"
#include "uci/type/DataUpdateRequestStatusMT.h"
#include "uci/type/DeploymentDetectionType.h"
#include "uci/type/DesignationID_Type.h"
#include "uci/type/DesignationMT.h"
#include "uci/type/DesignationRequestMDT.h"
#include "uci/type/DesignationRequestMT.h"
#include "uci/type/DesignationRequestStatusMDT.h"
#include "uci/type/DesignationRequestStatusMT.h"
#include "uci/type/DiscreteDataLinkIdentifierType.h"
#include "uci/type/DiscreteStatusMT.h"
#include "uci/type/DisseminationConstrainedSubplanType.h"
#include "uci/type/DisseminationSubplanType.h"
#include "uci/type/DoorCommandMT.h"
#include "uci/type/DoorCommandStatusMDT.h"
#include "uci/type/DoorCommandStatusMT.h"
#include "uci/type/DoorCommandType.h"
#include "uci/type/DoorStatusMT.h"
#include "uci/type/DoorStatusType.h"
#include "uci/type/DwellID_Type.h"
#include "uci/type/EA_ActivityCommandType.h"
#include "uci/type/EA_ActivityMT.h"
#include "uci/type/EA_ActivityType.h"
#include "uci/type/EA_CapabilityCommandType.h"
#include "uci/type/EA_CapabilityMDT.h"
#include "uci/type/EA_CapabilityMT.h"
#include "uci/type/EA_CapabilityStatusMDT.h"
#include "uci/type/EA_CapabilityStatusMT.h"
#include "uci/type/EA_CapabilityType.h"
#include "uci/type/EA_CommandMT.h"
#include "uci/type/EA_CommandStatusMDT.h"
#include "uci/type/EA_CommandStatusMT.h"
#include "uci/type/EA_ConsentRequestMT.h"
#include "uci/type/EA_ConsentRequestStatusMDT.h"
#include "uci/type/EA_ConsentRequestStatusMT.h"
#include "uci/type/EA_ConsentRequestType.h"
#include "uci/type/EA_SettingsCommandMDT.h"
#include "uci/type/EA_SettingsCommandMT.h"
#include "uci/type/EA_SettingsCommandStatusMDT.h"
#include "uci/type/EA_SettingsCommandStatusMT.h"
#include "uci/type/EA_TechniqueIdentifierType.h"
#include "uci/type/ECEF_UnitVectorType.h"
#include "uci/type/EEI_ID_Type.h"
#include "uci/type/EEI_MDT.h"
#include "uci/type/EEI_MT.h"
#include "uci/type/EOB_CorrelationRecordID_Type.h"
#include "uci/type/EOB_CorrelationRecordMDT.h"
#include "uci/type/EOB_CorrelationRecordMT.h"
#include "uci/type/EOB_EmitterID_Type.h"
#include "uci/type/EOB_EmitterModeID_Type.h"
#include "uci/type/EOB_EmitterModeType.h"
#include "uci/type/EOB_EmitterType.h"
#include "uci/type/EOB_EquipmentIdentityType.h"
#include "uci/type/EOB_EquipmentRecordType.h"
#include "uci/type/EOB_EquipmentType.h"
#include "uci/type/EOB_FixedPositionType.h"
#include "uci/type/EOB_IdentityBaseType.h"
#include "uci/type/EOB_RecordID_Type.h"
#include "uci/type/EOB_RecordMarkedType.h"
#include "uci/type/EOB_SignalType.h"
#include "uci/type/EOB_SiteIdentityType.h"
#include "uci/type/EOB_SitePIN_Type.h"
#include "uci/type/ESM_ActivityCommandType.h"
#include "uci/type/ESM_ActivityMT.h"
#include "uci/type/ESM_ActivityType.h"
#include "uci/type/ESM_CapabilityCommandType.h"
#include "uci/type/ESM_CapabilityMDT.h"
#include "uci/type/ESM_CapabilityMT.h"
#include "uci/type/ESM_CapabilityStatusMDT.h"
#include "uci/type/ESM_CapabilityStatusMT.h"
#include "uci/type/ESM_CapabilityType.h"
#include "uci/type/ESM_CommandMT.h"
#include "uci/type/ESM_CommandStatusMDT.h"
#include "uci/type/ESM_CommandStatusMT.h"
#include "uci/type/ESM_ConsentRequestMT.h"
#include "uci/type/ESM_ConsentRequestStatusMDT.h"
#include "uci/type/ESM_ConsentRequestStatusMT.h"
#include "uci/type/ESM_ConsentRequestType.h"
#include "uci/type/ESM_SettingsCommandMDT.h"
#include "uci/type/ESM_SettingsCommandMT.h"
#include "uci/type/ESM_SettingsCommandStatusMDT.h"
#include "uci/type/ESM_SettingsCommandStatusMT.h"
#include "uci/type/ESM_TaskBaseType.h"
#include "uci/type/ESM_TaskType.h"
#include "uci/type/EW_ConfigurationID_Type.h"
#include "uci/type/EW_ConfigurationMT.h"
#include "uci/type/EW_CoordinationDataLinkIdentifierType.h"
#include "uci/type/EW_IndexNumberDataLinkIdentifierType.h"
#include "uci/type/EarthOrientationParametersID_Type.h"
#include "uci/type/EarthOrientationParametersMT.h"
#include "uci/type/EffectActivityMT.h"
#include "uci/type/EffectActivityType.h"
#include "uci/type/EffectAllocationType.h"
#include "uci/type/EffectCancelCommandMDT.h"
#include "uci/type/EffectCancelCommandMT.h"
#include "uci/type/EffectCancelCommandStatusMDT.h"
#include "uci/type/EffectCancelCommandStatusMT.h"
#include "uci/type/EffectCapabilityCommandType.h"
#include "uci/type/EffectCapabilityMDT.h"
#include "uci/type/EffectCapabilityMT.h"
#include "uci/type/EffectCapabilityStatusMDT.h"
#include "uci/type/EffectCapabilityStatusMT.h"
#include "uci/type/EffectCapabilityType.h"
#include "uci/type/EffectCommandMT.h"
#include "uci/type/EffectCommandStatusMDT.h"
#include "uci/type/EffectCommandStatusMT.h"
#include "uci/type/EffectExecutionApprovalStatusMDT.h"
#include "uci/type/EffectExecutionApprovalStatusMT.h"
#include "uci/type/EffectID_Type.h"
#include "uci/type/EffectMT.h"
#include "uci/type/EffectPlanApprovalStatusMT.h"
#include "uci/type/EffectPlanCommandID_Type.h"
#include "uci/type/EffectPlanCommandMT.h"
#include "uci/type/EffectPlanCommandStatusMT.h"
#include "uci/type/EffectPlanExecutionStatusMT.h"
#include "uci/type/EffectPlanID_Type.h"
#include "uci/type/EffectPlanInputsType.h"
#include "uci/type/EffectPlanMT.h"
#include "uci/type/EffectPlanProcessDescriptionType.h"
#include "uci/type/EffectPlanStatusMT.h"
#include "uci/type/EffectPlanValidationCommandMDT.h"
#include "uci/type/EffectPlanValidationCommandMT.h"
#include "uci/type/EffectPlanValidationCommandStatusMDT.h"
#include "uci/type/EffectPlanValidationCommandStatusMT.h"
#include "uci/type/EffectPlanValidationID_Type.h"
#include "uci/type/EffectPlanValidationInputsType.h"
#include "uci/type/EffectPlanValidationMT.h"
#include "uci/type/EffectPlanningResultType.h"
#include "uci/type/EffectPlanningStatusMDT.h"
#include "uci/type/EffectPlanningStatusMT.h"
#include "uci/type/EffectStatusMDT.h"
#include "uci/type/EffectStatusMT.h"
#include "uci/type/ElevationRequestMDT.h"
#include "uci/type/ElevationRequestMT.h"
#include "uci/type/ElevationRequestStatusMDT.h"
#include "uci/type/ElevationRequestStatusMT.h"
#include "uci/type/ElevationVisibilityRequestMDT.h"
#include "uci/type/ElevationVisibilityRequestMT.h"
#include "uci/type/ElevationVisibilityRequestStatusMDT.h"
#include "uci/type/ElevationVisibilityRequestStatusMT.h"
#include "uci/type/EllipseType.h"
#include "uci/type/EmergencyReferenceOpPointType.h"
#include "uci/type/EmitterFixedPositionType.h"
#include "uci/type/EnduranceBaseType.h"
#include "uci/type/EnduranceType.h"
#include "uci/type/EntityConfirmationMT.h"
#include "uci/type/EntityConfirmationRequestMDT.h"
#include "uci/type/EntityConfirmationRequestMT.h"
#include "uci/type/EntityConfirmationRequestStatusMDT.h"
#include "uci/type/EntityConfirmationRequestStatusMT.h"
#include "uci/type/EntityEphemerisRequestParametersType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/EntityIdentityType.h"
#include "uci/type/EntityLostMT.h"
#include "uci/type/EntityMT.h"
#include "uci/type/EntityManagementRequestMDT.h"
#include "uci/type/EntityManagementRequestMT.h"
#include "uci/type/EntityManagementRequestStatusMDT.h"
#include "uci/type/EntityManagementRequestStatusMT.h"
#include "uci/type/EntityMetadataMT.h"
#include "uci/type/EntityMetadataPET.h"
#include "uci/type/EntityNotificationMDT.h"
#include "uci/type/EntityNotificationMT.h"
#include "uci/type/EntityOrbitalCSO_ID_Type.h"
#include "uci/type/EntityOrbitalCSO_MT.h"
#include "uci/type/EntityOrbitalElementSetID_Type.h"
#include "uci/type/EntityOrbitalElementSetMDT.h"
#include "uci/type/EntityOrbitalElementSetMT.h"
#include "uci/type/EntityOrbitalElementSetRequestMDT.h"
#include "uci/type/EntityOrbitalElementSetRequestMT.h"
#include "uci/type/EntityOrbitalElementSetRequestStatusMDT.h"
#include "uci/type/EntityOrbitalElementSetRequestStatusMT.h"
#include "uci/type/EntityOrbitalElementSetType.h"
#include "uci/type/EntityOrbitalEphemerisID_Type.h"
#include "uci/type/EntityOrbitalEphemerisMDT.h"
#include "uci/type/EntityOrbitalEphemerisMT.h"
#include "uci/type/EntityOrbitalEphemerisRequestMDT.h"
#include "uci/type/EntityOrbitalEphemerisRequestMT.h"
#include "uci/type/EntityOrbitalEphemerisRequestStatusMDT.h"
#include "uci/type/EntityOrbitalEphemerisRequestStatusMT.h"
#include "uci/type/EntityOrbitalEphemerisType.h"
#include "uci/type/EntityOrbitalManeuverMT.h"
#include "uci/type/EntityOrbitalVCM_ID_Type.h"
#include "uci/type/EntityOrbitalVCM_MDT.h"
#include "uci/type/EntityOrbitalVCM_MT.h"
#include "uci/type/EntityOrbitalVCM_RequestMDT.h"
#include "uci/type/EntityOrbitalVCM_RequestMT.h"
#include "uci/type/EntityOrbitalVCM_RequestStatusMDT.h"
#include "uci/type/EntityOrbitalVCM_RequestStatusMT.h"
#include "uci/type/EntityOrbitalVCM_Type.h"
#include "uci/type/EntityPropagationMT.h"
#include "uci/type/ExecutionPlanSetBaseType.h"
#include "uci/type/ExecutionPlanSetID_Type.h"
#include "uci/type/ExecutionSequenceInsertionType.h"
#include "uci/type/ExecutionSequencePlanSetsType.h"
#include "uci/type/ExecutionSequenceType.h"
#include "uci/type/ExternalDataRequestMDT.h"
#include "uci/type/ExternalDataRequestMT.h"
#include "uci/type/ExternalDataRequestStatusMDT.h"
#include "uci/type/ExternalDataRequestStatusMT.h"
#include "uci/type/ExternalRequestedDataID_Type.h"
#include "uci/type/FOV_ActivityType.h"
#include "uci/type/FOV_Type.h"
#include "uci/type/FOV_VolumeType.h"
#include "uci/type/FaultID_Type.h"
#include "uci/type/FaultMDT.h"
#include "uci/type/FaultMT.h"
#include "uci/type/FileLocationID_Type.h"
#include "uci/type/FileLocationMDT.h"
#include "uci/type/FileLocationMT.h"
#include "uci/type/FileMetadataID_Type.h"
#include "uci/type/FileMetadataMDT.h"
#include "uci/type/FileMetadataMT.h"
#include "uci/type/FilterID_Type.h"
#include "uci/type/FixedPositionType.h"
#include "uci/type/FlightActivityMT.h"
#include "uci/type/FlightActivityType.h"
#include "uci/type/FlightCapabilityMDT.h"
#include "uci/type/FlightCapabilityMT.h"
#include "uci/type/FlightCapabilityStatusMDT.h"
#include "uci/type/FlightCapabilityStatusMT.h"
#include "uci/type/FlightCapabilityType.h"
#include "uci/type/FlightTaskBaseType.h"
#include "uci/type/FlightTaskType.h"
#include "uci/type/FloatMinMaxType.h"
#include "uci/type/ForeignKeyMapDRL.h"
#include "uci/type/ForeignKeyMapID_Type.h"
#include "uci/type/ForeignKeyMapMDT.h"
#include "uci/type/ForeignKeyMapML.h"
#include "uci/type/ForeignKeyMapMT.h"
#include "uci/type/ForeignKeyPairDRLE.h"
#include "uci/type/ForeignKeyPairID_Type.h"
#include "uci/type/ForeignKeyPairMDT.h"
#include "uci/type/ForeignKeyPairMT.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/FrequencyDataBaseType.h"
#include "uci/type/FrequencyDataType.h"
#include "uci/type/FuelSubsystemExtendedStatusType.h"
#include "uci/type/FuelTankComponentExtendedStatusType.h"
#include "uci/type/FunctionID_Type.h"
#include "uci/type/FunctionalDamageConfidenceType.h"
#include "uci/type/FunctionalDamageProbabilityType.h"
#include "uci/type/FusionSettingsMT.h"
#include "uci/type/FusionSettingsRequestMDT.h"
#include "uci/type/FusionSettingsRequestMT.h"
#include "uci/type/FusionSettingsRequestStatusMDT.h"
#include "uci/type/FusionSettingsRequestStatusMT.h"
#include "uci/type/GatewayActivityCommandType.h"
#include "uci/type/GatewayActivityMT.h"
#include "uci/type/GatewayActivityType.h"
#include "uci/type/GatewayCapabilityCommandType.h"
#include "uci/type/GatewayCapabilityMDT.h"
#include "uci/type/GatewayCapabilityMT.h"
#include "uci/type/GatewayCapabilitySettingsCommandBaseType.h"
#include "uci/type/GatewayCapabilityStatusMDT.h"
#include "uci/type/GatewayCapabilityStatusMT.h"
#include "uci/type/GatewayCapabilityStatusType.h"
#include "uci/type/GatewayCapabilityType.h"
#include "uci/type/GatewayCommandMT.h"
#include "uci/type/GatewayCommandStatusMDT.h"
#include "uci/type/GatewayCommandStatusMT.h"
#include "uci/type/GatewayConfigurationPET.h"
#include "uci/type/GatewayLink16ConfigurationAnnulusType.h"
#include "uci/type/GatewayLink16ConfigurationCircleType.h"
#include "uci/type/GatewayLink16ConfigurationCircularSectorType.h"
#include "uci/type/GatewayLink16ConfigurationClosedAreaType.h"
#include "uci/type/GatewayLink16ConfigurationRectangleType.h"
#include "uci/type/GatewayNativeStatisticsPET.h"
#include "uci/type/GatewaySettingsCommandMDT.h"
#include "uci/type/GatewaySettingsCommandMT.h"
#include "uci/type/GatewaySettingsCommandStatusMDT.h"
#include "uci/type/GatewaySettingsCommandStatusMT.h"
#include "uci/type/GenericDataLinkNativeInfoType.h"
#include "uci/type/GeoFiltersQueryType.h"
#include "uci/type/GimbalAxisID_Type.h"
#include "uci/type/ID_Type.h"
#include "uci/type/IFF_ActivityCommandType.h"
#include "uci/type/IFF_ActivityMT.h"
#include "uci/type/IFF_ActivityTransponderType.h"
#include "uci/type/IFF_ActivityType.h"
#include "uci/type/IFF_CapabilityCommandType.h"
#include "uci/type/IFF_CapabilityMDT.h"
#include "uci/type/IFF_CapabilityMT.h"
#include "uci/type/IFF_CapabilityStatusMDT.h"
#include "uci/type/IFF_CapabilityStatusMT.h"
#include "uci/type/IFF_CapabilityType.h"
#include "uci/type/IFF_CollectionConstraintsType.h"
#include "uci/type/IFF_CommandMT.h"
#include "uci/type/IFF_CommandStatusMDT.h"
#include "uci/type/IFF_CommandStatusMT.h"
#include "uci/type/IFF_ConsentRequestMT.h"
#include "uci/type/IFF_ConsentRequestStatusMDT.h"
#include "uci/type/IFF_ConsentRequestStatusMT.h"
#include "uci/type/IFF_ConsentRequestType.h"
#include "uci/type/IFF_SettingsCommandMDT.h"
#include "uci/type/IFF_SettingsCommandMT.h"
#include "uci/type/IFF_SettingsCommandStatusMDT.h"
#include "uci/type/IFF_SettingsCommandStatusMT.h"
#include "uci/type/IFF_TransponderModeControlType.h"
#include "uci/type/IJMS_DataLinkIdentifierType.h"
#include "uci/type/IJMS_QuerySpecificDataType.h"
#include "uci/type/IO_PortCommandMT.h"
#include "uci/type/IO_PortCommandStatusMDT.h"
#include "uci/type/IO_PortCommandStatusMT.h"
#include "uci/type/IO_PortCommandType.h"
#include "uci/type/IO_PortStatusMT.h"
#include "uci/type/IO_PortStatusType.h"
#include "uci/type/IP_DataLinkNativeInfoType.h"
#include "uci/type/IPv4_DataLinkNativeInfoType.h"
#include "uci/type/IPv6_DataLinkNativeInfoType.h"
#include "uci/type/IdentityConfidenceType.h"
#include "uci/type/IdentityType.h"
#include "uci/type/ImageAugmentationParametersType.h"
#include "uci/type/ImageGeoRegistrationProcessingResultsType.h"
#include "uci/type/ImagePixelGeoLocationProcessingParametersType.h"
#include "uci/type/ImagePixelGeoLocationProcessingResultsType.h"
#include "uci/type/ImageRegionOfInterestPET.h"
#include "uci/type/InertialStateRelativeType.h"
#include "uci/type/JREAP_GatewayNativeStatisticsType.h"
#include "uci/type/LAR_ID_Type.h"
#include "uci/type/LAR_MT.h"
#include "uci/type/LAR_ReportMT.h"
#include "uci/type/LAR_RequestMDT.h"
#include "uci/type/LAR_RequestMT.h"
#include "uci/type/LAR_RequestStatusMDT.h"
#include "uci/type/LAR_RequestStatusMT.h"
#include "uci/type/LOS_MeasurementWithUncertaintyType.h"
#include "uci/type/LOS_VariableA_Type.h"
#include "uci/type/LOS_VariableB_Type.h"
#include "uci/type/LaunchObjectID_Type.h"
#include "uci/type/LaunchObservationID_Type.h"
#include "uci/type/LaunchObservationMDT.h"
#include "uci/type/LaunchObservationMT.h"
#include "uci/type/LineDataStatusType.h"
#include "uci/type/LinePoint2D_Type.h"
#include "uci/type/LineTargetType.h"
#include "uci/type/LineType.h"
#include "uci/type/Link11DataLinkIdentifierType.h"
#include "uci/type/Link11QuerySpecificDataType.h"
#include "uci/type/Link16DataLinkIdentifierType.h"
#include "uci/type/Link16DataLinkNativeInfoType.h"
#include "uci/type/Link16EntityDataLinkNativeFilterType.h"
#include "uci/type/Link16EntityMetadataType.h"
#include "uci/type/Link16GatewayConfigurationType.h"
#include "uci/type/Link16InterfaceDataLinkNativeInfoType.h"
#include "uci/type/Link16SystemMetadataType.h"
#include "uci/type/Link16TN_QuerySpecificDataType.h"
#include "uci/type/LocatedEllipseType.h"
#include "uci/type/LocatedRectangleType.h"
#include "uci/type/LocationAndStatusBaseType.h"
#include "uci/type/LocationAndStatusExpireType.h"
#include "uci/type/LogMT.h"
#include "uci/type/MDF_ID_Type.h"
#include "uci/type/MDF_SubCategoryFileID_Type.h"
#include "uci/type/MDF_SubCategoryID_Type.h"
#include "uci/type/MTI_ActivityStatusBaseType.h"
#include "uci/type/MTI_ActivityStatusDetailType.h"
#include "uci/type/MTI_OpZoneFilterAreaType.h"
#include "uci/type/MTI_STANAG_4607_OpZoneFilterAreaType.h"
#include "uci/type/ManagedListBaseType.h"
#include "uci/type/MeasurementGroupID_Type.h"
#include "uci/type/MeasurementID_Type.h"
#include "uci/type/MessageConfigurationID_Type.h"
#include "uci/type/MessageTransmissionFilterRecordDRLE.h"
#include "uci/type/MessageTransmissionFilterRecordID_Type.h"
#include "uci/type/MessageTransmissionFilterRecordMDT.h"
#include "uci/type/MessageTransmissionFilterRecordMT.h"
#include "uci/type/MessageTransmissionListDRL.h"
#include "uci/type/MessageTransmissionListID_Type.h"
#include "uci/type/MessageTransmissionListMDT.h"
#include "uci/type/MessageTransmissionListMT.h"
#include "uci/type/MessageType.h"
#include "uci/type/MetadataID_Type.h"
#include "uci/type/MissionActivationRequestMDT.h"
#include "uci/type/MissionActivationRequestMT.h"
#include "uci/type/MissionActivationRequestStatusMDT.h"
#include "uci/type/MissionActivationRequestStatusMT.h"
#include "uci/type/MissionContingencyAlertID_Type.h"
#include "uci/type/MissionContingencyAlertMT.h"
#include "uci/type/MissionDefinitionID_Type.h"
#include "uci/type/MissionDefinitionMDT.h"
#include "uci/type/MissionDefinitionMT.h"
#include "uci/type/MissionEnvironmentObjectActionType.h"
#include "uci/type/MissionEnvironmentObjectBaseType.h"
#include "uci/type/MissionEnvironmentObjectEffectType.h"
#include "uci/type/MissionEnvironmentObjectEntityType.h"
#include "uci/type/MissionEnvironmentObjectOpLineType.h"
#include "uci/type/MissionEnvironmentObjectOpPointType.h"
#include "uci/type/MissionEnvironmentObjectOpVolumeType.h"
#include "uci/type/MissionEnvironmentObjectOpZoneType.h"
#include "uci/type/MissionEnvironmentObjectResponseType.h"
#include "uci/type/MissionEnvironmentObjectSystemType.h"
#include "uci/type/MissionEnvironmentObjectTaskType.h"
#include "uci/type/MissionEnvironmentOverrideID_Type.h"
#include "uci/type/MissionEnvironmentOverrideMDT.h"
#include "uci/type/MissionEnvironmentOverrideMT.h"
#include "uci/type/MissionID_Type.h"
#include "uci/type/MissionPlanActivationApprovalStatusMT.h"
#include "uci/type/MissionPlanActivationCommandID_Type.h"
#include "uci/type/MissionPlanActivationCommandMT.h"
#include "uci/type/MissionPlanActivationCommandStatusMT.h"
#include "uci/type/MissionPlanActivationStatusMT.h"
#include "uci/type/MissionPlanApprovalStatusMT.h"
#include "uci/type/MissionPlanCommandID_Type.h"
#include "uci/type/MissionPlanCommandMT.h"
#include "uci/type/MissionPlanCommandStatusMT.h"
#include "uci/type/MissionPlanExecutionStatusMT.h"
#include "uci/type/MissionPlanID_Type.h"
#include "uci/type/MissionPlanInputsType.h"
#include "uci/type/MissionPlanMT.h"
#include "uci/type/MissionPlanMetricsReportID_Type.h"
#include "uci/type/MissionPlanMetricsReportMT.h"
#include "uci/type/MissionPlanMetricsReportRequestMDT.h"
#include "uci/type/MissionPlanMetricsReportRequestMT.h"
#include "uci/type/MissionPlanMetricsReportRequestStatusMDT.h"
#include "uci/type/MissionPlanMetricsReportRequestStatusMT.h"
#include "uci/type/MissionPlanProcessDescriptionType.h"
#include "uci/type/MissionPlanStatusMT.h"
#include "uci/type/MissionPlanValidationCommandMDT.h"
#include "uci/type/MissionPlanValidationCommandMT.h"
#include "uci/type/MissionPlanValidationCommandStatusMDT.h"
#include "uci/type/MissionPlanValidationCommandStatusMT.h"
#include "uci/type/MissionPlanValidationID_Type.h"
#include "uci/type/MissionPlanValidationInputsType.h"
#include "uci/type/MissionPlanValidationMT.h"
#include "uci/type/MissionPlanningOrchestrationID_Type.h"
#include "uci/type/MissionPlanningOrchestrationMDT.h"
#include "uci/type/MissionPlanningOrchestrationMT.h"
#include "uci/type/MissionRequirementStatusMT.h"
#include "uci/type/ModRateDataType.h"
#include "uci/type/ModulationOnPulseDataBaseType.h"
#include "uci/type/ModulationOnPulseDataType.h"
#include "uci/type/MultiObjectType.h"
#include "uci/type/MultistaticEmitterDataID_Type.h"
#include "uci/type/MultistaticEmitterDataMT.h"
#include "uci/type/MultistaticEmitterID_Type.h"
#include "uci/type/MvAnomalyEventID_Type.h"
#include "uci/type/MvAnomalyEventMDT.h"
#include "uci/type/MvAnomalyEventMT.h"
#include "uci/type/NATO_Link1DataLinkIdentifierType.h"
#include "uci/type/NATO_Link1QuerySpecificDataType.h"
#include "uci/type/NITF_PackingPlanPET.h"
#include "uci/type/NITF_PackingPlanRevA_Type.h"
#include "uci/type/NITF_PackingPlanType.h"
#include "uci/type/NameValuePairType.h"
#include "uci/type/NavigationReportMT.h"
#include "uci/type/NetworkLinkID_Type.h"
#include "uci/type/NotificationBaseType.h"
#include "uci/type/NotificationID_Type.h"
#include "uci/type/OB_SensorID_Type.h"
#include "uci/type/ObservationMeasurementID_Type.h"
#include "uci/type/ObservationMeasurementReportID_Type.h"
#include "uci/type/ObservationMeasurementReportMT.h"
#include "uci/type/ObservationReportID_Type.h"
#include "uci/type/ObservationReportMT.h"
#include "uci/type/OffsetLocationErrorType.h"
#include "uci/type/OffsetLocationType.h"
#include "uci/type/OpBaseType.h"
#include "uci/type/OpLineID_Type.h"
#include "uci/type/OpLineMDT.h"
#include "uci/type/OpLineMT.h"
#include "uci/type/OpLineType.h"
#include "uci/type/OpNotificationMDT.h"
#include "uci/type/OpNotificationMT.h"
#include "uci/type/OpPointBaseType.h"
#include "uci/type/OpPointID_Type.h"
#include "uci/type/OpPointMDT.h"
#include "uci/type/OpPointMT.h"
#include "uci/type/OpRoutingID_Type.h"
#include "uci/type/OpRoutingMT.h"
#include "uci/type/OpVolumeID_Type.h"
#include "uci/type/OpVolumeMDT.h"
#include "uci/type/OpVolumeMT.h"
#include "uci/type/OpZoneFilterAreaPET.h"
#include "uci/type/OpZoneID_Type.h"
#include "uci/type/OpZoneMDT.h"
#include "uci/type/OpZoneMT.h"
#include "uci/type/OpZoneType.h"
#include "uci/type/OpaqueCapabilityMDT.h"
#include "uci/type/OpaqueCapabilityMT.h"
#include "uci/type/OpaqueCapabilityStatusMDT.h"
#include "uci/type/OpaqueCapabilityStatusMT.h"
#include "uci/type/OpaqueSettingsCommandMDT.h"
#include "uci/type/OpaqueSettingsCommandMT.h"
#include "uci/type/OpaqueSettingsCommandStatusMDT.h"
#include "uci/type/OpaqueSettingsCommandStatusMT.h"
#include "uci/type/OperationsAreaDataLinkNativeFilterType.h"
#include "uci/type/OperatorActionCommandMDT.h"
#include "uci/type/OperatorActionCommandMT.h"
#include "uci/type/OperatorActionCommandStatusMDT.h"
#include "uci/type/OperatorActionCommandStatusMT.h"
#include "uci/type/OperatorActionID_Type.h"
#include "uci/type/OperatorAnnotationID_Type.h"
#include "uci/type/OperatorAnnotationMDT.h"
#include "uci/type/OperatorAnnotationMT.h"
#include "uci/type/OperatorID_Type.h"
#include "uci/type/OperatorLocationOfInterestID_Type.h"
#include "uci/type/OperatorLocationOfInterestMDT.h"
#include "uci/type/OperatorLocationOfInterestMT.h"
#include "uci/type/OperatorMDT.h"
#include "uci/type/OperatorMT.h"
#include "uci/type/OperatorNotificationAckID_Type.h"
#include "uci/type/OperatorNotificationAckMT.h"
#include "uci/type/OperatorNotificationID_Type.h"
#include "uci/type/OperatorNotificationMT.h"
#include "uci/type/OperatorNotificationOverrideID_Type.h"
#include "uci/type/OperatorNotificationOverrideMT.h"
#include "uci/type/OperatorRoleID_Type.h"
#include "uci/type/OperatorRoleMDT.h"
#include "uci/type/OperatorRoleMT.h"
#include "uci/type/OpticalCollectionConstraintsType.h"
#include "uci/type/OrbitActivityExecutionStatusType.h"
#include "uci/type/OrbitActivityPlanApprovalStatusMT.h"
#include "uci/type/OrbitActivityPlanCommandID_Type.h"
#include "uci/type/OrbitActivityPlanCommandMT.h"
#include "uci/type/OrbitActivityPlanCommandStatusMT.h"
#include "uci/type/OrbitActivityPlanExecutionStatusMT.h"
#include "uci/type/OrbitActivityPlanID_Type.h"
#include "uci/type/OrbitActivityPlanInputsType.h"
#include "uci/type/OrbitActivityPlanMT.h"
#include "uci/type/OrbitActivityPlanStatusMT.h"
#include "uci/type/OrbitActivityPlanStatusType.h"
#include "uci/type/OrbitActivityPlanValidationCommandMDT.h"
#include "uci/type/OrbitActivityPlanValidationCommandMT.h"
#include "uci/type/OrbitActivityPlanValidationCommandStatusMDT.h"
#include "uci/type/OrbitActivityPlanValidationCommandStatusMT.h"
#include "uci/type/OrbitActivityPlanValidationID_Type.h"
#include "uci/type/OrbitActivityPlanValidationInputsType.h"
#include "uci/type/OrbitActivityPlanValidationMT.h"
#include "uci/type/OrbitActivityType.h"
#include "uci/type/OrbitChangeActivityMT.h"
#include "uci/type/OrbitChangeActivityType.h"
#include "uci/type/OrbitChangeCapabilityMDT.h"
#include "uci/type/OrbitChangeCapabilityMT.h"
#include "uci/type/OrbitChangeCapabilityStatusMDT.h"
#include "uci/type/OrbitChangeCapabilityStatusMT.h"
#include "uci/type/OrbitChangeCapabilityType.h"
#include "uci/type/OrbitChangeTaskBaseType.h"
#include "uci/type/OrbitChangeTaskType.h"
#include "uci/type/OrbitConjunctionAssessmentID_Type.h"
#include "uci/type/OrbitConjunctionAssessmentMT.h"
#include "uci/type/OrbitConjunctionAssessmentRequestMDT.h"
#include "uci/type/OrbitConjunctionAssessmentRequestMT.h"
#include "uci/type/OrbitConjunctionAssessmentRequestStatusMDT.h"
#include "uci/type/OrbitConjunctionAssessmentRequestStatusMT.h"
#include "uci/type/OrbitExecutionPlanSetType.h"
#include "uci/type/OrbitKinematicsParametersType.h"
#include "uci/type/OrbitKinematicsSequenceID_Type.h"
#include "uci/type/OrbitKinematicsSequenceInsertionType.h"
#include "uci/type/OrbitKinematicsSequenceType.h"
#include "uci/type/OrbitKinematicsType.h"
#include "uci/type/OrbitManeuverSegmentID_Type.h"
#include "uci/type/OrbitMetricsID_Type.h"
#include "uci/type/OrbitMetricsMT.h"
#include "uci/type/OrbitMetricsRequestMDT.h"
#include "uci/type/OrbitMetricsRequestMT.h"
#include "uci/type/OrbitMetricsRequestStatusMDT.h"
#include "uci/type/OrbitMetricsRequestStatusMT.h"
#include "uci/type/OrbitModificationRequestMDT.h"
#include "uci/type/OrbitModificationRequestMT.h"
#include "uci/type/OrbitModificationRequestStatusMDT.h"
#include "uci/type/OrbitModificationRequestStatusMT.h"
#include "uci/type/OrbitPlanApprovalStatusMT.h"
#include "uci/type/OrbitPlanCommandID_Type.h"
#include "uci/type/OrbitPlanCommandMT.h"
#include "uci/type/OrbitPlanCommandStatusMT.h"
#include "uci/type/OrbitPlanExecutionStatusMT.h"
#include "uci/type/OrbitPlanID_Type.h"
#include "uci/type/OrbitPlanInputsType.h"
#include "uci/type/OrbitPlanMT.h"
#include "uci/type/OrbitPlanProcessDescriptionType.h"
#include "uci/type/OrbitPlanStatusMT.h"
#include "uci/type/OrbitPlanStatusType.h"
#include "uci/type/OrbitPlanValidationCommandMDT.h"
#include "uci/type/OrbitPlanValidationCommandMT.h"
#include "uci/type/OrbitPlanValidationCommandStatusMDT.h"
#include "uci/type/OrbitPlanValidationCommandStatusMT.h"
#include "uci/type/OrbitPlanValidationID_Type.h"
#include "uci/type/OrbitPlanValidationInputsType.h"
#include "uci/type/OrbitPlanValidationMT.h"
#include "uci/type/OrbitPlanningCandidateType.h"
#include "uci/type/OrbitSequenceCompletedType.h"
#include "uci/type/OrbitSequenceEstimateType.h"
#include "uci/type/OrbitalConjunctionID_Type.h"
#include "uci/type/OrbitalDebrisCloudID_Type.h"
#include "uci/type/OrbitalDebrisEstimateID_Type.h"
#include "uci/type/OrbitalDebrisEstimateMT.h"
#include "uci/type/OrbitalDebrisEstimateRequestMDT.h"
#include "uci/type/OrbitalDebrisEstimateRequestMT.h"
#include "uci/type/OrbitalDebrisEstimateRequestStatusMDT.h"
#include "uci/type/OrbitalDebrisEstimateRequestStatusMT.h"
#include "uci/type/OrbitalDebrisID_Type.h"
#include "uci/type/OrbitalEphemerisRequestParametersType.h"
#include "uci/type/OrbitalFiltersQueryType.h"
#include "uci/type/OrbitalManeuverDetailsBaseType.h"
#include "uci/type/OrbitalManeuverDetailsType.h"
#include "uci/type/OrbitalManeuverID_Type.h"
#include "uci/type/OrbitalSurveillanceActivityDetailType.h"
#include "uci/type/OrbitalSurveillanceActivityMT.h"
#include "uci/type/OrbitalSurveillanceActivityType.h"
#include "uci/type/OrbitalSurveillanceCapabilityMDT.h"
#include "uci/type/OrbitalSurveillanceCapabilityMT.h"
#include "uci/type/OrbitalSurveillanceCapabilityStatusMDT.h"
#include "uci/type/OrbitalSurveillanceCapabilityStatusMT.h"
#include "uci/type/OrbitalSurveillanceCapabilityType.h"
#include "uci/type/OrbitalSurveillanceObjectBaseType.h"
#include "uci/type/OrbitalSurveillanceObjectType.h"
#include "uci/type/OrbitalSurveillanceSensorActivityMT.h"
#include "uci/type/OrbitalSurveillanceSensorActivityType.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityMDT.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityMT.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityStatusMDT.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityStatusMT.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityType.h"
#include "uci/type/OrbitalSurveillanceSensorTaskBaseType.h"
#include "uci/type/OrbitalSurveillanceSensorTaskType.h"
#include "uci/type/OrbitalSurveillanceTaskBaseType.h"
#include "uci/type/OrbitalSurveillanceTaskType.h"
#include "uci/type/OrderOfBattleC2_EmitterType.h"
#include "uci/type/OrderOfBattleEmitterType.h"
#include "uci/type/OrderOfBattleID_Type.h"
#include "uci/type/OrderOfBattleMDT.h"
#include "uci/type/OrderOfBattleMT.h"
#include "uci/type/PO_ActivityCommandType.h"
#include "uci/type/PO_ActivityMT.h"
#include "uci/type/PO_ActivityType.h"
#include "uci/type/PO_ApertureID_Type.h"
#include "uci/type/PO_CapabilityCommandType.h"
#include "uci/type/PO_CapabilityMDT.h"
#include "uci/type/PO_CapabilityMT.h"
#include "uci/type/PO_CapabilityStatusMDT.h"
#include "uci/type/PO_CapabilityStatusMT.h"
#include "uci/type/PO_CapabilityStatusType.h"
#include "uci/type/PO_CapabilityType.h"
#include "uci/type/PO_CollectionConstraintsType.h"
#include "uci/type/PO_CommandMT.h"
#include "uci/type/PO_CommandStatusMDT.h"
#include "uci/type/PO_CommandStatusMT.h"
#include "uci/type/PO_FPA_ChannelID_Type.h"
#include "uci/type/PO_FPA_ID_Type.h"
#include "uci/type/PO_FilterID_Type.h"
#include "uci/type/PO_LensID_Type.h"
#include "uci/type/PO_ProcessingStageID_Type.h"
#include "uci/type/PO_ProductGeneratorID_Type.h"
#include "uci/type/PO_ProductGeneratorOutputID_Type.h"
#include "uci/type/PO_ProductOutputCommandImageryType.h"
#include "uci/type/PO_SettingsCommandMDT.h"
#include "uci/type/PO_SettingsCommandMT.h"
#include "uci/type/PO_SettingsCommandStatusMDT.h"
#include "uci/type/PO_SettingsCommandStatusMT.h"
#include "uci/type/PO_TaskBaseType.h"
#include "uci/type/PO_TaskType.h"
#include "uci/type/PO_WindowID_Type.h"
#include "uci/type/PRI_DataBaseType.h"
#include "uci/type/PRI_DataType.h"
#include "uci/type/PackageID_Type.h"
#include "uci/type/PackageMDT.h"
#include "uci/type/PackageMT.h"
#include "uci/type/PackageStatusMT.h"
#include "uci/type/ParameterID_Type.h"
#include "uci/type/PathID_Type.h"
#include "uci/type/PixelCountSettingsType.h"
#include "uci/type/PixelDataType.h"
#include "uci/type/PixelOutputDataType.h"
#include "uci/type/PlanInputsCoreType.h"
#include "uci/type/PlanModificationRequestMDT.h"
#include "uci/type/PlanModificationRequestMT.h"
#include "uci/type/PlanModificationRequestStatusMDT.h"
#include "uci/type/PlanModificationRequestStatusMT.h"
#include "uci/type/PlanPartsBaseType.h"
#include "uci/type/PlanPartsType.h"
#include "uci/type/PlanScoresID_Type.h"
#include "uci/type/PlanScoresMT.h"
#include "uci/type/PlanScoresRequestMDT.h"
#include "uci/type/PlanScoresRequestMT.h"
#include "uci/type/PlanScoresRequestStatusMDT.h"
#include "uci/type/PlanScoresRequestStatusMT.h"
#include "uci/type/PlanStatusType.h"
#include "uci/type/PlanValidationInputsBaseType.h"
#include "uci/type/PlannedActivityBaseType.h"
#include "uci/type/PlannedActivityExecutionStatusType.h"
#include "uci/type/PlannedActivityID_Type.h"
#include "uci/type/PlannedActivityTriggerType.h"
#include "uci/type/PlannedActivityType.h"
#include "uci/type/PlannedCommActionExtendedType.h"
#include "uci/type/PlannedCommActionType.h"
#include "uci/type/PlanningAllowedType.h"
#include "uci/type/PlanningApplicabilitySystemType.h"
#include "uci/type/PlanningCandidateBaseType.h"
#include "uci/type/PlanningDiscoveryBaseType.h"
#include "uci/type/PlanningFunctionID_Type.h"
#include "uci/type/PlanningFunctionMT.h"
#include "uci/type/PlanningFunctionSettingsCommandMDT.h"
#include "uci/type/PlanningFunctionSettingsCommandMT.h"
#include "uci/type/PlanningFunctionSettingsCommandStatusMDT.h"
#include "uci/type/PlanningFunctionSettingsCommandStatusMT.h"
#include "uci/type/PlanningFunctionStatusMT.h"
#include "uci/type/PlanningInterfaceType.h"
#include "uci/type/PlanningInterfacesType.h"
#include "uci/type/PlanningLocationType.h"
#include "uci/type/PlanningProcessID_Type.h"
#include "uci/type/PlansReferenceBaseType.h"
#include "uci/type/PlansReferenceType.h"
#include "uci/type/PlatformIdentityConfidenceType.h"
#include "uci/type/PlatformIdentityType.h"
#include "uci/type/Point2D_ReportedType.h"
#include "uci/type/Point2D_Type.h"
#include "uci/type/Point3D_Type.h"
#include "uci/type/PositionAndVelocityCovarianceType.h"
#include "uci/type/PositionReportDetailedMT.h"
#include "uci/type/PositionReportMT.h"
#include "uci/type/PrioritizationListID_Type.h"
#include "uci/type/PrioritizationListMDT.h"
#include "uci/type/PrioritizationListMT.h"
#include "uci/type/ProcessingConstrainedSubPlanType.h"
#include "uci/type/ProcessingParametersPET.h"
#include "uci/type/ProcessingResultsPET.h"
#include "uci/type/ProductClassificationPlanID_Type.h"
#include "uci/type/ProductClassificationPlanMT.h"
#include "uci/type/ProductClassificationReportID_Type.h"
#include "uci/type/ProductClassificationReportMT.h"
#include "uci/type/ProductClassificationRequestMDT.h"
#include "uci/type/ProductClassificationRequestMT.h"
#include "uci/type/ProductClassificationRequestStatusMDT.h"
#include "uci/type/ProductClassificationRequestStatusMT.h"
#include "uci/type/ProductClassificationTaskMDT.h"
#include "uci/type/ProductClassificationTaskMT.h"
#include "uci/type/ProductClassificationTaskStatusMDT.h"
#include "uci/type/ProductClassificationTaskStatusMT.h"
#include "uci/type/ProductCollectionPathType.h"
#include "uci/type/ProductDisseminationConfigurationID_Type.h"
#include "uci/type/ProductDisseminationConfigurationMDT.h"
#include "uci/type/ProductDisseminationConfigurationMT.h"
#include "uci/type/ProductDisseminationDestinationID_Type.h"
#include "uci/type/ProductDisseminationDestinationMDT.h"
#include "uci/type/ProductDisseminationDestinationMT.h"
#include "uci/type/ProductDisseminationPlanID_Type.h"
#include "uci/type/ProductDisseminationPlanMT.h"
#include "uci/type/ProductDisseminationReportID_Type.h"
#include "uci/type/ProductDisseminationReportMT.h"
#include "uci/type/ProductDisseminationRequestMDT.h"
#include "uci/type/ProductDisseminationRequestMT.h"
#include "uci/type/ProductDisseminationRequestStatusMDT.h"
#include "uci/type/ProductDisseminationRequestStatusMT.h"
#include "uci/type/ProductDisseminationTaskMDT.h"
#include "uci/type/ProductDisseminationTaskMT.h"
#include "uci/type/ProductDisseminationTaskStatusMDT.h"
#include "uci/type/ProductDisseminationTaskStatusMT.h"
#include "uci/type/ProductDownloadPlanID_Type.h"
#include "uci/type/ProductDownloadPlanMT.h"
#include "uci/type/ProductDownloadReportID_Type.h"
#include "uci/type/ProductDownloadReportMT.h"
#include "uci/type/ProductDownloadRequestMDT.h"
#include "uci/type/ProductDownloadRequestMT.h"
#include "uci/type/ProductDownloadRequestStatusMDT.h"
#include "uci/type/ProductDownloadRequestStatusMT.h"
#include "uci/type/ProductDownloadTaskMDT.h"
#include "uci/type/ProductDownloadTaskMT.h"
#include "uci/type/ProductDownloadTaskStatusMDT.h"
#include "uci/type/ProductDownloadTaskStatusMT.h"
#include "uci/type/ProductLocationID_Type.h"
#include "uci/type/ProductLocationMDT.h"
#include "uci/type/ProductLocationMT.h"
#include "uci/type/ProductManagementTaskDataType.h"
#include "uci/type/ProductManagementTaskStatusDataType.h"
#include "uci/type/ProductMetadataID_Type.h"
#include "uci/type/ProductMetadataMDT.h"
#include "uci/type/ProductMetadataMT.h"
#include "uci/type/ProductOutputCapabilityImageryType.h"
#include "uci/type/ProductOutputCapabilityStatusImageryType.h"
#include "uci/type/ProductOutputCommandBasicType.h"
#include "uci/type/ProductOutputCommandImageryType.h"
#include "uci/type/ProductOutputCommandSMTI_Type.h"
#include "uci/type/ProductOutputStatusType.h"
#include "uci/type/ProductOutputType.h"
#include "uci/type/ProductProcessingClassificationType.h"
#include "uci/type/ProductProcessingFunctionMT.h"
#include "uci/type/ProductProcessingFunctionStatusMT.h"
#include "uci/type/ProductProcessingPlanID_Type.h"
#include "uci/type/ProductProcessingPlanMT.h"
#include "uci/type/ProductProcessingReportID_Type.h"
#include "uci/type/ProductProcessingReportMT.h"
#include "uci/type/ProductProcessingRequestMDT.h"
#include "uci/type/ProductProcessingRequestMT.h"
#include "uci/type/ProductProcessingRequestStatusMDT.h"
#include "uci/type/ProductProcessingRequestStatusMT.h"
#include "uci/type/ProductProcessingTaskMDT.h"
#include "uci/type/ProductProcessingTaskMT.h"
#include "uci/type/ProductProcessingTaskStatusMDT.h"
#include "uci/type/ProductProcessingTaskStatusMT.h"
#include "uci/type/ProductProcessingType.h"
#include "uci/type/ProductRateSettingsType.h"
#include "uci/type/ProductSizeSettingsType.h"
#include "uci/type/PropagatorSettingsDataRequestMDT.h"
#include "uci/type/PropagatorSettingsDataRequestMT.h"
#include "uci/type/PropagatorSettingsDataRequestStatusMDT.h"
#include "uci/type/PropagatorSettingsDataRequestStatusMT.h"
#include "uci/type/PropagatorSettingsID_Type.h"
#include "uci/type/PropagatorSettingsMT.h"
#include "uci/type/ProximityOperationsType.h"
#include "uci/type/PulseDataID_Type.h"
#include "uci/type/PulseDataMT.h"
#include "uci/type/PumpComponentExtendedStatusType.h"
#include "uci/type/QueryDataRequestMDT.h"
#include "uci/type/QueryDataRequestMT.h"
#include "uci/type/QueryDataRequestStatusMDT.h"
#include "uci/type/QueryDataRequestStatusMT.h"
#include "uci/type/QueryPET.h"
#include "uci/type/QuerySpecificDataPET.h"
#include "uci/type/QueryType.h"
#include "uci/type/RDMA_InitializeID_Type.h"
#include "uci/type/RDMA_InitializeMT.h"
#include "uci/type/RDMA_InitializeSetupID_Type.h"
#include "uci/type/RDMA_InitializeSetupMT.h"
#include "uci/type/RFD_ComponentIdentifierType.h"
#include "uci/type/RF_ControlCommandMDT.h"
#include "uci/type/RF_ControlCommandMT.h"
#include "uci/type/RF_ControlCommandStatusMDT.h"
#include "uci/type/RF_ControlCommandStatusMT.h"
#include "uci/type/RF_ProfileID_Type.h"
#include "uci/type/RF_ProfileMT.h"
#include "uci/type/RF_ReportID_Type.h"
#include "uci/type/RF_ReportMT.h"
#include "uci/type/RF_ResourceAllocationID_Type.h"
#include "uci/type/RF_ResourceAllocationMT.h"
#include "uci/type/RF_ResourceAllocationRequestMDT.h"
#include "uci/type/RF_ResourceAllocationRequestMT.h"
#include "uci/type/RF_ResourceAllocationRequestStatusMDT.h"
#include "uci/type/RF_ResourceAllocationRequestStatusMT.h"
#include "uci/type/RF_ThreadInstanceSetupCommandMDT.h"
#include "uci/type/RF_ThreadInstanceSetupCommandMT.h"
#include "uci/type/RF_ThreadInstanceSetupCommandStatusMDT.h"
#include "uci/type/RF_ThreadInstanceSetupCommandStatusMT.h"
#include "uci/type/RSO_ApproachType.h"
#include "uci/type/RSTA_FileTraceabilityType.h"
#include "uci/type/RSTA_TraceabilityType.h"
#include "uci/type/RadarActivityCommandType.h"
#include "uci/type/RadarAltimeterActivityCommandType.h"
#include "uci/type/RadarAltimeterActivityMT.h"
#include "uci/type/RadarAltimeterActivityType.h"
#include "uci/type/RadarAltimeterCapabilityCommandType.h"
#include "uci/type/RadarAltimeterCapabilityMDT.h"
#include "uci/type/RadarAltimeterCapabilityMT.h"
#include "uci/type/RadarAltimeterCapabilityStatusMDT.h"
#include "uci/type/RadarAltimeterCapabilityStatusMT.h"
#include "uci/type/RadarAltimeterCapabilityType.h"
#include "uci/type/RadarAltimeterCollectionOptionsType.h"
#include "uci/type/RadarAltimeterCommandMT.h"
#include "uci/type/RadarAltimeterCommandStatusMDT.h"
#include "uci/type/RadarAltimeterCommandStatusMT.h"
#include "uci/type/RadarAltimeterReportID_Type.h"
#include "uci/type/RadarAltimeterReportMT.h"
#include "uci/type/RadarAltimeterSettingsCommandMDT.h"
#include "uci/type/RadarAltimeterSettingsCommandMT.h"
#include "uci/type/RadarAltimeterSettingsCommandStatusMDT.h"
#include "uci/type/RadarAltimeterSettingsCommandStatusMT.h"
#include "uci/type/RadarCollectionOptionsType.h"
#include "uci/type/RectangleType.h"
#include "uci/type/ReferenceActivityMT.h"
#include "uci/type/ReferenceActivityType.h"
#include "uci/type/ReferenceCapabilityMDT.h"
#include "uci/type/ReferenceCapabilityMT.h"
#include "uci/type/ReferenceCapabilityStatusMDT.h"
#include "uci/type/ReferenceCapabilityStatusMT.h"
#include "uci/type/ReferenceCapabilityType.h"
#include "uci/type/ReferenceFrameID_Type.h"
#include "uci/type/ReferenceFrameMT.h"
#include "uci/type/RefuelActivityCommandType.h"
#include "uci/type/RefuelActivityMT.h"
#include "uci/type/RefuelActivityType.h"
#include "uci/type/RefuelCapabilityDrogueCommandType.h"
#include "uci/type/RefuelCapabilityDrogueCommonType.h"
#include "uci/type/RefuelCapabilityDrogueStatusType.h"
#include "uci/type/RefuelCapabilityExtendCommandType.h"
#include "uci/type/RefuelCapabilityMDT.h"
#include "uci/type/RefuelCapabilityMT.h"
#include "uci/type/RefuelCapabilityStatusMDT.h"
#include "uci/type/RefuelCapabilityStatusMT.h"
#include "uci/type/RefuelCapabilityType.h"
#include "uci/type/RefuelCommandMT.h"
#include "uci/type/RefuelCommandStatusMDT.h"
#include "uci/type/RefuelCommandStatusMT.h"
#include "uci/type/RefuelSettingsCommandMDT.h"
#include "uci/type/RefuelSettingsCommandMT.h"
#include "uci/type/RefuelSettingsCommandStatusMDT.h"
#include "uci/type/RefuelSettingsCommandStatusMT.h"
#include "uci/type/RefuelTaskBaseType.h"
#include "uci/type/RefuelTaskType.h"
#include "uci/type/RelationshipDesignationID_Type.h"
#include "uci/type/RelationshipDesignationMDT.h"
#include "uci/type/RelationshipDesignationMT.h"
#include "uci/type/RequestBaseType.h"
#include "uci/type/RequestID_Type.h"
#include "uci/type/RequestStatusBaseType.h"
#include "uci/type/RequirementAllocationBaseType.h"
#include "uci/type/RequirementAllocationWindowID_Type.h"
#include "uci/type/RequirementDependencyBaseType.h"
#include "uci/type/RequirementDependencyType.h"
#include "uci/type/RequirementExecutionApprovalStatusBaseType.h"
#include "uci/type/RequirementExecutionStatusDetailsType.h"
#include "uci/type/RequirementFailedTriggerType.h"
#include "uci/type/RequirementGenerationDependencyType.h"
#include "uci/type/RequirementMetricsID_Type.h"
#include "uci/type/RequirementMetricsMT.h"
#include "uci/type/RequirementMetricsReportType.h"
#include "uci/type/RequirementMetricsRequestMDT.h"
#include "uci/type/RequirementMetricsRequestMT.h"
#include "uci/type/RequirementMetricsRequestStatusMDT.h"
#include "uci/type/RequirementMetricsRequestStatusMT.h"
#include "uci/type/RequirementOptionsCommandMDT.h"
#include "uci/type/RequirementOptionsCommandMT.h"
#include "uci/type/RequirementOptionsCommandStatusMT.h"
#include "uci/type/RequirementOptionsID_Type.h"
#include "uci/type/RequirementOptionsMT.h"
#include "uci/type/RequirementPlanningCandidateType.h"
#include "uci/type/RequirementPlanningResultBaseType.h"
#include "uci/type/RequirementPlanningResultType.h"
#include "uci/type/RequirementPlanningStatusDetailsType.h"
#include "uci/type/RequirementSetID_Type.h"
#include "uci/type/RequirementSetMDT.h"
#include "uci/type/RequirementSetMT.h"
#include "uci/type/RequirementTaxonomyDetailedType.h"
#include "uci/type/RequirementTaxonomyType.h"
#include "uci/type/RequirementTriggerType.h"
#include "uci/type/RequirementsReferenceLockableType.h"
#include "uci/type/RequirementsReferenceType.h"
#include "uci/type/RequirementsTemplateID_Type.h"
#include "uci/type/ResendDataRequestMDT.h"
#include "uci/type/ResendDataRequestMT.h"
#include "uci/type/ResendDataRequestStatusMDT.h"
#include "uci/type/ResendDataRequestStatusMT.h"
#include "uci/type/ResponseActivityMT.h"
#include "uci/type/ResponseActivityType.h"
#include "uci/type/ResponseAllocationType.h"
#include "uci/type/ResponseCancelCommandMDT.h"
#include "uci/type/ResponseCancelCommandMT.h"
#include "uci/type/ResponseCancelCommandStatusMDT.h"
#include "uci/type/ResponseCancelCommandStatusMT.h"
#include "uci/type/ResponseCapabilityCommandType.h"
#include "uci/type/ResponseCapabilityMDT.h"
#include "uci/type/ResponseCapabilityMT.h"
#include "uci/type/ResponseCapabilityStatusMDT.h"
#include "uci/type/ResponseCapabilityStatusMT.h"
#include "uci/type/ResponseCapabilityType.h"
#include "uci/type/ResponseCommandMT.h"
#include "uci/type/ResponseCommandStatusMDT.h"
#include "uci/type/ResponseCommandStatusMT.h"
#include "uci/type/ResponseExecutionApprovalStatusMDT.h"
#include "uci/type/ResponseExecutionApprovalStatusMT.h"
#include "uci/type/ResponseID_Type.h"
#include "uci/type/ResponseMT.h"
#include "uci/type/ResponsePlanApprovalStatusMT.h"
#include "uci/type/ResponsePlanCommandID_Type.h"
#include "uci/type/ResponsePlanCommandMT.h"
#include "uci/type/ResponsePlanCommandStatusMT.h"
#include "uci/type/ResponsePlanExecutionStatusMT.h"
#include "uci/type/ResponsePlanID_Type.h"
#include "uci/type/ResponsePlanInputsType.h"
#include "uci/type/ResponsePlanMT.h"
#include "uci/type/ResponsePlanProcessDescriptionType.h"
#include "uci/type/ResponsePlanStatusMT.h"
#include "uci/type/ResponsePlanValidationCommandMDT.h"
#include "uci/type/ResponsePlanValidationCommandMT.h"
#include "uci/type/ResponsePlanValidationCommandStatusMDT.h"
#include "uci/type/ResponsePlanValidationCommandStatusMT.h"
#include "uci/type/ResponsePlanValidationID_Type.h"
#include "uci/type/ResponsePlanValidationInputsType.h"
#include "uci/type/ResponsePlanValidationMT.h"
#include "uci/type/ResponsePlanningResultType.h"
#include "uci/type/ResponsePlanningStatusMDT.h"
#include "uci/type/ResponsePlanningStatusMT.h"
#include "uci/type/ResponseStatusMDT.h"
#include "uci/type/ResponseStatusMT.h"
#include "uci/type/RouteActivityExecutionStatusType.h"
#include "uci/type/RouteActivityPlanApprovalStatusMT.h"
#include "uci/type/RouteActivityPlanCommandID_Type.h"
#include "uci/type/RouteActivityPlanCommandMT.h"
#include "uci/type/RouteActivityPlanCommandStatusMT.h"
#include "uci/type/RouteActivityPlanExecutionStatusMT.h"
#include "uci/type/RouteActivityPlanID_Type.h"
#include "uci/type/RouteActivityPlanInputsType.h"
#include "uci/type/RouteActivityPlanMT.h"
#include "uci/type/RouteActivityPlanStatusMT.h"
#include "uci/type/RouteActivityPlanStatusType.h"
#include "uci/type/RouteActivityPlanValidationCommandMDT.h"
#include "uci/type/RouteActivityPlanValidationCommandMT.h"
#include "uci/type/RouteActivityPlanValidationCommandStatusMDT.h"
#include "uci/type/RouteActivityPlanValidationCommandStatusMT.h"
#include "uci/type/RouteActivityPlanValidationID_Type.h"
#include "uci/type/RouteActivityPlanValidationInputsType.h"
#include "uci/type/RouteActivityPlanValidationMT.h"
#include "uci/type/RouteActivityType.h"
#include "uci/type/RouteExecutionPlanSetType.h"
#include "uci/type/RouteMetricsID_Type.h"
#include "uci/type/RouteMetricsMT.h"
#include "uci/type/RouteMetricsRequestMDT.h"
#include "uci/type/RouteMetricsRequestMT.h"
#include "uci/type/RouteMetricsRequestStatusMDT.h"
#include "uci/type/RouteMetricsRequestStatusMT.h"
#include "uci/type/RouteModificationRequestMDT.h"
#include "uci/type/RouteModificationRequestMT.h"
#include "uci/type/RouteModificationRequestStatusMDT.h"
#include "uci/type/RouteModificationRequestStatusMT.h"
#include "uci/type/RoutePlanApprovalStatusMT.h"
#include "uci/type/RoutePlanCommandID_Type.h"
#include "uci/type/RoutePlanCommandMT.h"
#include "uci/type/RoutePlanCommandStatusMT.h"
#include "uci/type/RoutePlanExecutionStatusMT.h"
#include "uci/type/RoutePlanID_Type.h"
#include "uci/type/RoutePlanInputsType.h"
#include "uci/type/RoutePlanMT.h"
#include "uci/type/RoutePlanProcessDescriptionType.h"
#include "uci/type/RoutePlanStatusMT.h"
#include "uci/type/RoutePlanStatusType.h"
#include "uci/type/RoutePlanValidationCommandMDT.h"
#include "uci/type/RoutePlanValidationCommandMT.h"
#include "uci/type/RoutePlanValidationCommandStatusMDT.h"
#include "uci/type/RoutePlanValidationCommandStatusMT.h"
#include "uci/type/RoutePlanValidationID_Type.h"
#include "uci/type/RoutePlanValidationInputsType.h"
#include "uci/type/RoutePlanValidationMT.h"
#include "uci/type/RoutePlanningCandidateType.h"
#include "uci/type/RouteVulnerabilityMetricsRequestType.h"
#include "uci/type/RunwayID_Type.h"
#include "uci/type/SAR_ActivityCommandType.h"
#include "uci/type/SAR_ActivityMT.h"
#include "uci/type/SAR_ActivityType.h"
#include "uci/type/SAR_AutomaticTargetDetectionParametersType.h"
#include "uci/type/SAR_CapabilityCommandType.h"
#include "uci/type/SAR_CapabilityMDT.h"
#include "uci/type/SAR_CapabilityMT.h"
#include "uci/type/SAR_CapabilityStatusMDT.h"
#include "uci/type/SAR_CapabilityStatusMT.h"
#include "uci/type/SAR_CapabilityStatusType.h"
#include "uci/type/SAR_CapabilityType.h"
#include "uci/type/SAR_CoherentChangeDetectionParametersType.h"
#include "uci/type/SAR_CollectionConstraintsType.h"
#include "uci/type/SAR_CollectionOptionsType.h"
#include "uci/type/SAR_CommandMT.h"
#include "uci/type/SAR_CommandStatusMDT.h"
#include "uci/type/SAR_CommandStatusMT.h"
#include "uci/type/SAR_DynamicImageParametersType.h"
#include "uci/type/SAR_ProcessingParametersType.h"
#include "uci/type/SAR_SettingsCommandMDT.h"
#include "uci/type/SAR_SettingsCommandMT.h"
#include "uci/type/SAR_SettingsCommandStatusMDT.h"
#include "uci/type/SAR_SettingsCommandStatusMT.h"
#include "uci/type/SAR_TaskAchievabilityAssessmentRequestType.h"
#include "uci/type/SAR_TaskAchievabilityAssessmentType.h"
#include "uci/type/SAR_TaskBaseType.h"
#include "uci/type/SAR_TaskType.h"
#include "uci/type/SAR_TwoColorMultiViewParametersType.h"
#include "uci/type/SMTI_ActivityCommandType.h"
#include "uci/type/SMTI_ActivityMT.h"
#include "uci/type/SMTI_ActivityType.h"
#include "uci/type/SMTI_CapabilityCommandType.h"
#include "uci/type/SMTI_CapabilityMDT.h"
#include "uci/type/SMTI_CapabilityMT.h"
#include "uci/type/SMTI_CapabilityStatusMDT.h"
#include "uci/type/SMTI_CapabilityStatusMT.h"
#include "uci/type/SMTI_CapabilityType.h"
#include "uci/type/SMTI_CollectionConstraintsType.h"
#include "uci/type/SMTI_CollectionOptionsType.h"
#include "uci/type/SMTI_CommandMT.h"
#include "uci/type/SMTI_CommandStatusMDT.h"
#include "uci/type/SMTI_CommandStatusMT.h"
#include "uci/type/SMTI_SettingsCommandMDT.h"
#include "uci/type/SMTI_SettingsCommandMT.h"
#include "uci/type/SMTI_SettingsCommandStatusMDT.h"
#include "uci/type/SMTI_SettingsCommandStatusMT.h"
#include "uci/type/SMTI_TaskBaseType.h"
#include "uci/type/SMTI_TaskType.h"
#include "uci/type/SOB_C2_RecordBaseType.h"
#include "uci/type/SOB_C2_RecordID_Type.h"
#include "uci/type/SOB_C2_RecordMDT.h"
#include "uci/type/SOB_C2_RecordMT.h"
#include "uci/type/SOB_C2_RecordType.h"
#include "uci/type/SOB_CorrelationRecordID_Type.h"
#include "uci/type/SOB_CorrelationRecordMDT.h"
#include "uci/type/SOB_CorrelationRecordMT.h"
#include "uci/type/SOB_SatelliteRecordBaseType.h"
#include "uci/type/SOB_SatelliteRecordID_Type.h"
#include "uci/type/SOB_SatelliteRecordMDT.h"
#include "uci/type/SOB_SatelliteRecordMT.h"
#include "uci/type/SOB_SatelliteRecordType.h"
#include "uci/type/STANAG_4607_PackingPlanPET.h"
#include "uci/type/STANAG_4607_PackingPlanRevA_Type.h"
#include "uci/type/STANAG_4607_PackingPlanType.h"
#include "uci/type/SatelliteCharacteristicsID_Type.h"
#include "uci/type/SatelliteCharacteristicsMDT.h"
#include "uci/type/SatelliteCharacteristicsMT.h"
#include "uci/type/SatellitePhysicalConfigurationID_Type.h"
#include "uci/type/ScanDataBaseType.h"
#include "uci/type/ScanDataType.h"
#include "uci/type/ScoringProcessID_Type.h"
#include "uci/type/SectorType.h"
#include "uci/type/SecurityAuditRecordID_Type.h"
#include "uci/type/SecurityAuditRecordMT.h"
#include "uci/type/SegmentCompletedType.h"
#include "uci/type/SegmentEstimateType.h"
#include "uci/type/SegmentID_Type.h"
#include "uci/type/SelectionQuerySpecificDataType.h"
#include "uci/type/SelfDefenseStatusMDT.h"
#include "uci/type/SelfDefenseStatusMT.h"
#include "uci/type/SensorConstraintsBaseType.h"
#include "uci/type/SensorConstraintsType.h"
#include "uci/type/SeparationParametersType.h"
#include "uci/type/ServiceConfigurationChangeRequestMDT.h"
#include "uci/type/ServiceConfigurationChangeRequestMT.h"
#include "uci/type/ServiceConfigurationChangeRequestStatusMDT.h"
#include "uci/type/ServiceConfigurationChangeRequestStatusMT.h"
#include "uci/type/ServiceConfigurationParamsDataRequestMDT.h"
#include "uci/type/ServiceConfigurationParamsDataRequestMT.h"
#include "uci/type/ServiceConfigurationParamsDataRequestStatusMDT.h"
#include "uci/type/ServiceConfigurationParamsDataRequestStatusMT.h"
#include "uci/type/ServiceConfigurationParamsMT.h"
#include "uci/type/ServiceErrorReportID_Type.h"
#include "uci/type/ServiceErrorReportMT.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/ServiceLifecycleCommandMDT.h"
#include "uci/type/ServiceLifecycleCommandMT.h"
#include "uci/type/ServiceLifecycleCommandStatusMDT.h"
#include "uci/type/ServiceLifecycleCommandStatusMT.h"
#include "uci/type/ServiceRegistrationRequestMDT.h"
#include "uci/type/ServiceRegistrationRequestMT.h"
#include "uci/type/ServiceRegistrationRequestStatusMDT.h"
#include "uci/type/ServiceRegistrationRequestStatusMT.h"
#include "uci/type/ServiceSettingsCommandMDT.h"
#include "uci/type/ServiceSettingsCommandMT.h"
#include "uci/type/ServiceSettingsCommandStatusMDT.h"
#include "uci/type/ServiceSettingsCommandStatusMT.h"
#include "uci/type/ServiceStatusDataRequestMDT.h"
#include "uci/type/ServiceStatusDataRequestMT.h"
#include "uci/type/ServiceStatusDataRequestStatusMDT.h"
#include "uci/type/ServiceStatusDataRequestStatusMT.h"
#include "uci/type/ServiceStatusMT.h"
#include "uci/type/SharedApertureSupportCapabilityStatusMDT.h"
#include "uci/type/SharedApertureSupportCapabilityStatusMT.h"
#include "uci/type/SharedRF_ApertureActivityBaseType.h"
#include "uci/type/SharedRF_ApertureActivityCommandBaseType.h"
#include "uci/type/SharedRF_ApertureCapabilityCommandBaseType.h"
#include "uci/type/SignalEmitterKinematicsFixedType.h"
#include "uci/type/SignalID_Type.h"
#include "uci/type/SignalIdentityType.h"
#include "uci/type/SignalPulseWidthBaseType.h"
#include "uci/type/SignalPulseWidthType.h"
#include "uci/type/SignalRelativeType.h"
#include "uci/type/SignalReportID_Type.h"
#include "uci/type/SignalReportMT.h"
#include "uci/type/SpaceWeatherID_Type.h"
#include "uci/type/SpaceWeatherMT.h"
#include "uci/type/SpecialCodeDataLinkIdentifierType.h"
#include "uci/type/SpecificBlueSeparationType.h"
#include "uci/type/SpecificEmitterIdentityConfidenceType.h"
#include "uci/type/SpecificEmitterIdentityType.h"
#include "uci/type/SpecificIdentityConfidenceType.h"
#include "uci/type/SpecificIdentityType.h"
#include "uci/type/SpecificRedSeparationType.h"
#include "uci/type/SpecificVehicleIdentityConfidenceType.h"
#include "uci/type/SpectralDensityReportID_Type.h"
#include "uci/type/SpectralDensityReportMT.h"
#include "uci/type/StandardIdentityConfidenceType.h"
#include "uci/type/StandardIdentityType.h"
#include "uci/type/StateCovarianceNED_Type.h"
#include "uci/type/StoreCarriageCapabilityStatusBaseType.h"
#include "uci/type/StoreCarriageCapabilityStatusMT.h"
#include "uci/type/StoreCarriageCapabilityStatusType.h"
#include "uci/type/StoreCarriageStatusType.h"
#include "uci/type/StoreInformationBaseType.h"
#include "uci/type/StoreInformationType.h"
#include "uci/type/StoreLoadoutConfigurationID_Type.h"
#include "uci/type/StoreLoadoutConfigurationMT.h"
#include "uci/type/StoreLoadoutItemPET.h"
#include "uci/type/StoreLoadoutItemType.h"
#include "uci/type/StoreManagementCommandMT.h"
#include "uci/type/StoreManagementCommandStatusMDT.h"
#include "uci/type/StoreManagementCommandStatusMT.h"
#include "uci/type/StoreManagementCommandType.h"
#include "uci/type/StoreManagementReportID_Type.h"
#include "uci/type/StoreManagementReportMT.h"
#include "uci/type/StoreManagementStatusMDT.h"
#include "uci/type/StoreManagementStatusMT.h"
#include "uci/type/StoreStatusBaseType.h"
#include "uci/type/StoreStatusType.h"
#include "uci/type/StoreType.h"
#include "uci/type/StrikeActivityCommandType.h"
#include "uci/type/StrikeActivityMT.h"
#include "uci/type/StrikeActivityType.h"
#include "uci/type/StrikeCapabilityCommandType.h"
#include "uci/type/StrikeCapabilityMDT.h"
#include "uci/type/StrikeCapabilityMT.h"
#include "uci/type/StrikeCapabilityStatusMDT.h"
#include "uci/type/StrikeCapabilityStatusMT.h"
#include "uci/type/StrikeCapabilityStatusType.h"
#include "uci/type/StrikeCapabilityType.h"
#include "uci/type/StrikeCommandMT.h"
#include "uci/type/StrikeCommandStatusMDT.h"
#include "uci/type/StrikeCommandStatusMT.h"
#include "uci/type/StrikeConsentRequestMT.h"
#include "uci/type/StrikeConsentRequestStatusMDT.h"
#include "uci/type/StrikeConsentRequestStatusMT.h"
#include "uci/type/StrikeConsentRequestType.h"
#include "uci/type/StrikeSettingsCommandMDT.h"
#include "uci/type/StrikeSettingsCommandMT.h"
#include "uci/type/StrikeSettingsCommandStatusMDT.h"
#include "uci/type/StrikeSettingsCommandStatusMT.h"
#include "uci/type/StrikeTaskAchievabilityAssessmentRequestType.h"
#include "uci/type/StrikeTaskAchievabilityAssessmentType.h"
#include "uci/type/StrikeTaskWeaponType.h"
#include "uci/type/SubCapabilityID_Type.h"
#include "uci/type/SubsystemBIT_CommandMDT.h"
#include "uci/type/SubsystemBIT_CommandMT.h"
#include "uci/type/SubsystemBIT_CommandStatusMDT.h"
#include "uci/type/SubsystemBIT_CommandStatusMT.h"
#include "uci/type/SubsystemBIT_ConfigurationID_Type.h"
#include "uci/type/SubsystemBIT_ConfigurationMT.h"
#include "uci/type/SubsystemBIT_StatusMT.h"
#include "uci/type/SubsystemCalibrationCommandMDT.h"
#include "uci/type/SubsystemCalibrationCommandMT.h"
#include "uci/type/SubsystemCalibrationCommandStatusMDT.h"
#include "uci/type/SubsystemCalibrationCommandStatusMT.h"
#include "uci/type/SubsystemCalibrationConfigurationID_Type.h"
#include "uci/type/SubsystemCalibrationConfigurationMT.h"
#include "uci/type/SubsystemCalibrationStatusMT.h"
#include "uci/type/SubsystemCommandStatusBaseType.h"
#include "uci/type/SubsystemConfigurationDataRequestMDT.h"
#include "uci/type/SubsystemConfigurationDataRequestMT.h"
#include "uci/type/SubsystemConfigurationDataRequestStatusMDT.h"
#include "uci/type/SubsystemConfigurationDataRequestStatusMT.h"
#include "uci/type/SubsystemConfigurationID_Type.h"
#include "uci/type/SubsystemConfigurationMT.h"
#include "uci/type/SubsystemEraseCommandMDT.h"
#include "uci/type/SubsystemEraseCommandMT.h"
#include "uci/type/SubsystemEraseCommandStatusMDT.h"
#include "uci/type/SubsystemEraseCommandStatusMT.h"
#include "uci/type/SubsystemExtendedStatusPET.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/SubsystemMaintenanceCommandMDT.h"
#include "uci/type/SubsystemMaintenanceCommandMT.h"
#include "uci/type/SubsystemMaintenanceCommandStatusMDT.h"
#include "uci/type/SubsystemMaintenanceCommandStatusMT.h"
#include "uci/type/SubsystemMaintenanceConfigurationID_Type.h"
#include "uci/type/SubsystemMaintenanceConfigurationMT.h"
#include "uci/type/SubsystemMaintenanceID_Type.h"
#include "uci/type/SubsystemMaintenanceStatusMT.h"
#include "uci/type/SubsystemMaintenanceTestCommandPET.h"
#include "uci/type/SubsystemMaintenanceTestCommandType.h"
#include "uci/type/SubsystemMaintenanceTestPET.h"
#include "uci/type/SubsystemMaintenanceTestResultPET.h"
#include "uci/type/SubsystemMaintenanceTestResultType.h"
#include "uci/type/SubsystemMaintenanceTestType.h"
#include "uci/type/SubsystemSettingsCommandMDT.h"
#include "uci/type/SubsystemSettingsCommandMT.h"
#include "uci/type/SubsystemSettingsCommandStatusMDT.h"
#include "uci/type/SubsystemSettingsCommandStatusMT.h"
#include "uci/type/SubsystemStateCommandMDT.h"
#include "uci/type/SubsystemStateCommandMT.h"
#include "uci/type/SubsystemStateCommandStatusMDT.h"
#include "uci/type/SubsystemStateCommandStatusMT.h"
#include "uci/type/SubsystemStatusDataRequestMDT.h"
#include "uci/type/SubsystemStatusDataRequestMT.h"
#include "uci/type/SubsystemStatusDataRequestStatusMDT.h"
#include "uci/type/SubsystemStatusDataRequestStatusMT.h"
#include "uci/type/SubsystemStatusDetailedDataRequestMDT.h"
#include "uci/type/SubsystemStatusDetailedDataRequestMT.h"
#include "uci/type/SubsystemStatusDetailedDataRequestStatusMDT.h"
#include "uci/type/SubsystemStatusDetailedDataRequestStatusMT.h"
#include "uci/type/SubsystemStatusDetailedMT.h"
#include "uci/type/SubsystemStatusMT.h"
#include "uci/type/SubsystemStreamMT.h"
#include "uci/type/SupportCapabilityCommandBaseType.h"
#include "uci/type/SupportCapabilityCommandStatusBaseType.h"
#include "uci/type/SupportCapabilityID_Type.h"
#include "uci/type/SupportCapabilityStatusBaseType.h"
#include "uci/type/SupportedResolutionID_Type.h"
#include "uci/type/SurvivabilityRiskLevelID_Type.h"
#include "uci/type/SurvivabilityRiskLevelMT.h"
#include "uci/type/SystemDeploymentActivityMT.h"
#include "uci/type/SystemDeploymentActivityType.h"
#include "uci/type/SystemDeploymentCapabilityMDT.h"
#include "uci/type/SystemDeploymentCapabilityMT.h"
#include "uci/type/SystemDeploymentCapabilityStatusMDT.h"
#include "uci/type/SystemDeploymentCapabilityStatusMT.h"
#include "uci/type/SystemDeploymentCapabilityStatusType.h"
#include "uci/type/SystemDeploymentCapabilityType.h"
#include "uci/type/SystemDeploymentTaskBaseType.h"
#include "uci/type/SystemDeploymentTaskType.h"
#include "uci/type/SystemEphemerisRequestParametersType.h"
#include "uci/type/SystemEstimationRequestMDT.h"
#include "uci/type/SystemEstimationRequestMT.h"
#include "uci/type/SystemEstimationRequestStatusMDT.h"
#include "uci/type/SystemEstimationRequestStatusMT.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/SystemIdentityType.h"
#include "uci/type/SystemManagementRequestMDT.h"
#include "uci/type/SystemManagementRequestMT.h"
#include "uci/type/SystemManagementRequestStatusMDT.h"
#include "uci/type/SystemManagementRequestStatusMT.h"
#include "uci/type/SystemMetadataMT.h"
#include "uci/type/SystemMetadataPET.h"
#include "uci/type/SystemNotificationMDT.h"
#include "uci/type/SystemNotificationMT.h"
#include "uci/type/SystemOrbitReportMT.h"
#include "uci/type/SystemOrbitalElementSetID_Type.h"
#include "uci/type/SystemOrbitalElementSetMDT.h"
#include "uci/type/SystemOrbitalElementSetMT.h"
#include "uci/type/SystemOrbitalElementSetRequestMDT.h"
#include "uci/type/SystemOrbitalElementSetRequestMT.h"
#include "uci/type/SystemOrbitalElementSetRequestStatusMDT.h"
#include "uci/type/SystemOrbitalElementSetRequestStatusMT.h"
#include "uci/type/SystemOrbitalElementSetType.h"
#include "uci/type/SystemOrbitalEphemerisID_Type.h"
#include "uci/type/SystemOrbitalEphemerisMDT.h"
#include "uci/type/SystemOrbitalEphemerisMT.h"
#include "uci/type/SystemOrbitalEphemerisRequestMDT.h"
#include "uci/type/SystemOrbitalEphemerisRequestMT.h"
#include "uci/type/SystemOrbitalEphemerisRequestStatusMDT.h"
#include "uci/type/SystemOrbitalEphemerisRequestStatusMT.h"
#include "uci/type/SystemOrbitalEphemerisType.h"
#include "uci/type/SystemOrbitalPositionReportMT.h"
#include "uci/type/SystemOrbitalVCM_ID_Type.h"
#include "uci/type/SystemOrbitalVCM_MDT.h"
#include "uci/type/SystemOrbitalVCM_MT.h"
#include "uci/type/SystemOrbitalVCM_RequestMDT.h"
#include "uci/type/SystemOrbitalVCM_RequestMT.h"
#include "uci/type/SystemOrbitalVCM_RequestStatusMDT.h"
#include "uci/type/SystemOrbitalVCM_RequestStatusMT.h"
#include "uci/type/SystemOrbitalVCM_Type.h"
#include "uci/type/SystemReadinessID_Type.h"
#include "uci/type/SystemReadinessMDT.h"
#include "uci/type/SystemReadinessMT.h"
#include "uci/type/SystemStatusMT.h"
#include "uci/type/SystemTimeAtReferenceMT.h"
#include "uci/type/SystemsNeededRequestMDT.h"
#include "uci/type/SystemsNeededRequestMT.h"
#include "uci/type/SystemsNeededRequestStatusMDT.h"
#include "uci/type/SystemsNeededRequestStatusMT.h"
#include "uci/type/TLE_BaseType.h"
#include "uci/type/TLE_Type.h"
#include "uci/type/TLE_WithParametersType.h"
#include "uci/type/TacticalOrderActivityMT.h"
#include "uci/type/TacticalOrderActivityType.h"
#include "uci/type/TacticalOrderCapabilityMDT.h"
#include "uci/type/TacticalOrderCapabilityMT.h"
#include "uci/type/TacticalOrderCapabilityStatusMDT.h"
#include "uci/type/TacticalOrderCapabilityStatusMT.h"
#include "uci/type/TacticalOrderCapabilityType.h"
#include "uci/type/TacticalOrderTaskBaseType.h"
#include "uci/type/TacticalOrderTaskType.h"
#include "uci/type/TagAssociationID_Type.h"
#include "uci/type/TagAssociationMDT.h"
#include "uci/type/TagAssociationMT.h"
#include "uci/type/TaskAchievabilityAssessmentPET.h"
#include "uci/type/TaskAchievabilityAssessmentRequestPET.h"
#include "uci/type/TaskAllocationType.h"
#include "uci/type/TaskCancelCommandMDT.h"
#include "uci/type/TaskCancelCommandMT.h"
#include "uci/type/TaskCancelCommandStatusMDT.h"
#include "uci/type/TaskCancelCommandStatusMT.h"
#include "uci/type/TaskCapabilityCommandType.h"
#include "uci/type/TaskCommandMT.h"
#include "uci/type/TaskCommandStatusMDT.h"
#include "uci/type/TaskCommandStatusMT.h"
#include "uci/type/TaskExecutionApprovalStatusMDT.h"
#include "uci/type/TaskExecutionApprovalStatusMT.h"
#include "uci/type/TaskID_Type.h"
#include "uci/type/TaskMT.h"
#include "uci/type/TaskPlanApprovalStatusMT.h"
#include "uci/type/TaskPlanCommandID_Type.h"
#include "uci/type/TaskPlanCommandMT.h"
#include "uci/type/TaskPlanCommandStatusMT.h"
#include "uci/type/TaskPlanExecutionStatusMT.h"
#include "uci/type/TaskPlanID_Type.h"
#include "uci/type/TaskPlanInputsType.h"
#include "uci/type/TaskPlanMT.h"
#include "uci/type/TaskPlanProcessDescriptionType.h"
#include "uci/type/TaskPlanStatusMT.h"
#include "uci/type/TaskPlanValidationCommandMDT.h"
#include "uci/type/TaskPlanValidationCommandMT.h"
#include "uci/type/TaskPlanValidationCommandStatusMDT.h"
#include "uci/type/TaskPlanValidationCommandStatusMT.h"
#include "uci/type/TaskPlanValidationID_Type.h"
#include "uci/type/TaskPlanValidationInputsType.h"
#include "uci/type/TaskPlanValidationMT.h"
#include "uci/type/TaskPlanningResultType.h"
#include "uci/type/TaskPlanningStatusMDT.h"
#include "uci/type/TaskPlanningStatusMT.h"
#include "uci/type/TaskStatusMDT.h"
#include "uci/type/TaskStatusMT.h"
#include "uci/type/TemperatureStatusType.h"
#include "uci/type/ThreatAssessmentRequestType.h"
#include "uci/type/TimeAndPolarDataType.h"
#include "uci/type/TimeAndPolarRecordType.h"
#include "uci/type/TimedZoneType.h"
#include "uci/type/TrackOptionsID_Type.h"
#include "uci/type/TrackingOpZoneFilterAreaType.h"
#include "uci/type/TurretCommandMT.h"
#include "uci/type/TurretCommandStatusMDT.h"
#include "uci/type/TurretCommandStatusMT.h"
#include "uci/type/TurretCommandType.h"
#include "uci/type/TurretReportID_Type.h"
#include "uci/type/TurretReportMT.h"
#include "uci/type/TurretStatusMDT.h"
#include "uci/type/TurretStatusMT.h"
#include "uci/type/UMID_AudioID_Type.h"
#include "uci/type/UMID_DataID_Type.h"
#include "uci/type/UMID_SystemID_Type.h"
#include "uci/type/UMID_VideoID_Type.h"
#include "uci/type/UnallocatedReasonType.h"
#include "uci/type/UnitID_Type.h"
#include "uci/type/UnitVectorType.h"
#include "uci/type/UnsignedIntegerMinMaxType.h"
#include "uci/type/ValidationCommandBaseType.h"
#include "uci/type/ValidationCommandStatusBaseType.h"
#include "uci/type/ValveDataStatusType.h"
#include "uci/type/VehicleConfigurationType.h"
#include "uci/type/VehicleIdentificationType.h"
#include "uci/type/Velocity2D_Type.h"
#include "uci/type/Velocity2D_UncertaintyType.h"
#include "uci/type/VersionedID_Type.h"
#include "uci/type/VideoAugmentationParametersType.h"
#include "uci/type/WeaponeeringLocationType.h"
#include "uci/type/WeaponeeringStoreType.h"
#include "uci/type/WeaponeeringTargetType.h"
#include "uci/type/WeaponeeringType.h"
#include "uci/type/WeatherAugmentationParametersType.h"
#include "uci/type/WeatherDatasetID_Type.h"
#include "uci/type/WeatherDatasetMDT.h"
#include "uci/type/WeatherDatasetMT.h"
#include "uci/type/WeatherMT.h"
#include "uci/type/WeatherObservationMT.h"
#include "uci/type/WeatherRadarActivityMT.h"
#include "uci/type/WeatherRadarActivityType.h"
#include "uci/type/WeatherRadarCapabilityCommandType.h"
#include "uci/type/WeatherRadarCapabilityMDT.h"
#include "uci/type/WeatherRadarCapabilityMT.h"
#include "uci/type/WeatherRadarCapabilityStatusMDT.h"
#include "uci/type/WeatherRadarCapabilityStatusMT.h"
#include "uci/type/WeatherRadarCapabilityType.h"
#include "uci/type/WeatherRadarCommandMT.h"
#include "uci/type/WeatherRadarCommandStatusMDT.h"
#include "uci/type/WeatherRadarCommandStatusMT.h"
#include "uci/type/WeatherRadarObservationMT.h"
#include "uci/type/WeatherRadarSettingsCommandMDT.h"
#include "uci/type/WeatherRadarSettingsCommandMT.h"
#include "uci/type/WeatherRadarSettingsCommandStatusMDT.h"
#include "uci/type/WeatherRadarSettingsCommandStatusMT.h"
#include "uci/type/WeatherReportGridDataType.h"
#include "uci/type/WorkingEOB_ID_Type.h"
#include "uci/type/WorkingEOB_MDT.h"
#include "uci/type/WorkingEOB_MT.h"
#include "uci/type/WorkingEOB_RequestMDT.h"
#include "uci/type/WorkingEOB_RequestMT.h"
#include "uci/type/WorkingEOB_RequestStatusMDT.h"
#include "uci/type/WorkingEOB_RequestStatusMT.h"
#include "uci/type/WorkingSOB_ID_Type.h"
#include "uci/type/WorkingSOB_MDT.h"
#include "uci/type/WorkingSOB_MT.h"
#include "uci/type/WorkingSOB_RequestMDT.h"
#include "uci/type/WorkingSOB_RequestMT.h"
#include "uci/type/WorkingSOB_RequestStatusMDT.h"
#include "uci/type/WorkingSOB_RequestStatusMT.h"
#include "uci/type/ZoneExternalType.h"
#include "uci/type/ZoneInclusionType.h"
#include "uci/type/ZoneType.h"

/**  */
namespace extxml_uci {

/**  */
namespace util {

bool DerivedTypesDeserializer::deserialize(const boost::property_tree::ptree& propTree, uci::base::Accessor& accessor, std::string& nodeName, std::string& nsPrefix, const bool topLevel) {
  switch (accessor.getAccessorType()) {
    case uci::type::accessorType::accessAssessmentID_Type:
      return extxml_uci::type::AccessAssessmentID_Type::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::accessAssessmentMT:
      return extxml_uci::type::AccessAssessmentMT::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::accessAssessmentRequestMDT:
      return extxml_uci::type::AccessAssessmentRequestMDT::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::accessAssessmentRequestMT:
      return extxml_uci::type::AccessAssessmentRequestMT::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::accessAssessmentRequestStatusMDT:
      return extxml_uci::type::AccessAssessmentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::accessAssessmentRequestStatusMT:
      return extxml_uci::type::AccessAssessmentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::AccessAssessmentRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::achievabilityAssessmentPET:
      return extxml_uci::type::AchievabilityAssessmentPET::deserialize(propTree, dynamic_cast<uci::type::AchievabilityAssessmentPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::achievabilityAssessmentRequestPET:
      return extxml_uci::type::AchievabilityAssessmentRequestPET::deserialize(propTree, dynamic_cast<uci::type::AchievabilityAssessmentRequestPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aCO_FileTraceabilityType:
      return extxml_uci::type::ACO_FileTraceabilityType::deserialize(propTree, dynamic_cast<uci::type::ACO_FileTraceabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aCO_TraceabilityType:
      return extxml_uci::type::ACO_TraceabilityType::deserialize(propTree, dynamic_cast<uci::type::ACO_TraceabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aCTDF_FileTraceabilityType:
      return extxml_uci::type::ACTDF_FileTraceabilityType::deserialize(propTree, dynamic_cast<uci::type::ACTDF_FileTraceabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aCTDF_TaskID_Type:
      return extxml_uci::type::ACTDF_TaskID_Type::deserialize(propTree, dynamic_cast<uci::type::ACTDF_TaskID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aCTDF_TraceabilityType:
      return extxml_uci::type::ACTDF_TraceabilityType::deserialize(propTree, dynamic_cast<uci::type::ACTDF_TraceabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionActivityMT:
      return extxml_uci::type::ActionActivityMT::deserialize(propTree, dynamic_cast<uci::type::ActionActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionActivityType:
      return extxml_uci::type::ActionActivityType::deserialize(propTree, dynamic_cast<uci::type::ActionActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionAllocationType:
      return extxml_uci::type::ActionAllocationType::deserialize(propTree, dynamic_cast<uci::type::ActionAllocationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionCancelCommandMDT:
      return extxml_uci::type::ActionCancelCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ActionCancelCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionCancelCommandMT:
      return extxml_uci::type::ActionCancelCommandMT::deserialize(propTree, dynamic_cast<uci::type::ActionCancelCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionCancelCommandStatusMDT:
      return extxml_uci::type::ActionCancelCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionCancelCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionCancelCommandStatusMT:
      return extxml_uci::type::ActionCancelCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionCancelCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionCapabilityCommandType:
      return extxml_uci::type::ActionCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::ActionCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionCapabilityMDT:
      return extxml_uci::type::ActionCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::ActionCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionCapabilityMT:
      return extxml_uci::type::ActionCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::ActionCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionCapabilityStatusMDT:
      return extxml_uci::type::ActionCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionCapabilityStatusMT:
      return extxml_uci::type::ActionCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionCapabilityType:
      return extxml_uci::type::ActionCapabilityType::deserialize(propTree, dynamic_cast<uci::type::ActionCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionCommandMT:
      return extxml_uci::type::ActionCommandMT::deserialize(propTree, dynamic_cast<uci::type::ActionCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionCommandStatusMDT:
      return extxml_uci::type::ActionCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionCommandStatusMT:
      return extxml_uci::type::ActionCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionExecutionApprovalStatusMDT:
      return extxml_uci::type::ActionExecutionApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionExecutionApprovalStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionExecutionApprovalStatusMT:
      return extxml_uci::type::ActionExecutionApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionExecutionApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionID_Type:
      return extxml_uci::type::ActionID_Type::deserialize(propTree, dynamic_cast<uci::type::ActionID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionMT:
      return extxml_uci::type::ActionMT::deserialize(propTree, dynamic_cast<uci::type::ActionMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanApprovalStatusMT:
      return extxml_uci::type::ActionPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanCommandID_Type:
      return extxml_uci::type::ActionPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::ActionPlanCommandID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanCommandMT:
      return extxml_uci::type::ActionPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanCommandStatusMT:
      return extxml_uci::type::ActionPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanExecutionStatusMT:
      return extxml_uci::type::ActionPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanID_Type:
      return extxml_uci::type::ActionPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::ActionPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanInputsType:
      return extxml_uci::type::ActionPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanMT:
      return extxml_uci::type::ActionPlanMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanningResultType:
      return extxml_uci::type::ActionPlanningResultType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanningResultType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanningStatusMDT:
      return extxml_uci::type::ActionPlanningStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanningStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanningStatusMT:
      return extxml_uci::type::ActionPlanningStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanningStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanProcessDescriptionType:
      return extxml_uci::type::ActionPlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanStatusMT:
      return extxml_uci::type::ActionPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanValidationCommandMDT:
      return extxml_uci::type::ActionPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanValidationCommandMT:
      return extxml_uci::type::ActionPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanValidationCommandStatusMDT:
      return extxml_uci::type::ActionPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanValidationCommandStatusMT:
      return extxml_uci::type::ActionPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanValidationID_Type:
      return extxml_uci::type::ActionPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::ActionPlanValidationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanValidationInputsType:
      return extxml_uci::type::ActionPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::ActionPlanValidationInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionPlanValidationMT:
      return extxml_uci::type::ActionPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::ActionPlanValidationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionStatusMDT:
      return extxml_uci::type::ActionStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActionStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::actionStatusMT:
      return extxml_uci::type::ActionStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActionStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityBaseType:
      return extxml_uci::type::ActivityBaseType::deserialize(propTree, dynamic_cast<uci::type::ActivityBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityCommandBaseType:
      return extxml_uci::type::ActivityCommandBaseType::deserialize(propTree, dynamic_cast<uci::type::ActivityCommandBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityExecutionStatusType:
      return extxml_uci::type::ActivityExecutionStatusType::deserialize(propTree, dynamic_cast<uci::type::ActivityExecutionStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityID_Type:
      return extxml_uci::type::ActivityID_Type::deserialize(propTree, dynamic_cast<uci::type::ActivityID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityMetricsID_Type:
      return extxml_uci::type::ActivityMetricsID_Type::deserialize(propTree, dynamic_cast<uci::type::ActivityMetricsID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityMetricsMT:
      return extxml_uci::type::ActivityMetricsMT::deserialize(propTree, dynamic_cast<uci::type::ActivityMetricsMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityMetricsRequestMDT:
      return extxml_uci::type::ActivityMetricsRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityMetricsRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityMetricsRequestMT:
      return extxml_uci::type::ActivityMetricsRequestMT::deserialize(propTree, dynamic_cast<uci::type::ActivityMetricsRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityMetricsRequestStatusMDT:
      return extxml_uci::type::ActivityMetricsRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityMetricsRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityMetricsRequestStatusMT:
      return extxml_uci::type::ActivityMetricsRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActivityMetricsRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanApprovalStatusMT:
      return extxml_uci::type::ActivityPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanCommandID_Type:
      return extxml_uci::type::ActivityPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanCommandID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanCommandMT:
      return extxml_uci::type::ActivityPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanCommandStatusMT:
      return extxml_uci::type::ActivityPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanExecutionStatusMT:
      return extxml_uci::type::ActivityPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanID_Type:
      return extxml_uci::type::ActivityPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanInputsType:
      return extxml_uci::type::ActivityPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanMT:
      return extxml_uci::type::ActivityPlanMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanPartsCommandType:
      return extxml_uci::type::ActivityPlanPartsCommandType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanPartsCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanPartsType:
      return extxml_uci::type::ActivityPlanPartsType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanPartsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanProcessDescriptionType:
      return extxml_uci::type::ActivityPlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanStatusMT:
      return extxml_uci::type::ActivityPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanStatusType:
      return extxml_uci::type::ActivityPlanStatusType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanValidationCommandMDT:
      return extxml_uci::type::ActivityPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanValidationCommandMT:
      return extxml_uci::type::ActivityPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanValidationCommandStatusMDT:
      return extxml_uci::type::ActivityPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanValidationCommandStatusMT:
      return extxml_uci::type::ActivityPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanValidationID_Type:
      return extxml_uci::type::ActivityPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanValidationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanValidationInputsType:
      return extxml_uci::type::ActivityPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanValidationInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::activityPlanValidationMT:
      return extxml_uci::type::ActivityPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::ActivityPlanValidationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airfieldGeneralStoreType:
      return extxml_uci::type::AirfieldGeneralStoreType::deserialize(propTree, dynamic_cast<uci::type::AirfieldGeneralStoreType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airfieldID_Type:
      return extxml_uci::type::AirfieldID_Type::deserialize(propTree, dynamic_cast<uci::type::AirfieldID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airfieldReportID_Type:
      return extxml_uci::type::AirfieldReportID_Type::deserialize(propTree, dynamic_cast<uci::type::AirfieldReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airfieldReportMT:
      return extxml_uci::type::AirfieldReportMT::deserialize(propTree, dynamic_cast<uci::type::AirfieldReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airfieldStoresPET:
      return extxml_uci::type::AirfieldStoresPET::deserialize(propTree, dynamic_cast<uci::type::AirfieldStoresPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airfieldStoreType:
      return extxml_uci::type::AirfieldStoreType::deserialize(propTree, dynamic_cast<uci::type::AirfieldStoreType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleActivityMT:
      return extxml_uci::type::AirSampleActivityMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleActivityType:
      return extxml_uci::type::AirSampleActivityType::deserialize(propTree, dynamic_cast<uci::type::AirSampleActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleCapabilityCommandType:
      return extxml_uci::type::AirSampleCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::AirSampleCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleCapabilityMDT:
      return extxml_uci::type::AirSampleCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleCapabilityMT:
      return extxml_uci::type::AirSampleCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleCapabilityStatusMDT:
      return extxml_uci::type::AirSampleCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleCapabilityStatusMT:
      return extxml_uci::type::AirSampleCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleCapabilityType:
      return extxml_uci::type::AirSampleCapabilityType::deserialize(propTree, dynamic_cast<uci::type::AirSampleCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleCommandMT:
      return extxml_uci::type::AirSampleCommandMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleCommandStatusMDT:
      return extxml_uci::type::AirSampleCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleCommandStatusMT:
      return extxml_uci::type::AirSampleCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleSettingsCommandMDT:
      return extxml_uci::type::AirSampleSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::AirSampleSettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleSettingsCommandMT:
      return extxml_uci::type::AirSampleSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleSettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleSettingsCommandStatusMDT:
      return extxml_uci::type::AirSampleSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AirSampleSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleSettingsCommandStatusMT:
      return extxml_uci::type::AirSampleSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AirSampleSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleTaskBaseType:
      return extxml_uci::type::AirSampleTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::AirSampleTaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::airSampleTaskType:
      return extxml_uci::type::AirSampleTaskType::deserialize(propTree, dynamic_cast<uci::type::AirSampleTaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_ActivityCommandType:
      return extxml_uci::type::AMTI_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::AMTI_ActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_ActivityMT:
      return extxml_uci::type::AMTI_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_ActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_ActivityType:
      return extxml_uci::type::AMTI_ActivityType::deserialize(propTree, dynamic_cast<uci::type::AMTI_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_CapabilityCommandType:
      return extxml_uci::type::AMTI_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_CapabilityMDT:
      return extxml_uci::type::AMTI_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_CapabilityMT:
      return extxml_uci::type::AMTI_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_CapabilityStatusMDT:
      return extxml_uci::type::AMTI_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_CapabilityStatusMT:
      return extxml_uci::type::AMTI_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_CapabilityType:
      return extxml_uci::type::AMTI_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::AMTI_CapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_CollectionConstraintsType:
      return extxml_uci::type::AMTI_CollectionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::AMTI_CollectionConstraintsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_CommandMT:
      return extxml_uci::type::AMTI_CommandMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_CommandStatusMDT:
      return extxml_uci::type::AMTI_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_CommandStatusMT:
      return extxml_uci::type::AMTI_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_CommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_SettingsCommandMDT:
      return extxml_uci::type::AMTI_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_SettingsCommandMT:
      return extxml_uci::type::AMTI_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_SettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_SettingsCommandStatusMDT:
      return extxml_uci::type::AMTI_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AMTI_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_SettingsCommandStatusMT:
      return extxml_uci::type::AMTI_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AMTI_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_TaskBaseType:
      return extxml_uci::type::AMTI_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::AMTI_TaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aMTI_TaskType:
      return extxml_uci::type::AMTI_TaskType::deserialize(propTree, dynamic_cast<uci::type::AMTI_TaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::analysisRouteID_Type:
      return extxml_uci::type::AnalysisRouteID_Type::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::analysisRouteMT:
      return extxml_uci::type::AnalysisRouteMT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::analysisRouteRequestMDT:
      return extxml_uci::type::AnalysisRouteRequestMDT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::analysisRouteRequestMT:
      return extxml_uci::type::AnalysisRouteRequestMT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::analysisRouteRequestStatusMDT:
      return extxml_uci::type::AnalysisRouteRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::analysisRouteRequestStatusMT:
      return extxml_uci::type::AnalysisRouteRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::AnalysisRouteRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::anglePairType:
      return extxml_uci::type::AnglePairType::deserialize(propTree, dynamic_cast<uci::type::AnglePairType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::antennaID_Type:
      return extxml_uci::type::AntennaID_Type::deserialize(propTree, dynamic_cast<uci::type::AntennaID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::antennaResourceID_Type:
      return extxml_uci::type::AntennaResourceID_Type::deserialize(propTree, dynamic_cast<uci::type::AntennaResourceID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_ActivityCommandType:
      return extxml_uci::type::AO_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::AO_ActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_ActivityMT:
      return extxml_uci::type::AO_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::AO_ActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_ActivityType:
      return extxml_uci::type::AO_ActivityType::deserialize(propTree, dynamic_cast<uci::type::AO_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_CapabilityCommandType:
      return extxml_uci::type::AO_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_CapabilityMDT:
      return extxml_uci::type::AO_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_CapabilityMT:
      return extxml_uci::type::AO_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_CapabilityStatusMDT:
      return extxml_uci::type::AO_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_CapabilityStatusMT:
      return extxml_uci::type::AO_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_CapabilityType:
      return extxml_uci::type::AO_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::AO_CapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_CommandMT:
      return extxml_uci::type::AO_CommandMT::deserialize(propTree, dynamic_cast<uci::type::AO_CommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_CommandStatusMDT:
      return extxml_uci::type::AO_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AO_CommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_CommandStatusMT:
      return extxml_uci::type::AO_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AO_CommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_ConsentRequestMT:
      return extxml_uci::type::AO_ConsentRequestMT::deserialize(propTree, dynamic_cast<uci::type::AO_ConsentRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_ConsentRequestStatusMDT:
      return extxml_uci::type::AO_ConsentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AO_ConsentRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_ConsentRequestStatusMT:
      return extxml_uci::type::AO_ConsentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::AO_ConsentRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_ConsentRequestType:
      return extxml_uci::type::AO_ConsentRequestType::deserialize(propTree, dynamic_cast<uci::type::AO_ConsentRequestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_SettingsCommandMDT:
      return extxml_uci::type::AO_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::AO_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_SettingsCommandMT:
      return extxml_uci::type::AO_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::AO_SettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_SettingsCommandStatusMDT:
      return extxml_uci::type::AO_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AO_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_SettingsCommandStatusMT:
      return extxml_uci::type::AO_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::AO_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_TaskBaseType:
      return extxml_uci::type::AO_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::AO_TaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aO_TaskType:
      return extxml_uci::type::AO_TaskType::deserialize(propTree, dynamic_cast<uci::type::AO_TaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::applicabilityType:
      return extxml_uci::type::ApplicabilityType::deserialize(propTree, dynamic_cast<uci::type::ApplicabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalAuthorityID_Type:
      return extxml_uci::type::ApprovalAuthorityID_Type::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalAuthorityMDT:
      return extxml_uci::type::ApprovalAuthorityMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalAuthorityMT:
      return extxml_uci::type::ApprovalAuthorityMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalAuthorityRequestMDT:
      return extxml_uci::type::ApprovalAuthorityRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalAuthorityRequestMT:
      return extxml_uci::type::ApprovalAuthorityRequestMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalAuthorityRequestStatusMDT:
      return extxml_uci::type::ApprovalAuthorityRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalAuthorityRequestStatusMT:
      return extxml_uci::type::ApprovalAuthorityRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalAuthorityRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalManagementCommandMDT:
      return extxml_uci::type::ApprovalManagementCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalManagementCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalManagementCommandMT:
      return extxml_uci::type::ApprovalManagementCommandMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalManagementCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalManagementCommandStatusMDT:
      return extxml_uci::type::ApprovalManagementCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalManagementCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalManagementCommandStatusMT:
      return extxml_uci::type::ApprovalManagementCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalManagementCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalPolicyBaseType:
      return extxml_uci::type::ApprovalPolicyBaseType::deserialize(propTree, dynamic_cast<uci::type::ApprovalPolicyBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalPolicyID_Type:
      return extxml_uci::type::ApprovalPolicyID_Type::deserialize(propTree, dynamic_cast<uci::type::ApprovalPolicyID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalPolicyMDT:
      return extxml_uci::type::ApprovalPolicyMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalPolicyMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalPolicyMT:
      return extxml_uci::type::ApprovalPolicyMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalPolicyMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalRequestMDT:
      return extxml_uci::type::ApprovalRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalRequestMT:
      return extxml_uci::type::ApprovalRequestMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalRequestStatusMDT:
      return extxml_uci::type::ApprovalRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::approvalRequestStatusMT:
      return extxml_uci::type::ApprovalRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ApprovalRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::assessmentID_Type:
      return extxml_uci::type::AssessmentID_Type::deserialize(propTree, dynamic_cast<uci::type::AssessmentID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::assessmentMT:
      return extxml_uci::type::AssessmentMT::deserialize(propTree, dynamic_cast<uci::type::AssessmentMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::assessmentRequestMDT:
      return extxml_uci::type::AssessmentRequestMDT::deserialize(propTree, dynamic_cast<uci::type::AssessmentRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::assessmentRequestMT:
      return extxml_uci::type::AssessmentRequestMT::deserialize(propTree, dynamic_cast<uci::type::AssessmentRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::assessmentRequestStatusMDT:
      return extxml_uci::type::AssessmentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::AssessmentRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::assessmentRequestStatusMT:
      return extxml_uci::type::AssessmentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::AssessmentRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::assessmentStatusType:
      return extxml_uci::type::AssessmentStatusType::deserialize(propTree, dynamic_cast<uci::type::AssessmentStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aTO_FileTraceabilityType:
      return extxml_uci::type::ATO_FileTraceabilityType::deserialize(propTree, dynamic_cast<uci::type::ATO_FileTraceabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aTO_TraceabilityType:
      return extxml_uci::type::ATO_TraceabilityType::deserialize(propTree, dynamic_cast<uci::type::ATO_TraceabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aTR_ProcessingParametersType:
      return extxml_uci::type::ATR_ProcessingParametersType::deserialize(propTree, dynamic_cast<uci::type::ATR_ProcessingParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::aTR_ProcessingResultsType:
      return extxml_uci::type::ATR_ProcessingResultsType::deserialize(propTree, dynamic_cast<uci::type::ATR_ProcessingResultsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::augmentationProcessingParametersType:
      return extxml_uci::type::AugmentationProcessingParametersType::deserialize(propTree, dynamic_cast<uci::type::AugmentationProcessingParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::authorizationID_Type:
      return extxml_uci::type::AuthorizationID_Type::deserialize(propTree, dynamic_cast<uci::type::AuthorizationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::authorizationMDT:
      return extxml_uci::type::AuthorizationMDT::deserialize(propTree, dynamic_cast<uci::type::AuthorizationMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::authorizationMT:
      return extxml_uci::type::AuthorizationMT::deserialize(propTree, dynamic_cast<uci::type::AuthorizationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::autonomousPlanCommandType:
      return extxml_uci::type::AutonomousPlanCommandType::deserialize(propTree, dynamic_cast<uci::type::AutonomousPlanCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::autonomousPlanningActionID_Type:
      return extxml_uci::type::AutonomousPlanningActionID_Type::deserialize(propTree, dynamic_cast<uci::type::AutonomousPlanningActionID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::autonomousPlanningConstrainingPlansType:
      return extxml_uci::type::AutonomousPlanningConstrainingPlansType::deserialize(propTree, dynamic_cast<uci::type::AutonomousPlanningConstrainingPlansType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::autonomousPlanningOtherSystemConstrainingPlansType:
      return extxml_uci::type::AutonomousPlanningOtherSystemConstrainingPlansType::deserialize(propTree, dynamic_cast<uci::type::AutonomousPlanningOtherSystemConstrainingPlansType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::azElRequiredReferenceType:
      return extxml_uci::type::AzElRequiredReferenceType::deserialize(propTree, dynamic_cast<uci::type::AzElRequiredReferenceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::baseEOB_RecordType:
      return extxml_uci::type::BaseEOB_RecordType::deserialize(propTree, dynamic_cast<uci::type::BaseEOB_RecordType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::beamID_Type:
      return extxml_uci::type::BeamID_Type::deserialize(propTree, dynamic_cast<uci::type::BeamID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::behaviorType:
      return extxml_uci::type::BehaviorType::deserialize(propTree, dynamic_cast<uci::type::BehaviorType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::bIT_ID_Type:
      return extxml_uci::type::BIT_ID_Type::deserialize(propTree, dynamic_cast<uci::type::BIT_ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::byRequirementPolicyType:
      return extxml_uci::type::ByRequirementPolicyType::deserialize(propTree, dynamic_cast<uci::type::ByRequirementPolicyType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::byResultPolicyType:
      return extxml_uci::type::ByResultPolicyType::deserialize(propTree, dynamic_cast<uci::type::ByResultPolicyType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::byTriggerPolicyType:
      return extxml_uci::type::ByTriggerPolicyType::deserialize(propTree, dynamic_cast<uci::type::ByTriggerPolicyType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::calibrationID_Type:
      return extxml_uci::type::CalibrationID_Type::deserialize(propTree, dynamic_cast<uci::type::CalibrationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::callSignType:
      return extxml_uci::type::CallSignType::deserialize(propTree, dynamic_cast<uci::type::CallSignType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cannotComplyType:
      return extxml_uci::type::CannotComplyType::deserialize(propTree, dynamic_cast<uci::type::CannotComplyType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityBaseType:
      return extxml_uci::type::CapabilityBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilityBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityCommandBaseType:
      return extxml_uci::type::CapabilityCommandBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilityCommandBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityCommandStatusBaseType:
      return extxml_uci::type::CapabilityCommandStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilityCommandStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityConfigurationID_Type:
      return extxml_uci::type::CapabilityConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::CapabilityConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityConsentRequestStatusBaseType:
      return extxml_uci::type::CapabilityConsentRequestStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilityConsentRequestStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityCoverageAreaID_Type:
      return extxml_uci::type::CapabilityCoverageAreaID_Type::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityCoverageAreaMT:
      return extxml_uci::type::CapabilityCoverageAreaMT::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityCoverageAreaRequestMDT:
      return extxml_uci::type::CapabilityCoverageAreaRequestMDT::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityCoverageAreaRequestMT:
      return extxml_uci::type::CapabilityCoverageAreaRequestMT::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityCoverageAreaRequestStatusMDT:
      return extxml_uci::type::CapabilityCoverageAreaRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityCoverageAreaRequestStatusMT:
      return extxml_uci::type::CapabilityCoverageAreaRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::CapabilityCoverageAreaRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityDeclarationBaseType:
      return extxml_uci::type::CapabilityDeclarationBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilityDeclarationBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityID_Type:
      return extxml_uci::type::CapabilityID_Type::deserialize(propTree, dynamic_cast<uci::type::CapabilityID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilitySettingsCommandBaseType:
      return extxml_uci::type::CapabilitySettingsCommandBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilitySettingsCommandBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilitySettingsCommandStatusBaseType:
      return extxml_uci::type::CapabilitySettingsCommandStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilitySettingsCommandStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityStatusBaseType:
      return extxml_uci::type::CapabilityStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilityStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityStatusType:
      return extxml_uci::type::CapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::CapabilityStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityTaxonomyUniversalBaseType:
      return extxml_uci::type::CapabilityTaxonomyUniversalBaseType::deserialize(propTree, dynamic_cast<uci::type::CapabilityTaxonomyUniversalBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::capabilityTaxonomyUniversalType:
      return extxml_uci::type::CapabilityTaxonomyUniversalType::deserialize(propTree, dynamic_cast<uci::type::CapabilityTaxonomyUniversalType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cargoDeliveryCapabilityMT:
      return extxml_uci::type::CargoDeliveryCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::CargoDeliveryCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cargoDeliveryCapabilityStatusMDT:
      return extxml_uci::type::CargoDeliveryCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CargoDeliveryCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cargoDeliveryCapabilityStatusMT:
      return extxml_uci::type::CargoDeliveryCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::CargoDeliveryCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cargoDeliveryCapabilityType:
      return extxml_uci::type::CargoDeliveryCapabilityType::deserialize(propTree, dynamic_cast<uci::type::CargoDeliveryCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cargoID_Type:
      return extxml_uci::type::CargoID_Type::deserialize(propTree, dynamic_cast<uci::type::CargoID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cargoStatusMT:
      return extxml_uci::type::CargoStatusMT::deserialize(propTree, dynamic_cast<uci::type::CargoStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::centerPointImageRegionOfInterestType:
      return extxml_uci::type::CenterPointImageRegionOfInterestType::deserialize(propTree, dynamic_cast<uci::type::CenterPointImageRegionOfInterestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOE_OrbitBaseType:
      return extxml_uci::type::COE_OrbitBaseType::deserialize(propTree, dynamic_cast<uci::type::COE_OrbitBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOE_OrbitType:
      return extxml_uci::type::COE_OrbitType::deserialize(propTree, dynamic_cast<uci::type::COE_OrbitType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::collectionConstraintsType:
      return extxml_uci::type::CollectionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::CollectionConstraintsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::colorDepthSettingsType:
      return extxml_uci::type::ColorDepthSettingsType::deserialize(propTree, dynamic_cast<uci::type::ColorDepthSettingsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_ActivityCommandType:
      return extxml_uci::type::COMINT_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::COMINT_ActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_ActivityMT:
      return extxml_uci::type::COMINT_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_ActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_ActivityType:
      return extxml_uci::type::COMINT_ActivityType::deserialize(propTree, dynamic_cast<uci::type::COMINT_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_CapabilityCommandType:
      return extxml_uci::type::COMINT_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::COMINT_CapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_CapabilityMDT:
      return extxml_uci::type::COMINT_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::COMINT_CapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_CapabilityMT:
      return extxml_uci::type::COMINT_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_CapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_CapabilityStatusMDT:
      return extxml_uci::type::COMINT_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::COMINT_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_CapabilityStatusMT:
      return extxml_uci::type::COMINT_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_CapabilityType:
      return extxml_uci::type::COMINT_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::COMINT_CapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_CommandMT:
      return extxml_uci::type::COMINT_CommandMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_CommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_CommandStatusMDT:
      return extxml_uci::type::COMINT_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::COMINT_CommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_CommandStatusMT:
      return extxml_uci::type::COMINT_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_CommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_ConsentRequestMT:
      return extxml_uci::type::COMINT_ConsentRequestMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_ConsentRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_ConsentRequestStatusMDT:
      return extxml_uci::type::COMINT_ConsentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::COMINT_ConsentRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_ConsentRequestStatusMT:
      return extxml_uci::type::COMINT_ConsentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_ConsentRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_ConsentRequestType:
      return extxml_uci::type::COMINT_ConsentRequestType::deserialize(propTree, dynamic_cast<uci::type::COMINT_ConsentRequestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_ProcessingParametersType:
      return extxml_uci::type::COMINT_ProcessingParametersType::deserialize(propTree, dynamic_cast<uci::type::COMINT_ProcessingParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_SettingsCommandMDT:
      return extxml_uci::type::COMINT_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::COMINT_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_SettingsCommandMT:
      return extxml_uci::type::COMINT_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_SettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_SettingsCommandStatusMDT:
      return extxml_uci::type::COMINT_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::COMINT_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_SettingsCommandStatusMT:
      return extxml_uci::type::COMINT_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::COMINT_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_TaskBaseType:
      return extxml_uci::type::COMINT_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::COMINT_TaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cOMINT_TaskType:
      return extxml_uci::type::COMINT_TaskType::deserialize(propTree, dynamic_cast<uci::type::COMINT_TaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commActionExtendedType:
      return extxml_uci::type::CommActionExtendedType::deserialize(propTree, dynamic_cast<uci::type::CommActionExtendedType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commActionType:
      return extxml_uci::type::CommActionType::deserialize(propTree, dynamic_cast<uci::type::CommActionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commandableCapabilityDeclarationType:
      return extxml_uci::type::CommandableCapabilityDeclarationType::deserialize(propTree, dynamic_cast<uci::type::CommandableCapabilityDeclarationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commandBaseType:
      return extxml_uci::type::CommandBaseType::deserialize(propTree, dynamic_cast<uci::type::CommandBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commandID_Type:
      return extxml_uci::type::CommandID_Type::deserialize(propTree, dynamic_cast<uci::type::CommandID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commandStatusBaseType:
      return extxml_uci::type::CommandStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::CommandStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commAntennaModeType:
      return extxml_uci::type::CommAntennaModeType::deserialize(propTree, dynamic_cast<uci::type::CommAntennaModeType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commAssetEstimationRequestMDT:
      return extxml_uci::type::CommAssetEstimationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::CommAssetEstimationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commAssetEstimationRequestMT:
      return extxml_uci::type::CommAssetEstimationRequestMT::deserialize(propTree, dynamic_cast<uci::type::CommAssetEstimationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commAssetEstimationRequestStatusMDT:
      return extxml_uci::type::CommAssetEstimationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommAssetEstimationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commAssetEstimationRequestStatusMT:
      return extxml_uci::type::CommAssetEstimationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommAssetEstimationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commAssetID_Type:
      return extxml_uci::type::CommAssetID_Type::deserialize(propTree, dynamic_cast<uci::type::CommAssetID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commAssetMT:
      return extxml_uci::type::CommAssetMT::deserialize(propTree, dynamic_cast<uci::type::CommAssetMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commAssetOrbitID_Type:
      return extxml_uci::type::CommAssetOrbitID_Type::deserialize(propTree, dynamic_cast<uci::type::CommAssetOrbitID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commAssetOrbitMT:
      return extxml_uci::type::CommAssetOrbitMT::deserialize(propTree, dynamic_cast<uci::type::CommAssetOrbitMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commAssetPositionReportMT:
      return extxml_uci::type::CommAssetPositionReportMT::deserialize(propTree, dynamic_cast<uci::type::CommAssetPositionReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commBLOS_CommWaveformActivityCommandType:
      return extxml_uci::type::CommBLOS_CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommBLOS_CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commBLOS_CommWaveformActivityType:
      return extxml_uci::type::CommBLOS_CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommBLOS_CommWaveformActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commBLOS_CommWaveformCapabilityCommandType:
      return extxml_uci::type::CommBLOS_CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommBLOS_CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commCDL_CommWaveformActivityCommandType:
      return extxml_uci::type::CommCDL_CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommCDL_CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commCDL_CommWaveformActivityType:
      return extxml_uci::type::CommCDL_CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommCDL_CommWaveformActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commCDL_CommWaveformCapabilityCommandType:
      return extxml_uci::type::CommCDL_CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommCDL_CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commConfigurationID_Type:
      return extxml_uci::type::CommConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::CommConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commCoverageDataType:
      return extxml_uci::type::CommCoverageDataType::deserialize(propTree, dynamic_cast<uci::type::CommCoverageDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commCoverageUserDataType:
      return extxml_uci::type::CommCoverageUserDataType::deserialize(propTree, dynamic_cast<uci::type::CommCoverageUserDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commDataType:
      return extxml_uci::type::CommDataType::deserialize(propTree, dynamic_cast<uci::type::CommDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commEffectivityID_Type:
      return extxml_uci::type::CommEffectivityID_Type::deserialize(propTree, dynamic_cast<uci::type::CommEffectivityID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commIFDL_CommWaveformActivityCommandType:
      return extxml_uci::type::CommIFDL_CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommIFDL_CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commIFDL_CommWaveformActivityType:
      return extxml_uci::type::CommIFDL_CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommIFDL_CommWaveformActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commIFDL_CommWaveformCapabilityCommandType:
      return extxml_uci::type::CommIFDL_CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommIFDL_CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commLink16CommWaveformActivityCommandType:
      return extxml_uci::type::CommLink16CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommLink16CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commLink16CommWaveformActivityType:
      return extxml_uci::type::CommLink16CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommLink16CommWaveformActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commLink16CommWaveformCapabilityCommandType:
      return extxml_uci::type::CommLink16CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommLink16CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commMADL_CommWaveformActivityCommandType:
      return extxml_uci::type::CommMADL_CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commMADL_CommWaveformActivityType:
      return extxml_uci::type::CommMADL_CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_CommWaveformActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commMADL_CommWaveformCapabilityCommandType:
      return extxml_uci::type::CommMADL_CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommMADL_CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commOutageType:
      return extxml_uci::type::CommOutageType::deserialize(propTree, dynamic_cast<uci::type::CommOutageType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commPointingCommandMDT:
      return extxml_uci::type::CommPointingCommandMDT::deserialize(propTree, dynamic_cast<uci::type::CommPointingCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commPointingCommandMT:
      return extxml_uci::type::CommPointingCommandMT::deserialize(propTree, dynamic_cast<uci::type::CommPointingCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commPointingCommandStatusMDT:
      return extxml_uci::type::CommPointingCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommPointingCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commPointingCommandStatusMT:
      return extxml_uci::type::CommPointingCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommPointingCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commPointingID_Type:
      return extxml_uci::type::CommPointingID_Type::deserialize(propTree, dynamic_cast<uci::type::CommPointingID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commPointingMT:
      return extxml_uci::type::CommPointingMT::deserialize(propTree, dynamic_cast<uci::type::CommPointingMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commPointingRequestMDT:
      return extxml_uci::type::CommPointingRequestMDT::deserialize(propTree, dynamic_cast<uci::type::CommPointingRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commPointingRequestMT:
      return extxml_uci::type::CommPointingRequestMT::deserialize(propTree, dynamic_cast<uci::type::CommPointingRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commPointingRequestStatusMDT:
      return extxml_uci::type::CommPointingRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommPointingRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commPointingRequestStatusMT:
      return extxml_uci::type::CommPointingRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommPointingRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commProfileID_Type:
      return extxml_uci::type::CommProfileID_Type::deserialize(propTree, dynamic_cast<uci::type::CommProfileID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commPTW_CommWaveformActivityCommandType:
      return extxml_uci::type::CommPTW_CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommPTW_CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commPTW_CommWaveformActivityType:
      return extxml_uci::type::CommPTW_CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommPTW_CommWaveformActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commPTW_CommWaveformCapabilityCommandType:
      return extxml_uci::type::CommPTW_CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommPTW_CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelayActivityMT:
      return extxml_uci::type::CommRelayActivityMT::deserialize(propTree, dynamic_cast<uci::type::CommRelayActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelayActivityType:
      return extxml_uci::type::CommRelayActivityType::deserialize(propTree, dynamic_cast<uci::type::CommRelayActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelayCapabilityCommandType:
      return extxml_uci::type::CommRelayCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommRelayCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelayCapabilityMDT:
      return extxml_uci::type::CommRelayCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::CommRelayCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelayCapabilityMT:
      return extxml_uci::type::CommRelayCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::CommRelayCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelayCapabilityStatusMDT:
      return extxml_uci::type::CommRelayCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommRelayCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelayCapabilityStatusMT:
      return extxml_uci::type::CommRelayCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommRelayCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelayCapabilityType:
      return extxml_uci::type::CommRelayCapabilityType::deserialize(propTree, dynamic_cast<uci::type::CommRelayCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelayCommandMT:
      return extxml_uci::type::CommRelayCommandMT::deserialize(propTree, dynamic_cast<uci::type::CommRelayCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelayCommandStatusMDT:
      return extxml_uci::type::CommRelayCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommRelayCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelayCommandStatusMT:
      return extxml_uci::type::CommRelayCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommRelayCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelaySettingsCommandMDT:
      return extxml_uci::type::CommRelaySettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::CommRelaySettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelaySettingsCommandMT:
      return extxml_uci::type::CommRelaySettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::CommRelaySettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelaySettingsCommandStatusMDT:
      return extxml_uci::type::CommRelaySettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommRelaySettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelaySettingsCommandStatusMT:
      return extxml_uci::type::CommRelaySettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommRelaySettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelayTaskBaseType:
      return extxml_uci::type::CommRelayTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::CommRelayTaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commRelayTaskType:
      return extxml_uci::type::CommRelayTaskType::deserialize(propTree, dynamic_cast<uci::type::CommRelayTaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commScheduleAllocationID_Type:
      return extxml_uci::type::CommScheduleAllocationID_Type::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAllocationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commScheduleAllocationMT:
      return extxml_uci::type::CommScheduleAllocationMT::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAllocationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commScheduleAllocationUpdateRequestMDT:
      return extxml_uci::type::CommScheduleAllocationUpdateRequestMDT::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAllocationUpdateRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commScheduleAllocationUpdateRequestMT:
      return extxml_uci::type::CommScheduleAllocationUpdateRequestMT::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAllocationUpdateRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commScheduleAllocationUpdateRequestStatusMDT:
      return extxml_uci::type::CommScheduleAllocationUpdateRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAllocationUpdateRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commScheduleAllocationUpdateRequestStatusMT:
      return extxml_uci::type::CommScheduleAllocationUpdateRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAllocationUpdateRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commScheduleAvailabilityID_Type:
      return extxml_uci::type::CommScheduleAvailabilityID_Type::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAvailabilityID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commScheduleAvailabilityMT:
      return extxml_uci::type::CommScheduleAvailabilityMT::deserialize(propTree, dynamic_cast<uci::type::CommScheduleAvailabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commSchedulingRequestMDT:
      return extxml_uci::type::CommSchedulingRequestMDT::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commSchedulingRequestMT:
      return extxml_uci::type::CommSchedulingRequestMT::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commSchedulingRequestStatusMDT:
      return extxml_uci::type::CommSchedulingRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commSchedulingRequestStatusMT:
      return extxml_uci::type::CommSchedulingRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commSchedulingRequirementID_Type:
      return extxml_uci::type::CommSchedulingRequirementID_Type::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingRequirementID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commSchedulingRequirementMT:
      return extxml_uci::type::CommSchedulingRequirementMT::deserialize(propTree, dynamic_cast<uci::type::CommSchedulingRequirementMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commSINCGARS_CommWaveformActivityCommandType:
      return extxml_uci::type::CommSINCGARS_CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommSINCGARS_CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commSINCGARS_CommWaveformActivityType:
      return extxml_uci::type::CommSINCGARS_CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommSINCGARS_CommWaveformActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commSINCGARS_CommWaveformCapabilityCommandType:
      return extxml_uci::type::CommSINCGARS_CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommSINCGARS_CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commStarlinkCommWaveformActivityCommandType:
      return extxml_uci::type::CommStarlinkCommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommStarlinkCommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commStarlinkCommWaveformActivityType:
      return extxml_uci::type::CommStarlinkCommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommStarlinkCommWaveformActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commStarlinkCommWaveformCapabilityCommandType:
      return extxml_uci::type::CommStarlinkCommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommStarlinkCommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commSystemID_Type:
      return extxml_uci::type::CommSystemID_Type::deserialize(propTree, dynamic_cast<uci::type::CommSystemID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commSystemMT:
      return extxml_uci::type::CommSystemMT::deserialize(propTree, dynamic_cast<uci::type::CommSystemMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalActivityCommandType:
      return extxml_uci::type::CommTerminalActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalActivityMT:
      return extxml_uci::type::CommTerminalActivityMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalActivityType:
      return extxml_uci::type::CommTerminalActivityType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalCapabilityCommandType:
      return extxml_uci::type::CommTerminalCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalCapabilityMDT:
      return extxml_uci::type::CommTerminalCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalCapabilityMT:
      return extxml_uci::type::CommTerminalCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalCapabilityStatusMDT:
      return extxml_uci::type::CommTerminalCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalCapabilityStatusMT:
      return extxml_uci::type::CommTerminalCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalCapabilityStatusType:
      return extxml_uci::type::CommTerminalCapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCapabilityStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalCapabilityType:
      return extxml_uci::type::CommTerminalCapabilityType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalCommandMT:
      return extxml_uci::type::CommTerminalCommandMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalCommandStatusMDT:
      return extxml_uci::type::CommTerminalCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalCommandStatusMT:
      return extxml_uci::type::CommTerminalCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalPlanActivationCommandMDT:
      return extxml_uci::type::CommTerminalPlanActivationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanActivationCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalPlanActivationCommandMT:
      return extxml_uci::type::CommTerminalPlanActivationCommandMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanActivationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalPlanActivationCommandStatusMDT:
      return extxml_uci::type::CommTerminalPlanActivationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanActivationCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalPlanActivationCommandStatusMT:
      return extxml_uci::type::CommTerminalPlanActivationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanActivationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalPlanActivationStatusMT:
      return extxml_uci::type::CommTerminalPlanActivationStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanActivationStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalPlanID_Type:
      return extxml_uci::type::CommTerminalPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalPlanMT:
      return extxml_uci::type::CommTerminalPlanMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalPlanOverrideRequestMT:
      return extxml_uci::type::CommTerminalPlanOverrideRequestMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanOverrideRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalPlanOverrideRequestStatusMDT:
      return extxml_uci::type::CommTerminalPlanOverrideRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanOverrideRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalPlanOverrideRequestStatusMT:
      return extxml_uci::type::CommTerminalPlanOverrideRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanOverrideRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalPlanOverrideRequestType:
      return extxml_uci::type::CommTerminalPlanOverrideRequestType::deserialize(propTree, dynamic_cast<uci::type::CommTerminalPlanOverrideRequestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalSettingsCommandMDT:
      return extxml_uci::type::CommTerminalSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalSettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalSettingsCommandMT:
      return extxml_uci::type::CommTerminalSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalSettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalSettingsCommandStatusMDT:
      return extxml_uci::type::CommTerminalSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commTerminalSettingsCommandStatusMT:
      return extxml_uci::type::CommTerminalSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommTerminalSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commUHF_SATCOM_CommWaveformActivityCommandType:
      return extxml_uci::type::CommUHF_SATCOM_CommWaveformActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommUHF_SATCOM_CommWaveformActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commUHF_SATCOM_CommWaveformActivityType:
      return extxml_uci::type::CommUHF_SATCOM_CommWaveformActivityType::deserialize(propTree, dynamic_cast<uci::type::CommUHF_SATCOM_CommWaveformActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commUHF_SATCOM_CommWaveformCapabilityCommandType:
      return extxml_uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::CommUHF_SATCOM_CommWaveformCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commUserIO_ID_Type:
      return extxml_uci::type::CommUserIO_ID_Type::deserialize(propTree, dynamic_cast<uci::type::CommUserIO_ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commUserLinkID_Type:
      return extxml_uci::type::CommUserLinkID_Type::deserialize(propTree, dynamic_cast<uci::type::CommUserLinkID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commUtilizationRequestMDT:
      return extxml_uci::type::CommUtilizationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::CommUtilizationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commUtilizationRequestMT:
      return extxml_uci::type::CommUtilizationRequestMT::deserialize(propTree, dynamic_cast<uci::type::CommUtilizationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commUtilizationRequestStatusMDT:
      return extxml_uci::type::CommUtilizationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CommUtilizationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commUtilizationRequestStatusMT:
      return extxml_uci::type::CommUtilizationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::CommUtilizationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commWaveformActivityCommandPET:
      return extxml_uci::type::CommWaveformActivityCommandPET::deserialize(propTree, dynamic_cast<uci::type::CommWaveformActivityCommandPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commWaveformActivityPET:
      return extxml_uci::type::CommWaveformActivityPET::deserialize(propTree, dynamic_cast<uci::type::CommWaveformActivityPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::commWaveformCapabilityCommandPET:
      return extxml_uci::type::CommWaveformCapabilityCommandPET::deserialize(propTree, dynamic_cast<uci::type::CommWaveformCapabilityCommandPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::completedRequirementMetricsType:
      return extxml_uci::type::CompletedRequirementMetricsType::deserialize(propTree, dynamic_cast<uci::type::CompletedRequirementMetricsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentConfigurationDataRequestMDT:
      return extxml_uci::type::ComponentConfigurationDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationDataRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentConfigurationDataRequestMT:
      return extxml_uci::type::ComponentConfigurationDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationDataRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentConfigurationDataRequestStatusMDT:
      return extxml_uci::type::ComponentConfigurationDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentConfigurationDataRequestStatusMT:
      return extxml_uci::type::ComponentConfigurationDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationDataRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentConfigurationID_Type:
      return extxml_uci::type::ComponentConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentConfigurationMT:
      return extxml_uci::type::ComponentConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentConfigurationPET:
      return extxml_uci::type::ComponentConfigurationPET::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentConfigurationTreeType:
      return extxml_uci::type::ComponentConfigurationTreeType::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationTreeType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentConfigurationType:
      return extxml_uci::type::ComponentConfigurationType::deserialize(propTree, dynamic_cast<uci::type::ComponentConfigurationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentDetailedStatusInfoType:
      return extxml_uci::type::ComponentDetailedStatusInfoType::deserialize(propTree, dynamic_cast<uci::type::ComponentDetailedStatusInfoType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentDetailedStatusType:
      return extxml_uci::type::ComponentDetailedStatusType::deserialize(propTree, dynamic_cast<uci::type::ComponentDetailedStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentElementID_Type:
      return extxml_uci::type::ComponentElementID_Type::deserialize(propTree, dynamic_cast<uci::type::ComponentElementID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentExtendedStatusPET:
      return extxml_uci::type::ComponentExtendedStatusPET::deserialize(propTree, dynamic_cast<uci::type::ComponentExtendedStatusPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentID_Type:
      return extxml_uci::type::ComponentID_Type::deserialize(propTree, dynamic_cast<uci::type::ComponentID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentSettingsCommandMDT:
      return extxml_uci::type::ComponentSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ComponentSettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentSettingsCommandMT:
      return extxml_uci::type::ComponentSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::ComponentSettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentSettingsCommandStatusMDT:
      return extxml_uci::type::ComponentSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ComponentSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentSettingsCommandStatusMT:
      return extxml_uci::type::ComponentSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ComponentSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentStatusDataRequestMDT:
      return extxml_uci::type::ComponentStatusDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ComponentStatusDataRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentStatusDataRequestMT:
      return extxml_uci::type::ComponentStatusDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::ComponentStatusDataRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentStatusDataRequestStatusMDT:
      return extxml_uci::type::ComponentStatusDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ComponentStatusDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentStatusDataRequestStatusMT:
      return extxml_uci::type::ComponentStatusDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ComponentStatusDataRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentStatusMT:
      return extxml_uci::type::ComponentStatusMT::deserialize(propTree, dynamic_cast<uci::type::ComponentStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::componentTemperatureType:
      return extxml_uci::type::ComponentTemperatureType::deserialize(propTree, dynamic_cast<uci::type::ComponentTemperatureType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::compressionRatioSettingsType:
      return extxml_uci::type::CompressionRatioSettingsType::deserialize(propTree, dynamic_cast<uci::type::CompressionRatioSettingsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::constrainingPlanPartsType:
      return extxml_uci::type::ConstrainingPlanPartsType::deserialize(propTree, dynamic_cast<uci::type::ConstrainingPlanPartsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::controlInterfacesCommandMDT:
      return extxml_uci::type::ControlInterfacesCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ControlInterfacesCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::controlInterfacesCommandMT:
      return extxml_uci::type::ControlInterfacesCommandMT::deserialize(propTree, dynamic_cast<uci::type::ControlInterfacesCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::controlInterfacesCommandStatusMDT:
      return extxml_uci::type::ControlInterfacesCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ControlInterfacesCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::controlInterfacesCommandStatusMT:
      return extxml_uci::type::ControlInterfacesCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ControlInterfacesCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::controlRequestMDT:
      return extxml_uci::type::ControlRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ControlRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::controlRequestMT:
      return extxml_uci::type::ControlRequestMT::deserialize(propTree, dynamic_cast<uci::type::ControlRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::controlRequestStatusMDT:
      return extxml_uci::type::ControlRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ControlRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::controlRequestStatusMT:
      return extxml_uci::type::ControlRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ControlRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::controlSourcesCommandMDT:
      return extxml_uci::type::ControlSourcesCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ControlSourcesCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::controlSourcesCommandMT:
      return extxml_uci::type::ControlSourcesCommandMT::deserialize(propTree, dynamic_cast<uci::type::ControlSourcesCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::controlSourcesCommandStatusMDT:
      return extxml_uci::type::ControlSourcesCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ControlSourcesCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::controlSourcesCommandStatusMT:
      return extxml_uci::type::ControlSourcesCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ControlSourcesCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::controlStatusMT:
      return extxml_uci::type::ControlStatusMT::deserialize(propTree, dynamic_cast<uci::type::ControlStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::coordinatedRequirementSetID_Type:
      return extxml_uci::type::CoordinatedRequirementSetID_Type::deserialize(propTree, dynamic_cast<uci::type::CoordinatedRequirementSetID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::coordinatedRequirementSetMT:
      return extxml_uci::type::CoordinatedRequirementSetMT::deserialize(propTree, dynamic_cast<uci::type::CoordinatedRequirementSetMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::coordinatedRequirementSetStatusMT:
      return extxml_uci::type::CoordinatedRequirementSetStatusMT::deserialize(propTree, dynamic_cast<uci::type::CoordinatedRequirementSetStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cornerPointImageRegionOfInterestType:
      return extxml_uci::type::CornerPointImageRegionOfInterestType::deserialize(propTree, dynamic_cast<uci::type::CornerPointImageRegionOfInterestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::correlatedEntityID_Type:
      return extxml_uci::type::CorrelatedEntityID_Type::deserialize(propTree, dynamic_cast<uci::type::CorrelatedEntityID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::counterSpaceActivityMT:
      return extxml_uci::type::CounterSpaceActivityMT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::counterSpaceCapabilityMDT:
      return extxml_uci::type::CounterSpaceCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::counterSpaceCapabilityMT:
      return extxml_uci::type::CounterSpaceCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::counterSpaceCapabilityStatusMDT:
      return extxml_uci::type::CounterSpaceCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::counterSpaceCapabilityStatusMT:
      return extxml_uci::type::CounterSpaceCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::counterSpaceDeconflictionID_Type:
      return extxml_uci::type::CounterSpaceDeconflictionID_Type::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceDeconflictionID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::counterSpaceDeconflictionMDT:
      return extxml_uci::type::CounterSpaceDeconflictionMDT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceDeconflictionMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::counterSpaceDeconflictionMT:
      return extxml_uci::type::CounterSpaceDeconflictionMT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceDeconflictionMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::counterSpaceReportID_Type:
      return extxml_uci::type::CounterSpaceReportID_Type::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::counterSpaceReportMT:
      return extxml_uci::type::CounterSpaceReportMT::deserialize(propTree, dynamic_cast<uci::type::CounterSpaceReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cryptoCommandMT:
      return extxml_uci::type::CryptoCommandMT::deserialize(propTree, dynamic_cast<uci::type::CryptoCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cryptoCommandStatusMDT:
      return extxml_uci::type::CryptoCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::CryptoCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cryptoCommandStatusMT:
      return extxml_uci::type::CryptoCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::CryptoCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cryptoCommandType:
      return extxml_uci::type::CryptoCommandType::deserialize(propTree, dynamic_cast<uci::type::CryptoCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cryptoPortID_Type:
      return extxml_uci::type::CryptoPortID_Type::deserialize(propTree, dynamic_cast<uci::type::CryptoPortID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cryptoSlotGroupID_Type:
      return extxml_uci::type::CryptoSlotGroupID_Type::deserialize(propTree, dynamic_cast<uci::type::CryptoSlotGroupID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cryptoStatusMT:
      return extxml_uci::type::CryptoStatusMT::deserialize(propTree, dynamic_cast<uci::type::CryptoStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cryptoStatusType:
      return extxml_uci::type::CryptoStatusType::deserialize(propTree, dynamic_cast<uci::type::CryptoStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cS_ActivityDetailType:
      return extxml_uci::type::CS_ActivityDetailType::deserialize(propTree, dynamic_cast<uci::type::CS_ActivityDetailType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cS_ActivityType:
      return extxml_uci::type::CS_ActivityType::deserialize(propTree, dynamic_cast<uci::type::CS_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cS_AssessmentType:
      return extxml_uci::type::CS_AssessmentType::deserialize(propTree, dynamic_cast<uci::type::CS_AssessmentType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::cS_CapabilityType:
      return extxml_uci::type::CS_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::CS_CapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageAssessmentDetailType:
      return extxml_uci::type::DamageAssessmentDetailType::deserialize(propTree, dynamic_cast<uci::type::DamageAssessmentDetailType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageAssessmentID_Type:
      return extxml_uci::type::DamageAssessmentID_Type::deserialize(propTree, dynamic_cast<uci::type::DamageAssessmentID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageAssessmentMT:
      return extxml_uci::type::DamageAssessmentMT::deserialize(propTree, dynamic_cast<uci::type::DamageAssessmentMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageAssessmentRequestMDT:
      return extxml_uci::type::DamageAssessmentRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DamageAssessmentRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageAssessmentRequestMT:
      return extxml_uci::type::DamageAssessmentRequestMT::deserialize(propTree, dynamic_cast<uci::type::DamageAssessmentRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageAssessmentRequestStatusMDT:
      return extxml_uci::type::DamageAssessmentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DamageAssessmentRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageAssessmentRequestStatusMT:
      return extxml_uci::type::DamageAssessmentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DamageAssessmentRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damagedFunctionType:
      return extxml_uci::type::DamagedFunctionType::deserialize(propTree, dynamic_cast<uci::type::DamagedFunctionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageEstimateID_Type:
      return extxml_uci::type::DamageEstimateID_Type::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageEstimateMT:
      return extxml_uci::type::DamageEstimateMT::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageEstimateRequestMDT:
      return extxml_uci::type::DamageEstimateRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageEstimateRequestMT:
      return extxml_uci::type::DamageEstimateRequestMT::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageEstimateRequestStatusMDT:
      return extxml_uci::type::DamageEstimateRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageEstimateRequestStatusMT:
      return extxml_uci::type::DamageEstimateRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DamageEstimateRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageInformationSourceType:
      return extxml_uci::type::DamageInformationSourceType::deserialize(propTree, dynamic_cast<uci::type::DamageInformationSourceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageInformationWeatherSourceType:
      return extxml_uci::type::DamageInformationWeatherSourceType::deserialize(propTree, dynamic_cast<uci::type::DamageInformationWeatherSourceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageReportDetailType:
      return extxml_uci::type::DamageReportDetailType::deserialize(propTree, dynamic_cast<uci::type::DamageReportDetailType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageReportID_Type:
      return extxml_uci::type::DamageReportID_Type::deserialize(propTree, dynamic_cast<uci::type::DamageReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageReportMT:
      return extxml_uci::type::DamageReportMT::deserialize(propTree, dynamic_cast<uci::type::DamageReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageSummaryID_Type:
      return extxml_uci::type::DamageSummaryID_Type::deserialize(propTree, dynamic_cast<uci::type::DamageSummaryID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::damageSummaryMT:
      return extxml_uci::type::DamageSummaryMT::deserialize(propTree, dynamic_cast<uci::type::DamageSummaryMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataDeleteRequestMDT:
      return extxml_uci::type::DataDeleteRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DataDeleteRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataDeleteRequestMT:
      return extxml_uci::type::DataDeleteRequestMT::deserialize(propTree, dynamic_cast<uci::type::DataDeleteRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataDeleteRequestStatusMDT:
      return extxml_uci::type::DataDeleteRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataDeleteRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataDeleteRequestStatusMT:
      return extxml_uci::type::DataDeleteRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataDeleteRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataDestinationID_Type:
      return extxml_uci::type::DataDestinationID_Type::deserialize(propTree, dynamic_cast<uci::type::DataDestinationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataLinkIdentifierPET:
      return extxml_uci::type::DataLinkIdentifierPET::deserialize(propTree, dynamic_cast<uci::type::DataLinkIdentifierPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataLinkNativeFilter_NetworkLinkType:
      return extxml_uci::type::DataLinkNativeFilter_NetworkLinkType::deserialize(propTree, dynamic_cast<uci::type::DataLinkNativeFilter_NetworkLinkType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataLinkNativeFilterPET:
      return extxml_uci::type::DataLinkNativeFilterPET::deserialize(propTree, dynamic_cast<uci::type::DataLinkNativeFilterPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataLinkNativeInfoPET:
      return extxml_uci::type::DataLinkNativeInfoPET::deserialize(propTree, dynamic_cast<uci::type::DataLinkNativeInfoPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataManagementRequestMDT:
      return extxml_uci::type::DataManagementRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DataManagementRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataManagementRequestMT:
      return extxml_uci::type::DataManagementRequestMT::deserialize(propTree, dynamic_cast<uci::type::DataManagementRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataManagementRequestStatusMDT:
      return extxml_uci::type::DataManagementRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataManagementRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataManagementRequestStatusMT:
      return extxml_uci::type::DataManagementRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataManagementRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataPlanActivationCommandMDT:
      return extxml_uci::type::DataPlanActivationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::DataPlanActivationCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataPlanActivationCommandMT:
      return extxml_uci::type::DataPlanActivationCommandMT::deserialize(propTree, dynamic_cast<uci::type::DataPlanActivationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataPlanActivationCommandStatusMDT:
      return extxml_uci::type::DataPlanActivationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataPlanActivationCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataPlanActivationCommandStatusMT:
      return extxml_uci::type::DataPlanActivationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataPlanActivationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataPlanActivationStatusMT:
      return extxml_uci::type::DataPlanActivationStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataPlanActivationStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataPlanID_Type:
      return extxml_uci::type::DataPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::DataPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataPlanMT:
      return extxml_uci::type::DataPlanMT::deserialize(propTree, dynamic_cast<uci::type::DataPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataPlanOverrideRequestMT:
      return extxml_uci::type::DataPlanOverrideRequestMT::deserialize(propTree, dynamic_cast<uci::type::DataPlanOverrideRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataPlanOverrideRequestStatusMDT:
      return extxml_uci::type::DataPlanOverrideRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataPlanOverrideRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataPlanOverrideRequestStatusMT:
      return extxml_uci::type::DataPlanOverrideRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataPlanOverrideRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataPlanOverrideRequestType:
      return extxml_uci::type::DataPlanOverrideRequestType::deserialize(propTree, dynamic_cast<uci::type::DataPlanOverrideRequestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataRateDataType:
      return extxml_uci::type::DataRateDataType::deserialize(propTree, dynamic_cast<uci::type::DataRateDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataRecordBaseType:
      return extxml_uci::type::DataRecordBaseType::deserialize(propTree, dynamic_cast<uci::type::DataRecordBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataRecordInstanceID_Type:
      return extxml_uci::type::DataRecordInstanceID_Type::deserialize(propTree, dynamic_cast<uci::type::DataRecordInstanceID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataRecordListBaseType:
      return extxml_uci::type::DataRecordListBaseType::deserialize(propTree, dynamic_cast<uci::type::DataRecordListBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataRecordListID_Type:
      return extxml_uci::type::DataRecordListID_Type::deserialize(propTree, dynamic_cast<uci::type::DataRecordListID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataRecordListManagementRequestMDT:
      return extxml_uci::type::DataRecordListManagementRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DataRecordListManagementRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataRecordListManagementRequestMT:
      return extxml_uci::type::DataRecordListManagementRequestMT::deserialize(propTree, dynamic_cast<uci::type::DataRecordListManagementRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataRecordListManagementRequestStatusMDT:
      return extxml_uci::type::DataRecordListManagementRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataRecordListManagementRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataRecordListManagementRequestStatusMT:
      return extxml_uci::type::DataRecordListManagementRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataRecordListManagementRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataRecordManagementRequestMDT:
      return extxml_uci::type::DataRecordManagementRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DataRecordManagementRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataRecordManagementRequestMT:
      return extxml_uci::type::DataRecordManagementRequestMT::deserialize(propTree, dynamic_cast<uci::type::DataRecordManagementRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataRecordManagementRequestStatusMDT:
      return extxml_uci::type::DataRecordManagementRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataRecordManagementRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataRecordManagementRequestStatusMT:
      return extxml_uci::type::DataRecordManagementRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataRecordManagementRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataStorageUtilizationRequestMDT:
      return extxml_uci::type::DataStorageUtilizationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DataStorageUtilizationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataStorageUtilizationRequestMT:
      return extxml_uci::type::DataStorageUtilizationRequestMT::deserialize(propTree, dynamic_cast<uci::type::DataStorageUtilizationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataStorageUtilizationRequestStatusMDT:
      return extxml_uci::type::DataStorageUtilizationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataStorageUtilizationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataStorageUtilizationRequestStatusMT:
      return extxml_uci::type::DataStorageUtilizationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataStorageUtilizationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataUpdateRequestMDT:
      return extxml_uci::type::DataUpdateRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DataUpdateRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataUpdateRequestMT:
      return extxml_uci::type::DataUpdateRequestMT::deserialize(propTree, dynamic_cast<uci::type::DataUpdateRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataUpdateRequestStatusMDT:
      return extxml_uci::type::DataUpdateRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DataUpdateRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dataUpdateRequestStatusMT:
      return extxml_uci::type::DataUpdateRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DataUpdateRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::deploymentDetectionType:
      return extxml_uci::type::DeploymentDetectionType::deserialize(propTree, dynamic_cast<uci::type::DeploymentDetectionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::designationID_Type:
      return extxml_uci::type::DesignationID_Type::deserialize(propTree, dynamic_cast<uci::type::DesignationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::designationMT:
      return extxml_uci::type::DesignationMT::deserialize(propTree, dynamic_cast<uci::type::DesignationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::designationRequestMDT:
      return extxml_uci::type::DesignationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DesignationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::designationRequestMT:
      return extxml_uci::type::DesignationRequestMT::deserialize(propTree, dynamic_cast<uci::type::DesignationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::designationRequestStatusMDT:
      return extxml_uci::type::DesignationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DesignationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::designationRequestStatusMT:
      return extxml_uci::type::DesignationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DesignationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::discreteDataLinkIdentifierType:
      return extxml_uci::type::DiscreteDataLinkIdentifierType::deserialize(propTree, dynamic_cast<uci::type::DiscreteDataLinkIdentifierType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::discreteStatusMT:
      return extxml_uci::type::DiscreteStatusMT::deserialize(propTree, dynamic_cast<uci::type::DiscreteStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::disseminationConstrainedSubplanType:
      return extxml_uci::type::DisseminationConstrainedSubplanType::deserialize(propTree, dynamic_cast<uci::type::DisseminationConstrainedSubplanType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::disseminationSubplanType:
      return extxml_uci::type::DisseminationSubplanType::deserialize(propTree, dynamic_cast<uci::type::DisseminationSubplanType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dLZ_ID_Type:
      return extxml_uci::type::DLZ_ID_Type::deserialize(propTree, dynamic_cast<uci::type::DLZ_ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dLZ_MT:
      return extxml_uci::type::DLZ_MT::deserialize(propTree, dynamic_cast<uci::type::DLZ_MT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dLZ_RequestMDT:
      return extxml_uci::type::DLZ_RequestMDT::deserialize(propTree, dynamic_cast<uci::type::DLZ_RequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dLZ_RequestMT:
      return extxml_uci::type::DLZ_RequestMT::deserialize(propTree, dynamic_cast<uci::type::DLZ_RequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dLZ_RequestStatusMDT:
      return extxml_uci::type::DLZ_RequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DLZ_RequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dLZ_RequestStatusMT:
      return extxml_uci::type::DLZ_RequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DLZ_RequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_AchievabilityAssessmentRequestType:
      return extxml_uci::type::DMPI_AchievabilityAssessmentRequestType::deserialize(propTree, dynamic_cast<uci::type::DMPI_AchievabilityAssessmentRequestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_AchievabilityAssessmentType:
      return extxml_uci::type::DMPI_AchievabilityAssessmentType::deserialize(propTree, dynamic_cast<uci::type::DMPI_AchievabilityAssessmentType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_CancelCommandMDT:
      return extxml_uci::type::DMPI_CancelCommandMDT::deserialize(propTree, dynamic_cast<uci::type::DMPI_CancelCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_CancelCommandMT:
      return extxml_uci::type::DMPI_CancelCommandMT::deserialize(propTree, dynamic_cast<uci::type::DMPI_CancelCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_CancelCommandStatusMDT:
      return extxml_uci::type::DMPI_CancelCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DMPI_CancelCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_CancelCommandStatusMT:
      return extxml_uci::type::DMPI_CancelCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::DMPI_CancelCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_DesignationID_Type:
      return extxml_uci::type::DMPI_DesignationID_Type::deserialize(propTree, dynamic_cast<uci::type::DMPI_DesignationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_DesignationMDT:
      return extxml_uci::type::DMPI_DesignationMDT::deserialize(propTree, dynamic_cast<uci::type::DMPI_DesignationMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_DesignationMT:
      return extxml_uci::type::DMPI_DesignationMT::deserialize(propTree, dynamic_cast<uci::type::DMPI_DesignationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_DesignationRequestMDT:
      return extxml_uci::type::DMPI_DesignationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::DMPI_DesignationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_DesignationRequestMT:
      return extxml_uci::type::DMPI_DesignationRequestMT::deserialize(propTree, dynamic_cast<uci::type::DMPI_DesignationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_DesignationRequestStatusMDT:
      return extxml_uci::type::DMPI_DesignationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DMPI_DesignationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_DesignationRequestStatusMT:
      return extxml_uci::type::DMPI_DesignationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::DMPI_DesignationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_ID_Type:
      return extxml_uci::type::DMPI_ID_Type::deserialize(propTree, dynamic_cast<uci::type::DMPI_ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_MDT:
      return extxml_uci::type::DMPI_MDT::deserialize(propTree, dynamic_cast<uci::type::DMPI_MDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_MT:
      return extxml_uci::type::DMPI_MT::deserialize(propTree, dynamic_cast<uci::type::DMPI_MT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_PatternID_Type:
      return extxml_uci::type::DMPI_PatternID_Type::deserialize(propTree, dynamic_cast<uci::type::DMPI_PatternID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_PatternMDT:
      return extxml_uci::type::DMPI_PatternMDT::deserialize(propTree, dynamic_cast<uci::type::DMPI_PatternMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_PatternMT:
      return extxml_uci::type::DMPI_PatternMT::deserialize(propTree, dynamic_cast<uci::type::DMPI_PatternMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_PatternType:
      return extxml_uci::type::DMPI_PatternType::deserialize(propTree, dynamic_cast<uci::type::DMPI_PatternType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_RadialPatternType:
      return extxml_uci::type::DMPI_RadialPatternType::deserialize(propTree, dynamic_cast<uci::type::DMPI_RadialPatternType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_StatusMT:
      return extxml_uci::type::DMPI_StatusMT::deserialize(propTree, dynamic_cast<uci::type::DMPI_StatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dMPI_XbyY_PatternType:
      return extxml_uci::type::DMPI_XbyY_PatternType::deserialize(propTree, dynamic_cast<uci::type::DMPI_XbyY_PatternType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::doorCommandMT:
      return extxml_uci::type::DoorCommandMT::deserialize(propTree, dynamic_cast<uci::type::DoorCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::doorCommandStatusMDT:
      return extxml_uci::type::DoorCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::DoorCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::doorCommandStatusMT:
      return extxml_uci::type::DoorCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::DoorCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::doorCommandType:
      return extxml_uci::type::DoorCommandType::deserialize(propTree, dynamic_cast<uci::type::DoorCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::doorStatusMT:
      return extxml_uci::type::DoorStatusMT::deserialize(propTree, dynamic_cast<uci::type::DoorStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::doorStatusType:
      return extxml_uci::type::DoorStatusType::deserialize(propTree, dynamic_cast<uci::type::DoorStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dVR_ProcessingParametersType:
      return extxml_uci::type::DVR_ProcessingParametersType::deserialize(propTree, dynamic_cast<uci::type::DVR_ProcessingParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::dwellID_Type:
      return extxml_uci::type::DwellID_Type::deserialize(propTree, dynamic_cast<uci::type::DwellID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_ActivityCommandType:
      return extxml_uci::type::EA_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::EA_ActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_ActivityMT:
      return extxml_uci::type::EA_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::EA_ActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_ActivityType:
      return extxml_uci::type::EA_ActivityType::deserialize(propTree, dynamic_cast<uci::type::EA_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_CapabilityCommandType:
      return extxml_uci::type::EA_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::EA_CapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_CapabilityMDT:
      return extxml_uci::type::EA_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::EA_CapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_CapabilityMT:
      return extxml_uci::type::EA_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::EA_CapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_CapabilityStatusMDT:
      return extxml_uci::type::EA_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EA_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_CapabilityStatusMT:
      return extxml_uci::type::EA_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::EA_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_CapabilityType:
      return extxml_uci::type::EA_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::EA_CapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_CommandMT:
      return extxml_uci::type::EA_CommandMT::deserialize(propTree, dynamic_cast<uci::type::EA_CommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_CommandStatusMDT:
      return extxml_uci::type::EA_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EA_CommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_CommandStatusMT:
      return extxml_uci::type::EA_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::EA_CommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_ConsentRequestMT:
      return extxml_uci::type::EA_ConsentRequestMT::deserialize(propTree, dynamic_cast<uci::type::EA_ConsentRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_ConsentRequestStatusMDT:
      return extxml_uci::type::EA_ConsentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EA_ConsentRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_ConsentRequestStatusMT:
      return extxml_uci::type::EA_ConsentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::EA_ConsentRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_ConsentRequestType:
      return extxml_uci::type::EA_ConsentRequestType::deserialize(propTree, dynamic_cast<uci::type::EA_ConsentRequestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_SettingsCommandMDT:
      return extxml_uci::type::EA_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::EA_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_SettingsCommandMT:
      return extxml_uci::type::EA_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::EA_SettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_SettingsCommandStatusMDT:
      return extxml_uci::type::EA_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EA_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_SettingsCommandStatusMT:
      return extxml_uci::type::EA_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::EA_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eA_TechniqueIdentifierType:
      return extxml_uci::type::EA_TechniqueIdentifierType::deserialize(propTree, dynamic_cast<uci::type::EA_TechniqueIdentifierType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::earthOrientationParametersID_Type:
      return extxml_uci::type::EarthOrientationParametersID_Type::deserialize(propTree, dynamic_cast<uci::type::EarthOrientationParametersID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::earthOrientationParametersMT:
      return extxml_uci::type::EarthOrientationParametersMT::deserialize(propTree, dynamic_cast<uci::type::EarthOrientationParametersMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eCEF_UnitVectorType:
      return extxml_uci::type::ECEF_UnitVectorType::deserialize(propTree, dynamic_cast<uci::type::ECEF_UnitVectorType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eEI_ID_Type:
      return extxml_uci::type::EEI_ID_Type::deserialize(propTree, dynamic_cast<uci::type::EEI_ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eEI_MDT:
      return extxml_uci::type::EEI_MDT::deserialize(propTree, dynamic_cast<uci::type::EEI_MDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eEI_MT:
      return extxml_uci::type::EEI_MT::deserialize(propTree, dynamic_cast<uci::type::EEI_MT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectActivityMT:
      return extxml_uci::type::EffectActivityMT::deserialize(propTree, dynamic_cast<uci::type::EffectActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectActivityType:
      return extxml_uci::type::EffectActivityType::deserialize(propTree, dynamic_cast<uci::type::EffectActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectAllocationType:
      return extxml_uci::type::EffectAllocationType::deserialize(propTree, dynamic_cast<uci::type::EffectAllocationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectCancelCommandMDT:
      return extxml_uci::type::EffectCancelCommandMDT::deserialize(propTree, dynamic_cast<uci::type::EffectCancelCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectCancelCommandMT:
      return extxml_uci::type::EffectCancelCommandMT::deserialize(propTree, dynamic_cast<uci::type::EffectCancelCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectCancelCommandStatusMDT:
      return extxml_uci::type::EffectCancelCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectCancelCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectCancelCommandStatusMT:
      return extxml_uci::type::EffectCancelCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectCancelCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectCapabilityCommandType:
      return extxml_uci::type::EffectCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::EffectCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectCapabilityMDT:
      return extxml_uci::type::EffectCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::EffectCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectCapabilityMT:
      return extxml_uci::type::EffectCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::EffectCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectCapabilityStatusMDT:
      return extxml_uci::type::EffectCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectCapabilityStatusMT:
      return extxml_uci::type::EffectCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectCapabilityType:
      return extxml_uci::type::EffectCapabilityType::deserialize(propTree, dynamic_cast<uci::type::EffectCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectCommandMT:
      return extxml_uci::type::EffectCommandMT::deserialize(propTree, dynamic_cast<uci::type::EffectCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectCommandStatusMDT:
      return extxml_uci::type::EffectCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectCommandStatusMT:
      return extxml_uci::type::EffectCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectExecutionApprovalStatusMDT:
      return extxml_uci::type::EffectExecutionApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectExecutionApprovalStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectExecutionApprovalStatusMT:
      return extxml_uci::type::EffectExecutionApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectExecutionApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectID_Type:
      return extxml_uci::type::EffectID_Type::deserialize(propTree, dynamic_cast<uci::type::EffectID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectMT:
      return extxml_uci::type::EffectMT::deserialize(propTree, dynamic_cast<uci::type::EffectMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanApprovalStatusMT:
      return extxml_uci::type::EffectPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanCommandID_Type:
      return extxml_uci::type::EffectPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::EffectPlanCommandID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanCommandMT:
      return extxml_uci::type::EffectPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanCommandStatusMT:
      return extxml_uci::type::EffectPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanExecutionStatusMT:
      return extxml_uci::type::EffectPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanID_Type:
      return extxml_uci::type::EffectPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::EffectPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanInputsType:
      return extxml_uci::type::EffectPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanMT:
      return extxml_uci::type::EffectPlanMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanningResultType:
      return extxml_uci::type::EffectPlanningResultType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanningResultType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanningStatusMDT:
      return extxml_uci::type::EffectPlanningStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanningStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanningStatusMT:
      return extxml_uci::type::EffectPlanningStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanningStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanProcessDescriptionType:
      return extxml_uci::type::EffectPlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanStatusMT:
      return extxml_uci::type::EffectPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanValidationCommandMDT:
      return extxml_uci::type::EffectPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanValidationCommandMT:
      return extxml_uci::type::EffectPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanValidationCommandStatusMDT:
      return extxml_uci::type::EffectPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanValidationCommandStatusMT:
      return extxml_uci::type::EffectPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanValidationID_Type:
      return extxml_uci::type::EffectPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::EffectPlanValidationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanValidationInputsType:
      return extxml_uci::type::EffectPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::EffectPlanValidationInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectPlanValidationMT:
      return extxml_uci::type::EffectPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::EffectPlanValidationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectStatusMDT:
      return extxml_uci::type::EffectStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EffectStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::effectStatusMT:
      return extxml_uci::type::EffectStatusMT::deserialize(propTree, dynamic_cast<uci::type::EffectStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::elevationRequestMDT:
      return extxml_uci::type::ElevationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ElevationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::elevationRequestMT:
      return extxml_uci::type::ElevationRequestMT::deserialize(propTree, dynamic_cast<uci::type::ElevationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::elevationRequestStatusMDT:
      return extxml_uci::type::ElevationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ElevationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::elevationRequestStatusMT:
      return extxml_uci::type::ElevationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ElevationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::elevationVisibilityRequestMDT:
      return extxml_uci::type::ElevationVisibilityRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ElevationVisibilityRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::elevationVisibilityRequestMT:
      return extxml_uci::type::ElevationVisibilityRequestMT::deserialize(propTree, dynamic_cast<uci::type::ElevationVisibilityRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::elevationVisibilityRequestStatusMDT:
      return extxml_uci::type::ElevationVisibilityRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ElevationVisibilityRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::elevationVisibilityRequestStatusMT:
      return extxml_uci::type::ElevationVisibilityRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ElevationVisibilityRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::ellipseType:
      return extxml_uci::type::EllipseType::deserialize(propTree, dynamic_cast<uci::type::EllipseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::emergencyReferenceOpPointType:
      return extxml_uci::type::EmergencyReferenceOpPointType::deserialize(propTree, dynamic_cast<uci::type::EmergencyReferenceOpPointType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::emitterFixedPositionType:
      return extxml_uci::type::EmitterFixedPositionType::deserialize(propTree, dynamic_cast<uci::type::EmitterFixedPositionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::enduranceBaseType:
      return extxml_uci::type::EnduranceBaseType::deserialize(propTree, dynamic_cast<uci::type::EnduranceBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::enduranceType:
      return extxml_uci::type::EnduranceType::deserialize(propTree, dynamic_cast<uci::type::EnduranceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityConfirmationMT:
      return extxml_uci::type::EntityConfirmationMT::deserialize(propTree, dynamic_cast<uci::type::EntityConfirmationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityConfirmationRequestMDT:
      return extxml_uci::type::EntityConfirmationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::EntityConfirmationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityConfirmationRequestMT:
      return extxml_uci::type::EntityConfirmationRequestMT::deserialize(propTree, dynamic_cast<uci::type::EntityConfirmationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityConfirmationRequestStatusMDT:
      return extxml_uci::type::EntityConfirmationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EntityConfirmationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityConfirmationRequestStatusMT:
      return extxml_uci::type::EntityConfirmationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::EntityConfirmationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityEphemerisRequestParametersType:
      return extxml_uci::type::EntityEphemerisRequestParametersType::deserialize(propTree, dynamic_cast<uci::type::EntityEphemerisRequestParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityID_Type:
      return extxml_uci::type::EntityID_Type::deserialize(propTree, dynamic_cast<uci::type::EntityID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityIdentityType:
      return extxml_uci::type::EntityIdentityType::deserialize(propTree, dynamic_cast<uci::type::EntityIdentityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityLostMT:
      return extxml_uci::type::EntityLostMT::deserialize(propTree, dynamic_cast<uci::type::EntityLostMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityManagementRequestMDT:
      return extxml_uci::type::EntityManagementRequestMDT::deserialize(propTree, dynamic_cast<uci::type::EntityManagementRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityManagementRequestMT:
      return extxml_uci::type::EntityManagementRequestMT::deserialize(propTree, dynamic_cast<uci::type::EntityManagementRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityManagementRequestStatusMDT:
      return extxml_uci::type::EntityManagementRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EntityManagementRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityManagementRequestStatusMT:
      return extxml_uci::type::EntityManagementRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::EntityManagementRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityMetadataMT:
      return extxml_uci::type::EntityMetadataMT::deserialize(propTree, dynamic_cast<uci::type::EntityMetadataMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityMetadataPET:
      return extxml_uci::type::EntityMetadataPET::deserialize(propTree, dynamic_cast<uci::type::EntityMetadataPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityMT:
      return extxml_uci::type::EntityMT::deserialize(propTree, dynamic_cast<uci::type::EntityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityNotificationMDT:
      return extxml_uci::type::EntityNotificationMDT::deserialize(propTree, dynamic_cast<uci::type::EntityNotificationMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityNotificationMT:
      return extxml_uci::type::EntityNotificationMT::deserialize(propTree, dynamic_cast<uci::type::EntityNotificationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalCSO_ID_Type:
      return extxml_uci::type::EntityOrbitalCSO_ID_Type::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalCSO_ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalCSO_MT:
      return extxml_uci::type::EntityOrbitalCSO_MT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalCSO_MT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalElementSetID_Type:
      return extxml_uci::type::EntityOrbitalElementSetID_Type::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalElementSetMDT:
      return extxml_uci::type::EntityOrbitalElementSetMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalElementSetMT:
      return extxml_uci::type::EntityOrbitalElementSetMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalElementSetRequestMDT:
      return extxml_uci::type::EntityOrbitalElementSetRequestMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalElementSetRequestMT:
      return extxml_uci::type::EntityOrbitalElementSetRequestMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalElementSetRequestStatusMDT:
      return extxml_uci::type::EntityOrbitalElementSetRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalElementSetRequestStatusMT:
      return extxml_uci::type::EntityOrbitalElementSetRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalElementSetType:
      return extxml_uci::type::EntityOrbitalElementSetType::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalElementSetType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalEphemerisID_Type:
      return extxml_uci::type::EntityOrbitalEphemerisID_Type::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalEphemerisMDT:
      return extxml_uci::type::EntityOrbitalEphemerisMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalEphemerisMT:
      return extxml_uci::type::EntityOrbitalEphemerisMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalEphemerisRequestMDT:
      return extxml_uci::type::EntityOrbitalEphemerisRequestMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalEphemerisRequestMT:
      return extxml_uci::type::EntityOrbitalEphemerisRequestMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalEphemerisRequestStatusMDT:
      return extxml_uci::type::EntityOrbitalEphemerisRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalEphemerisRequestStatusMT:
      return extxml_uci::type::EntityOrbitalEphemerisRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalEphemerisType:
      return extxml_uci::type::EntityOrbitalEphemerisType::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalEphemerisType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalManeuverMT:
      return extxml_uci::type::EntityOrbitalManeuverMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalManeuverMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalVCM_ID_Type:
      return extxml_uci::type::EntityOrbitalVCM_ID_Type::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalVCM_MDT:
      return extxml_uci::type::EntityOrbitalVCM_MDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_MDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalVCM_MT:
      return extxml_uci::type::EntityOrbitalVCM_MT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_MT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalVCM_RequestMDT:
      return extxml_uci::type::EntityOrbitalVCM_RequestMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_RequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalVCM_RequestMT:
      return extxml_uci::type::EntityOrbitalVCM_RequestMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_RequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalVCM_RequestStatusMDT:
      return extxml_uci::type::EntityOrbitalVCM_RequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_RequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalVCM_RequestStatusMT:
      return extxml_uci::type::EntityOrbitalVCM_RequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_RequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityOrbitalVCM_Type:
      return extxml_uci::type::EntityOrbitalVCM_Type::deserialize(propTree, dynamic_cast<uci::type::EntityOrbitalVCM_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::entityPropagationMT:
      return extxml_uci::type::EntityPropagationMT::deserialize(propTree, dynamic_cast<uci::type::EntityPropagationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_CorrelationRecordID_Type:
      return extxml_uci::type::EOB_CorrelationRecordID_Type::deserialize(propTree, dynamic_cast<uci::type::EOB_CorrelationRecordID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_CorrelationRecordMDT:
      return extxml_uci::type::EOB_CorrelationRecordMDT::deserialize(propTree, dynamic_cast<uci::type::EOB_CorrelationRecordMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_CorrelationRecordMT:
      return extxml_uci::type::EOB_CorrelationRecordMT::deserialize(propTree, dynamic_cast<uci::type::EOB_CorrelationRecordMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_EmitterID_Type:
      return extxml_uci::type::EOB_EmitterID_Type::deserialize(propTree, dynamic_cast<uci::type::EOB_EmitterID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_EmitterModeID_Type:
      return extxml_uci::type::EOB_EmitterModeID_Type::deserialize(propTree, dynamic_cast<uci::type::EOB_EmitterModeID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_EmitterModeType:
      return extxml_uci::type::EOB_EmitterModeType::deserialize(propTree, dynamic_cast<uci::type::EOB_EmitterModeType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_EmitterType:
      return extxml_uci::type::EOB_EmitterType::deserialize(propTree, dynamic_cast<uci::type::EOB_EmitterType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_EquipmentIdentityType:
      return extxml_uci::type::EOB_EquipmentIdentityType::deserialize(propTree, dynamic_cast<uci::type::EOB_EquipmentIdentityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_EquipmentRecordType:
      return extxml_uci::type::EOB_EquipmentRecordType::deserialize(propTree, dynamic_cast<uci::type::EOB_EquipmentRecordType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_EquipmentType:
      return extxml_uci::type::EOB_EquipmentType::deserialize(propTree, dynamic_cast<uci::type::EOB_EquipmentType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_FixedPositionType:
      return extxml_uci::type::EOB_FixedPositionType::deserialize(propTree, dynamic_cast<uci::type::EOB_FixedPositionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_IdentityBaseType:
      return extxml_uci::type::EOB_IdentityBaseType::deserialize(propTree, dynamic_cast<uci::type::EOB_IdentityBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_RecordID_Type:
      return extxml_uci::type::EOB_RecordID_Type::deserialize(propTree, dynamic_cast<uci::type::EOB_RecordID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_RecordMarkedType:
      return extxml_uci::type::EOB_RecordMarkedType::deserialize(propTree, dynamic_cast<uci::type::EOB_RecordMarkedType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_SignalType:
      return extxml_uci::type::EOB_SignalType::deserialize(propTree, dynamic_cast<uci::type::EOB_SignalType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_SiteIdentityType:
      return extxml_uci::type::EOB_SiteIdentityType::deserialize(propTree, dynamic_cast<uci::type::EOB_SiteIdentityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eOB_SitePIN_Type:
      return extxml_uci::type::EOB_SitePIN_Type::deserialize(propTree, dynamic_cast<uci::type::EOB_SitePIN_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_ActivityCommandType:
      return extxml_uci::type::ESM_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::ESM_ActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_ActivityMT:
      return extxml_uci::type::ESM_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::ESM_ActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_ActivityType:
      return extxml_uci::type::ESM_ActivityType::deserialize(propTree, dynamic_cast<uci::type::ESM_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_CapabilityCommandType:
      return extxml_uci::type::ESM_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_CapabilityMDT:
      return extxml_uci::type::ESM_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_CapabilityMT:
      return extxml_uci::type::ESM_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_CapabilityStatusMDT:
      return extxml_uci::type::ESM_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_CapabilityStatusMT:
      return extxml_uci::type::ESM_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_CapabilityType:
      return extxml_uci::type::ESM_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::ESM_CapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_CommandMT:
      return extxml_uci::type::ESM_CommandMT::deserialize(propTree, dynamic_cast<uci::type::ESM_CommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_CommandStatusMDT:
      return extxml_uci::type::ESM_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_CommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_CommandStatusMT:
      return extxml_uci::type::ESM_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ESM_CommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_ConsentRequestMT:
      return extxml_uci::type::ESM_ConsentRequestMT::deserialize(propTree, dynamic_cast<uci::type::ESM_ConsentRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_ConsentRequestStatusMDT:
      return extxml_uci::type::ESM_ConsentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_ConsentRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_ConsentRequestStatusMT:
      return extxml_uci::type::ESM_ConsentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ESM_ConsentRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_ConsentRequestType:
      return extxml_uci::type::ESM_ConsentRequestType::deserialize(propTree, dynamic_cast<uci::type::ESM_ConsentRequestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_SettingsCommandMDT:
      return extxml_uci::type::ESM_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_SettingsCommandMT:
      return extxml_uci::type::ESM_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::ESM_SettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_SettingsCommandStatusMDT:
      return extxml_uci::type::ESM_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ESM_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_SettingsCommandStatusMT:
      return extxml_uci::type::ESM_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ESM_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_TaskBaseType:
      return extxml_uci::type::ESM_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::ESM_TaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eSM_TaskType:
      return extxml_uci::type::ESM_TaskType::deserialize(propTree, dynamic_cast<uci::type::ESM_TaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eW_ConfigurationID_Type:
      return extxml_uci::type::EW_ConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::EW_ConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eW_ConfigurationMT:
      return extxml_uci::type::EW_ConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::EW_ConfigurationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eW_CoordinationDataLinkIdentifierType:
      return extxml_uci::type::EW_CoordinationDataLinkIdentifierType::deserialize(propTree, dynamic_cast<uci::type::EW_CoordinationDataLinkIdentifierType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::eW_IndexNumberDataLinkIdentifierType:
      return extxml_uci::type::EW_IndexNumberDataLinkIdentifierType::deserialize(propTree, dynamic_cast<uci::type::EW_IndexNumberDataLinkIdentifierType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::executionPlanSetBaseType:
      return extxml_uci::type::ExecutionPlanSetBaseType::deserialize(propTree, dynamic_cast<uci::type::ExecutionPlanSetBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::executionPlanSetID_Type:
      return extxml_uci::type::ExecutionPlanSetID_Type::deserialize(propTree, dynamic_cast<uci::type::ExecutionPlanSetID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::executionSequenceInsertionType:
      return extxml_uci::type::ExecutionSequenceInsertionType::deserialize(propTree, dynamic_cast<uci::type::ExecutionSequenceInsertionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::executionSequencePlanSetsType:
      return extxml_uci::type::ExecutionSequencePlanSetsType::deserialize(propTree, dynamic_cast<uci::type::ExecutionSequencePlanSetsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::executionSequenceType:
      return extxml_uci::type::ExecutionSequenceType::deserialize(propTree, dynamic_cast<uci::type::ExecutionSequenceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::externalDataRequestMDT:
      return extxml_uci::type::ExternalDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ExternalDataRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::externalDataRequestMT:
      return extxml_uci::type::ExternalDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::ExternalDataRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::externalDataRequestStatusMDT:
      return extxml_uci::type::ExternalDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ExternalDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::externalDataRequestStatusMT:
      return extxml_uci::type::ExternalDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ExternalDataRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::externalRequestedDataID_Type:
      return extxml_uci::type::ExternalRequestedDataID_Type::deserialize(propTree, dynamic_cast<uci::type::ExternalRequestedDataID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::faultID_Type:
      return extxml_uci::type::FaultID_Type::deserialize(propTree, dynamic_cast<uci::type::FaultID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::faultMDT:
      return extxml_uci::type::FaultMDT::deserialize(propTree, dynamic_cast<uci::type::FaultMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::faultMT:
      return extxml_uci::type::FaultMT::deserialize(propTree, dynamic_cast<uci::type::FaultMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fileLocationID_Type:
      return extxml_uci::type::FileLocationID_Type::deserialize(propTree, dynamic_cast<uci::type::FileLocationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fileLocationMDT:
      return extxml_uci::type::FileLocationMDT::deserialize(propTree, dynamic_cast<uci::type::FileLocationMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fileLocationMT:
      return extxml_uci::type::FileLocationMT::deserialize(propTree, dynamic_cast<uci::type::FileLocationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fileMetadataID_Type:
      return extxml_uci::type::FileMetadataID_Type::deserialize(propTree, dynamic_cast<uci::type::FileMetadataID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fileMetadataMDT:
      return extxml_uci::type::FileMetadataMDT::deserialize(propTree, dynamic_cast<uci::type::FileMetadataMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fileMetadataMT:
      return extxml_uci::type::FileMetadataMT::deserialize(propTree, dynamic_cast<uci::type::FileMetadataMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::filterID_Type:
      return extxml_uci::type::FilterID_Type::deserialize(propTree, dynamic_cast<uci::type::FilterID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fixedPositionType:
      return extxml_uci::type::FixedPositionType::deserialize(propTree, dynamic_cast<uci::type::FixedPositionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::flightActivityMT:
      return extxml_uci::type::FlightActivityMT::deserialize(propTree, dynamic_cast<uci::type::FlightActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::flightActivityType:
      return extxml_uci::type::FlightActivityType::deserialize(propTree, dynamic_cast<uci::type::FlightActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::flightCapabilityMDT:
      return extxml_uci::type::FlightCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::FlightCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::flightCapabilityMT:
      return extxml_uci::type::FlightCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::FlightCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::flightCapabilityStatusMDT:
      return extxml_uci::type::FlightCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::FlightCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::flightCapabilityStatusMT:
      return extxml_uci::type::FlightCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::FlightCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::flightCapabilityType:
      return extxml_uci::type::FlightCapabilityType::deserialize(propTree, dynamic_cast<uci::type::FlightCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::flightTaskBaseType:
      return extxml_uci::type::FlightTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::FlightTaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::flightTaskType:
      return extxml_uci::type::FlightTaskType::deserialize(propTree, dynamic_cast<uci::type::FlightTaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::floatMinMaxType:
      return extxml_uci::type::FloatMinMaxType::deserialize(propTree, dynamic_cast<uci::type::FloatMinMaxType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::foreignKeyMapDRL:
      return extxml_uci::type::ForeignKeyMapDRL::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyMapDRL&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::foreignKeyMapID_Type:
      return extxml_uci::type::ForeignKeyMapID_Type::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyMapID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::foreignKeyMapMDT:
      return extxml_uci::type::ForeignKeyMapMDT::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyMapMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::foreignKeyMapML:
      return extxml_uci::type::ForeignKeyMapML::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyMapML&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::foreignKeyMapMT:
      return extxml_uci::type::ForeignKeyMapMT::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyMapMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::foreignKeyPairDRLE:
      return extxml_uci::type::ForeignKeyPairDRLE::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyPairDRLE&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::foreignKeyPairID_Type:
      return extxml_uci::type::ForeignKeyPairID_Type::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyPairID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::foreignKeyPairMDT:
      return extxml_uci::type::ForeignKeyPairMDT::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyPairMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::foreignKeyPairMT:
      return extxml_uci::type::ForeignKeyPairMT::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyPairMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::foreignKeyType:
      return extxml_uci::type::ForeignKeyType::deserialize(propTree, dynamic_cast<uci::type::ForeignKeyType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fOV_ActivityType:
      return extxml_uci::type::FOV_ActivityType::deserialize(propTree, dynamic_cast<uci::type::FOV_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fOV_Type:
      return extxml_uci::type::FOV_Type::deserialize(propTree, dynamic_cast<uci::type::FOV_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fOV_VolumeType:
      return extxml_uci::type::FOV_VolumeType::deserialize(propTree, dynamic_cast<uci::type::FOV_VolumeType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::frequencyDataBaseType:
      return extxml_uci::type::FrequencyDataBaseType::deserialize(propTree, dynamic_cast<uci::type::FrequencyDataBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::frequencyDataType:
      return extxml_uci::type::FrequencyDataType::deserialize(propTree, dynamic_cast<uci::type::FrequencyDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fuelSubsystemExtendedStatusType:
      return extxml_uci::type::FuelSubsystemExtendedStatusType::deserialize(propTree, dynamic_cast<uci::type::FuelSubsystemExtendedStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fuelTankComponentExtendedStatusType:
      return extxml_uci::type::FuelTankComponentExtendedStatusType::deserialize(propTree, dynamic_cast<uci::type::FuelTankComponentExtendedStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::functionalDamageConfidenceType:
      return extxml_uci::type::FunctionalDamageConfidenceType::deserialize(propTree, dynamic_cast<uci::type::FunctionalDamageConfidenceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::functionalDamageProbabilityType:
      return extxml_uci::type::FunctionalDamageProbabilityType::deserialize(propTree, dynamic_cast<uci::type::FunctionalDamageProbabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::functionID_Type:
      return extxml_uci::type::FunctionID_Type::deserialize(propTree, dynamic_cast<uci::type::FunctionID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fusionSettingsMT:
      return extxml_uci::type::FusionSettingsMT::deserialize(propTree, dynamic_cast<uci::type::FusionSettingsMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fusionSettingsRequestMDT:
      return extxml_uci::type::FusionSettingsRequestMDT::deserialize(propTree, dynamic_cast<uci::type::FusionSettingsRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fusionSettingsRequestMT:
      return extxml_uci::type::FusionSettingsRequestMT::deserialize(propTree, dynamic_cast<uci::type::FusionSettingsRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fusionSettingsRequestStatusMDT:
      return extxml_uci::type::FusionSettingsRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::FusionSettingsRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::fusionSettingsRequestStatusMT:
      return extxml_uci::type::FusionSettingsRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::FusionSettingsRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayActivityCommandType:
      return extxml_uci::type::GatewayActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::GatewayActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayActivityMT:
      return extxml_uci::type::GatewayActivityMT::deserialize(propTree, dynamic_cast<uci::type::GatewayActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayActivityType:
      return extxml_uci::type::GatewayActivityType::deserialize(propTree, dynamic_cast<uci::type::GatewayActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayCapabilityCommandType:
      return extxml_uci::type::GatewayCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::GatewayCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayCapabilityMDT:
      return extxml_uci::type::GatewayCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::GatewayCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayCapabilityMT:
      return extxml_uci::type::GatewayCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::GatewayCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayCapabilitySettingsCommandBaseType:
      return extxml_uci::type::GatewayCapabilitySettingsCommandBaseType::deserialize(propTree, dynamic_cast<uci::type::GatewayCapabilitySettingsCommandBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayCapabilityStatusMDT:
      return extxml_uci::type::GatewayCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::GatewayCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayCapabilityStatusMT:
      return extxml_uci::type::GatewayCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::GatewayCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayCapabilityStatusType:
      return extxml_uci::type::GatewayCapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::GatewayCapabilityStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayCapabilityType:
      return extxml_uci::type::GatewayCapabilityType::deserialize(propTree, dynamic_cast<uci::type::GatewayCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayCommandMT:
      return extxml_uci::type::GatewayCommandMT::deserialize(propTree, dynamic_cast<uci::type::GatewayCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayCommandStatusMDT:
      return extxml_uci::type::GatewayCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::GatewayCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayCommandStatusMT:
      return extxml_uci::type::GatewayCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::GatewayCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayConfigurationPET:
      return extxml_uci::type::GatewayConfigurationPET::deserialize(propTree, dynamic_cast<uci::type::GatewayConfigurationPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayLink16ConfigurationAnnulusType:
      return extxml_uci::type::GatewayLink16ConfigurationAnnulusType::deserialize(propTree, dynamic_cast<uci::type::GatewayLink16ConfigurationAnnulusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayLink16ConfigurationCircleType:
      return extxml_uci::type::GatewayLink16ConfigurationCircleType::deserialize(propTree, dynamic_cast<uci::type::GatewayLink16ConfigurationCircleType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayLink16ConfigurationCircularSectorType:
      return extxml_uci::type::GatewayLink16ConfigurationCircularSectorType::deserialize(propTree, dynamic_cast<uci::type::GatewayLink16ConfigurationCircularSectorType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayLink16ConfigurationClosedAreaType:
      return extxml_uci::type::GatewayLink16ConfigurationClosedAreaType::deserialize(propTree, dynamic_cast<uci::type::GatewayLink16ConfigurationClosedAreaType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayLink16ConfigurationRectangleType:
      return extxml_uci::type::GatewayLink16ConfigurationRectangleType::deserialize(propTree, dynamic_cast<uci::type::GatewayLink16ConfigurationRectangleType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewayNativeStatisticsPET:
      return extxml_uci::type::GatewayNativeStatisticsPET::deserialize(propTree, dynamic_cast<uci::type::GatewayNativeStatisticsPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewaySettingsCommandMDT:
      return extxml_uci::type::GatewaySettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::GatewaySettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewaySettingsCommandMT:
      return extxml_uci::type::GatewaySettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::GatewaySettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewaySettingsCommandStatusMDT:
      return extxml_uci::type::GatewaySettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::GatewaySettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gatewaySettingsCommandStatusMT:
      return extxml_uci::type::GatewaySettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::GatewaySettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::genericDataLinkNativeInfoType:
      return extxml_uci::type::GenericDataLinkNativeInfoType::deserialize(propTree, dynamic_cast<uci::type::GenericDataLinkNativeInfoType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::geoFiltersQueryType:
      return extxml_uci::type::GeoFiltersQueryType::deserialize(propTree, dynamic_cast<uci::type::GeoFiltersQueryType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::gimbalAxisID_Type:
      return extxml_uci::type::GimbalAxisID_Type::deserialize(propTree, dynamic_cast<uci::type::GimbalAxisID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iD_Type:
      return extxml_uci::type::ID_Type::deserialize(propTree, dynamic_cast<uci::type::ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::identityConfidenceType:
      return extxml_uci::type::IdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::IdentityConfidenceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::identityType:
      return extxml_uci::type::IdentityType::deserialize(propTree, dynamic_cast<uci::type::IdentityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_ActivityCommandType:
      return extxml_uci::type::IFF_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::IFF_ActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_ActivityMT:
      return extxml_uci::type::IFF_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::IFF_ActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_ActivityTransponderType:
      return extxml_uci::type::IFF_ActivityTransponderType::deserialize(propTree, dynamic_cast<uci::type::IFF_ActivityTransponderType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_ActivityType:
      return extxml_uci::type::IFF_ActivityType::deserialize(propTree, dynamic_cast<uci::type::IFF_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_CapabilityCommandType:
      return extxml_uci::type::IFF_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::IFF_CapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_CapabilityMDT:
      return extxml_uci::type::IFF_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::IFF_CapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_CapabilityMT:
      return extxml_uci::type::IFF_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::IFF_CapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_CapabilityStatusMDT:
      return extxml_uci::type::IFF_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::IFF_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_CapabilityStatusMT:
      return extxml_uci::type::IFF_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::IFF_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_CapabilityType:
      return extxml_uci::type::IFF_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::IFF_CapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_CollectionConstraintsType:
      return extxml_uci::type::IFF_CollectionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::IFF_CollectionConstraintsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_CommandMT:
      return extxml_uci::type::IFF_CommandMT::deserialize(propTree, dynamic_cast<uci::type::IFF_CommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_CommandStatusMDT:
      return extxml_uci::type::IFF_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::IFF_CommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_CommandStatusMT:
      return extxml_uci::type::IFF_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::IFF_CommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_ConsentRequestMT:
      return extxml_uci::type::IFF_ConsentRequestMT::deserialize(propTree, dynamic_cast<uci::type::IFF_ConsentRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_ConsentRequestStatusMDT:
      return extxml_uci::type::IFF_ConsentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::IFF_ConsentRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_ConsentRequestStatusMT:
      return extxml_uci::type::IFF_ConsentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::IFF_ConsentRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_ConsentRequestType:
      return extxml_uci::type::IFF_ConsentRequestType::deserialize(propTree, dynamic_cast<uci::type::IFF_ConsentRequestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_SettingsCommandMDT:
      return extxml_uci::type::IFF_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::IFF_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_SettingsCommandMT:
      return extxml_uci::type::IFF_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::IFF_SettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_SettingsCommandStatusMDT:
      return extxml_uci::type::IFF_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::IFF_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_SettingsCommandStatusMT:
      return extxml_uci::type::IFF_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::IFF_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iFF_TransponderModeControlType:
      return extxml_uci::type::IFF_TransponderModeControlType::deserialize(propTree, dynamic_cast<uci::type::IFF_TransponderModeControlType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iJMS_DataLinkIdentifierType:
      return extxml_uci::type::IJMS_DataLinkIdentifierType::deserialize(propTree, dynamic_cast<uci::type::IJMS_DataLinkIdentifierType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iJMS_QuerySpecificDataType:
      return extxml_uci::type::IJMS_QuerySpecificDataType::deserialize(propTree, dynamic_cast<uci::type::IJMS_QuerySpecificDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::imageAugmentationParametersType:
      return extxml_uci::type::ImageAugmentationParametersType::deserialize(propTree, dynamic_cast<uci::type::ImageAugmentationParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::imageGeoRegistrationProcessingResultsType:
      return extxml_uci::type::ImageGeoRegistrationProcessingResultsType::deserialize(propTree, dynamic_cast<uci::type::ImageGeoRegistrationProcessingResultsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::imagePixelGeoLocationProcessingParametersType:
      return extxml_uci::type::ImagePixelGeoLocationProcessingParametersType::deserialize(propTree, dynamic_cast<uci::type::ImagePixelGeoLocationProcessingParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::imagePixelGeoLocationProcessingResultsType:
      return extxml_uci::type::ImagePixelGeoLocationProcessingResultsType::deserialize(propTree, dynamic_cast<uci::type::ImagePixelGeoLocationProcessingResultsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::imageRegionOfInterestPET:
      return extxml_uci::type::ImageRegionOfInterestPET::deserialize(propTree, dynamic_cast<uci::type::ImageRegionOfInterestPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::inertialStateRelativeType:
      return extxml_uci::type::InertialStateRelativeType::deserialize(propTree, dynamic_cast<uci::type::InertialStateRelativeType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iO_PortCommandMT:
      return extxml_uci::type::IO_PortCommandMT::deserialize(propTree, dynamic_cast<uci::type::IO_PortCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iO_PortCommandStatusMDT:
      return extxml_uci::type::IO_PortCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::IO_PortCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iO_PortCommandStatusMT:
      return extxml_uci::type::IO_PortCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::IO_PortCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iO_PortCommandType:
      return extxml_uci::type::IO_PortCommandType::deserialize(propTree, dynamic_cast<uci::type::IO_PortCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iO_PortStatusMT:
      return extxml_uci::type::IO_PortStatusMT::deserialize(propTree, dynamic_cast<uci::type::IO_PortStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iO_PortStatusType:
      return extxml_uci::type::IO_PortStatusType::deserialize(propTree, dynamic_cast<uci::type::IO_PortStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iP_DataLinkNativeInfoType:
      return extxml_uci::type::IP_DataLinkNativeInfoType::deserialize(propTree, dynamic_cast<uci::type::IP_DataLinkNativeInfoType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iPv4_DataLinkNativeInfoType:
      return extxml_uci::type::IPv4_DataLinkNativeInfoType::deserialize(propTree, dynamic_cast<uci::type::IPv4_DataLinkNativeInfoType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::iPv6_DataLinkNativeInfoType:
      return extxml_uci::type::IPv6_DataLinkNativeInfoType::deserialize(propTree, dynamic_cast<uci::type::IPv6_DataLinkNativeInfoType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::jREAP_GatewayNativeStatisticsType:
      return extxml_uci::type::JREAP_GatewayNativeStatisticsType::deserialize(propTree, dynamic_cast<uci::type::JREAP_GatewayNativeStatisticsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::lAR_ID_Type:
      return extxml_uci::type::LAR_ID_Type::deserialize(propTree, dynamic_cast<uci::type::LAR_ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::lAR_MT:
      return extxml_uci::type::LAR_MT::deserialize(propTree, dynamic_cast<uci::type::LAR_MT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::lAR_ReportMT:
      return extxml_uci::type::LAR_ReportMT::deserialize(propTree, dynamic_cast<uci::type::LAR_ReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::lAR_RequestMDT:
      return extxml_uci::type::LAR_RequestMDT::deserialize(propTree, dynamic_cast<uci::type::LAR_RequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::lAR_RequestMT:
      return extxml_uci::type::LAR_RequestMT::deserialize(propTree, dynamic_cast<uci::type::LAR_RequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::lAR_RequestStatusMDT:
      return extxml_uci::type::LAR_RequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::LAR_RequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::lAR_RequestStatusMT:
      return extxml_uci::type::LAR_RequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::LAR_RequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::launchObjectID_Type:
      return extxml_uci::type::LaunchObjectID_Type::deserialize(propTree, dynamic_cast<uci::type::LaunchObjectID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::launchObservationID_Type:
      return extxml_uci::type::LaunchObservationID_Type::deserialize(propTree, dynamic_cast<uci::type::LaunchObservationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::launchObservationMDT:
      return extxml_uci::type::LaunchObservationMDT::deserialize(propTree, dynamic_cast<uci::type::LaunchObservationMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::launchObservationMT:
      return extxml_uci::type::LaunchObservationMT::deserialize(propTree, dynamic_cast<uci::type::LaunchObservationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::lineDataStatusType:
      return extxml_uci::type::LineDataStatusType::deserialize(propTree, dynamic_cast<uci::type::LineDataStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::linePoint2D_Type:
      return extxml_uci::type::LinePoint2D_Type::deserialize(propTree, dynamic_cast<uci::type::LinePoint2D_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::lineTargetType:
      return extxml_uci::type::LineTargetType::deserialize(propTree, dynamic_cast<uci::type::LineTargetType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::lineType:
      return extxml_uci::type::LineType::deserialize(propTree, dynamic_cast<uci::type::LineType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::link11DataLinkIdentifierType:
      return extxml_uci::type::Link11DataLinkIdentifierType::deserialize(propTree, dynamic_cast<uci::type::Link11DataLinkIdentifierType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::link11QuerySpecificDataType:
      return extxml_uci::type::Link11QuerySpecificDataType::deserialize(propTree, dynamic_cast<uci::type::Link11QuerySpecificDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::link16DataLinkIdentifierType:
      return extxml_uci::type::Link16DataLinkIdentifierType::deserialize(propTree, dynamic_cast<uci::type::Link16DataLinkIdentifierType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::link16DataLinkNativeInfoType:
      return extxml_uci::type::Link16DataLinkNativeInfoType::deserialize(propTree, dynamic_cast<uci::type::Link16DataLinkNativeInfoType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::link16EntityDataLinkNativeFilterType:
      return extxml_uci::type::Link16EntityDataLinkNativeFilterType::deserialize(propTree, dynamic_cast<uci::type::Link16EntityDataLinkNativeFilterType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::link16EntityMetadataType:
      return extxml_uci::type::Link16EntityMetadataType::deserialize(propTree, dynamic_cast<uci::type::Link16EntityMetadataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::link16GatewayConfigurationType:
      return extxml_uci::type::Link16GatewayConfigurationType::deserialize(propTree, dynamic_cast<uci::type::Link16GatewayConfigurationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::link16InterfaceDataLinkNativeInfoType:
      return extxml_uci::type::Link16InterfaceDataLinkNativeInfoType::deserialize(propTree, dynamic_cast<uci::type::Link16InterfaceDataLinkNativeInfoType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::link16SystemMetadataType:
      return extxml_uci::type::Link16SystemMetadataType::deserialize(propTree, dynamic_cast<uci::type::Link16SystemMetadataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::link16TN_QuerySpecificDataType:
      return extxml_uci::type::Link16TN_QuerySpecificDataType::deserialize(propTree, dynamic_cast<uci::type::Link16TN_QuerySpecificDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::locatedEllipseType:
      return extxml_uci::type::LocatedEllipseType::deserialize(propTree, dynamic_cast<uci::type::LocatedEllipseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::locatedRectangleType:
      return extxml_uci::type::LocatedRectangleType::deserialize(propTree, dynamic_cast<uci::type::LocatedRectangleType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::locationAndStatusBaseType:
      return extxml_uci::type::LocationAndStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::LocationAndStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::locationAndStatusExpireType:
      return extxml_uci::type::LocationAndStatusExpireType::deserialize(propTree, dynamic_cast<uci::type::LocationAndStatusExpireType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::logMT:
      return extxml_uci::type::LogMT::deserialize(propTree, dynamic_cast<uci::type::LogMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::lOS_MeasurementWithUncertaintyType:
      return extxml_uci::type::LOS_MeasurementWithUncertaintyType::deserialize(propTree, dynamic_cast<uci::type::LOS_MeasurementWithUncertaintyType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::lOS_VariableA_Type:
      return extxml_uci::type::LOS_VariableA_Type::deserialize(propTree, dynamic_cast<uci::type::LOS_VariableA_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::lOS_VariableB_Type:
      return extxml_uci::type::LOS_VariableB_Type::deserialize(propTree, dynamic_cast<uci::type::LOS_VariableB_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::managedListBaseType:
      return extxml_uci::type::ManagedListBaseType::deserialize(propTree, dynamic_cast<uci::type::ManagedListBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::mDF_ID_Type:
      return extxml_uci::type::MDF_ID_Type::deserialize(propTree, dynamic_cast<uci::type::MDF_ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::mDF_SubCategoryFileID_Type:
      return extxml_uci::type::MDF_SubCategoryFileID_Type::deserialize(propTree, dynamic_cast<uci::type::MDF_SubCategoryFileID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::mDF_SubCategoryID_Type:
      return extxml_uci::type::MDF_SubCategoryID_Type::deserialize(propTree, dynamic_cast<uci::type::MDF_SubCategoryID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::measurementGroupID_Type:
      return extxml_uci::type::MeasurementGroupID_Type::deserialize(propTree, dynamic_cast<uci::type::MeasurementGroupID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::measurementID_Type:
      return extxml_uci::type::MeasurementID_Type::deserialize(propTree, dynamic_cast<uci::type::MeasurementID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::messageConfigurationID_Type:
      return extxml_uci::type::MessageConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::MessageConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::messageTransmissionFilterRecordDRLE:
      return extxml_uci::type::MessageTransmissionFilterRecordDRLE::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionFilterRecordDRLE&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::messageTransmissionFilterRecordID_Type:
      return extxml_uci::type::MessageTransmissionFilterRecordID_Type::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionFilterRecordID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::messageTransmissionFilterRecordMDT:
      return extxml_uci::type::MessageTransmissionFilterRecordMDT::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionFilterRecordMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::messageTransmissionFilterRecordMT:
      return extxml_uci::type::MessageTransmissionFilterRecordMT::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionFilterRecordMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::messageTransmissionListDRL:
      return extxml_uci::type::MessageTransmissionListDRL::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionListDRL&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::messageTransmissionListID_Type:
      return extxml_uci::type::MessageTransmissionListID_Type::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionListID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::messageTransmissionListMDT:
      return extxml_uci::type::MessageTransmissionListMDT::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionListMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::messageTransmissionListMT:
      return extxml_uci::type::MessageTransmissionListMT::deserialize(propTree, dynamic_cast<uci::type::MessageTransmissionListMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::messageType:
      return extxml_uci::type::MessageType::deserialize(propTree, dynamic_cast<uci::type::MessageType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::metadataID_Type:
      return extxml_uci::type::MetadataID_Type::deserialize(propTree, dynamic_cast<uci::type::MetadataID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionActivationRequestMDT:
      return extxml_uci::type::MissionActivationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::MissionActivationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionActivationRequestMT:
      return extxml_uci::type::MissionActivationRequestMT::deserialize(propTree, dynamic_cast<uci::type::MissionActivationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionActivationRequestStatusMDT:
      return extxml_uci::type::MissionActivationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::MissionActivationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionActivationRequestStatusMT:
      return extxml_uci::type::MissionActivationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionActivationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionContingencyAlertID_Type:
      return extxml_uci::type::MissionContingencyAlertID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionContingencyAlertID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionContingencyAlertMT:
      return extxml_uci::type::MissionContingencyAlertMT::deserialize(propTree, dynamic_cast<uci::type::MissionContingencyAlertMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionDefinitionID_Type:
      return extxml_uci::type::MissionDefinitionID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionDefinitionID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionDefinitionMDT:
      return extxml_uci::type::MissionDefinitionMDT::deserialize(propTree, dynamic_cast<uci::type::MissionDefinitionMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionDefinitionMT:
      return extxml_uci::type::MissionDefinitionMT::deserialize(propTree, dynamic_cast<uci::type::MissionDefinitionMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionEnvironmentObjectActionType:
      return extxml_uci::type::MissionEnvironmentObjectActionType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectActionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionEnvironmentObjectBaseType:
      return extxml_uci::type::MissionEnvironmentObjectBaseType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionEnvironmentObjectEffectType:
      return extxml_uci::type::MissionEnvironmentObjectEffectType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectEffectType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionEnvironmentObjectEntityType:
      return extxml_uci::type::MissionEnvironmentObjectEntityType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectEntityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionEnvironmentObjectOpLineType:
      return extxml_uci::type::MissionEnvironmentObjectOpLineType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectOpLineType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionEnvironmentObjectOpPointType:
      return extxml_uci::type::MissionEnvironmentObjectOpPointType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectOpPointType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionEnvironmentObjectOpVolumeType:
      return extxml_uci::type::MissionEnvironmentObjectOpVolumeType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectOpVolumeType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionEnvironmentObjectOpZoneType:
      return extxml_uci::type::MissionEnvironmentObjectOpZoneType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectOpZoneType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionEnvironmentObjectResponseType:
      return extxml_uci::type::MissionEnvironmentObjectResponseType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectResponseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionEnvironmentObjectSystemType:
      return extxml_uci::type::MissionEnvironmentObjectSystemType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectSystemType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionEnvironmentObjectTaskType:
      return extxml_uci::type::MissionEnvironmentObjectTaskType::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentObjectTaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionEnvironmentOverrideID_Type:
      return extxml_uci::type::MissionEnvironmentOverrideID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentOverrideID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionEnvironmentOverrideMDT:
      return extxml_uci::type::MissionEnvironmentOverrideMDT::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentOverrideMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionEnvironmentOverrideMT:
      return extxml_uci::type::MissionEnvironmentOverrideMT::deserialize(propTree, dynamic_cast<uci::type::MissionEnvironmentOverrideMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionID_Type:
      return extxml_uci::type::MissionID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanActivationApprovalStatusMT:
      return extxml_uci::type::MissionPlanActivationApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanActivationApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanActivationCommandID_Type:
      return extxml_uci::type::MissionPlanActivationCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanActivationCommandID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanActivationCommandMT:
      return extxml_uci::type::MissionPlanActivationCommandMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanActivationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanActivationCommandStatusMT:
      return extxml_uci::type::MissionPlanActivationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanActivationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanActivationStatusMT:
      return extxml_uci::type::MissionPlanActivationStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanActivationStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanApprovalStatusMT:
      return extxml_uci::type::MissionPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanCommandID_Type:
      return extxml_uci::type::MissionPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanCommandID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanCommandMT:
      return extxml_uci::type::MissionPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanCommandStatusMT:
      return extxml_uci::type::MissionPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanExecutionStatusMT:
      return extxml_uci::type::MissionPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanID_Type:
      return extxml_uci::type::MissionPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanInputsType:
      return extxml_uci::type::MissionPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanMetricsReportID_Type:
      return extxml_uci::type::MissionPlanMetricsReportID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanMetricsReportMT:
      return extxml_uci::type::MissionPlanMetricsReportMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanMetricsReportRequestMDT:
      return extxml_uci::type::MissionPlanMetricsReportRequestMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanMetricsReportRequestMT:
      return extxml_uci::type::MissionPlanMetricsReportRequestMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanMetricsReportRequestStatusMDT:
      return extxml_uci::type::MissionPlanMetricsReportRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanMetricsReportRequestStatusMT:
      return extxml_uci::type::MissionPlanMetricsReportRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMetricsReportRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanMT:
      return extxml_uci::type::MissionPlanMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanningOrchestrationID_Type:
      return extxml_uci::type::MissionPlanningOrchestrationID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanningOrchestrationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanningOrchestrationMDT:
      return extxml_uci::type::MissionPlanningOrchestrationMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanningOrchestrationMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanningOrchestrationMT:
      return extxml_uci::type::MissionPlanningOrchestrationMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanningOrchestrationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanProcessDescriptionType:
      return extxml_uci::type::MissionPlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanStatusMT:
      return extxml_uci::type::MissionPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanValidationCommandMDT:
      return extxml_uci::type::MissionPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanValidationCommandMT:
      return extxml_uci::type::MissionPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanValidationCommandStatusMDT:
      return extxml_uci::type::MissionPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanValidationCommandStatusMT:
      return extxml_uci::type::MissionPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanValidationID_Type:
      return extxml_uci::type::MissionPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanValidationInputsType:
      return extxml_uci::type::MissionPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionPlanValidationMT:
      return extxml_uci::type::MissionPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::MissionPlanValidationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::missionRequirementStatusMT:
      return extxml_uci::type::MissionRequirementStatusMT::deserialize(propTree, dynamic_cast<uci::type::MissionRequirementStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::modRateDataType:
      return extxml_uci::type::ModRateDataType::deserialize(propTree, dynamic_cast<uci::type::ModRateDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::modulationOnPulseDataBaseType:
      return extxml_uci::type::ModulationOnPulseDataBaseType::deserialize(propTree, dynamic_cast<uci::type::ModulationOnPulseDataBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::modulationOnPulseDataType:
      return extxml_uci::type::ModulationOnPulseDataType::deserialize(propTree, dynamic_cast<uci::type::ModulationOnPulseDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::mTI_ActivityStatusBaseType:
      return extxml_uci::type::MTI_ActivityStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::MTI_ActivityStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::mTI_ActivityStatusDetailType:
      return extxml_uci::type::MTI_ActivityStatusDetailType::deserialize(propTree, dynamic_cast<uci::type::MTI_ActivityStatusDetailType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::mTI_OpZoneFilterAreaType:
      return extxml_uci::type::MTI_OpZoneFilterAreaType::deserialize(propTree, dynamic_cast<uci::type::MTI_OpZoneFilterAreaType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::mTI_STANAG_4607_OpZoneFilterAreaType:
      return extxml_uci::type::MTI_STANAG_4607_OpZoneFilterAreaType::deserialize(propTree, dynamic_cast<uci::type::MTI_STANAG_4607_OpZoneFilterAreaType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::multiObjectType:
      return extxml_uci::type::MultiObjectType::deserialize(propTree, dynamic_cast<uci::type::MultiObjectType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::multistaticEmitterDataID_Type:
      return extxml_uci::type::MultistaticEmitterDataID_Type::deserialize(propTree, dynamic_cast<uci::type::MultistaticEmitterDataID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::multistaticEmitterDataMT:
      return extxml_uci::type::MultistaticEmitterDataMT::deserialize(propTree, dynamic_cast<uci::type::MultistaticEmitterDataMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::multistaticEmitterID_Type:
      return extxml_uci::type::MultistaticEmitterID_Type::deserialize(propTree, dynamic_cast<uci::type::MultistaticEmitterID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::mvAnomalyEventID_Type:
      return extxml_uci::type::MvAnomalyEventID_Type::deserialize(propTree, dynamic_cast<uci::type::MvAnomalyEventID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::mvAnomalyEventMDT:
      return extxml_uci::type::MvAnomalyEventMDT::deserialize(propTree, dynamic_cast<uci::type::MvAnomalyEventMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::mvAnomalyEventMT:
      return extxml_uci::type::MvAnomalyEventMT::deserialize(propTree, dynamic_cast<uci::type::MvAnomalyEventMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::nameValuePairType:
      return extxml_uci::type::NameValuePairType::deserialize(propTree, dynamic_cast<uci::type::NameValuePairType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::nATO_Link1DataLinkIdentifierType:
      return extxml_uci::type::NATO_Link1DataLinkIdentifierType::deserialize(propTree, dynamic_cast<uci::type::NATO_Link1DataLinkIdentifierType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::nATO_Link1QuerySpecificDataType:
      return extxml_uci::type::NATO_Link1QuerySpecificDataType::deserialize(propTree, dynamic_cast<uci::type::NATO_Link1QuerySpecificDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::navigationReportMT:
      return extxml_uci::type::NavigationReportMT::deserialize(propTree, dynamic_cast<uci::type::NavigationReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::networkLinkID_Type:
      return extxml_uci::type::NetworkLinkID_Type::deserialize(propTree, dynamic_cast<uci::type::NetworkLinkID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::nITF_PackingPlanPET:
      return extxml_uci::type::NITF_PackingPlanPET::deserialize(propTree, dynamic_cast<uci::type::NITF_PackingPlanPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::nITF_PackingPlanRevA_Type:
      return extxml_uci::type::NITF_PackingPlanRevA_Type::deserialize(propTree, dynamic_cast<uci::type::NITF_PackingPlanRevA_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::nITF_PackingPlanType:
      return extxml_uci::type::NITF_PackingPlanType::deserialize(propTree, dynamic_cast<uci::type::NITF_PackingPlanType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::notificationBaseType:
      return extxml_uci::type::NotificationBaseType::deserialize(propTree, dynamic_cast<uci::type::NotificationBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::notificationID_Type:
      return extxml_uci::type::NotificationID_Type::deserialize(propTree, dynamic_cast<uci::type::NotificationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::oB_SensorID_Type:
      return extxml_uci::type::OB_SensorID_Type::deserialize(propTree, dynamic_cast<uci::type::OB_SensorID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::observationMeasurementID_Type:
      return extxml_uci::type::ObservationMeasurementID_Type::deserialize(propTree, dynamic_cast<uci::type::ObservationMeasurementID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::observationMeasurementReportID_Type:
      return extxml_uci::type::ObservationMeasurementReportID_Type::deserialize(propTree, dynamic_cast<uci::type::ObservationMeasurementReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::observationMeasurementReportMT:
      return extxml_uci::type::ObservationMeasurementReportMT::deserialize(propTree, dynamic_cast<uci::type::ObservationMeasurementReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::observationReportID_Type:
      return extxml_uci::type::ObservationReportID_Type::deserialize(propTree, dynamic_cast<uci::type::ObservationReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::observationReportMT:
      return extxml_uci::type::ObservationReportMT::deserialize(propTree, dynamic_cast<uci::type::ObservationReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::offsetLocationErrorType:
      return extxml_uci::type::OffsetLocationErrorType::deserialize(propTree, dynamic_cast<uci::type::OffsetLocationErrorType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::offsetLocationType:
      return extxml_uci::type::OffsetLocationType::deserialize(propTree, dynamic_cast<uci::type::OffsetLocationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opaqueCapabilityMDT:
      return extxml_uci::type::OpaqueCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::OpaqueCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opaqueCapabilityMT:
      return extxml_uci::type::OpaqueCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::OpaqueCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opaqueCapabilityStatusMDT:
      return extxml_uci::type::OpaqueCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OpaqueCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opaqueCapabilityStatusMT:
      return extxml_uci::type::OpaqueCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::OpaqueCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opaqueSettingsCommandMDT:
      return extxml_uci::type::OpaqueSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::OpaqueSettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opaqueSettingsCommandMT:
      return extxml_uci::type::OpaqueSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::OpaqueSettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opaqueSettingsCommandStatusMDT:
      return extxml_uci::type::OpaqueSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OpaqueSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opaqueSettingsCommandStatusMT:
      return extxml_uci::type::OpaqueSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::OpaqueSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opBaseType:
      return extxml_uci::type::OpBaseType::deserialize(propTree, dynamic_cast<uci::type::OpBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operationsAreaDataLinkNativeFilterType:
      return extxml_uci::type::OperationsAreaDataLinkNativeFilterType::deserialize(propTree, dynamic_cast<uci::type::OperationsAreaDataLinkNativeFilterType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorActionCommandMDT:
      return extxml_uci::type::OperatorActionCommandMDT::deserialize(propTree, dynamic_cast<uci::type::OperatorActionCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorActionCommandMT:
      return extxml_uci::type::OperatorActionCommandMT::deserialize(propTree, dynamic_cast<uci::type::OperatorActionCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorActionCommandStatusMDT:
      return extxml_uci::type::OperatorActionCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OperatorActionCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorActionCommandStatusMT:
      return extxml_uci::type::OperatorActionCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::OperatorActionCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorActionID_Type:
      return extxml_uci::type::OperatorActionID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorActionID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorAnnotationID_Type:
      return extxml_uci::type::OperatorAnnotationID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorAnnotationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorAnnotationMDT:
      return extxml_uci::type::OperatorAnnotationMDT::deserialize(propTree, dynamic_cast<uci::type::OperatorAnnotationMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorAnnotationMT:
      return extxml_uci::type::OperatorAnnotationMT::deserialize(propTree, dynamic_cast<uci::type::OperatorAnnotationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorID_Type:
      return extxml_uci::type::OperatorID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorLocationOfInterestID_Type:
      return extxml_uci::type::OperatorLocationOfInterestID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorLocationOfInterestID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorLocationOfInterestMDT:
      return extxml_uci::type::OperatorLocationOfInterestMDT::deserialize(propTree, dynamic_cast<uci::type::OperatorLocationOfInterestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorLocationOfInterestMT:
      return extxml_uci::type::OperatorLocationOfInterestMT::deserialize(propTree, dynamic_cast<uci::type::OperatorLocationOfInterestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorMDT:
      return extxml_uci::type::OperatorMDT::deserialize(propTree, dynamic_cast<uci::type::OperatorMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorMT:
      return extxml_uci::type::OperatorMT::deserialize(propTree, dynamic_cast<uci::type::OperatorMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorNotificationAckID_Type:
      return extxml_uci::type::OperatorNotificationAckID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationAckID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorNotificationAckMT:
      return extxml_uci::type::OperatorNotificationAckMT::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationAckMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorNotificationID_Type:
      return extxml_uci::type::OperatorNotificationID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorNotificationMT:
      return extxml_uci::type::OperatorNotificationMT::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorNotificationOverrideID_Type:
      return extxml_uci::type::OperatorNotificationOverrideID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationOverrideID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorNotificationOverrideMT:
      return extxml_uci::type::OperatorNotificationOverrideMT::deserialize(propTree, dynamic_cast<uci::type::OperatorNotificationOverrideMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorRoleID_Type:
      return extxml_uci::type::OperatorRoleID_Type::deserialize(propTree, dynamic_cast<uci::type::OperatorRoleID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorRoleMDT:
      return extxml_uci::type::OperatorRoleMDT::deserialize(propTree, dynamic_cast<uci::type::OperatorRoleMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::operatorRoleMT:
      return extxml_uci::type::OperatorRoleMT::deserialize(propTree, dynamic_cast<uci::type::OperatorRoleMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opLineID_Type:
      return extxml_uci::type::OpLineID_Type::deserialize(propTree, dynamic_cast<uci::type::OpLineID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opLineMDT:
      return extxml_uci::type::OpLineMDT::deserialize(propTree, dynamic_cast<uci::type::OpLineMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opLineMT:
      return extxml_uci::type::OpLineMT::deserialize(propTree, dynamic_cast<uci::type::OpLineMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opLineType:
      return extxml_uci::type::OpLineType::deserialize(propTree, dynamic_cast<uci::type::OpLineType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opNotificationMDT:
      return extxml_uci::type::OpNotificationMDT::deserialize(propTree, dynamic_cast<uci::type::OpNotificationMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opNotificationMT:
      return extxml_uci::type::OpNotificationMT::deserialize(propTree, dynamic_cast<uci::type::OpNotificationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opPointBaseType:
      return extxml_uci::type::OpPointBaseType::deserialize(propTree, dynamic_cast<uci::type::OpPointBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opPointID_Type:
      return extxml_uci::type::OpPointID_Type::deserialize(propTree, dynamic_cast<uci::type::OpPointID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opPointMDT:
      return extxml_uci::type::OpPointMDT::deserialize(propTree, dynamic_cast<uci::type::OpPointMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opPointMT:
      return extxml_uci::type::OpPointMT::deserialize(propTree, dynamic_cast<uci::type::OpPointMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opRoutingID_Type:
      return extxml_uci::type::OpRoutingID_Type::deserialize(propTree, dynamic_cast<uci::type::OpRoutingID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opRoutingMT:
      return extxml_uci::type::OpRoutingMT::deserialize(propTree, dynamic_cast<uci::type::OpRoutingMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opticalCollectionConstraintsType:
      return extxml_uci::type::OpticalCollectionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::OpticalCollectionConstraintsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opVolumeID_Type:
      return extxml_uci::type::OpVolumeID_Type::deserialize(propTree, dynamic_cast<uci::type::OpVolumeID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opVolumeMDT:
      return extxml_uci::type::OpVolumeMDT::deserialize(propTree, dynamic_cast<uci::type::OpVolumeMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opVolumeMT:
      return extxml_uci::type::OpVolumeMT::deserialize(propTree, dynamic_cast<uci::type::OpVolumeMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opZoneFilterAreaPET:
      return extxml_uci::type::OpZoneFilterAreaPET::deserialize(propTree, dynamic_cast<uci::type::OpZoneFilterAreaPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opZoneID_Type:
      return extxml_uci::type::OpZoneID_Type::deserialize(propTree, dynamic_cast<uci::type::OpZoneID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opZoneMDT:
      return extxml_uci::type::OpZoneMDT::deserialize(propTree, dynamic_cast<uci::type::OpZoneMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opZoneMT:
      return extxml_uci::type::OpZoneMT::deserialize(propTree, dynamic_cast<uci::type::OpZoneMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::opZoneType:
      return extxml_uci::type::OpZoneType::deserialize(propTree, dynamic_cast<uci::type::OpZoneType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityExecutionStatusType:
      return extxml_uci::type::OrbitActivityExecutionStatusType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityExecutionStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanApprovalStatusMT:
      return extxml_uci::type::OrbitActivityPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanCommandID_Type:
      return extxml_uci::type::OrbitActivityPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanCommandID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanCommandMT:
      return extxml_uci::type::OrbitActivityPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanCommandStatusMT:
      return extxml_uci::type::OrbitActivityPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanExecutionStatusMT:
      return extxml_uci::type::OrbitActivityPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanID_Type:
      return extxml_uci::type::OrbitActivityPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanInputsType:
      return extxml_uci::type::OrbitActivityPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanMT:
      return extxml_uci::type::OrbitActivityPlanMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanStatusMT:
      return extxml_uci::type::OrbitActivityPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanStatusType:
      return extxml_uci::type::OrbitActivityPlanStatusType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanValidationCommandMDT:
      return extxml_uci::type::OrbitActivityPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanValidationCommandMT:
      return extxml_uci::type::OrbitActivityPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanValidationCommandStatusMDT:
      return extxml_uci::type::OrbitActivityPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanValidationCommandStatusMT:
      return extxml_uci::type::OrbitActivityPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanValidationID_Type:
      return extxml_uci::type::OrbitActivityPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanValidationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanValidationInputsType:
      return extxml_uci::type::OrbitActivityPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanValidationInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityPlanValidationMT:
      return extxml_uci::type::OrbitActivityPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityPlanValidationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitActivityType:
      return extxml_uci::type::OrbitActivityType::deserialize(propTree, dynamic_cast<uci::type::OrbitActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalConjunctionID_Type:
      return extxml_uci::type::OrbitalConjunctionID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitalConjunctionID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalDebrisCloudID_Type:
      return extxml_uci::type::OrbitalDebrisCloudID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisCloudID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalDebrisEstimateID_Type:
      return extxml_uci::type::OrbitalDebrisEstimateID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisEstimateID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalDebrisEstimateMT:
      return extxml_uci::type::OrbitalDebrisEstimateMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisEstimateMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalDebrisEstimateRequestMDT:
      return extxml_uci::type::OrbitalDebrisEstimateRequestMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisEstimateRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalDebrisEstimateRequestMT:
      return extxml_uci::type::OrbitalDebrisEstimateRequestMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisEstimateRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalDebrisEstimateRequestStatusMDT:
      return extxml_uci::type::OrbitalDebrisEstimateRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisEstimateRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalDebrisEstimateRequestStatusMT:
      return extxml_uci::type::OrbitalDebrisEstimateRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisEstimateRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalDebrisID_Type:
      return extxml_uci::type::OrbitalDebrisID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitalDebrisID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalEphemerisRequestParametersType:
      return extxml_uci::type::OrbitalEphemerisRequestParametersType::deserialize(propTree, dynamic_cast<uci::type::OrbitalEphemerisRequestParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalFiltersQueryType:
      return extxml_uci::type::OrbitalFiltersQueryType::deserialize(propTree, dynamic_cast<uci::type::OrbitalFiltersQueryType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalManeuverDetailsBaseType:
      return extxml_uci::type::OrbitalManeuverDetailsBaseType::deserialize(propTree, dynamic_cast<uci::type::OrbitalManeuverDetailsBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalManeuverDetailsType:
      return extxml_uci::type::OrbitalManeuverDetailsType::deserialize(propTree, dynamic_cast<uci::type::OrbitalManeuverDetailsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalManeuverID_Type:
      return extxml_uci::type::OrbitalManeuverID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitalManeuverID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceActivityDetailType:
      return extxml_uci::type::OrbitalSurveillanceActivityDetailType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceActivityDetailType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceActivityMT:
      return extxml_uci::type::OrbitalSurveillanceActivityMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceActivityType:
      return extxml_uci::type::OrbitalSurveillanceActivityType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceCapabilityMDT:
      return extxml_uci::type::OrbitalSurveillanceCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceCapabilityMT:
      return extxml_uci::type::OrbitalSurveillanceCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceCapabilityStatusMDT:
      return extxml_uci::type::OrbitalSurveillanceCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceCapabilityStatusMT:
      return extxml_uci::type::OrbitalSurveillanceCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceCapabilityType:
      return extxml_uci::type::OrbitalSurveillanceCapabilityType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceObjectBaseType:
      return extxml_uci::type::OrbitalSurveillanceObjectBaseType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceObjectBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceObjectType:
      return extxml_uci::type::OrbitalSurveillanceObjectType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceObjectType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceSensorActivityMT:
      return extxml_uci::type::OrbitalSurveillanceSensorActivityMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceSensorActivityType:
      return extxml_uci::type::OrbitalSurveillanceSensorActivityType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityMDT:
      return extxml_uci::type::OrbitalSurveillanceSensorCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityMT:
      return extxml_uci::type::OrbitalSurveillanceSensorCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityStatusMDT:
      return extxml_uci::type::OrbitalSurveillanceSensorCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityStatusMT:
      return extxml_uci::type::OrbitalSurveillanceSensorCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceSensorCapabilityType:
      return extxml_uci::type::OrbitalSurveillanceSensorCapabilityType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceSensorTaskBaseType:
      return extxml_uci::type::OrbitalSurveillanceSensorTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorTaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceSensorTaskType:
      return extxml_uci::type::OrbitalSurveillanceSensorTaskType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceSensorTaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceTaskBaseType:
      return extxml_uci::type::OrbitalSurveillanceTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceTaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitalSurveillanceTaskType:
      return extxml_uci::type::OrbitalSurveillanceTaskType::deserialize(propTree, dynamic_cast<uci::type::OrbitalSurveillanceTaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitChangeActivityMT:
      return extxml_uci::type::OrbitChangeActivityMT::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitChangeActivityType:
      return extxml_uci::type::OrbitChangeActivityType::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitChangeCapabilityMDT:
      return extxml_uci::type::OrbitChangeCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitChangeCapabilityMT:
      return extxml_uci::type::OrbitChangeCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitChangeCapabilityStatusMDT:
      return extxml_uci::type::OrbitChangeCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitChangeCapabilityStatusMT:
      return extxml_uci::type::OrbitChangeCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitChangeCapabilityType:
      return extxml_uci::type::OrbitChangeCapabilityType::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitChangeTaskBaseType:
      return extxml_uci::type::OrbitChangeTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeTaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitChangeTaskType:
      return extxml_uci::type::OrbitChangeTaskType::deserialize(propTree, dynamic_cast<uci::type::OrbitChangeTaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitConjunctionAssessmentID_Type:
      return extxml_uci::type::OrbitConjunctionAssessmentID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitConjunctionAssessmentID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitConjunctionAssessmentMT:
      return extxml_uci::type::OrbitConjunctionAssessmentMT::deserialize(propTree, dynamic_cast<uci::type::OrbitConjunctionAssessmentMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitConjunctionAssessmentRequestMDT:
      return extxml_uci::type::OrbitConjunctionAssessmentRequestMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitConjunctionAssessmentRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitConjunctionAssessmentRequestMT:
      return extxml_uci::type::OrbitConjunctionAssessmentRequestMT::deserialize(propTree, dynamic_cast<uci::type::OrbitConjunctionAssessmentRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitConjunctionAssessmentRequestStatusMDT:
      return extxml_uci::type::OrbitConjunctionAssessmentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitConjunctionAssessmentRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitConjunctionAssessmentRequestStatusMT:
      return extxml_uci::type::OrbitConjunctionAssessmentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitConjunctionAssessmentRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitExecutionPlanSetType:
      return extxml_uci::type::OrbitExecutionPlanSetType::deserialize(propTree, dynamic_cast<uci::type::OrbitExecutionPlanSetType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitKinematicsParametersType:
      return extxml_uci::type::OrbitKinematicsParametersType::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitKinematicsSequenceID_Type:
      return extxml_uci::type::OrbitKinematicsSequenceID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsSequenceID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitKinematicsSequenceInsertionType:
      return extxml_uci::type::OrbitKinematicsSequenceInsertionType::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsSequenceInsertionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitKinematicsSequenceType:
      return extxml_uci::type::OrbitKinematicsSequenceType::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsSequenceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitKinematicsType:
      return extxml_uci::type::OrbitKinematicsType::deserialize(propTree, dynamic_cast<uci::type::OrbitKinematicsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitManeuverSegmentID_Type:
      return extxml_uci::type::OrbitManeuverSegmentID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitManeuverSegmentID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitMetricsID_Type:
      return extxml_uci::type::OrbitMetricsID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitMetricsID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitMetricsMT:
      return extxml_uci::type::OrbitMetricsMT::deserialize(propTree, dynamic_cast<uci::type::OrbitMetricsMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitMetricsRequestMDT:
      return extxml_uci::type::OrbitMetricsRequestMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitMetricsRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitMetricsRequestMT:
      return extxml_uci::type::OrbitMetricsRequestMT::deserialize(propTree, dynamic_cast<uci::type::OrbitMetricsRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitMetricsRequestStatusMDT:
      return extxml_uci::type::OrbitMetricsRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitMetricsRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitMetricsRequestStatusMT:
      return extxml_uci::type::OrbitMetricsRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitMetricsRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitModificationRequestMDT:
      return extxml_uci::type::OrbitModificationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitModificationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitModificationRequestMT:
      return extxml_uci::type::OrbitModificationRequestMT::deserialize(propTree, dynamic_cast<uci::type::OrbitModificationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitModificationRequestStatusMDT:
      return extxml_uci::type::OrbitModificationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitModificationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitModificationRequestStatusMT:
      return extxml_uci::type::OrbitModificationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitModificationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanApprovalStatusMT:
      return extxml_uci::type::OrbitPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanCommandID_Type:
      return extxml_uci::type::OrbitPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanCommandID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanCommandMT:
      return extxml_uci::type::OrbitPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanCommandStatusMT:
      return extxml_uci::type::OrbitPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanExecutionStatusMT:
      return extxml_uci::type::OrbitPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanID_Type:
      return extxml_uci::type::OrbitPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanInputsType:
      return extxml_uci::type::OrbitPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanMT:
      return extxml_uci::type::OrbitPlanMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanningCandidateType:
      return extxml_uci::type::OrbitPlanningCandidateType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanningCandidateType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanProcessDescriptionType:
      return extxml_uci::type::OrbitPlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanStatusMT:
      return extxml_uci::type::OrbitPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanStatusType:
      return extxml_uci::type::OrbitPlanStatusType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanValidationCommandMDT:
      return extxml_uci::type::OrbitPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanValidationCommandMT:
      return extxml_uci::type::OrbitPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanValidationCommandStatusMDT:
      return extxml_uci::type::OrbitPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanValidationCommandStatusMT:
      return extxml_uci::type::OrbitPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanValidationID_Type:
      return extxml_uci::type::OrbitPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanValidationInputsType:
      return extxml_uci::type::OrbitPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitPlanValidationMT:
      return extxml_uci::type::OrbitPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::OrbitPlanValidationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitSequenceCompletedType:
      return extxml_uci::type::OrbitSequenceCompletedType::deserialize(propTree, dynamic_cast<uci::type::OrbitSequenceCompletedType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orbitSequenceEstimateType:
      return extxml_uci::type::OrbitSequenceEstimateType::deserialize(propTree, dynamic_cast<uci::type::OrbitSequenceEstimateType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orderOfBattleC2_EmitterType:
      return extxml_uci::type::OrderOfBattleC2_EmitterType::deserialize(propTree, dynamic_cast<uci::type::OrderOfBattleC2_EmitterType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orderOfBattleEmitterType:
      return extxml_uci::type::OrderOfBattleEmitterType::deserialize(propTree, dynamic_cast<uci::type::OrderOfBattleEmitterType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orderOfBattleID_Type:
      return extxml_uci::type::OrderOfBattleID_Type::deserialize(propTree, dynamic_cast<uci::type::OrderOfBattleID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orderOfBattleMDT:
      return extxml_uci::type::OrderOfBattleMDT::deserialize(propTree, dynamic_cast<uci::type::OrderOfBattleMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::orderOfBattleMT:
      return extxml_uci::type::OrderOfBattleMT::deserialize(propTree, dynamic_cast<uci::type::OrderOfBattleMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::packageID_Type:
      return extxml_uci::type::PackageID_Type::deserialize(propTree, dynamic_cast<uci::type::PackageID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::packageMDT:
      return extxml_uci::type::PackageMDT::deserialize(propTree, dynamic_cast<uci::type::PackageMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::packageMT:
      return extxml_uci::type::PackageMT::deserialize(propTree, dynamic_cast<uci::type::PackageMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::packageStatusMT:
      return extxml_uci::type::PackageStatusMT::deserialize(propTree, dynamic_cast<uci::type::PackageStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::parameterID_Type:
      return extxml_uci::type::ParameterID_Type::deserialize(propTree, dynamic_cast<uci::type::ParameterID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pathID_Type:
      return extxml_uci::type::PathID_Type::deserialize(propTree, dynamic_cast<uci::type::PathID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pixelCountSettingsType:
      return extxml_uci::type::PixelCountSettingsType::deserialize(propTree, dynamic_cast<uci::type::PixelCountSettingsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pixelDataType:
      return extxml_uci::type::PixelDataType::deserialize(propTree, dynamic_cast<uci::type::PixelDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pixelOutputDataType:
      return extxml_uci::type::PixelOutputDataType::deserialize(propTree, dynamic_cast<uci::type::PixelOutputDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planInputsCoreType:
      return extxml_uci::type::PlanInputsCoreType::deserialize(propTree, dynamic_cast<uci::type::PlanInputsCoreType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planModificationRequestMDT:
      return extxml_uci::type::PlanModificationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::PlanModificationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planModificationRequestMT:
      return extxml_uci::type::PlanModificationRequestMT::deserialize(propTree, dynamic_cast<uci::type::PlanModificationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planModificationRequestStatusMDT:
      return extxml_uci::type::PlanModificationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::PlanModificationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planModificationRequestStatusMT:
      return extxml_uci::type::PlanModificationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::PlanModificationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::plannedActivityBaseType:
      return extxml_uci::type::PlannedActivityBaseType::deserialize(propTree, dynamic_cast<uci::type::PlannedActivityBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::plannedActivityExecutionStatusType:
      return extxml_uci::type::PlannedActivityExecutionStatusType::deserialize(propTree, dynamic_cast<uci::type::PlannedActivityExecutionStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::plannedActivityID_Type:
      return extxml_uci::type::PlannedActivityID_Type::deserialize(propTree, dynamic_cast<uci::type::PlannedActivityID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::plannedActivityTriggerType:
      return extxml_uci::type::PlannedActivityTriggerType::deserialize(propTree, dynamic_cast<uci::type::PlannedActivityTriggerType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::plannedActivityType:
      return extxml_uci::type::PlannedActivityType::deserialize(propTree, dynamic_cast<uci::type::PlannedActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::plannedCommActionExtendedType:
      return extxml_uci::type::PlannedCommActionExtendedType::deserialize(propTree, dynamic_cast<uci::type::PlannedCommActionExtendedType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::plannedCommActionType:
      return extxml_uci::type::PlannedCommActionType::deserialize(propTree, dynamic_cast<uci::type::PlannedCommActionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planningAllowedType:
      return extxml_uci::type::PlanningAllowedType::deserialize(propTree, dynamic_cast<uci::type::PlanningAllowedType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planningApplicabilitySystemType:
      return extxml_uci::type::PlanningApplicabilitySystemType::deserialize(propTree, dynamic_cast<uci::type::PlanningApplicabilitySystemType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planningCandidateBaseType:
      return extxml_uci::type::PlanningCandidateBaseType::deserialize(propTree, dynamic_cast<uci::type::PlanningCandidateBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planningDiscoveryBaseType:
      return extxml_uci::type::PlanningDiscoveryBaseType::deserialize(propTree, dynamic_cast<uci::type::PlanningDiscoveryBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planningFunctionID_Type:
      return extxml_uci::type::PlanningFunctionID_Type::deserialize(propTree, dynamic_cast<uci::type::PlanningFunctionID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planningFunctionMT:
      return extxml_uci::type::PlanningFunctionMT::deserialize(propTree, dynamic_cast<uci::type::PlanningFunctionMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planningFunctionSettingsCommandMDT:
      return extxml_uci::type::PlanningFunctionSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::PlanningFunctionSettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planningFunctionSettingsCommandMT:
      return extxml_uci::type::PlanningFunctionSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::PlanningFunctionSettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planningFunctionSettingsCommandStatusMDT:
      return extxml_uci::type::PlanningFunctionSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::PlanningFunctionSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planningFunctionSettingsCommandStatusMT:
      return extxml_uci::type::PlanningFunctionSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::PlanningFunctionSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planningFunctionStatusMT:
      return extxml_uci::type::PlanningFunctionStatusMT::deserialize(propTree, dynamic_cast<uci::type::PlanningFunctionStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planningInterfacesType:
      return extxml_uci::type::PlanningInterfacesType::deserialize(propTree, dynamic_cast<uci::type::PlanningInterfacesType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planningInterfaceType:
      return extxml_uci::type::PlanningInterfaceType::deserialize(propTree, dynamic_cast<uci::type::PlanningInterfaceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planningLocationType:
      return extxml_uci::type::PlanningLocationType::deserialize(propTree, dynamic_cast<uci::type::PlanningLocationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planningProcessID_Type:
      return extxml_uci::type::PlanningProcessID_Type::deserialize(propTree, dynamic_cast<uci::type::PlanningProcessID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planPartsBaseType:
      return extxml_uci::type::PlanPartsBaseType::deserialize(propTree, dynamic_cast<uci::type::PlanPartsBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planPartsType:
      return extxml_uci::type::PlanPartsType::deserialize(propTree, dynamic_cast<uci::type::PlanPartsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planScoresID_Type:
      return extxml_uci::type::PlanScoresID_Type::deserialize(propTree, dynamic_cast<uci::type::PlanScoresID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planScoresMT:
      return extxml_uci::type::PlanScoresMT::deserialize(propTree, dynamic_cast<uci::type::PlanScoresMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planScoresRequestMDT:
      return extxml_uci::type::PlanScoresRequestMDT::deserialize(propTree, dynamic_cast<uci::type::PlanScoresRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planScoresRequestMT:
      return extxml_uci::type::PlanScoresRequestMT::deserialize(propTree, dynamic_cast<uci::type::PlanScoresRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planScoresRequestStatusMDT:
      return extxml_uci::type::PlanScoresRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::PlanScoresRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planScoresRequestStatusMT:
      return extxml_uci::type::PlanScoresRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::PlanScoresRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::plansReferenceBaseType:
      return extxml_uci::type::PlansReferenceBaseType::deserialize(propTree, dynamic_cast<uci::type::PlansReferenceBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::plansReferenceType:
      return extxml_uci::type::PlansReferenceType::deserialize(propTree, dynamic_cast<uci::type::PlansReferenceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planStatusType:
      return extxml_uci::type::PlanStatusType::deserialize(propTree, dynamic_cast<uci::type::PlanStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::planValidationInputsBaseType:
      return extxml_uci::type::PlanValidationInputsBaseType::deserialize(propTree, dynamic_cast<uci::type::PlanValidationInputsBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::platformIdentityConfidenceType:
      return extxml_uci::type::PlatformIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::PlatformIdentityConfidenceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::platformIdentityType:
      return extxml_uci::type::PlatformIdentityType::deserialize(propTree, dynamic_cast<uci::type::PlatformIdentityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_ActivityCommandType:
      return extxml_uci::type::PO_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::PO_ActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_ActivityMT:
      return extxml_uci::type::PO_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::PO_ActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_ActivityType:
      return extxml_uci::type::PO_ActivityType::deserialize(propTree, dynamic_cast<uci::type::PO_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_ApertureID_Type:
      return extxml_uci::type::PO_ApertureID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_ApertureID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_CapabilityCommandType:
      return extxml_uci::type::PO_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::PO_CapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_CapabilityMDT:
      return extxml_uci::type::PO_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::PO_CapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_CapabilityMT:
      return extxml_uci::type::PO_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::PO_CapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_CapabilityStatusMDT:
      return extxml_uci::type::PO_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::PO_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_CapabilityStatusMT:
      return extxml_uci::type::PO_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::PO_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_CapabilityStatusType:
      return extxml_uci::type::PO_CapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::PO_CapabilityStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_CapabilityType:
      return extxml_uci::type::PO_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::PO_CapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_CollectionConstraintsType:
      return extxml_uci::type::PO_CollectionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::PO_CollectionConstraintsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_CommandMT:
      return extxml_uci::type::PO_CommandMT::deserialize(propTree, dynamic_cast<uci::type::PO_CommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_CommandStatusMDT:
      return extxml_uci::type::PO_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::PO_CommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_CommandStatusMT:
      return extxml_uci::type::PO_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::PO_CommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_FilterID_Type:
      return extxml_uci::type::PO_FilterID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_FilterID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_FPA_ChannelID_Type:
      return extxml_uci::type::PO_FPA_ChannelID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_FPA_ChannelID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_FPA_ID_Type:
      return extxml_uci::type::PO_FPA_ID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_FPA_ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_LensID_Type:
      return extxml_uci::type::PO_LensID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_LensID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_ProcessingStageID_Type:
      return extxml_uci::type::PO_ProcessingStageID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_ProcessingStageID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_ProductGeneratorID_Type:
      return extxml_uci::type::PO_ProductGeneratorID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_ProductGeneratorID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_ProductGeneratorOutputID_Type:
      return extxml_uci::type::PO_ProductGeneratorOutputID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_ProductGeneratorOutputID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_ProductOutputCommandImageryType:
      return extxml_uci::type::PO_ProductOutputCommandImageryType::deserialize(propTree, dynamic_cast<uci::type::PO_ProductOutputCommandImageryType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_SettingsCommandMDT:
      return extxml_uci::type::PO_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::PO_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_SettingsCommandMT:
      return extxml_uci::type::PO_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::PO_SettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_SettingsCommandStatusMDT:
      return extxml_uci::type::PO_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::PO_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_SettingsCommandStatusMT:
      return extxml_uci::type::PO_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::PO_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_TaskBaseType:
      return extxml_uci::type::PO_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::PO_TaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_TaskType:
      return extxml_uci::type::PO_TaskType::deserialize(propTree, dynamic_cast<uci::type::PO_TaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pO_WindowID_Type:
      return extxml_uci::type::PO_WindowID_Type::deserialize(propTree, dynamic_cast<uci::type::PO_WindowID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::point2D_ReportedType:
      return extxml_uci::type::Point2D_ReportedType::deserialize(propTree, dynamic_cast<uci::type::Point2D_ReportedType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::point2D_Type:
      return extxml_uci::type::Point2D_Type::deserialize(propTree, dynamic_cast<uci::type::Point2D_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::point3D_Type:
      return extxml_uci::type::Point3D_Type::deserialize(propTree, dynamic_cast<uci::type::Point3D_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::positionAndVelocityCovarianceType:
      return extxml_uci::type::PositionAndVelocityCovarianceType::deserialize(propTree, dynamic_cast<uci::type::PositionAndVelocityCovarianceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::positionReportDetailedMT:
      return extxml_uci::type::PositionReportDetailedMT::deserialize(propTree, dynamic_cast<uci::type::PositionReportDetailedMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::positionReportMT:
      return extxml_uci::type::PositionReportMT::deserialize(propTree, dynamic_cast<uci::type::PositionReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pRI_DataBaseType:
      return extxml_uci::type::PRI_DataBaseType::deserialize(propTree, dynamic_cast<uci::type::PRI_DataBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pRI_DataType:
      return extxml_uci::type::PRI_DataType::deserialize(propTree, dynamic_cast<uci::type::PRI_DataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::prioritizationListID_Type:
      return extxml_uci::type::PrioritizationListID_Type::deserialize(propTree, dynamic_cast<uci::type::PrioritizationListID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::prioritizationListMDT:
      return extxml_uci::type::PrioritizationListMDT::deserialize(propTree, dynamic_cast<uci::type::PrioritizationListMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::prioritizationListMT:
      return extxml_uci::type::PrioritizationListMT::deserialize(propTree, dynamic_cast<uci::type::PrioritizationListMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::processingConstrainedSubPlanType:
      return extxml_uci::type::ProcessingConstrainedSubPlanType::deserialize(propTree, dynamic_cast<uci::type::ProcessingConstrainedSubPlanType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::processingParametersPET:
      return extxml_uci::type::ProcessingParametersPET::deserialize(propTree, dynamic_cast<uci::type::ProcessingParametersPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::processingResultsPET:
      return extxml_uci::type::ProcessingResultsPET::deserialize(propTree, dynamic_cast<uci::type::ProcessingResultsPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productClassificationPlanID_Type:
      return extxml_uci::type::ProductClassificationPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productClassificationPlanMT:
      return extxml_uci::type::ProductClassificationPlanMT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productClassificationReportID_Type:
      return extxml_uci::type::ProductClassificationReportID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productClassificationReportMT:
      return extxml_uci::type::ProductClassificationReportMT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productClassificationRequestMDT:
      return extxml_uci::type::ProductClassificationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productClassificationRequestMT:
      return extxml_uci::type::ProductClassificationRequestMT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productClassificationRequestStatusMDT:
      return extxml_uci::type::ProductClassificationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productClassificationRequestStatusMT:
      return extxml_uci::type::ProductClassificationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productClassificationTaskMDT:
      return extxml_uci::type::ProductClassificationTaskMDT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationTaskMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productClassificationTaskMT:
      return extxml_uci::type::ProductClassificationTaskMT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationTaskMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productClassificationTaskStatusMDT:
      return extxml_uci::type::ProductClassificationTaskStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationTaskStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productClassificationTaskStatusMT:
      return extxml_uci::type::ProductClassificationTaskStatusMT::deserialize(propTree, dynamic_cast<uci::type::ProductClassificationTaskStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productCollectionPathType:
      return extxml_uci::type::ProductCollectionPathType::deserialize(propTree, dynamic_cast<uci::type::ProductCollectionPathType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationConfigurationID_Type:
      return extxml_uci::type::ProductDisseminationConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationConfigurationMDT:
      return extxml_uci::type::ProductDisseminationConfigurationMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationConfigurationMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationConfigurationMT:
      return extxml_uci::type::ProductDisseminationConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationConfigurationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationDestinationID_Type:
      return extxml_uci::type::ProductDisseminationDestinationID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationDestinationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationDestinationMDT:
      return extxml_uci::type::ProductDisseminationDestinationMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationDestinationMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationDestinationMT:
      return extxml_uci::type::ProductDisseminationDestinationMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationDestinationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationPlanID_Type:
      return extxml_uci::type::ProductDisseminationPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationPlanMT:
      return extxml_uci::type::ProductDisseminationPlanMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationReportID_Type:
      return extxml_uci::type::ProductDisseminationReportID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationReportMT:
      return extxml_uci::type::ProductDisseminationReportMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationRequestMDT:
      return extxml_uci::type::ProductDisseminationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationRequestMT:
      return extxml_uci::type::ProductDisseminationRequestMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationRequestStatusMDT:
      return extxml_uci::type::ProductDisseminationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationRequestStatusMT:
      return extxml_uci::type::ProductDisseminationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationTaskMDT:
      return extxml_uci::type::ProductDisseminationTaskMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationTaskMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationTaskMT:
      return extxml_uci::type::ProductDisseminationTaskMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationTaskMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationTaskStatusMDT:
      return extxml_uci::type::ProductDisseminationTaskStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationTaskStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDisseminationTaskStatusMT:
      return extxml_uci::type::ProductDisseminationTaskStatusMT::deserialize(propTree, dynamic_cast<uci::type::ProductDisseminationTaskStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDownloadPlanID_Type:
      return extxml_uci::type::ProductDownloadPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductDownloadPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDownloadPlanMT:
      return extxml_uci::type::ProductDownloadPlanMT::deserialize(propTree, dynamic_cast<uci::type::ProductDownloadPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDownloadReportID_Type:
      return extxml_uci::type::ProductDownloadReportID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductDownloadReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDownloadReportMT:
      return extxml_uci::type::ProductDownloadReportMT::deserialize(propTree, dynamic_cast<uci::type::ProductDownloadReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDownloadRequestMDT:
      return extxml_uci::type::ProductDownloadRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDownloadRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDownloadRequestMT:
      return extxml_uci::type::ProductDownloadRequestMT::deserialize(propTree, dynamic_cast<uci::type::ProductDownloadRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDownloadRequestStatusMDT:
      return extxml_uci::type::ProductDownloadRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDownloadRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDownloadRequestStatusMT:
      return extxml_uci::type::ProductDownloadRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ProductDownloadRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDownloadTaskMDT:
      return extxml_uci::type::ProductDownloadTaskMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDownloadTaskMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDownloadTaskMT:
      return extxml_uci::type::ProductDownloadTaskMT::deserialize(propTree, dynamic_cast<uci::type::ProductDownloadTaskMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDownloadTaskStatusMDT:
      return extxml_uci::type::ProductDownloadTaskStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ProductDownloadTaskStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productDownloadTaskStatusMT:
      return extxml_uci::type::ProductDownloadTaskStatusMT::deserialize(propTree, dynamic_cast<uci::type::ProductDownloadTaskStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productLocationID_Type:
      return extxml_uci::type::ProductLocationID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductLocationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productLocationMDT:
      return extxml_uci::type::ProductLocationMDT::deserialize(propTree, dynamic_cast<uci::type::ProductLocationMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productLocationMT:
      return extxml_uci::type::ProductLocationMT::deserialize(propTree, dynamic_cast<uci::type::ProductLocationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productManagementTaskDataType:
      return extxml_uci::type::ProductManagementTaskDataType::deserialize(propTree, dynamic_cast<uci::type::ProductManagementTaskDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productManagementTaskStatusDataType:
      return extxml_uci::type::ProductManagementTaskStatusDataType::deserialize(propTree, dynamic_cast<uci::type::ProductManagementTaskStatusDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productMetadataID_Type:
      return extxml_uci::type::ProductMetadataID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductMetadataID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productMetadataMDT:
      return extxml_uci::type::ProductMetadataMDT::deserialize(propTree, dynamic_cast<uci::type::ProductMetadataMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productMetadataMT:
      return extxml_uci::type::ProductMetadataMT::deserialize(propTree, dynamic_cast<uci::type::ProductMetadataMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productOutputCapabilityImageryType:
      return extxml_uci::type::ProductOutputCapabilityImageryType::deserialize(propTree, dynamic_cast<uci::type::ProductOutputCapabilityImageryType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productOutputCapabilityStatusImageryType:
      return extxml_uci::type::ProductOutputCapabilityStatusImageryType::deserialize(propTree, dynamic_cast<uci::type::ProductOutputCapabilityStatusImageryType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productOutputCommandBasicType:
      return extxml_uci::type::ProductOutputCommandBasicType::deserialize(propTree, dynamic_cast<uci::type::ProductOutputCommandBasicType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productOutputCommandImageryType:
      return extxml_uci::type::ProductOutputCommandImageryType::deserialize(propTree, dynamic_cast<uci::type::ProductOutputCommandImageryType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productOutputCommandSMTI_Type:
      return extxml_uci::type::ProductOutputCommandSMTI_Type::deserialize(propTree, dynamic_cast<uci::type::ProductOutputCommandSMTI_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productOutputStatusType:
      return extxml_uci::type::ProductOutputStatusType::deserialize(propTree, dynamic_cast<uci::type::ProductOutputStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productOutputType:
      return extxml_uci::type::ProductOutputType::deserialize(propTree, dynamic_cast<uci::type::ProductOutputType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingClassificationType:
      return extxml_uci::type::ProductProcessingClassificationType::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingClassificationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingFunctionMT:
      return extxml_uci::type::ProductProcessingFunctionMT::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingFunctionMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingFunctionStatusMT:
      return extxml_uci::type::ProductProcessingFunctionStatusMT::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingFunctionStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingPlanID_Type:
      return extxml_uci::type::ProductProcessingPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingPlanMT:
      return extxml_uci::type::ProductProcessingPlanMT::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingReportID_Type:
      return extxml_uci::type::ProductProcessingReportID_Type::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingReportMT:
      return extxml_uci::type::ProductProcessingReportMT::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingRequestMDT:
      return extxml_uci::type::ProductProcessingRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingRequestMT:
      return extxml_uci::type::ProductProcessingRequestMT::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingRequestStatusMDT:
      return extxml_uci::type::ProductProcessingRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingRequestStatusMT:
      return extxml_uci::type::ProductProcessingRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingTaskMDT:
      return extxml_uci::type::ProductProcessingTaskMDT::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingTaskMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingTaskMT:
      return extxml_uci::type::ProductProcessingTaskMT::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingTaskMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingTaskStatusMDT:
      return extxml_uci::type::ProductProcessingTaskStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingTaskStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingTaskStatusMT:
      return extxml_uci::type::ProductProcessingTaskStatusMT::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingTaskStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productProcessingType:
      return extxml_uci::type::ProductProcessingType::deserialize(propTree, dynamic_cast<uci::type::ProductProcessingType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productRateSettingsType:
      return extxml_uci::type::ProductRateSettingsType::deserialize(propTree, dynamic_cast<uci::type::ProductRateSettingsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::productSizeSettingsType:
      return extxml_uci::type::ProductSizeSettingsType::deserialize(propTree, dynamic_cast<uci::type::ProductSizeSettingsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::propagatorSettingsDataRequestMDT:
      return extxml_uci::type::PropagatorSettingsDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::PropagatorSettingsDataRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::propagatorSettingsDataRequestMT:
      return extxml_uci::type::PropagatorSettingsDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::PropagatorSettingsDataRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::propagatorSettingsDataRequestStatusMDT:
      return extxml_uci::type::PropagatorSettingsDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::PropagatorSettingsDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::propagatorSettingsDataRequestStatusMT:
      return extxml_uci::type::PropagatorSettingsDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::PropagatorSettingsDataRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::propagatorSettingsID_Type:
      return extxml_uci::type::PropagatorSettingsID_Type::deserialize(propTree, dynamic_cast<uci::type::PropagatorSettingsID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::propagatorSettingsMT:
      return extxml_uci::type::PropagatorSettingsMT::deserialize(propTree, dynamic_cast<uci::type::PropagatorSettingsMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::proximityOperationsType:
      return extxml_uci::type::ProximityOperationsType::deserialize(propTree, dynamic_cast<uci::type::ProximityOperationsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pulseDataID_Type:
      return extxml_uci::type::PulseDataID_Type::deserialize(propTree, dynamic_cast<uci::type::PulseDataID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pulseDataMT:
      return extxml_uci::type::PulseDataMT::deserialize(propTree, dynamic_cast<uci::type::PulseDataMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::pumpComponentExtendedStatusType:
      return extxml_uci::type::PumpComponentExtendedStatusType::deserialize(propTree, dynamic_cast<uci::type::PumpComponentExtendedStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::queryDataRequestMDT:
      return extxml_uci::type::QueryDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::QueryDataRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::queryDataRequestMT:
      return extxml_uci::type::QueryDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::QueryDataRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::queryDataRequestStatusMDT:
      return extxml_uci::type::QueryDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::QueryDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::queryDataRequestStatusMT:
      return extxml_uci::type::QueryDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::QueryDataRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::queryPET:
      return extxml_uci::type::QueryPET::deserialize(propTree, dynamic_cast<uci::type::QueryPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::querySpecificDataPET:
      return extxml_uci::type::QuerySpecificDataPET::deserialize(propTree, dynamic_cast<uci::type::QuerySpecificDataPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::queryType:
      return extxml_uci::type::QueryType::deserialize(propTree, dynamic_cast<uci::type::QueryType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarActivityCommandType:
      return extxml_uci::type::RadarActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::RadarActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterActivityCommandType:
      return extxml_uci::type::RadarAltimeterActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterActivityMT:
      return extxml_uci::type::RadarAltimeterActivityMT::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterActivityType:
      return extxml_uci::type::RadarAltimeterActivityType::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterCapabilityCommandType:
      return extxml_uci::type::RadarAltimeterCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterCapabilityMDT:
      return extxml_uci::type::RadarAltimeterCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterCapabilityMT:
      return extxml_uci::type::RadarAltimeterCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterCapabilityStatusMDT:
      return extxml_uci::type::RadarAltimeterCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterCapabilityStatusMT:
      return extxml_uci::type::RadarAltimeterCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterCapabilityType:
      return extxml_uci::type::RadarAltimeterCapabilityType::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterCollectionOptionsType:
      return extxml_uci::type::RadarAltimeterCollectionOptionsType::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterCollectionOptionsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterCommandMT:
      return extxml_uci::type::RadarAltimeterCommandMT::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterCommandStatusMDT:
      return extxml_uci::type::RadarAltimeterCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterCommandStatusMT:
      return extxml_uci::type::RadarAltimeterCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterReportID_Type:
      return extxml_uci::type::RadarAltimeterReportID_Type::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterReportMT:
      return extxml_uci::type::RadarAltimeterReportMT::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterSettingsCommandMDT:
      return extxml_uci::type::RadarAltimeterSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterSettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterSettingsCommandMT:
      return extxml_uci::type::RadarAltimeterSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterSettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterSettingsCommandStatusMDT:
      return extxml_uci::type::RadarAltimeterSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarAltimeterSettingsCommandStatusMT:
      return extxml_uci::type::RadarAltimeterSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RadarAltimeterSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::radarCollectionOptionsType:
      return extxml_uci::type::RadarCollectionOptionsType::deserialize(propTree, dynamic_cast<uci::type::RadarCollectionOptionsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rDMA_InitializeID_Type:
      return extxml_uci::type::RDMA_InitializeID_Type::deserialize(propTree, dynamic_cast<uci::type::RDMA_InitializeID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rDMA_InitializeMT:
      return extxml_uci::type::RDMA_InitializeMT::deserialize(propTree, dynamic_cast<uci::type::RDMA_InitializeMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rDMA_InitializeSetupID_Type:
      return extxml_uci::type::RDMA_InitializeSetupID_Type::deserialize(propTree, dynamic_cast<uci::type::RDMA_InitializeSetupID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rDMA_InitializeSetupMT:
      return extxml_uci::type::RDMA_InitializeSetupMT::deserialize(propTree, dynamic_cast<uci::type::RDMA_InitializeSetupMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rectangleType:
      return extxml_uci::type::RectangleType::deserialize(propTree, dynamic_cast<uci::type::RectangleType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::referenceActivityMT:
      return extxml_uci::type::ReferenceActivityMT::deserialize(propTree, dynamic_cast<uci::type::ReferenceActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::referenceActivityType:
      return extxml_uci::type::ReferenceActivityType::deserialize(propTree, dynamic_cast<uci::type::ReferenceActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::referenceCapabilityMDT:
      return extxml_uci::type::ReferenceCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::ReferenceCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::referenceCapabilityMT:
      return extxml_uci::type::ReferenceCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::ReferenceCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::referenceCapabilityStatusMDT:
      return extxml_uci::type::ReferenceCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ReferenceCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::referenceCapabilityStatusMT:
      return extxml_uci::type::ReferenceCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::ReferenceCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::referenceCapabilityType:
      return extxml_uci::type::ReferenceCapabilityType::deserialize(propTree, dynamic_cast<uci::type::ReferenceCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::referenceFrameID_Type:
      return extxml_uci::type::ReferenceFrameID_Type::deserialize(propTree, dynamic_cast<uci::type::ReferenceFrameID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::referenceFrameMT:
      return extxml_uci::type::ReferenceFrameMT::deserialize(propTree, dynamic_cast<uci::type::ReferenceFrameMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelActivityCommandType:
      return extxml_uci::type::RefuelActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::RefuelActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelActivityMT:
      return extxml_uci::type::RefuelActivityMT::deserialize(propTree, dynamic_cast<uci::type::RefuelActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelActivityType:
      return extxml_uci::type::RefuelActivityType::deserialize(propTree, dynamic_cast<uci::type::RefuelActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelCapabilityDrogueCommandType:
      return extxml_uci::type::RefuelCapabilityDrogueCommandType::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityDrogueCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelCapabilityDrogueCommonType:
      return extxml_uci::type::RefuelCapabilityDrogueCommonType::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityDrogueCommonType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelCapabilityDrogueStatusType:
      return extxml_uci::type::RefuelCapabilityDrogueStatusType::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityDrogueStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelCapabilityExtendCommandType:
      return extxml_uci::type::RefuelCapabilityExtendCommandType::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityExtendCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelCapabilityMDT:
      return extxml_uci::type::RefuelCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelCapabilityMT:
      return extxml_uci::type::RefuelCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelCapabilityStatusMDT:
      return extxml_uci::type::RefuelCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelCapabilityStatusMT:
      return extxml_uci::type::RefuelCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelCapabilityType:
      return extxml_uci::type::RefuelCapabilityType::deserialize(propTree, dynamic_cast<uci::type::RefuelCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelCommandMT:
      return extxml_uci::type::RefuelCommandMT::deserialize(propTree, dynamic_cast<uci::type::RefuelCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelCommandStatusMDT:
      return extxml_uci::type::RefuelCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RefuelCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelCommandStatusMT:
      return extxml_uci::type::RefuelCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RefuelCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelSettingsCommandMDT:
      return extxml_uci::type::RefuelSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RefuelSettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelSettingsCommandMT:
      return extxml_uci::type::RefuelSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::RefuelSettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelSettingsCommandStatusMDT:
      return extxml_uci::type::RefuelSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RefuelSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelSettingsCommandStatusMT:
      return extxml_uci::type::RefuelSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RefuelSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelTaskBaseType:
      return extxml_uci::type::RefuelTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::RefuelTaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::refuelTaskType:
      return extxml_uci::type::RefuelTaskType::deserialize(propTree, dynamic_cast<uci::type::RefuelTaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::relationshipDesignationID_Type:
      return extxml_uci::type::RelationshipDesignationID_Type::deserialize(propTree, dynamic_cast<uci::type::RelationshipDesignationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::relationshipDesignationMDT:
      return extxml_uci::type::RelationshipDesignationMDT::deserialize(propTree, dynamic_cast<uci::type::RelationshipDesignationMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::relationshipDesignationMT:
      return extxml_uci::type::RelationshipDesignationMT::deserialize(propTree, dynamic_cast<uci::type::RelationshipDesignationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requestBaseType:
      return extxml_uci::type::RequestBaseType::deserialize(propTree, dynamic_cast<uci::type::RequestBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requestID_Type:
      return extxml_uci::type::RequestID_Type::deserialize(propTree, dynamic_cast<uci::type::RequestID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requestStatusBaseType:
      return extxml_uci::type::RequestStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::RequestStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementAllocationBaseType:
      return extxml_uci::type::RequirementAllocationBaseType::deserialize(propTree, dynamic_cast<uci::type::RequirementAllocationBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementAllocationWindowID_Type:
      return extxml_uci::type::RequirementAllocationWindowID_Type::deserialize(propTree, dynamic_cast<uci::type::RequirementAllocationWindowID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementDependencyBaseType:
      return extxml_uci::type::RequirementDependencyBaseType::deserialize(propTree, dynamic_cast<uci::type::RequirementDependencyBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementDependencyType:
      return extxml_uci::type::RequirementDependencyType::deserialize(propTree, dynamic_cast<uci::type::RequirementDependencyType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementExecutionApprovalStatusBaseType:
      return extxml_uci::type::RequirementExecutionApprovalStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::RequirementExecutionApprovalStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementExecutionStatusDetailsType:
      return extxml_uci::type::RequirementExecutionStatusDetailsType::deserialize(propTree, dynamic_cast<uci::type::RequirementExecutionStatusDetailsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementFailedTriggerType:
      return extxml_uci::type::RequirementFailedTriggerType::deserialize(propTree, dynamic_cast<uci::type::RequirementFailedTriggerType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementGenerationDependencyType:
      return extxml_uci::type::RequirementGenerationDependencyType::deserialize(propTree, dynamic_cast<uci::type::RequirementGenerationDependencyType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementMetricsID_Type:
      return extxml_uci::type::RequirementMetricsID_Type::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementMetricsMT:
      return extxml_uci::type::RequirementMetricsMT::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementMetricsReportType:
      return extxml_uci::type::RequirementMetricsReportType::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsReportType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementMetricsRequestMDT:
      return extxml_uci::type::RequirementMetricsRequestMDT::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementMetricsRequestMT:
      return extxml_uci::type::RequirementMetricsRequestMT::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementMetricsRequestStatusMDT:
      return extxml_uci::type::RequirementMetricsRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementMetricsRequestStatusMT:
      return extxml_uci::type::RequirementMetricsRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::RequirementMetricsRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementOptionsCommandMDT:
      return extxml_uci::type::RequirementOptionsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RequirementOptionsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementOptionsCommandMT:
      return extxml_uci::type::RequirementOptionsCommandMT::deserialize(propTree, dynamic_cast<uci::type::RequirementOptionsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementOptionsCommandStatusMT:
      return extxml_uci::type::RequirementOptionsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RequirementOptionsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementOptionsID_Type:
      return extxml_uci::type::RequirementOptionsID_Type::deserialize(propTree, dynamic_cast<uci::type::RequirementOptionsID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementOptionsMT:
      return extxml_uci::type::RequirementOptionsMT::deserialize(propTree, dynamic_cast<uci::type::RequirementOptionsMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementPlanningCandidateType:
      return extxml_uci::type::RequirementPlanningCandidateType::deserialize(propTree, dynamic_cast<uci::type::RequirementPlanningCandidateType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementPlanningResultBaseType:
      return extxml_uci::type::RequirementPlanningResultBaseType::deserialize(propTree, dynamic_cast<uci::type::RequirementPlanningResultBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementPlanningResultType:
      return extxml_uci::type::RequirementPlanningResultType::deserialize(propTree, dynamic_cast<uci::type::RequirementPlanningResultType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementPlanningStatusDetailsType:
      return extxml_uci::type::RequirementPlanningStatusDetailsType::deserialize(propTree, dynamic_cast<uci::type::RequirementPlanningStatusDetailsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementSetID_Type:
      return extxml_uci::type::RequirementSetID_Type::deserialize(propTree, dynamic_cast<uci::type::RequirementSetID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementSetMDT:
      return extxml_uci::type::RequirementSetMDT::deserialize(propTree, dynamic_cast<uci::type::RequirementSetMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementSetMT:
      return extxml_uci::type::RequirementSetMT::deserialize(propTree, dynamic_cast<uci::type::RequirementSetMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementsReferenceLockableType:
      return extxml_uci::type::RequirementsReferenceLockableType::deserialize(propTree, dynamic_cast<uci::type::RequirementsReferenceLockableType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementsReferenceType:
      return extxml_uci::type::RequirementsReferenceType::deserialize(propTree, dynamic_cast<uci::type::RequirementsReferenceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementsTemplateID_Type:
      return extxml_uci::type::RequirementsTemplateID_Type::deserialize(propTree, dynamic_cast<uci::type::RequirementsTemplateID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementTaxonomyDetailedType:
      return extxml_uci::type::RequirementTaxonomyDetailedType::deserialize(propTree, dynamic_cast<uci::type::RequirementTaxonomyDetailedType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementTaxonomyType:
      return extxml_uci::type::RequirementTaxonomyType::deserialize(propTree, dynamic_cast<uci::type::RequirementTaxonomyType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::requirementTriggerType:
      return extxml_uci::type::RequirementTriggerType::deserialize(propTree, dynamic_cast<uci::type::RequirementTriggerType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::resendDataRequestMDT:
      return extxml_uci::type::ResendDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ResendDataRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::resendDataRequestMT:
      return extxml_uci::type::ResendDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::ResendDataRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::resendDataRequestStatusMDT:
      return extxml_uci::type::ResendDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResendDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::resendDataRequestStatusMT:
      return extxml_uci::type::ResendDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResendDataRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseActivityMT:
      return extxml_uci::type::ResponseActivityMT::deserialize(propTree, dynamic_cast<uci::type::ResponseActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseActivityType:
      return extxml_uci::type::ResponseActivityType::deserialize(propTree, dynamic_cast<uci::type::ResponseActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseAllocationType:
      return extxml_uci::type::ResponseAllocationType::deserialize(propTree, dynamic_cast<uci::type::ResponseAllocationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseCancelCommandMDT:
      return extxml_uci::type::ResponseCancelCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseCancelCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseCancelCommandMT:
      return extxml_uci::type::ResponseCancelCommandMT::deserialize(propTree, dynamic_cast<uci::type::ResponseCancelCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseCancelCommandStatusMDT:
      return extxml_uci::type::ResponseCancelCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseCancelCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseCancelCommandStatusMT:
      return extxml_uci::type::ResponseCancelCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponseCancelCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseCapabilityCommandType:
      return extxml_uci::type::ResponseCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::ResponseCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseCapabilityMDT:
      return extxml_uci::type::ResponseCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseCapabilityMT:
      return extxml_uci::type::ResponseCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::ResponseCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseCapabilityStatusMDT:
      return extxml_uci::type::ResponseCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseCapabilityStatusMT:
      return extxml_uci::type::ResponseCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponseCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseCapabilityType:
      return extxml_uci::type::ResponseCapabilityType::deserialize(propTree, dynamic_cast<uci::type::ResponseCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseCommandMT:
      return extxml_uci::type::ResponseCommandMT::deserialize(propTree, dynamic_cast<uci::type::ResponseCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseCommandStatusMDT:
      return extxml_uci::type::ResponseCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseCommandStatusMT:
      return extxml_uci::type::ResponseCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponseCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseExecutionApprovalStatusMDT:
      return extxml_uci::type::ResponseExecutionApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseExecutionApprovalStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseExecutionApprovalStatusMT:
      return extxml_uci::type::ResponseExecutionApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponseExecutionApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseID_Type:
      return extxml_uci::type::ResponseID_Type::deserialize(propTree, dynamic_cast<uci::type::ResponseID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseMT:
      return extxml_uci::type::ResponseMT::deserialize(propTree, dynamic_cast<uci::type::ResponseMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanApprovalStatusMT:
      return extxml_uci::type::ResponsePlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanCommandID_Type:
      return extxml_uci::type::ResponsePlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanCommandID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanCommandMT:
      return extxml_uci::type::ResponsePlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanCommandStatusMT:
      return extxml_uci::type::ResponsePlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanExecutionStatusMT:
      return extxml_uci::type::ResponsePlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanID_Type:
      return extxml_uci::type::ResponsePlanID_Type::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanInputsType:
      return extxml_uci::type::ResponsePlanInputsType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanMT:
      return extxml_uci::type::ResponsePlanMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanningResultType:
      return extxml_uci::type::ResponsePlanningResultType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanningResultType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanningStatusMDT:
      return extxml_uci::type::ResponsePlanningStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanningStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanningStatusMT:
      return extxml_uci::type::ResponsePlanningStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanningStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanProcessDescriptionType:
      return extxml_uci::type::ResponsePlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanStatusMT:
      return extxml_uci::type::ResponsePlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanValidationCommandMDT:
      return extxml_uci::type::ResponsePlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanValidationCommandMT:
      return extxml_uci::type::ResponsePlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanValidationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanValidationCommandStatusMDT:
      return extxml_uci::type::ResponsePlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanValidationCommandStatusMT:
      return extxml_uci::type::ResponsePlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanValidationID_Type:
      return extxml_uci::type::ResponsePlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanValidationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanValidationInputsType:
      return extxml_uci::type::ResponsePlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanValidationInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responsePlanValidationMT:
      return extxml_uci::type::ResponsePlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::ResponsePlanValidationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseStatusMDT:
      return extxml_uci::type::ResponseStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ResponseStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::responseStatusMT:
      return extxml_uci::type::ResponseStatusMT::deserialize(propTree, dynamic_cast<uci::type::ResponseStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ControlCommandMDT:
      return extxml_uci::type::RF_ControlCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RF_ControlCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ControlCommandMT:
      return extxml_uci::type::RF_ControlCommandMT::deserialize(propTree, dynamic_cast<uci::type::RF_ControlCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ControlCommandStatusMDT:
      return extxml_uci::type::RF_ControlCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RF_ControlCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ControlCommandStatusMT:
      return extxml_uci::type::RF_ControlCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RF_ControlCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ProfileID_Type:
      return extxml_uci::type::RF_ProfileID_Type::deserialize(propTree, dynamic_cast<uci::type::RF_ProfileID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ProfileMT:
      return extxml_uci::type::RF_ProfileMT::deserialize(propTree, dynamic_cast<uci::type::RF_ProfileMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ReportID_Type:
      return extxml_uci::type::RF_ReportID_Type::deserialize(propTree, dynamic_cast<uci::type::RF_ReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ReportMT:
      return extxml_uci::type::RF_ReportMT::deserialize(propTree, dynamic_cast<uci::type::RF_ReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ResourceAllocationID_Type:
      return extxml_uci::type::RF_ResourceAllocationID_Type::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ResourceAllocationMT:
      return extxml_uci::type::RF_ResourceAllocationMT::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ResourceAllocationRequestMDT:
      return extxml_uci::type::RF_ResourceAllocationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ResourceAllocationRequestMT:
      return extxml_uci::type::RF_ResourceAllocationRequestMT::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ResourceAllocationRequestStatusMDT:
      return extxml_uci::type::RF_ResourceAllocationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ResourceAllocationRequestStatusMT:
      return extxml_uci::type::RF_ResourceAllocationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::RF_ResourceAllocationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ThreadInstanceSetupCommandMDT:
      return extxml_uci::type::RF_ThreadInstanceSetupCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RF_ThreadInstanceSetupCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ThreadInstanceSetupCommandMT:
      return extxml_uci::type::RF_ThreadInstanceSetupCommandMT::deserialize(propTree, dynamic_cast<uci::type::RF_ThreadInstanceSetupCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ThreadInstanceSetupCommandStatusMDT:
      return extxml_uci::type::RF_ThreadInstanceSetupCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RF_ThreadInstanceSetupCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rF_ThreadInstanceSetupCommandStatusMT:
      return extxml_uci::type::RF_ThreadInstanceSetupCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RF_ThreadInstanceSetupCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rFD_ComponentIdentifierType:
      return extxml_uci::type::RFD_ComponentIdentifierType::deserialize(propTree, dynamic_cast<uci::type::RFD_ComponentIdentifierType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityExecutionStatusType:
      return extxml_uci::type::RouteActivityExecutionStatusType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityExecutionStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanApprovalStatusMT:
      return extxml_uci::type::RouteActivityPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanCommandID_Type:
      return extxml_uci::type::RouteActivityPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanCommandID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanCommandMT:
      return extxml_uci::type::RouteActivityPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanCommandStatusMT:
      return extxml_uci::type::RouteActivityPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanExecutionStatusMT:
      return extxml_uci::type::RouteActivityPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanID_Type:
      return extxml_uci::type::RouteActivityPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanInputsType:
      return extxml_uci::type::RouteActivityPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanMT:
      return extxml_uci::type::RouteActivityPlanMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanStatusMT:
      return extxml_uci::type::RouteActivityPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanStatusType:
      return extxml_uci::type::RouteActivityPlanStatusType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanValidationCommandMDT:
      return extxml_uci::type::RouteActivityPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanValidationCommandMT:
      return extxml_uci::type::RouteActivityPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanValidationCommandStatusMDT:
      return extxml_uci::type::RouteActivityPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanValidationCommandStatusMT:
      return extxml_uci::type::RouteActivityPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanValidationID_Type:
      return extxml_uci::type::RouteActivityPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanValidationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanValidationInputsType:
      return extxml_uci::type::RouteActivityPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanValidationInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityPlanValidationMT:
      return extxml_uci::type::RouteActivityPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::RouteActivityPlanValidationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeActivityType:
      return extxml_uci::type::RouteActivityType::deserialize(propTree, dynamic_cast<uci::type::RouteActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeExecutionPlanSetType:
      return extxml_uci::type::RouteExecutionPlanSetType::deserialize(propTree, dynamic_cast<uci::type::RouteExecutionPlanSetType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeMetricsID_Type:
      return extxml_uci::type::RouteMetricsID_Type::deserialize(propTree, dynamic_cast<uci::type::RouteMetricsID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeMetricsMT:
      return extxml_uci::type::RouteMetricsMT::deserialize(propTree, dynamic_cast<uci::type::RouteMetricsMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeMetricsRequestMDT:
      return extxml_uci::type::RouteMetricsRequestMDT::deserialize(propTree, dynamic_cast<uci::type::RouteMetricsRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeMetricsRequestMT:
      return extxml_uci::type::RouteMetricsRequestMT::deserialize(propTree, dynamic_cast<uci::type::RouteMetricsRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeMetricsRequestStatusMDT:
      return extxml_uci::type::RouteMetricsRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RouteMetricsRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeMetricsRequestStatusMT:
      return extxml_uci::type::RouteMetricsRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::RouteMetricsRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeModificationRequestMDT:
      return extxml_uci::type::RouteModificationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::RouteModificationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeModificationRequestMT:
      return extxml_uci::type::RouteModificationRequestMT::deserialize(propTree, dynamic_cast<uci::type::RouteModificationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeModificationRequestStatusMDT:
      return extxml_uci::type::RouteModificationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RouteModificationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeModificationRequestStatusMT:
      return extxml_uci::type::RouteModificationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::RouteModificationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanApprovalStatusMT:
      return extxml_uci::type::RoutePlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanCommandID_Type:
      return extxml_uci::type::RoutePlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::RoutePlanCommandID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanCommandMT:
      return extxml_uci::type::RoutePlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanCommandStatusMT:
      return extxml_uci::type::RoutePlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanExecutionStatusMT:
      return extxml_uci::type::RoutePlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanID_Type:
      return extxml_uci::type::RoutePlanID_Type::deserialize(propTree, dynamic_cast<uci::type::RoutePlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanInputsType:
      return extxml_uci::type::RoutePlanInputsType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanMT:
      return extxml_uci::type::RoutePlanMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanningCandidateType:
      return extxml_uci::type::RoutePlanningCandidateType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanningCandidateType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanProcessDescriptionType:
      return extxml_uci::type::RoutePlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanStatusMT:
      return extxml_uci::type::RoutePlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanStatusType:
      return extxml_uci::type::RoutePlanStatusType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanValidationCommandMDT:
      return extxml_uci::type::RoutePlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanValidationCommandMT:
      return extxml_uci::type::RoutePlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanValidationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanValidationCommandStatusMDT:
      return extxml_uci::type::RoutePlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanValidationCommandStatusMT:
      return extxml_uci::type::RoutePlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanValidationID_Type:
      return extxml_uci::type::RoutePlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::RoutePlanValidationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanValidationInputsType:
      return extxml_uci::type::RoutePlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::RoutePlanValidationInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routePlanValidationMT:
      return extxml_uci::type::RoutePlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::RoutePlanValidationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::routeVulnerabilityMetricsRequestType:
      return extxml_uci::type::RouteVulnerabilityMetricsRequestType::deserialize(propTree, dynamic_cast<uci::type::RouteVulnerabilityMetricsRequestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rSO_ApproachType:
      return extxml_uci::type::RSO_ApproachType::deserialize(propTree, dynamic_cast<uci::type::RSO_ApproachType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rSTA_FileTraceabilityType:
      return extxml_uci::type::RSTA_FileTraceabilityType::deserialize(propTree, dynamic_cast<uci::type::RSTA_FileTraceabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::rSTA_TraceabilityType:
      return extxml_uci::type::RSTA_TraceabilityType::deserialize(propTree, dynamic_cast<uci::type::RSTA_TraceabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::runwayID_Type:
      return extxml_uci::type::RunwayID_Type::deserialize(propTree, dynamic_cast<uci::type::RunwayID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_ActivityCommandType:
      return extxml_uci::type::SAR_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::SAR_ActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_ActivityMT:
      return extxml_uci::type::SAR_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::SAR_ActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_ActivityType:
      return extxml_uci::type::SAR_ActivityType::deserialize(propTree, dynamic_cast<uci::type::SAR_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_AutomaticTargetDetectionParametersType:
      return extxml_uci::type::SAR_AutomaticTargetDetectionParametersType::deserialize(propTree, dynamic_cast<uci::type::SAR_AutomaticTargetDetectionParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_CapabilityCommandType:
      return extxml_uci::type::SAR_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_CapabilityMDT:
      return extxml_uci::type::SAR_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_CapabilityMT:
      return extxml_uci::type::SAR_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_CapabilityStatusMDT:
      return extxml_uci::type::SAR_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_CapabilityStatusMT:
      return extxml_uci::type::SAR_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_CapabilityStatusType:
      return extxml_uci::type::SAR_CapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_CapabilityType:
      return extxml_uci::type::SAR_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::SAR_CapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_CoherentChangeDetectionParametersType:
      return extxml_uci::type::SAR_CoherentChangeDetectionParametersType::deserialize(propTree, dynamic_cast<uci::type::SAR_CoherentChangeDetectionParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_CollectionConstraintsType:
      return extxml_uci::type::SAR_CollectionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::SAR_CollectionConstraintsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_CollectionOptionsType:
      return extxml_uci::type::SAR_CollectionOptionsType::deserialize(propTree, dynamic_cast<uci::type::SAR_CollectionOptionsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_CommandMT:
      return extxml_uci::type::SAR_CommandMT::deserialize(propTree, dynamic_cast<uci::type::SAR_CommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_CommandStatusMDT:
      return extxml_uci::type::SAR_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SAR_CommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_CommandStatusMT:
      return extxml_uci::type::SAR_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SAR_CommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_DynamicImageParametersType:
      return extxml_uci::type::SAR_DynamicImageParametersType::deserialize(propTree, dynamic_cast<uci::type::SAR_DynamicImageParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_ProcessingParametersType:
      return extxml_uci::type::SAR_ProcessingParametersType::deserialize(propTree, dynamic_cast<uci::type::SAR_ProcessingParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_SettingsCommandMDT:
      return extxml_uci::type::SAR_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SAR_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_SettingsCommandMT:
      return extxml_uci::type::SAR_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::SAR_SettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_SettingsCommandStatusMDT:
      return extxml_uci::type::SAR_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SAR_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_SettingsCommandStatusMT:
      return extxml_uci::type::SAR_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SAR_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_TaskAchievabilityAssessmentRequestType:
      return extxml_uci::type::SAR_TaskAchievabilityAssessmentRequestType::deserialize(propTree, dynamic_cast<uci::type::SAR_TaskAchievabilityAssessmentRequestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_TaskAchievabilityAssessmentType:
      return extxml_uci::type::SAR_TaskAchievabilityAssessmentType::deserialize(propTree, dynamic_cast<uci::type::SAR_TaskAchievabilityAssessmentType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_TaskBaseType:
      return extxml_uci::type::SAR_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::SAR_TaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_TaskType:
      return extxml_uci::type::SAR_TaskType::deserialize(propTree, dynamic_cast<uci::type::SAR_TaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sAR_TwoColorMultiViewParametersType:
      return extxml_uci::type::SAR_TwoColorMultiViewParametersType::deserialize(propTree, dynamic_cast<uci::type::SAR_TwoColorMultiViewParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::satelliteCharacteristicsID_Type:
      return extxml_uci::type::SatelliteCharacteristicsID_Type::deserialize(propTree, dynamic_cast<uci::type::SatelliteCharacteristicsID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::satelliteCharacteristicsMDT:
      return extxml_uci::type::SatelliteCharacteristicsMDT::deserialize(propTree, dynamic_cast<uci::type::SatelliteCharacteristicsMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::satelliteCharacteristicsMT:
      return extxml_uci::type::SatelliteCharacteristicsMT::deserialize(propTree, dynamic_cast<uci::type::SatelliteCharacteristicsMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::satellitePhysicalConfigurationID_Type:
      return extxml_uci::type::SatellitePhysicalConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::SatellitePhysicalConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::scanDataBaseType:
      return extxml_uci::type::ScanDataBaseType::deserialize(propTree, dynamic_cast<uci::type::ScanDataBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::scanDataType:
      return extxml_uci::type::ScanDataType::deserialize(propTree, dynamic_cast<uci::type::ScanDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::scoringProcessID_Type:
      return extxml_uci::type::ScoringProcessID_Type::deserialize(propTree, dynamic_cast<uci::type::ScoringProcessID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sectorType:
      return extxml_uci::type::SectorType::deserialize(propTree, dynamic_cast<uci::type::SectorType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::securityAuditRecordID_Type:
      return extxml_uci::type::SecurityAuditRecordID_Type::deserialize(propTree, dynamic_cast<uci::type::SecurityAuditRecordID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::securityAuditRecordMT:
      return extxml_uci::type::SecurityAuditRecordMT::deserialize(propTree, dynamic_cast<uci::type::SecurityAuditRecordMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::segmentCompletedType:
      return extxml_uci::type::SegmentCompletedType::deserialize(propTree, dynamic_cast<uci::type::SegmentCompletedType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::segmentEstimateType:
      return extxml_uci::type::SegmentEstimateType::deserialize(propTree, dynamic_cast<uci::type::SegmentEstimateType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::segmentID_Type:
      return extxml_uci::type::SegmentID_Type::deserialize(propTree, dynamic_cast<uci::type::SegmentID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::selectionQuerySpecificDataType:
      return extxml_uci::type::SelectionQuerySpecificDataType::deserialize(propTree, dynamic_cast<uci::type::SelectionQuerySpecificDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::selfDefenseStatusMDT:
      return extxml_uci::type::SelfDefenseStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SelfDefenseStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::selfDefenseStatusMT:
      return extxml_uci::type::SelfDefenseStatusMT::deserialize(propTree, dynamic_cast<uci::type::SelfDefenseStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sensorConstraintsBaseType:
      return extxml_uci::type::SensorConstraintsBaseType::deserialize(propTree, dynamic_cast<uci::type::SensorConstraintsBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sensorConstraintsType:
      return extxml_uci::type::SensorConstraintsType::deserialize(propTree, dynamic_cast<uci::type::SensorConstraintsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::separationParametersType:
      return extxml_uci::type::SeparationParametersType::deserialize(propTree, dynamic_cast<uci::type::SeparationParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceConfigurationChangeRequestMDT:
      return extxml_uci::type::ServiceConfigurationChangeRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationChangeRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceConfigurationChangeRequestMT:
      return extxml_uci::type::ServiceConfigurationChangeRequestMT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationChangeRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceConfigurationChangeRequestStatusMDT:
      return extxml_uci::type::ServiceConfigurationChangeRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationChangeRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceConfigurationChangeRequestStatusMT:
      return extxml_uci::type::ServiceConfigurationChangeRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationChangeRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceConfigurationParamsDataRequestMDT:
      return extxml_uci::type::ServiceConfigurationParamsDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationParamsDataRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceConfigurationParamsDataRequestMT:
      return extxml_uci::type::ServiceConfigurationParamsDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationParamsDataRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceConfigurationParamsDataRequestStatusMDT:
      return extxml_uci::type::ServiceConfigurationParamsDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationParamsDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceConfigurationParamsDataRequestStatusMT:
      return extxml_uci::type::ServiceConfigurationParamsDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationParamsDataRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceConfigurationParamsMT:
      return extxml_uci::type::ServiceConfigurationParamsMT::deserialize(propTree, dynamic_cast<uci::type::ServiceConfigurationParamsMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceErrorReportID_Type:
      return extxml_uci::type::ServiceErrorReportID_Type::deserialize(propTree, dynamic_cast<uci::type::ServiceErrorReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceErrorReportMT:
      return extxml_uci::type::ServiceErrorReportMT::deserialize(propTree, dynamic_cast<uci::type::ServiceErrorReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceID_Type:
      return extxml_uci::type::ServiceID_Type::deserialize(propTree, dynamic_cast<uci::type::ServiceID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceLifecycleCommandMDT:
      return extxml_uci::type::ServiceLifecycleCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceLifecycleCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceLifecycleCommandMT:
      return extxml_uci::type::ServiceLifecycleCommandMT::deserialize(propTree, dynamic_cast<uci::type::ServiceLifecycleCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceLifecycleCommandStatusMDT:
      return extxml_uci::type::ServiceLifecycleCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceLifecycleCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceLifecycleCommandStatusMT:
      return extxml_uci::type::ServiceLifecycleCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ServiceLifecycleCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceRegistrationRequestMDT:
      return extxml_uci::type::ServiceRegistrationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceRegistrationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceRegistrationRequestMT:
      return extxml_uci::type::ServiceRegistrationRequestMT::deserialize(propTree, dynamic_cast<uci::type::ServiceRegistrationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceRegistrationRequestStatusMDT:
      return extxml_uci::type::ServiceRegistrationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceRegistrationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceRegistrationRequestStatusMT:
      return extxml_uci::type::ServiceRegistrationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ServiceRegistrationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceSettingsCommandMDT:
      return extxml_uci::type::ServiceSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceSettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceSettingsCommandMT:
      return extxml_uci::type::ServiceSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::ServiceSettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceSettingsCommandStatusMDT:
      return extxml_uci::type::ServiceSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceSettingsCommandStatusMT:
      return extxml_uci::type::ServiceSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::ServiceSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceStatusDataRequestMDT:
      return extxml_uci::type::ServiceStatusDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceStatusDataRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceStatusDataRequestMT:
      return extxml_uci::type::ServiceStatusDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::ServiceStatusDataRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceStatusDataRequestStatusMDT:
      return extxml_uci::type::ServiceStatusDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::ServiceStatusDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceStatusDataRequestStatusMT:
      return extxml_uci::type::ServiceStatusDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::ServiceStatusDataRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::serviceStatusMT:
      return extxml_uci::type::ServiceStatusMT::deserialize(propTree, dynamic_cast<uci::type::ServiceStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sharedApertureSupportCapabilityStatusMDT:
      return extxml_uci::type::SharedApertureSupportCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SharedApertureSupportCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sharedApertureSupportCapabilityStatusMT:
      return extxml_uci::type::SharedApertureSupportCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::SharedApertureSupportCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sharedRF_ApertureActivityBaseType:
      return extxml_uci::type::SharedRF_ApertureActivityBaseType::deserialize(propTree, dynamic_cast<uci::type::SharedRF_ApertureActivityBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sharedRF_ApertureActivityCommandBaseType:
      return extxml_uci::type::SharedRF_ApertureActivityCommandBaseType::deserialize(propTree, dynamic_cast<uci::type::SharedRF_ApertureActivityCommandBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sharedRF_ApertureCapabilityCommandBaseType:
      return extxml_uci::type::SharedRF_ApertureCapabilityCommandBaseType::deserialize(propTree, dynamic_cast<uci::type::SharedRF_ApertureCapabilityCommandBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::signalEmitterKinematicsFixedType:
      return extxml_uci::type::SignalEmitterKinematicsFixedType::deserialize(propTree, dynamic_cast<uci::type::SignalEmitterKinematicsFixedType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::signalID_Type:
      return extxml_uci::type::SignalID_Type::deserialize(propTree, dynamic_cast<uci::type::SignalID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::signalIdentityType:
      return extxml_uci::type::SignalIdentityType::deserialize(propTree, dynamic_cast<uci::type::SignalIdentityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::signalPulseWidthBaseType:
      return extxml_uci::type::SignalPulseWidthBaseType::deserialize(propTree, dynamic_cast<uci::type::SignalPulseWidthBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::signalPulseWidthType:
      return extxml_uci::type::SignalPulseWidthType::deserialize(propTree, dynamic_cast<uci::type::SignalPulseWidthType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::signalRelativeType:
      return extxml_uci::type::SignalRelativeType::deserialize(propTree, dynamic_cast<uci::type::SignalRelativeType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::signalReportID_Type:
      return extxml_uci::type::SignalReportID_Type::deserialize(propTree, dynamic_cast<uci::type::SignalReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::signalReportMT:
      return extxml_uci::type::SignalReportMT::deserialize(propTree, dynamic_cast<uci::type::SignalReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_ActivityCommandType:
      return extxml_uci::type::SMTI_ActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::SMTI_ActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_ActivityMT:
      return extxml_uci::type::SMTI_ActivityMT::deserialize(propTree, dynamic_cast<uci::type::SMTI_ActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_ActivityType:
      return extxml_uci::type::SMTI_ActivityType::deserialize(propTree, dynamic_cast<uci::type::SMTI_ActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_CapabilityCommandType:
      return extxml_uci::type::SMTI_CapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::SMTI_CapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_CapabilityMDT:
      return extxml_uci::type::SMTI_CapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::SMTI_CapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_CapabilityMT:
      return extxml_uci::type::SMTI_CapabilityMT::deserialize(propTree, dynamic_cast<uci::type::SMTI_CapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_CapabilityStatusMDT:
      return extxml_uci::type::SMTI_CapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SMTI_CapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_CapabilityStatusMT:
      return extxml_uci::type::SMTI_CapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::SMTI_CapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_CapabilityType:
      return extxml_uci::type::SMTI_CapabilityType::deserialize(propTree, dynamic_cast<uci::type::SMTI_CapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_CollectionConstraintsType:
      return extxml_uci::type::SMTI_CollectionConstraintsType::deserialize(propTree, dynamic_cast<uci::type::SMTI_CollectionConstraintsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_CollectionOptionsType:
      return extxml_uci::type::SMTI_CollectionOptionsType::deserialize(propTree, dynamic_cast<uci::type::SMTI_CollectionOptionsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_CommandMT:
      return extxml_uci::type::SMTI_CommandMT::deserialize(propTree, dynamic_cast<uci::type::SMTI_CommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_CommandStatusMDT:
      return extxml_uci::type::SMTI_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SMTI_CommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_CommandStatusMT:
      return extxml_uci::type::SMTI_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SMTI_CommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_SettingsCommandMDT:
      return extxml_uci::type::SMTI_SettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SMTI_SettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_SettingsCommandMT:
      return extxml_uci::type::SMTI_SettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::SMTI_SettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_SettingsCommandStatusMDT:
      return extxml_uci::type::SMTI_SettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SMTI_SettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_SettingsCommandStatusMT:
      return extxml_uci::type::SMTI_SettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SMTI_SettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_TaskBaseType:
      return extxml_uci::type::SMTI_TaskBaseType::deserialize(propTree, dynamic_cast<uci::type::SMTI_TaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sMTI_TaskType:
      return extxml_uci::type::SMTI_TaskType::deserialize(propTree, dynamic_cast<uci::type::SMTI_TaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sOB_C2_RecordBaseType:
      return extxml_uci::type::SOB_C2_RecordBaseType::deserialize(propTree, dynamic_cast<uci::type::SOB_C2_RecordBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sOB_C2_RecordID_Type:
      return extxml_uci::type::SOB_C2_RecordID_Type::deserialize(propTree, dynamic_cast<uci::type::SOB_C2_RecordID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sOB_C2_RecordMDT:
      return extxml_uci::type::SOB_C2_RecordMDT::deserialize(propTree, dynamic_cast<uci::type::SOB_C2_RecordMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sOB_C2_RecordMT:
      return extxml_uci::type::SOB_C2_RecordMT::deserialize(propTree, dynamic_cast<uci::type::SOB_C2_RecordMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sOB_C2_RecordType:
      return extxml_uci::type::SOB_C2_RecordType::deserialize(propTree, dynamic_cast<uci::type::SOB_C2_RecordType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sOB_CorrelationRecordID_Type:
      return extxml_uci::type::SOB_CorrelationRecordID_Type::deserialize(propTree, dynamic_cast<uci::type::SOB_CorrelationRecordID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sOB_CorrelationRecordMDT:
      return extxml_uci::type::SOB_CorrelationRecordMDT::deserialize(propTree, dynamic_cast<uci::type::SOB_CorrelationRecordMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sOB_CorrelationRecordMT:
      return extxml_uci::type::SOB_CorrelationRecordMT::deserialize(propTree, dynamic_cast<uci::type::SOB_CorrelationRecordMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sOB_SatelliteRecordBaseType:
      return extxml_uci::type::SOB_SatelliteRecordBaseType::deserialize(propTree, dynamic_cast<uci::type::SOB_SatelliteRecordBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sOB_SatelliteRecordID_Type:
      return extxml_uci::type::SOB_SatelliteRecordID_Type::deserialize(propTree, dynamic_cast<uci::type::SOB_SatelliteRecordID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sOB_SatelliteRecordMDT:
      return extxml_uci::type::SOB_SatelliteRecordMDT::deserialize(propTree, dynamic_cast<uci::type::SOB_SatelliteRecordMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sOB_SatelliteRecordMT:
      return extxml_uci::type::SOB_SatelliteRecordMT::deserialize(propTree, dynamic_cast<uci::type::SOB_SatelliteRecordMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sOB_SatelliteRecordType:
      return extxml_uci::type::SOB_SatelliteRecordType::deserialize(propTree, dynamic_cast<uci::type::SOB_SatelliteRecordType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::spaceWeatherID_Type:
      return extxml_uci::type::SpaceWeatherID_Type::deserialize(propTree, dynamic_cast<uci::type::SpaceWeatherID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::spaceWeatherMT:
      return extxml_uci::type::SpaceWeatherMT::deserialize(propTree, dynamic_cast<uci::type::SpaceWeatherMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::specialCodeDataLinkIdentifierType:
      return extxml_uci::type::SpecialCodeDataLinkIdentifierType::deserialize(propTree, dynamic_cast<uci::type::SpecialCodeDataLinkIdentifierType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::specificBlueSeparationType:
      return extxml_uci::type::SpecificBlueSeparationType::deserialize(propTree, dynamic_cast<uci::type::SpecificBlueSeparationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::specificEmitterIdentityConfidenceType:
      return extxml_uci::type::SpecificEmitterIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::SpecificEmitterIdentityConfidenceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::specificEmitterIdentityType:
      return extxml_uci::type::SpecificEmitterIdentityType::deserialize(propTree, dynamic_cast<uci::type::SpecificEmitterIdentityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::specificIdentityConfidenceType:
      return extxml_uci::type::SpecificIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::SpecificIdentityConfidenceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::specificIdentityType:
      return extxml_uci::type::SpecificIdentityType::deserialize(propTree, dynamic_cast<uci::type::SpecificIdentityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::specificRedSeparationType:
      return extxml_uci::type::SpecificRedSeparationType::deserialize(propTree, dynamic_cast<uci::type::SpecificRedSeparationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::specificVehicleIdentityConfidenceType:
      return extxml_uci::type::SpecificVehicleIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::SpecificVehicleIdentityConfidenceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::spectralDensityReportID_Type:
      return extxml_uci::type::SpectralDensityReportID_Type::deserialize(propTree, dynamic_cast<uci::type::SpectralDensityReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::spectralDensityReportMT:
      return extxml_uci::type::SpectralDensityReportMT::deserialize(propTree, dynamic_cast<uci::type::SpectralDensityReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sTANAG_4607_PackingPlanPET:
      return extxml_uci::type::STANAG_4607_PackingPlanPET::deserialize(propTree, dynamic_cast<uci::type::STANAG_4607_PackingPlanPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sTANAG_4607_PackingPlanRevA_Type:
      return extxml_uci::type::STANAG_4607_PackingPlanRevA_Type::deserialize(propTree, dynamic_cast<uci::type::STANAG_4607_PackingPlanRevA_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::sTANAG_4607_PackingPlanType:
      return extxml_uci::type::STANAG_4607_PackingPlanType::deserialize(propTree, dynamic_cast<uci::type::STANAG_4607_PackingPlanType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::standardIdentityConfidenceType:
      return extxml_uci::type::StandardIdentityConfidenceType::deserialize(propTree, dynamic_cast<uci::type::StandardIdentityConfidenceType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::standardIdentityType:
      return extxml_uci::type::StandardIdentityType::deserialize(propTree, dynamic_cast<uci::type::StandardIdentityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::stateCovarianceNED_Type:
      return extxml_uci::type::StateCovarianceNED_Type::deserialize(propTree, dynamic_cast<uci::type::StateCovarianceNED_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeCarriageCapabilityStatusBaseType:
      return extxml_uci::type::StoreCarriageCapabilityStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::StoreCarriageCapabilityStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeCarriageCapabilityStatusMT:
      return extxml_uci::type::StoreCarriageCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::StoreCarriageCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeCarriageCapabilityStatusType:
      return extxml_uci::type::StoreCarriageCapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::StoreCarriageCapabilityStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeCarriageStatusType:
      return extxml_uci::type::StoreCarriageStatusType::deserialize(propTree, dynamic_cast<uci::type::StoreCarriageStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeInformationBaseType:
      return extxml_uci::type::StoreInformationBaseType::deserialize(propTree, dynamic_cast<uci::type::StoreInformationBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeInformationType:
      return extxml_uci::type::StoreInformationType::deserialize(propTree, dynamic_cast<uci::type::StoreInformationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeLoadoutConfigurationID_Type:
      return extxml_uci::type::StoreLoadoutConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeLoadoutConfigurationMT:
      return extxml_uci::type::StoreLoadoutConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutConfigurationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeLoadoutItemPET:
      return extxml_uci::type::StoreLoadoutItemPET::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutItemPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeLoadoutItemType:
      return extxml_uci::type::StoreLoadoutItemType::deserialize(propTree, dynamic_cast<uci::type::StoreLoadoutItemType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeManagementCommandMT:
      return extxml_uci::type::StoreManagementCommandMT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeManagementCommandStatusMDT:
      return extxml_uci::type::StoreManagementCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeManagementCommandStatusMT:
      return extxml_uci::type::StoreManagementCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeManagementCommandType:
      return extxml_uci::type::StoreManagementCommandType::deserialize(propTree, dynamic_cast<uci::type::StoreManagementCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeManagementReportID_Type:
      return extxml_uci::type::StoreManagementReportID_Type::deserialize(propTree, dynamic_cast<uci::type::StoreManagementReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeManagementReportMT:
      return extxml_uci::type::StoreManagementReportMT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeManagementStatusMDT:
      return extxml_uci::type::StoreManagementStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeManagementStatusMT:
      return extxml_uci::type::StoreManagementStatusMT::deserialize(propTree, dynamic_cast<uci::type::StoreManagementStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeStatusBaseType:
      return extxml_uci::type::StoreStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::StoreStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeStatusType:
      return extxml_uci::type::StoreStatusType::deserialize(propTree, dynamic_cast<uci::type::StoreStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::storeType:
      return extxml_uci::type::StoreType::deserialize(propTree, dynamic_cast<uci::type::StoreType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeActivityCommandType:
      return extxml_uci::type::StrikeActivityCommandType::deserialize(propTree, dynamic_cast<uci::type::StrikeActivityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeActivityMT:
      return extxml_uci::type::StrikeActivityMT::deserialize(propTree, dynamic_cast<uci::type::StrikeActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeActivityType:
      return extxml_uci::type::StrikeActivityType::deserialize(propTree, dynamic_cast<uci::type::StrikeActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeCapabilityCommandType:
      return extxml_uci::type::StrikeCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeCapabilityMDT:
      return extxml_uci::type::StrikeCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeCapabilityMT:
      return extxml_uci::type::StrikeCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeCapabilityStatusMDT:
      return extxml_uci::type::StrikeCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeCapabilityStatusMT:
      return extxml_uci::type::StrikeCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeCapabilityStatusType:
      return extxml_uci::type::StrikeCapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeCapabilityType:
      return extxml_uci::type::StrikeCapabilityType::deserialize(propTree, dynamic_cast<uci::type::StrikeCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeCommandMT:
      return extxml_uci::type::StrikeCommandMT::deserialize(propTree, dynamic_cast<uci::type::StrikeCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeCommandStatusMDT:
      return extxml_uci::type::StrikeCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeCommandStatusMT:
      return extxml_uci::type::StrikeCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::StrikeCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeConsentRequestMT:
      return extxml_uci::type::StrikeConsentRequestMT::deserialize(propTree, dynamic_cast<uci::type::StrikeConsentRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeConsentRequestStatusMDT:
      return extxml_uci::type::StrikeConsentRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeConsentRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeConsentRequestStatusMT:
      return extxml_uci::type::StrikeConsentRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::StrikeConsentRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeConsentRequestType:
      return extxml_uci::type::StrikeConsentRequestType::deserialize(propTree, dynamic_cast<uci::type::StrikeConsentRequestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeSettingsCommandMDT:
      return extxml_uci::type::StrikeSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeSettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeSettingsCommandMT:
      return extxml_uci::type::StrikeSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::StrikeSettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeSettingsCommandStatusMDT:
      return extxml_uci::type::StrikeSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::StrikeSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeSettingsCommandStatusMT:
      return extxml_uci::type::StrikeSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::StrikeSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeTaskAchievabilityAssessmentRequestType:
      return extxml_uci::type::StrikeTaskAchievabilityAssessmentRequestType::deserialize(propTree, dynamic_cast<uci::type::StrikeTaskAchievabilityAssessmentRequestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeTaskAchievabilityAssessmentType:
      return extxml_uci::type::StrikeTaskAchievabilityAssessmentType::deserialize(propTree, dynamic_cast<uci::type::StrikeTaskAchievabilityAssessmentType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::strikeTaskWeaponType:
      return extxml_uci::type::StrikeTaskWeaponType::deserialize(propTree, dynamic_cast<uci::type::StrikeTaskWeaponType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subCapabilityID_Type:
      return extxml_uci::type::SubCapabilityID_Type::deserialize(propTree, dynamic_cast<uci::type::SubCapabilityID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemBIT_CommandMDT:
      return extxml_uci::type::SubsystemBIT_CommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_CommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemBIT_CommandMT:
      return extxml_uci::type::SubsystemBIT_CommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_CommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemBIT_CommandStatusMDT:
      return extxml_uci::type::SubsystemBIT_CommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_CommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemBIT_CommandStatusMT:
      return extxml_uci::type::SubsystemBIT_CommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_CommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemBIT_ConfigurationID_Type:
      return extxml_uci::type::SubsystemBIT_ConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_ConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemBIT_ConfigurationMT:
      return extxml_uci::type::SubsystemBIT_ConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_ConfigurationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemBIT_StatusMT:
      return extxml_uci::type::SubsystemBIT_StatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemBIT_StatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemCalibrationCommandMDT:
      return extxml_uci::type::SubsystemCalibrationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemCalibrationCommandMT:
      return extxml_uci::type::SubsystemCalibrationCommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemCalibrationCommandStatusMDT:
      return extxml_uci::type::SubsystemCalibrationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemCalibrationCommandStatusMT:
      return extxml_uci::type::SubsystemCalibrationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemCalibrationConfigurationID_Type:
      return extxml_uci::type::SubsystemCalibrationConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemCalibrationConfigurationMT:
      return extxml_uci::type::SubsystemCalibrationConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationConfigurationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemCalibrationStatusMT:
      return extxml_uci::type::SubsystemCalibrationStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemCalibrationStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemCommandStatusBaseType:
      return extxml_uci::type::SubsystemCommandStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::SubsystemCommandStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemConfigurationDataRequestMDT:
      return extxml_uci::type::SubsystemConfigurationDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationDataRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemConfigurationDataRequestMT:
      return extxml_uci::type::SubsystemConfigurationDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationDataRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemConfigurationDataRequestStatusMDT:
      return extxml_uci::type::SubsystemConfigurationDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemConfigurationDataRequestStatusMT:
      return extxml_uci::type::SubsystemConfigurationDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationDataRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemConfigurationID_Type:
      return extxml_uci::type::SubsystemConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemConfigurationMT:
      return extxml_uci::type::SubsystemConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemConfigurationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemEraseCommandMDT:
      return extxml_uci::type::SubsystemEraseCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemEraseCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemEraseCommandMT:
      return extxml_uci::type::SubsystemEraseCommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemEraseCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemEraseCommandStatusMDT:
      return extxml_uci::type::SubsystemEraseCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemEraseCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemEraseCommandStatusMT:
      return extxml_uci::type::SubsystemEraseCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemEraseCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemExtendedStatusPET:
      return extxml_uci::type::SubsystemExtendedStatusPET::deserialize(propTree, dynamic_cast<uci::type::SubsystemExtendedStatusPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemID_Type:
      return extxml_uci::type::SubsystemID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemMaintenanceCommandMDT:
      return extxml_uci::type::SubsystemMaintenanceCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemMaintenanceCommandMT:
      return extxml_uci::type::SubsystemMaintenanceCommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemMaintenanceCommandStatusMDT:
      return extxml_uci::type::SubsystemMaintenanceCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemMaintenanceCommandStatusMT:
      return extxml_uci::type::SubsystemMaintenanceCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemMaintenanceConfigurationID_Type:
      return extxml_uci::type::SubsystemMaintenanceConfigurationID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceConfigurationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemMaintenanceConfigurationMT:
      return extxml_uci::type::SubsystemMaintenanceConfigurationMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceConfigurationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemMaintenanceID_Type:
      return extxml_uci::type::SubsystemMaintenanceID_Type::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemMaintenanceStatusMT:
      return extxml_uci::type::SubsystemMaintenanceStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemMaintenanceTestCommandPET:
      return extxml_uci::type::SubsystemMaintenanceTestCommandPET::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceTestCommandPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemMaintenanceTestCommandType:
      return extxml_uci::type::SubsystemMaintenanceTestCommandType::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceTestCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemMaintenanceTestPET:
      return extxml_uci::type::SubsystemMaintenanceTestPET::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceTestPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemMaintenanceTestResultPET:
      return extxml_uci::type::SubsystemMaintenanceTestResultPET::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceTestResultPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemMaintenanceTestResultType:
      return extxml_uci::type::SubsystemMaintenanceTestResultType::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceTestResultType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemMaintenanceTestType:
      return extxml_uci::type::SubsystemMaintenanceTestType::deserialize(propTree, dynamic_cast<uci::type::SubsystemMaintenanceTestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemSettingsCommandMDT:
      return extxml_uci::type::SubsystemSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemSettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemSettingsCommandMT:
      return extxml_uci::type::SubsystemSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemSettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemSettingsCommandStatusMDT:
      return extxml_uci::type::SubsystemSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemSettingsCommandStatusMT:
      return extxml_uci::type::SubsystemSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemStateCommandMDT:
      return extxml_uci::type::SubsystemStateCommandMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStateCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemStateCommandMT:
      return extxml_uci::type::SubsystemStateCommandMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStateCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemStateCommandStatusMDT:
      return extxml_uci::type::SubsystemStateCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStateCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemStateCommandStatusMT:
      return extxml_uci::type::SubsystemStateCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStateCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemStatusDataRequestMDT:
      return extxml_uci::type::SubsystemStatusDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDataRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemStatusDataRequestMT:
      return extxml_uci::type::SubsystemStatusDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDataRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemStatusDataRequestStatusMDT:
      return extxml_uci::type::SubsystemStatusDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemStatusDataRequestStatusMT:
      return extxml_uci::type::SubsystemStatusDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDataRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemStatusDetailedDataRequestMDT:
      return extxml_uci::type::SubsystemStatusDetailedDataRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDetailedDataRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemStatusDetailedDataRequestMT:
      return extxml_uci::type::SubsystemStatusDetailedDataRequestMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDetailedDataRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemStatusDetailedDataRequestStatusMDT:
      return extxml_uci::type::SubsystemStatusDetailedDataRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDetailedDataRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemStatusDetailedDataRequestStatusMT:
      return extxml_uci::type::SubsystemStatusDetailedDataRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDetailedDataRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemStatusDetailedMT:
      return extxml_uci::type::SubsystemStatusDetailedMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusDetailedMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemStatusMT:
      return extxml_uci::type::SubsystemStatusMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::subsystemStreamMT:
      return extxml_uci::type::SubsystemStreamMT::deserialize(propTree, dynamic_cast<uci::type::SubsystemStreamMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::supportCapabilityCommandBaseType:
      return extxml_uci::type::SupportCapabilityCommandBaseType::deserialize(propTree, dynamic_cast<uci::type::SupportCapabilityCommandBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::supportCapabilityCommandStatusBaseType:
      return extxml_uci::type::SupportCapabilityCommandStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::SupportCapabilityCommandStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::supportCapabilityID_Type:
      return extxml_uci::type::SupportCapabilityID_Type::deserialize(propTree, dynamic_cast<uci::type::SupportCapabilityID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::supportCapabilityStatusBaseType:
      return extxml_uci::type::SupportCapabilityStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::SupportCapabilityStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::supportedResolutionID_Type:
      return extxml_uci::type::SupportedResolutionID_Type::deserialize(propTree, dynamic_cast<uci::type::SupportedResolutionID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::survivabilityRiskLevelID_Type:
      return extxml_uci::type::SurvivabilityRiskLevelID_Type::deserialize(propTree, dynamic_cast<uci::type::SurvivabilityRiskLevelID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::survivabilityRiskLevelMT:
      return extxml_uci::type::SurvivabilityRiskLevelMT::deserialize(propTree, dynamic_cast<uci::type::SurvivabilityRiskLevelMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemDeploymentActivityMT:
      return extxml_uci::type::SystemDeploymentActivityMT::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemDeploymentActivityType:
      return extxml_uci::type::SystemDeploymentActivityType::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemDeploymentCapabilityMDT:
      return extxml_uci::type::SystemDeploymentCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemDeploymentCapabilityMT:
      return extxml_uci::type::SystemDeploymentCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemDeploymentCapabilityStatusMDT:
      return extxml_uci::type::SystemDeploymentCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemDeploymentCapabilityStatusMT:
      return extxml_uci::type::SystemDeploymentCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemDeploymentCapabilityStatusType:
      return extxml_uci::type::SystemDeploymentCapabilityStatusType::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentCapabilityStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemDeploymentCapabilityType:
      return extxml_uci::type::SystemDeploymentCapabilityType::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemDeploymentTaskBaseType:
      return extxml_uci::type::SystemDeploymentTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentTaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemDeploymentTaskType:
      return extxml_uci::type::SystemDeploymentTaskType::deserialize(propTree, dynamic_cast<uci::type::SystemDeploymentTaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemEphemerisRequestParametersType:
      return extxml_uci::type::SystemEphemerisRequestParametersType::deserialize(propTree, dynamic_cast<uci::type::SystemEphemerisRequestParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemEstimationRequestMDT:
      return extxml_uci::type::SystemEstimationRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SystemEstimationRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemEstimationRequestMT:
      return extxml_uci::type::SystemEstimationRequestMT::deserialize(propTree, dynamic_cast<uci::type::SystemEstimationRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemEstimationRequestStatusMDT:
      return extxml_uci::type::SystemEstimationRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SystemEstimationRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemEstimationRequestStatusMT:
      return extxml_uci::type::SystemEstimationRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemEstimationRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemID_Type:
      return extxml_uci::type::SystemID_Type::deserialize(propTree, dynamic_cast<uci::type::SystemID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemIdentityType:
      return extxml_uci::type::SystemIdentityType::deserialize(propTree, dynamic_cast<uci::type::SystemIdentityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemManagementRequestMDT:
      return extxml_uci::type::SystemManagementRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SystemManagementRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemManagementRequestMT:
      return extxml_uci::type::SystemManagementRequestMT::deserialize(propTree, dynamic_cast<uci::type::SystemManagementRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemManagementRequestStatusMDT:
      return extxml_uci::type::SystemManagementRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SystemManagementRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemManagementRequestStatusMT:
      return extxml_uci::type::SystemManagementRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemManagementRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemMetadataMT:
      return extxml_uci::type::SystemMetadataMT::deserialize(propTree, dynamic_cast<uci::type::SystemMetadataMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemMetadataPET:
      return extxml_uci::type::SystemMetadataPET::deserialize(propTree, dynamic_cast<uci::type::SystemMetadataPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemNotificationMDT:
      return extxml_uci::type::SystemNotificationMDT::deserialize(propTree, dynamic_cast<uci::type::SystemNotificationMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemNotificationMT:
      return extxml_uci::type::SystemNotificationMT::deserialize(propTree, dynamic_cast<uci::type::SystemNotificationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalElementSetID_Type:
      return extxml_uci::type::SystemOrbitalElementSetID_Type::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalElementSetMDT:
      return extxml_uci::type::SystemOrbitalElementSetMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalElementSetMT:
      return extxml_uci::type::SystemOrbitalElementSetMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalElementSetRequestMDT:
      return extxml_uci::type::SystemOrbitalElementSetRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalElementSetRequestMT:
      return extxml_uci::type::SystemOrbitalElementSetRequestMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalElementSetRequestStatusMDT:
      return extxml_uci::type::SystemOrbitalElementSetRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalElementSetRequestStatusMT:
      return extxml_uci::type::SystemOrbitalElementSetRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalElementSetType:
      return extxml_uci::type::SystemOrbitalElementSetType::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalElementSetType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalEphemerisID_Type:
      return extxml_uci::type::SystemOrbitalEphemerisID_Type::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalEphemerisMDT:
      return extxml_uci::type::SystemOrbitalEphemerisMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalEphemerisMT:
      return extxml_uci::type::SystemOrbitalEphemerisMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalEphemerisRequestMDT:
      return extxml_uci::type::SystemOrbitalEphemerisRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalEphemerisRequestMT:
      return extxml_uci::type::SystemOrbitalEphemerisRequestMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalEphemerisRequestStatusMDT:
      return extxml_uci::type::SystemOrbitalEphemerisRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalEphemerisRequestStatusMT:
      return extxml_uci::type::SystemOrbitalEphemerisRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalEphemerisType:
      return extxml_uci::type::SystemOrbitalEphemerisType::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalEphemerisType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalPositionReportMT:
      return extxml_uci::type::SystemOrbitalPositionReportMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalPositionReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalVCM_ID_Type:
      return extxml_uci::type::SystemOrbitalVCM_ID_Type::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalVCM_MDT:
      return extxml_uci::type::SystemOrbitalVCM_MDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_MDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalVCM_MT:
      return extxml_uci::type::SystemOrbitalVCM_MT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_MT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalVCM_RequestMDT:
      return extxml_uci::type::SystemOrbitalVCM_RequestMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_RequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalVCM_RequestMT:
      return extxml_uci::type::SystemOrbitalVCM_RequestMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_RequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalVCM_RequestStatusMDT:
      return extxml_uci::type::SystemOrbitalVCM_RequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_RequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalVCM_RequestStatusMT:
      return extxml_uci::type::SystemOrbitalVCM_RequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_RequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitalVCM_Type:
      return extxml_uci::type::SystemOrbitalVCM_Type::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitalVCM_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemOrbitReportMT:
      return extxml_uci::type::SystemOrbitReportMT::deserialize(propTree, dynamic_cast<uci::type::SystemOrbitReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemReadinessID_Type:
      return extxml_uci::type::SystemReadinessID_Type::deserialize(propTree, dynamic_cast<uci::type::SystemReadinessID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemReadinessMDT:
      return extxml_uci::type::SystemReadinessMDT::deserialize(propTree, dynamic_cast<uci::type::SystemReadinessMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemReadinessMT:
      return extxml_uci::type::SystemReadinessMT::deserialize(propTree, dynamic_cast<uci::type::SystemReadinessMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemsNeededRequestMDT:
      return extxml_uci::type::SystemsNeededRequestMDT::deserialize(propTree, dynamic_cast<uci::type::SystemsNeededRequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemsNeededRequestMT:
      return extxml_uci::type::SystemsNeededRequestMT::deserialize(propTree, dynamic_cast<uci::type::SystemsNeededRequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemsNeededRequestStatusMDT:
      return extxml_uci::type::SystemsNeededRequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::SystemsNeededRequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemsNeededRequestStatusMT:
      return extxml_uci::type::SystemsNeededRequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemsNeededRequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemStatusMT:
      return extxml_uci::type::SystemStatusMT::deserialize(propTree, dynamic_cast<uci::type::SystemStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::systemTimeAtReferenceMT:
      return extxml_uci::type::SystemTimeAtReferenceMT::deserialize(propTree, dynamic_cast<uci::type::SystemTimeAtReferenceMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::tacticalOrderActivityMT:
      return extxml_uci::type::TacticalOrderActivityMT::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::tacticalOrderActivityType:
      return extxml_uci::type::TacticalOrderActivityType::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::tacticalOrderCapabilityMDT:
      return extxml_uci::type::TacticalOrderCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::tacticalOrderCapabilityMT:
      return extxml_uci::type::TacticalOrderCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::tacticalOrderCapabilityStatusMDT:
      return extxml_uci::type::TacticalOrderCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::tacticalOrderCapabilityStatusMT:
      return extxml_uci::type::TacticalOrderCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::tacticalOrderCapabilityType:
      return extxml_uci::type::TacticalOrderCapabilityType::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::tacticalOrderTaskBaseType:
      return extxml_uci::type::TacticalOrderTaskBaseType::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderTaskBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::tacticalOrderTaskType:
      return extxml_uci::type::TacticalOrderTaskType::deserialize(propTree, dynamic_cast<uci::type::TacticalOrderTaskType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::tagAssociationID_Type:
      return extxml_uci::type::TagAssociationID_Type::deserialize(propTree, dynamic_cast<uci::type::TagAssociationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::tagAssociationMDT:
      return extxml_uci::type::TagAssociationMDT::deserialize(propTree, dynamic_cast<uci::type::TagAssociationMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::tagAssociationMT:
      return extxml_uci::type::TagAssociationMT::deserialize(propTree, dynamic_cast<uci::type::TagAssociationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskAchievabilityAssessmentPET:
      return extxml_uci::type::TaskAchievabilityAssessmentPET::deserialize(propTree, dynamic_cast<uci::type::TaskAchievabilityAssessmentPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskAchievabilityAssessmentRequestPET:
      return extxml_uci::type::TaskAchievabilityAssessmentRequestPET::deserialize(propTree, dynamic_cast<uci::type::TaskAchievabilityAssessmentRequestPET&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskAllocationType:
      return extxml_uci::type::TaskAllocationType::deserialize(propTree, dynamic_cast<uci::type::TaskAllocationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskCancelCommandMDT:
      return extxml_uci::type::TaskCancelCommandMDT::deserialize(propTree, dynamic_cast<uci::type::TaskCancelCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskCancelCommandMT:
      return extxml_uci::type::TaskCancelCommandMT::deserialize(propTree, dynamic_cast<uci::type::TaskCancelCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskCancelCommandStatusMDT:
      return extxml_uci::type::TaskCancelCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskCancelCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskCancelCommandStatusMT:
      return extxml_uci::type::TaskCancelCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskCancelCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskCapabilityCommandType:
      return extxml_uci::type::TaskCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::TaskCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskCommandMT:
      return extxml_uci::type::TaskCommandMT::deserialize(propTree, dynamic_cast<uci::type::TaskCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskCommandStatusMDT:
      return extxml_uci::type::TaskCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskCommandStatusMT:
      return extxml_uci::type::TaskCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskExecutionApprovalStatusMDT:
      return extxml_uci::type::TaskExecutionApprovalStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskExecutionApprovalStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskExecutionApprovalStatusMT:
      return extxml_uci::type::TaskExecutionApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskExecutionApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskID_Type:
      return extxml_uci::type::TaskID_Type::deserialize(propTree, dynamic_cast<uci::type::TaskID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskMT:
      return extxml_uci::type::TaskMT::deserialize(propTree, dynamic_cast<uci::type::TaskMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanApprovalStatusMT:
      return extxml_uci::type::TaskPlanApprovalStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanApprovalStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanCommandID_Type:
      return extxml_uci::type::TaskPlanCommandID_Type::deserialize(propTree, dynamic_cast<uci::type::TaskPlanCommandID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanCommandMT:
      return extxml_uci::type::TaskPlanCommandMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanCommandStatusMT:
      return extxml_uci::type::TaskPlanCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanExecutionStatusMT:
      return extxml_uci::type::TaskPlanExecutionStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanExecutionStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanID_Type:
      return extxml_uci::type::TaskPlanID_Type::deserialize(propTree, dynamic_cast<uci::type::TaskPlanID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanInputsType:
      return extxml_uci::type::TaskPlanInputsType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanMT:
      return extxml_uci::type::TaskPlanMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanningResultType:
      return extxml_uci::type::TaskPlanningResultType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanningResultType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanningStatusMDT:
      return extxml_uci::type::TaskPlanningStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanningStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanningStatusMT:
      return extxml_uci::type::TaskPlanningStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanningStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanProcessDescriptionType:
      return extxml_uci::type::TaskPlanProcessDescriptionType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanProcessDescriptionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanStatusMT:
      return extxml_uci::type::TaskPlanStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanValidationCommandMDT:
      return extxml_uci::type::TaskPlanValidationCommandMDT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanValidationCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanValidationCommandMT:
      return extxml_uci::type::TaskPlanValidationCommandMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanValidationCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanValidationCommandStatusMDT:
      return extxml_uci::type::TaskPlanValidationCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanValidationCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanValidationCommandStatusMT:
      return extxml_uci::type::TaskPlanValidationCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanValidationCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanValidationID_Type:
      return extxml_uci::type::TaskPlanValidationID_Type::deserialize(propTree, dynamic_cast<uci::type::TaskPlanValidationID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanValidationInputsType:
      return extxml_uci::type::TaskPlanValidationInputsType::deserialize(propTree, dynamic_cast<uci::type::TaskPlanValidationInputsType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskPlanValidationMT:
      return extxml_uci::type::TaskPlanValidationMT::deserialize(propTree, dynamic_cast<uci::type::TaskPlanValidationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskStatusMDT:
      return extxml_uci::type::TaskStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TaskStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::taskStatusMT:
      return extxml_uci::type::TaskStatusMT::deserialize(propTree, dynamic_cast<uci::type::TaskStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::temperatureStatusType:
      return extxml_uci::type::TemperatureStatusType::deserialize(propTree, dynamic_cast<uci::type::TemperatureStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::threatAssessmentRequestType:
      return extxml_uci::type::ThreatAssessmentRequestType::deserialize(propTree, dynamic_cast<uci::type::ThreatAssessmentRequestType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::timeAndPolarDataType:
      return extxml_uci::type::TimeAndPolarDataType::deserialize(propTree, dynamic_cast<uci::type::TimeAndPolarDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::timeAndPolarRecordType:
      return extxml_uci::type::TimeAndPolarRecordType::deserialize(propTree, dynamic_cast<uci::type::TimeAndPolarRecordType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::timedZoneType:
      return extxml_uci::type::TimedZoneType::deserialize(propTree, dynamic_cast<uci::type::TimedZoneType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::tLE_BaseType:
      return extxml_uci::type::TLE_BaseType::deserialize(propTree, dynamic_cast<uci::type::TLE_BaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::tLE_Type:
      return extxml_uci::type::TLE_Type::deserialize(propTree, dynamic_cast<uci::type::TLE_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::tLE_WithParametersType:
      return extxml_uci::type::TLE_WithParametersType::deserialize(propTree, dynamic_cast<uci::type::TLE_WithParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::trackingOpZoneFilterAreaType:
      return extxml_uci::type::TrackingOpZoneFilterAreaType::deserialize(propTree, dynamic_cast<uci::type::TrackingOpZoneFilterAreaType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::trackOptionsID_Type:
      return extxml_uci::type::TrackOptionsID_Type::deserialize(propTree, dynamic_cast<uci::type::TrackOptionsID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::turretCommandMT:
      return extxml_uci::type::TurretCommandMT::deserialize(propTree, dynamic_cast<uci::type::TurretCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::turretCommandStatusMDT:
      return extxml_uci::type::TurretCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TurretCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::turretCommandStatusMT:
      return extxml_uci::type::TurretCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::TurretCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::turretCommandType:
      return extxml_uci::type::TurretCommandType::deserialize(propTree, dynamic_cast<uci::type::TurretCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::turretReportID_Type:
      return extxml_uci::type::TurretReportID_Type::deserialize(propTree, dynamic_cast<uci::type::TurretReportID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::turretReportMT:
      return extxml_uci::type::TurretReportMT::deserialize(propTree, dynamic_cast<uci::type::TurretReportMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::turretStatusMDT:
      return extxml_uci::type::TurretStatusMDT::deserialize(propTree, dynamic_cast<uci::type::TurretStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::turretStatusMT:
      return extxml_uci::type::TurretStatusMT::deserialize(propTree, dynamic_cast<uci::type::TurretStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::uMID_AudioID_Type:
      return extxml_uci::type::UMID_AudioID_Type::deserialize(propTree, dynamic_cast<uci::type::UMID_AudioID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::uMID_DataID_Type:
      return extxml_uci::type::UMID_DataID_Type::deserialize(propTree, dynamic_cast<uci::type::UMID_DataID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::uMID_SystemID_Type:
      return extxml_uci::type::UMID_SystemID_Type::deserialize(propTree, dynamic_cast<uci::type::UMID_SystemID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::uMID_VideoID_Type:
      return extxml_uci::type::UMID_VideoID_Type::deserialize(propTree, dynamic_cast<uci::type::UMID_VideoID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::unallocatedReasonType:
      return extxml_uci::type::UnallocatedReasonType::deserialize(propTree, dynamic_cast<uci::type::UnallocatedReasonType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::unitID_Type:
      return extxml_uci::type::UnitID_Type::deserialize(propTree, dynamic_cast<uci::type::UnitID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::unitVectorType:
      return extxml_uci::type::UnitVectorType::deserialize(propTree, dynamic_cast<uci::type::UnitVectorType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::unsignedIntegerMinMaxType:
      return extxml_uci::type::UnsignedIntegerMinMaxType::deserialize(propTree, dynamic_cast<uci::type::UnsignedIntegerMinMaxType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::validationCommandBaseType:
      return extxml_uci::type::ValidationCommandBaseType::deserialize(propTree, dynamic_cast<uci::type::ValidationCommandBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::validationCommandStatusBaseType:
      return extxml_uci::type::ValidationCommandStatusBaseType::deserialize(propTree, dynamic_cast<uci::type::ValidationCommandStatusBaseType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::valveDataStatusType:
      return extxml_uci::type::ValveDataStatusType::deserialize(propTree, dynamic_cast<uci::type::ValveDataStatusType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::vehicleConfigurationType:
      return extxml_uci::type::VehicleConfigurationType::deserialize(propTree, dynamic_cast<uci::type::VehicleConfigurationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::vehicleIdentificationType:
      return extxml_uci::type::VehicleIdentificationType::deserialize(propTree, dynamic_cast<uci::type::VehicleIdentificationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::velocity2D_Type:
      return extxml_uci::type::Velocity2D_Type::deserialize(propTree, dynamic_cast<uci::type::Velocity2D_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::velocity2D_UncertaintyType:
      return extxml_uci::type::Velocity2D_UncertaintyType::deserialize(propTree, dynamic_cast<uci::type::Velocity2D_UncertaintyType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::versionedID_Type:
      return extxml_uci::type::VersionedID_Type::deserialize(propTree, dynamic_cast<uci::type::VersionedID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::videoAugmentationParametersType:
      return extxml_uci::type::VideoAugmentationParametersType::deserialize(propTree, dynamic_cast<uci::type::VideoAugmentationParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weaponeeringLocationType:
      return extxml_uci::type::WeaponeeringLocationType::deserialize(propTree, dynamic_cast<uci::type::WeaponeeringLocationType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weaponeeringStoreType:
      return extxml_uci::type::WeaponeeringStoreType::deserialize(propTree, dynamic_cast<uci::type::WeaponeeringStoreType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weaponeeringTargetType:
      return extxml_uci::type::WeaponeeringTargetType::deserialize(propTree, dynamic_cast<uci::type::WeaponeeringTargetType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weaponeeringType:
      return extxml_uci::type::WeaponeeringType::deserialize(propTree, dynamic_cast<uci::type::WeaponeeringType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherAugmentationParametersType:
      return extxml_uci::type::WeatherAugmentationParametersType::deserialize(propTree, dynamic_cast<uci::type::WeatherAugmentationParametersType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherDatasetID_Type:
      return extxml_uci::type::WeatherDatasetID_Type::deserialize(propTree, dynamic_cast<uci::type::WeatherDatasetID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherDatasetMDT:
      return extxml_uci::type::WeatherDatasetMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherDatasetMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherDatasetMT:
      return extxml_uci::type::WeatherDatasetMT::deserialize(propTree, dynamic_cast<uci::type::WeatherDatasetMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherMT:
      return extxml_uci::type::WeatherMT::deserialize(propTree, dynamic_cast<uci::type::WeatherMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherObservationMT:
      return extxml_uci::type::WeatherObservationMT::deserialize(propTree, dynamic_cast<uci::type::WeatherObservationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarActivityMT:
      return extxml_uci::type::WeatherRadarActivityMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarActivityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarActivityType:
      return extxml_uci::type::WeatherRadarActivityType::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarActivityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarCapabilityCommandType:
      return extxml_uci::type::WeatherRadarCapabilityCommandType::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCapabilityCommandType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarCapabilityMDT:
      return extxml_uci::type::WeatherRadarCapabilityMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCapabilityMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarCapabilityMT:
      return extxml_uci::type::WeatherRadarCapabilityMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCapabilityMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarCapabilityStatusMDT:
      return extxml_uci::type::WeatherRadarCapabilityStatusMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCapabilityStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarCapabilityStatusMT:
      return extxml_uci::type::WeatherRadarCapabilityStatusMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCapabilityStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarCapabilityType:
      return extxml_uci::type::WeatherRadarCapabilityType::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCapabilityType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarCommandMT:
      return extxml_uci::type::WeatherRadarCommandMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarCommandStatusMDT:
      return extxml_uci::type::WeatherRadarCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarCommandStatusMT:
      return extxml_uci::type::WeatherRadarCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarObservationMT:
      return extxml_uci::type::WeatherRadarObservationMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarObservationMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarSettingsCommandMDT:
      return extxml_uci::type::WeatherRadarSettingsCommandMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarSettingsCommandMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarSettingsCommandMT:
      return extxml_uci::type::WeatherRadarSettingsCommandMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarSettingsCommandMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarSettingsCommandStatusMDT:
      return extxml_uci::type::WeatherRadarSettingsCommandStatusMDT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarSettingsCommandStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherRadarSettingsCommandStatusMT:
      return extxml_uci::type::WeatherRadarSettingsCommandStatusMT::deserialize(propTree, dynamic_cast<uci::type::WeatherRadarSettingsCommandStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::weatherReportGridDataType:
      return extxml_uci::type::WeatherReportGridDataType::deserialize(propTree, dynamic_cast<uci::type::WeatherReportGridDataType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::workingEOB_ID_Type:
      return extxml_uci::type::WorkingEOB_ID_Type::deserialize(propTree, dynamic_cast<uci::type::WorkingEOB_ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::workingEOB_MDT:
      return extxml_uci::type::WorkingEOB_MDT::deserialize(propTree, dynamic_cast<uci::type::WorkingEOB_MDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::workingEOB_MT:
      return extxml_uci::type::WorkingEOB_MT::deserialize(propTree, dynamic_cast<uci::type::WorkingEOB_MT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::workingEOB_RequestMDT:
      return extxml_uci::type::WorkingEOB_RequestMDT::deserialize(propTree, dynamic_cast<uci::type::WorkingEOB_RequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::workingEOB_RequestMT:
      return extxml_uci::type::WorkingEOB_RequestMT::deserialize(propTree, dynamic_cast<uci::type::WorkingEOB_RequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::workingEOB_RequestStatusMDT:
      return extxml_uci::type::WorkingEOB_RequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::WorkingEOB_RequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::workingEOB_RequestStatusMT:
      return extxml_uci::type::WorkingEOB_RequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::WorkingEOB_RequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::workingSOB_ID_Type:
      return extxml_uci::type::WorkingSOB_ID_Type::deserialize(propTree, dynamic_cast<uci::type::WorkingSOB_ID_Type&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::workingSOB_MDT:
      return extxml_uci::type::WorkingSOB_MDT::deserialize(propTree, dynamic_cast<uci::type::WorkingSOB_MDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::workingSOB_MT:
      return extxml_uci::type::WorkingSOB_MT::deserialize(propTree, dynamic_cast<uci::type::WorkingSOB_MT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::workingSOB_RequestMDT:
      return extxml_uci::type::WorkingSOB_RequestMDT::deserialize(propTree, dynamic_cast<uci::type::WorkingSOB_RequestMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::workingSOB_RequestMT:
      return extxml_uci::type::WorkingSOB_RequestMT::deserialize(propTree, dynamic_cast<uci::type::WorkingSOB_RequestMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::workingSOB_RequestStatusMDT:
      return extxml_uci::type::WorkingSOB_RequestStatusMDT::deserialize(propTree, dynamic_cast<uci::type::WorkingSOB_RequestStatusMDT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::workingSOB_RequestStatusMT:
      return extxml_uci::type::WorkingSOB_RequestStatusMT::deserialize(propTree, dynamic_cast<uci::type::WorkingSOB_RequestStatusMT&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::zoneExternalType:
      return extxml_uci::type::ZoneExternalType::deserialize(propTree, dynamic_cast<uci::type::ZoneExternalType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::zoneInclusionType:
      return extxml_uci::type::ZoneInclusionType::deserialize(propTree, dynamic_cast<uci::type::ZoneInclusionType&>(accessor), nodeName, nsPrefix, topLevel);
    case uci::type::accessorType::zoneType:
      return extxml_uci::type::ZoneType::deserialize(propTree, dynamic_cast<uci::type::ZoneType&>(accessor), nodeName, nsPrefix, topLevel);
    default:
      std::ostringstream errMsg;
      errMsg << "Unexpected accessor type " << accessor.getAccessorType() << " encountered during derived type deserialization";
      throw uci::base::UCIException(errMsg);
      break;
  }
}

} // namespace util

} // namespace extxml_uci

