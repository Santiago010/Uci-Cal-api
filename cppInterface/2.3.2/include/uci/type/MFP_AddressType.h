/** @file MFP_AddressType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_MFP_ADDRESSTYPE_H
#define UCI_TYPE_MFP_ADDRESSTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/UnsignedIntAccessor.h"
#include "../base/export.h"
#include "CapabilityID_Type.h"
#include "DigitalPayloadProcessingType.h"
#include "SubsystemID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Description of shared digital Multifunction Processor resources which can be the subject of an RF_ResourceAllocation. */
class MFP_AddressType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new MFP_AddressType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MFP_AddressType.
    */
  static UCI_EXPORT MFP_AddressType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new MFP_AddressType initializing the data accessed by the new MFP_AddressType using the data
    * accessed by the specified MFP_AddressType (cloning).
    *
    * @param accessor The MFP_AddressType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created MFP_AddressType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MFP_AddressType.
    */
  static UCI_EXPORT MFP_AddressType& create(const MFP_AddressType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified MFP_AddressType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The MFP_AddressType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(MFP_AddressType& accessor);

  /** Returns this accessor's type constant, i.e. mFP_AddressType.
    *
    * @return This accessor's type constant, i.e. mFP_AddressType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::mFP_AddressType;
  }

  /** Returns the version that was initialized from the uci:version attribute of MFP_AddressType.
    *
    * @return The version that was initialized from the uci:version attribute of MFP_AddressType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const MFP_AddressType& accessor) = 0;

  /** One or more cards in the MFP, and the associated network ports, processing, and data paths used by the Digital
    * Payload. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::DigitalPayloadProcessingType, uci::type::accessorType::digitalPayloadProcessingType> DigitalPayloadProcessing;

  /** Indicates the control point used by the Service to receive Control Message responses. Defined in Shared Aperture
    * Information Files. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::base::UnsignedIntAccessor, uci::base::accessorType::unsignedIntAccessor> ServiceControlEndpointIndex;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * DigitalPayload_ID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      DigitalPayload_ID.
    */
  virtual const uci::type::CapabilityID_Type& getDigitalPayload_ID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DigitalPayload_ID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DigitalPayload_ID.
    */
  virtual uci::type::CapabilityID_Type& getDigitalPayload_ID() = 0;

  /** Sets the complex content identified by DigitalPayload_ID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DigitalPayload_ID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MFP_AddressType& setDigitalPayload_ID(const uci::type::CapabilityID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * MultiFunctionProcessorID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      MultiFunctionProcessorID.
    */
  virtual const uci::type::SubsystemID_Type& getMultiFunctionProcessorID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * MultiFunctionProcessorID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      MultiFunctionProcessorID.
    */
  virtual uci::type::SubsystemID_Type& getMultiFunctionProcessorID() = 0;

  /** Sets the complex content identified by MultiFunctionProcessorID to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MultiFunctionProcessorID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MFP_AddressType& setMultiFunctionProcessorID(const uci::type::SubsystemID_Type& value) = 0;

  /** Returns whether the Element identified by MultiFunctionProcessorID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MultiFunctionProcessorID is enabled or not.
    */
  virtual bool hasMultiFunctionProcessorID() const = 0;

  /** Enables the Element identified by MultiFunctionProcessorID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      MultiFunctionProcessorID.
    */
  virtual uci::type::SubsystemID_Type& enableMultiFunctionProcessorID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MultiFunctionProcessorID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MFP_AddressType& clearMultiFunctionProcessorID() = 0;

  /** Returns a const reference to the bounded list identified by DigitalPayloadProcessing.
    *
    * @return A const reference to the bounded list identified by DigitalPayloadProcessing.
    */
  virtual const uci::type::MFP_AddressType::DigitalPayloadProcessing& getDigitalPayloadProcessing() const = 0;

  /** Returns a reference to the bounded list identified by DigitalPayloadProcessing.
    *
    * @return A reference to the bounded list identified by DigitalPayloadProcessing.
    */
  virtual uci::type::MFP_AddressType::DigitalPayloadProcessing& getDigitalPayloadProcessing() = 0;

  /** Sets the bounded list identified by DigitalPayloadProcessing.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MFP_AddressType& setDigitalPayloadProcessing(const uci::type::MFP_AddressType::DigitalPayloadProcessing& value) = 0;

  /** Returns a const reference to the bounded list identified by ServiceControlEndpointIndex.
    *
    * @return A const reference to the bounded list identified by ServiceControlEndpointIndex.
    */
  virtual const uci::type::MFP_AddressType::ServiceControlEndpointIndex& getServiceControlEndpointIndex() const = 0;

  /** Returns a reference to the bounded list identified by ServiceControlEndpointIndex.
    *
    * @return A reference to the bounded list identified by ServiceControlEndpointIndex.
    */
  virtual uci::type::MFP_AddressType::ServiceControlEndpointIndex& getServiceControlEndpointIndex() = 0;

  /** Sets the bounded list identified by ServiceControlEndpointIndex.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MFP_AddressType& setServiceControlEndpointIndex(const uci::type::MFP_AddressType::ServiceControlEndpointIndex& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by SignalProcessingFootprintIndex.
    *
    * @return The value of the simple primitive data type identified by SignalProcessingFootprintIndex.
    */
  virtual xs::UnsignedInt getSignalProcessingFootprintIndex() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SignalProcessingFootprintIndex.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MFP_AddressType& setSignalProcessingFootprintIndex(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by SignalProcessingFootprintIndex exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SignalProcessingFootprintIndex is enabled or not.
    */
  virtual bool hasSignalProcessingFootprintIndex() const = 0;

  /** Clears (disabled) the Element identified by SignalProcessingFootprintIndex.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MFP_AddressType& clearSignalProcessingFootprintIndex() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  MFP_AddressType() {
  }

  /** The destructor [only available to derived classes]. */
  ~MFP_AddressType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The MFP_AddressType to copy from.
    */
  MFP_AddressType(const MFP_AddressType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this MFP_AddressType to the contents of the MFP_AddressType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The MFP_AddressType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this MFP_AddressType.
    * @return A reference to this MFP_AddressType.
    */
  MFP_AddressType& operator=(const MFP_AddressType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_MFP_ADDRESSTYPE_H

