/** @file AchievabilityAssessmentRequestPET.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ACHIEVABILITYASSESSMENTREQUESTPET_H
#define UCI_TYPE_ACHIEVABILITYASSESSMENTREQUESTPET_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/type/DurationType.h"
#include "uci/type/RoutePlanReferencesType.h"
#include "uci/type/TimingConstraintsType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The polymorphic extension point for all Achievability request types. */
class AchievabilityAssessmentRequestPET : public virtual uci::base::Accessor {
public:

  /** Returns this accessor's type constant, i.e. achievabilityAssessmentRequestPET.
    *
    * @return This accessor's type constant, i.e. achievabilityAssessmentRequestPET.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::achievabilityAssessmentRequestPET;
  }

  /** Returns the version that was initialized from the uci:version attribute of AchievabilityAssessmentRequestPET.
    *
    * @return The version that was initialized from the uci:version attribute of AchievabilityAssessmentRequestPET.
    */
  static std::string getUCITypeVersion() {
    return "003.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AchievabilityAssessmentRequestPET& accessor) = 0;

  /** This element specifies the mission plan information to use to validate achievability. If empty all mission plans and
    * all paths are considered. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RoutePlanReferencesType, uci::type::accessorType::routePlanReferencesType> RoutePlanReference;

  /** Returns a const reference to the bounded list identified by RoutePlanReference.
    *
    * @return A const reference to the bounded list identified by RoutePlanReference.
    */
  virtual const uci::type::AchievabilityAssessmentRequestPET::RoutePlanReference& getRoutePlanReference() const = 0;

  /** Returns a reference to the bounded list identified by RoutePlanReference.
    *
    * @return A reference to the bounded list identified by RoutePlanReference.
    */
  virtual uci::type::AchievabilityAssessmentRequestPET::RoutePlanReference& getRoutePlanReference() = 0;

  /** Sets the bounded list identified by RoutePlanReference.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AchievabilityAssessmentRequestPET& setRoutePlanReference(const uci::type::AchievabilityAssessmentRequestPET::RoutePlanReference& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * TimingConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      TimingConstraints.
    */
  virtual const uci::type::TimingConstraintsType& getTimingConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TimingConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TimingConstraints.
    */
  virtual uci::type::TimingConstraintsType& getTimingConstraints() = 0;

  /** Sets the complex content identified by TimingConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TimingConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AchievabilityAssessmentRequestPET& setTimingConstraints(const uci::type::TimingConstraintsType& value) = 0;

  /** Returns whether the Element identified by TimingConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TimingConstraints is enabled or not.
    */
  virtual bool hasTimingConstraints() const = 0;

  /** Enables the Element identified by TimingConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TimingConstraints.
    */
  virtual uci::type::TimingConstraintsType& enableTimingConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TimingConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AchievabilityAssessmentRequestPET& clearTimingConstraints() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RequestFrequencyPeriod.
    *
    * @return The value of the simple primitive data type identified by RequestFrequencyPeriod.
    */
  virtual uci::type::DurationTypeValue getRequestFrequencyPeriod() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RequestFrequencyPeriod.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AchievabilityAssessmentRequestPET& setRequestFrequencyPeriod(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by RequestFrequencyPeriod exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RequestFrequencyPeriod is enabled or not.
    */
  virtual bool hasRequestFrequencyPeriod() const = 0;

  /** Clears (disabled) the Element identified by RequestFrequencyPeriod.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AchievabilityAssessmentRequestPET& clearRequestFrequencyPeriod() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AchievabilityAssessmentRequestPET() {
  }

  /** The destructor [only available to derived classes]. */
  ~AchievabilityAssessmentRequestPET() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AchievabilityAssessmentRequestPET to copy from.
    */
  AchievabilityAssessmentRequestPET(const AchievabilityAssessmentRequestPET& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AchievabilityAssessmentRequestPET to the contents of the
    * AchievabilityAssessmentRequestPET on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The AchievabilityAssessmentRequestPET on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this AchievabilityAssessmentRequestPET.
    * @return A reference to this AchievabilityAssessmentRequestPET.
    */
  AchievabilityAssessmentRequestPET& operator=(const AchievabilityAssessmentRequestPET& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ACHIEVABILITYASSESSMENTREQUESTPET_H

