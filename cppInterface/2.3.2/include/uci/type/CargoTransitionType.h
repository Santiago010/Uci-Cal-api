/** @file CargoTransitionType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CARGOTRANSITIONTYPE_H
#define UCI_TYPE_CARGOTRANSITIONTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CargoDeliverySubCapabilityEnum.h"
#include "CargoID_Type.h"
#include "Point3D_Type.h"
#include "SectorType.h"
#include "VehicleControlStrategyEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class CargoTransitionType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CargoTransitionType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CargoTransitionType.
    */
  static UCI_EXPORT CargoTransitionType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CargoTransitionType initializing the data accessed by the new CargoTransitionType using
    * the data accessed by the specified CargoTransitionType (cloning).
    *
    * @param accessor The CargoTransitionType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created CargoTransitionType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CargoTransitionType.
    */
  static UCI_EXPORT CargoTransitionType& create(const CargoTransitionType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CargoTransitionType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The CargoTransitionType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CargoTransitionType& accessor);

  /** Returns this accessor's type constant, i.e. cargoTransitionType.
    *
    * @return This accessor's type constant, i.e. cargoTransitionType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::cargoTransitionType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CargoTransitionType.
    *
    * @return The version that was initialized from the uci:version attribute of CargoTransitionType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CargoTransitionType& accessor) = 0;

  /** A list of the unique IDs assigned to the cargo items involved in this cargo relocation. [Occurrences: Minimum: 1;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CargoID_Type, uci::type::accessorType::cargoID_Type> CargoID;

  /** Point of control and/or cargo transition (release, drop, pick-up, launch, handover, etc.). For the case of
    * independent hand-off and hand back points, two are given with the hand-off point being first. [Occurrences: Minimum:
    * 1; Maximum: 2]
    */
  typedef uci::base::BoundedList<uci::type::Point3D_Type, uci::type::accessorType::point3D_Type> TransitionLocation;

  /** Returns a const reference to the bounded list identified by CargoID.
    *
    * @return A const reference to the bounded list identified by CargoID.
    */
  virtual const uci::type::CargoTransitionType::CargoID& getCargoID() const = 0;

  /** Returns a reference to the bounded list identified by CargoID.
    *
    * @return A reference to the bounded list identified by CargoID.
    */
  virtual uci::type::CargoTransitionType::CargoID& getCargoID() = 0;

  /** Sets the bounded list identified by CargoID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CargoTransitionType& setCargoID(const uci::type::CargoTransitionType::CargoID& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by VehicleControlStrategy.
    *
    * @return A const reference to the value of the enumeration identified by VehicleControlStrategy.
    */
  virtual const uci::type::VehicleControlStrategyEnum& getVehicleControlStrategy() const = 0;

  /** Returns a reference to the value of the enumeration identified by VehicleControlStrategy.
    *
    * @return A reference to the value of the enumeration identified by VehicleControlStrategy.
    */
  virtual uci::type::VehicleControlStrategyEnum& getVehicleControlStrategy() = 0;

  /** Sets the value of the enumeration identified by VehicleControlStrategy.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CargoTransitionType& setVehicleControlStrategy(const uci::type::VehicleControlStrategyEnum& value) = 0;

  /** Sets the value of the enumeration identified by VehicleControlStrategy.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CargoTransitionType& setVehicleControlStrategy(uci::type::VehicleControlStrategyEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by LoadUnloadStrategy.
    *
    * @return A const reference to the value of the enumeration identified by LoadUnloadStrategy.
    */
  virtual const uci::type::CargoDeliverySubCapabilityEnum& getLoadUnloadStrategy() const = 0;

  /** Returns a reference to the value of the enumeration identified by LoadUnloadStrategy.
    *
    * @return A reference to the value of the enumeration identified by LoadUnloadStrategy.
    */
  virtual uci::type::CargoDeliverySubCapabilityEnum& getLoadUnloadStrategy() = 0;

  /** Sets the value of the enumeration identified by LoadUnloadStrategy.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CargoTransitionType& setLoadUnloadStrategy(const uci::type::CargoDeliverySubCapabilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by LoadUnloadStrategy.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CargoTransitionType& setLoadUnloadStrategy(uci::type::CargoDeliverySubCapabilityEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by TransitionLocation.
    *
    * @return A const reference to the bounded list identified by TransitionLocation.
    */
  virtual const uci::type::CargoTransitionType::TransitionLocation& getTransitionLocation() const = 0;

  /** Returns a reference to the bounded list identified by TransitionLocation.
    *
    * @return A reference to the bounded list identified by TransitionLocation.
    */
  virtual uci::type::CargoTransitionType::TransitionLocation& getTransitionLocation() = 0;

  /** Sets the bounded list identified by TransitionLocation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CargoTransitionType& setTransitionLocation(const uci::type::CargoTransitionType::TransitionLocation& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EgressConstraint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EgressConstraint.
    */
  virtual const uci::type::SectorType& getEgressConstraint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EgressConstraint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EgressConstraint.
    */
  virtual uci::type::SectorType& getEgressConstraint() = 0;

  /** Sets the complex content identified by EgressConstraint to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EgressConstraint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CargoTransitionType& setEgressConstraint(const uci::type::SectorType& value) = 0;

  /** Returns whether the Element identified by EgressConstraint exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EgressConstraint is enabled or not.
    */
  virtual bool hasEgressConstraint() const = 0;

  /** Enables the Element identified by EgressConstraint.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EgressConstraint.
    */
  virtual uci::type::SectorType& enableEgressConstraint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EgressConstraint.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CargoTransitionType& clearEgressConstraint() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * IngressConstraint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      IngressConstraint.
    */
  virtual const uci::type::SectorType& getIngressConstraint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by IngressConstraint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by IngressConstraint.
    */
  virtual uci::type::SectorType& getIngressConstraint() = 0;

  /** Sets the complex content identified by IngressConstraint to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by IngressConstraint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CargoTransitionType& setIngressConstraint(const uci::type::SectorType& value) = 0;

  /** Returns whether the Element identified by IngressConstraint exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IngressConstraint is enabled or not.
    */
  virtual bool hasIngressConstraint() const = 0;

  /** Enables the Element identified by IngressConstraint.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by IngressConstraint.
    */
  virtual uci::type::SectorType& enableIngressConstraint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by IngressConstraint.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CargoTransitionType& clearIngressConstraint() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CargoTransitionType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CargoTransitionType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CargoTransitionType to copy from.
    */
  CargoTransitionType(const CargoTransitionType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CargoTransitionType to the contents of the CargoTransitionType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CargoTransitionType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this CargoTransitionType.
    * @return A reference to this CargoTransitionType.
    */
  CargoTransitionType& operator=(const CargoTransitionType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_CARGOTRANSITIONTYPE_H

