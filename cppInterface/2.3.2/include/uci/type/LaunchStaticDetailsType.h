/** @file LaunchStaticDetailsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_LAUNCHSTATICDETAILSTYPE_H
#define UCI_TYPE_LAUNCHSTATICDETAILSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/AnglePositiveType.h"
#include "uci/type/AssetType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/EOB_SiteIdentityType.h"
#include "uci/type/EnvironmentEnum.h"
#include "uci/type/OpPointID_Type.h"
#include "uci/type/Point2D_ReportedType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Describes static characteristics of a launch instance that remain constant over the duration of the launch. */
class LaunchStaticDetailsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new LaunchStaticDetailsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed LaunchStaticDetailsType.
    */
  static UCI_EXPORT LaunchStaticDetailsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new LaunchStaticDetailsType initializing the data accessed by the new
    * LaunchStaticDetailsType using the data accessed by the specified LaunchStaticDetailsType (cloning).
    *
    * @param accessor The LaunchStaticDetailsType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created LaunchStaticDetailsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed LaunchStaticDetailsType.
    */
  static UCI_EXPORT LaunchStaticDetailsType& create(const LaunchStaticDetailsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified LaunchStaticDetailsType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The LaunchStaticDetailsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(LaunchStaticDetailsType& accessor);

  /** Returns this accessor's type constant, i.e. launchStaticDetailsType.
    *
    * @return This accessor's type constant, i.e. launchStaticDetailsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::launchStaticDetailsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of LaunchStaticDetailsType.
    *
    * @return The version that was initialized from the uci:version attribute of LaunchStaticDetailsType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const LaunchStaticDetailsType& accessor) = 0;

  /** Indicates the source that launched the tracked object. This could be the facility where the launch occurred or the
    * equipment that launched the vehicle. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::AssetType, uci::type::accessorType::assetType> SourceLaunchedFrom;

  /** Returns the value of the SimplePrimitive data type identified by LaunchTime.
    *
    * @return The value of the simple primitive data type identified by LaunchTime.
    */
  virtual uci::type::DateTimeTypeValue getLaunchTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LaunchTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchStaticDetailsType& setLaunchTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by LaunchTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LaunchTime is enabled or not.
    */
  virtual bool hasLaunchTime() const = 0;

  /** Clears (disabled) the Element identified by LaunchTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchStaticDetailsType& clearLaunchTime() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by LaunchSite.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by LaunchSite.
    */
  virtual const uci::type::EOB_SiteIdentityType& getLaunchSite() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LaunchSite.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LaunchSite.
    */
  virtual uci::type::EOB_SiteIdentityType& getLaunchSite() = 0;

  /** Sets the complex content identified by LaunchSite to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LaunchSite.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchStaticDetailsType& setLaunchSite(const uci::type::EOB_SiteIdentityType& value) = 0;

  /** Returns whether the Element identified by LaunchSite exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LaunchSite is enabled or not.
    */
  virtual bool hasLaunchSite() const = 0;

  /** Enables the Element identified by LaunchSite.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by LaunchSite.
    */
  virtual uci::type::EOB_SiteIdentityType& enableLaunchSite(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LaunchSite.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchStaticDetailsType& clearLaunchSite() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by LaunchLocation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by LaunchLocation.
    */
  virtual const uci::type::Point2D_ReportedType& getLaunchLocation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LaunchLocation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LaunchLocation.
    */
  virtual uci::type::Point2D_ReportedType& getLaunchLocation() = 0;

  /** Sets the complex content identified by LaunchLocation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LaunchLocation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchStaticDetailsType& setLaunchLocation(const uci::type::Point2D_ReportedType& value) = 0;

  /** Returns whether the Element identified by LaunchLocation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LaunchLocation is enabled or not.
    */
  virtual bool hasLaunchLocation() const = 0;

  /** Enables the Element identified by LaunchLocation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by LaunchLocation.
    */
  virtual uci::type::Point2D_ReportedType& enableLaunchLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LaunchLocation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchStaticDetailsType& clearLaunchLocation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by LaunchAzimuth.
    *
    * @return The value of the simple primitive data type identified by LaunchAzimuth.
    */
  virtual uci::type::AnglePositiveTypeValue getLaunchAzimuth() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LaunchAzimuth.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchStaticDetailsType& setLaunchAzimuth(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by LaunchAzimuth exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LaunchAzimuth is enabled or not.
    */
  virtual bool hasLaunchAzimuth() const = 0;

  /** Clears (disabled) the Element identified by LaunchAzimuth.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchStaticDetailsType& clearLaunchAzimuth() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by LaunchOpPointID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by LaunchOpPointID.
    */
  virtual const uci::type::OpPointID_Type& getLaunchOpPointID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LaunchOpPointID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LaunchOpPointID.
    */
  virtual uci::type::OpPointID_Type& getLaunchOpPointID() = 0;

  /** Sets the complex content identified by LaunchOpPointID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LaunchOpPointID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchStaticDetailsType& setLaunchOpPointID(const uci::type::OpPointID_Type& value) = 0;

  /** Returns whether the Element identified by LaunchOpPointID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LaunchOpPointID is enabled or not.
    */
  virtual bool hasLaunchOpPointID() const = 0;

  /** Enables the Element identified by LaunchOpPointID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by LaunchOpPointID.
    */
  virtual uci::type::OpPointID_Type& enableLaunchOpPointID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LaunchOpPointID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchStaticDetailsType& clearLaunchOpPointID() = 0;

  /** Returns a const reference to the bounded list identified by SourceLaunchedFrom.
    *
    * @return A const reference to the bounded list identified by SourceLaunchedFrom.
    */
  virtual const uci::type::LaunchStaticDetailsType::SourceLaunchedFrom& getSourceLaunchedFrom() const = 0;

  /** Returns a reference to the bounded list identified by SourceLaunchedFrom.
    *
    * @return A reference to the bounded list identified by SourceLaunchedFrom.
    */
  virtual uci::type::LaunchStaticDetailsType::SourceLaunchedFrom& getSourceLaunchedFrom() = 0;

  /** Sets the bounded list identified by SourceLaunchedFrom.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchStaticDetailsType& setSourceLaunchedFrom(const uci::type::LaunchStaticDetailsType::SourceLaunchedFrom& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by DomainLaunchedFrom.
    *
    * @return A const reference to the value of the enumeration identified by DomainLaunchedFrom.
    */
  virtual const uci::type::EnvironmentEnum& getDomainLaunchedFrom() const = 0;

  /** Returns a reference to the value of the enumeration identified by DomainLaunchedFrom.
    *
    * @return A reference to the value of the enumeration identified by DomainLaunchedFrom.
    */
  virtual uci::type::EnvironmentEnum& getDomainLaunchedFrom() = 0;

  /** Sets the value of the enumeration identified by DomainLaunchedFrom.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchStaticDetailsType& setDomainLaunchedFrom(const uci::type::EnvironmentEnum& value) = 0;

  /** Sets the value of the enumeration identified by DomainLaunchedFrom.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchStaticDetailsType& setDomainLaunchedFrom(uci::type::EnvironmentEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by DomainLaunchedFrom exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DomainLaunchedFrom is enabled or not.
    */
  virtual bool hasDomainLaunchedFrom() const = 0;

  /** Enables the Element identified by DomainLaunchedFrom.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by DomainLaunchedFrom.
    */
  virtual uci::type::EnvironmentEnum& enableDomainLaunchedFrom(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DomainLaunchedFrom.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchStaticDetailsType& clearDomainLaunchedFrom() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  LaunchStaticDetailsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~LaunchStaticDetailsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The LaunchStaticDetailsType to copy from.
    */
  LaunchStaticDetailsType(const LaunchStaticDetailsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this LaunchStaticDetailsType to the contents of the
    * LaunchStaticDetailsType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The LaunchStaticDetailsType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this LaunchStaticDetailsType.
    * @return A reference to this LaunchStaticDetailsType.
    */
  LaunchStaticDetailsType& operator=(const LaunchStaticDetailsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_LAUNCHSTATICDETAILSTYPE_H

