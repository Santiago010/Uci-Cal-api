/** @file Link16EntityDataLinkNativeFilterType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_LINK16ENTITYDATALINKNATIVEFILTERTYPE_H
#define UCI_TYPE_LINK16ENTITYDATALINKNATIVEFILTERTYPE_H

#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/DataLinkNativeFilterPET.h"
#include "uci/type/EntityAssignmentType.h"
#include "uci/type/GatewayLink16ConfigurationAreaType.h"
#include "uci/type/GatewayLink16ConfigurationClassEnum.h"
#include "uci/type/GatewayLink16ConfigurationEnvironmentType.h"
#include "uci/type/GatewayLink16ConfigurationIdentityType.h"
#include "uci/type/Link16_NPG_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This is a polymorphic extension which allows for the extension of the base DataLinkNativeFilterPET for Link-16 Entity
  * Ingress / Egress.
  */
class Link16EntityDataLinkNativeFilterType : public virtual DataLinkNativeFilterPET {
public:

  /** This method constructs a new Link16EntityDataLinkNativeFilterType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed Link16EntityDataLinkNativeFilterType.
    */
  static UCI_EXPORT Link16EntityDataLinkNativeFilterType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new Link16EntityDataLinkNativeFilterType initializing the data accessed by the new
    * Link16EntityDataLinkNativeFilterType using the data accessed by the specified Link16EntityDataLinkNativeFilterType
    * (cloning).
    *
    * @param accessor The Link16EntityDataLinkNativeFilterType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created Link16EntityDataLinkNativeFilterType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed Link16EntityDataLinkNativeFilterType.
    */
  static UCI_EXPORT Link16EntityDataLinkNativeFilterType& create(const Link16EntityDataLinkNativeFilterType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified Link16EntityDataLinkNativeFilterType. Use of the specified accessor after it has
    * been destroyed will result in undefined behavior.
    *
    * @param accessor The Link16EntityDataLinkNativeFilterType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(Link16EntityDataLinkNativeFilterType& accessor);

  /** Returns this accessor's type constant, i.e. link16EntityDataLinkNativeFilterType.
    *
    * @return This accessor's type constant, i.e. link16EntityDataLinkNativeFilterType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::link16EntityDataLinkNativeFilterType;
  }

  /** Returns the version that was initialized from the uci:version attribute of Link16EntityDataLinkNativeFilterType.
    *
    * @return The version that was initialized from the uci:version attribute of Link16EntityDataLinkNativeFilterType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const Link16EntityDataLinkNativeFilterType& accessor) = 0;

  /** The Link-16 Network Participation Groups for which this Entity should be produced on or listened for on.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::Link16_NPG_Type, uci::type::accessorType::link16_NPG_Type> Link16NPG;

  /** This element provides a mapping between an EntityID to a Link-16 TrackIndex. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EntityAssignmentType, uci::type::accessorType::entityAssignmentType> EntityIdentification;

  /** Returns a const reference to the value of the enumeration identified by GatewayClass.
    *
    * @return A const reference to the value of the enumeration identified by GatewayClass.
    */
  virtual const uci::type::GatewayLink16ConfigurationClassEnum& getGatewayClass() const = 0;

  /** Returns a reference to the value of the enumeration identified by GatewayClass.
    *
    * @return A reference to the value of the enumeration identified by GatewayClass.
    */
  virtual uci::type::GatewayLink16ConfigurationClassEnum& getGatewayClass() = 0;

  /** Sets the value of the enumeration identified by GatewayClass.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& setGatewayClass(const uci::type::GatewayLink16ConfigurationClassEnum& value) = 0;

  /** Sets the value of the enumeration identified by GatewayClass.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& setGatewayClass(uci::type::GatewayLink16ConfigurationClassEnum::EnumerationItem value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by SpecialProcessingIndicator.
    *
    * @return The value of the simple primitive data type identified by SpecialProcessingIndicator.
    */
  virtual xs::Boolean getSpecialProcessingIndicator() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SpecialProcessingIndicator.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& setSpecialProcessingIndicator(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by SimulationIndicator.
    *
    * @return The value of the simple primitive data type identified by SimulationIndicator.
    */
  virtual xs::Boolean getSimulationIndicator() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SimulationIndicator.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& setSimulationIndicator(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by TargetSorting12_6.
    *
    * @return The value of the simple primitive data type identified by TargetSorting12_6.
    */
  virtual xs::Boolean getTargetSorting12_6() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TargetSorting12_6.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& setTargetSorting12_6(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Track3X.
    *
    * @return The value of the simple primitive data type identified by Track3X.
    */
  virtual xs::Boolean getTrack3X() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Track3X.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& setTrack3X(xs::Boolean value) = 0;

  /** Returns a const reference to the bounded list identified by Link16NPG.
    *
    * @return A const reference to the bounded list identified by Link16NPG.
    */
  virtual const uci::type::Link16EntityDataLinkNativeFilterType::Link16NPG& getLink16NPG() const = 0;

  /** Returns a reference to the bounded list identified by Link16NPG.
    *
    * @return A reference to the bounded list identified by Link16NPG.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType::Link16NPG& getLink16NPG() = 0;

  /** Sets the bounded list identified by Link16NPG.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& setLink16NPG(const uci::type::Link16EntityDataLinkNativeFilterType::Link16NPG& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by GeographicArea.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by GeographicArea.
    */
  virtual const uci::type::GatewayLink16ConfigurationAreaType& getGeographicArea() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by GeographicArea.
    *
    * @return A reference to the accessor that provides access to the complex content identified by GeographicArea.
    */
  virtual uci::type::GatewayLink16ConfigurationAreaType& getGeographicArea() = 0;

  /** Sets the complex content identified by GeographicArea to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GeographicArea.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& setGeographicArea(const uci::type::GatewayLink16ConfigurationAreaType& value) = 0;

  /** Returns whether the Element identified by GeographicArea exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by GeographicArea is enabled or not.
    */
  virtual bool hasGeographicArea() const = 0;

  /** Enables the Element identified by GeographicArea.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by GeographicArea.
    */
  virtual uci::type::GatewayLink16ConfigurationAreaType& enableGeographicArea(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by GeographicArea.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& clearGeographicArea() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Number.
    *
    * @return The value of the simple primitive data type identified by Number.
    */
  virtual xs::UnsignedInt getNumber() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Number.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& setNumber(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by Number exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Number is enabled or not.
    */
  virtual bool hasNumber() const = 0;

  /** Clears (disabled) the Element identified by Number.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& clearNumber() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Environment.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Environment.
    */
  virtual const uci::type::GatewayLink16ConfigurationEnvironmentType& getEnvironment() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Environment.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Environment.
    */
  virtual uci::type::GatewayLink16ConfigurationEnvironmentType& getEnvironment() = 0;

  /** Sets the complex content identified by Environment to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Environment.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& setEnvironment(const uci::type::GatewayLink16ConfigurationEnvironmentType& value) = 0;

  /** Returns whether the Element identified by Environment exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Environment is enabled or not.
    */
  virtual bool hasEnvironment() const = 0;

  /** Enables the Element identified by Environment.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Environment.
    */
  virtual uci::type::GatewayLink16ConfigurationEnvironmentType& enableEnvironment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Environment.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& clearEnvironment() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual const uci::type::GatewayLink16ConfigurationIdentityType& getIdentity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::GatewayLink16ConfigurationIdentityType& getIdentity() = 0;

  /** Sets the complex content identified by Identity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Identity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& setIdentity(const uci::type::GatewayLink16ConfigurationIdentityType& value) = 0;

  /** Returns whether the Element identified by Identity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Identity is enabled or not.
    */
  virtual bool hasIdentity() const = 0;

  /** Enables the Element identified by Identity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::GatewayLink16ConfigurationIdentityType& enableIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Identity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& clearIdentity() = 0;

  /** Returns a const reference to the bounded list identified by EntityIdentification.
    *
    * @return A const reference to the bounded list identified by EntityIdentification.
    */
  virtual const uci::type::Link16EntityDataLinkNativeFilterType::EntityIdentification& getEntityIdentification() const = 0;

  /** Returns a reference to the bounded list identified by EntityIdentification.
    *
    * @return A reference to the bounded list identified by EntityIdentification.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType::EntityIdentification& getEntityIdentification() = 0;

  /** Sets the bounded list identified by EntityIdentification.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16EntityDataLinkNativeFilterType& setEntityIdentification(const uci::type::Link16EntityDataLinkNativeFilterType::EntityIdentification& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  Link16EntityDataLinkNativeFilterType() {
  }

  /** The destructor [only available to derived classes]. */
  ~Link16EntityDataLinkNativeFilterType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The Link16EntityDataLinkNativeFilterType to copy from.
    */
  Link16EntityDataLinkNativeFilterType(const Link16EntityDataLinkNativeFilterType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this Link16EntityDataLinkNativeFilterType to the contents of the
    * Link16EntityDataLinkNativeFilterType on the right hand side (rhs) of the assignment operator [only available to
    * derived classes].
    *
    * @param rhs The Link16EntityDataLinkNativeFilterType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this Link16EntityDataLinkNativeFilterType.
    * @return A reference to this Link16EntityDataLinkNativeFilterType.
    */
  Link16EntityDataLinkNativeFilterType& operator=(const Link16EntityDataLinkNativeFilterType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_LINK16ENTITYDATALINKNATIVEFILTERTYPE_H

