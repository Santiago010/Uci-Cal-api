/** @file CommPointingPlanRequestType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMPOINTINGPLANREQUESTTYPE_H
#define UCI_TYPE_COMMPOINTINGPLANREQUESTTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CommCoverageUserDataType.h"
#include "CommPointingAssessmentEnum.h"
#include "CommScheduleAllocationID_Type.h"
#include "CommSchedulingRequirementID_Type.h"
#include "ForeignKeyType.h"
#include "RoutePlanReferencesType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The inputs used in generating and/or requesting a Comm Pointing Assessment. */
class CommPointingPlanRequestType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CommPointingPlanRequestType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommPointingPlanRequestType.
    */
  static UCI_EXPORT CommPointingPlanRequestType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CommPointingPlanRequestType initializing the data accessed by the new
    * CommPointingPlanRequestType using the data accessed by the specified CommPointingPlanRequestType (cloning).
    *
    * @param accessor The CommPointingPlanRequestType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created CommPointingPlanRequestType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommPointingPlanRequestType.
    */
  static UCI_EXPORT CommPointingPlanRequestType& create(const CommPointingPlanRequestType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CommPointingPlanRequestType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The CommPointingPlanRequestType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CommPointingPlanRequestType& accessor);

  /** Returns this accessor's type constant, i.e. commPointingPlanRequestType.
    *
    * @return This accessor's type constant, i.e. commPointingPlanRequestType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commPointingPlanRequestType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CommPointingPlanRequestType.
    *
    * @return The version that was initialized from the uci:version attribute of CommPointingPlanRequestType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CommPointingPlanRequestType& accessor) = 0;

  /** Indicates a RoutePlan or parts of a RoutePlan to assess for communications support and pointing. [Occurrences:
    * Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RoutePlanReferencesType, uci::type::accessorType::routePlanReferencesType> RoutePlan;

  /** This element constrains the assessment to the use of all unscheduled, unpurchased, available comm. When Assessment
    * Constraint Level is set to COMM_SCHEDULE_AVAILABILITY, this element is populated concurrently with communication
    * scheduling Requirements Constraints and communication schedule allocation Constraints. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CommCoverageUserDataType, uci::type::accessorType::commCoverageUserDataType> CommScheduleAvailabilityConstraints;

  /** This element constrains the assessment to the use of communication requirements that may or may not have been
    * submitted in a CommSchedulingRequest. This assessment type allows communication to be analyzed based on any pending
    * communication purchases or prior to purchase. When Assessment Constraint Level is set to COMM_SCHEDULE_REQUIREMENTS,
    * this element may be populated concurrently with communicationSchedule Allocation Constraints. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CommSchedulingRequirementID_Type, uci::type::accessorType::commSchedulingRequirementID_Type> CommSchedulingRequirementConstraintsID;

  /** List of external communications resources that have been allocated to Missions. When Assessment Constraint Level is
    * set to COMM_SCHEDULE_ALLOCATIONS, this element is populated by itself in absence of the other constraint types.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CommScheduleAllocationID_Type, uci::type::accessorType::commScheduleAllocationID_Type> CommScheduleAllocationConstraintsID;

  /** Identifies the foreign key or keys associated with the assessment resources. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType> AssessmentResourceList;

  /** Returns a const reference to the bounded list identified by RoutePlan.
    *
    * @return A const reference to the bounded list identified by RoutePlan.
    */
  virtual const uci::type::CommPointingPlanRequestType::RoutePlan& getRoutePlan() const = 0;

  /** Returns a reference to the bounded list identified by RoutePlan.
    *
    * @return A reference to the bounded list identified by RoutePlan.
    */
  virtual uci::type::CommPointingPlanRequestType::RoutePlan& getRoutePlan() = 0;

  /** Sets the bounded list identified by RoutePlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPointingPlanRequestType& setRoutePlan(const uci::type::CommPointingPlanRequestType::RoutePlan& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by AssessmentConstraintLevel.
    *
    * @return A const reference to the value of the enumeration identified by AssessmentConstraintLevel.
    */
  virtual const uci::type::CommPointingAssessmentEnum& getAssessmentConstraintLevel() const = 0;

  /** Returns a reference to the value of the enumeration identified by AssessmentConstraintLevel.
    *
    * @return A reference to the value of the enumeration identified by AssessmentConstraintLevel.
    */
  virtual uci::type::CommPointingAssessmentEnum& getAssessmentConstraintLevel() = 0;

  /** Sets the value of the enumeration identified by AssessmentConstraintLevel.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPointingPlanRequestType& setAssessmentConstraintLevel(const uci::type::CommPointingAssessmentEnum& value) = 0;

  /** Sets the value of the enumeration identified by AssessmentConstraintLevel.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPointingPlanRequestType& setAssessmentConstraintLevel(uci::type::CommPointingAssessmentEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by CommScheduleAvailabilityConstraints.
    *
    * @return A const reference to the bounded list identified by CommScheduleAvailabilityConstraints.
    */
  virtual const uci::type::CommPointingPlanRequestType::CommScheduleAvailabilityConstraints& getCommScheduleAvailabilityConstraints() const = 0;

  /** Returns a reference to the bounded list identified by CommScheduleAvailabilityConstraints.
    *
    * @return A reference to the bounded list identified by CommScheduleAvailabilityConstraints.
    */
  virtual uci::type::CommPointingPlanRequestType::CommScheduleAvailabilityConstraints& getCommScheduleAvailabilityConstraints() = 0;

  /** Sets the bounded list identified by CommScheduleAvailabilityConstraints.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPointingPlanRequestType& setCommScheduleAvailabilityConstraints(const uci::type::CommPointingPlanRequestType::CommScheduleAvailabilityConstraints& value) = 0;

  /** Returns a const reference to the bounded list identified by CommSchedulingRequirementConstraintsID.
    *
    * @return A const reference to the bounded list identified by CommSchedulingRequirementConstraintsID.
    */
  virtual const uci::type::CommPointingPlanRequestType::CommSchedulingRequirementConstraintsID& getCommSchedulingRequirementConstraintsID() const = 0;

  /** Returns a reference to the bounded list identified by CommSchedulingRequirementConstraintsID.
    *
    * @return A reference to the bounded list identified by CommSchedulingRequirementConstraintsID.
    */
  virtual uci::type::CommPointingPlanRequestType::CommSchedulingRequirementConstraintsID& getCommSchedulingRequirementConstraintsID() = 0;

  /** Sets the bounded list identified by CommSchedulingRequirementConstraintsID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPointingPlanRequestType& setCommSchedulingRequirementConstraintsID(const uci::type::CommPointingPlanRequestType::CommSchedulingRequirementConstraintsID& value) = 0;

  /** Returns a const reference to the bounded list identified by CommScheduleAllocationConstraintsID.
    *
    * @return A const reference to the bounded list identified by CommScheduleAllocationConstraintsID.
    */
  virtual const uci::type::CommPointingPlanRequestType::CommScheduleAllocationConstraintsID& getCommScheduleAllocationConstraintsID() const = 0;

  /** Returns a reference to the bounded list identified by CommScheduleAllocationConstraintsID.
    *
    * @return A reference to the bounded list identified by CommScheduleAllocationConstraintsID.
    */
  virtual uci::type::CommPointingPlanRequestType::CommScheduleAllocationConstraintsID& getCommScheduleAllocationConstraintsID() = 0;

  /** Sets the bounded list identified by CommScheduleAllocationConstraintsID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPointingPlanRequestType& setCommScheduleAllocationConstraintsID(const uci::type::CommPointingPlanRequestType::CommScheduleAllocationConstraintsID& value) = 0;

  /** Returns a const reference to the bounded list identified by AssessmentResourceList.
    *
    * @return A const reference to the bounded list identified by AssessmentResourceList.
    */
  virtual const uci::type::CommPointingPlanRequestType::AssessmentResourceList& getAssessmentResourceList() const = 0;

  /** Returns a reference to the bounded list identified by AssessmentResourceList.
    *
    * @return A reference to the bounded list identified by AssessmentResourceList.
    */
  virtual uci::type::CommPointingPlanRequestType::AssessmentResourceList& getAssessmentResourceList() = 0;

  /** Sets the bounded list identified by AssessmentResourceList.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPointingPlanRequestType& setAssessmentResourceList(const uci::type::CommPointingPlanRequestType::AssessmentResourceList& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CommPointingPlanRequestType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommPointingPlanRequestType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommPointingPlanRequestType to copy from.
    */
  CommPointingPlanRequestType(const CommPointingPlanRequestType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CommPointingPlanRequestType to the contents of the
    * CommPointingPlanRequestType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The CommPointingPlanRequestType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this CommPointingPlanRequestType.
    * @return A reference to this CommPointingPlanRequestType.
    */
  CommPointingPlanRequestType& operator=(const CommPointingPlanRequestType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMMPOINTINGPLANREQUESTTYPE_H

