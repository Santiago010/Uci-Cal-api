/** @file OrbitPlanType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ORBITPLANTYPE_H
#define UCI_TYPE_ORBITPLANTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "DateTimeRangeType.h"
#include "OrbitKinematicsSequenceID_Type.h"
#include "OrbitKinematicsSequenceType.h"
#include "OrbitKinematicsSetParametersType.h"
#include "OrbitPlanPartsType.h"
#include "OrbitRegimeType.h"
#include "PlanApplicabilityType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Contains the details of the orbit plan. */
class OrbitPlanType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OrbitPlanType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitPlanType.
    */
  static UCI_EXPORT OrbitPlanType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OrbitPlanType initializing the data accessed by the new OrbitPlanType using the data
    * accessed by the specified OrbitPlanType (cloning).
    *
    * @param accessor The OrbitPlanType that provides access to the data that is to be used to initialize the data accessed
    *      by the new created OrbitPlanType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitPlanType.
    */
  static UCI_EXPORT OrbitPlanType& create(const OrbitPlanType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OrbitPlanType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The OrbitPlanType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OrbitPlanType& accessor);

  /** Returns this accessor's type constant, i.e. orbitPlanType.
    *
    * @return This accessor's type constant, i.e. orbitPlanType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::orbitPlanType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OrbitPlanType.
    *
    * @return The version that was initialized from the uci:version attribute of OrbitPlanType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.001.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OrbitPlanType& accessor) = 0;

  /** Indicates an orbital regime in which the spacecraft will reside during the OrbitPlan. This element is included for
    * convenience in querying for OrbitPlans in the same regime. List size is based on the number of enum values ("Select
    * All That Apply") in OrbitRegimeEnum type. If multiple instances are given, each should be of a different
    * OrbitRegimeEnum type as indicated by the child element. [Occurrences: Minimum: 1; Maximum: 11]
    */
  typedef uci::base::BoundedList<uci::type::OrbitRegimeType, uci::type::accessorType::orbitRegimeType> Orbit;

  /** Indicates the planned orbital kinematics for a sequence of the orbit plan. [Occurrences: Minimum: 1; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OrbitKinematicsSequenceType, uci::type::accessorType::orbitKinematicsSequenceType> Sequence;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Applicability.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Applicability.
    */
  virtual const uci::type::PlanApplicabilityType& getApplicability() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Applicability.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Applicability.
    */
  virtual uci::type::PlanApplicabilityType& getApplicability() = 0;

  /** Sets the complex content identified by Applicability to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Applicability.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitPlanType& setApplicability(const uci::type::PlanApplicabilityType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Window.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Window.
    */
  virtual const uci::type::DateTimeRangeType& getWindow() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Window.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Window.
    */
  virtual uci::type::DateTimeRangeType& getWindow() = 0;

  /** Sets the complex content identified by Window to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Window.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitPlanType& setWindow(const uci::type::DateTimeRangeType& value) = 0;

  /** Returns whether the Element identified by Window exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Window is enabled or not.
    */
  virtual bool hasWindow() const = 0;

  /** Enables the Element identified by Window.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Window.
    */
  virtual uci::type::DateTimeRangeType& enableWindow(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Window.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitPlanType& clearWindow() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Parts.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Parts.
    */
  virtual const uci::type::OrbitPlanPartsType& getParts() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Parts.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Parts.
    */
  virtual uci::type::OrbitPlanPartsType& getParts() = 0;

  /** Sets the complex content identified by Parts to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Parts.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitPlanType& setParts(const uci::type::OrbitPlanPartsType& value) = 0;

  /** Returns a const reference to the bounded list identified by Orbit.
    *
    * @return A const reference to the bounded list identified by Orbit.
    */
  virtual const uci::type::OrbitPlanType::Orbit& getOrbit() const = 0;

  /** Returns a reference to the bounded list identified by Orbit.
    *
    * @return A reference to the bounded list identified by Orbit.
    */
  virtual uci::type::OrbitPlanType::Orbit& getOrbit() = 0;

  /** Sets the bounded list identified by Orbit.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitPlanType& setOrbit(const uci::type::OrbitPlanType::Orbit& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Parameters.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Parameters.
    */
  virtual const uci::type::OrbitKinematicsSetParametersType& getParameters() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Parameters.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Parameters.
    */
  virtual uci::type::OrbitKinematicsSetParametersType& getParameters() = 0;

  /** Sets the complex content identified by Parameters to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Parameters.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitPlanType& setParameters(const uci::type::OrbitKinematicsSetParametersType& value) = 0;

  /** Returns whether the Element identified by Parameters exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Parameters is enabled or not.
    */
  virtual bool hasParameters() const = 0;

  /** Enables the Element identified by Parameters.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Parameters.
    */
  virtual uci::type::OrbitKinematicsSetParametersType& enableParameters(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Parameters.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitPlanType& clearParameters() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FirstSequenceID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FirstSequenceID.
    */
  virtual const uci::type::OrbitKinematicsSequenceID_Type& getFirstSequenceID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FirstSequenceID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FirstSequenceID.
    */
  virtual uci::type::OrbitKinematicsSequenceID_Type& getFirstSequenceID() = 0;

  /** Sets the complex content identified by FirstSequenceID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FirstSequenceID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitPlanType& setFirstSequenceID(const uci::type::OrbitKinematicsSequenceID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by Sequence.
    *
    * @return A const reference to the bounded list identified by Sequence.
    */
  virtual const uci::type::OrbitPlanType::Sequence& getSequence() const = 0;

  /** Returns a reference to the bounded list identified by Sequence.
    *
    * @return A reference to the bounded list identified by Sequence.
    */
  virtual uci::type::OrbitPlanType::Sequence& getSequence() = 0;

  /** Sets the bounded list identified by Sequence.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitPlanType& setSequence(const uci::type::OrbitPlanType::Sequence& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OrbitPlanType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OrbitPlanType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OrbitPlanType to copy from.
    */
  OrbitPlanType(const OrbitPlanType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OrbitPlanType to the contents of the OrbitPlanType on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OrbitPlanType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this OrbitPlanType.
    * @return A reference to this OrbitPlanType.
    */
  OrbitPlanType& operator=(const OrbitPlanType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ORBITPLANTYPE_H

