/** @file CS_ActivityDetailType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CS_ACTIVITYDETAILTYPE_H
#define UCI_TYPE_CS_ACTIVITYDETAILTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/export.h"
#include "uci/type/CS_SENO_Type.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/FileLocationID_Type.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/IntPositiveType.h"
#include "uci/type/MilliwattPowerRatioType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type represents details for a CounterSpace engagement activity. */
class CS_ActivityDetailType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CS_ActivityDetailType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CS_ActivityDetailType.
    */
  static UCI_EXPORT CS_ActivityDetailType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CS_ActivityDetailType initializing the data accessed by the new CS_ActivityDetailType
    * using the data accessed by the specified CS_ActivityDetailType (cloning).
    *
    * @param accessor The CS_ActivityDetailType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created CS_ActivityDetailType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CS_ActivityDetailType.
    */
  static UCI_EXPORT CS_ActivityDetailType& create(const CS_ActivityDetailType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CS_ActivityDetailType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The CS_ActivityDetailType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CS_ActivityDetailType& accessor);

  /** Returns this accessor's type constant, i.e. cS_ActivityDetailType.
    *
    * @return This accessor's type constant, i.e. cS_ActivityDetailType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::cS_ActivityDetailType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CS_ActivityDetailType.
    *
    * @return The version that was initialized from the uci:version attribute of CS_ActivityDetailType.
    */
  static std::string getUCITypeVersion() {
    return "000.001.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CS_ActivityDetailType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by SENO.
    *
    * @return A const reference to the accessor that provides access to the string identified by SENO.
    */
  virtual const uci::type::CS_SENO_Type& getSENO() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by SENO.
    *
    * @return A reference to the accessor that provides access to the string identified by SENO.
    */
  virtual uci::type::CS_SENO_Type& getSENO() = 0;

  /** Sets the string identified by SENO to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by SENO.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& setSENO(const uci::type::CS_SENO_Type& value) = 0;

  /** Sets the string identified by SENO to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& setSENO(const std::string& value) = 0;

  /** Sets the string identified by SENO to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& setSENO(const char* value) = 0;

  /** Returns whether the Element identified by SENO exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SENO is enabled or not.
    */
  virtual bool hasSENO() const = 0;

  /** Enables the Element identified by SENO.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by SENO.
    */
  virtual uci::type::CS_SENO_Type& enableSENO(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SENO.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& clearSENO() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Signal.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Signal.
    */
  virtual const uci::type::ForeignKeyType& getSignal() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Signal.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Signal.
    */
  virtual uci::type::ForeignKeyType& getSignal() = 0;

  /** Sets the complex content identified by Signal to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Signal.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& setSignal(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by Signal exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Signal is enabled or not.
    */
  virtual bool hasSignal() const = 0;

  /** Enables the Element identified by Signal.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Signal.
    */
  virtual uci::type::ForeignKeyType& enableSignal(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Signal.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& clearSignal() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ForceName.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ForceName.
    */
  virtual const uci::type::ForeignKeyType& getForceName() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ForceName.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ForceName.
    */
  virtual uci::type::ForeignKeyType& getForceName() = 0;

  /** Sets the complex content identified by ForceName to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ForceName.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& setForceName(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by ForceName exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ForceName is enabled or not.
    */
  virtual bool hasForceName() const = 0;

  /** Enables the Element identified by ForceName.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ForceName.
    */
  virtual uci::type::ForeignKeyType& enableForceName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ForceName.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& clearForceName() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CS_StartStop.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CS_StartStop.
    */
  virtual const uci::type::DateTimeRangeType& getCS_StartStop() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CS_StartStop.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CS_StartStop.
    */
  virtual uci::type::DateTimeRangeType& getCS_StartStop() = 0;

  /** Sets the complex content identified by CS_StartStop to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CS_StartStop.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& setCS_StartStop(const uci::type::DateTimeRangeType& value) = 0;

  /** Returns whether the Element identified by CS_StartStop exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CS_StartStop is enabled or not.
    */
  virtual bool hasCS_StartStop() const = 0;

  /** Enables the Element identified by CS_StartStop.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CS_StartStop.
    */
  virtual uci::type::DateTimeRangeType& enableCS_StartStop(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CS_StartStop.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& clearCS_StartStop() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EIRP.
    *
    * @return The value of the simple primitive data type identified by EIRP.
    */
  virtual uci::type::MilliwattPowerRatioTypeValue getEIRP() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EIRP.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& setEIRP(uci::type::MilliwattPowerRatioTypeValue value) = 0;

  /** Returns whether the Element identified by EIRP exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EIRP is enabled or not.
    */
  virtual bool hasEIRP() const = 0;

  /** Clears (disabled) the Element identified by EIRP.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& clearEIRP() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SatNo.
    *
    * @return The value of the simple primitive data type identified by SatNo.
    */
  virtual uci::type::IntPositiveTypeValue getSatNo() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SatNo.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& setSatNo(uci::type::IntPositiveTypeValue value) = 0;

  /** Returns whether the Element identified by SatNo exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SatNo is enabled or not.
    */
  virtual bool hasSatNo() const = 0;

  /** Clears (disabled) the Element identified by SatNo.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& clearSatNo() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Success.
    *
    * @return The value of the simple primitive data type identified by Success.
    */
  virtual xs::Boolean getSuccess() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Success.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& setSuccess(xs::Boolean value) = 0;

  /** Returns whether the Element identified by Success exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Success is enabled or not.
    */
  virtual bool hasSuccess() const = 0;

  /** Clears (disabled) the Element identified by Success.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& clearSuccess() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Content.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Content.
    */
  virtual const uci::type::ForeignKeyType& getContent() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Content.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Content.
    */
  virtual uci::type::ForeignKeyType& getContent() = 0;

  /** Sets the complex content identified by Content to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Content.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& setContent(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by Content exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Content is enabled or not.
    */
  virtual bool hasContent() const = 0;

  /** Enables the Element identified by Content.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Content.
    */
  virtual uci::type::ForeignKeyType& enableContent(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Content.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& clearContent() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Tactic.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Tactic.
    */
  virtual const uci::type::ForeignKeyType& getTactic() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Tactic.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Tactic.
    */
  virtual uci::type::ForeignKeyType& getTactic() = 0;

  /** Sets the complex content identified by Tactic to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Tactic.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& setTactic(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by Tactic exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Tactic is enabled or not.
    */
  virtual bool hasTactic() const = 0;

  /** Enables the Element identified by Tactic.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Tactic.
    */
  virtual uci::type::ForeignKeyType& enableTactic(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Tactic.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& clearTactic() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Technique.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Technique.
    */
  virtual const uci::type::ForeignKeyType& getTechnique() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Technique.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Technique.
    */
  virtual uci::type::ForeignKeyType& getTechnique() = 0;

  /** Sets the complex content identified by Technique to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Technique.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& setTechnique(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by Technique exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Technique is enabled or not.
    */
  virtual bool hasTechnique() const = 0;

  /** Enables the Element identified by Technique.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Technique.
    */
  virtual uci::type::ForeignKeyType& enableTechnique(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Technique.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& clearTechnique() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CommentsID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CommentsID.
    */
  virtual const uci::type::FileLocationID_Type& getCommentsID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CommentsID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CommentsID.
    */
  virtual uci::type::FileLocationID_Type& getCommentsID() = 0;

  /** Sets the complex content identified by CommentsID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CommentsID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& setCommentsID(const uci::type::FileLocationID_Type& value) = 0;

  /** Returns whether the Element identified by CommentsID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CommentsID is enabled or not.
    */
  virtual bool hasCommentsID() const = 0;

  /** Enables the Element identified by CommentsID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CommentsID.
    */
  virtual uci::type::FileLocationID_Type& enableCommentsID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CommentsID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_ActivityDetailType& clearCommentsID() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CS_ActivityDetailType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CS_ActivityDetailType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CS_ActivityDetailType to copy from.
    */
  CS_ActivityDetailType(const CS_ActivityDetailType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CS_ActivityDetailType to the contents of the CS_ActivityDetailType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CS_ActivityDetailType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this CS_ActivityDetailType.
    * @return A reference to this CS_ActivityDetailType.
    */
  CS_ActivityDetailType& operator=(const CS_ActivityDetailType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_CS_ACTIVITYDETAILTYPE_H

