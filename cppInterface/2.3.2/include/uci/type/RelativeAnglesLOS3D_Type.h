/** @file RelativeAnglesLOS3D_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_RELATIVEANGLESLOS3D_TYPE_H
#define UCI_TYPE_RELATIVEANGLESLOS3D_TYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/AngleRateType.h"
#include "uci/type/AngleType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/LOS_ReferenceEnum.h"
#include "uci/type/RelativeAngleRateUncertaintyLOS3D_Type.h"
#include "uci/type/RelativeAngleUncertaintyLOS3D_Type.h"
#include "uci/type/UnitVectorType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This Type defines a LOS in terms of a 3D LOS unit vector. The LOS angular rates and associated angle and rate errors
  * are provided in a 2D coordinate system normal to the LOS vector. This coordinate system may be rotated about the LOS
  * unit vector defined by a roll angle. The 3D LOS unit vector's orientation is defined with respect to one of several
  * standard reference frames. Additional details may be found in the element annotations.
  */
class RelativeAnglesLOS3D_Type : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RelativeAnglesLOS3D_Type.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RelativeAnglesLOS3D_Type.
    */
  static UCI_EXPORT RelativeAnglesLOS3D_Type& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RelativeAnglesLOS3D_Type initializing the data accessed by the new
    * RelativeAnglesLOS3D_Type using the data accessed by the specified RelativeAnglesLOS3D_Type (cloning).
    *
    * @param accessor The RelativeAnglesLOS3D_Type that provides access to the data that is to be used to initialize the
    *      data accessed by the new created RelativeAnglesLOS3D_Type.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RelativeAnglesLOS3D_Type.
    */
  static UCI_EXPORT RelativeAnglesLOS3D_Type& create(const RelativeAnglesLOS3D_Type& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RelativeAnglesLOS3D_Type. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The RelativeAnglesLOS3D_Type that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RelativeAnglesLOS3D_Type& accessor);

  /** Returns this accessor's type constant, i.e. relativeAnglesLOS3D_Type.
    *
    * @return This accessor's type constant, i.e. relativeAnglesLOS3D_Type.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::relativeAnglesLOS3D_Type;
  }

  /** Returns the version that was initialized from the uci:version attribute of RelativeAnglesLOS3D_Type.
    *
    * @return The version that was initialized from the uci:version attribute of RelativeAnglesLOS3D_Type.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RelativeAnglesLOS3D_Type& accessor) = 0;

  /** Returns a const reference to the value of the enumeration identified by LOS_ReferenceFrame.
    *
    * @return A const reference to the value of the enumeration identified by LOS_ReferenceFrame.
    */
  virtual const uci::type::LOS_ReferenceEnum& getLOS_ReferenceFrame() const = 0;

  /** Returns a reference to the value of the enumeration identified by LOS_ReferenceFrame.
    *
    * @return A reference to the value of the enumeration identified by LOS_ReferenceFrame.
    */
  virtual uci::type::LOS_ReferenceEnum& getLOS_ReferenceFrame() = 0;

  /** Sets the value of the enumeration identified by LOS_ReferenceFrame.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& setLOS_ReferenceFrame(const uci::type::LOS_ReferenceEnum& value) = 0;

  /** Sets the value of the enumeration identified by LOS_ReferenceFrame.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& setLOS_ReferenceFrame(uci::type::LOS_ReferenceEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CapabilityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CapabilityID.
    */
  virtual const uci::type::CapabilityID_Type& getCapabilityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CapabilityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityID.
    */
  virtual uci::type::CapabilityID_Type& getCapabilityID() = 0;

  /** Sets the complex content identified by CapabilityID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CapabilityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& setCapabilityID(const uci::type::CapabilityID_Type& value) = 0;

  /** Returns whether the Element identified by CapabilityID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CapabilityID is enabled or not.
    */
  virtual bool hasCapabilityID() const = 0;

  /** Enables the Element identified by CapabilityID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityID.
    */
  virtual uci::type::CapabilityID_Type& enableCapabilityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CapabilityID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& clearCapabilityID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by LOS_UnitVector.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by LOS_UnitVector.
    */
  virtual const uci::type::UnitVectorType& getLOS_UnitVector() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LOS_UnitVector.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LOS_UnitVector.
    */
  virtual uci::type::UnitVectorType& getLOS_UnitVector() = 0;

  /** Sets the complex content identified by LOS_UnitVector to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LOS_UnitVector.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& setLOS_UnitVector(const uci::type::UnitVectorType& value) = 0;

  /** Enables the Element identified by LOS_UnitVector.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return A reference to the accessor that provides access to the complex content identified by LOS_UnitVector.
    */
  virtual uci::type::UnitVectorType& enableLOS_UnitVector(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns the value of the SimplePrimitive data type identified by LOS_ReferenceFrameRoll.
    *
    * @return The value of the simple primitive data type identified by LOS_ReferenceFrameRoll.
    */
  virtual uci::type::AngleTypeValue getLOS_ReferenceFrameRoll() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LOS_ReferenceFrameRoll.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& setLOS_ReferenceFrameRoll(uci::type::AngleTypeValue value) = 0;

  /** Returns whether the Element identified by LOS_ReferenceFrameRoll exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LOS_ReferenceFrameRoll is enabled or not.
    */
  virtual bool hasLOS_ReferenceFrameRoll() const = 0;

  /** Clears (disabled) the Element identified by LOS_ReferenceFrameRoll.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& clearLOS_ReferenceFrameRoll() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RelativeAngleUncertaintyLOS3D.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RelativeAngleUncertaintyLOS3D.
    */
  virtual const uci::type::RelativeAngleUncertaintyLOS3D_Type& getRelativeAngleUncertaintyLOS3D() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * RelativeAngleUncertaintyLOS3D.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      RelativeAngleUncertaintyLOS3D.
    */
  virtual uci::type::RelativeAngleUncertaintyLOS3D_Type& getRelativeAngleUncertaintyLOS3D() = 0;

  /** Sets the complex content identified by RelativeAngleUncertaintyLOS3D to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RelativeAngleUncertaintyLOS3D.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& setRelativeAngleUncertaintyLOS3D(const uci::type::RelativeAngleUncertaintyLOS3D_Type& value) = 0;

  /** Returns whether the Element identified by RelativeAngleUncertaintyLOS3D exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RelativeAngleUncertaintyLOS3D is enabled or not.
    */
  virtual bool hasRelativeAngleUncertaintyLOS3D() const = 0;

  /** Enables the Element identified by RelativeAngleUncertaintyLOS3D.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      RelativeAngleUncertaintyLOS3D.
    */
  virtual uci::type::RelativeAngleUncertaintyLOS3D_Type& enableRelativeAngleUncertaintyLOS3D(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RelativeAngleUncertaintyLOS3D.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& clearRelativeAngleUncertaintyLOS3D() = 0;

  /** Returns the value of the SimplePrimitive data type identified by LOS_ReferenceFrameRollRate.
    *
    * @return The value of the simple primitive data type identified by LOS_ReferenceFrameRollRate.
    */
  virtual uci::type::AngleRateTypeValue getLOS_ReferenceFrameRollRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LOS_ReferenceFrameRollRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& setLOS_ReferenceFrameRollRate(uci::type::AngleRateTypeValue value) = 0;

  /** Returns whether the Element identified by LOS_ReferenceFrameRollRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LOS_ReferenceFrameRollRate is enabled or not.
    */
  virtual bool hasLOS_ReferenceFrameRollRate() const = 0;

  /** Clears (disabled) the Element identified by LOS_ReferenceFrameRollRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& clearLOS_ReferenceFrameRollRate() = 0;

  /** Returns the value of the SimplePrimitive data type identified by LOS_CrossVerticalAngleRate.
    *
    * @return The value of the simple primitive data type identified by LOS_CrossVerticalAngleRate.
    */
  virtual uci::type::AngleRateTypeValue getLOS_CrossVerticalAngleRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LOS_CrossVerticalAngleRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& setLOS_CrossVerticalAngleRate(uci::type::AngleRateTypeValue value) = 0;

  /** Returns whether the Element identified by LOS_CrossVerticalAngleRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LOS_CrossVerticalAngleRate is enabled or not.
    */
  virtual bool hasLOS_CrossVerticalAngleRate() const = 0;

  /** Clears (disabled) the Element identified by LOS_CrossVerticalAngleRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& clearLOS_CrossVerticalAngleRate() = 0;

  /** Returns the value of the SimplePrimitive data type identified by LOS_CrossHorizontalAngleRate.
    *
    * @return The value of the simple primitive data type identified by LOS_CrossHorizontalAngleRate.
    */
  virtual uci::type::AngleRateTypeValue getLOS_CrossHorizontalAngleRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LOS_CrossHorizontalAngleRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& setLOS_CrossHorizontalAngleRate(uci::type::AngleRateTypeValue value) = 0;

  /** Returns whether the Element identified by LOS_CrossHorizontalAngleRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LOS_CrossHorizontalAngleRate is enabled or not.
    */
  virtual bool hasLOS_CrossHorizontalAngleRate() const = 0;

  /** Clears (disabled) the Element identified by LOS_CrossHorizontalAngleRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& clearLOS_CrossHorizontalAngleRate() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RelativeAngleRateUncertaintyLOS3D.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RelativeAngleRateUncertaintyLOS3D.
    */
  virtual const uci::type::RelativeAngleRateUncertaintyLOS3D_Type& getRelativeAngleRateUncertaintyLOS3D() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * RelativeAngleRateUncertaintyLOS3D.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      RelativeAngleRateUncertaintyLOS3D.
    */
  virtual uci::type::RelativeAngleRateUncertaintyLOS3D_Type& getRelativeAngleRateUncertaintyLOS3D() = 0;

  /** Sets the complex content identified by RelativeAngleRateUncertaintyLOS3D to the contents of the complex content
    * accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RelativeAngleRateUncertaintyLOS3D.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& setRelativeAngleRateUncertaintyLOS3D(const uci::type::RelativeAngleRateUncertaintyLOS3D_Type& value) = 0;

  /** Returns whether the Element identified by RelativeAngleRateUncertaintyLOS3D exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RelativeAngleRateUncertaintyLOS3D is enabled or not.
    */
  virtual bool hasRelativeAngleRateUncertaintyLOS3D() const = 0;

  /** Enables the Element identified by RelativeAngleRateUncertaintyLOS3D.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      RelativeAngleRateUncertaintyLOS3D.
    */
  virtual uci::type::RelativeAngleRateUncertaintyLOS3D_Type& enableRelativeAngleRateUncertaintyLOS3D(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RelativeAngleRateUncertaintyLOS3D.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RelativeAnglesLOS3D_Type& clearRelativeAngleRateUncertaintyLOS3D() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RelativeAnglesLOS3D_Type() {
  }

  /** The destructor [only available to derived classes]. */
  ~RelativeAnglesLOS3D_Type() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RelativeAnglesLOS3D_Type to copy from.
    */
  RelativeAnglesLOS3D_Type(const RelativeAnglesLOS3D_Type& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RelativeAnglesLOS3D_Type to the contents of the
    * RelativeAnglesLOS3D_Type on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The RelativeAnglesLOS3D_Type on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this RelativeAnglesLOS3D_Type.
    * @return A reference to this RelativeAnglesLOS3D_Type.
    */
  RelativeAnglesLOS3D_Type& operator=(const RelativeAnglesLOS3D_Type& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_RELATIVEANGLESLOS3D_TYPE_H

