/** @file PO_CapabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_CAPABILITYTYPE_H
#define UCI_TYPE_PO_CAPABILITYTYPE_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CommandableCapabilityDeclarationType.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/PO_CapabilityEnum.h"
#include "uci/type/PO_CapabilityOptionsType.h"
#include "uci/type/PO_MessageOutputsEnum.h"
#include "uci/type/SubCapabilityID_Type.h"
#include "uci/type/TrackOptionsID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_CapabilityType : public virtual CommandableCapabilityDeclarationType {
public:

  /** This method constructs a new PO_CapabilityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_CapabilityType.
    */
  static UCI_EXPORT PO_CapabilityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_CapabilityType initializing the data accessed by the new PO_CapabilityType using the
    * data accessed by the specified PO_CapabilityType (cloning).
    *
    * @param accessor The PO_CapabilityType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PO_CapabilityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_CapabilityType.
    */
  static UCI_EXPORT PO_CapabilityType& create(const PO_CapabilityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_CapabilityType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The PO_CapabilityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_CapabilityType& accessor);

  /** Returns this accessor's type constant, i.e. pO_CapabilityType.
    *
    * @return This accessor's type constant, i.e. pO_CapabilityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_CapabilityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PO_CapabilityType.
    *
    * @return The version that was initialized from the uci:version attribute of PO_CapabilityType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_CapabilityType& accessor) = 0;

  /** Indicates a command and control relevant Subsystem SubCapability associated with the Capability. A subcapability
    * unique ID can: 1.Associate with Multiple Capabilities. In this case, a change to a subcapability with this unique ID
    * will impact all associated capabilities. 2.Associated with a single capability. In this case, a change to a
    * subcapability with this unique ID will impact only the associated capability. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SubCapabilityID_Type, uci::type::accessorType::subCapabilityID_Type> AssociatedSubCapabilityID;

  /** Indicates a command and control relevant Subsystem Component associated with the Capability. A component unique ID
    * can: 1.Associate with Multiple Capabilities. In this case, a change to a component with this unique ID will impact
    * all associated capabilities. 2.Associated with a single capability. In this case, a change to a component with this
    * unique ID will impact only the associated capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ComponentID_Type, uci::type::accessorType::componentID_Type> AssociatedComponentID;

  /** Indicates a command and control relevant Subsystem Track Options associated with the Capability. A track option
    * unique ID can: 1.Associate with Multiple Capabilities. In this case, a change to a track option with this unique ID
    * will impact all associated capabilities. 2.Associated with a single capability. In this case, a change to a track
    * option with this unique ID will impact only the associated capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::TrackOptionsID_Type, uci::type::accessorType::trackOptionsID_Type> AssociatedTrackOptionID;

  /** Indicates a message that is an output of the Capability. See enumerated type annotations for details. List size for
    * this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 4]
    */
  typedef uci::base::BoundedList<uci::type::PO_MessageOutputsEnum, uci::type::accessorType::pO_MessageOutputsEnum> MessageOutput;

  /** Returns a const reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A const reference to the value of the enumeration identified by CapabilityType.
    */
  virtual const uci::type::PO_CapabilityEnum& getCapabilityType() const = 0;

  /** Returns a reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A reference to the value of the enumeration identified by CapabilityType.
    */
  virtual uci::type::PO_CapabilityEnum& getCapabilityType() = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityType& setCapabilityType(const uci::type::PO_CapabilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityType& setCapabilityType(uci::type::PO_CapabilityEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by AssociatedSubCapabilityID.
    *
    * @return A const reference to the bounded list identified by AssociatedSubCapabilityID.
    */
  virtual const uci::type::PO_CapabilityType::AssociatedSubCapabilityID& getAssociatedSubCapabilityID() const = 0;

  /** Returns a reference to the bounded list identified by AssociatedSubCapabilityID.
    *
    * @return A reference to the bounded list identified by AssociatedSubCapabilityID.
    */
  virtual uci::type::PO_CapabilityType::AssociatedSubCapabilityID& getAssociatedSubCapabilityID() = 0;

  /** Sets the bounded list identified by AssociatedSubCapabilityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityType& setAssociatedSubCapabilityID(const uci::type::PO_CapabilityType::AssociatedSubCapabilityID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CapabilityOptions.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CapabilityOptions.
    */
  virtual const uci::type::PO_CapabilityOptionsType& getCapabilityOptions() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CapabilityOptions.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityOptions.
    */
  virtual uci::type::PO_CapabilityOptionsType& getCapabilityOptions() = 0;

  /** Sets the complex content identified by CapabilityOptions to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CapabilityOptions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityType& setCapabilityOptions(const uci::type::PO_CapabilityOptionsType& value) = 0;

  /** Returns a const reference to the bounded list identified by AssociatedComponentID.
    *
    * @return A const reference to the bounded list identified by AssociatedComponentID.
    */
  virtual const uci::type::PO_CapabilityType::AssociatedComponentID& getAssociatedComponentID() const = 0;

  /** Returns a reference to the bounded list identified by AssociatedComponentID.
    *
    * @return A reference to the bounded list identified by AssociatedComponentID.
    */
  virtual uci::type::PO_CapabilityType::AssociatedComponentID& getAssociatedComponentID() = 0;

  /** Sets the bounded list identified by AssociatedComponentID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityType& setAssociatedComponentID(const uci::type::PO_CapabilityType::AssociatedComponentID& value) = 0;

  /** Returns a const reference to the bounded list identified by AssociatedTrackOptionID.
    *
    * @return A const reference to the bounded list identified by AssociatedTrackOptionID.
    */
  virtual const uci::type::PO_CapabilityType::AssociatedTrackOptionID& getAssociatedTrackOptionID() const = 0;

  /** Returns a reference to the bounded list identified by AssociatedTrackOptionID.
    *
    * @return A reference to the bounded list identified by AssociatedTrackOptionID.
    */
  virtual uci::type::PO_CapabilityType::AssociatedTrackOptionID& getAssociatedTrackOptionID() = 0;

  /** Sets the bounded list identified by AssociatedTrackOptionID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityType& setAssociatedTrackOptionID(const uci::type::PO_CapabilityType::AssociatedTrackOptionID& value) = 0;

  /** Returns a const reference to the bounded list identified by MessageOutput.
    *
    * @return A const reference to the bounded list identified by MessageOutput.
    */
  virtual const uci::type::PO_CapabilityType::MessageOutput& getMessageOutput() const = 0;

  /** Returns a reference to the bounded list identified by MessageOutput.
    *
    * @return A reference to the bounded list identified by MessageOutput.
    */
  virtual uci::type::PO_CapabilityType::MessageOutput& getMessageOutput() = 0;

  /** Sets the bounded list identified by MessageOutput.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityType& setMessageOutput(const uci::type::PO_CapabilityType::MessageOutput& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_CapabilityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_CapabilityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_CapabilityType to copy from.
    */
  PO_CapabilityType(const PO_CapabilityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_CapabilityType to the contents of the PO_CapabilityType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PO_CapabilityType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this PO_CapabilityType.
    * @return A reference to this PO_CapabilityType.
    */
  PO_CapabilityType& operator=(const PO_CapabilityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_CAPABILITYTYPE_H

