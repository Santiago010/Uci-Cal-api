/** @file ReadinessItemStatusType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_READINESSITEMSTATUSTYPE_H
#define UCI_TYPE_READINESSITEMSTATUSTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CapabilityBaseType.h"
#include "CapabilityStatusBaseType.h"
#include "ControlStatusMDT.h"
#include "OperationalStatusEnum.h"
#include "PackageStatusMDT.h"
#include "PlanningFunctionMDT.h"
#include "PlanningFunctionStatusMDT.h"
#include "StoreManagementStatusMDT.h"
#include "SubsystemConfigurationMDT.h"
#include "SubsystemStatusMDT.h"
#include "SystemStatusMDT.h"
#include "VisibleString256Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the readiness of various "items". Item is an intentionally vague term to include any UCI concept that is
  * first-person or first-person surrogate reported that describes operational availability.
  */
class ReadinessItemStatusType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ReadinessItemStatusType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ReadinessItemStatusType.
    */
  static UCI_EXPORT ReadinessItemStatusType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ReadinessItemStatusType initializing the data accessed by the new
    * ReadinessItemStatusType using the data accessed by the specified ReadinessItemStatusType (cloning).
    *
    * @param accessor The ReadinessItemStatusType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created ReadinessItemStatusType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ReadinessItemStatusType.
    */
  static UCI_EXPORT ReadinessItemStatusType& create(const ReadinessItemStatusType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ReadinessItemStatusType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The ReadinessItemStatusType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ReadinessItemStatusType& accessor);

  /** Returns this accessor's type constant, i.e. readinessItemStatusType.
    *
    * @return This accessor's type constant, i.e. readinessItemStatusType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::readinessItemStatusType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ReadinessItemStatusType.
    *
    * @return The version that was initialized from the uci:version attribute of ReadinessItemStatusType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ReadinessItemStatusType& accessor) = 0;

  /** Indicates an instance of a Subsystem Status of the vehicle reporting its readiness. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SubsystemStatusMDT, uci::type::accessorType::subsystemStatusMDT> SubsystemStatus;

  /** Indicates an instance of a Subsystem Configuration of the vehicle reporting its readiness. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SubsystemConfigurationMDT, uci::type::accessorType::subsystemConfigurationMDT> SubsystemConfiguration;

  /** Indicates an instance of a Capability. The CapabilityBaseType used here is abstract and must be replaced by a
    * concrete child of the type such as EA_CapabilityMDT. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CapabilityBaseType, uci::type::accessorType::capabilityBaseType> Capability;

  /** Indicates readiness of a Capability. The CapabilityStatusBaseType used here is abstract and must be replaced by a
    * concrete child of the type such as EA_CapabilityStatusMDT. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CapabilityStatusBaseType, uci::type::accessorType::capabilityStatusBaseType> CapabilityStatus;

  /** Indicates an instance of a Store Management Status of the vehicle reporting its readiness. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::StoreManagementStatusMDT, uci::type::accessorType::storeManagementStatusMDT> StoreManagementStatus;

  /** Indicates an instance of a Control Status of the vehicle reporting its readiness. This should be the expected Control
    * Status of the vehicle and its capabilities during the reported time frame. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ControlStatusMDT, uci::type::accessorType::controlStatusMDT> ControlStatus;

  /** Indicates an instance of a Package Status. Readiness of a Package should be reported along with the Readiness of the
    * lead System in the Package. This element is unbounded because a single lead System could be the leader of multiple
    * Packages each of which has different partner Systems. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PackageStatusMDT, uci::type::accessorType::packageStatusMDT> PackageStatus;

  /** Returns a const reference to the value of the enumeration identified by OperationalStatus.
    *
    * @return A const reference to the value of the enumeration identified by OperationalStatus.
    */
  virtual const uci::type::OperationalStatusEnum& getOperationalStatus() const = 0;

  /** Returns a reference to the value of the enumeration identified by OperationalStatus.
    *
    * @return A reference to the value of the enumeration identified by OperationalStatus.
    */
  virtual uci::type::OperationalStatusEnum& getOperationalStatus() = 0;

  /** Sets the value of the enumeration identified by OperationalStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& setOperationalStatus(const uci::type::OperationalStatusEnum& value) = 0;

  /** Sets the value of the enumeration identified by OperationalStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& setOperationalStatus(uci::type::OperationalStatusEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Reason.
    *
    * @return A const reference to the accessor that provides access to the string identified by Reason.
    */
  virtual const asb_uci::type::VisibleString256Type& getReason() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Reason.
    *
    * @return A reference to the accessor that provides access to the string identified by Reason.
    */
  virtual asb_uci::type::VisibleString256Type& getReason() = 0;

  /** Sets the string identified by Reason to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Reason.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& setReason(const asb_uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by Reason to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& setReason(const std::string& value) = 0;

  /** Sets the string identified by Reason to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& setReason(const char* value) = 0;

  /** Returns whether the Element identified by Reason exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Reason is enabled or not.
    */
  virtual bool hasReason() const = 0;

  /** Enables the Element identified by Reason.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Reason.
    */
  virtual asb_uci::type::VisibleString256Type& enableReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Reason.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& clearReason() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SystemStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SystemStatus.
    */
  virtual const uci::type::SystemStatusMDT& getSystemStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemStatus.
    */
  virtual uci::type::SystemStatusMDT& getSystemStatus() = 0;

  /** Sets the complex content identified by SystemStatus to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& setSystemStatus(const uci::type::SystemStatusMDT& value) = 0;

  /** Returns whether the Element identified by SystemStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SystemStatus is enabled or not.
    */
  virtual bool hasSystemStatus() const = 0;

  /** Enables the Element identified by SystemStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SystemStatus.
    */
  virtual uci::type::SystemStatusMDT& enableSystemStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SystemStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& clearSystemStatus() = 0;

  /** Returns a const reference to the bounded list identified by SubsystemStatus.
    *
    * @return A const reference to the bounded list identified by SubsystemStatus.
    */
  virtual const uci::type::ReadinessItemStatusType::SubsystemStatus& getSubsystemStatus() const = 0;

  /** Returns a reference to the bounded list identified by SubsystemStatus.
    *
    * @return A reference to the bounded list identified by SubsystemStatus.
    */
  virtual uci::type::ReadinessItemStatusType::SubsystemStatus& getSubsystemStatus() = 0;

  /** Sets the bounded list identified by SubsystemStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& setSubsystemStatus(const uci::type::ReadinessItemStatusType::SubsystemStatus& value) = 0;

  /** Returns a const reference to the bounded list identified by SubsystemConfiguration.
    *
    * @return A const reference to the bounded list identified by SubsystemConfiguration.
    */
  virtual const uci::type::ReadinessItemStatusType::SubsystemConfiguration& getSubsystemConfiguration() const = 0;

  /** Returns a reference to the bounded list identified by SubsystemConfiguration.
    *
    * @return A reference to the bounded list identified by SubsystemConfiguration.
    */
  virtual uci::type::ReadinessItemStatusType::SubsystemConfiguration& getSubsystemConfiguration() = 0;

  /** Sets the bounded list identified by SubsystemConfiguration.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& setSubsystemConfiguration(const uci::type::ReadinessItemStatusType::SubsystemConfiguration& value) = 0;

  /** Returns a const reference to the bounded list identified by Capability.
    *
    * @return A const reference to the bounded list identified by Capability.
    */
  virtual const uci::type::ReadinessItemStatusType::Capability& getCapability() const = 0;

  /** Returns a reference to the bounded list identified by Capability.
    *
    * @return A reference to the bounded list identified by Capability.
    */
  virtual uci::type::ReadinessItemStatusType::Capability& getCapability() = 0;

  /** Sets the bounded list identified by Capability.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& setCapability(const uci::type::ReadinessItemStatusType::Capability& value) = 0;

  /** Returns a const reference to the bounded list identified by CapabilityStatus.
    *
    * @return A const reference to the bounded list identified by CapabilityStatus.
    */
  virtual const uci::type::ReadinessItemStatusType::CapabilityStatus& getCapabilityStatus() const = 0;

  /** Returns a reference to the bounded list identified by CapabilityStatus.
    *
    * @return A reference to the bounded list identified by CapabilityStatus.
    */
  virtual uci::type::ReadinessItemStatusType::CapabilityStatus& getCapabilityStatus() = 0;

  /** Sets the bounded list identified by CapabilityStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& setCapabilityStatus(const uci::type::ReadinessItemStatusType::CapabilityStatus& value) = 0;

  /** Returns a const reference to the bounded list identified by StoreManagementStatus.
    *
    * @return A const reference to the bounded list identified by StoreManagementStatus.
    */
  virtual const uci::type::ReadinessItemStatusType::StoreManagementStatus& getStoreManagementStatus() const = 0;

  /** Returns a reference to the bounded list identified by StoreManagementStatus.
    *
    * @return A reference to the bounded list identified by StoreManagementStatus.
    */
  virtual uci::type::ReadinessItemStatusType::StoreManagementStatus& getStoreManagementStatus() = 0;

  /** Sets the bounded list identified by StoreManagementStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& setStoreManagementStatus(const uci::type::ReadinessItemStatusType::StoreManagementStatus& value) = 0;

  /** Returns a const reference to the bounded list identified by ControlStatus.
    *
    * @return A const reference to the bounded list identified by ControlStatus.
    */
  virtual const uci::type::ReadinessItemStatusType::ControlStatus& getControlStatus() const = 0;

  /** Returns a reference to the bounded list identified by ControlStatus.
    *
    * @return A reference to the bounded list identified by ControlStatus.
    */
  virtual uci::type::ReadinessItemStatusType::ControlStatus& getControlStatus() = 0;

  /** Sets the bounded list identified by ControlStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& setControlStatus(const uci::type::ReadinessItemStatusType::ControlStatus& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PlanningFunction.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PlanningFunction.
    */
  virtual const uci::type::PlanningFunctionMDT& getPlanningFunction() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PlanningFunction.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PlanningFunction.
    */
  virtual uci::type::PlanningFunctionMDT& getPlanningFunction() = 0;

  /** Sets the complex content identified by PlanningFunction to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PlanningFunction.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& setPlanningFunction(const uci::type::PlanningFunctionMDT& value) = 0;

  /** Returns whether the Element identified by PlanningFunction exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PlanningFunction is enabled or not.
    */
  virtual bool hasPlanningFunction() const = 0;

  /** Enables the Element identified by PlanningFunction.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PlanningFunction.
    */
  virtual uci::type::PlanningFunctionMDT& enablePlanningFunction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PlanningFunction.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& clearPlanningFunction() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * PlanningFunctionStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      PlanningFunctionStatus.
    */
  virtual const uci::type::PlanningFunctionStatusMDT& getPlanningFunctionStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PlanningFunctionStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PlanningFunctionStatus.
    */
  virtual uci::type::PlanningFunctionStatusMDT& getPlanningFunctionStatus() = 0;

  /** Sets the complex content identified by PlanningFunctionStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PlanningFunctionStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& setPlanningFunctionStatus(const uci::type::PlanningFunctionStatusMDT& value) = 0;

  /** Returns whether the Element identified by PlanningFunctionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PlanningFunctionStatus is enabled or not.
    */
  virtual bool hasPlanningFunctionStatus() const = 0;

  /** Enables the Element identified by PlanningFunctionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PlanningFunctionStatus.
    */
  virtual uci::type::PlanningFunctionStatusMDT& enablePlanningFunctionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PlanningFunctionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& clearPlanningFunctionStatus() = 0;

  /** Returns a const reference to the bounded list identified by PackageStatus.
    *
    * @return A const reference to the bounded list identified by PackageStatus.
    */
  virtual const uci::type::ReadinessItemStatusType::PackageStatus& getPackageStatus() const = 0;

  /** Returns a reference to the bounded list identified by PackageStatus.
    *
    * @return A reference to the bounded list identified by PackageStatus.
    */
  virtual uci::type::ReadinessItemStatusType::PackageStatus& getPackageStatus() = 0;

  /** Sets the bounded list identified by PackageStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReadinessItemStatusType& setPackageStatus(const uci::type::ReadinessItemStatusType::PackageStatus& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ReadinessItemStatusType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ReadinessItemStatusType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ReadinessItemStatusType to copy from.
    */
  ReadinessItemStatusType(const ReadinessItemStatusType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ReadinessItemStatusType to the contents of the
    * ReadinessItemStatusType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ReadinessItemStatusType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this ReadinessItemStatusType.
    * @return A reference to this ReadinessItemStatusType.
    */
  ReadinessItemStatusType& operator=(const ReadinessItemStatusType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_READINESSITEMSTATUSTYPE_H

