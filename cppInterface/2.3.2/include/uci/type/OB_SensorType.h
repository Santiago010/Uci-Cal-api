/** @file OB_SensorType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OB_SENSORTYPE_H
#define UCI_TYPE_OB_SENSORTYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "AnglePositiveType.h"
#include "DistanceType.h"
#include "EntityEphemerisBasisChoiceType.h"
#include "FieldOfRegardType.h"
#include "KinematicsType.h"
#include "OB_SensorID_Type.h"
#include "OB_SensorIdentityType.h"
#include "SensorFieldOfViewType.h"
#include "VisualMagnitudeLimitsType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See the annotation in the associated message for an overall description of the message and this type. */
class OB_SensorType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OB_SensorType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OB_SensorType.
    */
  static UCI_EXPORT OB_SensorType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OB_SensorType initializing the data accessed by the new OB_SensorType using the data
    * accessed by the specified OB_SensorType (cloning).
    *
    * @param accessor The OB_SensorType that provides access to the data that is to be used to initialize the data accessed
    *      by the new created OB_SensorType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OB_SensorType.
    */
  static UCI_EXPORT OB_SensorType& create(const OB_SensorType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OB_SensorType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The OB_SensorType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OB_SensorType& accessor);

  /** Returns this accessor's type constant, i.e. oB_SensorType.
    *
    * @return This accessor's type constant, i.e. oB_SensorType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::oB_SensorType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OB_SensorType.
    *
    * @return The version that was initialized from the uci:version attribute of OB_SensorType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OB_SensorType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SensorID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SensorID.
    */
  virtual const uci::type::OB_SensorID_Type& getSensorID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SensorID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SensorID.
    */
  virtual uci::type::OB_SensorID_Type& getSensorID() = 0;

  /** Sets the complex content identified by SensorID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SensorID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& setSensorID(const uci::type::OB_SensorID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual const uci::type::OB_SensorIdentityType& getIdentity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::OB_SensorIdentityType& getIdentity() = 0;

  /** Sets the complex content identified by Identity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Identity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& setIdentity(const uci::type::OB_SensorIdentityType& value) = 0;

  /** Returns whether the Element identified by Identity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Identity is enabled or not.
    */
  virtual bool hasIdentity() const = 0;

  /** Enables the Element identified by Identity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::OB_SensorIdentityType& enableIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Identity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& clearIdentity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FieldOfRegard.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FieldOfRegard.
    */
  virtual const uci::type::FieldOfRegardType& getFieldOfRegard() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FieldOfRegard.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FieldOfRegard.
    */
  virtual uci::type::FieldOfRegardType& getFieldOfRegard() = 0;

  /** Sets the complex content identified by FieldOfRegard to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FieldOfRegard.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& setFieldOfRegard(const uci::type::FieldOfRegardType& value) = 0;

  /** Returns whether the Element identified by FieldOfRegard exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FieldOfRegard is enabled or not.
    */
  virtual bool hasFieldOfRegard() const = 0;

  /** Enables the Element identified by FieldOfRegard.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by FieldOfRegard.
    */
  virtual uci::type::FieldOfRegardType& enableFieldOfRegard(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FieldOfRegard.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& clearFieldOfRegard() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FieldOfView.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FieldOfView.
    */
  virtual const uci::type::SensorFieldOfViewType& getFieldOfView() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FieldOfView.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FieldOfView.
    */
  virtual uci::type::SensorFieldOfViewType& getFieldOfView() = 0;

  /** Sets the complex content identified by FieldOfView to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FieldOfView.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& setFieldOfView(const uci::type::SensorFieldOfViewType& value) = 0;

  /** Returns whether the Element identified by FieldOfView exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FieldOfView is enabled or not.
    */
  virtual bool hasFieldOfView() const = 0;

  /** Enables the Element identified by FieldOfView.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by FieldOfView.
    */
  virtual uci::type::SensorFieldOfViewType& enableFieldOfView(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FieldOfView.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& clearFieldOfView() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * VisualMagnitudeLimits.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      VisualMagnitudeLimits.
    */
  virtual const uci::type::VisualMagnitudeLimitsType& getVisualMagnitudeLimits() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by VisualMagnitudeLimits.
    *
    * @return A reference to the accessor that provides access to the complex content identified by VisualMagnitudeLimits.
    */
  virtual uci::type::VisualMagnitudeLimitsType& getVisualMagnitudeLimits() = 0;

  /** Sets the complex content identified by VisualMagnitudeLimits to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by VisualMagnitudeLimits.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& setVisualMagnitudeLimits(const uci::type::VisualMagnitudeLimitsType& value) = 0;

  /** Returns whether the Element identified by VisualMagnitudeLimits exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VisualMagnitudeLimits is enabled or not.
    */
  virtual bool hasVisualMagnitudeLimits() const = 0;

  /** Enables the Element identified by VisualMagnitudeLimits.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by VisualMagnitudeLimits.
    */
  virtual uci::type::VisualMagnitudeLimitsType& enableVisualMagnitudeLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VisualMagnitudeLimits.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& clearVisualMagnitudeLimits() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PrimaryApertureDiameter.
    *
    * @return The value of the simple primitive data type identified by PrimaryApertureDiameter.
    */
  virtual uci::type::DistanceTypeValue getPrimaryApertureDiameter() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PrimaryApertureDiameter.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& setPrimaryApertureDiameter(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by PrimaryApertureDiameter exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PrimaryApertureDiameter is enabled or not.
    */
  virtual bool hasPrimaryApertureDiameter() const = 0;

  /** Clears (disabled) the Element identified by PrimaryApertureDiameter.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& clearPrimaryApertureDiameter() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Resolution.
    *
    * @return The value of the simple primitive data type identified by Resolution.
    */
  virtual uci::type::AnglePositiveTypeValue getResolution() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Resolution.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& setResolution(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by Resolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Resolution is enabled or not.
    */
  virtual bool hasResolution() const = 0;

  /** Clears (disabled) the Element identified by Resolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& clearResolution() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Kinematics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Kinematics.
    */
  virtual const uci::type::KinematicsType& getKinematics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Kinematics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Kinematics.
    */
  virtual uci::type::KinematicsType& getKinematics() = 0;

  /** Sets the complex content identified by Kinematics to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Kinematics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& setKinematics(const uci::type::KinematicsType& value) = 0;

  /** Returns whether the Element identified by Kinematics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Kinematics is enabled or not.
    */
  virtual bool hasKinematics() const = 0;

  /** Enables the Element identified by Kinematics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Kinematics.
    */
  virtual uci::type::KinematicsType& enableKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Kinematics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& clearKinematics() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrbitalKinematics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrbitalKinematics.
    */
  virtual const uci::type::EntityEphemerisBasisChoiceType& getOrbitalKinematics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitalKinematics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitalKinematics.
    */
  virtual uci::type::EntityEphemerisBasisChoiceType& getOrbitalKinematics() = 0;

  /** Sets the complex content identified by OrbitalKinematics to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitalKinematics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& setOrbitalKinematics(const uci::type::EntityEphemerisBasisChoiceType& value) = 0;

  /** Returns whether the Element identified by OrbitalKinematics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrbitalKinematics is enabled or not.
    */
  virtual bool hasOrbitalKinematics() const = 0;

  /** Enables the Element identified by OrbitalKinematics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrbitalKinematics.
    */
  virtual uci::type::EntityEphemerisBasisChoiceType& enableOrbitalKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrbitalKinematics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_SensorType& clearOrbitalKinematics() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OB_SensorType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OB_SensorType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OB_SensorType to copy from.
    */
  OB_SensorType(const OB_SensorType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OB_SensorType to the contents of the OB_SensorType on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OB_SensorType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this OB_SensorType.
    * @return A reference to this OB_SensorType.
    */
  OB_SensorType& operator=(const OB_SensorType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_OB_SENSORTYPE_H

