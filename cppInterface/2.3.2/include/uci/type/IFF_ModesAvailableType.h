/** @file IFF_ModesAvailableType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_IFF_MODESAVAILABLETYPE_H
#define UCI_TYPE_IFF_MODESAVAILABLETYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "IFF_ADS_B_SubtypeType.h"
#include "IFF_ADS_B_Type.h"
#include "IFF_Mode5_FormatType.h"
#include "IFF_ModeS_SupportEnum.h"
#include "IFF_ModesEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Only enabled modes are available to the IFF Capability when IFF_Auto is selected in the IFF_Command. */
class IFF_ModesAvailableType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new IFF_ModesAvailableType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IFF_ModesAvailableType.
    */
  static UCI_EXPORT IFF_ModesAvailableType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new IFF_ModesAvailableType initializing the data accessed by the new IFF_ModesAvailableType
    * using the data accessed by the specified IFF_ModesAvailableType (cloning).
    *
    * @param accessor The IFF_ModesAvailableType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created IFF_ModesAvailableType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IFF_ModesAvailableType.
    */
  static UCI_EXPORT IFF_ModesAvailableType& create(const IFF_ModesAvailableType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified IFF_ModesAvailableType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The IFF_ModesAvailableType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(IFF_ModesAvailableType& accessor);

  /** Returns this accessor's type constant, i.e. iFF_ModesAvailableType.
    *
    * @return This accessor's type constant, i.e. iFF_ModesAvailableType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::iFF_ModesAvailableType;
  }

  /** Returns the version that was initialized from the uci:version attribute of IFF_ModesAvailableType.
    *
    * @return The version that was initialized from the uci:version attribute of IFF_ModesAvailableType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const IFF_ModesAvailableType& accessor) = 0;

  /** Specifies the list of IFF Modes available. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 1; Maximum: 7]
    */
  typedef uci::base::BoundedList<uci::type::IFF_ModesEnum, uci::type::accessorType::iFF_ModesEnum> IFF_Modes;

  /** These are from the IFF specification and identify 31 possible formats for Mode5 [Occurrences: Minimum: 0; Maximum:
    * 31]
    */
  typedef uci::base::BoundedList<uci::type::IFF_Mode5_FormatType, uci::type::accessorType::iFF_Mode5_FormatType> Mode5_Format;

  /** EHS or ELS (Enhanced vs Elementary) used in when ModeS is selected in IFF_Modes. List size for this element is based
    * on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 4]
    */
  typedef uci::base::BoundedList<uci::type::IFF_ModeS_SupportEnum, uci::type::accessorType::iFF_ModeS_SupportEnum> ModeS_RegistersSupported;

  /** These are from the IFF specification and identify 31 possible formats for Mode5. [Occurrences: Minimum: 0; Maximum:
    * 31]
    */
  typedef uci::base::BoundedList<uci::type::IFF_ADS_B_Type, uci::type::accessorType::iFF_ADS_B_Type> ADS_B_Type;

  /** These are from the IFF specification and identify 7 possible Subtypes to the Types in ADS-B. [Occurrences: Minimum:
    * 0; Maximum: 7]
    */
  typedef uci::base::BoundedList<uci::type::IFF_ADS_B_SubtypeType, uci::type::accessorType::iFF_ADS_B_SubtypeType> ADS_B_SubType;

  /** Returns a const reference to the bounded list identified by IFF_Modes.
    *
    * @return A const reference to the bounded list identified by IFF_Modes.
    */
  virtual const uci::type::IFF_ModesAvailableType::IFF_Modes& getIFF_Modes() const = 0;

  /** Returns a reference to the bounded list identified by IFF_Modes.
    *
    * @return A reference to the bounded list identified by IFF_Modes.
    */
  virtual uci::type::IFF_ModesAvailableType::IFF_Modes& getIFF_Modes() = 0;

  /** Sets the bounded list identified by IFF_Modes.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ModesAvailableType& setIFF_Modes(const uci::type::IFF_ModesAvailableType::IFF_Modes& value) = 0;

  /** Returns a const reference to the bounded list identified by Mode5_Format.
    *
    * @return A const reference to the bounded list identified by Mode5_Format.
    */
  virtual const uci::type::IFF_ModesAvailableType::Mode5_Format& getMode5_Format() const = 0;

  /** Returns a reference to the bounded list identified by Mode5_Format.
    *
    * @return A reference to the bounded list identified by Mode5_Format.
    */
  virtual uci::type::IFF_ModesAvailableType::Mode5_Format& getMode5_Format() = 0;

  /** Sets the bounded list identified by Mode5_Format.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ModesAvailableType& setMode5_Format(const uci::type::IFF_ModesAvailableType::Mode5_Format& value) = 0;

  /** Returns a const reference to the bounded list identified by ModeS_RegistersSupported.
    *
    * @return A const reference to the bounded list identified by ModeS_RegistersSupported.
    */
  virtual const uci::type::IFF_ModesAvailableType::ModeS_RegistersSupported& getModeS_RegistersSupported() const = 0;

  /** Returns a reference to the bounded list identified by ModeS_RegistersSupported.
    *
    * @return A reference to the bounded list identified by ModeS_RegistersSupported.
    */
  virtual uci::type::IFF_ModesAvailableType::ModeS_RegistersSupported& getModeS_RegistersSupported() = 0;

  /** Sets the bounded list identified by ModeS_RegistersSupported.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ModesAvailableType& setModeS_RegistersSupported(const uci::type::IFF_ModesAvailableType::ModeS_RegistersSupported& value) = 0;

  /** Returns a const reference to the bounded list identified by ADS_B_Type.
    *
    * @return A const reference to the bounded list identified by ADS_B_Type.
    */
  virtual const uci::type::IFF_ModesAvailableType::ADS_B_Type& getADS_B_Type() const = 0;

  /** Returns a reference to the bounded list identified by ADS_B_Type.
    *
    * @return A reference to the bounded list identified by ADS_B_Type.
    */
  virtual uci::type::IFF_ModesAvailableType::ADS_B_Type& getADS_B_Type() = 0;

  /** Sets the bounded list identified by ADS_B_Type.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ModesAvailableType& setADS_B_Type(const uci::type::IFF_ModesAvailableType::ADS_B_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by ADS_B_SubType.
    *
    * @return A const reference to the bounded list identified by ADS_B_SubType.
    */
  virtual const uci::type::IFF_ModesAvailableType::ADS_B_SubType& getADS_B_SubType() const = 0;

  /** Returns a reference to the bounded list identified by ADS_B_SubType.
    *
    * @return A reference to the bounded list identified by ADS_B_SubType.
    */
  virtual uci::type::IFF_ModesAvailableType::ADS_B_SubType& getADS_B_SubType() = 0;

  /** Sets the bounded list identified by ADS_B_SubType.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ModesAvailableType& setADS_B_SubType(const uci::type::IFF_ModesAvailableType::ADS_B_SubType& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  IFF_ModesAvailableType() {
  }

  /** The destructor [only available to derived classes]. */
  ~IFF_ModesAvailableType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The IFF_ModesAvailableType to copy from.
    */
  IFF_ModesAvailableType(const IFF_ModesAvailableType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this IFF_ModesAvailableType to the contents of the
    * IFF_ModesAvailableType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The IFF_ModesAvailableType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this IFF_ModesAvailableType.
    * @return A reference to this IFF_ModesAvailableType.
    */
  IFF_ModesAvailableType& operator=(const IFF_ModesAvailableType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_IFF_MODESAVAILABLETYPE_H

