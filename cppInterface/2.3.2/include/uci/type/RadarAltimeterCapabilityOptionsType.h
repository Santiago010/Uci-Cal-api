/** @file RadarAltimeterCapabilityOptionsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_RADARALTIMETERCAPABILITYOPTIONSTYPE_H
#define UCI_TYPE_RADARALTIMETERCAPABILITYOPTIONSTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/UnsignedByteAccessor.h"
#include "../base/export.h"
#include "ElectronicProtectionOptionsSupportedType.h"
#include "FilteredUnfilteredEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class RadarAltimeterCapabilityOptionsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RadarAltimeterCapabilityOptionsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RadarAltimeterCapabilityOptionsType.
    */
  static UCI_EXPORT RadarAltimeterCapabilityOptionsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RadarAltimeterCapabilityOptionsType initializing the data accessed by the new
    * RadarAltimeterCapabilityOptionsType using the data accessed by the specified RadarAltimeterCapabilityOptionsType
    * (cloning).
    *
    * @param accessor The RadarAltimeterCapabilityOptionsType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created RadarAltimeterCapabilityOptionsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RadarAltimeterCapabilityOptionsType.
    */
  static UCI_EXPORT RadarAltimeterCapabilityOptionsType& create(const RadarAltimeterCapabilityOptionsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RadarAltimeterCapabilityOptionsType. Use of the specified accessor after it has
    * been destroyed will result in undefined behavior.
    *
    * @param accessor The RadarAltimeterCapabilityOptionsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RadarAltimeterCapabilityOptionsType& accessor);

  /** Returns this accessor's type constant, i.e. radarAltimeterCapabilityOptionsType.
    *
    * @return This accessor's type constant, i.e. radarAltimeterCapabilityOptionsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::radarAltimeterCapabilityOptionsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of RadarAltimeterCapabilityOptionsType.
    *
    * @return The version that was initialized from the uci:version attribute of RadarAltimeterCapabilityOptionsType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RadarAltimeterCapabilityOptionsType& accessor) = 0;

  /** Indicates whether the Capability supports filtered, unfiltered, or both types of measurements. List size for this
    * element is based on "Select All That Apply" condition. [Occurrences: Minimum: 1; Maximum: 2]
    */
  typedef uci::base::BoundedList<uci::type::FilteredUnfilteredEnum, uci::type::accessorType::filteredUnfilteredEnum> FilteredUnfiltered;

  /** Indicates the list of EP capabilities that the current HW / SW allows an external actor to control for this
    * capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ElectronicProtectionOptionsSupportedType, uci::type::accessorType::electronicProtectionOptionsSupportedType> ElectronicProtectionOptionsSupported;

  /** Returns the value of the SimplePrimitive data type identified by InterruptOtherActivities.
    *
    * @return The value of the simple primitive data type identified by InterruptOtherActivities.
    */
  virtual xs::Boolean getInterruptOtherActivities() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InterruptOtherActivities.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityOptionsType& setInterruptOtherActivities(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by CollectionPolicy.
    *
    * @return The value of the simple primitive data type identified by CollectionPolicy.
    */
  virtual xs::Boolean getCollectionPolicy() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CollectionPolicy.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityOptionsType& setCollectionPolicy(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ConcurrentOperationSupported.
    *
    * @return The value of the simple primitive data type identified by ConcurrentOperationSupported.
    */
  virtual xs::Boolean getConcurrentOperationSupported() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ConcurrentOperationSupported.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityOptionsType& setConcurrentOperationSupported(xs::Boolean value) = 0;

  /** Returns a const reference to the bounded list identified by FilteredUnfiltered.
    *
    * @return A const reference to the bounded list identified by FilteredUnfiltered.
    */
  virtual const uci::type::RadarAltimeterCapabilityOptionsType::FilteredUnfiltered& getFilteredUnfiltered() const = 0;

  /** Returns a reference to the bounded list identified by FilteredUnfiltered.
    *
    * @return A reference to the bounded list identified by FilteredUnfiltered.
    */
  virtual uci::type::RadarAltimeterCapabilityOptionsType::FilteredUnfiltered& getFilteredUnfiltered() = 0;

  /** Sets the bounded list identified by FilteredUnfiltered.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityOptionsType& setFilteredUnfiltered(const uci::type::RadarAltimeterCapabilityOptionsType::FilteredUnfiltered& value) = 0;

  /** Returns a const reference to the bounded list identified by ElectronicProtectionOptionsSupported.
    *
    * @return A const reference to the bounded list identified by ElectronicProtectionOptionsSupported.
    */
  virtual const uci::type::RadarAltimeterCapabilityOptionsType::ElectronicProtectionOptionsSupported& getElectronicProtectionOptionsSupported() const = 0;

  /** Returns a reference to the bounded list identified by ElectronicProtectionOptionsSupported.
    *
    * @return A reference to the bounded list identified by ElectronicProtectionOptionsSupported.
    */
  virtual uci::type::RadarAltimeterCapabilityOptionsType::ElectronicProtectionOptionsSupported& getElectronicProtectionOptionsSupported() = 0;

  /** Sets the bounded list identified by ElectronicProtectionOptionsSupported.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityOptionsType& setElectronicProtectionOptionsSupported(const uci::type::RadarAltimeterCapabilityOptionsType::ElectronicProtectionOptionsSupported& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by FalseAlarmLevelUpperLimit.
    *
    * @return The value of the simple primitive data type identified by FalseAlarmLevelUpperLimit.
    */
  virtual xs::UnsignedByte getFalseAlarmLevelUpperLimit() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FalseAlarmLevelUpperLimit.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityOptionsType& setFalseAlarmLevelUpperLimit(xs::UnsignedByte value) = 0;

  /** Returns whether the Element identified by FalseAlarmLevelUpperLimit exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FalseAlarmLevelUpperLimit is enabled or not.
    */
  virtual bool hasFalseAlarmLevelUpperLimit() const = 0;

  /** Clears (disabled) the Element identified by FalseAlarmLevelUpperLimit.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityOptionsType& clearFalseAlarmLevelUpperLimit() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RadarAltimeterCapabilityOptionsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~RadarAltimeterCapabilityOptionsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RadarAltimeterCapabilityOptionsType to copy from.
    */
  RadarAltimeterCapabilityOptionsType(const RadarAltimeterCapabilityOptionsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RadarAltimeterCapabilityOptionsType to the contents of the
    * RadarAltimeterCapabilityOptionsType on the right hand side (rhs) of the assignment operator [only available to
    * derived classes].
    *
    * @param rhs The RadarAltimeterCapabilityOptionsType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this RadarAltimeterCapabilityOptionsType.
    * @return A reference to this RadarAltimeterCapabilityOptionsType.
    */
  RadarAltimeterCapabilityOptionsType& operator=(const RadarAltimeterCapabilityOptionsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_RADARALTIMETERCAPABILITYOPTIONSTYPE_H

