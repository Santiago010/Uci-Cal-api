/** @file DamageEstimateMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_DAMAGEESTIMATEMDT_H
#define UCI_TYPE_DAMAGEESTIMATEMDT_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/DMPI_ViolationType.h"
#include "uci/type/DamageCategoryEnum.h"
#include "uci/type/DamageEstimateDetailsType.h"
#include "uci/type/DamageEstimateID_Type.h"
#include "uci/type/DamageInformationWeatherSourceType.h"
#include "uci/type/DamageSummaryType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/PercentType.h"
#include "uci/type/Point3D_Type.h"
#include "uci/type/TaskID_Type.h"
#include "uci/type/VisibleString1024Type.h"
#include "uci/type/ZoneType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class DamageEstimateMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new DamageEstimateMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DamageEstimateMDT.
    */
  static UCI_EXPORT DamageEstimateMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new DamageEstimateMDT initializing the data accessed by the new DamageEstimateMDT using the
    * data accessed by the specified DamageEstimateMDT (cloning).
    *
    * @param accessor The DamageEstimateMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created DamageEstimateMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DamageEstimateMDT.
    */
  static UCI_EXPORT DamageEstimateMDT& create(const DamageEstimateMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified DamageEstimateMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The DamageEstimateMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(DamageEstimateMDT& accessor);

  /** Returns this accessor's type constant, i.e. damageEstimateMDT.
    *
    * @return This accessor's type constant, i.e. damageEstimateMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::damageEstimateMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of DamageEstimateMDT.
    *
    * @return The version that was initialized from the uci:version attribute of DamageEstimateMDT.
    */
  static std::string getUCITypeVersion() {
    return "002.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const DamageEstimateMDT& accessor) = 0;

  /** Indicates any air corridors violated from the release point to the indicated DMPI, or any NoFire OpVolume/OpZone
    * collateral damage by the indicated DMPI. If EstimateType=Collateral, the desired result is for this list to be empty.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::DMPI_ViolationType, uci::type::accessorType::dMPI_ViolationType> Violation;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DamageEstimateID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DamageEstimateID.
    */
  virtual const uci::type::DamageEstimateID_Type& getDamageEstimateID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DamageEstimateID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DamageEstimateID.
    */
  virtual uci::type::DamageEstimateID_Type& getDamageEstimateID() = 0;

  /** Sets the complex content identified by DamageEstimateID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DamageEstimateID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& setDamageEstimateID(const uci::type::DamageEstimateID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by EstimateType.
    *
    * @return A const reference to the value of the enumeration identified by EstimateType.
    */
  virtual const uci::type::DamageCategoryEnum& getEstimateType() const = 0;

  /** Returns a reference to the value of the enumeration identified by EstimateType.
    *
    * @return A reference to the value of the enumeration identified by EstimateType.
    */
  virtual uci::type::DamageCategoryEnum& getEstimateType() = 0;

  /** Sets the value of the enumeration identified by EstimateType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& setEstimateType(const uci::type::DamageCategoryEnum& value) = 0;

  /** Sets the value of the enumeration identified by EstimateType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& setEstimateType(uci::type::DamageCategoryEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TaskID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual const uci::type::TaskID_Type& getTaskID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TaskID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual uci::type::TaskID_Type& getTaskID() = 0;

  /** Sets the complex content identified by TaskID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TaskID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& setTaskID(const uci::type::TaskID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ReleasePoint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ReleasePoint.
    */
  virtual const uci::type::Point3D_Type& getReleasePoint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ReleasePoint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ReleasePoint.
    */
  virtual uci::type::Point3D_Type& getReleasePoint() = 0;

  /** Sets the complex content identified by ReleasePoint to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ReleasePoint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& setReleasePoint(const uci::type::Point3D_Type& value) = 0;

  /** Returns whether the Element identified by ReleasePoint exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReleasePoint is enabled or not.
    */
  virtual bool hasReleasePoint() const = 0;

  /** Enables the Element identified by ReleasePoint.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ReleasePoint.
    */
  virtual uci::type::Point3D_Type& enableReleasePoint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReleasePoint.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& clearReleasePoint() = 0;

  /** Returns the value of the SimplePrimitive data type identified by CompletionTime.
    *
    * @return The value of the simple primitive data type identified by CompletionTime.
    */
  virtual uci::type::DateTimeTypeValue getCompletionTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CompletionTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& setCompletionTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EstimateZone.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EstimateZone.
    */
  virtual const uci::type::ZoneType& getEstimateZone() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EstimateZone.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EstimateZone.
    */
  virtual uci::type::ZoneType& getEstimateZone() = 0;

  /** Sets the complex content identified by EstimateZone to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EstimateZone.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& setEstimateZone(const uci::type::ZoneType& value) = 0;

  /** Returns whether the Element identified by EstimateZone exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimateZone is enabled or not.
    */
  virtual bool hasEstimateZone() const = 0;

  /** Enables the Element identified by EstimateZone.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EstimateZone.
    */
  virtual uci::type::ZoneType& enableEstimateZone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EstimateZone.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& clearEstimateZone() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ReportingThreshold.
    *
    * @return The value of the simple primitive data type identified by ReportingThreshold.
    */
  virtual uci::type::PercentTypeValue getReportingThreshold() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ReportingThreshold.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& setReportingThreshold(uci::type::PercentTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Details.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Details.
    */
  virtual const uci::type::DamageEstimateDetailsType& getDetails() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Details.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Details.
    */
  virtual uci::type::DamageEstimateDetailsType& getDetails() = 0;

  /** Sets the complex content identified by Details to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Details.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& setDetails(const uci::type::DamageEstimateDetailsType& value) = 0;

  /** Returns whether the Element identified by Details exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Details is enabled or not.
    */
  virtual bool hasDetails() const = 0;

  /** Enables the Element identified by Details.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Details.
    */
  virtual uci::type::DamageEstimateDetailsType& enableDetails(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Details.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& clearDetails() = 0;

  /** Returns a const reference to the bounded list identified by Violation.
    *
    * @return A const reference to the bounded list identified by Violation.
    */
  virtual const uci::type::DamageEstimateMDT::Violation& getViolation() const = 0;

  /** Returns a reference to the bounded list identified by Violation.
    *
    * @return A reference to the bounded list identified by Violation.
    */
  virtual uci::type::DamageEstimateMDT::Violation& getViolation() = 0;

  /** Sets the bounded list identified by Violation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& setViolation(const uci::type::DamageEstimateMDT::Violation& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Summary.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Summary.
    */
  virtual const uci::type::DamageSummaryType& getSummary() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Summary.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Summary.
    */
  virtual uci::type::DamageSummaryType& getSummary() = 0;

  /** Sets the complex content identified by Summary to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Summary.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& setSummary(const uci::type::DamageSummaryType& value) = 0;

  /** Returns whether the Element identified by Summary exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Summary is enabled or not.
    */
  virtual bool hasSummary() const = 0;

  /** Enables the Element identified by Summary.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Summary.
    */
  virtual uci::type::DamageSummaryType& enableSummary(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Summary.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& clearSummary() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by EstimateNarrative.
    *
    * @return A const reference to the accessor that provides access to the string identified by EstimateNarrative.
    */
  virtual const uci::type::VisibleString1024Type& getEstimateNarrative() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by EstimateNarrative.
    *
    * @return A reference to the accessor that provides access to the string identified by EstimateNarrative.
    */
  virtual uci::type::VisibleString1024Type& getEstimateNarrative() = 0;

  /** Sets the string identified by EstimateNarrative to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by EstimateNarrative.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& setEstimateNarrative(const uci::type::VisibleString1024Type& value) = 0;

  /** Sets the string identified by EstimateNarrative to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& setEstimateNarrative(const std::string& value) = 0;

  /** Sets the string identified by EstimateNarrative to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& setEstimateNarrative(const char* value) = 0;

  /** Returns whether the Element identified by EstimateNarrative exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimateNarrative is enabled or not.
    */
  virtual bool hasEstimateNarrative() const = 0;

  /** Enables the Element identified by EstimateNarrative.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by EstimateNarrative.
    */
  virtual uci::type::VisibleString1024Type& enableEstimateNarrative(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EstimateNarrative.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& clearEstimateNarrative() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * InformationSource.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      InformationSource.
    */
  virtual const uci::type::DamageInformationWeatherSourceType& getInformationSource() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by InformationSource.
    *
    * @return A reference to the accessor that provides access to the complex content identified by InformationSource.
    */
  virtual uci::type::DamageInformationWeatherSourceType& getInformationSource() = 0;

  /** Sets the complex content identified by InformationSource to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by InformationSource.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& setInformationSource(const uci::type::DamageInformationWeatherSourceType& value) = 0;

  /** Returns whether the Element identified by InformationSource exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InformationSource is enabled or not.
    */
  virtual bool hasInformationSource() const = 0;

  /** Enables the Element identified by InformationSource.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by InformationSource.
    */
  virtual uci::type::DamageInformationWeatherSourceType& enableInformationSource(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by InformationSource.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateMDT& clearInformationSource() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  DamageEstimateMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~DamageEstimateMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The DamageEstimateMDT to copy from.
    */
  DamageEstimateMDT(const DamageEstimateMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this DamageEstimateMDT to the contents of the DamageEstimateMDT on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The DamageEstimateMDT on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this DamageEstimateMDT.
    * @return A reference to this DamageEstimateMDT.
    */
  DamageEstimateMDT& operator=(const DamageEstimateMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_DAMAGEESTIMATEMDT_H

