/** @file AtomicValueType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ATOMICVALUETYPE_H
#define UCI_TYPE_ATOMICVALUETYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/ByteAccessor.h"
#include "uci/base/DoubleAccessor.h"
#include "uci/base/FloatAccessor.h"
#include "uci/base/IntAccessor.h"
#include "uci/base/LongAccessor.h"
#include "uci/base/ShortAccessor.h"
#include "uci/base/UUID.h"
#include "uci/base/UnsignedByteAccessor.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/UnsignedShortAccessor.h"
#include "uci/base/export.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/DurationType.h"
#include "uci/type/QueryString4096Type.h"
#include "uci/type/SchemaComponentNameType.h"
#include "uci/type/TimeType.h"
#include "xs/type/binaryXmlSchemaPrimitives.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** An atomic primitive value. */
class AtomicValueType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new AtomicValueType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AtomicValueType.
    */
  static UCI_EXPORT AtomicValueType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new AtomicValueType initializing the data accessed by the new AtomicValueType using the data
    * accessed by the specified AtomicValueType (cloning).
    *
    * @param accessor The AtomicValueType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created AtomicValueType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AtomicValueType.
    */
  static UCI_EXPORT AtomicValueType& create(const AtomicValueType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified AtomicValueType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The AtomicValueType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(AtomicValueType& accessor);

  /** Returns this accessor's type constant, i.e. atomicValueType.
    *
    * @return This accessor's type constant, i.e. atomicValueType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::atomicValueType;
  }

  /** Returns the version that was initialized from the uci:version attribute of AtomicValueType.
    *
    * @return The version that was initialized from the uci:version attribute of AtomicValueType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AtomicValueType& accessor) = 0;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum AtomicValueTypeChoice {
    ATOMICVALUETYPE_CHOICE_NONE,
    ATOMICVALUETYPE_CHOICE_BOOLEANVALUE,
    ATOMICVALUETYPE_CHOICE_BYTEVALUE,
    ATOMICVALUETYPE_CHOICE_UNSIGNEDBYTEVALUE,
    ATOMICVALUETYPE_CHOICE_SHORTVALUE,
    ATOMICVALUETYPE_CHOICE_UNSIGNEDSHORTVALUE,
    ATOMICVALUETYPE_CHOICE_INTVALUE,
    ATOMICVALUETYPE_CHOICE_UNSIGNEDINTVALUE,
    ATOMICVALUETYPE_CHOICE_LONGVALUE,
    ATOMICVALUETYPE_CHOICE_FLOATVALUE,
    ATOMICVALUETYPE_CHOICE_DOUBLEVALUE,
    ATOMICVALUETYPE_CHOICE_DATETIMEVALUE,
    ATOMICVALUETYPE_CHOICE_DURATIONVALUE,
    ATOMICVALUETYPE_CHOICE_TIMEVALUE,
    ATOMICVALUETYPE_CHOICE_STRINGVALUECASESENSITIVE,
    ATOMICVALUETYPE_CHOICE_STRINGVALUECASEINSENSITIVE,
    ATOMICVALUETYPE_CHOICE_ENUMVALUE,
    ATOMICVALUETYPE_CHOICE_HEXBINARYVALUE,
    ATOMICVALUETYPE_CHOICE_UUID_VALUE
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual AtomicValueTypeChoice getAtomicValueTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getAtomicValueTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the access
    * methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setAtomicValueTypeChoiceOrdinal(AtomicValueTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns the value of the SimplePrimitive data type identified by BooleanValue.
    *
    * @return The value of the simple primitive data type identified by BooleanValue.
    */
  virtual xs::Boolean getBooleanValue() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by BooleanValue.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setBooleanValue(xs::Boolean value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by BooleanValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by BooleanValue, false otherwise.
    */
  virtual bool isBooleanValue() const = 0;

  /** Returns the value of the SimplePrimitive data type identified by ByteValue.
    *
    * @return The value of the simple primitive data type identified by ByteValue.
    */
  virtual xs::Byte getByteValue() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ByteValue.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setByteValue(xs::Byte value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ByteValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ByteValue, false otherwise.
    */
  virtual bool isByteValue() const = 0;

  /** Returns the value of the SimplePrimitive data type identified by UnsignedByteValue.
    *
    * @return The value of the simple primitive data type identified by UnsignedByteValue.
    */
  virtual xs::UnsignedByte getUnsignedByteValue() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by UnsignedByteValue.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setUnsignedByteValue(xs::UnsignedByte value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by UnsignedByteValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by UnsignedByteValue, false
    *      otherwise.
    */
  virtual bool isUnsignedByteValue() const = 0;

  /** Returns the value of the SimplePrimitive data type identified by ShortValue.
    *
    * @return The value of the simple primitive data type identified by ShortValue.
    */
  virtual xs::Short getShortValue() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ShortValue.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setShortValue(xs::Short value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ShortValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ShortValue, false otherwise.
    */
  virtual bool isShortValue() const = 0;

  /** Returns the value of the SimplePrimitive data type identified by UnsignedShortValue.
    *
    * @return The value of the simple primitive data type identified by UnsignedShortValue.
    */
  virtual xs::UnsignedShort getUnsignedShortValue() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by UnsignedShortValue.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setUnsignedShortValue(xs::UnsignedShort value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by UnsignedShortValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by UnsignedShortValue, false
    *      otherwise.
    */
  virtual bool isUnsignedShortValue() const = 0;

  /** Returns the value of the SimplePrimitive data type identified by IntValue.
    *
    * @return The value of the simple primitive data type identified by IntValue.
    */
  virtual xs::Int getIntValue() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IntValue.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setIntValue(xs::Int value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by IntValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by IntValue, false otherwise.
    */
  virtual bool isIntValue() const = 0;

  /** Returns the value of the SimplePrimitive data type identified by UnsignedIntValue.
    *
    * @return The value of the simple primitive data type identified by UnsignedIntValue.
    */
  virtual xs::UnsignedInt getUnsignedIntValue() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by UnsignedIntValue.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setUnsignedIntValue(xs::UnsignedInt value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by UnsignedIntValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by UnsignedIntValue, false
    *      otherwise.
    */
  virtual bool isUnsignedIntValue() const = 0;

  /** Returns the value of the SimplePrimitive data type identified by LongValue.
    *
    * @return The value of the simple primitive data type identified by LongValue.
    */
  virtual xs::Long getLongValue() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LongValue.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setLongValue(xs::Long value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by LongValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by LongValue, false otherwise.
    */
  virtual bool isLongValue() const = 0;

  /** Returns the value of the SimplePrimitive data type identified by FloatValue.
    *
    * @return The value of the simple primitive data type identified by FloatValue.
    */
  virtual xs::Float getFloatValue() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FloatValue.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setFloatValue(xs::Float value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FloatValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FloatValue, false otherwise.
    */
  virtual bool isFloatValue() const = 0;

  /** Returns the value of the SimplePrimitive data type identified by DoubleValue.
    *
    * @return The value of the simple primitive data type identified by DoubleValue.
    */
  virtual xs::Double getDoubleValue() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DoubleValue.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setDoubleValue(xs::Double value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by DoubleValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by DoubleValue, false otherwise.
    */
  virtual bool isDoubleValue() const = 0;

  /** Returns the value of the SimplePrimitive data type identified by DateTimeValue.
    *
    * @return The value of the simple primitive data type identified by DateTimeValue.
    */
  virtual uci::type::DateTimeTypeValue getDateTimeValue() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DateTimeValue.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setDateTimeValue(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by DateTimeValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by DateTimeValue, false otherwise.
    */
  virtual bool isDateTimeValue() const = 0;

  /** Returns the value of the SimplePrimitive data type identified by DurationValue.
    *
    * @return The value of the simple primitive data type identified by DurationValue.
    */
  virtual uci::type::DurationTypeValue getDurationValue() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DurationValue.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setDurationValue(uci::type::DurationTypeValue value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by DurationValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by DurationValue, false otherwise.
    */
  virtual bool isDurationValue() const = 0;

  /** Returns the value of the SimplePrimitive data type identified by TimeValue.
    *
    * @return The value of the simple primitive data type identified by TimeValue.
    */
  virtual uci::type::TimeTypeValue getTimeValue() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TimeValue.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setTimeValue(uci::type::TimeTypeValue value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by TimeValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by TimeValue, false otherwise.
    */
  virtual bool isTimeValue() const = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by StringValueCaseSensitive.
    *
    * @return A const reference to the accessor that provides access to the string identified by StringValueCaseSensitive.
    */
  virtual const uci::type::QueryString4096Type& getStringValueCaseSensitive() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by StringValueCaseSensitive.
    *
    * @return A reference to the accessor that provides access to the string identified by StringValueCaseSensitive.
    */
  virtual uci::type::QueryString4096Type& getStringValueCaseSensitive() = 0;

  /** Sets the string identified by StringValueCaseSensitive to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by StringValueCaseSensitive.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setStringValueCaseSensitive(const uci::type::QueryString4096Type& value) = 0;

  /** Sets the string identified by StringValueCaseSensitive to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setStringValueCaseSensitive(const std::string& value) = 0;

  /** Sets the string identified by StringValueCaseSensitive to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setStringValueCaseSensitive(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by StringValueCaseSensitive.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by StringValueCaseSensitive, false
    *      otherwise.
    */
  virtual bool isStringValueCaseSensitive() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by StringValueCaseSensitive.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by StringValueCaseSensitive.
    */
  virtual uci::type::QueryString4096Type& chooseStringValueCaseSensitive(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * StringValueCaseInsensitive.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      StringValueCaseInsensitive.
    */
  virtual const uci::type::QueryString4096Type& getStringValueCaseInsensitive() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by StringValueCaseInsensitive.
    *
    * @return A reference to the accessor that provides access to the string identified by StringValueCaseInsensitive.
    */
  virtual uci::type::QueryString4096Type& getStringValueCaseInsensitive() = 0;

  /** Sets the string identified by StringValueCaseInsensitive to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by StringValueCaseInsensitive.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setStringValueCaseInsensitive(const uci::type::QueryString4096Type& value) = 0;

  /** Sets the string identified by StringValueCaseInsensitive to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setStringValueCaseInsensitive(const std::string& value) = 0;

  /** Sets the string identified by StringValueCaseInsensitive to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setStringValueCaseInsensitive(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by StringValueCaseInsensitive.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by StringValueCaseInsensitive,
    *      false otherwise.
    */
  virtual bool isStringValueCaseInsensitive() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by StringValueCaseInsensitive.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by StringValueCaseInsensitive.
    */
  virtual uci::type::QueryString4096Type& chooseStringValueCaseInsensitive(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by EnumValue.
    *
    * @return A const reference to the accessor that provides access to the string identified by EnumValue.
    */
  virtual const uci::type::SchemaComponentNameType& getEnumValue() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by EnumValue.
    *
    * @return A reference to the accessor that provides access to the string identified by EnumValue.
    */
  virtual uci::type::SchemaComponentNameType& getEnumValue() = 0;

  /** Sets the string identified by EnumValue to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by EnumValue.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setEnumValue(const uci::type::SchemaComponentNameType& value) = 0;

  /** Sets the string identified by EnumValue to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setEnumValue(const std::string& value) = 0;

  /** Sets the string identified by EnumValue to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setEnumValue(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by EnumValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by EnumValue, false otherwise.
    */
  virtual bool isEnumValue() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by EnumValue.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by EnumValue.
    */
  virtual uci::type::SchemaComponentNameType& chooseEnumValue(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns the accessor to the HexBinaryValue field contained in this message fragment.
    *
    * @return The reference to the accessor to the HexBinaryValue field.
    */
  virtual const xs::HexBinary& getHexBinaryValue() const = 0;

  /** Returns the accessor to the HexBinaryValue field contained in this message fragment.
    *
    * @return The reference to the accessor to the HexBinaryValue field.
    */
  virtual xs::HexBinary& getHexBinaryValue() = 0;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents.
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setHexBinaryValue(const xs::HexBinary& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by HexBinaryValue.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by HexBinaryValue, false otherwise.
    */
  virtual bool isHexBinaryValue() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by HexBinaryValue.
    *
    * @return A reference to the accessor that provides access to the choice identified by HexBinaryValue.
    */
  virtual xs::HexBinary& chooseHexBinaryValue() = 0;

  /** Returns the UUID.
    *
    * @return The UUID.
    */
  virtual uci::base::UUID getUUID_Value() const = 0;

  /** Performs a deep copy of the specified UUID (uuid) and sets the UUID to the resultant copy.
    *
    * @param value The UUID that is used to set the UUID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AtomicValueType& setUUID_Value(const uci::base::UUID& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by UUID_Value.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by UUID_Value, false otherwise.
    */
  virtual bool isUUID_Value() const = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AtomicValueType() {
  }

  /** The destructor [only available to derived classes]. */
  ~AtomicValueType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AtomicValueType to copy from.
    */
  AtomicValueType(const AtomicValueType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AtomicValueType to the contents of the AtomicValueType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The AtomicValueType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this AtomicValueType.
    * @return A reference to this AtomicValueType.
    */
  AtomicValueType& operator=(const AtomicValueType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ATOMICVALUETYPE_H

