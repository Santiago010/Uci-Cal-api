/** @file ProductTypeEnum.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:09 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PRODUCTTYPEENUM_H
#define UCI_TYPE_PRODUCTTYPEENUM_H

#include <map>
#include <sstream>

#include "../base/Accessor.h"
#include "../base/export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the product type. */
class ProductTypeEnum : public virtual uci::base::Accessor {
public:

  /** The following are the enumerated items that comprise this enumeration */
  enum EnumerationItem {

    /** Enumerated item that indicates that the enumeration has not been set */
    enumNotSet,

    /** Indicates the product is Auxiliary data file for an AMTI activity for use in data analysis and reprocessing. */
    UCI_AMTI_AUXILIARY_DATA,

    /** Indicates the product is the result of an AMTI activity and contains raw target detections in a standardized format. */
    UCI_AMTI_DETECTION,

    /** Indicates the product is WBRD - (Wideband Raw Data) This product is created on the platform as the result of an AMTI
      * collection task. This is the unprocessed, raw phase history data.
      */
    UCI_AMTI_WBRD,

    /** Indicates a product containing audio data. */
    UCI_AUDIO,

    /** Indicates an audio output that is an audio file clip. */
    UCI_AUDIO_CLIP,

    /** Indicates an audio output that is streamed. */
    UCI_AUDIO_STREAM,

    /** Demodulated digital data extracted from an RF Signal. */
    UCI_DEMODULATED_DATA,

    /** Indicates the ESM data product is in the form of In-phase and Quadrature (I/Q) components decomposed from the
      * original signal.
      */
    UCI_ESM_IQ_DATA,

    /** Indicates the product is an elevation geoproduct distinct from imagery. */
    UCI_GEOPRODUCT_ELEVATION,

    /** Indicates the product is a geoproduct, typically vector or multi-dimensional. */
    UCI_GEOPRODUCT_FEATURE,

    /** Indicates the product is a geoproduct, typically vector or multi-dimensional, with borders. */
    UCI_GEOPRODUCT_FEATURE_BORDER,

    /** Indicates the product is a geoproduct, typically vector or multi-dimensional, with roads. */
    UCI_GEOPRODUCT_FEATURE_ROADS,

    /** Indicates the product is a geoproduct, typically vector or multi-dimensional, with shoreline. */
    UCI_GEOPRODUCT_FEATURE_SHORELINE,

    /** Indicates a file that is an image without specifying the collection method, wavelength, or sensor type. */
    UCI_IMAGE,

    /** Indicates the data product is in the form of In-phase and Quadrature (I/Q) components decomposed from the original
      * signal.
      */
    UCI_IQ_DATA,

    /** Indicates an I/Q data output, using corrected time. */
    UCI_IQ_DATA_TIME_CORRECTED,

    /** Indicates the product is WBRD (Wideband Raw Data). This product is created on the platform as the result of an ISAR
      * collection task. This is the unprocessed, raw phase history data.
      */
    UCI_ISAR_WBRD,

    /** Indicates the product is Auxiliary data file for an ISAR activity for use in data analysis and reprocessing. */
    UCI_ISAR_AUXILIARY_DATA,

    /** Indicates the product is Motion-Compensated Phase History Data MCPHD) - This product is created on the platform as
      * the result of a collection task from WBRD with motion-compensation applied.
      */
    UCI_ISAR_MCPHD,

    /** Indicates the product is WCMD (Wideband Complex MASINT Data) - This product contains complex data generated as a
      * result of a collection task.
      */
    UCI_ISAR_WCMD,

    /** Indicates the product is created as a result of a collection task from ISAR_WBRD or ISAR_WCMD data and contains
      * multiple image frames combined into a movie.
      */
    UCI_ISAR_MOVIE,

    /** Indicates the product is an optical image in the visible spectrum. */
    UCI_OPTICAL_IMAGE_VISIBLE,

    /** Indicates the product is an optical image in the infrared spectrum. */
    UCI_OPTICAL_IMAGE_INFRARED,

    /** Indicates the product is an optical image. */
    UCI_OPTICAL_IMAGE,

    /** Indicates the product is a hyperspectral optical image. Hyperspectral imaging involves imaging a scene in many
      * different spectral bands, covering a wide range of wavelengths and with fine wavelength resolution.
      */
    UCI_OPTICAL_IMAGE_HYPERSPECTRAL,

    /** Indicates the product is an optical video clip in the visible spectrum. */
    UCI_OPTICAL_VIDEO_CLIP_VISIBLE,

    /** Indicates the product is an optical video clip in the infrared spectrum. */
    UCI_OPTICAL_VIDEO_CLIP_INFRARED,

    /** Indicates the product is an optical video clip. */
    UCI_OPTICAL_VIDEO_CLIP,

    /** Indicates the product is a hyperspectral optical video clip. See annotation on hyperspectral imaging for details. */
    UCI_OPTICAL_VIDEO_CLIP_HYPERSPECTRAL,

    /** Indicates the product is an optical video stream in the visible spectrum. */
    UCI_OPTICAL_VIDEO_STREAM_VISIBLE,

    /** Indicates the product is an optical video stream in the infrared spectrum. */
    UCI_OPTICAL_VIDEO_STREAM_INFRARED,

    /** Indicates the product is an optical video stream. */
    UCI_OPTICAL_VIDEO_STREAM,

    /** Indicates the product is a hyperspectral optical video stream. See annotation on hyperspectral imaging for details. */
    UCI_OPTICAL_VIDEO_STREAM_HYPERSPECTRAL,

    /** Indicates the product is an optical image mapped to Google. */
    UCI_OPTICAL_IMAGE_GOOGLE_MAPPED,

    /** Indicates the product is an optical image mapped to Digital Terrain Data. */
    UCI_OPTICAL_IMAGE_DTD_MAPPED,

    /** Indicates the product is an optical image taken with focus sweep techniques. Focus sweep takes multiple pictures of
      * the same scene at different focal lengths, allowing the focus of the scene being viewed to be chosen after the image
      * or images of the scene is taken.
      */
    UCI_OPTICAL_IMAGE_FOCUS_SWEEP,

    /** Indicates the product is a report on the optical calibration of the sensor. */
    UCI_OPTICAL_REPORT_CALIBRATION,

    /** Indicates the product is WCMD (Wideband Complex MASINT Data) - This is an intermediate compressed product that is
      * derived from the WBRD product and has not had autofocus applied.
      */
    UCI_SAR_WCMD,

    /** Indicates the product is WCMD (Wideband Complex MASINT Data) Table of Contents - This product provides a mapping of a
      * SAR_WBID product back to SAR_WCMD products for use in chipping operations.
      */
    UCI_SAR_WCMD_TOC,

    /** Indicates the product is WCID (Wideband Complex Imagery Data) - This is an intermediate compressed product that is
      * derived from the WBRD product that has potentially had autofocus applied.
      */
    UCI_SAR_WCID,

    /** Indicates the product is WBID (Wideband Imagery Data) -This is a compressed product that is derived from the WBRD
      * product. The result is a final viewable image.
      */
    UCI_SAR_WBID,

    /** Indicates the product is WBRD - (Wideband Raw Data) This product is created on the platform as the result of a
      * collection task. This is the unprocessed, raw phase history data.
      */
    UCI_SAR_WBRD,

    /** Indicates the product is Auxiliary data file for a SAR activity for use in data analysis and reprocessing. */
    UCI_SAR_AUXILIARY_DATA,

    /** Indicates the product is Motion-Compensated Phase History Data (MCPHD) - This product is created on the platform as
      * the result of a collection task from WBRD with motion-compensation applied.
      */
    UCI_SAR_MCPHD,

    /** Indicates the product is a product with vector data that describes points, lines and polygons that represent
      * geospatial features such as roads, rivers or lakes. The shapefile product type infers the Esri developed shapefile
      * product format. A shapefile could be static reference data or a dynamically generated output of Product processing
      * with roads or other features identified.
      */
    UCI_SHAPEFILE,

    /** Indicates the product is Auxiliary data file for an SMTI activity for use in data analysis and reprocessing. */
    UCI_SMTI_AUXILIARY_DATA,

    /** Indicates the product is HRR products are designed to align with the definitions in STANAG 4607 Ed. 3. A chip
      * representing a single Doppler bin / multiple range samples of a single entity.
      */
    UCI_SMTI_1D_HRR_PROFILE,

    /** Indicates the product is chip representing multiple Doppler samples / multiple range samples of a single entity. */
    UCI_SMTI_2D_HRR_CHIP,

    /** Indicates the product is chip with non-contiguous range / Doppler samples of a single entity. */
    UCI_SMTI_SPARSE_HRR_CHIP,

    /** Indicates the product is chip with range / Doppler that extends beyond extent of a single entity. */
    UCI_SMTI_OVERSIZED_HRR_CHIP,

    /** Indicates the product is full detection space of the radar system (both range and Doppler). */
    UCI_SMTI_HRR_FULL_RDM,

    /** Indicates the product is partial detection space of the radar system (both range and Doppler). */
    UCI_SMTI_HRR_PARTIAL_RDM,

    /** Indicates the product is block of pulse-range space data. */
    UCI_SMTI_HRR_RANGE_PULSE_DATA,

    /** Indicates the product is scatters above a threshold for a 2-D HRR Chip. */
    UCI_SMTI_HRR_THRESHOLD_SCATTER,

    /** Indicates the product is the result of an SMTI activity and contains raw target detections in a standardized format
      * (e.g. STANAG 4607).
      */
    UCI_SMTI_DETECTION,

    /** Indicates the product is WBRD - (Wideband Raw Data) This product is created on the platform as the result of a
      * collection task. This is the unprocessed, raw phase history data.
      */
    UCI_SMTI_WBRD,

    /** Indicates a file that contains either a video or video stream/clip without specifying the collection method,
      * wavelength, or sensor type.
      */
    UCI_VIDEO,

    /** Indicates the product is streamed output of weather for overlay onto a display (e.g. ARINC 708). */
    UCI_WEATHER_STREAM,

    /** Indicates the product is WBRD - (Wideband Raw Data) This product is created on the platform as the result of a
      * collection task. This is the unprocessed, raw phase history data.
      */
    UCI_WEATHER_RADAR_WBRD,

    /** Indicates the product is auxiliary data file for a weather activity for use in data analysis and reprocessing. */
    UCI_WEATHER_RADAR_AUXILIARY_DATA,

    /** Indicates the product is Ground Weather Radar Imagery - Base Reflectivity (graphic image). */
    UCI_WEATHER_RADAR_IMAGERY_BASE_REFLECTIVITY,

    /** Indicates the product is Ground Weather Radar Imagery - Composite Reflectivity (graphic image). */
    UCI_WEATHER_RADAR_IMAGERY_COMP_REFLECTIVITY,

    /** Indicates the product is Aviation Routine Weather Reports (Text String). */
    UCI_WEATHER_METAR,

    /** Indicates the product is Aerodrome Forecast, Weather (Text String). */
    UCI_WEATHER_TAF,

    /** Indicates the product is Pilot Reports, Weather (Text String). */
    UCI_WEATHER_PIREP,

    /** Indicates the product is Aircraft Reports, Weather (Text String). */
    UCI_WEATHER_AIREP,

    /** Indicates the product is Wind and Temperature Aloft Forecast Data (Text String). */
    UCI_WEATHER_WINDS_ALOFT,

    /** Indicates the product is Visible Satellite Imagery for Weather (graphic image). */
    UCI_WEATHER_SATELLITE_IMAGERY_VISIBLE,

    /** Indicates the product is Infrared Satellite Imagery for Weather (graphic image). */
    UCI_WEATHER_SATELLITE_IMAGERY_INFRARED,

    /** Indicates the product is Multi-spectral Satellite Imagery for Weather (graphic image). */
    UCI_WEATHER_SATELLITE_IMAGERY_MSI,

    /** Indicates the product is Microwave Satellite Imagery for Weather (graphic image). */
    UCI_WEATHER_SATELLITE_IMAGERY_MICROWAVE,

    /** Indicates the product is Water Vapor Satellite Imagery for Weather (graphic image). */
    UCI_WEATHER_SATELLITE_IMAGERY_WATERVAPOR,

    /** Indicates the product is Gridded Binary Wind and Temperature Aloft Forecast Data (binary file). */
    UCI_WEATHER_GRIB,

    /** Indicates the product is Gridded Textual Wind and Temperature Aloft (UCI Format). The format of this file is the UCI
      * weather data set message and is used when the size of a weather message is too large to be sending as a message. This
      * file can represent current, forecast or historical weather data.
      */
    UCI_WEATHER_TABULAR_DATA,

    /** Indicates the product is Weather Forecast Map (graphic image). */
    UCI_WEATHER_PROGNOSTIC_CHARTS,

    /** Indicates the product is Surface Weather depicting temps, high and low pressure areas (graphic image). */
    UCI_WEATHER_SURFACE_CHARTS,

    /** Indicates the product is graphic charts indicating Wind velocity at various altitudes (graphic image). */
    UCI_WEATHER_FORECAST_WIND_VELOCITY_CHART,

    /** Indicates the product is graphic chart indicating air temperature at various altitudes (graphic image). */
    UCI_WEATHER_FORECAST_AIR_TEMPERATURE_CHART,

    /** Indicates the product is graphic chart indicating east wind speed at various altitudes (graphic image). */
    UCI_WEATHER_FORECAST_EAST_WIND_CHART,

    /** Indicates the product is graphic chart indicating north wind speed at various altitudes (graphic image). */
    UCI_WEATHER_FORECAST_NORTH_WIND_CHART,

    /** Indicates the product is not represented by any of the existing enumerated options. Recommended for restricted use
      * for pending change package proposals or debug purposes.
      */
    UCI_OTHER,

    /** Enumerated item that indicates maximum enumerated item exclusive of this item */
    enumMaxExclusive
  };

  /** Returns this accessor's type constant, i.e. productTypeEnum.
    *
    * @return This accessor's type constant, i.e. productTypeEnum.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::productTypeEnum;
  }

  /** The assignment operator. Sets the contents of this ProductTypeEnum to the contents of the ProductTypeEnum on the
    * right hand side (rhs) of the assignment operator.
    *
    * @param rhs The ProductTypeEnum on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this ProductTypeEnum.
    * @return A reference to this ProductTypeEnum.
    */
  ProductTypeEnum& operator=(const ProductTypeEnum& rhs) {
    setValue(rhs.getValue());
    return *this;
  }

  /** The assignment operator that sets the value of this ProductTypeEnum enumeration to the EnumerationItem on the right
    * hand side of the assignment operator.
    *
    * @param rhs The EnumerationItem whose value is to be assigned to this ProductTypeEnum enumeration.
    * @return A reference to this ProductTypeEnum enumeration.
    */
  ProductTypeEnum& operator=(EnumerationItem rhs) {
    setValue(rhs);
    return *this;
  }

  /** Sets the value of this ProductTypeEnum enumeration to the value of the specified enumeration item.
    *
    * @param item The EnumerationItem whose value is to be used to set the value of this ProductTypeEnum enumeration.
    */
  virtual void setValue(EnumerationItem item) = 0;

  /** Returns the value of this ProductTypeEnum enumeration.
    *
    * @param testForValidity=true Specifies whether this ProductTypeEnum enumeration should be validated (true) or not
    *      (false) as part of retrieving its value.
    * @return The value of this ProductTypeEnum enumeration.
    */
  virtual EnumerationItem getValue(bool testForValidity=true) const = 0;

  /** Returns the number of items in this ProductTypeEnum enumeration.
    *
    * @return The number of items in this ProductTypeEnum enumeration.
    */
  int getNumberOfItems() const noexception {
    return 81;
  }

  /** Returns whether this ProductTypeEnum enumeration is valid or not. A ProductTypeEnum enumeration is valid if its value
    * is one of the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @return A flag indicating whether this ProductTypeEnum enumeration is valid (true) or not (false).
    */
  virtual bool isValid() const noexception {
    return isValid(getValue(false));
  }

  /** Returns whether the specified enumeration item is valid or not. A enumeration item is valid if its value is one of
    * the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @param item The EnumerationItem to test.
    * @return A flag indicating whether the specified EnumerationItem is valid (true) or not (false).
    */
  static bool isValid(EnumerationItem item) noexception {
    return (item > enumNotSet) && (item < enumMaxExclusive);
  }

  /** Returns whether the specified name item is valid or not. A name is valid if it is the name of one of the enumeration
    * items other than enumNotSet and enumMaxExclusive.
    *
    * @param name The name to test.
    * @return A flag indicating whether the specified name is valid (true) or not (false).
    */
  static bool isValid(const std::string& name) noexception {
    FromNameTable::const_iterator iter = m_fromNameTable.find(name);
    return !(iter == m_fromNameTable.end());
  }

  /** Tests whether the value of the ProductTypeEnum enumeration on the right hand side of the == operator is equal to the
    * value as this ProductTypeEnum enumeration.
    *
    * @param rhs The ProductTypeEnum enumeration whose value is to be compared against the value of this ProductTypeEnum
    *      enumeration.
    * @return True if the value of the specified ProductTypeEnum enumeration (rhs) is equal to the value of this
    *      ProductTypeEnum enumeration, false otherwise.
    */
  bool operator==(const ProductTypeEnum& rhs) const {
    return getValue() == rhs.getValue();
  }

  /** Tests whether the value of the ProductTypeEnum enumeration on the right hand side of the != operator is not equal to
    * the value as this ProductTypeEnum enumeration.
    *
    * @param rhs The ProductTypeEnum enumeration whose value is to be compared against the value of this ProductTypeEnum
    *      enumeration.
    * @return True if the value of the specified ProductTypeEnum enumeration (rhs) is not equal to the value of this
    *      ProductTypeEnum enumeration, false otherwise.
    */
  bool operator!=(const ProductTypeEnum& rhs) const {
    return getValue() != rhs.getValue();
  }

  /** Tests whether the value of the ProductTypeEnum enumeration on the right hand side of the < operator is less than the
    * value as this ProductTypeEnum enumeration.
    *
    * @param rhs The ProductTypeEnum enumeration whose value is to be compared against the value of this ProductTypeEnum
    *      enumeration.
    * @return True if the value of the specified ProductTypeEnum enumeration (rhs) is less than the value of this
    *      ProductTypeEnum enumeration, false otherwise.
    */
  bool operator<(const ProductTypeEnum& rhs) const {
    return getValue() < rhs.getValue();
  }

  /** Tests whether the value of the ProductTypeEnum enumeration on the right hand side of the <= operator is less than or
    * equal to the value as this ProductTypeEnum enumeration.
    *
    * @param rhs The ProductTypeEnum enumeration whose value is to be compared against the value of this ProductTypeEnum
    *      enumeration.
    * @return True if the value of the specified ProductTypeEnum enumeration (rhs) is less than or equal to the value of
    *      this ProductTypeEnum enumeration, false otherwise.
    */
  bool operator<=(const ProductTypeEnum& rhs) const {
    return getValue() <= rhs.getValue();
  }

  /** Tests whether the value of the ProductTypeEnum enumeration on the right hand side of the > operator is greater than
    * the value as this ProductTypeEnum enumeration.
    *
    * @param rhs The ProductTypeEnum enumeration whose value is to be compared against the value of this ProductTypeEnum
    *      enumeration.
    * @return True if the value of the specified ProductTypeEnum enumeration (rhs) is greater than the value of this
    *      ProductTypeEnum enumeration, false otherwise.
    */
  bool operator>(const ProductTypeEnum& rhs) const {
    return getValue() > rhs.getValue();
  }

  /** Tests whether the value of the ProductTypeEnum enumeration on the right hand side of the >= operator is greater than
    * or equal to the value as this ProductTypeEnum enumeration.
    *
    * @param rhs The ProductTypeEnum enumeration whose value is to be compared against the value of this ProductTypeEnum
    *      enumeration.
    * @return True if the value of the specified ProductTypeEnum enumeration (rhs) is greater than or equal to the value of
    *      this ProductTypeEnum enumeration, false otherwise.
    */
  bool operator>=(const ProductTypeEnum& rhs) const {
    return getValue() >= rhs.getValue();
  }

  /** Tests whether the value of this ProductTypeEnum enumeration is equal to the value of the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ProductTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is equal to the value of this ProductTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator==(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() == rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is equal to the value of the specified ProductTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ProductTypeEnum
    *      enumeration.
    * @param rhs The ProductTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is equal to the value of the ProductTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator==(EnumerationItem lhs, const ProductTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs == rhs.getValue();
  }

  /** Tests whether the value of this ProductTypeEnum enumeration is not equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ProductTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is not equal to the value of this ProductTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator!=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() != rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is not equal to the value of the specified ProductTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ProductTypeEnum
    *      enumeration.
    * @param rhs The ProductTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is not equal to the value of the ProductTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator!=(EnumerationItem lhs, const ProductTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs != rhs.getValue();
  }

  /** Tests whether the value of this ProductTypeEnum enumeration is less than the value of the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ProductTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than the value of this ProductTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator<(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() < rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than the value of the specified ProductTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ProductTypeEnum
    *      enumeration.
    * @param rhs The ProductTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than the value of the ProductTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator<(EnumerationItem lhs, const ProductTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs < rhs.getValue();
  }

  /** Tests whether the value of this ProductTypeEnum enumeration is less than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ProductTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than or equal to the value of this ProductTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator<=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() <= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than or equal to the value of the specified
    * ProductTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ProductTypeEnum
    *      enumeration.
    * @param rhs The ProductTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than or equal to the value of the ProductTypeEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator<=(EnumerationItem lhs, const ProductTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs <= rhs.getValue();
  }

  /** Tests whether the value of this ProductTypeEnum enumeration is greater than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ProductTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than the value of this ProductTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator>(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() > rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than the value of the specified ProductTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ProductTypeEnum
    *      enumeration.
    * @param rhs The ProductTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than the value of the ProductTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator>(EnumerationItem lhs, const ProductTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs > rhs.getValue();
  }

  /** Tests whether the value of this ProductTypeEnum enumeration is greater than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ProductTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than or equal to the value of this ProductTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator>=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() >= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than or equal to the value of the specified
    * ProductTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ProductTypeEnum
    *      enumeration.
    * @param rhs The ProductTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than or equal to the value of the ProductTypeEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator>=(EnumerationItem lhs, const ProductTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs >= rhs.getValue();
  }

  /** Returns the name of the specified enumeration item.
    *
    * @param item The enumeration item whose name is to be returned.
    * @return The enumeration item's name if valid.
    */
  static std::string toName(EnumerationItem item) {
    ToNameTable::const_iterator iter = m_toNameTable.find(item);
    if (iter == m_toNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to convert enumerated item to its name, item not found in mapping: " << item;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Returns the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item to be returned.
    * @return The enumeration item having the specified name.
    */
  static EnumerationItem fromName(const std::string& itemName) {
    FromNameTable::const_iterator iter = m_fromNameTable.find(itemName);
    if (iter == m_fromNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to return enumerated item having specified name, name not found in mapping: " << itemName;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Return the name of the enumeration item that the value of this ProductTypeEnum enumeration is set to.
    *
    * @return The name of the enumeration item.
    */
  virtual std::string toName() const {
    return toName(getValue());
  }

  /** Sets the value of this ProductTypeEnum enumeration to the value of the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item whose value is to be used to set this ProductTypeEnum enumeration
    *      to.
    */
  virtual void setValueFromName(const std::string& itemName) {
    setValue(fromName(itemName));
  }

protected:

  /** The default constructor. In addition to constructing a new ProductTypeEnum, this constructor also makes sure the
    * conversion tables are initialized.
    */
  ProductTypeEnum() {
  }

  /** The destructor [only available to derived classes]. */
  ~ProductTypeEnum() {
  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param additionalDescription An additional description to include in the error message should an exception be thrown.
    * @param item The enumeration item to test.
    */
  static void testForValidItem(const char* additionalDescription, EnumerationItem item) {
    if (!isValid(item)) {
      std::ostringstream oStream;
      oStream << additionalDescription << ": " << item << " (item must be between " << enumNotSet << " and "<< enumMaxExclusive << " exclusive)";
      throw uci::base::UCIException(oStream.str(), 0);
    }

  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param item The enumeration item to test.
    */
  static void testForValidItem(EnumerationItem item) {
    testForValidItem("Invalid enumerated item specified", item);
  }

private:

  /** The type of table that is used to lookup the name of a enumeration item given that enumeration item. */
  typedef std::map<EnumerationItem, const std::string> ToNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  typedef std::map<const std::string, EnumerationItem> FromNameTable;

  /** The table that is used to lookup the name of a enumeration item given that enumeration item. */
  static UCI_EXPORT ToNameTable m_toNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  static UCI_EXPORT FromNameTable m_fromNameTable;

protected:

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ProductTypeEnum to copy from.
    */
  ProductTypeEnum(const ProductTypeEnum& rhs) {
    (void)rhs;
  }

};

} // namespace type
} // namespace uci

template<typename charT, typename traits>
std::basic_ostream<charT, traits>&
operator<<(std::basic_ostream<charT, traits>& oStream, const uci::type::ProductTypeEnum& enumeration)
{
  oStream << enumeration.toName();
  return oStream;
}

#endif // UCI_TYPE_PRODUCTTYPEENUM_H

