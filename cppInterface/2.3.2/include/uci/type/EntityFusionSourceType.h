/** @file EntityFusionSourceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ENTITYFUSIONSOURCETYPE_H
#define UCI_TYPE_ENTITYFUSIONSOURCETYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/export.h"
#include "CapabilityID_Type.h"
#include "DateTimeType.h"
#include "EntityContributorID_ChoiceType.h"
#include "EntitySourceEnum.h"
#include "IdentityConfidenceType.h"
#include "PercentType.h"
#include "SystemID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Contains the fusion source information for an entity. Indicates the Entity is an output of a fusion service and
  * provides references to a fusion input that fused/contributed to it.
  */
class EntityFusionSourceType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new EntityFusionSourceType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EntityFusionSourceType.
    */
  static UCI_EXPORT EntityFusionSourceType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new EntityFusionSourceType initializing the data accessed by the new EntityFusionSourceType
    * using the data accessed by the specified EntityFusionSourceType (cloning).
    *
    * @param accessor The EntityFusionSourceType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created EntityFusionSourceType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EntityFusionSourceType.
    */
  static UCI_EXPORT EntityFusionSourceType& create(const EntityFusionSourceType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified EntityFusionSourceType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The EntityFusionSourceType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(EntityFusionSourceType& accessor);

  /** Returns this accessor's type constant, i.e. entityFusionSourceType.
    *
    * @return This accessor's type constant, i.e. entityFusionSourceType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::entityFusionSourceType;
  }

  /** Returns the version that was initialized from the uci:version attribute of EntityFusionSourceType.
    *
    * @return The version that was initialized from the uci:version attribute of EntityFusionSourceType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const EntityFusionSourceType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Contributor.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Contributor.
    */
  virtual const uci::type::EntityContributorID_ChoiceType& getContributor() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Contributor.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Contributor.
    */
  virtual uci::type::EntityContributorID_ChoiceType& getContributor() = 0;

  /** Sets the complex content identified by Contributor to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Contributor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityFusionSourceType& setContributor(const uci::type::EntityContributorID_ChoiceType& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by FusionContributor.
    *
    * @return The value of the simple primitive data type identified by FusionContributor.
    */
  virtual xs::Boolean getFusionContributor() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FusionContributor.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityFusionSourceType& setFusionContributor(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ProbabilityOfCorrectAssociation.
    *
    * @return The value of the simple primitive data type identified by ProbabilityOfCorrectAssociation.
    */
  virtual uci::type::PercentTypeValue getProbabilityOfCorrectAssociation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ProbabilityOfCorrectAssociation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityFusionSourceType& setProbabilityOfCorrectAssociation(uci::type::PercentTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ContributorCapabilityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ContributorCapabilityID.
    */
  virtual const uci::type::CapabilityID_Type& getContributorCapabilityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ContributorCapabilityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ContributorCapabilityID.
    */
  virtual uci::type::CapabilityID_Type& getContributorCapabilityID() = 0;

  /** Sets the complex content identified by ContributorCapabilityID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ContributorCapabilityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityFusionSourceType& setContributorCapabilityID(const uci::type::CapabilityID_Type& value) = 0;

  /** Returns whether the Element identified by ContributorCapabilityID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ContributorCapabilityID is enabled or not.
    */
  virtual bool hasContributorCapabilityID() const = 0;

  /** Enables the Element identified by ContributorCapabilityID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ContributorCapabilityID.
    */
  virtual uci::type::CapabilityID_Type& enableContributorCapabilityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ContributorCapabilityID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityFusionSourceType& clearContributorCapabilityID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual const uci::type::IdentityConfidenceType& getIdentity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::IdentityConfidenceType& getIdentity() = 0;

  /** Sets the complex content identified by Identity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Identity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityFusionSourceType& setIdentity(const uci::type::IdentityConfidenceType& value) = 0;

  /** Returns whether the Element identified by Identity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Identity is enabled or not.
    */
  virtual bool hasIdentity() const = 0;

  /** Enables the Element identified by Identity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::IdentityConfidenceType& enableIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Identity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityFusionSourceType& clearIdentity() = 0;

  /** Returns a const reference to the value of the enumeration identified by SourceType.
    *
    * @return A const reference to the value of the enumeration identified by SourceType.
    */
  virtual const uci::type::EntitySourceEnum& getSourceType() const = 0;

  /** Returns a reference to the value of the enumeration identified by SourceType.
    *
    * @return A reference to the value of the enumeration identified by SourceType.
    */
  virtual uci::type::EntitySourceEnum& getSourceType() = 0;

  /** Sets the value of the enumeration identified by SourceType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityFusionSourceType& setSourceType(const uci::type::EntitySourceEnum& value) = 0;

  /** Sets the value of the enumeration identified by SourceType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityFusionSourceType& setSourceType(uci::type::EntitySourceEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by SourceType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SourceType is enabled or not.
    */
  virtual bool hasSourceType() const = 0;

  /** Enables the Element identified by SourceType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by SourceType.
    */
  virtual uci::type::EntitySourceEnum& enableSourceType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SourceType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityFusionSourceType& clearSourceType() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual const uci::type::SystemID_Type& getSystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual uci::type::SystemID_Type& getSystemID() = 0;

  /** Sets the complex content identified by SystemID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityFusionSourceType& setSystemID(const uci::type::SystemID_Type& value) = 0;

  /** Returns whether the Element identified by SystemID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SystemID is enabled or not.
    */
  virtual bool hasSystemID() const = 0;

  /** Enables the Element identified by SystemID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual uci::type::SystemID_Type& enableSystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SystemID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityFusionSourceType& clearSystemID() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Timestamp.
    *
    * @return The value of the simple primitive data type identified by Timestamp.
    */
  virtual uci::type::DateTimeTypeValue getTimestamp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Timestamp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityFusionSourceType& setTimestamp(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by Timestamp exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Timestamp is enabled or not.
    */
  virtual bool hasTimestamp() const = 0;

  /** Clears (disabled) the Element identified by Timestamp.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityFusionSourceType& clearTimestamp() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  EntityFusionSourceType() {
  }

  /** The destructor [only available to derived classes]. */
  ~EntityFusionSourceType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The EntityFusionSourceType to copy from.
    */
  EntityFusionSourceType(const EntityFusionSourceType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this EntityFusionSourceType to the contents of the
    * EntityFusionSourceType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The EntityFusionSourceType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this EntityFusionSourceType.
    * @return A reference to this EntityFusionSourceType.
    */
  EntityFusionSourceType& operator=(const EntityFusionSourceType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ENTITYFUSIONSOURCETYPE_H

