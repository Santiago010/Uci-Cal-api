/** @file AccessAssessmentMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ACCESSASSESSMENTMDT_H
#define UCI_TYPE_ACCESSASSESSMENTMDT_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/AccessAssessmentID_Type.h"
#include "uci/type/AccessAssessmentType.h"
#include "uci/type/AssociatedAccessAssessmentInfoType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/NotificationSourceType.h"
#include "uci/type/RequestID_Type.h"
#include "uci/type/VisibleString1024Type.h"
#include "uci/type/VisibleString32Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class AccessAssessmentMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new AccessAssessmentMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AccessAssessmentMDT.
    */
  static UCI_EXPORT AccessAssessmentMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new AccessAssessmentMDT initializing the data accessed by the new AccessAssessmentMDT using
    * the data accessed by the specified AccessAssessmentMDT (cloning).
    *
    * @param accessor The AccessAssessmentMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created AccessAssessmentMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AccessAssessmentMDT.
    */
  static UCI_EXPORT AccessAssessmentMDT& create(const AccessAssessmentMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified AccessAssessmentMDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The AccessAssessmentMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(AccessAssessmentMDT& accessor);

  /** Returns this accessor's type constant, i.e. accessAssessmentMDT.
    *
    * @return This accessor's type constant, i.e. accessAssessmentMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::accessAssessmentMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of AccessAssessmentMDT.
    *
    * @return The version that was initialized from the uci:version attribute of AccessAssessmentMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AccessAssessmentMDT& accessor) = 0;

  /** Indicates a message that is associated with or the cause of the Access Assessment; this would include launch
    * observations, operator notifications, other associated access assessments, and other relevant messages. [Occurrences:
    * Minimum: 0; Maximum: 8]
    */
  typedef uci::base::BoundedList<uci::type::AssociatedAccessAssessmentInfoType, uci::type::accessorType::associatedAccessAssessmentInfoType> AssociatedAccessAssessmentInfo;

  /** Each instance is a column in the access assessment table. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::AccessAssessmentType, uci::type::accessorType::accessAssessmentType> Assessment;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AccessAssessmentID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AccessAssessmentID.
    */
  virtual const uci::type::AccessAssessmentID_Type& getAccessAssessmentID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AccessAssessmentID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AccessAssessmentID.
    */
  virtual uci::type::AccessAssessmentID_Type& getAccessAssessmentID() = 0;

  /** Sets the complex content identified by AccessAssessmentID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AccessAssessmentID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentMDT& setAccessAssessmentID(const uci::type::AccessAssessmentID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by AssessmentName.
    *
    * @return A const reference to the accessor that provides access to the string identified by AssessmentName.
    */
  virtual const uci::type::VisibleString32Type& getAssessmentName() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by AssessmentName.
    *
    * @return A reference to the accessor that provides access to the string identified by AssessmentName.
    */
  virtual uci::type::VisibleString32Type& getAssessmentName() = 0;

  /** Sets the string identified by AssessmentName to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by AssessmentName.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentMDT& setAssessmentName(const uci::type::VisibleString32Type& value) = 0;

  /** Sets the string identified by AssessmentName to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentMDT& setAssessmentName(const std::string& value) = 0;

  /** Sets the string identified by AssessmentName to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentMDT& setAssessmentName(const char* value) = 0;

  /** Returns whether the Element identified by AssessmentName exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AssessmentName is enabled or not.
    */
  virtual bool hasAssessmentName() const = 0;

  /** Enables the Element identified by AssessmentName.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by AssessmentName.
    */
  virtual uci::type::VisibleString32Type& enableAssessmentName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AssessmentName.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentMDT& clearAssessmentName() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AccessAssessmentRequestID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AccessAssessmentRequestID.
    */
  virtual const uci::type::RequestID_Type& getAccessAssessmentRequestID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * AccessAssessmentRequestID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AccessAssessmentRequestID.
    */
  virtual uci::type::RequestID_Type& getAccessAssessmentRequestID() = 0;

  /** Sets the complex content identified by AccessAssessmentRequestID to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AccessAssessmentRequestID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentMDT& setAccessAssessmentRequestID(const uci::type::RequestID_Type& value) = 0;

  /** Returns whether the Element identified by AccessAssessmentRequestID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AccessAssessmentRequestID is enabled or not.
    */
  virtual bool hasAccessAssessmentRequestID() const = 0;

  /** Enables the Element identified by AccessAssessmentRequestID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AccessAssessmentRequestID.
    */
  virtual uci::type::RequestID_Type& enableAccessAssessmentRequestID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AccessAssessmentRequestID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentMDT& clearAccessAssessmentRequestID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AssessementSource.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AssessementSource.
    */
  virtual const uci::type::NotificationSourceType& getAssessementSource() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AssessementSource.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AssessementSource.
    */
  virtual uci::type::NotificationSourceType& getAssessementSource() = 0;

  /** Sets the complex content identified by AssessementSource to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AssessementSource.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentMDT& setAssessementSource(const uci::type::NotificationSourceType& value) = 0;

  /** Returns a const reference to the bounded list identified by AssociatedAccessAssessmentInfo.
    *
    * @return A const reference to the bounded list identified by AssociatedAccessAssessmentInfo.
    */
  virtual const uci::type::AccessAssessmentMDT::AssociatedAccessAssessmentInfo& getAssociatedAccessAssessmentInfo() const = 0;

  /** Returns a reference to the bounded list identified by AssociatedAccessAssessmentInfo.
    *
    * @return A reference to the bounded list identified by AssociatedAccessAssessmentInfo.
    */
  virtual uci::type::AccessAssessmentMDT::AssociatedAccessAssessmentInfo& getAssociatedAccessAssessmentInfo() = 0;

  /** Sets the bounded list identified by AssociatedAccessAssessmentInfo.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentMDT& setAssociatedAccessAssessmentInfo(const uci::type::AccessAssessmentMDT::AssociatedAccessAssessmentInfo& value) = 0;

  /** Returns a const reference to the bounded list identified by Assessment.
    *
    * @return A const reference to the bounded list identified by Assessment.
    */
  virtual const uci::type::AccessAssessmentMDT::Assessment& getAssessment() const = 0;

  /** Returns a reference to the bounded list identified by Assessment.
    *
    * @return A reference to the bounded list identified by Assessment.
    */
  virtual uci::type::AccessAssessmentMDT::Assessment& getAssessment() = 0;

  /** Sets the bounded list identified by Assessment.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentMDT& setAssessment(const uci::type::AccessAssessmentMDT::Assessment& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by CompletionTime.
    *
    * @return The value of the simple primitive data type identified by CompletionTime.
    */
  virtual uci::type::DateTimeTypeValue getCompletionTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CompletionTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentMDT& setCompletionTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by AssessmentNarrative.
    *
    * @return A const reference to the accessor that provides access to the string identified by AssessmentNarrative.
    */
  virtual const uci::type::VisibleString1024Type& getAssessmentNarrative() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by AssessmentNarrative.
    *
    * @return A reference to the accessor that provides access to the string identified by AssessmentNarrative.
    */
  virtual uci::type::VisibleString1024Type& getAssessmentNarrative() = 0;

  /** Sets the string identified by AssessmentNarrative to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by AssessmentNarrative.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentMDT& setAssessmentNarrative(const uci::type::VisibleString1024Type& value) = 0;

  /** Sets the string identified by AssessmentNarrative to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentMDT& setAssessmentNarrative(const std::string& value) = 0;

  /** Sets the string identified by AssessmentNarrative to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentMDT& setAssessmentNarrative(const char* value) = 0;

  /** Returns whether the Element identified by AssessmentNarrative exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AssessmentNarrative is enabled or not.
    */
  virtual bool hasAssessmentNarrative() const = 0;

  /** Enables the Element identified by AssessmentNarrative.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by AssessmentNarrative.
    */
  virtual uci::type::VisibleString1024Type& enableAssessmentNarrative(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AssessmentNarrative.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentMDT& clearAssessmentNarrative() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AccessAssessmentMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~AccessAssessmentMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AccessAssessmentMDT to copy from.
    */
  AccessAssessmentMDT(const AccessAssessmentMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AccessAssessmentMDT to the contents of the AccessAssessmentMDT on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The AccessAssessmentMDT on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this AccessAssessmentMDT.
    * @return A reference to this AccessAssessmentMDT.
    */
  AccessAssessmentMDT& operator=(const AccessAssessmentMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ACCESSASSESSMENTMDT_H

