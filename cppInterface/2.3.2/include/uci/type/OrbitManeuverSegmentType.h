/** @file OrbitManeuverSegmentType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ORBITMANEUVERSEGMENTTYPE_H
#define UCI_TYPE_ORBITMANEUVERSEGMENTTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "DateTimeType.h"
#include "OrbitManeuverSegmentID_Type.h"
#include "OrbitPlanManeuverTypeEnum.h"
#include "OrbitalKinematicsChoiceType.h"
#include "OrbitalManeuverDetailsBaseType.h"
#include "PathSegmentSourceEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class OrbitManeuverSegmentType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OrbitManeuverSegmentType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitManeuverSegmentType.
    */
  static UCI_EXPORT OrbitManeuverSegmentType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OrbitManeuverSegmentType initializing the data accessed by the new
    * OrbitManeuverSegmentType using the data accessed by the specified OrbitManeuverSegmentType (cloning).
    *
    * @param accessor The OrbitManeuverSegmentType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created OrbitManeuverSegmentType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitManeuverSegmentType.
    */
  static UCI_EXPORT OrbitManeuverSegmentType& create(const OrbitManeuverSegmentType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OrbitManeuverSegmentType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The OrbitManeuverSegmentType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OrbitManeuverSegmentType& accessor);

  /** Returns this accessor's type constant, i.e. orbitManeuverSegmentType.
    *
    * @return This accessor's type constant, i.e. orbitManeuverSegmentType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::orbitManeuverSegmentType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OrbitManeuverSegmentType.
    *
    * @return The version that was initialized from the uci:version attribute of OrbitManeuverSegmentType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OrbitManeuverSegmentType& accessor) = 0;

  /** Indicates a reason for the maneuver. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 11]
    */
  typedef uci::base::BoundedList<uci::type::OrbitPlanManeuverTypeEnum, uci::type::accessorType::orbitPlanManeuverTypeEnum> ManeuverType;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SegmentID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SegmentID.
    */
  virtual const uci::type::OrbitManeuverSegmentID_Type& getSegmentID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SegmentID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SegmentID.
    */
  virtual uci::type::OrbitManeuverSegmentID_Type& getSegmentID() = 0;

  /** Sets the complex content identified by SegmentID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SegmentID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitManeuverSegmentType& setSegmentID(const uci::type::OrbitManeuverSegmentID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by Source.
    *
    * @return A const reference to the value of the enumeration identified by Source.
    */
  virtual const uci::type::PathSegmentSourceEnum& getSource() const = 0;

  /** Returns a reference to the value of the enumeration identified by Source.
    *
    * @return A reference to the value of the enumeration identified by Source.
    */
  virtual uci::type::PathSegmentSourceEnum& getSource() = 0;

  /** Sets the value of the enumeration identified by Source.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitManeuverSegmentType& setSource(const uci::type::PathSegmentSourceEnum& value) = 0;

  /** Sets the value of the enumeration identified by Source.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitManeuverSegmentType& setSource(uci::type::PathSegmentSourceEnum::EnumerationItem value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by StartEpoch.
    *
    * @return The value of the simple primitive data type identified by StartEpoch.
    */
  virtual uci::type::DateTimeTypeValue getStartEpoch() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by StartEpoch.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitManeuverSegmentType& setStartEpoch(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EndPoint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EndPoint.
    */
  virtual const uci::type::OrbitalKinematicsChoiceType& getEndPoint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EndPoint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EndPoint.
    */
  virtual uci::type::OrbitalKinematicsChoiceType& getEndPoint() = 0;

  /** Sets the complex content identified by EndPoint to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EndPoint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitManeuverSegmentType& setEndPoint(const uci::type::OrbitalKinematicsChoiceType& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Locked.
    *
    * @return The value of the simple primitive data type identified by Locked.
    */
  virtual xs::Boolean getLocked() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Locked.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitManeuverSegmentType& setLocked(xs::Boolean value) = 0;

  /** Returns a const reference to the bounded list identified by ManeuverType.
    *
    * @return A const reference to the bounded list identified by ManeuverType.
    */
  virtual const uci::type::OrbitManeuverSegmentType::ManeuverType& getManeuverType() const = 0;

  /** Returns a reference to the bounded list identified by ManeuverType.
    *
    * @return A reference to the bounded list identified by ManeuverType.
    */
  virtual uci::type::OrbitManeuverSegmentType::ManeuverType& getManeuverType() = 0;

  /** Sets the bounded list identified by ManeuverType.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitManeuverSegmentType& setManeuverType(const uci::type::OrbitManeuverSegmentType::ManeuverType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DeltaVelocity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DeltaVelocity.
    */
  virtual const uci::type::OrbitalManeuverDetailsBaseType& getDeltaVelocity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DeltaVelocity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DeltaVelocity.
    */
  virtual uci::type::OrbitalManeuverDetailsBaseType& getDeltaVelocity() = 0;

  /** Sets the complex content identified by DeltaVelocity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DeltaVelocity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitManeuverSegmentType& setDeltaVelocity(const uci::type::OrbitalManeuverDetailsBaseType& value) = 0;

  /** Returns whether the Element identified by DeltaVelocity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DeltaVelocity is enabled or not.
    */
  virtual bool hasDeltaVelocity() const = 0;

  /** Enables the Element identified by DeltaVelocity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DeltaVelocity.
    */
  virtual uci::type::OrbitalManeuverDetailsBaseType& enableDeltaVelocity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DeltaVelocity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitManeuverSegmentType& clearDeltaVelocity() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Modified.
    *
    * @return The value of the simple primitive data type identified by Modified.
    */
  virtual xs::Boolean getModified() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Modified.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitManeuverSegmentType& setModified(xs::Boolean value) = 0;

  /** Returns whether the Element identified by Modified exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Modified is enabled or not.
    */
  virtual bool hasModified() const = 0;

  /** Clears (disabled) the Element identified by Modified.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitManeuverSegmentType& clearModified() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by NextSegmentID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by NextSegmentID.
    */
  virtual const uci::type::OrbitManeuverSegmentID_Type& getNextSegmentID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by NextSegmentID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by NextSegmentID.
    */
  virtual uci::type::OrbitManeuverSegmentID_Type& getNextSegmentID() = 0;

  /** Sets the complex content identified by NextSegmentID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by NextSegmentID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitManeuverSegmentType& setNextSegmentID(const uci::type::OrbitManeuverSegmentID_Type& value) = 0;

  /** Returns whether the Element identified by NextSegmentID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NextSegmentID is enabled or not.
    */
  virtual bool hasNextSegmentID() const = 0;

  /** Enables the Element identified by NextSegmentID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by NextSegmentID.
    */
  virtual uci::type::OrbitManeuverSegmentID_Type& enableNextSegmentID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by NextSegmentID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitManeuverSegmentType& clearNextSegmentID() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OrbitManeuverSegmentType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OrbitManeuverSegmentType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OrbitManeuverSegmentType to copy from.
    */
  OrbitManeuverSegmentType(const OrbitManeuverSegmentType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OrbitManeuverSegmentType to the contents of the
    * OrbitManeuverSegmentType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OrbitManeuverSegmentType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this OrbitManeuverSegmentType.
    * @return A reference to this OrbitManeuverSegmentType.
    */
  OrbitManeuverSegmentType& operator=(const OrbitManeuverSegmentType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ORBITMANEUVERSEGMENTTYPE_H

