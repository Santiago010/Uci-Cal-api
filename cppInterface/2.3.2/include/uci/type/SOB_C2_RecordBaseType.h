/** @file SOB_C2_RecordBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SOB_C2_RECORDBASETYPE_H
#define UCI_TYPE_SOB_C2_RECORDBASETYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/EOB_RecordID_Type.h"
#include "uci/type/FileMetadataID_Type.h"
#include "uci/type/OB_OperationalStatusEnum.h"
#include "uci/type/OB_SensorType.h"
#include "uci/type/OrderOfBattleC2_EmitterType.h"
#include "uci/type/OrderOfBattleTimestampsType.h"
#include "uci/type/Point2D_Type.h"
#include "uci/type/ProductMetadataID_Type.h"
#include "uci/type/SOB_C2_RecordID_Type.h"
#include "uci/type/SOB_C2_RecordRemoveInfoType.h"
#include "uci/type/SOB_SatelliteRecordID_Type.h"
#include "uci/type/SatelliteC2_IdentityType.h"
#include "uci/type/VisibleString512Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Contains information about the C2 node associated with a satellite record. */
class SOB_C2_RecordBaseType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SOB_C2_RecordBaseType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SOB_C2_RecordBaseType.
    */
  static UCI_EXPORT SOB_C2_RecordBaseType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SOB_C2_RecordBaseType initializing the data accessed by the new SOB_C2_RecordBaseType
    * using the data accessed by the specified SOB_C2_RecordBaseType (cloning).
    *
    * @param accessor The SOB_C2_RecordBaseType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SOB_C2_RecordBaseType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SOB_C2_RecordBaseType.
    */
  static UCI_EXPORT SOB_C2_RecordBaseType& create(const SOB_C2_RecordBaseType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SOB_C2_RecordBaseType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The SOB_C2_RecordBaseType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SOB_C2_RecordBaseType& accessor);

  /** Returns this accessor's type constant, i.e. sOB_C2_RecordBaseType.
    *
    * @return This accessor's type constant, i.e. sOB_C2_RecordBaseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sOB_C2_RecordBaseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SOB_C2_RecordBaseType.
    *
    * @return The version that was initialized from the uci:version attribute of SOB_C2_RecordBaseType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SOB_C2_RecordBaseType& accessor) = 0;

  /** Indicates the unique ID of the satellite that is being controlled by this C2 node. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SOB_SatelliteRecordID_Type, uci::type::accessorType::sOB_SatelliteRecordID_Type> ControlledSatelliteID;

  /** Indicates the unique ID of the lower ranking C2 node. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::SOB_C2_RecordID_Type, uci::type::accessorType::sOB_C2_RecordID_Type> SubordinateC2_ID;

  /** Degree to which the item is ready to perform the overall mission. Default value is 'OPR'. List size for this element
    * is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 24]
    */
  typedef uci::base::BoundedList<uci::type::OB_OperationalStatusEnum, uci::type::accessorType::oB_OperationalStatusEnum> OperationalStatus;

  /** A reference to metadata for a product associated with the record. For example, an image collected by a tactical
    * sensor. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type> ProductID;

  /** A reference to metadata for a file associated with the record. For example, a non-Product image or a CAD model of the
    * C2 node's physical characteristics. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> FileID;

  /** Indicates modes and parametrics of a an emitter associated with the record. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OrderOfBattleC2_EmitterType, uci::type::accessorType::orderOfBattleC2_EmitterType> Emitter;

  /** Indicates the sensors associated with the SOB record. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::OB_SensorType, uci::type::accessorType::oB_SensorType> Sensor;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SOB_C2_RecordID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SOB_C2_RecordID.
    */
  virtual const uci::type::SOB_C2_RecordID_Type& getSOB_C2_RecordID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SOB_C2_RecordID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SOB_C2_RecordID.
    */
  virtual uci::type::SOB_C2_RecordID_Type& getSOB_C2_RecordID() = 0;

  /** Sets the complex content identified by SOB_C2_RecordID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SOB_C2_RecordID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setSOB_C2_RecordID(const uci::type::SOB_C2_RecordID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EOB_RecordID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EOB_RecordID.
    */
  virtual const uci::type::EOB_RecordID_Type& getEOB_RecordID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EOB_RecordID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EOB_RecordID.
    */
  virtual uci::type::EOB_RecordID_Type& getEOB_RecordID() = 0;

  /** Sets the complex content identified by EOB_RecordID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EOB_RecordID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setEOB_RecordID(const uci::type::EOB_RecordID_Type& value) = 0;

  /** Returns whether the Element identified by EOB_RecordID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EOB_RecordID is enabled or not.
    */
  virtual bool hasEOB_RecordID() const = 0;

  /** Enables the Element identified by EOB_RecordID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EOB_RecordID.
    */
  virtual uci::type::EOB_RecordID_Type& enableEOB_RecordID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EOB_RecordID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& clearEOB_RecordID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual const uci::type::SatelliteC2_IdentityType& getIdentity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::SatelliteC2_IdentityType& getIdentity() = 0;

  /** Sets the complex content identified by Identity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Identity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setIdentity(const uci::type::SatelliteC2_IdentityType& value) = 0;

  /** Returns whether the Element identified by Identity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Identity is enabled or not.
    */
  virtual bool hasIdentity() const = 0;

  /** Enables the Element identified by Identity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::SatelliteC2_IdentityType& enableIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Identity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& clearIdentity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Location.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Location.
    */
  virtual const uci::type::Point2D_Type& getLocation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Location.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Location.
    */
  virtual uci::type::Point2D_Type& getLocation() = 0;

  /** Sets the complex content identified by Location to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Location.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setLocation(const uci::type::Point2D_Type& value) = 0;

  /** Returns whether the Element identified by Location exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Location is enabled or not.
    */
  virtual bool hasLocation() const = 0;

  /** Enables the Element identified by Location.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Location.
    */
  virtual uci::type::Point2D_Type& enableLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Location.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& clearLocation() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Timestamps.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Timestamps.
    */
  virtual const uci::type::OrderOfBattleTimestampsType& getTimestamps() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Timestamps.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Timestamps.
    */
  virtual uci::type::OrderOfBattleTimestampsType& getTimestamps() = 0;

  /** Sets the complex content identified by Timestamps to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Timestamps.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setTimestamps(const uci::type::OrderOfBattleTimestampsType& value) = 0;

  /** Returns whether the Element identified by Timestamps exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Timestamps is enabled or not.
    */
  virtual bool hasTimestamps() const = 0;

  /** Enables the Element identified by Timestamps.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Timestamps.
    */
  virtual uci::type::OrderOfBattleTimestampsType& enableTimestamps(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Timestamps.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& clearTimestamps() = 0;

  /** Returns a const reference to the bounded list identified by ControlledSatelliteID.
    *
    * @return A const reference to the bounded list identified by ControlledSatelliteID.
    */
  virtual const uci::type::SOB_C2_RecordBaseType::ControlledSatelliteID& getControlledSatelliteID() const = 0;

  /** Returns a reference to the bounded list identified by ControlledSatelliteID.
    *
    * @return A reference to the bounded list identified by ControlledSatelliteID.
    */
  virtual uci::type::SOB_C2_RecordBaseType::ControlledSatelliteID& getControlledSatelliteID() = 0;

  /** Sets the bounded list identified by ControlledSatelliteID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setControlledSatelliteID(const uci::type::SOB_C2_RecordBaseType::ControlledSatelliteID& value) = 0;

  /** Returns a const reference to the bounded list identified by SubordinateC2_ID.
    *
    * @return A const reference to the bounded list identified by SubordinateC2_ID.
    */
  virtual const uci::type::SOB_C2_RecordBaseType::SubordinateC2_ID& getSubordinateC2_ID() const = 0;

  /** Returns a reference to the bounded list identified by SubordinateC2_ID.
    *
    * @return A reference to the bounded list identified by SubordinateC2_ID.
    */
  virtual uci::type::SOB_C2_RecordBaseType::SubordinateC2_ID& getSubordinateC2_ID() = 0;

  /** Sets the bounded list identified by SubordinateC2_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setSubordinateC2_ID(const uci::type::SOB_C2_RecordBaseType::SubordinateC2_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by OperationalStatus.
    *
    * @return A const reference to the bounded list identified by OperationalStatus.
    */
  virtual const uci::type::SOB_C2_RecordBaseType::OperationalStatus& getOperationalStatus() const = 0;

  /** Returns a reference to the bounded list identified by OperationalStatus.
    *
    * @return A reference to the bounded list identified by OperationalStatus.
    */
  virtual uci::type::SOB_C2_RecordBaseType::OperationalStatus& getOperationalStatus() = 0;

  /** Sets the bounded list identified by OperationalStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setOperationalStatus(const uci::type::SOB_C2_RecordBaseType::OperationalStatus& value) = 0;

  /** Returns a const reference to the bounded list identified by ProductID.
    *
    * @return A const reference to the bounded list identified by ProductID.
    */
  virtual const uci::type::SOB_C2_RecordBaseType::ProductID& getProductID() const = 0;

  /** Returns a reference to the bounded list identified by ProductID.
    *
    * @return A reference to the bounded list identified by ProductID.
    */
  virtual uci::type::SOB_C2_RecordBaseType::ProductID& getProductID() = 0;

  /** Sets the bounded list identified by ProductID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setProductID(const uci::type::SOB_C2_RecordBaseType::ProductID& value) = 0;

  /** Returns a const reference to the bounded list identified by FileID.
    *
    * @return A const reference to the bounded list identified by FileID.
    */
  virtual const uci::type::SOB_C2_RecordBaseType::FileID& getFileID() const = 0;

  /** Returns a reference to the bounded list identified by FileID.
    *
    * @return A reference to the bounded list identified by FileID.
    */
  virtual uci::type::SOB_C2_RecordBaseType::FileID& getFileID() = 0;

  /** Sets the bounded list identified by FileID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setFileID(const uci::type::SOB_C2_RecordBaseType::FileID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RemoveInfo.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RemoveInfo.
    */
  virtual const uci::type::SOB_C2_RecordRemoveInfoType& getRemoveInfo() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RemoveInfo.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RemoveInfo.
    */
  virtual uci::type::SOB_C2_RecordRemoveInfoType& getRemoveInfo() = 0;

  /** Sets the complex content identified by RemoveInfo to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RemoveInfo.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setRemoveInfo(const uci::type::SOB_C2_RecordRemoveInfoType& value) = 0;

  /** Returns whether the Element identified by RemoveInfo exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RemoveInfo is enabled or not.
    */
  virtual bool hasRemoveInfo() const = 0;

  /** Enables the Element identified by RemoveInfo.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RemoveInfo.
    */
  virtual uci::type::SOB_C2_RecordRemoveInfoType& enableRemoveInfo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RemoveInfo.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& clearRemoveInfo() = 0;

  /** Returns a const reference to the bounded list identified by Emitter.
    *
    * @return A const reference to the bounded list identified by Emitter.
    */
  virtual const uci::type::SOB_C2_RecordBaseType::Emitter& getEmitter() const = 0;

  /** Returns a reference to the bounded list identified by Emitter.
    *
    * @return A reference to the bounded list identified by Emitter.
    */
  virtual uci::type::SOB_C2_RecordBaseType::Emitter& getEmitter() = 0;

  /** Sets the bounded list identified by Emitter.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setEmitter(const uci::type::SOB_C2_RecordBaseType::Emitter& value) = 0;

  /** Returns a const reference to the bounded list identified by Sensor.
    *
    * @return A const reference to the bounded list identified by Sensor.
    */
  virtual const uci::type::SOB_C2_RecordBaseType::Sensor& getSensor() const = 0;

  /** Returns a reference to the bounded list identified by Sensor.
    *
    * @return A reference to the bounded list identified by Sensor.
    */
  virtual uci::type::SOB_C2_RecordBaseType::Sensor& getSensor() = 0;

  /** Sets the bounded list identified by Sensor.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setSensor(const uci::type::SOB_C2_RecordBaseType::Sensor& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by RemarksText.
    *
    * @return A const reference to the accessor that provides access to the string identified by RemarksText.
    */
  virtual const uci::type::VisibleString512Type& getRemarksText() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by RemarksText.
    *
    * @return A reference to the accessor that provides access to the string identified by RemarksText.
    */
  virtual uci::type::VisibleString512Type& getRemarksText() = 0;

  /** Sets the string identified by RemarksText to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by RemarksText.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setRemarksText(const uci::type::VisibleString512Type& value) = 0;

  /** Sets the string identified by RemarksText to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setRemarksText(const std::string& value) = 0;

  /** Sets the string identified by RemarksText to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& setRemarksText(const char* value) = 0;

  /** Returns whether the Element identified by RemarksText exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RemarksText is enabled or not.
    */
  virtual bool hasRemarksText() const = 0;

  /** Enables the Element identified by RemarksText.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by RemarksText.
    */
  virtual uci::type::VisibleString512Type& enableRemarksText(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RemarksText.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_C2_RecordBaseType& clearRemarksText() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SOB_C2_RecordBaseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SOB_C2_RecordBaseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SOB_C2_RecordBaseType to copy from.
    */
  SOB_C2_RecordBaseType(const SOB_C2_RecordBaseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SOB_C2_RecordBaseType to the contents of the SOB_C2_RecordBaseType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SOB_C2_RecordBaseType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this SOB_C2_RecordBaseType.
    * @return A reference to this SOB_C2_RecordBaseType.
    */
  SOB_C2_RecordBaseType& operator=(const SOB_C2_RecordBaseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SOB_C2_RECORDBASETYPE_H

