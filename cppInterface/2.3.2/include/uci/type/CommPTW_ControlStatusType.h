/** @file CommPTW_ControlStatusType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMPTW_CONTROLSTATUSTYPE_H
#define UCI_TYPE_COMMPTW_CONTROLSTATUSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/BeamPointingReferenceType.h"
#include "uci/type/PointingControlModeStatusEnum.h"
#include "uci/type/PolarizationType.h"
#include "uci/type/PositionModeEnum.h"
#include "uci/type/TransceiverType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class CommPTW_ControlStatusType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CommPTW_ControlStatusType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommPTW_ControlStatusType.
    */
  static UCI_EXPORT CommPTW_ControlStatusType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CommPTW_ControlStatusType initializing the data accessed by the new
    * CommPTW_ControlStatusType using the data accessed by the specified CommPTW_ControlStatusType (cloning).
    *
    * @param accessor The CommPTW_ControlStatusType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created CommPTW_ControlStatusType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommPTW_ControlStatusType.
    */
  static UCI_EXPORT CommPTW_ControlStatusType& create(const CommPTW_ControlStatusType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CommPTW_ControlStatusType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The CommPTW_ControlStatusType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CommPTW_ControlStatusType& accessor);

  /** Returns this accessor's type constant, i.e. commPTW_ControlStatusType.
    *
    * @return This accessor's type constant, i.e. commPTW_ControlStatusType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commPTW_ControlStatusType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CommPTW_ControlStatusType.
    *
    * @return The version that was initialized from the uci:version attribute of CommPTW_ControlStatusType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CommPTW_ControlStatusType& accessor) = 0;

  /** Returns a const reference to the value of the enumeration identified by PositionMode.
    *
    * @return A const reference to the value of the enumeration identified by PositionMode.
    */
  virtual const uci::type::PositionModeEnum& getPositionMode() const = 0;

  /** Returns a reference to the value of the enumeration identified by PositionMode.
    *
    * @return A reference to the value of the enumeration identified by PositionMode.
    */
  virtual uci::type::PositionModeEnum& getPositionMode() = 0;

  /** Sets the value of the enumeration identified by PositionMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPTW_ControlStatusType& setPositionMode(const uci::type::PositionModeEnum& value) = 0;

  /** Sets the value of the enumeration identified by PositionMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPTW_ControlStatusType& setPositionMode(uci::type::PositionModeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by PositionMode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PositionMode is enabled or not.
    */
  virtual bool hasPositionMode() const = 0;

  /** Enables the Element identified by PositionMode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by PositionMode.
    */
  virtual uci::type::PositionModeEnum& enablePositionMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PositionMode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPTW_ControlStatusType& clearPositionMode() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Transceiver.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Transceiver.
    */
  virtual const uci::type::TransceiverType& getTransceiver() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Transceiver.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Transceiver.
    */
  virtual uci::type::TransceiverType& getTransceiver() = 0;

  /** Sets the complex content identified by Transceiver to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Transceiver.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPTW_ControlStatusType& setTransceiver(const uci::type::TransceiverType& value) = 0;

  /** Returns whether the Element identified by Transceiver exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Transceiver is enabled or not.
    */
  virtual bool hasTransceiver() const = 0;

  /** Enables the Element identified by Transceiver.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Transceiver.
    */
  virtual uci::type::TransceiverType& enableTransceiver(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Transceiver.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPTW_ControlStatusType& clearTransceiver() = 0;

  /** Returns a const reference to the value of the enumeration identified by PointingControlModeStatus.
    *
    * @return A const reference to the value of the enumeration identified by PointingControlModeStatus.
    */
  virtual const uci::type::PointingControlModeStatusEnum& getPointingControlModeStatus() const = 0;

  /** Returns a reference to the value of the enumeration identified by PointingControlModeStatus.
    *
    * @return A reference to the value of the enumeration identified by PointingControlModeStatus.
    */
  virtual uci::type::PointingControlModeStatusEnum& getPointingControlModeStatus() = 0;

  /** Sets the value of the enumeration identified by PointingControlModeStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPTW_ControlStatusType& setPointingControlModeStatus(const uci::type::PointingControlModeStatusEnum& value) = 0;

  /** Sets the value of the enumeration identified by PointingControlModeStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPTW_ControlStatusType& setPointingControlModeStatus(uci::type::PointingControlModeStatusEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by PointingControlModeStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PointingControlModeStatus is enabled or not.
    */
  virtual bool hasPointingControlModeStatus() const = 0;

  /** Enables the Element identified by PointingControlModeStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by PointingControlModeStatus.
    */
  virtual uci::type::PointingControlModeStatusEnum& enablePointingControlModeStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PointingControlModeStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPTW_ControlStatusType& clearPointingControlModeStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by BeamPointing.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by BeamPointing.
    */
  virtual const uci::type::BeamPointingReferenceType& getBeamPointing() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by BeamPointing.
    *
    * @return A reference to the accessor that provides access to the complex content identified by BeamPointing.
    */
  virtual uci::type::BeamPointingReferenceType& getBeamPointing() = 0;

  /** Sets the complex content identified by BeamPointing to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by BeamPointing.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPTW_ControlStatusType& setBeamPointing(const uci::type::BeamPointingReferenceType& value) = 0;

  /** Returns whether the Element identified by BeamPointing exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BeamPointing is enabled or not.
    */
  virtual bool hasBeamPointing() const = 0;

  /** Enables the Element identified by BeamPointing.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by BeamPointing.
    */
  virtual uci::type::BeamPointingReferenceType& enableBeamPointing(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by BeamPointing.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPTW_ControlStatusType& clearBeamPointing() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Polarization.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Polarization.
    */
  virtual const uci::type::PolarizationType& getPolarization() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Polarization.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Polarization.
    */
  virtual uci::type::PolarizationType& getPolarization() = 0;

  /** Sets the complex content identified by Polarization to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Polarization.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPTW_ControlStatusType& setPolarization(const uci::type::PolarizationType& value) = 0;

  /** Returns whether the Element identified by Polarization exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Polarization is enabled or not.
    */
  virtual bool hasPolarization() const = 0;

  /** Enables the Element identified by Polarization.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Polarization.
    */
  virtual uci::type::PolarizationType& enablePolarization(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Polarization.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommPTW_ControlStatusType& clearPolarization() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CommPTW_ControlStatusType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommPTW_ControlStatusType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommPTW_ControlStatusType to copy from.
    */
  CommPTW_ControlStatusType(const CommPTW_ControlStatusType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CommPTW_ControlStatusType to the contents of the
    * CommPTW_ControlStatusType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The CommPTW_ControlStatusType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this CommPTW_ControlStatusType.
    * @return A reference to this CommPTW_ControlStatusType.
    */
  CommPTW_ControlStatusType& operator=(const CommPTW_ControlStatusType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMMPTW_CONTROLSTATUSTYPE_H

