/** @file ConfigurationParameterType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CONFIGURATIONPARAMETERTYPE_H
#define UCI_TYPE_CONFIGURATIONPARAMETERTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/export.h"
#include "ConfigurationParameterValueRestrictionsType.h"
#include "EmptyType.h"
#include "MessageElementDataTypeEnum.h"
#include "MissionEnvironmentObjectClassType.h"
#include "ParameterID_Type.h"
#include "VisibleString256Type.h"
#include "VisibleString32Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ConfigurationParameterType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ConfigurationParameterType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ConfigurationParameterType.
    */
  static UCI_EXPORT ConfigurationParameterType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ConfigurationParameterType initializing the data accessed by the new
    * ConfigurationParameterType using the data accessed by the specified ConfigurationParameterType (cloning).
    *
    * @param accessor The ConfigurationParameterType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created ConfigurationParameterType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ConfigurationParameterType.
    */
  static UCI_EXPORT ConfigurationParameterType& create(const ConfigurationParameterType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ConfigurationParameterType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The ConfigurationParameterType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ConfigurationParameterType& accessor);

  /** Returns this accessor's type constant, i.e. configurationParameterType.
    *
    * @return This accessor's type constant, i.e. configurationParameterType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::configurationParameterType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ConfigurationParameterType.
    *
    * @return The version that was initialized from the uci:version attribute of ConfigurationParameterType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ConfigurationParameterType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ParameterID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ParameterID.
    */
  virtual const uci::type::ParameterID_Type& getParameterID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ParameterID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ParameterID.
    */
  virtual uci::type::ParameterID_Type& getParameterID() = 0;

  /** Sets the complex content identified by ParameterID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ParameterID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setParameterID(const uci::type::ParameterID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Name.
    *
    * @return A const reference to the accessor that provides access to the string identified by Name.
    */
  virtual const uci::type::VisibleString256Type& getName() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Name.
    *
    * @return A reference to the accessor that provides access to the string identified by Name.
    */
  virtual uci::type::VisibleString256Type& getName() = 0;

  /** Sets the string identified by Name to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Name.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setName(const uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by Name to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setName(const std::string& value) = 0;

  /** Sets the string identified by Name to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setName(const char* value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Value.
    *
    * @return A const reference to the accessor that provides access to the string identified by Value.
    */
  virtual const uci::type::VisibleString256Type& getValue() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Value.
    *
    * @return A reference to the accessor that provides access to the string identified by Value.
    */
  virtual uci::type::VisibleString256Type& getValue() = 0;

  /** Sets the string identified by Value to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Value.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setValue(const uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by Value to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setValue(const std::string& value) = 0;

  /** Sets the string identified by Value to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setValue(const char* value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by DefaultValue.
    *
    * @return A const reference to the accessor that provides access to the string identified by DefaultValue.
    */
  virtual const uci::type::VisibleString256Type& getDefaultValue() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by DefaultValue.
    *
    * @return A reference to the accessor that provides access to the string identified by DefaultValue.
    */
  virtual uci::type::VisibleString256Type& getDefaultValue() = 0;

  /** Sets the string identified by DefaultValue to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by DefaultValue.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setDefaultValue(const uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by DefaultValue to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setDefaultValue(const std::string& value) = 0;

  /** Sets the string identified by DefaultValue to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setDefaultValue(const char* value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by UserModifiable.
    *
    * @return The value of the simple primitive data type identified by UserModifiable.
    */
  virtual xs::Boolean getUserModifiable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by UserModifiable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setUserModifiable(xs::Boolean value) = 0;

  /** Returns a const reference to the value of the enumeration identified by Type.
    *
    * @return A const reference to the value of the enumeration identified by Type.
    */
  virtual const uci::type::MessageElementDataTypeEnum& getType() const = 0;

  /** Returns a reference to the value of the enumeration identified by Type.
    *
    * @return A reference to the value of the enumeration identified by Type.
    */
  virtual uci::type::MessageElementDataTypeEnum& getType() = 0;

  /** Sets the value of the enumeration identified by Type.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setType(const uci::type::MessageElementDataTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by Type.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setType(uci::type::MessageElementDataTypeEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Units.
    *
    * @return A const reference to the accessor that provides access to the string identified by Units.
    */
  virtual const uci::type::VisibleString32Type& getUnits() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Units.
    *
    * @return A reference to the accessor that provides access to the string identified by Units.
    */
  virtual uci::type::VisibleString32Type& getUnits() = 0;

  /** Sets the string identified by Units to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Units.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setUnits(const uci::type::VisibleString32Type& value) = 0;

  /** Sets the string identified by Units to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setUnits(const std::string& value) = 0;

  /** Sets the string identified by Units to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setUnits(const char* value) = 0;

  /** Returns whether the Element identified by Units exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Units is enabled or not.
    */
  virtual bool hasUnits() const = 0;

  /** Enables the Element identified by Units.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Units.
    */
  virtual uci::type::VisibleString32Type& enableUnits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Units.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& clearUnits() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * TypeSpecificRestrictions.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      TypeSpecificRestrictions.
    */
  virtual const uci::type::ConfigurationParameterValueRestrictionsType& getTypeSpecificRestrictions() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * TypeSpecificRestrictions.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      TypeSpecificRestrictions.
    */
  virtual uci::type::ConfigurationParameterValueRestrictionsType& getTypeSpecificRestrictions() = 0;

  /** Sets the complex content identified by TypeSpecificRestrictions to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TypeSpecificRestrictions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setTypeSpecificRestrictions(const uci::type::ConfigurationParameterValueRestrictionsType& value) = 0;

  /** Returns whether the Element identified by TypeSpecificRestrictions exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TypeSpecificRestrictions is enabled or not.
    */
  virtual bool hasTypeSpecificRestrictions() const = 0;

  /** Enables the Element identified by TypeSpecificRestrictions.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      TypeSpecificRestrictions.
    */
  virtual uci::type::ConfigurationParameterValueRestrictionsType& enableTypeSpecificRestrictions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TypeSpecificRestrictions.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& clearTypeSpecificRestrictions() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ObjectClass.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ObjectClass.
    */
  virtual const uci::type::MissionEnvironmentObjectClassType& getObjectClass() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ObjectClass.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ObjectClass.
    */
  virtual uci::type::MissionEnvironmentObjectClassType& getObjectClass() = 0;

  /** Sets the complex content identified by ObjectClass to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ObjectClass.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setObjectClass(const uci::type::MissionEnvironmentObjectClassType& value) = 0;

  /** Returns whether the Element identified by ObjectClass exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ObjectClass is enabled or not.
    */
  virtual bool hasObjectClass() const = 0;

  /** Enables the Element identified by ObjectClass.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ObjectClass.
    */
  virtual uci::type::MissionEnvironmentObjectClassType& enableObjectClass(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ObjectClass.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& clearObjectClass() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by MissionEnvironment.
    *
    * @return A const reference to the accessor that provides access to the string identified by MissionEnvironment.
    */
  virtual const uci::type::EmptyType& getMissionEnvironment() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by MissionEnvironment.
    *
    * @return A reference to the accessor that provides access to the string identified by MissionEnvironment.
    */
  virtual uci::type::EmptyType& getMissionEnvironment() = 0;

  /** Sets the string identified by MissionEnvironment to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by MissionEnvironment.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setMissionEnvironment(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by MissionEnvironment to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setMissionEnvironment(const std::string& value) = 0;

  /** Sets the string identified by MissionEnvironment to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& setMissionEnvironment(const char* value) = 0;

  /** Returns whether the Element identified by MissionEnvironment exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MissionEnvironment is enabled or not.
    */
  virtual bool hasMissionEnvironment() const = 0;

  /** Enables the Element identified by MissionEnvironment.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by MissionEnvironment.
    */
  virtual uci::type::EmptyType& enableMissionEnvironment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MissionEnvironment.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConfigurationParameterType& clearMissionEnvironment() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ConfigurationParameterType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ConfigurationParameterType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ConfigurationParameterType to copy from.
    */
  ConfigurationParameterType(const ConfigurationParameterType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ConfigurationParameterType to the contents of the
    * ConfigurationParameterType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ConfigurationParameterType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this ConfigurationParameterType.
    * @return A reference to this ConfigurationParameterType.
    */
  ConfigurationParameterType& operator=(const ConfigurationParameterType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_CONFIGURATIONPARAMETERTYPE_H

