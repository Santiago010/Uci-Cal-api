/** @file SubCapabilityDetailsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SUBCAPABILITYDETAILSTYPE_H
#define UCI_TYPE_SUBCAPABILITYDETAILSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ESM_LocationType.h"
#include "uci/type/ESM_SubcapabilityGeolocationType.h"
#include "uci/type/ESM_TargetType.h"
#include "uci/type/FrequencyRangeType.h"
#include "uci/type/PulseDataCollectCommandType.h"
#include "uci/type/SelectAntennaType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SubCapabilityDetailsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SubCapabilityDetailsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SubCapabilityDetailsType.
    */
  static UCI_EXPORT SubCapabilityDetailsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SubCapabilityDetailsType initializing the data accessed by the new
    * SubCapabilityDetailsType using the data accessed by the specified SubCapabilityDetailsType (cloning).
    *
    * @param accessor The SubCapabilityDetailsType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created SubCapabilityDetailsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SubCapabilityDetailsType.
    */
  static UCI_EXPORT SubCapabilityDetailsType& create(const SubCapabilityDetailsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SubCapabilityDetailsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The SubCapabilityDetailsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SubCapabilityDetailsType& accessor);

  /** Returns this accessor's type constant, i.e. subCapabilityDetailsType.
    *
    * @return This accessor's type constant, i.e. subCapabilityDetailsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::subCapabilityDetailsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SubCapabilityDetailsType.
    *
    * @return The version that was initialized from the uci:version attribute of SubCapabilityDetailsType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SubCapabilityDetailsType& accessor) = 0;

  /** Indicates a specific frequency to be used for the Acquisition command. If omitted, the command defers to the active
    * MDF. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FrequencyRangeType, uci::type::accessorType::frequencyRangeType> FrequencyRestriction;

  /** Indicates the source of or explicit values for emitter characteristics of the target. If omitted, the emitter
    * characteristics should be determined from the active MDF. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ESM_TargetType, uci::type::accessorType::eSM_TargetType> TargetEmitterData;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SelectAntenna.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SelectAntenna.
    */
  virtual const uci::type::SelectAntennaType& getSelectAntenna() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SelectAntenna.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SelectAntenna.
    */
  virtual uci::type::SelectAntennaType& getSelectAntenna() = 0;

  /** Sets the complex content identified by SelectAntenna to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SelectAntenna.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubCapabilityDetailsType& setSelectAntenna(const uci::type::SelectAntennaType& value) = 0;

  /** Returns whether the Element identified by SelectAntenna exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SelectAntenna is enabled or not.
    */
  virtual bool hasSelectAntenna() const = 0;

  /** Enables the Element identified by SelectAntenna.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SelectAntenna.
    */
  virtual uci::type::SelectAntennaType& enableSelectAntenna(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SelectAntenna.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubCapabilityDetailsType& clearSelectAntenna() = 0;

  /** Returns a const reference to the bounded list identified by FrequencyRestriction.
    *
    * @return A const reference to the bounded list identified by FrequencyRestriction.
    */
  virtual const uci::type::SubCapabilityDetailsType::FrequencyRestriction& getFrequencyRestriction() const = 0;

  /** Returns a reference to the bounded list identified by FrequencyRestriction.
    *
    * @return A reference to the bounded list identified by FrequencyRestriction.
    */
  virtual uci::type::SubCapabilityDetailsType::FrequencyRestriction& getFrequencyRestriction() = 0;

  /** Sets the bounded list identified by FrequencyRestriction.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubCapabilityDetailsType& setFrequencyRestriction(const uci::type::SubCapabilityDetailsType::FrequencyRestriction& value) = 0;

  /** Returns a const reference to the bounded list identified by TargetEmitterData.
    *
    * @return A const reference to the bounded list identified by TargetEmitterData.
    */
  virtual const uci::type::SubCapabilityDetailsType::TargetEmitterData& getTargetEmitterData() const = 0;

  /** Returns a reference to the bounded list identified by TargetEmitterData.
    *
    * @return A reference to the bounded list identified by TargetEmitterData.
    */
  virtual uci::type::SubCapabilityDetailsType::TargetEmitterData& getTargetEmitterData() = 0;

  /** Sets the bounded list identified by TargetEmitterData.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubCapabilityDetailsType& setTargetEmitterData(const uci::type::SubCapabilityDetailsType::TargetEmitterData& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ESM_Location.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ESM_Location.
    */
  virtual const uci::type::ESM_LocationType& getESM_Location() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ESM_Location.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ESM_Location.
    */
  virtual uci::type::ESM_LocationType& getESM_Location() = 0;

  /** Sets the complex content identified by ESM_Location to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ESM_Location.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubCapabilityDetailsType& setESM_Location(const uci::type::ESM_LocationType& value) = 0;

  /** Returns whether the Element identified by ESM_Location exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ESM_Location is enabled or not.
    */
  virtual bool hasESM_Location() const = 0;

  /** Enables the Element identified by ESM_Location.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ESM_Location.
    */
  virtual uci::type::ESM_LocationType& enableESM_Location(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ESM_Location.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubCapabilityDetailsType& clearESM_Location() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * PulseDataCollection.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      PulseDataCollection.
    */
  virtual const uci::type::PulseDataCollectCommandType& getPulseDataCollection() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PulseDataCollection.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PulseDataCollection.
    */
  virtual uci::type::PulseDataCollectCommandType& getPulseDataCollection() = 0;

  /** Sets the complex content identified by PulseDataCollection to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PulseDataCollection.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubCapabilityDetailsType& setPulseDataCollection(const uci::type::PulseDataCollectCommandType& value) = 0;

  /** Returns whether the Element identified by PulseDataCollection exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseDataCollection is enabled or not.
    */
  virtual bool hasPulseDataCollection() const = 0;

  /** Enables the Element identified by PulseDataCollection.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PulseDataCollection.
    */
  virtual uci::type::PulseDataCollectCommandType& enablePulseDataCollection(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PulseDataCollection.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubCapabilityDetailsType& clearPulseDataCollection() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Geolocation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Geolocation.
    */
  virtual const uci::type::ESM_SubcapabilityGeolocationType& getGeolocation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Geolocation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Geolocation.
    */
  virtual uci::type::ESM_SubcapabilityGeolocationType& getGeolocation() = 0;

  /** Sets the complex content identified by Geolocation to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Geolocation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubCapabilityDetailsType& setGeolocation(const uci::type::ESM_SubcapabilityGeolocationType& value) = 0;

  /** Returns whether the Element identified by Geolocation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Geolocation is enabled or not.
    */
  virtual bool hasGeolocation() const = 0;

  /** Enables the Element identified by Geolocation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Geolocation.
    */
  virtual uci::type::ESM_SubcapabilityGeolocationType& enableGeolocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Geolocation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubCapabilityDetailsType& clearGeolocation() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SubCapabilityDetailsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SubCapabilityDetailsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SubCapabilityDetailsType to copy from.
    */
  SubCapabilityDetailsType(const SubCapabilityDetailsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SubCapabilityDetailsType to the contents of the
    * SubCapabilityDetailsType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SubCapabilityDetailsType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this SubCapabilityDetailsType.
    * @return A reference to this SubCapabilityDetailsType.
    */
  SubCapabilityDetailsType& operator=(const SubCapabilityDetailsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SUBCAPABILITYDETAILSTYPE_H

