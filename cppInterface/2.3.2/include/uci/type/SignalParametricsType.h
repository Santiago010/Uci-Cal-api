/** @file SignalParametricsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SIGNALPARAMETRICSTYPE_H
#define UCI_TYPE_SIGNALPARAMETRICSTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/DoubleAccessor.h"
#include "../base/UnsignedIntAccessor.h"
#include "../base/UnsignedShortAccessor.h"
#include "../base/export.h"
#include "AnglePositiveType.h"
#include "DecibelType.h"
#include "DoubleNonNegativeType.h"
#include "DurationType.h"
#include "FrequencyDataType.h"
#include "FrequencyModulationVariationEnum.h"
#include "FrequencyType.h"
#include "LongBaselineInterferometerInfoType.h"
#include "ModulationOnPulseDataType.h"
#include "PRI_PW_Type.h"
#include "PolarizationType.h"
#include "ScanDataType.h"
#include "SignalAmplitudeType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The parametrics data for the Signal, including frequencies, PRIs, pulse width data, etc. */
class SignalParametricsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SignalParametricsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SignalParametricsType.
    */
  static UCI_EXPORT SignalParametricsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SignalParametricsType initializing the data accessed by the new SignalParametricsType
    * using the data accessed by the specified SignalParametricsType (cloning).
    *
    * @param accessor The SignalParametricsType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SignalParametricsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SignalParametricsType.
    */
  static UCI_EXPORT SignalParametricsType& create(const SignalParametricsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SignalParametricsType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The SignalParametricsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SignalParametricsType& accessor);

  /** Returns this accessor's type constant, i.e. signalParametricsType.
    *
    * @return This accessor's type constant, i.e. signalParametricsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::signalParametricsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SignalParametricsType.
    *
    * @return The version that was initialized from the uci:version attribute of SignalParametricsType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.001.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SignalParametricsType& accessor) = 0;

  /** Indicates the measured frequency data for the Signal. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::FrequencyDataType, uci::type::accessorType::frequencyDataType> Frequency;

  /** Indicates Pulse Repetition Interval (PRI) and Pulse Width (PW) data for the Signal. When both are given, they are a
    * "paired" set of PRI and PW. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PRI_PW_Type, uci::type::accessorType::pRI_PW_Type> PRI_PW;

  /** Returns a const reference to the bounded list identified by Frequency.
    *
    * @return A const reference to the bounded list identified by Frequency.
    */
  virtual const uci::type::SignalParametricsType::Frequency& getFrequency() const = 0;

  /** Returns a reference to the bounded list identified by Frequency.
    *
    * @return A reference to the bounded list identified by Frequency.
    */
  virtual uci::type::SignalParametricsType::Frequency& getFrequency() = 0;

  /** Sets the bounded list identified by Frequency.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setFrequency(const uci::type::SignalParametricsType::Frequency& value) = 0;

  /** Returns a const reference to the bounded list identified by PRI_PW.
    *
    * @return A const reference to the bounded list identified by PRI_PW.
    */
  virtual const uci::type::SignalParametricsType::PRI_PW& getPRI_PW() const = 0;

  /** Returns a reference to the bounded list identified by PRI_PW.
    *
    * @return A reference to the bounded list identified by PRI_PW.
    */
  virtual uci::type::SignalParametricsType::PRI_PW& getPRI_PW() = 0;

  /** Sets the bounded list identified by PRI_PW.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setPRI_PW(const uci::type::SignalParametricsType::PRI_PW& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Amplitude.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Amplitude.
    */
  virtual const uci::type::SignalAmplitudeType& getAmplitude() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Amplitude.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Amplitude.
    */
  virtual uci::type::SignalAmplitudeType& getAmplitude() = 0;

  /** Sets the complex content identified by Amplitude to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Amplitude.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setAmplitude(const uci::type::SignalAmplitudeType& value) = 0;

  /** Returns whether the Element identified by Amplitude exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Amplitude is enabled or not.
    */
  virtual bool hasAmplitude() const = 0;

  /** Enables the Element identified by Amplitude.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Amplitude.
    */
  virtual uci::type::SignalAmplitudeType& enableAmplitude(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Amplitude.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearAmplitude() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Polarization.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Polarization.
    */
  virtual const uci::type::PolarizationType& getPolarization() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Polarization.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Polarization.
    */
  virtual uci::type::PolarizationType& getPolarization() = 0;

  /** Sets the complex content identified by Polarization to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Polarization.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setPolarization(const uci::type::PolarizationType& value) = 0;

  /** Returns whether the Element identified by Polarization exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Polarization is enabled or not.
    */
  virtual bool hasPolarization() const = 0;

  /** Enables the Element identified by Polarization.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Polarization.
    */
  virtual uci::type::PolarizationType& enablePolarization(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Polarization.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearPolarization() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ModulationOnPulse.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ModulationOnPulse.
    */
  virtual const uci::type::ModulationOnPulseDataType& getModulationOnPulse() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ModulationOnPulse.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ModulationOnPulse.
    */
  virtual uci::type::ModulationOnPulseDataType& getModulationOnPulse() = 0;

  /** Sets the complex content identified by ModulationOnPulse to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ModulationOnPulse.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setModulationOnPulse(const uci::type::ModulationOnPulseDataType& value) = 0;

  /** Returns whether the Element identified by ModulationOnPulse exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ModulationOnPulse is enabled or not.
    */
  virtual bool hasModulationOnPulse() const = 0;

  /** Enables the Element identified by ModulationOnPulse.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ModulationOnPulse.
    */
  virtual uci::type::ModulationOnPulseDataType& enableModulationOnPulse(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ModulationOnPulse.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearModulationOnPulse() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Scan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Scan.
    */
  virtual const uci::type::ScanDataType& getScan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Scan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Scan.
    */
  virtual uci::type::ScanDataType& getScan() = 0;

  /** Sets the complex content identified by Scan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Scan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setScan(const uci::type::ScanDataType& value) = 0;

  /** Returns whether the Element identified by Scan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Scan is enabled or not.
    */
  virtual bool hasScan() const = 0;

  /** Enables the Element identified by Scan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Scan.
    */
  virtual uci::type::ScanDataType& enableScan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Scan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearScan() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SignalNoiseRatio.
    *
    * @return The value of the simple primitive data type identified by SignalNoiseRatio.
    */
  virtual uci::type::DecibelTypeValue getSignalNoiseRatio() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SignalNoiseRatio.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setSignalNoiseRatio(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by SignalNoiseRatio exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SignalNoiseRatio is enabled or not.
    */
  virtual bool hasSignalNoiseRatio() const = 0;

  /** Clears (disabled) the Element identified by SignalNoiseRatio.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearSignalNoiseRatio() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PulseRepetitionFrequency.
    *
    * @return The value of the simple primitive data type identified by PulseRepetitionFrequency.
    */
  virtual xs::Double getPulseRepetitionFrequency() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PulseRepetitionFrequency.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setPulseRepetitionFrequency(xs::Double value) = 0;

  /** Returns whether the Element identified by PulseRepetitionFrequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseRepetitionFrequency is enabled or not.
    */
  virtual bool hasPulseRepetitionFrequency() const = 0;

  /** Clears (disabled) the Element identified by PulseRepetitionFrequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearPulseRepetitionFrequency() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PulseRepetitionFrequencyCalculated.
    *
    * @return The value of the simple primitive data type identified by PulseRepetitionFrequencyCalculated.
    */
  virtual xs::Boolean getPulseRepetitionFrequencyCalculated() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PulseRepetitionFrequencyCalculated.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setPulseRepetitionFrequencyCalculated(xs::Boolean value) = 0;

  /** Returns whether the Element identified by PulseRepetitionFrequencyCalculated exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseRepetitionFrequencyCalculated is enabled or not.
    */
  virtual bool hasPulseRepetitionFrequencyCalculated() const = 0;

  /** Clears (disabled) the Element identified by PulseRepetitionFrequencyCalculated.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearPulseRepetitionFrequencyCalculated() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PulseDeviation.
    *
    * @return The value of the simple primitive data type identified by PulseDeviation.
    */
  virtual uci::type::DurationTypeValue getPulseDeviation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PulseDeviation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setPulseDeviation(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PulseDeviation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseDeviation is enabled or not.
    */
  virtual bool hasPulseDeviation() const = 0;

  /** Clears (disabled) the Element identified by PulseDeviation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearPulseDeviation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by BurstDeviation.
    *
    * @return The value of the simple primitive data type identified by BurstDeviation.
    */
  virtual uci::type::DurationTypeValue getBurstDeviation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by BurstDeviation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setBurstDeviation(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by BurstDeviation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BurstDeviation is enabled or not.
    */
  virtual bool hasBurstDeviation() const = 0;

  /** Clears (disabled) the Element identified by BurstDeviation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearBurstDeviation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IlluminationRate.
    *
    * @return The value of the simple primitive data type identified by IlluminationRate.
    */
  virtual uci::type::FrequencyTypeValue getIlluminationRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IlluminationRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setIlluminationRate(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by IlluminationRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IlluminationRate is enabled or not.
    */
  virtual bool hasIlluminationRate() const = 0;

  /** Clears (disabled) the Element identified by IlluminationRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearIlluminationRate() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IlluminationRateDeviation.
    *
    * @return The value of the simple primitive data type identified by IlluminationRateDeviation.
    */
  virtual uci::type::FrequencyTypeValue getIlluminationRateDeviation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IlluminationRateDeviation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setIlluminationRateDeviation(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by IlluminationRateDeviation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IlluminationRateDeviation is enabled or not.
    */
  virtual bool hasIlluminationRateDeviation() const = 0;

  /** Clears (disabled) the Element identified by IlluminationRateDeviation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearIlluminationRateDeviation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PulseCount.
    *
    * @return The value of the simple primitive data type identified by PulseCount.
    */
  virtual xs::UnsignedInt getPulseCount() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PulseCount.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setPulseCount(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by PulseCount exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseCount is enabled or not.
    */
  virtual bool hasPulseCount() const = 0;

  /** Clears (disabled) the Element identified by PulseCount.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearPulseCount() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PulsesPerGroup.
    *
    * @return The value of the simple primitive data type identified by PulsesPerGroup.
    */
  virtual xs::UnsignedInt getPulsesPerGroup() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PulsesPerGroup.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setPulsesPerGroup(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by PulsesPerGroup exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulsesPerGroup is enabled or not.
    */
  virtual bool hasPulsesPerGroup() const = 0;

  /** Clears (disabled) the Element identified by PulsesPerGroup.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearPulsesPerGroup() = 0;

  /** Returns the value of the SimplePrimitive data type identified by BeamWidth.
    *
    * @return The value of the simple primitive data type identified by BeamWidth.
    */
  virtual uci::type::AnglePositiveTypeValue getBeamWidth() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by BeamWidth.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setBeamWidth(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by BeamWidth exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BeamWidth is enabled or not.
    */
  virtual bool hasBeamWidth() const = 0;

  /** Clears (disabled) the Element identified by BeamWidth.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearBeamWidth() = 0;

  /** Returns a const reference to the value of the enumeration identified by FrequencyModulationVariation.
    *
    * @return A const reference to the value of the enumeration identified by FrequencyModulationVariation.
    */
  virtual const uci::type::FrequencyModulationVariationEnum& getFrequencyModulationVariation() const = 0;

  /** Returns a reference to the value of the enumeration identified by FrequencyModulationVariation.
    *
    * @return A reference to the value of the enumeration identified by FrequencyModulationVariation.
    */
  virtual uci::type::FrequencyModulationVariationEnum& getFrequencyModulationVariation() = 0;

  /** Sets the value of the enumeration identified by FrequencyModulationVariation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setFrequencyModulationVariation(const uci::type::FrequencyModulationVariationEnum& value) = 0;

  /** Sets the value of the enumeration identified by FrequencyModulationVariation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setFrequencyModulationVariation(uci::type::FrequencyModulationVariationEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by FrequencyModulationVariation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FrequencyModulationVariation is enabled or not.
    */
  virtual bool hasFrequencyModulationVariation() const = 0;

  /** Enables the Element identified by FrequencyModulationVariation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by FrequencyModulationVariation.
    */
  virtual uci::type::FrequencyModulationVariationEnum& enableFrequencyModulationVariation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FrequencyModulationVariation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearFrequencyModulationVariation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by FrequencyExcursion.
    *
    * @return The value of the simple primitive data type identified by FrequencyExcursion.
    */
  virtual uci::type::FrequencyTypeValue getFrequencyExcursion() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FrequencyExcursion.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setFrequencyExcursion(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by FrequencyExcursion exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FrequencyExcursion is enabled or not.
    */
  virtual bool hasFrequencyExcursion() const = 0;

  /** Clears (disabled) the Element identified by FrequencyExcursion.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearFrequencyExcursion() = 0;

  /** Returns the value of the SimplePrimitive data type identified by FrequencyExcursionAverage.
    *
    * @return The value of the simple primitive data type identified by FrequencyExcursionAverage.
    */
  virtual uci::type::FrequencyTypeValue getFrequencyExcursionAverage() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FrequencyExcursionAverage.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setFrequencyExcursionAverage(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by FrequencyExcursionAverage exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FrequencyExcursionAverage is enabled or not.
    */
  virtual bool hasFrequencyExcursionAverage() const = 0;

  /** Clears (disabled) the Element identified by FrequencyExcursionAverage.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearFrequencyExcursionAverage() = 0;

  /** Returns the value of the SimplePrimitive data type identified by FrequencyExcursionAverageReportCount.
    *
    * @return The value of the simple primitive data type identified by FrequencyExcursionAverageReportCount.
    */
  virtual xs::UnsignedInt getFrequencyExcursionAverageReportCount() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FrequencyExcursionAverageReportCount.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setFrequencyExcursionAverageReportCount(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by FrequencyExcursionAverageReportCount exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FrequencyExcursionAverageReportCount is enabled or
    *      not.
    */
  virtual bool hasFrequencyExcursionAverageReportCount() const = 0;

  /** Clears (disabled) the Element identified by FrequencyExcursionAverageReportCount.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearFrequencyExcursionAverageReportCount() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PilotFrequency.
    *
    * @return The value of the simple primitive data type identified by PilotFrequency.
    */
  virtual uci::type::FrequencyTypeValue getPilotFrequency() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PilotFrequency.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setPilotFrequency(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by PilotFrequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PilotFrequency is enabled or not.
    */
  virtual bool hasPilotFrequency() const = 0;

  /** Clears (disabled) the Element identified by PilotFrequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearPilotFrequency() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PilotFrequencyAverage.
    *
    * @return The value of the simple primitive data type identified by PilotFrequencyAverage.
    */
  virtual uci::type::FrequencyTypeValue getPilotFrequencyAverage() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PilotFrequencyAverage.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setPilotFrequencyAverage(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by PilotFrequencyAverage exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PilotFrequencyAverage is enabled or not.
    */
  virtual bool hasPilotFrequencyAverage() const = 0;

  /** Clears (disabled) the Element identified by PilotFrequencyAverage.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearPilotFrequencyAverage() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PilotFrequencyAverageReportCount.
    *
    * @return The value of the simple primitive data type identified by PilotFrequencyAverageReportCount.
    */
  virtual xs::UnsignedInt getPilotFrequencyAverageReportCount() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PilotFrequencyAverageReportCount.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setPilotFrequencyAverageReportCount(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by PilotFrequencyAverageReportCount exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PilotFrequencyAverageReportCount is enabled or not.
    */
  virtual bool hasPilotFrequencyAverageReportCount() const = 0;

  /** Clears (disabled) the Element identified by PilotFrequencyAverageReportCount.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearPilotFrequencyAverageReportCount() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AverageBasebandedPulseRepetitionInterval.
    *
    * @return The value of the simple primitive data type identified by AverageBasebandedPulseRepetitionInterval.
    */
  virtual uci::type::DurationTypeValue getAverageBasebandedPulseRepetitionInterval() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AverageBasebandedPulseRepetitionInterval.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setAverageBasebandedPulseRepetitionInterval(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by AverageBasebandedPulseRepetitionInterval exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AverageBasebandedPulseRepetitionInterval is enabled or
    *      not.
    */
  virtual bool hasAverageBasebandedPulseRepetitionInterval() const = 0;

  /** Clears (disabled) the Element identified by AverageBasebandedPulseRepetitionInterval.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearAverageBasebandedPulseRepetitionInterval() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AverageBasebandedPulseRepetitionIntervalReportCount.
    *
    * @return The value of the simple primitive data type identified by
    *      AverageBasebandedPulseRepetitionIntervalReportCount.
    */
  virtual xs::UnsignedShort getAverageBasebandedPulseRepetitionIntervalReportCount() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AverageBasebandedPulseRepetitionIntervalReportCount.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setAverageBasebandedPulseRepetitionIntervalReportCount(xs::UnsignedShort value) = 0;

  /** Returns whether the Element identified by AverageBasebandedPulseRepetitionIntervalReportCount exists (is enabled) or
    * not.
    *
    * @return A boolean indicating whether the Element identified by AverageBasebandedPulseRepetitionIntervalReportCount is
    *      enabled or not.
    */
  virtual bool hasAverageBasebandedPulseRepetitionIntervalReportCount() const = 0;

  /** Clears (disabled) the Element identified by AverageBasebandedPulseRepetitionIntervalReportCount.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearAverageBasebandedPulseRepetitionIntervalReportCount() = 0;

  /** Returns the value of the SimplePrimitive data type identified by BasebandedPulseRepetitionIntervalDeviation.
    *
    * @return The value of the simple primitive data type identified by BasebandedPulseRepetitionIntervalDeviation.
    */
  virtual uci::type::DoubleNonNegativeTypeValue getBasebandedPulseRepetitionIntervalDeviation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by BasebandedPulseRepetitionIntervalDeviation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setBasebandedPulseRepetitionIntervalDeviation(uci::type::DoubleNonNegativeTypeValue value) = 0;

  /** Returns whether the Element identified by BasebandedPulseRepetitionIntervalDeviation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BasebandedPulseRepetitionIntervalDeviation is enabled
    *      or not.
    */
  virtual bool hasBasebandedPulseRepetitionIntervalDeviation() const = 0;

  /** Clears (disabled) the Element identified by BasebandedPulseRepetitionIntervalDeviation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearBasebandedPulseRepetitionIntervalDeviation() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * LongBaselineInterferometerInfo.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      LongBaselineInterferometerInfo.
    */
  virtual const uci::type::LongBaselineInterferometerInfoType& getLongBaselineInterferometerInfo() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * LongBaselineInterferometerInfo.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      LongBaselineInterferometerInfo.
    */
  virtual uci::type::LongBaselineInterferometerInfoType& getLongBaselineInterferometerInfo() = 0;

  /** Sets the complex content identified by LongBaselineInterferometerInfo to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LongBaselineInterferometerInfo.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& setLongBaselineInterferometerInfo(const uci::type::LongBaselineInterferometerInfoType& value) = 0;

  /** Returns whether the Element identified by LongBaselineInterferometerInfo exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LongBaselineInterferometerInfo is enabled or not.
    */
  virtual bool hasLongBaselineInterferometerInfo() const = 0;

  /** Enables the Element identified by LongBaselineInterferometerInfo.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      LongBaselineInterferometerInfo.
    */
  virtual uci::type::LongBaselineInterferometerInfoType& enableLongBaselineInterferometerInfo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LongBaselineInterferometerInfo.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalParametricsType& clearLongBaselineInterferometerInfo() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SignalParametricsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SignalParametricsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SignalParametricsType to copy from.
    */
  SignalParametricsType(const SignalParametricsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SignalParametricsType to the contents of the SignalParametricsType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SignalParametricsType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this SignalParametricsType.
    * @return A reference to this SignalParametricsType.
    */
  SignalParametricsType& operator=(const SignalParametricsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SIGNALPARAMETRICSTYPE_H

