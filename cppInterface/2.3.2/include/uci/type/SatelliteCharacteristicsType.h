/** @file SatelliteCharacteristicsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SATELLITECHARACTERISTICSTYPE_H
#define UCI_TYPE_SATELLITECHARACTERISTICSTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CommFrequencyType.h"
#include "FileMetadataID_Type.h"
#include "MassType.h"
#include "ProductMetadataID_Type.h"
#include "SOB_MissionTypeEnum.h"
#include "SatellitePhysicalConfigurationType.h"
#include "VisibleString256Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SatelliteCharacteristicsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SatelliteCharacteristicsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SatelliteCharacteristicsType.
    */
  static UCI_EXPORT SatelliteCharacteristicsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SatelliteCharacteristicsType initializing the data accessed by the new
    * SatelliteCharacteristicsType using the data accessed by the specified SatelliteCharacteristicsType (cloning).
    *
    * @param accessor The SatelliteCharacteristicsType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created SatelliteCharacteristicsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SatelliteCharacteristicsType.
    */
  static UCI_EXPORT SatelliteCharacteristicsType& create(const SatelliteCharacteristicsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SatelliteCharacteristicsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The SatelliteCharacteristicsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SatelliteCharacteristicsType& accessor);

  /** Returns this accessor's type constant, i.e. satelliteCharacteristicsType.
    *
    * @return This accessor's type constant, i.e. satelliteCharacteristicsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::satelliteCharacteristicsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SatelliteCharacteristicsType.
    *
    * @return The version that was initialized from the uci:version attribute of SatelliteCharacteristicsType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SatelliteCharacteristicsType& accessor) = 0;

  /** The intended mission or missions of the satellite. List size for this element is based on "Select All That Apply"
    * condition. [Occurrences: Minimum: 0; Maximum: 24]
    */
  typedef uci::base::BoundedList<uci::type::SOB_MissionTypeEnum, uci::type::accessorType::sOB_MissionTypeEnum> MissionType;

  /** Indicates the physical configuration and appearance of the satellite. When more than one is given, the satellite has
    * multiple configurations with different sizes and appearances. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SatellitePhysicalConfigurationType, uci::type::accessorType::satellitePhysicalConfigurationType> PhysicalConfiguration;

  /** A reference to metadata for a product which conveys characteristics of the satellite. For example, a reference image
    * of the satellite type. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type> CharacteristicsProductID;

  /** A reference to metadata for a file which conveys characteristics of the satellite. For example, a non-Product image
    * or a CAD model of the satellite's physical characteristics. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> CharacteristicsFileID;

  /** Indicates a comms link of the satellite. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::CommFrequencyType, uci::type::accessorType::commFrequencyType> CommLink;

  /** Returns a const reference to the accessor that provides access to the string identified by BusType.
    *
    * @return A const reference to the accessor that provides access to the string identified by BusType.
    */
  virtual const asb_uci::type::VisibleString256Type& getBusType() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by BusType.
    *
    * @return A reference to the accessor that provides access to the string identified by BusType.
    */
  virtual asb_uci::type::VisibleString256Type& getBusType() = 0;

  /** Sets the string identified by BusType to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by BusType.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SatelliteCharacteristicsType& setBusType(const asb_uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by BusType to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SatelliteCharacteristicsType& setBusType(const std::string& value) = 0;

  /** Sets the string identified by BusType to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SatelliteCharacteristicsType& setBusType(const char* value) = 0;

  /** Returns whether the Element identified by BusType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BusType is enabled or not.
    */
  virtual bool hasBusType() const = 0;

  /** Enables the Element identified by BusType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by BusType.
    */
  virtual asb_uci::type::VisibleString256Type& enableBusType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by BusType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SatelliteCharacteristicsType& clearBusType() = 0;

  /** Returns a const reference to the bounded list identified by MissionType.
    *
    * @return A const reference to the bounded list identified by MissionType.
    */
  virtual const uci::type::SatelliteCharacteristicsType::MissionType& getMissionType() const = 0;

  /** Returns a reference to the bounded list identified by MissionType.
    *
    * @return A reference to the bounded list identified by MissionType.
    */
  virtual uci::type::SatelliteCharacteristicsType::MissionType& getMissionType() = 0;

  /** Sets the bounded list identified by MissionType.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SatelliteCharacteristicsType& setMissionType(const uci::type::SatelliteCharacteristicsType::MissionType& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Mass.
    *
    * @return The value of the simple primitive data type identified by Mass.
    */
  virtual uci::type::MassTypeValue getMass() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Mass.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SatelliteCharacteristicsType& setMass(uci::type::MassTypeValue value) = 0;

  /** Returns whether the Element identified by Mass exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mass is enabled or not.
    */
  virtual bool hasMass() const = 0;

  /** Clears (disabled) the Element identified by Mass.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SatelliteCharacteristicsType& clearMass() = 0;

  /** Returns a const reference to the bounded list identified by PhysicalConfiguration.
    *
    * @return A const reference to the bounded list identified by PhysicalConfiguration.
    */
  virtual const uci::type::SatelliteCharacteristicsType::PhysicalConfiguration& getPhysicalConfiguration() const = 0;

  /** Returns a reference to the bounded list identified by PhysicalConfiguration.
    *
    * @return A reference to the bounded list identified by PhysicalConfiguration.
    */
  virtual uci::type::SatelliteCharacteristicsType::PhysicalConfiguration& getPhysicalConfiguration() = 0;

  /** Sets the bounded list identified by PhysicalConfiguration.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SatelliteCharacteristicsType& setPhysicalConfiguration(const uci::type::SatelliteCharacteristicsType::PhysicalConfiguration& value) = 0;

  /** Returns a const reference to the bounded list identified by CharacteristicsProductID.
    *
    * @return A const reference to the bounded list identified by CharacteristicsProductID.
    */
  virtual const uci::type::SatelliteCharacteristicsType::CharacteristicsProductID& getCharacteristicsProductID() const = 0;

  /** Returns a reference to the bounded list identified by CharacteristicsProductID.
    *
    * @return A reference to the bounded list identified by CharacteristicsProductID.
    */
  virtual uci::type::SatelliteCharacteristicsType::CharacteristicsProductID& getCharacteristicsProductID() = 0;

  /** Sets the bounded list identified by CharacteristicsProductID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SatelliteCharacteristicsType& setCharacteristicsProductID(const uci::type::SatelliteCharacteristicsType::CharacteristicsProductID& value) = 0;

  /** Returns a const reference to the bounded list identified by CharacteristicsFileID.
    *
    * @return A const reference to the bounded list identified by CharacteristicsFileID.
    */
  virtual const uci::type::SatelliteCharacteristicsType::CharacteristicsFileID& getCharacteristicsFileID() const = 0;

  /** Returns a reference to the bounded list identified by CharacteristicsFileID.
    *
    * @return A reference to the bounded list identified by CharacteristicsFileID.
    */
  virtual uci::type::SatelliteCharacteristicsType::CharacteristicsFileID& getCharacteristicsFileID() = 0;

  /** Sets the bounded list identified by CharacteristicsFileID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SatelliteCharacteristicsType& setCharacteristicsFileID(const uci::type::SatelliteCharacteristicsType::CharacteristicsFileID& value) = 0;

  /** Returns a const reference to the bounded list identified by CommLink.
    *
    * @return A const reference to the bounded list identified by CommLink.
    */
  virtual const uci::type::SatelliteCharacteristicsType::CommLink& getCommLink() const = 0;

  /** Returns a reference to the bounded list identified by CommLink.
    *
    * @return A reference to the bounded list identified by CommLink.
    */
  virtual uci::type::SatelliteCharacteristicsType::CommLink& getCommLink() = 0;

  /** Sets the bounded list identified by CommLink.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SatelliteCharacteristicsType& setCommLink(const uci::type::SatelliteCharacteristicsType::CommLink& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SatelliteCharacteristicsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SatelliteCharacteristicsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SatelliteCharacteristicsType to copy from.
    */
  SatelliteCharacteristicsType(const SatelliteCharacteristicsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SatelliteCharacteristicsType to the contents of the
    * SatelliteCharacteristicsType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The SatelliteCharacteristicsType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this SatelliteCharacteristicsType.
    * @return A reference to this SatelliteCharacteristicsType.
    */
  SatelliteCharacteristicsType& operator=(const SatelliteCharacteristicsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SATELLITECHARACTERISTICSTYPE_H

