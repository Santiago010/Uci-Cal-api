/** @file CommMADL_ControlType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMMADL_CONTROLTYPE_H
#define UCI_TYPE_COMMMADL_CONTROLTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/export.h"
#include "uci/type/CommMADL_FlightGroupType.h"
#include "uci/type/CommMADL_LinkCommandListType.h"
#include "uci/type/CommMADL_NetChangeRequestType.h"
#include "uci/type/CommMADL_NetworkLayoutType.h"
#include "uci/type/CommMADL_NetworkType.h"
#include "uci/type/MADL_DayOfYearType.h"
#include "uci/type/MADL_NodeRangeType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Utilized to perform MADL Specific tuning of a communications capability. */
class CommMADL_ControlType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CommMADL_ControlType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommMADL_ControlType.
    */
  static UCI_EXPORT CommMADL_ControlType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CommMADL_ControlType initializing the data accessed by the new CommMADL_ControlType
    * using the data accessed by the specified CommMADL_ControlType (cloning).
    *
    * @param accessor The CommMADL_ControlType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created CommMADL_ControlType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommMADL_ControlType.
    */
  static UCI_EXPORT CommMADL_ControlType& create(const CommMADL_ControlType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CommMADL_ControlType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The CommMADL_ControlType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CommMADL_ControlType& accessor);

  /** Returns this accessor's type constant, i.e. commMADL_ControlType.
    *
    * @return This accessor's type constant, i.e. commMADL_ControlType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commMADL_ControlType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CommMADL_ControlType.
    *
    * @return The version that was initialized from the uci:version attribute of CommMADL_ControlType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CommMADL_ControlType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Node.
    *
    * @return The value of the simple primitive data type identified by Node.
    */
  virtual uci::type::MADL_NodeRangeTypeValue getNode() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Node.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_ControlType& setNode(uci::type::MADL_NodeRangeTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FlightGroupIdentifier.
    *
    * @return A const reference to the accessor that provides access to the string identified by FlightGroupIdentifier.
    */
  virtual const uci::type::CommMADL_FlightGroupType& getFlightGroupIdentifier() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FlightGroupIdentifier.
    *
    * @return A reference to the accessor that provides access to the string identified by FlightGroupIdentifier.
    */
  virtual uci::type::CommMADL_FlightGroupType& getFlightGroupIdentifier() = 0;

  /** Sets the string identified by FlightGroupIdentifier to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FlightGroupIdentifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_ControlType& setFlightGroupIdentifier(const uci::type::CommMADL_FlightGroupType& value) = 0;

  /** Sets the string identified by FlightGroupIdentifier to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_ControlType& setFlightGroupIdentifier(const std::string& value) = 0;

  /** Sets the string identified by FlightGroupIdentifier to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_ControlType& setFlightGroupIdentifier(const char* value) = 0;

  /** Returns whether the Element identified by FlightGroupIdentifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FlightGroupIdentifier is enabled or not.
    */
  virtual bool hasFlightGroupIdentifier() const = 0;

  /** Enables the Element identified by FlightGroupIdentifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FlightGroupIdentifier.
    */
  virtual uci::type::CommMADL_FlightGroupType& enableFlightGroupIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FlightGroupIdentifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_ControlType& clearFlightGroupIdentifier() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * NetworkIdentifier.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      NetworkIdentifier.
    */
  virtual const uci::type::CommMADL_NetworkType& getNetworkIdentifier() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by NetworkIdentifier.
    *
    * @return A reference to the accessor that provides access to the complex content identified by NetworkIdentifier.
    */
  virtual uci::type::CommMADL_NetworkType& getNetworkIdentifier() = 0;

  /** Sets the complex content identified by NetworkIdentifier to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by NetworkIdentifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_ControlType& setNetworkIdentifier(const uci::type::CommMADL_NetworkType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by NetworkLayout.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by NetworkLayout.
    */
  virtual const uci::type::CommMADL_NetworkLayoutType& getNetworkLayout() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by NetworkLayout.
    *
    * @return A reference to the accessor that provides access to the complex content identified by NetworkLayout.
    */
  virtual uci::type::CommMADL_NetworkLayoutType& getNetworkLayout() = 0;

  /** Sets the complex content identified by NetworkLayout to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by NetworkLayout.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_ControlType& setNetworkLayout(const uci::type::CommMADL_NetworkLayoutType& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by MADL_DayOfYear.
    *
    * @return The value of the simple primitive data type identified by MADL_DayOfYear.
    */
  virtual uci::type::MADL_DayOfYearTypeValue getMADL_DayOfYear() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MADL_DayOfYear.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_ControlType& setMADL_DayOfYear(uci::type::MADL_DayOfYearTypeValue value) = 0;

  /** Returns whether the Element identified by MADL_DayOfYear exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MADL_DayOfYear is enabled or not.
    */
  virtual bool hasMADL_DayOfYear() const = 0;

  /** Clears (disabled) the Element identified by MADL_DayOfYear.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_ControlType& clearMADL_DayOfYear() = 0;

  /** Returns the value of the SimplePrimitive data type identified by VoiceTxExtent.
    *
    * @return The value of the simple primitive data type identified by VoiceTxExtent.
    */
  virtual xs::Boolean getVoiceTxExtent() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by VoiceTxExtent.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_ControlType& setVoiceTxExtent(xs::Boolean value) = 0;

  /** Returns whether the Element identified by VoiceTxExtent exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VoiceTxExtent is enabled or not.
    */
  virtual bool hasVoiceTxExtent() const = 0;

  /** Clears (disabled) the Element identified by VoiceTxExtent.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_ControlType& clearVoiceTxExtent() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * LinkCommandedState.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      LinkCommandedState.
    */
  virtual const uci::type::CommMADL_LinkCommandListType& getLinkCommandedState() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LinkCommandedState.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LinkCommandedState.
    */
  virtual uci::type::CommMADL_LinkCommandListType& getLinkCommandedState() = 0;

  /** Sets the complex content identified by LinkCommandedState to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LinkCommandedState.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_ControlType& setLinkCommandedState(const uci::type::CommMADL_LinkCommandListType& value) = 0;

  /** Returns whether the Element identified by LinkCommandedState exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LinkCommandedState is enabled or not.
    */
  virtual bool hasLinkCommandedState() const = 0;

  /** Enables the Element identified by LinkCommandedState.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by LinkCommandedState.
    */
  virtual uci::type::CommMADL_LinkCommandListType& enableLinkCommandedState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LinkCommandedState.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_ControlType& clearLinkCommandedState() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by NetChangeRequest.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by NetChangeRequest.
    */
  virtual const uci::type::CommMADL_NetChangeRequestType& getNetChangeRequest() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by NetChangeRequest.
    *
    * @return A reference to the accessor that provides access to the complex content identified by NetChangeRequest.
    */
  virtual uci::type::CommMADL_NetChangeRequestType& getNetChangeRequest() = 0;

  /** Sets the complex content identified by NetChangeRequest to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by NetChangeRequest.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_ControlType& setNetChangeRequest(const uci::type::CommMADL_NetChangeRequestType& value) = 0;

  /** Returns whether the Element identified by NetChangeRequest exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NetChangeRequest is enabled or not.
    */
  virtual bool hasNetChangeRequest() const = 0;

  /** Enables the Element identified by NetChangeRequest.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by NetChangeRequest.
    */
  virtual uci::type::CommMADL_NetChangeRequestType& enableNetChangeRequest(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by NetChangeRequest.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_ControlType& clearNetChangeRequest() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CommMADL_ControlType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommMADL_ControlType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommMADL_ControlType to copy from.
    */
  CommMADL_ControlType(const CommMADL_ControlType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CommMADL_ControlType to the contents of the CommMADL_ControlType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CommMADL_ControlType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this CommMADL_ControlType.
    * @return A reference to this CommMADL_ControlType.
    */
  CommMADL_ControlType& operator=(const CommMADL_ControlType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMMMADL_CONTROLTYPE_H

