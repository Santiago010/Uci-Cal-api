/** @file KinematicsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_KINEMATICSTYPE_H
#define UCI_TYPE_KINEMATICSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/Acceleration3D_Type.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/EntityPositionType.h"
#include "uci/type/OrientationCovarianceType.h"
#include "uci/type/OrientationType.h"
#include "uci/type/StateCovarianceNED_Type.h"
#include "uci/type/Velocity2D_UncertaintyType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class KinematicsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new KinematicsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed KinematicsType.
    */
  static UCI_EXPORT KinematicsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new KinematicsType initializing the data accessed by the new KinematicsType using the data
    * accessed by the specified KinematicsType (cloning).
    *
    * @param accessor The KinematicsType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created KinematicsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed KinematicsType.
    */
  static UCI_EXPORT KinematicsType& create(const KinematicsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified KinematicsType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The KinematicsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(KinematicsType& accessor);

  /** Returns this accessor's type constant, i.e. kinematicsType.
    *
    * @return This accessor's type constant, i.e. kinematicsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::kinematicsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of KinematicsType.
    *
    * @return The version that was initialized from the uci:version attribute of KinematicsType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const KinematicsType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by KinematicsTimeStamp.
    *
    * @return The value of the simple primitive data type identified by KinematicsTimeStamp.
    */
  virtual uci::type::DateTimeTypeValue getKinematicsTimeStamp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by KinematicsTimeStamp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::KinematicsType& setKinematicsTimeStamp(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by KinematicsTimeStamp exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by KinematicsTimeStamp is enabled or not.
    */
  virtual bool hasKinematicsTimeStamp() const = 0;

  /** Clears (disabled) the Element identified by KinematicsTimeStamp.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::KinematicsType& clearKinematicsTimeStamp() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual const uci::type::EntityPositionType& getPosition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual uci::type::EntityPositionType& getPosition() = 0;

  /** Sets the complex content identified by Position to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Position.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::KinematicsType& setPosition(const uci::type::EntityPositionType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Velocity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Velocity.
    */
  virtual const uci::type::Velocity2D_UncertaintyType& getVelocity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Velocity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Velocity.
    */
  virtual uci::type::Velocity2D_UncertaintyType& getVelocity() = 0;

  /** Sets the complex content identified by Velocity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Velocity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::KinematicsType& setVelocity(const uci::type::Velocity2D_UncertaintyType& value) = 0;

  /** Returns whether the Element identified by Velocity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Velocity is enabled or not.
    */
  virtual bool hasVelocity() const = 0;

  /** Enables the Element identified by Velocity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Velocity.
    */
  virtual uci::type::Velocity2D_UncertaintyType& enableVelocity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Velocity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::KinematicsType& clearVelocity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Acceleration.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Acceleration.
    */
  virtual const uci::type::Acceleration3D_Type& getAcceleration() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Acceleration.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Acceleration.
    */
  virtual uci::type::Acceleration3D_Type& getAcceleration() = 0;

  /** Sets the complex content identified by Acceleration to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Acceleration.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::KinematicsType& setAcceleration(const uci::type::Acceleration3D_Type& value) = 0;

  /** Returns whether the Element identified by Acceleration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Acceleration is enabled or not.
    */
  virtual bool hasAcceleration() const = 0;

  /** Enables the Element identified by Acceleration.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Acceleration.
    */
  virtual uci::type::Acceleration3D_Type& enableAcceleration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Acceleration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::KinematicsType& clearAcceleration() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by StateCovariance.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by StateCovariance.
    */
  virtual const uci::type::StateCovarianceNED_Type& getStateCovariance() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by StateCovariance.
    *
    * @return A reference to the accessor that provides access to the complex content identified by StateCovariance.
    */
  virtual uci::type::StateCovarianceNED_Type& getStateCovariance() = 0;

  /** Sets the complex content identified by StateCovariance to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by StateCovariance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::KinematicsType& setStateCovariance(const uci::type::StateCovarianceNED_Type& value) = 0;

  /** Returns whether the Element identified by StateCovariance exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by StateCovariance is enabled or not.
    */
  virtual bool hasStateCovariance() const = 0;

  /** Enables the Element identified by StateCovariance.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by StateCovariance.
    */
  virtual uci::type::StateCovarianceNED_Type& enableStateCovariance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by StateCovariance.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::KinematicsType& clearStateCovariance() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Orientation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Orientation.
    */
  virtual const uci::type::OrientationType& getOrientation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Orientation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Orientation.
    */
  virtual uci::type::OrientationType& getOrientation() = 0;

  /** Sets the complex content identified by Orientation to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Orientation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::KinematicsType& setOrientation(const uci::type::OrientationType& value) = 0;

  /** Returns whether the Element identified by Orientation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Orientation is enabled or not.
    */
  virtual bool hasOrientation() const = 0;

  /** Enables the Element identified by Orientation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Orientation.
    */
  virtual uci::type::OrientationType& enableOrientation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Orientation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::KinematicsType& clearOrientation() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrientationCovariance.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrientationCovariance.
    */
  virtual const uci::type::OrientationCovarianceType& getOrientationCovariance() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrientationCovariance.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrientationCovariance.
    */
  virtual uci::type::OrientationCovarianceType& getOrientationCovariance() = 0;

  /** Sets the complex content identified by OrientationCovariance to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrientationCovariance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::KinematicsType& setOrientationCovariance(const uci::type::OrientationCovarianceType& value) = 0;

  /** Returns whether the Element identified by OrientationCovariance exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrientationCovariance is enabled or not.
    */
  virtual bool hasOrientationCovariance() const = 0;

  /** Enables the Element identified by OrientationCovariance.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrientationCovariance.
    */
  virtual uci::type::OrientationCovarianceType& enableOrientationCovariance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrientationCovariance.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::KinematicsType& clearOrientationCovariance() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  KinematicsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~KinematicsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The KinematicsType to copy from.
    */
  KinematicsType(const KinematicsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this KinematicsType to the contents of the KinematicsType on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The KinematicsType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this KinematicsType.
    * @return A reference to this KinematicsType.
    */
  KinematicsType& operator=(const KinematicsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_KINEMATICSTYPE_H

