/** @file OpNotificationMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OPNOTIFICATIONMDT_H
#define UCI_TYPE_OPNOTIFICATIONMDT_H

#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/AssociatedMessageType.h"
#include "uci/type/NotificationBaseType.h"
#include "uci/type/OpID_ChoiceType.h"
#include "uci/type/OpInteractingAssetType.h"
#include "uci/type/OpNotificationEXT.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This message provides the real-time notification of an OpLine, OpPoint OpVolume, and/or OpZone. Since the operational
  * type(s) can be Theater wide and go across MissionPlan and Systems this could be the notification of an operational
  * type(s) for one System or a set of Systems or all Systems. There could be different schedules for each system as
  * well. An operational type(s) notification message could be only a partial notification for the whole operational
  * type(s) based on System and schedule.
  */
class OpNotificationMDT : public virtual NotificationBaseType {
public:

  /** This method constructs a new OpNotificationMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OpNotificationMDT.
    */
  static UCI_EXPORT OpNotificationMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OpNotificationMDT initializing the data accessed by the new OpNotificationMDT using the
    * data accessed by the specified OpNotificationMDT (cloning).
    *
    * @param accessor The OpNotificationMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created OpNotificationMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OpNotificationMDT.
    */
  static UCI_EXPORT OpNotificationMDT& create(const OpNotificationMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OpNotificationMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The OpNotificationMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OpNotificationMDT& accessor);

  /** Returns this accessor's type constant, i.e. opNotificationMDT.
    *
    * @return This accessor's type constant, i.e. opNotificationMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::opNotificationMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of OpNotificationMDT.
    *
    * @return The version that was initialized from the uci:version attribute of OpNotificationMDT.
    */
  static std::string getUCITypeVersion() {
    return "002.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OpNotificationMDT& accessor) = 0;

  /** Indicates details regarding an asset's interaction with the sibling Op Subject. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OpInteractingAssetType, uci::type::accessorType::opInteractingAssetType> Asset;

  /** Indicates a message that is associated with the Notification. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::AssociatedMessageType, uci::type::accessorType::associatedMessageType> AssociatedMessage;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OpSubject.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OpSubject.
    */
  virtual const uci::type::OpID_ChoiceType& getOpSubject() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OpSubject.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OpSubject.
    */
  virtual uci::type::OpID_ChoiceType& getOpSubject() = 0;

  /** Sets the complex content identified by OpSubject to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OpSubject.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpNotificationMDT& setOpSubject(const uci::type::OpID_ChoiceType& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ScheduleActive.
    *
    * @return The value of the simple primitive data type identified by ScheduleActive.
    */
  virtual xs::Boolean getScheduleActive() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ScheduleActive.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpNotificationMDT& setScheduleActive(xs::Boolean value) = 0;

  /** Returns a const reference to the bounded list identified by Asset.
    *
    * @return A const reference to the bounded list identified by Asset.
    */
  virtual const uci::type::OpNotificationMDT::Asset& getAsset() const = 0;

  /** Returns a reference to the bounded list identified by Asset.
    *
    * @return A reference to the bounded list identified by Asset.
    */
  virtual uci::type::OpNotificationMDT::Asset& getAsset() = 0;

  /** Sets the bounded list identified by Asset.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpNotificationMDT& setAsset(const uci::type::OpNotificationMDT::Asset& value) = 0;

  /** Returns a const reference to the bounded list identified by AssociatedMessage.
    *
    * @return A const reference to the bounded list identified by AssociatedMessage.
    */
  virtual const uci::type::OpNotificationMDT::AssociatedMessage& getAssociatedMessage() const = 0;

  /** Returns a reference to the bounded list identified by AssociatedMessage.
    *
    * @return A reference to the bounded list identified by AssociatedMessage.
    */
  virtual uci::type::OpNotificationMDT::AssociatedMessage& getAssociatedMessage() = 0;

  /** Sets the bounded list identified by AssociatedMessage.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpNotificationMDT& setAssociatedMessage(const uci::type::OpNotificationMDT::AssociatedMessage& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Extension.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Extension.
    */
  virtual const uci::type::OpNotificationEXT& getExtension() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Extension.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Extension.
    */
  virtual uci::type::OpNotificationEXT& getExtension() = 0;

  /** Sets the complex content identified by Extension to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Extension.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpNotificationMDT& setExtension(const uci::type::OpNotificationEXT& value) = 0;

  /** Returns whether the Element identified by Extension exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Extension is enabled or not.
    */
  virtual bool hasExtension() const = 0;

  /** Enables the Element identified by Extension.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Extension.
    */
  virtual uci::type::OpNotificationEXT& enableExtension(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Extension.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpNotificationMDT& clearExtension() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OpNotificationMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~OpNotificationMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OpNotificationMDT to copy from.
    */
  OpNotificationMDT(const OpNotificationMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OpNotificationMDT to the contents of the OpNotificationMDT on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OpNotificationMDT on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this OpNotificationMDT.
    * @return A reference to this OpNotificationMDT.
    */
  OpNotificationMDT& operator=(const OpNotificationMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_OPNOTIFICATIONMDT_H

