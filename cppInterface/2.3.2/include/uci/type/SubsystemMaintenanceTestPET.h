/** @file SubsystemMaintenanceTestPET.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SUBSYSTEMMAINTENANCETESTPET_H
#define UCI_TYPE_SUBSYSTEMMAINTENANCETESTPET_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/UnsignedIntAccessor.h"
#include "CapabilityID_Type.h"
#include "SubsystemID_Type.h"
#include "SubsystemMaintenanceControlInterfacesEnum.h"
#include "SubsystemMaintenanceEventSettingsType.h"
#include "SubsystemMaintenanceID_Type.h"
#include "VisibleString256Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Abstract extension type for configuring subsystem maintenance test. Available extension types include:
  * SubsystemMaintenanceTestType.
  */
class SubsystemMaintenanceTestPET : public virtual uci::base::Accessor {
public:

  /** Returns this accessor's type constant, i.e. subsystemMaintenanceTestPET.
    *
    * @return This accessor's type constant, i.e. subsystemMaintenanceTestPET.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::subsystemMaintenanceTestPET;
  }

  /** Returns the version that was initialized from the uci:version attribute of SubsystemMaintenanceTestPET.
    *
    * @return The version that was initialized from the uci:version attribute of SubsystemMaintenanceTestPET.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SubsystemMaintenanceTestPET& accessor) = 0;

  /** Indicates a list of Subsystem, Component, etc., is at least partially tested by the maintenance test. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SubsystemID_Type, uci::type::accessorType::subsystemID_Type> SubsystemComponentID;

  /** Indicates a list of Capabilities that are at least partially tested by the maintenance test. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CapabilityID_Type, uci::type::accessorType::capabilityID_Type> CapabilityID;

  /** Identifies the acceptable parameters for the test event (i.e., test step) used to run a maintenance unit event.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SubsystemMaintenanceEventSettingsType, uci::type::accessorType::subsystemMaintenanceEventSettingsType> TestEventSettings;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TestID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TestID.
    */
  virtual const uci::type::SubsystemMaintenanceID_Type& getTestID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TestID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TestID.
    */
  virtual uci::type::SubsystemMaintenanceID_Type& getTestID() = 0;

  /** Sets the complex content identified by TestID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TestID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& setTestID(const uci::type::SubsystemMaintenanceID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by AcceptedInterface.
    *
    * @return A const reference to the value of the enumeration identified by AcceptedInterface.
    */
  virtual const uci::type::SubsystemMaintenanceControlInterfacesEnum& getAcceptedInterface() const = 0;

  /** Returns a reference to the value of the enumeration identified by AcceptedInterface.
    *
    * @return A reference to the value of the enumeration identified by AcceptedInterface.
    */
  virtual uci::type::SubsystemMaintenanceControlInterfacesEnum& getAcceptedInterface() = 0;

  /** Sets the value of the enumeration identified by AcceptedInterface.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& setAcceptedInterface(const uci::type::SubsystemMaintenanceControlInterfacesEnum& value) = 0;

  /** Sets the value of the enumeration identified by AcceptedInterface.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& setAcceptedInterface(uci::type::SubsystemMaintenanceControlInterfacesEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Description.
    *
    * @return A const reference to the accessor that provides access to the string identified by Description.
    */
  virtual const uci::type::VisibleString256Type& getDescription() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Description.
    *
    * @return A reference to the accessor that provides access to the string identified by Description.
    */
  virtual uci::type::VisibleString256Type& getDescription() = 0;

  /** Sets the string identified by Description to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Description.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& setDescription(const uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by Description to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& setDescription(const std::string& value) = 0;

  /** Sets the string identified by Description to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& setDescription(const char* value) = 0;

  /** Returns whether the Element identified by Description exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Description is enabled or not.
    */
  virtual bool hasDescription() const = 0;

  /** Enables the Element identified by Description.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Description.
    */
  virtual uci::type::VisibleString256Type& enableDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Description.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& clearDescription() = 0;

  /** Returns a const reference to the bounded list identified by SubsystemComponentID.
    *
    * @return A const reference to the bounded list identified by SubsystemComponentID.
    */
  virtual const uci::type::SubsystemMaintenanceTestPET::SubsystemComponentID& getSubsystemComponentID() const = 0;

  /** Returns a reference to the bounded list identified by SubsystemComponentID.
    *
    * @return A reference to the bounded list identified by SubsystemComponentID.
    */
  virtual uci::type::SubsystemMaintenanceTestPET::SubsystemComponentID& getSubsystemComponentID() = 0;

  /** Sets the bounded list identified by SubsystemComponentID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& setSubsystemComponentID(const uci::type::SubsystemMaintenanceTestPET::SubsystemComponentID& value) = 0;

  /** Returns a const reference to the bounded list identified by CapabilityID.
    *
    * @return A const reference to the bounded list identified by CapabilityID.
    */
  virtual const uci::type::SubsystemMaintenanceTestPET::CapabilityID& getCapabilityID() const = 0;

  /** Returns a reference to the bounded list identified by CapabilityID.
    *
    * @return A reference to the bounded list identified by CapabilityID.
    */
  virtual uci::type::SubsystemMaintenanceTestPET::CapabilityID& getCapabilityID() = 0;

  /** Sets the bounded list identified by CapabilityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& setCapabilityID(const uci::type::SubsystemMaintenanceTestPET::CapabilityID& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by MaintenanceTestType.
    *
    * @return The value of the simple primitive data type identified by MaintenanceTestType.
    */
  virtual xs::UnsignedInt getMaintenanceTestType() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MaintenanceTestType.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& setMaintenanceTestType(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by MaintenanceTestType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MaintenanceTestType is enabled or not.
    */
  virtual bool hasMaintenanceTestType() const = 0;

  /** Clears (disabled) the Element identified by MaintenanceTestType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& clearMaintenanceTestType() = 0;

  /** Returns a const reference to the bounded list identified by TestEventSettings.
    *
    * @return A const reference to the bounded list identified by TestEventSettings.
    */
  virtual const uci::type::SubsystemMaintenanceTestPET::TestEventSettings& getTestEventSettings() const = 0;

  /** Returns a reference to the bounded list identified by TestEventSettings.
    *
    * @return A reference to the bounded list identified by TestEventSettings.
    */
  virtual uci::type::SubsystemMaintenanceTestPET::TestEventSettings& getTestEventSettings() = 0;

  /** Sets the bounded list identified by TestEventSettings.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& setTestEventSettings(const uci::type::SubsystemMaintenanceTestPET::TestEventSettings& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * SubsystemMaintenanceItemName.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      SubsystemMaintenanceItemName.
    */
  virtual const uci::type::VisibleString256Type& getSubsystemMaintenanceItemName() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by SubsystemMaintenanceItemName.
    *
    * @return A reference to the accessor that provides access to the string identified by SubsystemMaintenanceItemName.
    */
  virtual uci::type::VisibleString256Type& getSubsystemMaintenanceItemName() = 0;

  /** Sets the string identified by SubsystemMaintenanceItemName to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by SubsystemMaintenanceItemName.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& setSubsystemMaintenanceItemName(const uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by SubsystemMaintenanceItemName to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& setSubsystemMaintenanceItemName(const std::string& value) = 0;

  /** Sets the string identified by SubsystemMaintenanceItemName to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& setSubsystemMaintenanceItemName(const char* value) = 0;

  /** Returns whether the Element identified by SubsystemMaintenanceItemName exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SubsystemMaintenanceItemName is enabled or not.
    */
  virtual bool hasSubsystemMaintenanceItemName() const = 0;

  /** Enables the Element identified by SubsystemMaintenanceItemName.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by SubsystemMaintenanceItemName.
    */
  virtual uci::type::VisibleString256Type& enableSubsystemMaintenanceItemName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SubsystemMaintenanceItemName.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestPET& clearSubsystemMaintenanceItemName() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SubsystemMaintenanceTestPET() {
  }

  /** The destructor [only available to derived classes]. */
  ~SubsystemMaintenanceTestPET() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SubsystemMaintenanceTestPET to copy from.
    */
  SubsystemMaintenanceTestPET(const SubsystemMaintenanceTestPET& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SubsystemMaintenanceTestPET to the contents of the
    * SubsystemMaintenanceTestPET on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The SubsystemMaintenanceTestPET on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this SubsystemMaintenanceTestPET.
    * @return A reference to this SubsystemMaintenanceTestPET.
    */
  SubsystemMaintenanceTestPET& operator=(const SubsystemMaintenanceTestPET& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SUBSYSTEMMAINTENANCETESTPET_H

