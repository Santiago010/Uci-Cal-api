/** @file PO_ActivityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_ACTIVITYTYPE_H
#define UCI_TYPE_PO_ACTIVITYTYPE_H

#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ActivityBaseType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/FOR_Enum.h"
#include "uci/type/FOV_ActivityType.h"
#include "uci/type/PO_CollectionConstraintsStatusType.h"
#include "uci/type/PO_ComponentStatusType.h"
#include "uci/type/PO_SubCapabilitySettingsType.h"
#include "uci/type/PO_TargetType.h"
#include "uci/type/PO_TrackActivityType.h"
#include "uci/type/PO_TrackDetailsType.h"
#include "uci/type/ProductOutputCapabilityStatusImageryType.h"
#include "uci/type/RepetitionType.h"
#include "uci/type/SearchTrackActivityDetailsType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_ActivityType : public virtual ActivityBaseType {
public:

  /** This method constructs a new PO_ActivityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_ActivityType.
    */
  static UCI_EXPORT PO_ActivityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_ActivityType initializing the data accessed by the new PO_ActivityType using the data
    * accessed by the specified PO_ActivityType (cloning).
    *
    * @param accessor The PO_ActivityType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PO_ActivityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_ActivityType.
    */
  static UCI_EXPORT PO_ActivityType& create(const PO_ActivityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_ActivityType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The PO_ActivityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_ActivityType& accessor);

  /** Returns this accessor's type constant, i.e. pO_ActivityType.
    *
    * @return This accessor's type constant, i.e. pO_ActivityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_ActivityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PO_ActivityType.
    *
    * @return The version that was initialized from the uci:version attribute of PO_ActivityType.
    */
  static std::string getUCITypeVersion() {
    return "003.003.003.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_ActivityType& accessor) = 0;

  /** Indicates detailed PO sensor Subcapabilities settings that will be used for this Activity. If the Activity is
    * interactive and the Component controls and settings support manual interaction, these settings can be changed via
    * PO_Command. Activity to optimize the captured imagery and tracks. If omitted, the Activity is subject to the
    * default/current settings when the Activity starts. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_SubCapabilitySettingsType, uci::type::accessorType::pO_SubCapabilitySettingsType> SubCapabilityStatus;

  /** Indicates detailed PO sensor control states and settings that will be used for this Activity. If the Activity is
    * interactive and the Component controls and settings support manual interaction, these settings can be changed via
    * PO_Command. Activity to optimize the captured imagery. If omitted, the Activity is subject to the default/current
    * Component state when the Activity starts. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_ComponentStatusType, uci::type::accessorType::pO_ComponentStatusType> ComponentStatus;

  /** Indicates the current status of the product output associated with this Activity. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductOutputCapabilityStatusImageryType, uci::type::accessorType::productOutputCapabilityStatusImageryType> ProductOutputStatus;

  /** Returns the value of the SimplePrimitive data type identified by ActualStartTime.
    *
    * @return The value of the simple primitive data type identified by ActualStartTime.
    */
  virtual uci::type::DateTimeTypeValue getActualStartTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ActualStartTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setActualStartTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by ActualStartTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActualStartTime is enabled or not.
    */
  virtual bool hasActualStartTime() const = 0;

  /** Clears (disabled) the Element identified by ActualStartTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& clearActualStartTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ActualCompletionTime.
    *
    * @return The value of the simple primitive data type identified by ActualCompletionTime.
    */
  virtual uci::type::DateTimeTypeValue getActualCompletionTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ActualCompletionTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setActualCompletionTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by ActualCompletionTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActualCompletionTime is enabled or not.
    */
  virtual bool hasActualCompletionTime() const = 0;

  /** Clears (disabled) the Element identified by ActualCompletionTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& clearActualCompletionTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AllProductsAndMessagesProduced.
    *
    * @return The value of the simple primitive data type identified by AllProductsAndMessagesProduced.
    */
  virtual xs::Boolean getAllProductsAndMessagesProduced() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AllProductsAndMessagesProduced.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setAllProductsAndMessagesProduced(xs::Boolean value) = 0;

  /** Returns whether the Element identified by AllProductsAndMessagesProduced exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AllProductsAndMessagesProduced is enabled or not.
    */
  virtual bool hasAllProductsAndMessagesProduced() const = 0;

  /** Clears (disabled) the Element identified by AllProductsAndMessagesProduced.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& clearAllProductsAndMessagesProduced() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FOV.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FOV.
    */
  virtual const uci::type::FOV_ActivityType& getFOV() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FOV.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FOV.
    */
  virtual uci::type::FOV_ActivityType& getFOV() = 0;

  /** Sets the complex content identified by FOV to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FOV.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setFOV(const uci::type::FOV_ActivityType& value) = 0;

  /** Returns whether the Element identified by FOV exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FOV is enabled or not.
    */
  virtual bool hasFOV() const = 0;

  /** Enables the Element identified by FOV.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by FOV.
    */
  virtual uci::type::FOV_ActivityType& enableFOV(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FOV.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& clearFOV() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * PointingActivityReport.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      PointingActivityReport.
    */
  virtual const uci::type::PO_TargetType& getPointingActivityReport() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PointingActivityReport.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PointingActivityReport.
    */
  virtual uci::type::PO_TargetType& getPointingActivityReport() = 0;

  /** Sets the complex content identified by PointingActivityReport to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PointingActivityReport.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setPointingActivityReport(const uci::type::PO_TargetType& value) = 0;

  /** Returns whether the Element identified by PointingActivityReport exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PointingActivityReport is enabled or not.
    */
  virtual bool hasPointingActivityReport() const = 0;

  /** Enables the Element identified by PointingActivityReport.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PointingActivityReport.
    */
  virtual uci::type::PO_TargetType& enablePointingActivityReport(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PointingActivityReport.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& clearPointingActivityReport() = 0;

  /** Returns a const reference to the bounded list identified by SubCapabilityStatus.
    *
    * @return A const reference to the bounded list identified by SubCapabilityStatus.
    */
  virtual const uci::type::PO_ActivityType::SubCapabilityStatus& getSubCapabilityStatus() const = 0;

  /** Returns a reference to the bounded list identified by SubCapabilityStatus.
    *
    * @return A reference to the bounded list identified by SubCapabilityStatus.
    */
  virtual uci::type::PO_ActivityType::SubCapabilityStatus& getSubCapabilityStatus() = 0;

  /** Sets the bounded list identified by SubCapabilityStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setSubCapabilityStatus(const uci::type::PO_ActivityType::SubCapabilityStatus& value) = 0;

  /** Returns a const reference to the bounded list identified by ComponentStatus.
    *
    * @return A const reference to the bounded list identified by ComponentStatus.
    */
  virtual const uci::type::PO_ActivityType::ComponentStatus& getComponentStatus() const = 0;

  /** Returns a reference to the bounded list identified by ComponentStatus.
    *
    * @return A reference to the bounded list identified by ComponentStatus.
    */
  virtual uci::type::PO_ActivityType::ComponentStatus& getComponentStatus() = 0;

  /** Sets the bounded list identified by ComponentStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setComponentStatus(const uci::type::PO_ActivityType::ComponentStatus& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CollectionConstraintsStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CollectionConstraintsStatus.
    */
  virtual const uci::type::PO_CollectionConstraintsStatusType& getCollectionConstraintsStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * CollectionConstraintsStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CollectionConstraintsStatus.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& getCollectionConstraintsStatus() = 0;

  /** Sets the complex content identified by CollectionConstraintsStatus to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionConstraintsStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setCollectionConstraintsStatus(const uci::type::PO_CollectionConstraintsStatusType& value) = 0;

  /** Returns whether the Element identified by CollectionConstraintsStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionConstraintsStatus is enabled or not.
    */
  virtual bool hasCollectionConstraintsStatus() const = 0;

  /** Enables the Element identified by CollectionConstraintsStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CollectionConstraintsStatus.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& enableCollectionConstraintsStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionConstraintsStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& clearCollectionConstraintsStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * TrackOptionsStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      TrackOptionsStatus.
    */
  virtual const uci::type::PO_TrackDetailsType& getTrackOptionsStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TrackOptionsStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TrackOptionsStatus.
    */
  virtual uci::type::PO_TrackDetailsType& getTrackOptionsStatus() = 0;

  /** Sets the complex content identified by TrackOptionsStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TrackOptionsStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setTrackOptionsStatus(const uci::type::PO_TrackDetailsType& value) = 0;

  /** Returns whether the Element identified by TrackOptionsStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TrackOptionsStatus is enabled or not.
    */
  virtual bool hasTrackOptionsStatus() const = 0;

  /** Enables the Element identified by TrackOptionsStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TrackOptionsStatus.
    */
  virtual uci::type::PO_TrackDetailsType& enableTrackOptionsStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TrackOptionsStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& clearTrackOptionsStatus() = 0;

  /** Returns a const reference to the bounded list identified by ProductOutputStatus.
    *
    * @return A const reference to the bounded list identified by ProductOutputStatus.
    */
  virtual const uci::type::PO_ActivityType::ProductOutputStatus& getProductOutputStatus() const = 0;

  /** Returns a reference to the bounded list identified by ProductOutputStatus.
    *
    * @return A reference to the bounded list identified by ProductOutputStatus.
    */
  virtual uci::type::PO_ActivityType::ProductOutputStatus& getProductOutputStatus() = 0;

  /** Sets the bounded list identified by ProductOutputStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setProductOutputStatus(const uci::type::PO_ActivityType::ProductOutputStatus& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SearchActivity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SearchActivity.
    */
  virtual const uci::type::SearchTrackActivityDetailsType& getSearchActivity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SearchActivity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SearchActivity.
    */
  virtual uci::type::SearchTrackActivityDetailsType& getSearchActivity() = 0;

  /** Sets the complex content identified by SearchActivity to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SearchActivity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setSearchActivity(const uci::type::SearchTrackActivityDetailsType& value) = 0;

  /** Returns whether the Element identified by SearchActivity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SearchActivity is enabled or not.
    */
  virtual bool hasSearchActivity() const = 0;

  /** Enables the Element identified by SearchActivity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SearchActivity.
    */
  virtual uci::type::SearchTrackActivityDetailsType& enableSearchActivity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SearchActivity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& clearSearchActivity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TrackActivity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TrackActivity.
    */
  virtual const uci::type::PO_TrackActivityType& getTrackActivity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TrackActivity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TrackActivity.
    */
  virtual uci::type::PO_TrackActivityType& getTrackActivity() = 0;

  /** Sets the complex content identified by TrackActivity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TrackActivity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setTrackActivity(const uci::type::PO_TrackActivityType& value) = 0;

  /** Returns whether the Element identified by TrackActivity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TrackActivity is enabled or not.
    */
  virtual bool hasTrackActivity() const = 0;

  /** Enables the Element identified by TrackActivity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TrackActivity.
    */
  virtual uci::type::PO_TrackActivityType& enableTrackActivity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TrackActivity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& clearTrackActivity() = 0;

  /** Returns a const reference to the value of the enumeration identified by FOR_State.
    *
    * @return A const reference to the value of the enumeration identified by FOR_State.
    */
  virtual const uci::type::FOR_Enum& getFOR_State() const = 0;

  /** Returns a reference to the value of the enumeration identified by FOR_State.
    *
    * @return A reference to the value of the enumeration identified by FOR_State.
    */
  virtual uci::type::FOR_Enum& getFOR_State() = 0;

  /** Sets the value of the enumeration identified by FOR_State.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setFOR_State(const uci::type::FOR_Enum& value) = 0;

  /** Sets the value of the enumeration identified by FOR_State.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setFOR_State(uci::type::FOR_Enum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by FOR_State exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FOR_State is enabled or not.
    */
  virtual bool hasFOR_State() const = 0;

  /** Enables the Element identified by FOR_State.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by FOR_State.
    */
  virtual uci::type::FOR_Enum& enableFOR_State(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FOR_State.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& clearFOR_State() = 0;

  /** Returns a const reference to the value of the enumeration identified by ThermalBlankingFOR_State.
    *
    * @return A const reference to the value of the enumeration identified by ThermalBlankingFOR_State.
    */
  virtual const uci::type::FOR_Enum& getThermalBlankingFOR_State() const = 0;

  /** Returns a reference to the value of the enumeration identified by ThermalBlankingFOR_State.
    *
    * @return A reference to the value of the enumeration identified by ThermalBlankingFOR_State.
    */
  virtual uci::type::FOR_Enum& getThermalBlankingFOR_State() = 0;

  /** Sets the value of the enumeration identified by ThermalBlankingFOR_State.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setThermalBlankingFOR_State(const uci::type::FOR_Enum& value) = 0;

  /** Sets the value of the enumeration identified by ThermalBlankingFOR_State.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setThermalBlankingFOR_State(uci::type::FOR_Enum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ThermalBlankingFOR_State exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ThermalBlankingFOR_State is enabled or not.
    */
  virtual bool hasThermalBlankingFOR_State() const = 0;

  /** Enables the Element identified by ThermalBlankingFOR_State.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ThermalBlankingFOR_State.
    */
  virtual uci::type::FOR_Enum& enableThermalBlankingFOR_State(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ThermalBlankingFOR_State.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& clearThermalBlankingFOR_State() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual const uci::type::RepetitionType& getRepetition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& getRepetition() = 0;

  /** Sets the complex content identified by Repetition to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Repetition.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& setRepetition(const uci::type::RepetitionType& value) = 0;

  /** Returns whether the Element identified by Repetition exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Repetition is enabled or not.
    */
  virtual bool hasRepetition() const = 0;

  /** Enables the Element identified by Repetition.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& enableRepetition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Repetition.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ActivityType& clearRepetition() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_ActivityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_ActivityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_ActivityType to copy from.
    */
  PO_ActivityType(const PO_ActivityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_ActivityType to the contents of the PO_ActivityType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PO_ActivityType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this PO_ActivityType.
    * @return A reference to this PO_ActivityType.
    */
  PO_ActivityType& operator=(const PO_ActivityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_ACTIVITYTYPE_H

