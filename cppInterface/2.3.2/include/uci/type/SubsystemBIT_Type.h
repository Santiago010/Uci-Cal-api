/** @file SubsystemBIT_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SUBSYSTEMBIT_TYPE_H
#define UCI_TYPE_SUBSYSTEMBIT_TYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "BIT_ID_Type.h"
#include "CapabilityID_Type.h"
#include "ComponentID_Type.h"
#include "DurationType.h"
#include "SubsystemBIT_ControlInterfacesEnum.h"
#include "VisibleString256Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SubsystemBIT_Type : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SubsystemBIT_Type.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SubsystemBIT_Type.
    */
  static UCI_EXPORT SubsystemBIT_Type& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SubsystemBIT_Type initializing the data accessed by the new SubsystemBIT_Type using the
    * data accessed by the specified SubsystemBIT_Type (cloning).
    *
    * @param accessor The SubsystemBIT_Type that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SubsystemBIT_Type.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SubsystemBIT_Type.
    */
  static UCI_EXPORT SubsystemBIT_Type& create(const SubsystemBIT_Type& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SubsystemBIT_Type. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The SubsystemBIT_Type that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SubsystemBIT_Type& accessor);

  /** Returns this accessor's type constant, i.e. subsystemBIT_Type.
    *
    * @return This accessor's type constant, i.e. subsystemBIT_Type.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::subsystemBIT_Type;
  }

  /** Returns the version that was initialized from the uci:version attribute of SubsystemBIT_Type.
    *
    * @return The version that was initialized from the uci:version attribute of SubsystemBIT_Type.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SubsystemBIT_Type& accessor) = 0;

  /** Indicates the name of a non-Component, non-Capability item tested by the BIT. BIT items can be logical or physical,
    * singular or aggregated. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::VisibleString256Type, uci::type::accessorType::visibleString256Type> BIT_ItemName;

  /** Indicates a Component that is at least partially tested by the BIT. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::ComponentID_Type, uci::type::accessorType::componentID_Type> SubsystemComponentID;

  /** Indicates a Capability that is at least partially tested by the BIT. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::CapabilityID_Type, uci::type::accessorType::capabilityID_Type> CapabilityID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by BIT_ID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by BIT_ID.
    */
  virtual const uci::type::BIT_ID_Type& getBIT_ID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by BIT_ID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by BIT_ID.
    */
  virtual uci::type::BIT_ID_Type& getBIT_ID() = 0;

  /** Sets the complex content identified by BIT_ID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by BIT_ID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemBIT_Type& setBIT_ID(const uci::type::BIT_ID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by AcceptedInterface.
    *
    * @return A const reference to the value of the enumeration identified by AcceptedInterface.
    */
  virtual const uci::type::SubsystemBIT_ControlInterfacesEnum& getAcceptedInterface() const = 0;

  /** Returns a reference to the value of the enumeration identified by AcceptedInterface.
    *
    * @return A reference to the value of the enumeration identified by AcceptedInterface.
    */
  virtual uci::type::SubsystemBIT_ControlInterfacesEnum& getAcceptedInterface() = 0;

  /** Sets the value of the enumeration identified by AcceptedInterface.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemBIT_Type& setAcceptedInterface(const uci::type::SubsystemBIT_ControlInterfacesEnum& value) = 0;

  /** Sets the value of the enumeration identified by AcceptedInterface.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemBIT_Type& setAcceptedInterface(uci::type::SubsystemBIT_ControlInterfacesEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by BIT_ItemName.
    *
    * @return A const reference to the bounded list identified by BIT_ItemName.
    */
  virtual const uci::type::SubsystemBIT_Type::BIT_ItemName& getBIT_ItemName() const = 0;

  /** Returns a reference to the bounded list identified by BIT_ItemName.
    *
    * @return A reference to the bounded list identified by BIT_ItemName.
    */
  virtual uci::type::SubsystemBIT_Type::BIT_ItemName& getBIT_ItemName() = 0;

  /** Sets the bounded list identified by BIT_ItemName.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemBIT_Type& setBIT_ItemName(const uci::type::SubsystemBIT_Type::BIT_ItemName& value) = 0;

  /** Returns a const reference to the bounded list identified by SubsystemComponentID.
    *
    * @return A const reference to the bounded list identified by SubsystemComponentID.
    */
  virtual const uci::type::SubsystemBIT_Type::SubsystemComponentID& getSubsystemComponentID() const = 0;

  /** Returns a reference to the bounded list identified by SubsystemComponentID.
    *
    * @return A reference to the bounded list identified by SubsystemComponentID.
    */
  virtual uci::type::SubsystemBIT_Type::SubsystemComponentID& getSubsystemComponentID() = 0;

  /** Sets the bounded list identified by SubsystemComponentID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemBIT_Type& setSubsystemComponentID(const uci::type::SubsystemBIT_Type::SubsystemComponentID& value) = 0;

  /** Returns a const reference to the bounded list identified by CapabilityID.
    *
    * @return A const reference to the bounded list identified by CapabilityID.
    */
  virtual const uci::type::SubsystemBIT_Type::CapabilityID& getCapabilityID() const = 0;

  /** Returns a reference to the bounded list identified by CapabilityID.
    *
    * @return A reference to the bounded list identified by CapabilityID.
    */
  virtual uci::type::SubsystemBIT_Type::CapabilityID& getCapabilityID() = 0;

  /** Sets the bounded list identified by CapabilityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemBIT_Type& setCapabilityID(const uci::type::SubsystemBIT_Type::CapabilityID& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ExpectedTestDuration.
    *
    * @return The value of the simple primitive data type identified by ExpectedTestDuration.
    */
  virtual uci::type::DurationTypeValue getExpectedTestDuration() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ExpectedTestDuration.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemBIT_Type& setExpectedTestDuration(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by ExpectedTestDuration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ExpectedTestDuration is enabled or not.
    */
  virtual bool hasExpectedTestDuration() const = 0;

  /** Clears (disabled) the Element identified by ExpectedTestDuration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemBIT_Type& clearExpectedTestDuration() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SubsystemBIT_Type() {
  }

  /** The destructor [only available to derived classes]. */
  ~SubsystemBIT_Type() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SubsystemBIT_Type to copy from.
    */
  SubsystemBIT_Type(const SubsystemBIT_Type& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SubsystemBIT_Type to the contents of the SubsystemBIT_Type on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SubsystemBIT_Type on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this SubsystemBIT_Type.
    * @return A reference to this SubsystemBIT_Type.
    */
  SubsystemBIT_Type& operator=(const SubsystemBIT_Type& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SUBSYSTEMBIT_TYPE_H

