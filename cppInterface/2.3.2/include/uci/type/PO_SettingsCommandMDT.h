/** @file PO_SettingsCommandMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_SETTINGSCOMMANDMDT_H
#define UCI_TYPE_PO_SETTINGSCOMMANDMDT_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CapabilitySettingsCommandBaseType.h"
#include "uci/type/FOR_Type.h"
#include "uci/type/PO_CollectionConstraintsSettingsType.h"
#include "uci/type/PO_ComponentSettingsType.h"
#include "uci/type/PO_MessageOutputsEnum.h"
#include "uci/type/PO_SubCapabilitySettingsType.h"
#include "uci/type/PO_TrackSettingsType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_SettingsCommandMDT : public virtual CapabilitySettingsCommandBaseType {
public:

  /** This method constructs a new PO_SettingsCommandMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_SettingsCommandMDT.
    */
  static UCI_EXPORT PO_SettingsCommandMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_SettingsCommandMDT initializing the data accessed by the new PO_SettingsCommandMDT
    * using the data accessed by the specified PO_SettingsCommandMDT (cloning).
    *
    * @param accessor The PO_SettingsCommandMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PO_SettingsCommandMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_SettingsCommandMDT.
    */
  static UCI_EXPORT PO_SettingsCommandMDT& create(const PO_SettingsCommandMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_SettingsCommandMDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The PO_SettingsCommandMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_SettingsCommandMDT& accessor);

  /** Returns this accessor's type constant, i.e. pO_SettingsCommandMDT.
    *
    * @return This accessor's type constant, i.e. pO_SettingsCommandMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_SettingsCommandMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of PO_SettingsCommandMDT.
    *
    * @return The version that was initialized from the uci:version attribute of PO_SettingsCommandMDT.
    */
  static std::string getUCITypeVersion() {
    return "002.000.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_SettingsCommandMDT& accessor) = 0;

  /** Indicates the subcapability settings to apply to this subsystem. All capabilities that are associated with the same
    * SubcapabilityID will be impacted the same in accordance to this settings command message. Any PO_Commands received
    * after this message has been processed will use these new settings unless directly overridden by settings specified in
    * the PO_Command. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_SubCapabilitySettingsType, uci::type::accessorType::pO_SubCapabilitySettingsType> SubCapability;

  /** Indicates the settings that can be applied for track. All capabilities that are associated with the same TrackOptions
    * ID in TrackSettings will be impacted the same in accordance to this settings command message. Any PO_Commands
    * received after this message has been processed will use these new settings unless directly overridden by settings
    * specified in the PO_Command. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_TrackSettingsType, uci::type::accessorType::pO_TrackSettingsType> TrackSettings;

  /** The component settings specified in this field are used to set the default component settings used by the sensor. All
    * capabilities that are associated with the same ComponentID in ComponentSettings will be impacted the same in
    * accordance to this settings command message. Any PO_Commands received after this message has been processed will use
    * these new settings unless directly overridden by settings specified in the PO_Command. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_ComponentSettingsType, uci::type::accessorType::pO_ComponentSettingsType> ComponentSettings;

  /** Specifies which messages are to be output by the Capability as the result of capability commands. Note: Only values
    * advertised in the Capability message are allowed. Any non-supported values should result in rejection of the settings
    * command. List size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum:
    * 4]
    */
  typedef uci::base::BoundedList<uci::type::PO_MessageOutputsEnum, uci::type::accessorType::pO_MessageOutputsEnum> MessageOutput;

  /** Returns a const reference to the bounded list identified by SubCapability.
    *
    * @return A const reference to the bounded list identified by SubCapability.
    */
  virtual const uci::type::PO_SettingsCommandMDT::SubCapability& getSubCapability() const = 0;

  /** Returns a reference to the bounded list identified by SubCapability.
    *
    * @return A reference to the bounded list identified by SubCapability.
    */
  virtual uci::type::PO_SettingsCommandMDT::SubCapability& getSubCapability() = 0;

  /** Sets the bounded list identified by SubCapability.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_SettingsCommandMDT& setSubCapability(const uci::type::PO_SettingsCommandMDT::SubCapability& value) = 0;

  /** Returns a const reference to the bounded list identified by TrackSettings.
    *
    * @return A const reference to the bounded list identified by TrackSettings.
    */
  virtual const uci::type::PO_SettingsCommandMDT::TrackSettings& getTrackSettings() const = 0;

  /** Returns a reference to the bounded list identified by TrackSettings.
    *
    * @return A reference to the bounded list identified by TrackSettings.
    */
  virtual uci::type::PO_SettingsCommandMDT::TrackSettings& getTrackSettings() = 0;

  /** Sets the bounded list identified by TrackSettings.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_SettingsCommandMDT& setTrackSettings(const uci::type::PO_SettingsCommandMDT::TrackSettings& value) = 0;

  /** Returns a const reference to the bounded list identified by ComponentSettings.
    *
    * @return A const reference to the bounded list identified by ComponentSettings.
    */
  virtual const uci::type::PO_SettingsCommandMDT::ComponentSettings& getComponentSettings() const = 0;

  /** Returns a reference to the bounded list identified by ComponentSettings.
    *
    * @return A reference to the bounded list identified by ComponentSettings.
    */
  virtual uci::type::PO_SettingsCommandMDT::ComponentSettings& getComponentSettings() = 0;

  /** Sets the bounded list identified by ComponentSettings.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_SettingsCommandMDT& setComponentSettings(const uci::type::PO_SettingsCommandMDT::ComponentSettings& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CollectionConstraintsSettings.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CollectionConstraintsSettings.
    */
  virtual const uci::type::PO_CollectionConstraintsSettingsType& getCollectionConstraintsSettings() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * CollectionConstraintsSettings.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CollectionConstraintsSettings.
    */
  virtual uci::type::PO_CollectionConstraintsSettingsType& getCollectionConstraintsSettings() = 0;

  /** Sets the complex content identified by CollectionConstraintsSettings to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionConstraintsSettings.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_SettingsCommandMDT& setCollectionConstraintsSettings(const uci::type::PO_CollectionConstraintsSettingsType& value) = 0;

  /** Returns whether the Element identified by CollectionConstraintsSettings exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionConstraintsSettings is enabled or not.
    */
  virtual bool hasCollectionConstraintsSettings() const = 0;

  /** Enables the Element identified by CollectionConstraintsSettings.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CollectionConstraintsSettings.
    */
  virtual uci::type::PO_CollectionConstraintsSettingsType& enableCollectionConstraintsSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionConstraintsSettings.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_SettingsCommandMDT& clearCollectionConstraintsSettings() = 0;

  /** Returns a const reference to the bounded list identified by MessageOutput.
    *
    * @return A const reference to the bounded list identified by MessageOutput.
    */
  virtual const uci::type::PO_SettingsCommandMDT::MessageOutput& getMessageOutput() const = 0;

  /** Returns a reference to the bounded list identified by MessageOutput.
    *
    * @return A reference to the bounded list identified by MessageOutput.
    */
  virtual uci::type::PO_SettingsCommandMDT::MessageOutput& getMessageOutput() = 0;

  /** Sets the bounded list identified by MessageOutput.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_SettingsCommandMDT& setMessageOutput(const uci::type::PO_SettingsCommandMDT::MessageOutput& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FOR_Settings.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FOR_Settings.
    */
  virtual const uci::type::FOR_Type& getFOR_Settings() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FOR_Settings.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FOR_Settings.
    */
  virtual uci::type::FOR_Type& getFOR_Settings() = 0;

  /** Sets the complex content identified by FOR_Settings to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FOR_Settings.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_SettingsCommandMDT& setFOR_Settings(const uci::type::FOR_Type& value) = 0;

  /** Returns whether the Element identified by FOR_Settings exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FOR_Settings is enabled or not.
    */
  virtual bool hasFOR_Settings() const = 0;

  /** Enables the Element identified by FOR_Settings.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by FOR_Settings.
    */
  virtual uci::type::FOR_Type& enableFOR_Settings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FOR_Settings.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_SettingsCommandMDT& clearFOR_Settings() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ThermalBlankingFOR_Settings.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ThermalBlankingFOR_Settings.
    */
  virtual const uci::type::FOR_Type& getThermalBlankingFOR_Settings() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ThermalBlankingFOR_Settings.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ThermalBlankingFOR_Settings.
    */
  virtual uci::type::FOR_Type& getThermalBlankingFOR_Settings() = 0;

  /** Sets the complex content identified by ThermalBlankingFOR_Settings to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ThermalBlankingFOR_Settings.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_SettingsCommandMDT& setThermalBlankingFOR_Settings(const uci::type::FOR_Type& value) = 0;

  /** Returns whether the Element identified by ThermalBlankingFOR_Settings exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ThermalBlankingFOR_Settings is enabled or not.
    */
  virtual bool hasThermalBlankingFOR_Settings() const = 0;

  /** Enables the Element identified by ThermalBlankingFOR_Settings.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ThermalBlankingFOR_Settings.
    */
  virtual uci::type::FOR_Type& enableThermalBlankingFOR_Settings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ThermalBlankingFOR_Settings.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_SettingsCommandMDT& clearThermalBlankingFOR_Settings() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_SettingsCommandMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_SettingsCommandMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_SettingsCommandMDT to copy from.
    */
  PO_SettingsCommandMDT(const PO_SettingsCommandMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_SettingsCommandMDT to the contents of the PO_SettingsCommandMDT
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PO_SettingsCommandMDT on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this PO_SettingsCommandMDT.
    * @return A reference to this PO_SettingsCommandMDT.
    */
  PO_SettingsCommandMDT& operator=(const PO_SettingsCommandMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_SETTINGSCOMMANDMDT_H

