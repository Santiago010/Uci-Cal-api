/** @file StrikeActivityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_STRIKEACTIVITYTYPE_H
#define UCI_TYPE_STRIKEACTIVITYTYPE_H

#include "uci/base/BooleanAccessor.h"
#include "uci/base/export.h"
#include "uci/type/AO_CodeType.h"
#include "uci/type/ActivityBaseType.h"
#include "uci/type/ConsentEnum.h"
#include "uci/type/DurationType.h"
#include "uci/type/EnduranceFootprintType.h"
#include "uci/type/GeoLocatedObjectType.h"
#include "uci/type/LAR_ID_Type.h"
#include "uci/type/MunitionInFlightType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class StrikeActivityType : public virtual ActivityBaseType {
public:

  /** This method constructs a new StrikeActivityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed StrikeActivityType.
    */
  static UCI_EXPORT StrikeActivityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new StrikeActivityType initializing the data accessed by the new StrikeActivityType using
    * the data accessed by the specified StrikeActivityType (cloning).
    *
    * @param accessor The StrikeActivityType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created StrikeActivityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed StrikeActivityType.
    */
  static UCI_EXPORT StrikeActivityType& create(const StrikeActivityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified StrikeActivityType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The StrikeActivityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(StrikeActivityType& accessor);

  /** Returns this accessor's type constant, i.e. strikeActivityType.
    *
    * @return This accessor's type constant, i.e. strikeActivityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::strikeActivityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of StrikeActivityType.
    *
    * @return The version that was initialized from the uci:version attribute of StrikeActivityType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const StrikeActivityType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by SelectedForKeyLoad.
    *
    * @return The value of the simple primitive data type identified by SelectedForKeyLoad.
    */
  virtual xs::Boolean getSelectedForKeyLoad() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SelectedForKeyLoad.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& setSelectedForKeyLoad(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by WeaponArmed.
    *
    * @return The value of the simple primitive data type identified by WeaponArmed.
    */
  virtual xs::Boolean getWeaponArmed() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by WeaponArmed.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& setWeaponArmed(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ReadyForRelease.
    *
    * @return The value of the simple primitive data type identified by ReadyForRelease.
    */
  virtual xs::Boolean getReadyForRelease() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ReadyForRelease.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& setReadyForRelease(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by SelectedForRelease.
    *
    * @return The value of the simple primitive data type identified by SelectedForRelease.
    */
  virtual xs::Boolean getSelectedForRelease() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SelectedForRelease.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& setSelectedForRelease(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by SelectedForJettison.
    *
    * @return The value of the simple primitive data type identified by SelectedForJettison.
    */
  virtual xs::Boolean getSelectedForJettison() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SelectedForJettison.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& setSelectedForJettison(xs::Boolean value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AssignedTarget.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AssignedTarget.
    */
  virtual const uci::type::GeoLocatedObjectType& getAssignedTarget() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AssignedTarget.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AssignedTarget.
    */
  virtual uci::type::GeoLocatedObjectType& getAssignedTarget() = 0;

  /** Sets the complex content identified by AssignedTarget to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AssignedTarget.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& setAssignedTarget(const uci::type::GeoLocatedObjectType& value) = 0;

  /** Returns whether the Element identified by AssignedTarget exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AssignedTarget is enabled or not.
    */
  virtual bool hasAssignedTarget() const = 0;

  /** Enables the Element identified by AssignedTarget.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AssignedTarget.
    */
  virtual uci::type::GeoLocatedObjectType& enableAssignedTarget(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AssignedTarget.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& clearAssignedTarget() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AO_Code.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AO_Code.
    */
  virtual const uci::type::AO_CodeType& getAO_Code() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AO_Code.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AO_Code.
    */
  virtual uci::type::AO_CodeType& getAO_Code() = 0;

  /** Sets the complex content identified by AO_Code to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AO_Code.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& setAO_Code(const uci::type::AO_CodeType& value) = 0;

  /** Returns whether the Element identified by AO_Code exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AO_Code is enabled or not.
    */
  virtual bool hasAO_Code() const = 0;

  /** Enables the Element identified by AO_Code.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AO_Code.
    */
  virtual uci::type::AO_CodeType& enableAO_Code(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AO_Code.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& clearAO_Code() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by LAR_ID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by LAR_ID.
    */
  virtual const uci::type::LAR_ID_Type& getLAR_ID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LAR_ID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LAR_ID.
    */
  virtual uci::type::LAR_ID_Type& getLAR_ID() = 0;

  /** Sets the complex content identified by LAR_ID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LAR_ID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& setLAR_ID(const uci::type::LAR_ID_Type& value) = 0;

  /** Returns whether the Element identified by LAR_ID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LAR_ID is enabled or not.
    */
  virtual bool hasLAR_ID() const = 0;

  /** Enables the Element identified by LAR_ID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by LAR_ID.
    */
  virtual uci::type::LAR_ID_Type& enableLAR_ID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LAR_ID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& clearLAR_ID() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ConsentRequired.
    *
    * @return The value of the simple primitive data type identified by ConsentRequired.
    */
  virtual xs::Boolean getConsentRequired() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ConsentRequired.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& setConsentRequired(xs::Boolean value) = 0;

  /** Returns whether the Element identified by ConsentRequired exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConsentRequired is enabled or not.
    */
  virtual bool hasConsentRequired() const = 0;

  /** Clears (disabled) the Element identified by ConsentRequired.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& clearConsentRequired() = 0;

  /** Returns a const reference to the value of the enumeration identified by ConsentState.
    *
    * @return A const reference to the value of the enumeration identified by ConsentState.
    */
  virtual const uci::type::ConsentEnum& getConsentState() const = 0;

  /** Returns a reference to the value of the enumeration identified by ConsentState.
    *
    * @return A reference to the value of the enumeration identified by ConsentState.
    */
  virtual uci::type::ConsentEnum& getConsentState() = 0;

  /** Sets the value of the enumeration identified by ConsentState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& setConsentState(const uci::type::ConsentEnum& value) = 0;

  /** Sets the value of the enumeration identified by ConsentState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& setConsentState(uci::type::ConsentEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ConsentState exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConsentState is enabled or not.
    */
  virtual bool hasConsentState() const = 0;

  /** Enables the Element identified by ConsentState.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ConsentState.
    */
  virtual uci::type::ConsentEnum& enableConsentState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ConsentState.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& clearConsentState() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by KineticFootprint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by KineticFootprint.
    */
  virtual const uci::type::EnduranceFootprintType& getKineticFootprint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by KineticFootprint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by KineticFootprint.
    */
  virtual uci::type::EnduranceFootprintType& getKineticFootprint() = 0;

  /** Sets the complex content identified by KineticFootprint to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by KineticFootprint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& setKineticFootprint(const uci::type::EnduranceFootprintType& value) = 0;

  /** Returns whether the Element identified by KineticFootprint exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by KineticFootprint is enabled or not.
    */
  virtual bool hasKineticFootprint() const = 0;

  /** Enables the Element identified by KineticFootprint.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by KineticFootprint.
    */
  virtual uci::type::EnduranceFootprintType& enableKineticFootprint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by KineticFootprint.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& clearKineticFootprint() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TargetLockAcquired.
    *
    * @return The value of the simple primitive data type identified by TargetLockAcquired.
    */
  virtual xs::Boolean getTargetLockAcquired() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TargetLockAcquired.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& setTargetLockAcquired(xs::Boolean value) = 0;

  /** Returns whether the Element identified by TargetLockAcquired exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TargetLockAcquired is enabled or not.
    */
  virtual bool hasTargetLockAcquired() const = 0;

  /** Clears (disabled) the Element identified by TargetLockAcquired.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& clearTargetLockAcquired() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by MunitionInFlight.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by MunitionInFlight.
    */
  virtual const uci::type::MunitionInFlightType& getMunitionInFlight() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MunitionInFlight.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MunitionInFlight.
    */
  virtual uci::type::MunitionInFlightType& getMunitionInFlight() = 0;

  /** Sets the complex content identified by MunitionInFlight to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MunitionInFlight.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& setMunitionInFlight(const uci::type::MunitionInFlightType& value) = 0;

  /** Returns whether the Element identified by MunitionInFlight exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MunitionInFlight is enabled or not.
    */
  virtual bool hasMunitionInFlight() const = 0;

  /** Enables the Element identified by MunitionInFlight.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MunitionInFlight.
    */
  virtual uci::type::MunitionInFlightType& enableMunitionInFlight(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MunitionInFlight.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& clearMunitionInFlight() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TimeToRelease.
    *
    * @return The value of the simple primitive data type identified by TimeToRelease.
    */
  virtual uci::type::DurationTypeValue getTimeToRelease() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TimeToRelease.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& setTimeToRelease(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by TimeToRelease exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TimeToRelease is enabled or not.
    */
  virtual bool hasTimeToRelease() const = 0;

  /** Clears (disabled) the Element identified by TimeToRelease.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StrikeActivityType& clearTimeToRelease() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  StrikeActivityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~StrikeActivityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The StrikeActivityType to copy from.
    */
  StrikeActivityType(const StrikeActivityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this StrikeActivityType to the contents of the StrikeActivityType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The StrikeActivityType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this StrikeActivityType.
    * @return A reference to this StrikeActivityType.
    */
  StrikeActivityType& operator=(const StrikeActivityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_STRIKEACTIVITYTYPE_H

