/** @file CS_SensorDataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CS_SENSORDATATYPE_H
#define UCI_TYPE_CS_SENSORDATATYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/DoubleAccessor.h"
#include "uci/base/IntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/AltitudeType.h"
#include "uci/type/AnglePositiveType.h"
#include "uci/type/AngleQuarterType.h"
#include "uci/type/CS_SensorPointingEnum.h"
#include "uci/type/CS_SensorTargetingEnum.h"
#include "uci/type/CS_SensorTypeEnum.h"
#include "uci/type/FrequencyType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type describes a receive sensor sub-capability. */
class CS_SensorDataType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CS_SensorDataType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CS_SensorDataType.
    */
  static UCI_EXPORT CS_SensorDataType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CS_SensorDataType initializing the data accessed by the new CS_SensorDataType using the
    * data accessed by the specified CS_SensorDataType (cloning).
    *
    * @param accessor The CS_SensorDataType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created CS_SensorDataType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CS_SensorDataType.
    */
  static UCI_EXPORT CS_SensorDataType& create(const CS_SensorDataType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CS_SensorDataType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The CS_SensorDataType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CS_SensorDataType& accessor);

  /** Returns this accessor's type constant, i.e. cS_SensorDataType.
    *
    * @return This accessor's type constant, i.e. cS_SensorDataType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::cS_SensorDataType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CS_SensorDataType.
    *
    * @return The version that was initialized from the uci:version attribute of CS_SensorDataType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CS_SensorDataType& accessor) = 0;

  /** Returns a const reference to the value of the enumeration identified by SensorType.
    *
    * @return A const reference to the value of the enumeration identified by SensorType.
    */
  virtual const uci::type::CS_SensorTypeEnum& getSensorType() const = 0;

  /** Returns a reference to the value of the enumeration identified by SensorType.
    *
    * @return A reference to the value of the enumeration identified by SensorType.
    */
  virtual uci::type::CS_SensorTypeEnum& getSensorType() = 0;

  /** Sets the value of the enumeration identified by SensorType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setSensorType(const uci::type::CS_SensorTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by SensorType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setSensorType(uci::type::CS_SensorTypeEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by SensorPointing.
    *
    * @return A const reference to the value of the enumeration identified by SensorPointing.
    */
  virtual const uci::type::CS_SensorPointingEnum& getSensorPointing() const = 0;

  /** Returns a reference to the value of the enumeration identified by SensorPointing.
    *
    * @return A reference to the value of the enumeration identified by SensorPointing.
    */
  virtual uci::type::CS_SensorPointingEnum& getSensorPointing() = 0;

  /** Sets the value of the enumeration identified by SensorPointing.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setSensorPointing(const uci::type::CS_SensorPointingEnum& value) = 0;

  /** Sets the value of the enumeration identified by SensorPointing.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setSensorPointing(uci::type::CS_SensorPointingEnum::EnumerationItem value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by InnerConeAngle.
    *
    * @return The value of the simple primitive data type identified by InnerConeAngle.
    */
  virtual uci::type::AnglePositiveTypeValue getInnerConeAngle() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InnerConeAngle.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setInnerConeAngle(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by InnerConeAngle exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InnerConeAngle is enabled or not.
    */
  virtual bool hasInnerConeAngle() const = 0;

  /** Clears (disabled) the Element identified by InnerConeAngle.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& clearInnerConeAngle() = 0;

  /** Returns the value of the SimplePrimitive data type identified by OuterConeAngle.
    *
    * @return The value of the simple primitive data type identified by OuterConeAngle.
    */
  virtual uci::type::AnglePositiveTypeValue getOuterConeAngle() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by OuterConeAngle.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setOuterConeAngle(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by OuterConeAngle exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OuterConeAngle is enabled or not.
    */
  virtual bool hasOuterConeAngle() const = 0;

  /** Clears (disabled) the Element identified by OuterConeAngle.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& clearOuterConeAngle() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MinClockAngle.
    *
    * @return The value of the simple primitive data type identified by MinClockAngle.
    */
  virtual uci::type::AnglePositiveTypeValue getMinClockAngle() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MinClockAngle.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setMinClockAngle(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by MinClockAngle exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MinClockAngle is enabled or not.
    */
  virtual bool hasMinClockAngle() const = 0;

  /** Clears (disabled) the Element identified by MinClockAngle.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& clearMinClockAngle() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MaxClockAngle.
    *
    * @return The value of the simple primitive data type identified by MaxClockAngle.
    */
  virtual uci::type::AnglePositiveTypeValue getMaxClockAngle() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MaxClockAngle.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setMaxClockAngle(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by MaxClockAngle exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MaxClockAngle is enabled or not.
    */
  virtual bool hasMaxClockAngle() const = 0;

  /** Clears (disabled) the Element identified by MaxClockAngle.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& clearMaxClockAngle() = 0;

  /** Returns a const reference to the value of the enumeration identified by SensorTargeting.
    *
    * @return A const reference to the value of the enumeration identified by SensorTargeting.
    */
  virtual const uci::type::CS_SensorTargetingEnum& getSensorTargeting() const = 0;

  /** Returns a reference to the value of the enumeration identified by SensorTargeting.
    *
    * @return A reference to the value of the enumeration identified by SensorTargeting.
    */
  virtual uci::type::CS_SensorTargetingEnum& getSensorTargeting() = 0;

  /** Sets the value of the enumeration identified by SensorTargeting.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setSensorTargeting(const uci::type::CS_SensorTargetingEnum& value) = 0;

  /** Sets the value of the enumeration identified by SensorTargeting.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setSensorTargeting(uci::type::CS_SensorTargetingEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by SensorTargeting exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SensorTargeting is enabled or not.
    */
  virtual bool hasSensorTargeting() const = 0;

  /** Enables the Element identified by SensorTargeting.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by SensorTargeting.
    */
  virtual uci::type::CS_SensorTargetingEnum& enableSensorTargeting(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SensorTargeting.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& clearSensorTargeting() = 0;

  /** Returns the value of the SimplePrimitive data type identified by BoreSightAzimuth.
    *
    * @return The value of the simple primitive data type identified by BoreSightAzimuth.
    */
  virtual uci::type::AnglePositiveTypeValue getBoreSightAzimuth() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by BoreSightAzimuth.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setBoreSightAzimuth(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by BoreSightAzimuth exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BoreSightAzimuth is enabled or not.
    */
  virtual bool hasBoreSightAzimuth() const = 0;

  /** Clears (disabled) the Element identified by BoreSightAzimuth.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& clearBoreSightAzimuth() = 0;

  /** Returns the value of the SimplePrimitive data type identified by BoreSightElevation.
    *
    * @return The value of the simple primitive data type identified by BoreSightElevation.
    */
  virtual uci::type::AngleQuarterTypeValue getBoreSightElevation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by BoreSightElevation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setBoreSightElevation(uci::type::AngleQuarterTypeValue value) = 0;

  /** Returns whether the Element identified by BoreSightElevation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BoreSightElevation is enabled or not.
    */
  virtual bool hasBoreSightElevation() const = 0;

  /** Clears (disabled) the Element identified by BoreSightElevation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& clearBoreSightElevation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MinAltitude.
    *
    * @return The value of the simple primitive data type identified by MinAltitude.
    */
  virtual uci::type::AltitudeTypeValue getMinAltitude() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MinAltitude.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setMinAltitude(uci::type::AltitudeTypeValue value) = 0;

  /** Returns whether the Element identified by MinAltitude exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MinAltitude is enabled or not.
    */
  virtual bool hasMinAltitude() const = 0;

  /** Clears (disabled) the Element identified by MinAltitude.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& clearMinAltitude() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MaxAltitude.
    *
    * @return The value of the simple primitive data type identified by MaxAltitude.
    */
  virtual uci::type::AltitudeTypeValue getMaxAltitude() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MaxAltitude.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setMaxAltitude(uci::type::AltitudeTypeValue value) = 0;

  /** Returns whether the Element identified by MaxAltitude exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MaxAltitude is enabled or not.
    */
  virtual bool hasMaxAltitude() const = 0;

  /** Clears (disabled) the Element identified by MaxAltitude.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& clearMaxAltitude() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AntennaDiameter.
    *
    * @return The value of the simple primitive data type identified by AntennaDiameter.
    */
  virtual xs::Double getAntennaDiameter() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AntennaDiameter.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setAntennaDiameter(xs::Double value) = 0;

  /** Returns whether the Element identified by AntennaDiameter exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AntennaDiameter is enabled or not.
    */
  virtual bool hasAntennaDiameter() const = 0;

  /** Clears (disabled) the Element identified by AntennaDiameter.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& clearAntennaDiameter() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AntennaFreq.
    *
    * @return The value of the simple primitive data type identified by AntennaFreq.
    */
  virtual uci::type::FrequencyTypeValue getAntennaFreq() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AntennaFreq.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setAntennaFreq(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by AntennaFreq exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AntennaFreq is enabled or not.
    */
  virtual bool hasAntennaFreq() const = 0;

  /** Clears (disabled) the Element identified by AntennaFreq.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& clearAntennaFreq() = 0;

  /** Returns the value of the SimplePrimitive data type identified by NumSteps.
    *
    * @return The value of the simple primitive data type identified by NumSteps.
    */
  virtual xs::Int getNumSteps() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by NumSteps.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& setNumSteps(xs::Int value) = 0;

  /** Returns whether the Element identified by NumSteps exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NumSteps is enabled or not.
    */
  virtual bool hasNumSteps() const = 0;

  /** Clears (disabled) the Element identified by NumSteps.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SensorDataType& clearNumSteps() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CS_SensorDataType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CS_SensorDataType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CS_SensorDataType to copy from.
    */
  CS_SensorDataType(const CS_SensorDataType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CS_SensorDataType to the contents of the CS_SensorDataType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CS_SensorDataType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this CS_SensorDataType.
    * @return A reference to this CS_SensorDataType.
    */
  CS_SensorDataType& operator=(const CS_SensorDataType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_CS_SENSORDATATYPE_H

