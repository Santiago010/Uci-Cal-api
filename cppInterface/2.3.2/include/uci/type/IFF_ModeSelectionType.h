/** @file IFF_ModeSelectionType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_IFF_MODESELECTIONTYPE_H
#define UCI_TYPE_IFF_MODESELECTIONTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/IFF_Mode5_FormatType.h"
#include "uci/type/IFF_ModesEnum.h"
#include "uci/type/ModeS_OptionsType.h"
#include "uci/type/OctalValueType.h"
#include "xs/type/binaryXmlSchemaPrimitives.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class IFF_ModeSelectionType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new IFF_ModeSelectionType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IFF_ModeSelectionType.
    */
  static UCI_EXPORT IFF_ModeSelectionType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new IFF_ModeSelectionType initializing the data accessed by the new IFF_ModeSelectionType
    * using the data accessed by the specified IFF_ModeSelectionType (cloning).
    *
    * @param accessor The IFF_ModeSelectionType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created IFF_ModeSelectionType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IFF_ModeSelectionType.
    */
  static UCI_EXPORT IFF_ModeSelectionType& create(const IFF_ModeSelectionType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified IFF_ModeSelectionType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The IFF_ModeSelectionType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(IFF_ModeSelectionType& accessor);

  /** Returns this accessor's type constant, i.e. iFF_ModeSelectionType.
    *
    * @return This accessor's type constant, i.e. iFF_ModeSelectionType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::iFF_ModeSelectionType;
  }

  /** Returns the version that was initialized from the uci:version attribute of IFF_ModeSelectionType.
    *
    * @return The version that was initialized from the uci:version attribute of IFF_ModeSelectionType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const IFF_ModeSelectionType& accessor) = 0;

  /** May be provided when Mode S and only Mode S is selected. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::OctalValueType, uci::type::accessorType::octalValueType> ModeS_AircraftAddress;

  /** The Registers to ask for in interrogation. Must be provided when Mode S is selected. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<xs::HexBinary, xs::accessorType::hexBinary> EHS_BDS_Registers;

  /** Returns a const reference to the value of the enumeration identified by IFF_Mode.
    *
    * @return A const reference to the value of the enumeration identified by IFF_Mode.
    */
  virtual const uci::type::IFF_ModesEnum& getIFF_Mode() const = 0;

  /** Returns a reference to the value of the enumeration identified by IFF_Mode.
    *
    * @return A reference to the value of the enumeration identified by IFF_Mode.
    */
  virtual uci::type::IFF_ModesEnum& getIFF_Mode() = 0;

  /** Sets the value of the enumeration identified by IFF_Mode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ModeSelectionType& setIFF_Mode(const uci::type::IFF_ModesEnum& value) = 0;

  /** Sets the value of the enumeration identified by IFF_Mode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ModeSelectionType& setIFF_Mode(uci::type::IFF_ModesEnum::EnumerationItem value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Mode5Format.
    *
    * @return The value of the simple primitive data type identified by Mode5Format.
    */
  virtual uci::type::IFF_Mode5_FormatTypeValue getMode5Format() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Mode5Format.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ModeSelectionType& setMode5Format(uci::type::IFF_Mode5_FormatTypeValue value) = 0;

  /** Returns whether the Element identified by Mode5Format exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mode5Format is enabled or not.
    */
  virtual bool hasMode5Format() const = 0;

  /** Clears (disabled) the Element identified by Mode5Format.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ModeSelectionType& clearMode5Format() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SuppressionPulse.
    *
    * @return The value of the simple primitive data type identified by SuppressionPulse.
    */
  virtual xs::Boolean getSuppressionPulse() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SuppressionPulse.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ModeSelectionType& setSuppressionPulse(xs::Boolean value) = 0;

  /** Returns a const reference to the bounded list identified by ModeS_AircraftAddress.
    *
    * @return A const reference to the bounded list identified by ModeS_AircraftAddress.
    */
  virtual const uci::type::IFF_ModeSelectionType::ModeS_AircraftAddress& getModeS_AircraftAddress() const = 0;

  /** Returns a reference to the bounded list identified by ModeS_AircraftAddress.
    *
    * @return A reference to the bounded list identified by ModeS_AircraftAddress.
    */
  virtual uci::type::IFF_ModeSelectionType::ModeS_AircraftAddress& getModeS_AircraftAddress() = 0;

  /** Sets the bounded list identified by ModeS_AircraftAddress.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ModeSelectionType& setModeS_AircraftAddress(const uci::type::IFF_ModeSelectionType::ModeS_AircraftAddress& value) = 0;

  /** Returns a const reference to the bounded list identified by EHS_BDS_Registers.
    *
    * @return A const reference to the bounded list identified by EHS_BDS_Registers.
    */
  virtual const uci::type::IFF_ModeSelectionType::EHS_BDS_Registers& getEHS_BDS_Registers() const = 0;

  /** Returns a reference to the bounded list identified by EHS_BDS_Registers.
    *
    * @return A reference to the bounded list identified by EHS_BDS_Registers.
    */
  virtual uci::type::IFF_ModeSelectionType::EHS_BDS_Registers& getEHS_BDS_Registers() = 0;

  /** Sets the bounded list identified by EHS_BDS_Registers.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ModeSelectionType& setEHS_BDS_Registers(const uci::type::IFF_ModeSelectionType::EHS_BDS_Registers& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ModeS_Options.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ModeS_Options.
    */
  virtual const uci::type::ModeS_OptionsType& getModeS_Options() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ModeS_Options.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ModeS_Options.
    */
  virtual uci::type::ModeS_OptionsType& getModeS_Options() = 0;

  /** Sets the complex content identified by ModeS_Options to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ModeS_Options.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ModeSelectionType& setModeS_Options(const uci::type::ModeS_OptionsType& value) = 0;

  /** Returns whether the Element identified by ModeS_Options exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ModeS_Options is enabled or not.
    */
  virtual bool hasModeS_Options() const = 0;

  /** Enables the Element identified by ModeS_Options.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ModeS_Options.
    */
  virtual uci::type::ModeS_OptionsType& enableModeS_Options(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ModeS_Options.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ModeSelectionType& clearModeS_Options() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  IFF_ModeSelectionType() {
  }

  /** The destructor [only available to derived classes]. */
  ~IFF_ModeSelectionType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The IFF_ModeSelectionType to copy from.
    */
  IFF_ModeSelectionType(const IFF_ModeSelectionType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this IFF_ModeSelectionType to the contents of the IFF_ModeSelectionType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The IFF_ModeSelectionType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this IFF_ModeSelectionType.
    * @return A reference to this IFF_ModeSelectionType.
    */
  IFF_ModeSelectionType& operator=(const IFF_ModeSelectionType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_IFF_MODESELECTIONTYPE_H

