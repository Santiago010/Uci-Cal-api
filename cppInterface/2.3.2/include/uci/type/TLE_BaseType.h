/** @file TLE_BaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_TLE_BASETYPE_H
#define UCI_TYPE_TLE_BASETYPE_H

#include "../base/DoubleAccessor.h"
#include "../base/UnsignedIntAccessor.h"
#include "../base/UnsignedShortAccessor.h"
#include "../base/export.h"
#include "COE_OrbitBaseType.h"
#include "COE_PositionType.h"
#include "DateTimeType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the default or "catalog" orbital element set (also known as two line element or TLE) for the satellite. */
class TLE_BaseType : public virtual COE_OrbitBaseType {
public:

  /** This method constructs a new TLE_BaseType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed TLE_BaseType.
    */
  static UCI_EXPORT TLE_BaseType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new TLE_BaseType initializing the data accessed by the new TLE_BaseType using the data
    * accessed by the specified TLE_BaseType (cloning).
    *
    * @param accessor The TLE_BaseType that provides access to the data that is to be used to initialize the data accessed
    *      by the new created TLE_BaseType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed TLE_BaseType.
    */
  static UCI_EXPORT TLE_BaseType& create(const TLE_BaseType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified TLE_BaseType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The TLE_BaseType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(TLE_BaseType& accessor);

  /** Returns this accessor's type constant, i.e. tLE_BaseType.
    *
    * @return This accessor's type constant, i.e. tLE_BaseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::tLE_BaseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of TLE_BaseType.
    *
    * @return The version that was initialized from the uci:version attribute of TLE_BaseType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const TLE_BaseType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Epoch.
    *
    * @return The value of the simple primitive data type identified by Epoch.
    */
  virtual uci::type::DateTimeTypeValue getEpoch() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Epoch.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TLE_BaseType& setEpoch(uci::type::DateTimeTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ElementSetNumber.
    *
    * @return The value of the simple primitive data type identified by ElementSetNumber.
    */
  virtual xs::UnsignedShort getElementSetNumber() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ElementSetNumber.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TLE_BaseType& setElementSetNumber(xs::UnsignedShort value) = 0;

  /** Returns whether the Element identified by ElementSetNumber exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ElementSetNumber is enabled or not.
    */
  virtual bool hasElementSetNumber() const = 0;

  /** Clears (disabled) the Element identified by ElementSetNumber.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TLE_BaseType& clearElementSetNumber() = 0;

  /** Returns the value of the SimplePrimitive data type identified by FirstTimeDerivativeOfMeanMotion.
    *
    * @return The value of the simple primitive data type identified by FirstTimeDerivativeOfMeanMotion.
    */
  virtual xs::Double getFirstTimeDerivativeOfMeanMotion() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FirstTimeDerivativeOfMeanMotion.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TLE_BaseType& setFirstTimeDerivativeOfMeanMotion(xs::Double value) = 0;

  /** Returns whether the Element identified by FirstTimeDerivativeOfMeanMotion exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FirstTimeDerivativeOfMeanMotion is enabled or not.
    */
  virtual bool hasFirstTimeDerivativeOfMeanMotion() const = 0;

  /** Clears (disabled) the Element identified by FirstTimeDerivativeOfMeanMotion.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TLE_BaseType& clearFirstTimeDerivativeOfMeanMotion() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SecondTimeDerivativeOfMeanMotion.
    *
    * @return The value of the simple primitive data type identified by SecondTimeDerivativeOfMeanMotion.
    */
  virtual xs::Double getSecondTimeDerivativeOfMeanMotion() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SecondTimeDerivativeOfMeanMotion.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TLE_BaseType& setSecondTimeDerivativeOfMeanMotion(xs::Double value) = 0;

  /** Returns whether the Element identified by SecondTimeDerivativeOfMeanMotion exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SecondTimeDerivativeOfMeanMotion is enabled or not.
    */
  virtual bool hasSecondTimeDerivativeOfMeanMotion() const = 0;

  /** Clears (disabled) the Element identified by SecondTimeDerivativeOfMeanMotion.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TLE_BaseType& clearSecondTimeDerivativeOfMeanMotion() = 0;

  /** Returns the value of the SimplePrimitive data type identified by BSTAR_Drag.
    *
    * @return The value of the simple primitive data type identified by BSTAR_Drag.
    */
  virtual xs::Double getBSTAR_Drag() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by BSTAR_Drag.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TLE_BaseType& setBSTAR_Drag(xs::Double value) = 0;

  /** Returns whether the Element identified by BSTAR_Drag exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BSTAR_Drag is enabled or not.
    */
  virtual bool hasBSTAR_Drag() const = 0;

  /** Clears (disabled) the Element identified by BSTAR_Drag.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TLE_BaseType& clearBSTAR_Drag() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual const uci::type::COE_PositionType& getPosition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual uci::type::COE_PositionType& getPosition() = 0;

  /** Sets the complex content identified by Position to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Position.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TLE_BaseType& setPosition(const uci::type::COE_PositionType& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by MeanMotion.
    *
    * @return The value of the simple primitive data type identified by MeanMotion.
    */
  virtual xs::Double getMeanMotion() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MeanMotion.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TLE_BaseType& setMeanMotion(xs::Double value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by RevolutionNumber.
    *
    * @return The value of the simple primitive data type identified by RevolutionNumber.
    */
  virtual xs::UnsignedInt getRevolutionNumber() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RevolutionNumber.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TLE_BaseType& setRevolutionNumber(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by RevolutionNumber exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RevolutionNumber is enabled or not.
    */
  virtual bool hasRevolutionNumber() const = 0;

  /** Clears (disabled) the Element identified by RevolutionNumber.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TLE_BaseType& clearRevolutionNumber() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  TLE_BaseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~TLE_BaseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The TLE_BaseType to copy from.
    */
  TLE_BaseType(const TLE_BaseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this TLE_BaseType to the contents of the TLE_BaseType on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The TLE_BaseType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this TLE_BaseType.
    * @return A reference to this TLE_BaseType.
    */
  TLE_BaseType& operator=(const TLE_BaseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_TLE_BASETYPE_H

