/** @file AnalyticConstraintsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ANALYTICCONSTRAINTSTYPE_H
#define UCI_TYPE_ANALYTICCONSTRAINTSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/AccessAssessmentFilterType.h"
#include "uci/type/OpConstraintWeightingType.h"
#include "uci/type/RF_TaskPerformanceType.h"
#include "uci/type/SurvivabilityRiskSettingType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class AnalyticConstraintsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new AnalyticConstraintsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AnalyticConstraintsType.
    */
  static UCI_EXPORT AnalyticConstraintsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new AnalyticConstraintsType initializing the data accessed by the new
    * AnalyticConstraintsType using the data accessed by the specified AnalyticConstraintsType (cloning).
    *
    * @param accessor The AnalyticConstraintsType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created AnalyticConstraintsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AnalyticConstraintsType.
    */
  static UCI_EXPORT AnalyticConstraintsType& create(const AnalyticConstraintsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified AnalyticConstraintsType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The AnalyticConstraintsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(AnalyticConstraintsType& accessor);

  /** Returns this accessor's type constant, i.e. analyticConstraintsType.
    *
    * @return This accessor's type constant, i.e. analyticConstraintsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::analyticConstraintsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of AnalyticConstraintsType.
    *
    * @return The version that was initialized from the uci:version attribute of AnalyticConstraintsType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AnalyticConstraintsType& accessor) = 0;

  /** Indicates an operational constraint to achieve. The multiplicity is based on the list of available OpConstraintEnums.
    * [Occurrences: Minimum: 0; Maximum: 15]
    */
  typedef uci::base::BoundedList<uci::type::OpConstraintWeightingType, uci::type::accessorType::opConstraintWeightingType> OpConstraint;

  /** Identifies the Risk Level constraint for each provided RiskPriortization (max of 4). [Occurrences: Minimum: 0;
    * Maximum: 4]
    */
  typedef uci::base::BoundedList<uci::type::SurvivabilityRiskSettingType, uci::type::accessorType::survivabilityRiskSettingType> RiskSetting;

  /** Returns a const reference to the bounded list identified by OpConstraint.
    *
    * @return A const reference to the bounded list identified by OpConstraint.
    */
  virtual const uci::type::AnalyticConstraintsType::OpConstraint& getOpConstraint() const = 0;

  /** Returns a reference to the bounded list identified by OpConstraint.
    *
    * @return A reference to the bounded list identified by OpConstraint.
    */
  virtual uci::type::AnalyticConstraintsType::OpConstraint& getOpConstraint() = 0;

  /** Sets the bounded list identified by OpConstraint.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AnalyticConstraintsType& setOpConstraint(const uci::type::AnalyticConstraintsType::OpConstraint& value) = 0;

  /** Returns a const reference to the bounded list identified by RiskSetting.
    *
    * @return A const reference to the bounded list identified by RiskSetting.
    */
  virtual const uci::type::AnalyticConstraintsType::RiskSetting& getRiskSetting() const = 0;

  /** Returns a reference to the bounded list identified by RiskSetting.
    *
    * @return A reference to the bounded list identified by RiskSetting.
    */
  virtual uci::type::AnalyticConstraintsType::RiskSetting& getRiskSetting() = 0;

  /** Sets the bounded list identified by RiskSetting.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AnalyticConstraintsType& setRiskSetting(const uci::type::AnalyticConstraintsType::RiskSetting& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AccessAssessmentThreshold.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AccessAssessmentThreshold.
    */
  virtual const uci::type::AccessAssessmentFilterType& getAccessAssessmentThreshold() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * AccessAssessmentThreshold.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AccessAssessmentThreshold.
    */
  virtual uci::type::AccessAssessmentFilterType& getAccessAssessmentThreshold() = 0;

  /** Sets the complex content identified by AccessAssessmentThreshold to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AccessAssessmentThreshold.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AnalyticConstraintsType& setAccessAssessmentThreshold(const uci::type::AccessAssessmentFilterType& value) = 0;

  /** Returns whether the Element identified by AccessAssessmentThreshold exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AccessAssessmentThreshold is enabled or not.
    */
  virtual bool hasAccessAssessmentThreshold() const = 0;

  /** Enables the Element identified by AccessAssessmentThreshold.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AccessAssessmentThreshold.
    */
  virtual uci::type::AccessAssessmentFilterType& enableAccessAssessmentThreshold(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AccessAssessmentThreshold.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AnalyticConstraintsType& clearAccessAssessmentThreshold() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RF_TaskPerformance.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RF_TaskPerformance.
    */
  virtual const uci::type::RF_TaskPerformanceType& getRF_TaskPerformance() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RF_TaskPerformance.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RF_TaskPerformance.
    */
  virtual uci::type::RF_TaskPerformanceType& getRF_TaskPerformance() = 0;

  /** Sets the complex content identified by RF_TaskPerformance to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RF_TaskPerformance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AnalyticConstraintsType& setRF_TaskPerformance(const uci::type::RF_TaskPerformanceType& value) = 0;

  /** Returns whether the Element identified by RF_TaskPerformance exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RF_TaskPerformance is enabled or not.
    */
  virtual bool hasRF_TaskPerformance() const = 0;

  /** Enables the Element identified by RF_TaskPerformance.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RF_TaskPerformance.
    */
  virtual uci::type::RF_TaskPerformanceType& enableRF_TaskPerformance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RF_TaskPerformance.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AnalyticConstraintsType& clearRF_TaskPerformance() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AnalyticConstraintsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~AnalyticConstraintsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AnalyticConstraintsType to copy from.
    */
  AnalyticConstraintsType(const AnalyticConstraintsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AnalyticConstraintsType to the contents of the
    * AnalyticConstraintsType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The AnalyticConstraintsType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this AnalyticConstraintsType.
    * @return A reference to this AnalyticConstraintsType.
    */
  AnalyticConstraintsType& operator=(const AnalyticConstraintsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ANALYTICCONSTRAINTSTYPE_H

