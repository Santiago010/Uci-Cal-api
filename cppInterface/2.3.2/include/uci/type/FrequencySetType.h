/** @file FrequencySetType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_FREQUENCYSETTYPE_H
#define UCI_TYPE_FREQUENCYSETTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "FrequencyMultiChannelType.h"
#include "FrequencyRangeType.h"
#include "ModulationEnum.h"
#include "RF_SignalContentEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Modeled after SensorSpecificData in the ACTDF standard. */
class FrequencySetType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new FrequencySetType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed FrequencySetType.
    */
  static UCI_EXPORT FrequencySetType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new FrequencySetType initializing the data accessed by the new FrequencySetType using the
    * data accessed by the specified FrequencySetType (cloning).
    *
    * @param accessor The FrequencySetType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created FrequencySetType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed FrequencySetType.
    */
  static UCI_EXPORT FrequencySetType& create(const FrequencySetType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified FrequencySetType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The FrequencySetType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(FrequencySetType& accessor);

  /** Returns this accessor's type constant, i.e. frequencySetType.
    *
    * @return This accessor's type constant, i.e. frequencySetType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::frequencySetType;
  }

  /** Returns the version that was initialized from the uci:version attribute of FrequencySetType.
    *
    * @return The version that was initialized from the uci:version attribute of FrequencySetType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.001.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const FrequencySetType& accessor) = 0;

  /** Indicates frequency or frequencies, expressed by either a single frequency, frequency range, or any multiple and
    * combination of the two. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FrequencyRangeType, uci::type::accessorType::frequencyRangeType> FrequencyRange;

  /** Indicates the signal modulation. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 62]
    */
  typedef uci::base::BoundedList<uci::type::ModulationEnum, uci::type::accessorType::modulationEnum> Modulation;

  /** Returns a const reference to the bounded list identified by FrequencyRange.
    *
    * @return A const reference to the bounded list identified by FrequencyRange.
    */
  virtual const uci::type::FrequencySetType::FrequencyRange& getFrequencyRange() const = 0;

  /** Returns a reference to the bounded list identified by FrequencyRange.
    *
    * @return A reference to the bounded list identified by FrequencyRange.
    */
  virtual uci::type::FrequencySetType::FrequencyRange& getFrequencyRange() = 0;

  /** Sets the bounded list identified by FrequencyRange.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FrequencySetType& setFrequencyRange(const uci::type::FrequencySetType::FrequencyRange& value) = 0;

  /** Returns a const reference to the bounded list identified by Modulation.
    *
    * @return A const reference to the bounded list identified by Modulation.
    */
  virtual const uci::type::FrequencySetType::Modulation& getModulation() const = 0;

  /** Returns a reference to the bounded list identified by Modulation.
    *
    * @return A reference to the bounded list identified by Modulation.
    */
  virtual uci::type::FrequencySetType::Modulation& getModulation() = 0;

  /** Sets the bounded list identified by Modulation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FrequencySetType& setModulation(const uci::type::FrequencySetType::Modulation& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Encrypted.
    *
    * @return The value of the simple primitive data type identified by Encrypted.
    */
  virtual xs::Boolean getEncrypted() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Encrypted.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FrequencySetType& setEncrypted(xs::Boolean value) = 0;

  /** Returns whether the Element identified by Encrypted exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Encrypted is enabled or not.
    */
  virtual bool hasEncrypted() const = 0;

  /** Clears (disabled) the Element identified by Encrypted.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FrequencySetType& clearEncrypted() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by MultiChannel.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by MultiChannel.
    */
  virtual const uci::type::FrequencyMultiChannelType& getMultiChannel() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MultiChannel.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MultiChannel.
    */
  virtual uci::type::FrequencyMultiChannelType& getMultiChannel() = 0;

  /** Sets the complex content identified by MultiChannel to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MultiChannel.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FrequencySetType& setMultiChannel(const uci::type::FrequencyMultiChannelType& value) = 0;

  /** Returns whether the Element identified by MultiChannel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MultiChannel is enabled or not.
    */
  virtual bool hasMultiChannel() const = 0;

  /** Enables the Element identified by MultiChannel.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MultiChannel.
    */
  virtual uci::type::FrequencyMultiChannelType& enableMultiChannel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MultiChannel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FrequencySetType& clearMultiChannel() = 0;

  /** Returns a const reference to the value of the enumeration identified by Content.
    *
    * @return A const reference to the value of the enumeration identified by Content.
    */
  virtual const uci::type::RF_SignalContentEnum& getContent() const = 0;

  /** Returns a reference to the value of the enumeration identified by Content.
    *
    * @return A reference to the value of the enumeration identified by Content.
    */
  virtual uci::type::RF_SignalContentEnum& getContent() = 0;

  /** Sets the value of the enumeration identified by Content.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FrequencySetType& setContent(const uci::type::RF_SignalContentEnum& value) = 0;

  /** Sets the value of the enumeration identified by Content.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FrequencySetType& setContent(uci::type::RF_SignalContentEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Content exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Content is enabled or not.
    */
  virtual bool hasContent() const = 0;

  /** Enables the Element identified by Content.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Content.
    */
  virtual uci::type::RF_SignalContentEnum& enableContent(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Content.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FrequencySetType& clearContent() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  FrequencySetType() {
  }

  /** The destructor [only available to derived classes]. */
  ~FrequencySetType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The FrequencySetType to copy from.
    */
  FrequencySetType(const FrequencySetType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this FrequencySetType to the contents of the FrequencySetType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The FrequencySetType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this FrequencySetType.
    * @return A reference to this FrequencySetType.
    */
  FrequencySetType& operator=(const FrequencySetType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_FREQUENCYSETTYPE_H

