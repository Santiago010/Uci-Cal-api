/** @file ECEF_PositionOrientationCovarianceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ECEF_POSITIONORIENTATIONCOVARIANCETYPE_H
#define UCI_TYPE_ECEF_POSITIONORIENTATIONCOVARIANCETYPE_H

#include "../base/Accessor.h"
#include "../base/DoubleAccessor.h"
#include "../base/export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The 1-sigma position-orientation covariance terms in the Earth-Centered-Earth-Fixed (ECEF) coordinate system. The
  * covariances are symmetric and therefore the covariance values expressed here are the minimum set.
  */
class ECEF_PositionOrientationCovarianceType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ECEF_PositionOrientationCovarianceType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ECEF_PositionOrientationCovarianceType.
    */
  static UCI_EXPORT ECEF_PositionOrientationCovarianceType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ECEF_PositionOrientationCovarianceType initializing the data accessed by the new
    * ECEF_PositionOrientationCovarianceType using the data accessed by the specified
    * ECEF_PositionOrientationCovarianceType (cloning).
    *
    * @param accessor The ECEF_PositionOrientationCovarianceType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created ECEF_PositionOrientationCovarianceType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ECEF_PositionOrientationCovarianceType.
    */
  static UCI_EXPORT ECEF_PositionOrientationCovarianceType& create(const ECEF_PositionOrientationCovarianceType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ECEF_PositionOrientationCovarianceType. Use of the specified accessor after it has
    * been destroyed will result in undefined behavior.
    *
    * @param accessor The ECEF_PositionOrientationCovarianceType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ECEF_PositionOrientationCovarianceType& accessor);

  /** Returns this accessor's type constant, i.e. eCEF_PositionOrientationCovarianceType.
    *
    * @return This accessor's type constant, i.e. eCEF_PositionOrientationCovarianceType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::eCEF_PositionOrientationCovarianceType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ECEF_PositionOrientationCovarianceType.
    *
    * @return The version that was initialized from the uci:version attribute of ECEF_PositionOrientationCovarianceType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ECEF_PositionOrientationCovarianceType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by PxRr.
    *
    * @return The value of the simple primitive data type identified by PxRr.
    */
  virtual xs::Double getPxRr() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PxRr.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_PositionOrientationCovarianceType& setPxRr(xs::Double value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by PxRp.
    *
    * @return The value of the simple primitive data type identified by PxRp.
    */
  virtual xs::Double getPxRp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PxRp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_PositionOrientationCovarianceType& setPxRp(xs::Double value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by PxRy.
    *
    * @return The value of the simple primitive data type identified by PxRy.
    */
  virtual xs::Double getPxRy() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PxRy.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_PositionOrientationCovarianceType& setPxRy(xs::Double value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by PyRr.
    *
    * @return The value of the simple primitive data type identified by PyRr.
    */
  virtual xs::Double getPyRr() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PyRr.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_PositionOrientationCovarianceType& setPyRr(xs::Double value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by PyRp.
    *
    * @return The value of the simple primitive data type identified by PyRp.
    */
  virtual xs::Double getPyRp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PyRp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_PositionOrientationCovarianceType& setPyRp(xs::Double value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by PyRy.
    *
    * @return The value of the simple primitive data type identified by PyRy.
    */
  virtual xs::Double getPyRy() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PyRy.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_PositionOrientationCovarianceType& setPyRy(xs::Double value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by PzRr.
    *
    * @return The value of the simple primitive data type identified by PzRr.
    */
  virtual xs::Double getPzRr() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PzRr.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_PositionOrientationCovarianceType& setPzRr(xs::Double value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by PzRp.
    *
    * @return The value of the simple primitive data type identified by PzRp.
    */
  virtual xs::Double getPzRp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PzRp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_PositionOrientationCovarianceType& setPzRp(xs::Double value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by PzRy.
    *
    * @return The value of the simple primitive data type identified by PzRy.
    */
  virtual xs::Double getPzRy() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PzRy.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_PositionOrientationCovarianceType& setPzRy(xs::Double value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ECEF_PositionOrientationCovarianceType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ECEF_PositionOrientationCovarianceType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ECEF_PositionOrientationCovarianceType to copy from.
    */
  ECEF_PositionOrientationCovarianceType(const ECEF_PositionOrientationCovarianceType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ECEF_PositionOrientationCovarianceType to the contents of the
    * ECEF_PositionOrientationCovarianceType on the right hand side (rhs) of the assignment operator [only available to
    * derived classes].
    *
    * @param rhs The ECEF_PositionOrientationCovarianceType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this ECEF_PositionOrientationCovarianceType.
    * @return A reference to this ECEF_PositionOrientationCovarianceType.
    */
  ECEF_PositionOrientationCovarianceType& operator=(const ECEF_PositionOrientationCovarianceType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ECEF_POSITIONORIENTATIONCOVARIANCETYPE_H

