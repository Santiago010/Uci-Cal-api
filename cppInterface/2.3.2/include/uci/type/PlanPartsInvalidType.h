/** @file PlanPartsInvalidType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLANPARTSINVALIDTYPE_H
#define UCI_TYPE_PLANPARTSINVALIDTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ActionPlanInvalidType.h"
#include "uci/type/ActivityPlanInvalidType.h"
#include "uci/type/EffectPlanInvalidType.h"
#include "uci/type/OrbitActivityPlanInvalidType.h"
#include "uci/type/OrbitPlanInvalidType.h"
#include "uci/type/ResponsePlanInvalidType.h"
#include "uci/type/RouteActivityPlanInvalidType.h"
#include "uci/type/RoutePlanInvalidType.h"
#include "uci/type/TaskPlanInvalidType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PlanPartsInvalidType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PlanPartsInvalidType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanPartsInvalidType.
    */
  static UCI_EXPORT PlanPartsInvalidType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlanPartsInvalidType initializing the data accessed by the new PlanPartsInvalidType
    * using the data accessed by the specified PlanPartsInvalidType (cloning).
    *
    * @param accessor The PlanPartsInvalidType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PlanPartsInvalidType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanPartsInvalidType.
    */
  static UCI_EXPORT PlanPartsInvalidType& create(const PlanPartsInvalidType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlanPartsInvalidType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The PlanPartsInvalidType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlanPartsInvalidType& accessor);

  /** Returns this accessor's type constant, i.e. planPartsInvalidType.
    *
    * @return This accessor's type constant, i.e. planPartsInvalidType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::planPartsInvalidType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlanPartsInvalidType.
    *
    * @return The version that was initialized from the uci:version attribute of PlanPartsInvalidType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlanPartsInvalidType& accessor) = 0;

  /** Indicates a TaskPlan or Plans which have been found to be invalid, along with the accompanying details. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::TaskPlanInvalidType, uci::type::accessorType::taskPlanInvalidType> TaskPlan;

  /** Indicates a RoutePlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RoutePlanInvalidType, uci::type::accessorType::routePlanInvalidType> RoutePlan;

  /** Indicates an OrbitPlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OrbitPlanInvalidType, uci::type::accessorType::orbitPlanInvalidType> OrbitPlan;

  /** Indicates a RouteActivityPlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RouteActivityPlanInvalidType, uci::type::accessorType::routeActivityPlanInvalidType> RouteActivityPlan;

  /** Indicates an OrbitActivityPlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OrbitActivityPlanInvalidType, uci::type::accessorType::orbitActivityPlanInvalidType> OrbitActivityPlan;

  /** Indicates an ActivityPlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ActivityPlanInvalidType, uci::type::accessorType::activityPlanInvalidType> ActivityPlan;

  /** Indicates an EffectPlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EffectPlanInvalidType, uci::type::accessorType::effectPlanInvalidType> EffectPlan;

  /** Indicates an ActionPlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ActionPlanInvalidType, uci::type::accessorType::actionPlanInvalidType> ActionPlan;

  /** Indicates a ResponsePlan or Plans which have been found to be invalid, along with the accompanying details.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ResponsePlanInvalidType, uci::type::accessorType::responsePlanInvalidType> ResponsePlan;

  /** Returns a const reference to the bounded list identified by TaskPlan.
    *
    * @return A const reference to the bounded list identified by TaskPlan.
    */
  virtual const uci::type::PlanPartsInvalidType::TaskPlan& getTaskPlan() const = 0;

  /** Returns a reference to the bounded list identified by TaskPlan.
    *
    * @return A reference to the bounded list identified by TaskPlan.
    */
  virtual uci::type::PlanPartsInvalidType::TaskPlan& getTaskPlan() = 0;

  /** Sets the bounded list identified by TaskPlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsInvalidType& setTaskPlan(const uci::type::PlanPartsInvalidType::TaskPlan& value) = 0;

  /** Returns a const reference to the bounded list identified by RoutePlan.
    *
    * @return A const reference to the bounded list identified by RoutePlan.
    */
  virtual const uci::type::PlanPartsInvalidType::RoutePlan& getRoutePlan() const = 0;

  /** Returns a reference to the bounded list identified by RoutePlan.
    *
    * @return A reference to the bounded list identified by RoutePlan.
    */
  virtual uci::type::PlanPartsInvalidType::RoutePlan& getRoutePlan() = 0;

  /** Sets the bounded list identified by RoutePlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsInvalidType& setRoutePlan(const uci::type::PlanPartsInvalidType::RoutePlan& value) = 0;

  /** Returns a const reference to the bounded list identified by OrbitPlan.
    *
    * @return A const reference to the bounded list identified by OrbitPlan.
    */
  virtual const uci::type::PlanPartsInvalidType::OrbitPlan& getOrbitPlan() const = 0;

  /** Returns a reference to the bounded list identified by OrbitPlan.
    *
    * @return A reference to the bounded list identified by OrbitPlan.
    */
  virtual uci::type::PlanPartsInvalidType::OrbitPlan& getOrbitPlan() = 0;

  /** Sets the bounded list identified by OrbitPlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsInvalidType& setOrbitPlan(const uci::type::PlanPartsInvalidType::OrbitPlan& value) = 0;

  /** Returns a const reference to the bounded list identified by RouteActivityPlan.
    *
    * @return A const reference to the bounded list identified by RouteActivityPlan.
    */
  virtual const uci::type::PlanPartsInvalidType::RouteActivityPlan& getRouteActivityPlan() const = 0;

  /** Returns a reference to the bounded list identified by RouteActivityPlan.
    *
    * @return A reference to the bounded list identified by RouteActivityPlan.
    */
  virtual uci::type::PlanPartsInvalidType::RouteActivityPlan& getRouteActivityPlan() = 0;

  /** Sets the bounded list identified by RouteActivityPlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsInvalidType& setRouteActivityPlan(const uci::type::PlanPartsInvalidType::RouteActivityPlan& value) = 0;

  /** Returns a const reference to the bounded list identified by OrbitActivityPlan.
    *
    * @return A const reference to the bounded list identified by OrbitActivityPlan.
    */
  virtual const uci::type::PlanPartsInvalidType::OrbitActivityPlan& getOrbitActivityPlan() const = 0;

  /** Returns a reference to the bounded list identified by OrbitActivityPlan.
    *
    * @return A reference to the bounded list identified by OrbitActivityPlan.
    */
  virtual uci::type::PlanPartsInvalidType::OrbitActivityPlan& getOrbitActivityPlan() = 0;

  /** Sets the bounded list identified by OrbitActivityPlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsInvalidType& setOrbitActivityPlan(const uci::type::PlanPartsInvalidType::OrbitActivityPlan& value) = 0;

  /** Returns a const reference to the bounded list identified by ActivityPlan.
    *
    * @return A const reference to the bounded list identified by ActivityPlan.
    */
  virtual const uci::type::PlanPartsInvalidType::ActivityPlan& getActivityPlan() const = 0;

  /** Returns a reference to the bounded list identified by ActivityPlan.
    *
    * @return A reference to the bounded list identified by ActivityPlan.
    */
  virtual uci::type::PlanPartsInvalidType::ActivityPlan& getActivityPlan() = 0;

  /** Sets the bounded list identified by ActivityPlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsInvalidType& setActivityPlan(const uci::type::PlanPartsInvalidType::ActivityPlan& value) = 0;

  /** Returns a const reference to the bounded list identified by EffectPlan.
    *
    * @return A const reference to the bounded list identified by EffectPlan.
    */
  virtual const uci::type::PlanPartsInvalidType::EffectPlan& getEffectPlan() const = 0;

  /** Returns a reference to the bounded list identified by EffectPlan.
    *
    * @return A reference to the bounded list identified by EffectPlan.
    */
  virtual uci::type::PlanPartsInvalidType::EffectPlan& getEffectPlan() = 0;

  /** Sets the bounded list identified by EffectPlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsInvalidType& setEffectPlan(const uci::type::PlanPartsInvalidType::EffectPlan& value) = 0;

  /** Returns a const reference to the bounded list identified by ActionPlan.
    *
    * @return A const reference to the bounded list identified by ActionPlan.
    */
  virtual const uci::type::PlanPartsInvalidType::ActionPlan& getActionPlan() const = 0;

  /** Returns a reference to the bounded list identified by ActionPlan.
    *
    * @return A reference to the bounded list identified by ActionPlan.
    */
  virtual uci::type::PlanPartsInvalidType::ActionPlan& getActionPlan() = 0;

  /** Sets the bounded list identified by ActionPlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsInvalidType& setActionPlan(const uci::type::PlanPartsInvalidType::ActionPlan& value) = 0;

  /** Returns a const reference to the bounded list identified by ResponsePlan.
    *
    * @return A const reference to the bounded list identified by ResponsePlan.
    */
  virtual const uci::type::PlanPartsInvalidType::ResponsePlan& getResponsePlan() const = 0;

  /** Returns a reference to the bounded list identified by ResponsePlan.
    *
    * @return A reference to the bounded list identified by ResponsePlan.
    */
  virtual uci::type::PlanPartsInvalidType::ResponsePlan& getResponsePlan() = 0;

  /** Sets the bounded list identified by ResponsePlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsInvalidType& setResponsePlan(const uci::type::PlanPartsInvalidType::ResponsePlan& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlanPartsInvalidType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlanPartsInvalidType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlanPartsInvalidType to copy from.
    */
  PlanPartsInvalidType(const PlanPartsInvalidType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlanPartsInvalidType to the contents of the PlanPartsInvalidType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PlanPartsInvalidType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this PlanPartsInvalidType.
    * @return A reference to this PlanPartsInvalidType.
    */
  PlanPartsInvalidType& operator=(const PlanPartsInvalidType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLANPARTSINVALIDTYPE_H

