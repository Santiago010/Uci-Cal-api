/** @file ActivityPlanPartsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ACTIVITYPLANPARTSTYPE_H
#define UCI_TYPE_ACTIVITYPLANPARTSTYPE_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CapabilityTypeEnum.h"
#include "uci/type/EmptyType.h"
#include "uci/type/PlanPartsBaseType.h"
#include "uci/type/SupportCapabilityTypeEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ActivityPlanPartsType : public virtual PlanPartsBaseType {
public:

  /** This method constructs a new ActivityPlanPartsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ActivityPlanPartsType.
    */
  static UCI_EXPORT ActivityPlanPartsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ActivityPlanPartsType initializing the data accessed by the new ActivityPlanPartsType
    * using the data accessed by the specified ActivityPlanPartsType (cloning).
    *
    * @param accessor The ActivityPlanPartsType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created ActivityPlanPartsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ActivityPlanPartsType.
    */
  static UCI_EXPORT ActivityPlanPartsType& create(const ActivityPlanPartsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ActivityPlanPartsType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The ActivityPlanPartsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ActivityPlanPartsType& accessor);

  /** Returns this accessor's type constant, i.e. activityPlanPartsType.
    *
    * @return This accessor's type constant, i.e. activityPlanPartsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::activityPlanPartsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ActivityPlanPartsType.
    *
    * @return The version that was initialized from the uci:version attribute of ActivityPlanPartsType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ActivityPlanPartsType& accessor) = 0;

  /** Indicates an applicable CapabilityCommand-based planned Activity type; a [*Capability]Command type applicable to the
    * *ActivityPlan. List size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0;
    * Maximum: 25]
    */
  typedef uci::base::BoundedList<uci::type::CapabilityTypeEnum, uci::type::accessorType::capabilityTypeEnum> CapabilityCommand;

  /** Indicates an applicable Supporting CapabilityCommand-based planned Activity type; a [*Supporting Capability]Command
    * type applicable to the *ActivityPlan. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 4]
    */
  typedef uci::base::BoundedList<uci::type::SupportCapabilityTypeEnum, uci::type::accessorType::supportCapabilityTypeEnum> SupportingCapabilityCommand;

  /** Returns a const reference to the bounded list identified by CapabilityCommand.
    *
    * @return A const reference to the bounded list identified by CapabilityCommand.
    */
  virtual const uci::type::ActivityPlanPartsType::CapabilityCommand& getCapabilityCommand() const = 0;

  /** Returns a reference to the bounded list identified by CapabilityCommand.
    *
    * @return A reference to the bounded list identified by CapabilityCommand.
    */
  virtual uci::type::ActivityPlanPartsType::CapabilityCommand& getCapabilityCommand() = 0;

  /** Sets the bounded list identified by CapabilityCommand.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityPlanPartsType& setCapabilityCommand(const uci::type::ActivityPlanPartsType::CapabilityCommand& value) = 0;

  /** Returns a const reference to the bounded list identified by SupportingCapabilityCommand.
    *
    * @return A const reference to the bounded list identified by SupportingCapabilityCommand.
    */
  virtual const uci::type::ActivityPlanPartsType::SupportingCapabilityCommand& getSupportingCapabilityCommand() const = 0;

  /** Returns a reference to the bounded list identified by SupportingCapabilityCommand.
    *
    * @return A reference to the bounded list identified by SupportingCapabilityCommand.
    */
  virtual uci::type::ActivityPlanPartsType::SupportingCapabilityCommand& getSupportingCapabilityCommand() = 0;

  /** Sets the bounded list identified by SupportingCapabilityCommand.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityPlanPartsType& setSupportingCapabilityCommand(const uci::type::ActivityPlanPartsType::SupportingCapabilityCommand& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by VehicleSettings.
    *
    * @return A const reference to the accessor that provides access to the string identified by VehicleSettings.
    */
  virtual const uci::type::EmptyType& getVehicleSettings() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by VehicleSettings.
    *
    * @return A reference to the accessor that provides access to the string identified by VehicleSettings.
    */
  virtual uci::type::EmptyType& getVehicleSettings() = 0;

  /** Sets the string identified by VehicleSettings to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by VehicleSettings.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityPlanPartsType& setVehicleSettings(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by VehicleSettings to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityPlanPartsType& setVehicleSettings(const std::string& value) = 0;

  /** Sets the string identified by VehicleSettings to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityPlanPartsType& setVehicleSettings(const char* value) = 0;

  /** Returns whether the Element identified by VehicleSettings exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VehicleSettings is enabled or not.
    */
  virtual bool hasVehicleSettings() const = 0;

  /** Enables the Element identified by VehicleSettings.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by VehicleSettings.
    */
  virtual uci::type::EmptyType& enableVehicleSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VehicleSettings.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityPlanPartsType& clearVehicleSettings() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by CommsUsage.
    *
    * @return A const reference to the accessor that provides access to the string identified by CommsUsage.
    */
  virtual const uci::type::EmptyType& getCommsUsage() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by CommsUsage.
    *
    * @return A reference to the accessor that provides access to the string identified by CommsUsage.
    */
  virtual uci::type::EmptyType& getCommsUsage() = 0;

  /** Sets the string identified by CommsUsage to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by CommsUsage.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityPlanPartsType& setCommsUsage(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by CommsUsage to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityPlanPartsType& setCommsUsage(const std::string& value) = 0;

  /** Sets the string identified by CommsUsage to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityPlanPartsType& setCommsUsage(const char* value) = 0;

  /** Returns whether the Element identified by CommsUsage exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CommsUsage is enabled or not.
    */
  virtual bool hasCommsUsage() const = 0;

  /** Enables the Element identified by CommsUsage.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by CommsUsage.
    */
  virtual uci::type::EmptyType& enableCommsUsage(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CommsUsage.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityPlanPartsType& clearCommsUsage() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ProductTasks.
    *
    * @return A const reference to the accessor that provides access to the string identified by ProductTasks.
    */
  virtual const uci::type::EmptyType& getProductTasks() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ProductTasks.
    *
    * @return A reference to the accessor that provides access to the string identified by ProductTasks.
    */
  virtual uci::type::EmptyType& getProductTasks() = 0;

  /** Sets the string identified by ProductTasks to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ProductTasks.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityPlanPartsType& setProductTasks(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by ProductTasks to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityPlanPartsType& setProductTasks(const std::string& value) = 0;

  /** Sets the string identified by ProductTasks to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityPlanPartsType& setProductTasks(const char* value) = 0;

  /** Returns whether the Element identified by ProductTasks exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProductTasks is enabled or not.
    */
  virtual bool hasProductTasks() const = 0;

  /** Enables the Element identified by ProductTasks.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ProductTasks.
    */
  virtual uci::type::EmptyType& enableProductTasks(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ProductTasks.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityPlanPartsType& clearProductTasks() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ActivityPlanPartsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ActivityPlanPartsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ActivityPlanPartsType to copy from.
    */
  ActivityPlanPartsType(const ActivityPlanPartsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ActivityPlanPartsType to the contents of the ActivityPlanPartsType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ActivityPlanPartsType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this ActivityPlanPartsType.
    * @return A reference to this ActivityPlanPartsType.
    */
  ActivityPlanPartsType& operator=(const ActivityPlanPartsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ACTIVITYPLANPARTSTYPE_H

