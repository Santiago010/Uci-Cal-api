/** @file CommIFDL_CommWaveformActivityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMIFDL_COMMWAVEFORMACTIVITYTYPE_H
#define UCI_TYPE_COMMIFDL_COMMWAVEFORMACTIVITYTYPE_H

#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CommIFDL_ControlType.h"
#include "uci/type/CommIFDL_FlightSizeEnum.h"
#include "uci/type/CommIFDL_NetLinkStatusType.h"
#include "uci/type/CommWaveformActivityPET.h"
#include "uci/type/IFDL_ChannelNumberType.h"
#include "uci/type/IFDL_WideNetIdentifierType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This is a polymorphic extension which allows for the extension of the base CommWaveformActivityPET for communication
  * IFDL parameters.
  */
class CommIFDL_CommWaveformActivityType : public virtual CommWaveformActivityPET {
public:

  /** This method constructs a new CommIFDL_CommWaveformActivityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommIFDL_CommWaveformActivityType.
    */
  static UCI_EXPORT CommIFDL_CommWaveformActivityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CommIFDL_CommWaveformActivityType initializing the data accessed by the new
    * CommIFDL_CommWaveformActivityType using the data accessed by the specified CommIFDL_CommWaveformActivityType
    * (cloning).
    *
    * @param accessor The CommIFDL_CommWaveformActivityType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created CommIFDL_CommWaveformActivityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommIFDL_CommWaveformActivityType.
    */
  static UCI_EXPORT CommIFDL_CommWaveformActivityType& create(const CommIFDL_CommWaveformActivityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CommIFDL_CommWaveformActivityType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The CommIFDL_CommWaveformActivityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CommIFDL_CommWaveformActivityType& accessor);

  /** Returns this accessor's type constant, i.e. commIFDL_CommWaveformActivityType.
    *
    * @return This accessor's type constant, i.e. commIFDL_CommWaveformActivityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commIFDL_CommWaveformActivityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CommIFDL_CommWaveformActivityType.
    *
    * @return The version that was initialized from the uci:version attribute of CommIFDL_CommWaveformActivityType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CommIFDL_CommWaveformActivityType& accessor) = 0;

  /** Encapsulates the user link information that indicates the state and configuration of the individual user links, which
    * the waveform uses to transport the payload data over the communication medium. The multiplicity is limited to N-1
    * (CommIFDL_CommModeEnum) options where NO_STATUS is an event that has no value, thus removed from list of available
    * options. [Occurrences: Minimum: 0; Maximum: 6]
    */
  typedef uci::base::BoundedList<uci::type::CommIFDL_NetLinkStatusType, uci::type::accessorType::commIFDL_NetLinkStatusType> PeerLinkStatus;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SettingsStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SettingsStatus.
    */
  virtual const uci::type::CommIFDL_ControlType& getSettingsStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SettingsStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SettingsStatus.
    */
  virtual uci::type::CommIFDL_ControlType& getSettingsStatus() = 0;

  /** Sets the complex content identified by SettingsStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SettingsStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& setSettingsStatus(const uci::type::CommIFDL_ControlType& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by FlightSize.
    *
    * @return A const reference to the value of the enumeration identified by FlightSize.
    */
  virtual const uci::type::CommIFDL_FlightSizeEnum& getFlightSize() const = 0;

  /** Returns a reference to the value of the enumeration identified by FlightSize.
    *
    * @return A reference to the value of the enumeration identified by FlightSize.
    */
  virtual uci::type::CommIFDL_FlightSizeEnum& getFlightSize() = 0;

  /** Sets the value of the enumeration identified by FlightSize.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& setFlightSize(const uci::type::CommIFDL_FlightSizeEnum& value) = 0;

  /** Sets the value of the enumeration identified by FlightSize.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& setFlightSize(uci::type::CommIFDL_FlightSizeEnum::EnumerationItem value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ChannelA_Number.
    *
    * @return The value of the simple primitive data type identified by ChannelA_Number.
    */
  virtual uci::type::IFDL_ChannelNumberTypeValue getChannelA_Number() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ChannelA_Number.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& setChannelA_Number(uci::type::IFDL_ChannelNumberTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ChannelB_Number.
    *
    * @return The value of the simple primitive data type identified by ChannelB_Number.
    */
  virtual uci::type::IFDL_ChannelNumberTypeValue getChannelB_Number() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ChannelB_Number.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& setChannelB_Number(uci::type::IFDL_ChannelNumberTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by AcquisitionActive.
    *
    * @return The value of the simple primitive data type identified by AcquisitionActive.
    */
  virtual xs::Boolean getAcquisitionActive() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AcquisitionActive.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& setAcquisitionActive(xs::Boolean value) = 0;

  /** Returns whether the Element identified by AcquisitionActive exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AcquisitionActive is enabled or not.
    */
  virtual bool hasAcquisitionActive() const = 0;

  /** Clears (disabled) the Element identified by AcquisitionActive.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& clearAcquisitionActive() = 0;

  /** Returns the value of the SimplePrimitive data type identified by VoiceTransmit.
    *
    * @return The value of the simple primitive data type identified by VoiceTransmit.
    */
  virtual xs::Boolean getVoiceTransmit() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by VoiceTransmit.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& setVoiceTransmit(xs::Boolean value) = 0;

  /** Returns whether the Element identified by VoiceTransmit exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VoiceTransmit is enabled or not.
    */
  virtual bool hasVoiceTransmit() const = 0;

  /** Clears (disabled) the Element identified by VoiceTransmit.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& clearVoiceTransmit() = 0;

  /** Returns the value of the SimplePrimitive data type identified by VoiceReceive.
    *
    * @return The value of the simple primitive data type identified by VoiceReceive.
    */
  virtual xs::Boolean getVoiceReceive() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by VoiceReceive.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& setVoiceReceive(xs::Boolean value) = 0;

  /** Returns whether the Element identified by VoiceReceive exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VoiceReceive is enabled or not.
    */
  virtual bool hasVoiceReceive() const = 0;

  /** Clears (disabled) the Element identified by VoiceReceive.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& clearVoiceReceive() = 0;

  /** Returns the value of the SimplePrimitive data type identified by WideNetIdentifier1.
    *
    * @return The value of the simple primitive data type identified by WideNetIdentifier1.
    */
  virtual uci::type::IFDL_WideNetIdentifierTypeValue getWideNetIdentifier1() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by WideNetIdentifier1.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& setWideNetIdentifier1(uci::type::IFDL_WideNetIdentifierTypeValue value) = 0;

  /** Returns whether the Element identified by WideNetIdentifier1 exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WideNetIdentifier1 is enabled or not.
    */
  virtual bool hasWideNetIdentifier1() const = 0;

  /** Clears (disabled) the Element identified by WideNetIdentifier1.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& clearWideNetIdentifier1() = 0;

  /** Returns the value of the SimplePrimitive data type identified by WideNetIdentifier2.
    *
    * @return The value of the simple primitive data type identified by WideNetIdentifier2.
    */
  virtual uci::type::IFDL_WideNetIdentifierTypeValue getWideNetIdentifier2() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by WideNetIdentifier2.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& setWideNetIdentifier2(uci::type::IFDL_WideNetIdentifierTypeValue value) = 0;

  /** Returns whether the Element identified by WideNetIdentifier2 exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WideNetIdentifier2 is enabled or not.
    */
  virtual bool hasWideNetIdentifier2() const = 0;

  /** Clears (disabled) the Element identified by WideNetIdentifier2.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& clearWideNetIdentifier2() = 0;

  /** Returns the value of the SimplePrimitive data type identified by WideNetIdentifier3.
    *
    * @return The value of the simple primitive data type identified by WideNetIdentifier3.
    */
  virtual uci::type::IFDL_WideNetIdentifierTypeValue getWideNetIdentifier3() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by WideNetIdentifier3.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& setWideNetIdentifier3(uci::type::IFDL_WideNetIdentifierTypeValue value) = 0;

  /** Returns whether the Element identified by WideNetIdentifier3 exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WideNetIdentifier3 is enabled or not.
    */
  virtual bool hasWideNetIdentifier3() const = 0;

  /** Clears (disabled) the Element identified by WideNetIdentifier3.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& clearWideNetIdentifier3() = 0;

  /** Returns a const reference to the bounded list identified by PeerLinkStatus.
    *
    * @return A const reference to the bounded list identified by PeerLinkStatus.
    */
  virtual const uci::type::CommIFDL_CommWaveformActivityType::PeerLinkStatus& getPeerLinkStatus() const = 0;

  /** Returns a reference to the bounded list identified by PeerLinkStatus.
    *
    * @return A reference to the bounded list identified by PeerLinkStatus.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType::PeerLinkStatus& getPeerLinkStatus() = 0;

  /** Sets the bounded list identified by PeerLinkStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommIFDL_CommWaveformActivityType& setPeerLinkStatus(const uci::type::CommIFDL_CommWaveformActivityType::PeerLinkStatus& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CommIFDL_CommWaveformActivityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommIFDL_CommWaveformActivityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommIFDL_CommWaveformActivityType to copy from.
    */
  CommIFDL_CommWaveformActivityType(const CommIFDL_CommWaveformActivityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CommIFDL_CommWaveformActivityType to the contents of the
    * CommIFDL_CommWaveformActivityType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The CommIFDL_CommWaveformActivityType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this CommIFDL_CommWaveformActivityType.
    * @return A reference to this CommIFDL_CommWaveformActivityType.
    */
  CommIFDL_CommWaveformActivityType& operator=(const CommIFDL_CommWaveformActivityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMMIFDL_COMMWAVEFORMACTIVITYTYPE_H

