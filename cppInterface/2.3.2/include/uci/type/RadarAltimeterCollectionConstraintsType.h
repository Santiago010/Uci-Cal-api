/** @file RadarAltimeterCollectionConstraintsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_RADARALTIMETERCOLLECTIONCONSTRAINTSTYPE_H
#define UCI_TYPE_RADARALTIMETERCOLLECTIONCONSTRAINTSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/AltitudeConstraintsType.h"
#include "uci/type/AltitudeReferenceEnum.h"
#include "uci/type/EmconConstraintType.h"
#include "uci/type/FalseAlarmType.h"
#include "uci/type/PercentType.h"
#include "uci/type/RadarAltimeterAngleConstraintsType.h"
#include "uci/type/SlantRangeConstraintsType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates a set of bounding requirements for the particular collection associated with this command. The subsystem
  * should attempt to satisfy all specified constraints.
  */
class RadarAltimeterCollectionConstraintsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RadarAltimeterCollectionConstraintsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RadarAltimeterCollectionConstraintsType.
    */
  static UCI_EXPORT RadarAltimeterCollectionConstraintsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RadarAltimeterCollectionConstraintsType initializing the data accessed by the new
    * RadarAltimeterCollectionConstraintsType using the data accessed by the specified
    * RadarAltimeterCollectionConstraintsType (cloning).
    *
    * @param accessor The RadarAltimeterCollectionConstraintsType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created RadarAltimeterCollectionConstraintsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RadarAltimeterCollectionConstraintsType.
    */
  static UCI_EXPORT RadarAltimeterCollectionConstraintsType& create(const RadarAltimeterCollectionConstraintsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RadarAltimeterCollectionConstraintsType. Use of the specified accessor after it
    * has been destroyed will result in undefined behavior.
    *
    * @param accessor The RadarAltimeterCollectionConstraintsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RadarAltimeterCollectionConstraintsType& accessor);

  /** Returns this accessor's type constant, i.e. radarAltimeterCollectionConstraintsType.
    *
    * @return This accessor's type constant, i.e. radarAltimeterCollectionConstraintsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::radarAltimeterCollectionConstraintsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of RadarAltimeterCollectionConstraintsType.
    *
    * @return The version that was initialized from the uci:version attribute of RadarAltimeterCollectionConstraintsType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RadarAltimeterCollectionConstraintsType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AngleConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AngleConstraints.
    */
  virtual const uci::type::RadarAltimeterAngleConstraintsType& getAngleConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AngleConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AngleConstraints.
    */
  virtual uci::type::RadarAltimeterAngleConstraintsType& getAngleConstraints() = 0;

  /** Sets the complex content identified by AngleConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AngleConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& setAngleConstraints(const uci::type::RadarAltimeterAngleConstraintsType& value) = 0;

  /** Returns whether the Element identified by AngleConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AngleConstraints is enabled or not.
    */
  virtual bool hasAngleConstraints() const = 0;

  /** Enables the Element identified by AngleConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AngleConstraints.
    */
  virtual uci::type::RadarAltimeterAngleConstraintsType& enableAngleConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AngleConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& clearAngleConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RangeConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RangeConstraints.
    */
  virtual const uci::type::SlantRangeConstraintsType& getRangeConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RangeConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RangeConstraints.
    */
  virtual uci::type::SlantRangeConstraintsType& getRangeConstraints() = 0;

  /** Sets the complex content identified by RangeConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RangeConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& setRangeConstraints(const uci::type::SlantRangeConstraintsType& value) = 0;

  /** Returns whether the Element identified by RangeConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RangeConstraints is enabled or not.
    */
  virtual bool hasRangeConstraints() const = 0;

  /** Enables the Element identified by RangeConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RangeConstraints.
    */
  virtual uci::type::SlantRangeConstraintsType& enableRangeConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RangeConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& clearRangeConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FalseAlarm.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FalseAlarm.
    */
  virtual const uci::type::FalseAlarmType& getFalseAlarm() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FalseAlarm.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FalseAlarm.
    */
  virtual uci::type::FalseAlarmType& getFalseAlarm() = 0;

  /** Sets the complex content identified by FalseAlarm to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FalseAlarm.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& setFalseAlarm(const uci::type::FalseAlarmType& value) = 0;

  /** Returns whether the Element identified by FalseAlarm exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FalseAlarm is enabled or not.
    */
  virtual bool hasFalseAlarm() const = 0;

  /** Enables the Element identified by FalseAlarm.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by FalseAlarm.
    */
  virtual uci::type::FalseAlarmType& enableFalseAlarm(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FalseAlarm.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& clearFalseAlarm() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ProbabilityOfDetection.
    *
    * @return The value of the simple primitive data type identified by ProbabilityOfDetection.
    */
  virtual uci::type::PercentTypeValue getProbabilityOfDetection() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ProbabilityOfDetection.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& setProbabilityOfDetection(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by ProbabilityOfDetection exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProbabilityOfDetection is enabled or not.
    */
  virtual bool hasProbabilityOfDetection() const = 0;

  /** Clears (disabled) the Element identified by ProbabilityOfDetection.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& clearProbabilityOfDetection() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Emcon.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Emcon.
    */
  virtual const uci::type::EmconConstraintType& getEmcon() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Emcon.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Emcon.
    */
  virtual uci::type::EmconConstraintType& getEmcon() = 0;

  /** Sets the complex content identified by Emcon to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Emcon.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& setEmcon(const uci::type::EmconConstraintType& value) = 0;

  /** Returns whether the Element identified by Emcon exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Emcon is enabled or not.
    */
  virtual bool hasEmcon() const = 0;

  /** Enables the Element identified by Emcon.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Emcon.
    */
  virtual uci::type::EmconConstraintType& enableEmcon(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Emcon.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& clearEmcon() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AltitudeConstraint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AltitudeConstraint.
    */
  virtual const uci::type::AltitudeConstraintsType& getAltitudeConstraint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AltitudeConstraint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AltitudeConstraint.
    */
  virtual uci::type::AltitudeConstraintsType& getAltitudeConstraint() = 0;

  /** Sets the complex content identified by AltitudeConstraint to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AltitudeConstraint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& setAltitudeConstraint(const uci::type::AltitudeConstraintsType& value) = 0;

  /** Returns whether the Element identified by AltitudeConstraint exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AltitudeConstraint is enabled or not.
    */
  virtual bool hasAltitudeConstraint() const = 0;

  /** Enables the Element identified by AltitudeConstraint.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AltitudeConstraint.
    */
  virtual uci::type::AltitudeConstraintsType& enableAltitudeConstraint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AltitudeConstraint.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& clearAltitudeConstraint() = 0;

  /** Returns a const reference to the value of the enumeration identified by AltitudeReference.
    *
    * @return A const reference to the value of the enumeration identified by AltitudeReference.
    */
  virtual const uci::type::AltitudeReferenceEnum& getAltitudeReference() const = 0;

  /** Returns a reference to the value of the enumeration identified by AltitudeReference.
    *
    * @return A reference to the value of the enumeration identified by AltitudeReference.
    */
  virtual uci::type::AltitudeReferenceEnum& getAltitudeReference() = 0;

  /** Sets the value of the enumeration identified by AltitudeReference.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& setAltitudeReference(const uci::type::AltitudeReferenceEnum& value) = 0;

  /** Sets the value of the enumeration identified by AltitudeReference.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& setAltitudeReference(uci::type::AltitudeReferenceEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by AltitudeReference exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AltitudeReference is enabled or not.
    */
  virtual bool hasAltitudeReference() const = 0;

  /** Enables the Element identified by AltitudeReference.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by AltitudeReference.
    */
  virtual uci::type::AltitudeReferenceEnum& enableAltitudeReference(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AltitudeReference.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& clearAltitudeReference() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RadarAltimeterCollectionConstraintsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~RadarAltimeterCollectionConstraintsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RadarAltimeterCollectionConstraintsType to copy from.
    */
  RadarAltimeterCollectionConstraintsType(const RadarAltimeterCollectionConstraintsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RadarAltimeterCollectionConstraintsType to the contents of the
    * RadarAltimeterCollectionConstraintsType on the right hand side (rhs) of the assignment operator [only available to
    * derived classes].
    *
    * @param rhs The RadarAltimeterCollectionConstraintsType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this RadarAltimeterCollectionConstraintsType.
    * @return A reference to this RadarAltimeterCollectionConstraintsType.
    */
  RadarAltimeterCollectionConstraintsType& operator=(const RadarAltimeterCollectionConstraintsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_RADARALTIMETERCOLLECTIONCONSTRAINTSTYPE_H

