/** @file RDMA_InitializeSetupMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_RDMA_INITIALIZESETUPMDT_H
#define UCI_TYPE_RDMA_INITIALIZESETUPMDT_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "NetworkEndpointType.h"
#include "RDMA_InitializeID_Type.h"
#include "RDMA_InitializeSetupID_Type.h"
#include "RDMA_ProviderEnum.h"
#include "ServiceID_Type.h"
#include "SubsystemID_Type.h"
#include "SystemID_Type.h"
#include "VisibleString1024Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class RDMA_InitializeSetupMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RDMA_InitializeSetupMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RDMA_InitializeSetupMDT.
    */
  static UCI_EXPORT RDMA_InitializeSetupMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RDMA_InitializeSetupMDT initializing the data accessed by the new
    * RDMA_InitializeSetupMDT using the data accessed by the specified RDMA_InitializeSetupMDT (cloning).
    *
    * @param accessor The RDMA_InitializeSetupMDT that provides access to the data that is to be used to initialize the
    *      data accessed by the new created RDMA_InitializeSetupMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RDMA_InitializeSetupMDT.
    */
  static UCI_EXPORT RDMA_InitializeSetupMDT& create(const RDMA_InitializeSetupMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RDMA_InitializeSetupMDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The RDMA_InitializeSetupMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RDMA_InitializeSetupMDT& accessor);

  /** Returns this accessor's type constant, i.e. rDMA_InitializeSetupMDT.
    *
    * @return This accessor's type constant, i.e. rDMA_InitializeSetupMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::rDMA_InitializeSetupMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of RDMA_InitializeSetupMDT.
    *
    * @return The version that was initialized from the uci:version attribute of RDMA_InitializeSetupMDT.
    */
  static std::string getUCITypeVersion() {
    return "001.001.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RDMA_InitializeSetupMDT& accessor) = 0;

  /** Indicates the network endpoints (IP addresses) available for data transfers. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::NetworkEndpointType, uci::type::accessorType::networkEndpointType> Endpoint;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RDMA_InitializeSetupID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RDMA_InitializeSetupID.
    */
  virtual const uci::type::RDMA_InitializeSetupID_Type& getRDMA_InitializeSetupID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RDMA_InitializeSetupID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RDMA_InitializeSetupID.
    */
  virtual uci::type::RDMA_InitializeSetupID_Type& getRDMA_InitializeSetupID() = 0;

  /** Sets the complex content identified by RDMA_InitializeSetupID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RDMA_InitializeSetupID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& setRDMA_InitializeSetupID(const uci::type::RDMA_InitializeSetupID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RDMA_InitializeID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RDMA_InitializeID.
    */
  virtual const uci::type::RDMA_InitializeID_Type& getRDMA_InitializeID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RDMA_InitializeID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RDMA_InitializeID.
    */
  virtual uci::type::RDMA_InitializeID_Type& getRDMA_InitializeID() = 0;

  /** Sets the complex content identified by RDMA_InitializeID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RDMA_InitializeID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& setRDMA_InitializeID(const uci::type::RDMA_InitializeID_Type& value) = 0;

  /** Returns whether the Element identified by RDMA_InitializeID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RDMA_InitializeID is enabled or not.
    */
  virtual bool hasRDMA_InitializeID() const = 0;

  /** Enables the Element identified by RDMA_InitializeID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RDMA_InitializeID.
    */
  virtual uci::type::RDMA_InitializeID_Type& enableRDMA_InitializeID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RDMA_InitializeID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& clearRDMA_InitializeID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual const uci::type::SystemID_Type& getSystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual uci::type::SystemID_Type& getSystemID() = 0;

  /** Sets the complex content identified by SystemID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& setSystemID(const uci::type::SystemID_Type& value) = 0;

  /** Returns whether the Element identified by SystemID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SystemID is enabled or not.
    */
  virtual bool hasSystemID() const = 0;

  /** Enables the Element identified by SystemID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual uci::type::SystemID_Type& enableSystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SystemID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& clearSystemID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SubsystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SubsystemID.
    */
  virtual const uci::type::SubsystemID_Type& getSubsystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SubsystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SubsystemID.
    */
  virtual uci::type::SubsystemID_Type& getSubsystemID() = 0;

  /** Sets the complex content identified by SubsystemID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SubsystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& setSubsystemID(const uci::type::SubsystemID_Type& value) = 0;

  /** Returns whether the Element identified by SubsystemID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SubsystemID is enabled or not.
    */
  virtual bool hasSubsystemID() const = 0;

  /** Enables the Element identified by SubsystemID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SubsystemID.
    */
  virtual uci::type::SubsystemID_Type& enableSubsystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SubsystemID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& clearSubsystemID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ServiceID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ServiceID.
    */
  virtual const uci::type::ServiceID_Type& getServiceID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ServiceID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ServiceID.
    */
  virtual uci::type::ServiceID_Type& getServiceID() = 0;

  /** Sets the complex content identified by ServiceID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ServiceID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& setServiceID(const uci::type::ServiceID_Type& value) = 0;

  /** Returns whether the Element identified by ServiceID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ServiceID is enabled or not.
    */
  virtual bool hasServiceID() const = 0;

  /** Enables the Element identified by ServiceID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ServiceID.
    */
  virtual uci::type::ServiceID_Type& enableServiceID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ServiceID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& clearServiceID() = 0;

  /** Returns a const reference to the bounded list identified by Endpoint.
    *
    * @return A const reference to the bounded list identified by Endpoint.
    */
  virtual const uci::type::RDMA_InitializeSetupMDT::Endpoint& getEndpoint() const = 0;

  /** Returns a reference to the bounded list identified by Endpoint.
    *
    * @return A reference to the bounded list identified by Endpoint.
    */
  virtual uci::type::RDMA_InitializeSetupMDT::Endpoint& getEndpoint() = 0;

  /** Sets the bounded list identified by Endpoint.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& setEndpoint(const uci::type::RDMA_InitializeSetupMDT::Endpoint& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by RDMA_Provider.
    *
    * @return A const reference to the value of the enumeration identified by RDMA_Provider.
    */
  virtual const uci::type::RDMA_ProviderEnum& getRDMA_Provider() const = 0;

  /** Returns a reference to the value of the enumeration identified by RDMA_Provider.
    *
    * @return A reference to the value of the enumeration identified by RDMA_Provider.
    */
  virtual uci::type::RDMA_ProviderEnum& getRDMA_Provider() = 0;

  /** Sets the value of the enumeration identified by RDMA_Provider.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& setRDMA_Provider(const uci::type::RDMA_ProviderEnum& value) = 0;

  /** Sets the value of the enumeration identified by RDMA_Provider.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& setRDMA_Provider(uci::type::RDMA_ProviderEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Host.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Host.
    */
  virtual const uci::type::NetworkEndpointType& getHost() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Host.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Host.
    */
  virtual uci::type::NetworkEndpointType& getHost() = 0;

  /** Sets the complex content identified by Host to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Host.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& setHost(const uci::type::NetworkEndpointType& value) = 0;

  /** Returns whether the Element identified by Host exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Host is enabled or not.
    */
  virtual bool hasHost() const = 0;

  /** Enables the Element identified by Host.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Host.
    */
  virtual uci::type::NetworkEndpointType& enableHost(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Host.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& clearHost() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by EndpointName.
    *
    * @return A const reference to the accessor that provides access to the string identified by EndpointName.
    */
  virtual const uci::type::VisibleString1024Type& getEndpointName() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by EndpointName.
    *
    * @return A reference to the accessor that provides access to the string identified by EndpointName.
    */
  virtual uci::type::VisibleString1024Type& getEndpointName() = 0;

  /** Sets the string identified by EndpointName to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by EndpointName.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& setEndpointName(const uci::type::VisibleString1024Type& value) = 0;

  /** Sets the string identified by EndpointName to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& setEndpointName(const std::string& value) = 0;

  /** Sets the string identified by EndpointName to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& setEndpointName(const char* value) = 0;

  /** Returns whether the Element identified by EndpointName exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EndpointName is enabled or not.
    */
  virtual bool hasEndpointName() const = 0;

  /** Enables the Element identified by EndpointName.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by EndpointName.
    */
  virtual uci::type::VisibleString1024Type& enableEndpointName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EndpointName.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RDMA_InitializeSetupMDT& clearEndpointName() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RDMA_InitializeSetupMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~RDMA_InitializeSetupMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RDMA_InitializeSetupMDT to copy from.
    */
  RDMA_InitializeSetupMDT(const RDMA_InitializeSetupMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RDMA_InitializeSetupMDT to the contents of the
    * RDMA_InitializeSetupMDT on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The RDMA_InitializeSetupMDT on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this RDMA_InitializeSetupMDT.
    * @return A reference to this RDMA_InitializeSetupMDT.
    */
  RDMA_InitializeSetupMDT& operator=(const RDMA_InitializeSetupMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_RDMA_INITIALIZESETUPMDT_H

