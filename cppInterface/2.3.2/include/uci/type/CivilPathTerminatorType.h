/** @file CivilPathTerminatorType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CIVILPATHTERMINATORTYPE_H
#define UCI_TYPE_CIVILPATHTERMINATORTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/CF_CourseToFixType.h"
#include "uci/type/EmptyType.h"
#include "uci/type/RF_RadiusToFixType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Used to specify the choice Civil Path Terminator Type associated with the End Point, to include its specific
  * parameters needed.
  */
class CivilPathTerminatorType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CivilPathTerminatorType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CivilPathTerminatorType.
    */
  static UCI_EXPORT CivilPathTerminatorType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CivilPathTerminatorType initializing the data accessed by the new
    * CivilPathTerminatorType using the data accessed by the specified CivilPathTerminatorType (cloning).
    *
    * @param accessor The CivilPathTerminatorType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created CivilPathTerminatorType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CivilPathTerminatorType.
    */
  static UCI_EXPORT CivilPathTerminatorType& create(const CivilPathTerminatorType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CivilPathTerminatorType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The CivilPathTerminatorType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CivilPathTerminatorType& accessor);

  /** Returns this accessor's type constant, i.e. civilPathTerminatorType.
    *
    * @return This accessor's type constant, i.e. civilPathTerminatorType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::civilPathTerminatorType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CivilPathTerminatorType.
    *
    * @return The version that was initialized from the uci:version attribute of CivilPathTerminatorType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CivilPathTerminatorType& accessor) = 0;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum CivilPathTerminatorTypeChoice {
    CIVILPATHTERMINATORTYPE_CHOICE_NONE,
    CIVILPATHTERMINATORTYPE_CHOICE_AF_ARCTOFIX,
    CIVILPATHTERMINATORTYPE_CHOICE_CA_COURSETOALTITUDE,
    CIVILPATHTERMINATORTYPE_CHOICE_CD_COURSETODMEDISTANCE,
    CIVILPATHTERMINATORTYPE_CHOICE_CF_COURSETOFIX,
    CIVILPATHTERMINATORTYPE_CHOICE_CI_COURSETOINTERCEPT,
    CIVILPATHTERMINATORTYPE_CHOICE_CR_COURSETORADIAL,
    CIVILPATHTERMINATORTYPE_CHOICE_DF_DIRECTTOFIX,
    CIVILPATHTERMINATORTYPE_CHOICE_FA_TRACKTOALTITUDE,
    CIVILPATHTERMINATORTYPE_CHOICE_FC_TRACKFROMFIXTODISTANCEALONGTRACK,
    CIVILPATHTERMINATORTYPE_CHOICE_FD_TRACKFROMFIXTODMEDISTANCE,
    CIVILPATHTERMINATORTYPE_CHOICE_FM_FIXTOMANUALTERMINATION,
    CIVILPATHTERMINATORTYPE_CHOICE_HA_HOLDINGWITHALTITUDETERMINATION,
    CIVILPATHTERMINATORTYPE_CHOICE_HF_HOLDINGWITHFIXTERMINATION,
    CIVILPATHTERMINATORTYPE_CHOICE_HM_HOLDINGWITHMANUALTERMINATION,
    CIVILPATHTERMINATORTYPE_CHOICE_IF_INITIALFIX,
    CIVILPATHTERMINATORTYPE_CHOICE_PI_PROCEDURETURNTOINTERCEPT,
    CIVILPATHTERMINATORTYPE_CHOICE_RF_RADIUSTOFIX,
    CIVILPATHTERMINATORTYPE_CHOICE_TF_TRACKTOFIX,
    CIVILPATHTERMINATORTYPE_CHOICE_VA_HEADINGTOALTITUDE,
    CIVILPATHTERMINATORTYPE_CHOICE_VD_HEADINGTODMEDISTANCETERMINATION,
    CIVILPATHTERMINATORTYPE_CHOICE_VI_HEADINGTOINTERCEPT,
    CIVILPATHTERMINATORTYPE_CHOICE_VM_HEADINGTOMANUAL,
    CIVILPATHTERMINATORTYPE_CHOICE_VR_HEADINGTORADIALTERMINATION
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual CivilPathTerminatorTypeChoice getCivilPathTerminatorTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getCivilPathTerminatorTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition,
    * the access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setCivilPathTerminatorTypeChoiceOrdinal(CivilPathTerminatorTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by AF_ArcToFix.
    *
    * @return A const reference to the accessor that provides access to the string identified by AF_ArcToFix.
    */
  virtual const uci::type::EmptyType& getAF_ArcToFix() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by AF_ArcToFix.
    *
    * @return A reference to the accessor that provides access to the string identified by AF_ArcToFix.
    */
  virtual uci::type::EmptyType& getAF_ArcToFix() = 0;

  /** Sets the string identified by AF_ArcToFix to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by AF_ArcToFix.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setAF_ArcToFix(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by AF_ArcToFix to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setAF_ArcToFix(const std::string& value) = 0;

  /** Sets the string identified by AF_ArcToFix to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setAF_ArcToFix(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AF_ArcToFix.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AF_ArcToFix, false otherwise.
    */
  virtual bool isAF_ArcToFix() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by AF_ArcToFix.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by AF_ArcToFix.
    */
  virtual uci::type::EmptyType& chooseAF_ArcToFix(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by CA_CourseToAltitude.
    *
    * @return A const reference to the accessor that provides access to the string identified by CA_CourseToAltitude.
    */
  virtual const uci::type::EmptyType& getCA_CourseToAltitude() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by CA_CourseToAltitude.
    *
    * @return A reference to the accessor that provides access to the string identified by CA_CourseToAltitude.
    */
  virtual uci::type::EmptyType& getCA_CourseToAltitude() = 0;

  /** Sets the string identified by CA_CourseToAltitude to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by CA_CourseToAltitude.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setCA_CourseToAltitude(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by CA_CourseToAltitude to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setCA_CourseToAltitude(const std::string& value) = 0;

  /** Sets the string identified by CA_CourseToAltitude to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setCA_CourseToAltitude(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CA_CourseToAltitude.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CA_CourseToAltitude, false
    *      otherwise.
    */
  virtual bool isCA_CourseToAltitude() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by CA_CourseToAltitude.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by CA_CourseToAltitude.
    */
  virtual uci::type::EmptyType& chooseCA_CourseToAltitude(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by CD_CourseToDMEDistance.
    *
    * @return A const reference to the accessor that provides access to the string identified by CD_CourseToDMEDistance.
    */
  virtual const uci::type::EmptyType& getCD_CourseToDMEDistance() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by CD_CourseToDMEDistance.
    *
    * @return A reference to the accessor that provides access to the string identified by CD_CourseToDMEDistance.
    */
  virtual uci::type::EmptyType& getCD_CourseToDMEDistance() = 0;

  /** Sets the string identified by CD_CourseToDMEDistance to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by CD_CourseToDMEDistance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setCD_CourseToDMEDistance(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by CD_CourseToDMEDistance to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setCD_CourseToDMEDistance(const std::string& value) = 0;

  /** Sets the string identified by CD_CourseToDMEDistance to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setCD_CourseToDMEDistance(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CD_CourseToDMEDistance.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CD_CourseToDMEDistance, false
    *      otherwise.
    */
  virtual bool isCD_CourseToDMEDistance() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by CD_CourseToDMEDistance.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by CD_CourseToDMEDistance.
    */
  virtual uci::type::EmptyType& chooseCD_CourseToDMEDistance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CF_CourseToFix.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CF_CourseToFix.
    */
  virtual const uci::type::CF_CourseToFixType& getCF_CourseToFix() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CF_CourseToFix.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CF_CourseToFix.
    */
  virtual uci::type::CF_CourseToFixType& getCF_CourseToFix() = 0;

  /** Sets the complex content identified by CF_CourseToFix to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CF_CourseToFix.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setCF_CourseToFix(const uci::type::CF_CourseToFixType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CF_CourseToFix.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CF_CourseToFix, false otherwise.
    */
  virtual bool isCF_CourseToFix() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by CF_CourseToFix.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CF_CourseToFix.
    */
  virtual uci::type::CF_CourseToFixType& chooseCF_CourseToFix(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by CI_CourseToIntercept.
    *
    * @return A const reference to the accessor that provides access to the string identified by CI_CourseToIntercept.
    */
  virtual const uci::type::EmptyType& getCI_CourseToIntercept() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by CI_CourseToIntercept.
    *
    * @return A reference to the accessor that provides access to the string identified by CI_CourseToIntercept.
    */
  virtual uci::type::EmptyType& getCI_CourseToIntercept() = 0;

  /** Sets the string identified by CI_CourseToIntercept to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by CI_CourseToIntercept.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setCI_CourseToIntercept(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by CI_CourseToIntercept to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setCI_CourseToIntercept(const std::string& value) = 0;

  /** Sets the string identified by CI_CourseToIntercept to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setCI_CourseToIntercept(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CI_CourseToIntercept.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CI_CourseToIntercept, false
    *      otherwise.
    */
  virtual bool isCI_CourseToIntercept() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by CI_CourseToIntercept.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by CI_CourseToIntercept.
    */
  virtual uci::type::EmptyType& chooseCI_CourseToIntercept(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by CR_CourseToRadial.
    *
    * @return A const reference to the accessor that provides access to the string identified by CR_CourseToRadial.
    */
  virtual const uci::type::EmptyType& getCR_CourseToRadial() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by CR_CourseToRadial.
    *
    * @return A reference to the accessor that provides access to the string identified by CR_CourseToRadial.
    */
  virtual uci::type::EmptyType& getCR_CourseToRadial() = 0;

  /** Sets the string identified by CR_CourseToRadial to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by CR_CourseToRadial.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setCR_CourseToRadial(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by CR_CourseToRadial to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setCR_CourseToRadial(const std::string& value) = 0;

  /** Sets the string identified by CR_CourseToRadial to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setCR_CourseToRadial(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CR_CourseToRadial.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CR_CourseToRadial, false
    *      otherwise.
    */
  virtual bool isCR_CourseToRadial() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by CR_CourseToRadial.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by CR_CourseToRadial.
    */
  virtual uci::type::EmptyType& chooseCR_CourseToRadial(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by DF_DirectToFix.
    *
    * @return A const reference to the accessor that provides access to the string identified by DF_DirectToFix.
    */
  virtual const uci::type::EmptyType& getDF_DirectToFix() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by DF_DirectToFix.
    *
    * @return A reference to the accessor that provides access to the string identified by DF_DirectToFix.
    */
  virtual uci::type::EmptyType& getDF_DirectToFix() = 0;

  /** Sets the string identified by DF_DirectToFix to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by DF_DirectToFix.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setDF_DirectToFix(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by DF_DirectToFix to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setDF_DirectToFix(const std::string& value) = 0;

  /** Sets the string identified by DF_DirectToFix to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setDF_DirectToFix(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by DF_DirectToFix.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by DF_DirectToFix, false otherwise.
    */
  virtual bool isDF_DirectToFix() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by DF_DirectToFix.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by DF_DirectToFix.
    */
  virtual uci::type::EmptyType& chooseDF_DirectToFix(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FA_TrackToAltitude.
    *
    * @return A const reference to the accessor that provides access to the string identified by FA_TrackToAltitude.
    */
  virtual const uci::type::EmptyType& getFA_TrackToAltitude() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FA_TrackToAltitude.
    *
    * @return A reference to the accessor that provides access to the string identified by FA_TrackToAltitude.
    */
  virtual uci::type::EmptyType& getFA_TrackToAltitude() = 0;

  /** Sets the string identified by FA_TrackToAltitude to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FA_TrackToAltitude.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setFA_TrackToAltitude(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by FA_TrackToAltitude to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setFA_TrackToAltitude(const std::string& value) = 0;

  /** Sets the string identified by FA_TrackToAltitude to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setFA_TrackToAltitude(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FA_TrackToAltitude.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FA_TrackToAltitude, false
    *      otherwise.
    */
  virtual bool isFA_TrackToAltitude() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by FA_TrackToAltitude.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by FA_TrackToAltitude.
    */
  virtual uci::type::EmptyType& chooseFA_TrackToAltitude(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * FC_TrackFromFixToDistanceAlongTrack.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      FC_TrackFromFixToDistanceAlongTrack.
    */
  virtual const uci::type::EmptyType& getFC_TrackFromFixToDistanceAlongTrack() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by
    * FC_TrackFromFixToDistanceAlongTrack.
    *
    * @return A reference to the accessor that provides access to the string identified by
    *      FC_TrackFromFixToDistanceAlongTrack.
    */
  virtual uci::type::EmptyType& getFC_TrackFromFixToDistanceAlongTrack() = 0;

  /** Sets the string identified by FC_TrackFromFixToDistanceAlongTrack to the contents of the string accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FC_TrackFromFixToDistanceAlongTrack.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setFC_TrackFromFixToDistanceAlongTrack(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by FC_TrackFromFixToDistanceAlongTrack to the contents of the string that is accessed by
    * the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setFC_TrackFromFixToDistanceAlongTrack(const std::string& value) = 0;

  /** Sets the string identified by FC_TrackFromFixToDistanceAlongTrack to the contents of the string that is accessed by
    * the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setFC_TrackFromFixToDistanceAlongTrack(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by
    * FC_TrackFromFixToDistanceAlongTrack.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by
    *      FC_TrackFromFixToDistanceAlongTrack, false otherwise.
    */
  virtual bool isFC_TrackFromFixToDistanceAlongTrack() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by FC_TrackFromFixToDistanceAlongTrack.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by
    *      FC_TrackFromFixToDistanceAlongTrack.
    */
  virtual uci::type::EmptyType& chooseFC_TrackFromFixToDistanceAlongTrack(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * FD_TrackFromFixToDMEDistance.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      FD_TrackFromFixToDMEDistance.
    */
  virtual const uci::type::EmptyType& getFD_TrackFromFixToDMEDistance() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FD_TrackFromFixToDMEDistance.
    *
    * @return A reference to the accessor that provides access to the string identified by FD_TrackFromFixToDMEDistance.
    */
  virtual uci::type::EmptyType& getFD_TrackFromFixToDMEDistance() = 0;

  /** Sets the string identified by FD_TrackFromFixToDMEDistance to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FD_TrackFromFixToDMEDistance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setFD_TrackFromFixToDMEDistance(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by FD_TrackFromFixToDMEDistance to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setFD_TrackFromFixToDMEDistance(const std::string& value) = 0;

  /** Sets the string identified by FD_TrackFromFixToDMEDistance to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setFD_TrackFromFixToDMEDistance(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FD_TrackFromFixToDMEDistance.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FD_TrackFromFixToDMEDistance,
    *      false otherwise.
    */
  virtual bool isFD_TrackFromFixToDMEDistance() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by FD_TrackFromFixToDMEDistance.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by FD_TrackFromFixToDMEDistance.
    */
  virtual uci::type::EmptyType& chooseFD_TrackFromFixToDMEDistance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FM_FixToManualTermination.
    *
    * @return A const reference to the accessor that provides access to the string identified by FM_FixToManualTermination.
    */
  virtual const uci::type::EmptyType& getFM_FixToManualTermination() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FM_FixToManualTermination.
    *
    * @return A reference to the accessor that provides access to the string identified by FM_FixToManualTermination.
    */
  virtual uci::type::EmptyType& getFM_FixToManualTermination() = 0;

  /** Sets the string identified by FM_FixToManualTermination to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FM_FixToManualTermination.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setFM_FixToManualTermination(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by FM_FixToManualTermination to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setFM_FixToManualTermination(const std::string& value) = 0;

  /** Sets the string identified by FM_FixToManualTermination to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setFM_FixToManualTermination(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FM_FixToManualTermination.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FM_FixToManualTermination, false
    *      otherwise.
    */
  virtual bool isFM_FixToManualTermination() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by FM_FixToManualTermination.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by FM_FixToManualTermination.
    */
  virtual uci::type::EmptyType& chooseFM_FixToManualTermination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * HA_HoldingWithAltitudeTermination.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      HA_HoldingWithAltitudeTermination.
    */
  virtual const uci::type::EmptyType& getHA_HoldingWithAltitudeTermination() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by
    * HA_HoldingWithAltitudeTermination.
    *
    * @return A reference to the accessor that provides access to the string identified by
    *      HA_HoldingWithAltitudeTermination.
    */
  virtual uci::type::EmptyType& getHA_HoldingWithAltitudeTermination() = 0;

  /** Sets the string identified by HA_HoldingWithAltitudeTermination to the contents of the string accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by HA_HoldingWithAltitudeTermination.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setHA_HoldingWithAltitudeTermination(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by HA_HoldingWithAltitudeTermination to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setHA_HoldingWithAltitudeTermination(const std::string& value) = 0;

  /** Sets the string identified by HA_HoldingWithAltitudeTermination to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setHA_HoldingWithAltitudeTermination(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by
    * HA_HoldingWithAltitudeTermination.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by
    *      HA_HoldingWithAltitudeTermination, false otherwise.
    */
  virtual bool isHA_HoldingWithAltitudeTermination() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by HA_HoldingWithAltitudeTermination.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by
    *      HA_HoldingWithAltitudeTermination.
    */
  virtual uci::type::EmptyType& chooseHA_HoldingWithAltitudeTermination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * HF_HoldingWithFixTermination.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      HF_HoldingWithFixTermination.
    */
  virtual const uci::type::EmptyType& getHF_HoldingWithFixTermination() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by HF_HoldingWithFixTermination.
    *
    * @return A reference to the accessor that provides access to the string identified by HF_HoldingWithFixTermination.
    */
  virtual uci::type::EmptyType& getHF_HoldingWithFixTermination() = 0;

  /** Sets the string identified by HF_HoldingWithFixTermination to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by HF_HoldingWithFixTermination.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setHF_HoldingWithFixTermination(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by HF_HoldingWithFixTermination to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setHF_HoldingWithFixTermination(const std::string& value) = 0;

  /** Sets the string identified by HF_HoldingWithFixTermination to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setHF_HoldingWithFixTermination(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by HF_HoldingWithFixTermination.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by HF_HoldingWithFixTermination,
    *      false otherwise.
    */
  virtual bool isHF_HoldingWithFixTermination() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by HF_HoldingWithFixTermination.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by HF_HoldingWithFixTermination.
    */
  virtual uci::type::EmptyType& chooseHF_HoldingWithFixTermination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * HM_HoldingWithManualTermination.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      HM_HoldingWithManualTermination.
    */
  virtual const uci::type::EmptyType& getHM_HoldingWithManualTermination() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by HM_HoldingWithManualTermination.
    *
    * @return A reference to the accessor that provides access to the string identified by HM_HoldingWithManualTermination.
    */
  virtual uci::type::EmptyType& getHM_HoldingWithManualTermination() = 0;

  /** Sets the string identified by HM_HoldingWithManualTermination to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by HM_HoldingWithManualTermination.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setHM_HoldingWithManualTermination(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by HM_HoldingWithManualTermination to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setHM_HoldingWithManualTermination(const std::string& value) = 0;

  /** Sets the string identified by HM_HoldingWithManualTermination to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setHM_HoldingWithManualTermination(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by HM_HoldingWithManualTermination.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by HM_HoldingWithManualTermination,
    *      false otherwise.
    */
  virtual bool isHM_HoldingWithManualTermination() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by HM_HoldingWithManualTermination.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by HM_HoldingWithManualTermination.
    */
  virtual uci::type::EmptyType& chooseHM_HoldingWithManualTermination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by IF_InitialFix.
    *
    * @return A const reference to the accessor that provides access to the string identified by IF_InitialFix.
    */
  virtual const uci::type::EmptyType& getIF_InitialFix() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by IF_InitialFix.
    *
    * @return A reference to the accessor that provides access to the string identified by IF_InitialFix.
    */
  virtual uci::type::EmptyType& getIF_InitialFix() = 0;

  /** Sets the string identified by IF_InitialFix to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by IF_InitialFix.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setIF_InitialFix(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by IF_InitialFix to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setIF_InitialFix(const std::string& value) = 0;

  /** Sets the string identified by IF_InitialFix to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setIF_InitialFix(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by IF_InitialFix.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by IF_InitialFix, false otherwise.
    */
  virtual bool isIF_InitialFix() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by IF_InitialFix.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by IF_InitialFix.
    */
  virtual uci::type::EmptyType& chooseIF_InitialFix(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * PI_ProcedureTurnToIntercept.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      PI_ProcedureTurnToIntercept.
    */
  virtual const uci::type::EmptyType& getPI_ProcedureTurnToIntercept() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by PI_ProcedureTurnToIntercept.
    *
    * @return A reference to the accessor that provides access to the string identified by PI_ProcedureTurnToIntercept.
    */
  virtual uci::type::EmptyType& getPI_ProcedureTurnToIntercept() = 0;

  /** Sets the string identified by PI_ProcedureTurnToIntercept to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by PI_ProcedureTurnToIntercept.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setPI_ProcedureTurnToIntercept(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by PI_ProcedureTurnToIntercept to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setPI_ProcedureTurnToIntercept(const std::string& value) = 0;

  /** Sets the string identified by PI_ProcedureTurnToIntercept to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setPI_ProcedureTurnToIntercept(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by PI_ProcedureTurnToIntercept.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by PI_ProcedureTurnToIntercept,
    *      false otherwise.
    */
  virtual bool isPI_ProcedureTurnToIntercept() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by PI_ProcedureTurnToIntercept.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by PI_ProcedureTurnToIntercept.
    */
  virtual uci::type::EmptyType& choosePI_ProcedureTurnToIntercept(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RF_RadiusToFix.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RF_RadiusToFix.
    */
  virtual const uci::type::RF_RadiusToFixType& getRF_RadiusToFix() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RF_RadiusToFix.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RF_RadiusToFix.
    */
  virtual uci::type::RF_RadiusToFixType& getRF_RadiusToFix() = 0;

  /** Sets the complex content identified by RF_RadiusToFix to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RF_RadiusToFix.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setRF_RadiusToFix(const uci::type::RF_RadiusToFixType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RF_RadiusToFix.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RF_RadiusToFix, false otherwise.
    */
  virtual bool isRF_RadiusToFix() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by RF_RadiusToFix.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RF_RadiusToFix.
    */
  virtual uci::type::RF_RadiusToFixType& chooseRF_RadiusToFix(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by TF_TrackToFix.
    *
    * @return A const reference to the accessor that provides access to the string identified by TF_TrackToFix.
    */
  virtual const uci::type::EmptyType& getTF_TrackToFix() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by TF_TrackToFix.
    *
    * @return A reference to the accessor that provides access to the string identified by TF_TrackToFix.
    */
  virtual uci::type::EmptyType& getTF_TrackToFix() = 0;

  /** Sets the string identified by TF_TrackToFix to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by TF_TrackToFix.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setTF_TrackToFix(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by TF_TrackToFix to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setTF_TrackToFix(const std::string& value) = 0;

  /** Sets the string identified by TF_TrackToFix to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setTF_TrackToFix(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by TF_TrackToFix.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by TF_TrackToFix, false otherwise.
    */
  virtual bool isTF_TrackToFix() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by TF_TrackToFix.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by TF_TrackToFix.
    */
  virtual uci::type::EmptyType& chooseTF_TrackToFix(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by VA_HeadingToAltitude.
    *
    * @return A const reference to the accessor that provides access to the string identified by VA_HeadingToAltitude.
    */
  virtual const uci::type::EmptyType& getVA_HeadingToAltitude() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by VA_HeadingToAltitude.
    *
    * @return A reference to the accessor that provides access to the string identified by VA_HeadingToAltitude.
    */
  virtual uci::type::EmptyType& getVA_HeadingToAltitude() = 0;

  /** Sets the string identified by VA_HeadingToAltitude to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by VA_HeadingToAltitude.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setVA_HeadingToAltitude(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by VA_HeadingToAltitude to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setVA_HeadingToAltitude(const std::string& value) = 0;

  /** Sets the string identified by VA_HeadingToAltitude to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setVA_HeadingToAltitude(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by VA_HeadingToAltitude.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by VA_HeadingToAltitude, false
    *      otherwise.
    */
  virtual bool isVA_HeadingToAltitude() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by VA_HeadingToAltitude.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by VA_HeadingToAltitude.
    */
  virtual uci::type::EmptyType& chooseVA_HeadingToAltitude(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * VD_HeadingToDMEDistanceTermination.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      VD_HeadingToDMEDistanceTermination.
    */
  virtual const uci::type::EmptyType& getVD_HeadingToDMEDistanceTermination() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by
    * VD_HeadingToDMEDistanceTermination.
    *
    * @return A reference to the accessor that provides access to the string identified by
    *      VD_HeadingToDMEDistanceTermination.
    */
  virtual uci::type::EmptyType& getVD_HeadingToDMEDistanceTermination() = 0;

  /** Sets the string identified by VD_HeadingToDMEDistanceTermination to the contents of the string accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by VD_HeadingToDMEDistanceTermination.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setVD_HeadingToDMEDistanceTermination(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by VD_HeadingToDMEDistanceTermination to the contents of the string that is accessed by
    * the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setVD_HeadingToDMEDistanceTermination(const std::string& value) = 0;

  /** Sets the string identified by VD_HeadingToDMEDistanceTermination to the contents of the string that is accessed by
    * the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setVD_HeadingToDMEDistanceTermination(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by
    * VD_HeadingToDMEDistanceTermination.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by
    *      VD_HeadingToDMEDistanceTermination, false otherwise.
    */
  virtual bool isVD_HeadingToDMEDistanceTermination() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by VD_HeadingToDMEDistanceTermination.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by
    *      VD_HeadingToDMEDistanceTermination.
    */
  virtual uci::type::EmptyType& chooseVD_HeadingToDMEDistanceTermination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by VI_HeadingToIntercept.
    *
    * @return A const reference to the accessor that provides access to the string identified by VI_HeadingToIntercept.
    */
  virtual const uci::type::EmptyType& getVI_HeadingToIntercept() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by VI_HeadingToIntercept.
    *
    * @return A reference to the accessor that provides access to the string identified by VI_HeadingToIntercept.
    */
  virtual uci::type::EmptyType& getVI_HeadingToIntercept() = 0;

  /** Sets the string identified by VI_HeadingToIntercept to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by VI_HeadingToIntercept.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setVI_HeadingToIntercept(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by VI_HeadingToIntercept to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setVI_HeadingToIntercept(const std::string& value) = 0;

  /** Sets the string identified by VI_HeadingToIntercept to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setVI_HeadingToIntercept(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by VI_HeadingToIntercept.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by VI_HeadingToIntercept, false
    *      otherwise.
    */
  virtual bool isVI_HeadingToIntercept() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by VI_HeadingToIntercept.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by VI_HeadingToIntercept.
    */
  virtual uci::type::EmptyType& chooseVI_HeadingToIntercept(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by VM_HeadingToManual.
    *
    * @return A const reference to the accessor that provides access to the string identified by VM_HeadingToManual.
    */
  virtual const uci::type::EmptyType& getVM_HeadingToManual() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by VM_HeadingToManual.
    *
    * @return A reference to the accessor that provides access to the string identified by VM_HeadingToManual.
    */
  virtual uci::type::EmptyType& getVM_HeadingToManual() = 0;

  /** Sets the string identified by VM_HeadingToManual to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by VM_HeadingToManual.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setVM_HeadingToManual(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by VM_HeadingToManual to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setVM_HeadingToManual(const std::string& value) = 0;

  /** Sets the string identified by VM_HeadingToManual to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setVM_HeadingToManual(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by VM_HeadingToManual.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by VM_HeadingToManual, false
    *      otherwise.
    */
  virtual bool isVM_HeadingToManual() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by VM_HeadingToManual.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by VM_HeadingToManual.
    */
  virtual uci::type::EmptyType& chooseVM_HeadingToManual(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * VR_HeadingToRadialTermination.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      VR_HeadingToRadialTermination.
    */
  virtual const uci::type::EmptyType& getVR_HeadingToRadialTermination() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by VR_HeadingToRadialTermination.
    *
    * @return A reference to the accessor that provides access to the string identified by VR_HeadingToRadialTermination.
    */
  virtual uci::type::EmptyType& getVR_HeadingToRadialTermination() = 0;

  /** Sets the string identified by VR_HeadingToRadialTermination to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by VR_HeadingToRadialTermination.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setVR_HeadingToRadialTermination(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by VR_HeadingToRadialTermination to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setVR_HeadingToRadialTermination(const std::string& value) = 0;

  /** Sets the string identified by VR_HeadingToRadialTermination to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CivilPathTerminatorType& setVR_HeadingToRadialTermination(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by VR_HeadingToRadialTermination.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by VR_HeadingToRadialTermination,
    *      false otherwise.
    */
  virtual bool isVR_HeadingToRadialTermination() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by VR_HeadingToRadialTermination.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by VR_HeadingToRadialTermination.
    */
  virtual uci::type::EmptyType& chooseVR_HeadingToRadialTermination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CivilPathTerminatorType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CivilPathTerminatorType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CivilPathTerminatorType to copy from.
    */
  CivilPathTerminatorType(const CivilPathTerminatorType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CivilPathTerminatorType to the contents of the
    * CivilPathTerminatorType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CivilPathTerminatorType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this CivilPathTerminatorType.
    * @return A reference to this CivilPathTerminatorType.
    */
  CivilPathTerminatorType& operator=(const CivilPathTerminatorType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_CIVILPATHTERMINATORTYPE_H

