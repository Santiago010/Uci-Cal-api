/** @file EOB_EmitterIdentityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_EOB_EMITTERIDENTITYTYPE_H
#define UCI_TYPE_EOB_EMITTERIDENTITYTYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "EOB_CED_NameType.h"
#include "EOB_CodeWordType.h"
#include "EOB_EmitterSurrogateKeyType.h"
#include "EOB_WeaponSystemType.h"
#include "EmitterIdentityType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class EOB_EmitterIdentityType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new EOB_EmitterIdentityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EOB_EmitterIdentityType.
    */
  static UCI_EXPORT EOB_EmitterIdentityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new EOB_EmitterIdentityType initializing the data accessed by the new
    * EOB_EmitterIdentityType using the data accessed by the specified EOB_EmitterIdentityType (cloning).
    *
    * @param accessor The EOB_EmitterIdentityType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created EOB_EmitterIdentityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EOB_EmitterIdentityType.
    */
  static UCI_EXPORT EOB_EmitterIdentityType& create(const EOB_EmitterIdentityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified EOB_EmitterIdentityType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The EOB_EmitterIdentityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(EOB_EmitterIdentityType& accessor);

  /** Returns this accessor's type constant, i.e. eOB_EmitterIdentityType.
    *
    * @return This accessor's type constant, i.e. eOB_EmitterIdentityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::eOB_EmitterIdentityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of EOB_EmitterIdentityType.
    *
    * @return The version that was initialized from the uci:version attribute of EOB_EmitterIdentityType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const EOB_EmitterIdentityType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Emitter.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Emitter.
    */
  virtual const uci::type::EmitterIdentityType& getEmitter() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Emitter.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Emitter.
    */
  virtual uci::type::EmitterIdentityType& getEmitter() = 0;

  /** Sets the complex content identified by Emitter to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Emitter.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& setEmitter(const uci::type::EmitterIdentityType& value) = 0;

  /** Returns whether the Element identified by Emitter exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Emitter is enabled or not.
    */
  virtual bool hasEmitter() const = 0;

  /** Enables the Element identified by Emitter.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Emitter.
    */
  virtual uci::type::EmitterIdentityType& enableEmitter(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Emitter.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& clearEmitter() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by WeaponSystem.
    *
    * @return A const reference to the accessor that provides access to the string identified by WeaponSystem.
    */
  virtual const uci::type::EOB_WeaponSystemType& getWeaponSystem() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by WeaponSystem.
    *
    * @return A reference to the accessor that provides access to the string identified by WeaponSystem.
    */
  virtual uci::type::EOB_WeaponSystemType& getWeaponSystem() = 0;

  /** Sets the string identified by WeaponSystem to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by WeaponSystem.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& setWeaponSystem(const uci::type::EOB_WeaponSystemType& value) = 0;

  /** Sets the string identified by WeaponSystem to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& setWeaponSystem(const std::string& value) = 0;

  /** Sets the string identified by WeaponSystem to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& setWeaponSystem(const char* value) = 0;

  /** Returns whether the Element identified by WeaponSystem exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WeaponSystem is enabled or not.
    */
  virtual bool hasWeaponSystem() const = 0;

  /** Enables the Element identified by WeaponSystem.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by WeaponSystem.
    */
  virtual uci::type::EOB_WeaponSystemType& enableWeaponSystem(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by WeaponSystem.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& clearWeaponSystem() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by CED_Name.
    *
    * @return A const reference to the accessor that provides access to the string identified by CED_Name.
    */
  virtual const uci::type::EOB_CED_NameType& getCED_Name() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by CED_Name.
    *
    * @return A reference to the accessor that provides access to the string identified by CED_Name.
    */
  virtual uci::type::EOB_CED_NameType& getCED_Name() = 0;

  /** Sets the string identified by CED_Name to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by CED_Name.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& setCED_Name(const uci::type::EOB_CED_NameType& value) = 0;

  /** Sets the string identified by CED_Name to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& setCED_Name(const std::string& value) = 0;

  /** Sets the string identified by CED_Name to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& setCED_Name(const char* value) = 0;

  /** Returns whether the Element identified by CED_Name exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CED_Name is enabled or not.
    */
  virtual bool hasCED_Name() const = 0;

  /** Enables the Element identified by CED_Name.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by CED_Name.
    */
  virtual uci::type::EOB_CED_NameType& enableCED_Name(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CED_Name.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& clearCED_Name() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by EmitterSK.
    *
    * @return A const reference to the accessor that provides access to the string identified by EmitterSK.
    */
  virtual const uci::type::EOB_EmitterSurrogateKeyType& getEmitterSK() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by EmitterSK.
    *
    * @return A reference to the accessor that provides access to the string identified by EmitterSK.
    */
  virtual uci::type::EOB_EmitterSurrogateKeyType& getEmitterSK() = 0;

  /** Sets the string identified by EmitterSK to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by EmitterSK.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& setEmitterSK(const uci::type::EOB_EmitterSurrogateKeyType& value) = 0;

  /** Sets the string identified by EmitterSK to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& setEmitterSK(const std::string& value) = 0;

  /** Sets the string identified by EmitterSK to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& setEmitterSK(const char* value) = 0;

  /** Returns whether the Element identified by EmitterSK exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EmitterSK is enabled or not.
    */
  virtual bool hasEmitterSK() const = 0;

  /** Enables the Element identified by EmitterSK.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by EmitterSK.
    */
  virtual uci::type::EOB_EmitterSurrogateKeyType& enableEmitterSK(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EmitterSK.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& clearEmitterSK() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by CodeWord.
    *
    * @return A const reference to the accessor that provides access to the string identified by CodeWord.
    */
  virtual const uci::type::EOB_CodeWordType& getCodeWord() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by CodeWord.
    *
    * @return A reference to the accessor that provides access to the string identified by CodeWord.
    */
  virtual uci::type::EOB_CodeWordType& getCodeWord() = 0;

  /** Sets the string identified by CodeWord to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by CodeWord.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& setCodeWord(const uci::type::EOB_CodeWordType& value) = 0;

  /** Sets the string identified by CodeWord to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& setCodeWord(const std::string& value) = 0;

  /** Sets the string identified by CodeWord to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& setCodeWord(const char* value) = 0;

  /** Returns whether the Element identified by CodeWord exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CodeWord is enabled or not.
    */
  virtual bool hasCodeWord() const = 0;

  /** Enables the Element identified by CodeWord.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by CodeWord.
    */
  virtual uci::type::EOB_CodeWordType& enableCodeWord(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CodeWord.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_EmitterIdentityType& clearCodeWord() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  EOB_EmitterIdentityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~EOB_EmitterIdentityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The EOB_EmitterIdentityType to copy from.
    */
  EOB_EmitterIdentityType(const EOB_EmitterIdentityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this EOB_EmitterIdentityType to the contents of the
    * EOB_EmitterIdentityType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The EOB_EmitterIdentityType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this EOB_EmitterIdentityType.
    * @return A reference to this EOB_EmitterIdentityType.
    */
  EOB_EmitterIdentityType& operator=(const EOB_EmitterIdentityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_EOB_EMITTERIDENTITYTYPE_H

