/** @file AccessAssessmentFilterType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ACCESSASSESSMENTFILTERTYPE_H
#define UCI_TYPE_ACCESSASSESSMENTFILTERTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AccessEventFilterType.h"
#include "AssetFilterType.h"
#include "CapabilityTaxonomyUniversalType.h"
#include "VisibleString32Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class AccessAssessmentFilterType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new AccessAssessmentFilterType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AccessAssessmentFilterType.
    */
  static UCI_EXPORT AccessAssessmentFilterType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new AccessAssessmentFilterType initializing the data accessed by the new
    * AccessAssessmentFilterType using the data accessed by the specified AccessAssessmentFilterType (cloning).
    *
    * @param accessor The AccessAssessmentFilterType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created AccessAssessmentFilterType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AccessAssessmentFilterType.
    */
  static UCI_EXPORT AccessAssessmentFilterType& create(const AccessAssessmentFilterType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified AccessAssessmentFilterType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The AccessAssessmentFilterType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(AccessAssessmentFilterType& accessor);

  /** Returns this accessor's type constant, i.e. accessAssessmentFilterType.
    *
    * @return This accessor's type constant, i.e. accessAssessmentFilterType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::accessAssessmentFilterType;
  }

  /** Returns the version that was initialized from the uci:version attribute of AccessAssessmentFilterType.
    *
    * @return The version that was initialized from the uci:version attribute of AccessAssessmentFilterType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AccessAssessmentFilterType& accessor) = 0;

  /** Indicates a name/type of AccessAssessment algorithm required to match the filter. If omitted, any name/type of
    * AccessAssessment algorithm satisfies the filter. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::VisibleString32Type, uci::type::accessorType::visibleString32Type> AssessmentName;

  /** Indicates Access Event details necessary to match the filter. If omitted, any Access Event satisfies the filter.
    * Multiple instances are logically ORed. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::AccessEventFilterType, uci::type::accessorType::accessEventFilterType> AccessEvent;

  /** Returns a const reference to the bounded list identified by AssessmentName.
    *
    * @return A const reference to the bounded list identified by AssessmentName.
    */
  virtual const uci::type::AccessAssessmentFilterType::AssessmentName& getAssessmentName() const = 0;

  /** Returns a reference to the bounded list identified by AssessmentName.
    *
    * @return A reference to the bounded list identified by AssessmentName.
    */
  virtual uci::type::AccessAssessmentFilterType::AssessmentName& getAssessmentName() = 0;

  /** Sets the bounded list identified by AssessmentName.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentFilterType& setAssessmentName(const uci::type::AccessAssessmentFilterType::AssessmentName& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AssessedCapabilities.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AssessedCapabilities.
    */
  virtual const uci::type::CapabilityTaxonomyUniversalType& getAssessedCapabilities() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AssessedCapabilities.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AssessedCapabilities.
    */
  virtual uci::type::CapabilityTaxonomyUniversalType& getAssessedCapabilities() = 0;

  /** Sets the complex content identified by AssessedCapabilities to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AssessedCapabilities.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentFilterType& setAssessedCapabilities(const uci::type::CapabilityTaxonomyUniversalType& value) = 0;

  /** Returns whether the Element identified by AssessedCapabilities exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AssessedCapabilities is enabled or not.
    */
  virtual bool hasAssessedCapabilities() const = 0;

  /** Enables the Element identified by AssessedCapabilities.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AssessedCapabilities.
    */
  virtual uci::type::CapabilityTaxonomyUniversalType& enableAssessedCapabilities(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AssessedCapabilities.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentFilterType& clearAssessedCapabilities() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Subject.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Subject.
    */
  virtual const uci::type::AssetFilterType& getSubject() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Subject.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Subject.
    */
  virtual uci::type::AssetFilterType& getSubject() = 0;

  /** Sets the complex content identified by Subject to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Subject.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentFilterType& setSubject(const uci::type::AssetFilterType& value) = 0;

  /** Returns whether the Element identified by Subject exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Subject is enabled or not.
    */
  virtual bool hasSubject() const = 0;

  /** Enables the Element identified by Subject.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Subject.
    */
  virtual uci::type::AssetFilterType& enableSubject(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Subject.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentFilterType& clearSubject() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AssessedObject.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AssessedObject.
    */
  virtual const uci::type::AssetFilterType& getAssessedObject() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AssessedObject.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AssessedObject.
    */
  virtual uci::type::AssetFilterType& getAssessedObject() = 0;

  /** Sets the complex content identified by AssessedObject to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AssessedObject.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentFilterType& setAssessedObject(const uci::type::AssetFilterType& value) = 0;

  /** Returns whether the Element identified by AssessedObject exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AssessedObject is enabled or not.
    */
  virtual bool hasAssessedObject() const = 0;

  /** Enables the Element identified by AssessedObject.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AssessedObject.
    */
  virtual uci::type::AssetFilterType& enableAssessedObject(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AssessedObject.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentFilterType& clearAssessedObject() = 0;

  /** Returns a const reference to the bounded list identified by AccessEvent.
    *
    * @return A const reference to the bounded list identified by AccessEvent.
    */
  virtual const uci::type::AccessAssessmentFilterType::AccessEvent& getAccessEvent() const = 0;

  /** Returns a reference to the bounded list identified by AccessEvent.
    *
    * @return A reference to the bounded list identified by AccessEvent.
    */
  virtual uci::type::AccessAssessmentFilterType::AccessEvent& getAccessEvent() = 0;

  /** Sets the bounded list identified by AccessEvent.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentFilterType& setAccessEvent(const uci::type::AccessAssessmentFilterType::AccessEvent& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AccessAssessmentFilterType() {
  }

  /** The destructor [only available to derived classes]. */
  ~AccessAssessmentFilterType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AccessAssessmentFilterType to copy from.
    */
  AccessAssessmentFilterType(const AccessAssessmentFilterType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AccessAssessmentFilterType to the contents of the
    * AccessAssessmentFilterType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The AccessAssessmentFilterType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this AccessAssessmentFilterType.
    * @return A reference to this AccessAssessmentFilterType.
    */
  AccessAssessmentFilterType& operator=(const AccessAssessmentFilterType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ACCESSASSESSMENTFILTERTYPE_H

