/** @file RTN_LocalPositionType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_RTN_LOCALPOSITIONTYPE_H
#define UCI_TYPE_RTN_LOCALPOSITIONTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/KinematicsOptionsType.h"
#include "uci/type/QuaternionType.h"
#include "uci/type/RTN_PositionType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Describes the kinematics position and orientation in the Radial-Transverse-Normal reference frame with respect to an
  * asset. For example the position and attitude of a sensor relative to a host satellite's body frame.
  */
class RTN_LocalPositionType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RTN_LocalPositionType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RTN_LocalPositionType.
    */
  static UCI_EXPORT RTN_LocalPositionType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RTN_LocalPositionType initializing the data accessed by the new RTN_LocalPositionType
    * using the data accessed by the specified RTN_LocalPositionType (cloning).
    *
    * @param accessor The RTN_LocalPositionType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created RTN_LocalPositionType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RTN_LocalPositionType.
    */
  static UCI_EXPORT RTN_LocalPositionType& create(const RTN_LocalPositionType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RTN_LocalPositionType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The RTN_LocalPositionType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RTN_LocalPositionType& accessor);

  /** Returns this accessor's type constant, i.e. rTN_LocalPositionType.
    *
    * @return This accessor's type constant, i.e. rTN_LocalPositionType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::rTN_LocalPositionType;
  }

  /** Returns the version that was initialized from the uci:version attribute of RTN_LocalPositionType.
    *
    * @return The version that was initialized from the uci:version attribute of RTN_LocalPositionType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RTN_LocalPositionType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual const uci::type::RTN_PositionType& getPosition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual uci::type::RTN_PositionType& getPosition() = 0;

  /** Sets the complex content identified by Position to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Position.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RTN_LocalPositionType& setPosition(const uci::type::RTN_PositionType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Attitude.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Attitude.
    */
  virtual const uci::type::QuaternionType& getAttitude() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Attitude.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Attitude.
    */
  virtual uci::type::QuaternionType& getAttitude() = 0;

  /** Sets the complex content identified by Attitude to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Attitude.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RTN_LocalPositionType& setAttitude(const uci::type::QuaternionType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RelativeKinematics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RelativeKinematics.
    */
  virtual const uci::type::KinematicsOptionsType& getRelativeKinematics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RelativeKinematics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RelativeKinematics.
    */
  virtual uci::type::KinematicsOptionsType& getRelativeKinematics() = 0;

  /** Sets the complex content identified by RelativeKinematics to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RelativeKinematics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RTN_LocalPositionType& setRelativeKinematics(const uci::type::KinematicsOptionsType& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RTN_LocalPositionType() {
  }

  /** The destructor [only available to derived classes]. */
  ~RTN_LocalPositionType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RTN_LocalPositionType to copy from.
    */
  RTN_LocalPositionType(const RTN_LocalPositionType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RTN_LocalPositionType to the contents of the RTN_LocalPositionType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The RTN_LocalPositionType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this RTN_LocalPositionType.
    * @return A reference to this RTN_LocalPositionType.
    */
  RTN_LocalPositionType& operator=(const RTN_LocalPositionType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_RTN_LOCALPOSITIONTYPE_H

