/** @file IO_PortType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_IO_PORTTYPE_H
#define UCI_TYPE_IO_PORTTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ActivityID_Type.h"
#include "CommUserIO_ID_Type.h"
#include "IO_PortConfigurationStatusType.h"
#include "IO_PortTypeEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class IO_PortType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new IO_PortType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IO_PortType.
    */
  static UCI_EXPORT IO_PortType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new IO_PortType initializing the data accessed by the new IO_PortType using the data
    * accessed by the specified IO_PortType (cloning).
    *
    * @param accessor The IO_PortType that provides access to the data that is to be used to initialize the data accessed
    *      by the new created IO_PortType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IO_PortType.
    */
  static UCI_EXPORT IO_PortType& create(const IO_PortType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified IO_PortType. Use of the specified accessor after it has been destroyed will result
    * in undefined behavior.
    *
    * @param accessor The IO_PortType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(IO_PortType& accessor);

  /** Returns this accessor's type constant, i.e. iO_PortType.
    *
    * @return This accessor's type constant, i.e. iO_PortType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::iO_PortType;
  }

  /** Returns the version that was initialized from the uci:version attribute of IO_PortType.
    *
    * @return The version that was initialized from the uci:version attribute of IO_PortType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const IO_PortType& accessor) = 0;

  /** Indicates the unique IDs of the Activities currently assigned to this IO port. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ActivityID_Type, uci::type::accessorType::activityID_Type> ActivityID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PortID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PortID.
    */
  virtual const uci::type::CommUserIO_ID_Type& getPortID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PortID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PortID.
    */
  virtual uci::type::CommUserIO_ID_Type& getPortID() = 0;

  /** Sets the complex content identified by PortID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PortID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IO_PortType& setPortID(const uci::type::CommUserIO_ID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by PortType.
    *
    * @return A const reference to the value of the enumeration identified by PortType.
    */
  virtual const uci::type::IO_PortTypeEnum& getPortType() const = 0;

  /** Returns a reference to the value of the enumeration identified by PortType.
    *
    * @return A reference to the value of the enumeration identified by PortType.
    */
  virtual uci::type::IO_PortTypeEnum& getPortType() = 0;

  /** Sets the value of the enumeration identified by PortType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IO_PortType& setPortType(const uci::type::IO_PortTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by PortType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IO_PortType& setPortType(uci::type::IO_PortTypeEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Configuration.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Configuration.
    */
  virtual const uci::type::IO_PortConfigurationStatusType& getConfiguration() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Configuration.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Configuration.
    */
  virtual uci::type::IO_PortConfigurationStatusType& getConfiguration() = 0;

  /** Sets the complex content identified by Configuration to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Configuration.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IO_PortType& setConfiguration(const uci::type::IO_PortConfigurationStatusType& value) = 0;

  /** Returns a const reference to the bounded list identified by ActivityID.
    *
    * @return A const reference to the bounded list identified by ActivityID.
    */
  virtual const uci::type::IO_PortType::ActivityID& getActivityID() const = 0;

  /** Returns a reference to the bounded list identified by ActivityID.
    *
    * @return A reference to the bounded list identified by ActivityID.
    */
  virtual uci::type::IO_PortType::ActivityID& getActivityID() = 0;

  /** Sets the bounded list identified by ActivityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IO_PortType& setActivityID(const uci::type::IO_PortType::ActivityID& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  IO_PortType() {
  }

  /** The destructor [only available to derived classes]. */
  ~IO_PortType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The IO_PortType to copy from.
    */
  IO_PortType(const IO_PortType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this IO_PortType to the contents of the IO_PortType on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The IO_PortType on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this IO_PortType.
    * @return A reference to this IO_PortType.
    */
  IO_PortType& operator=(const IO_PortType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_IO_PORTTYPE_H

