/** @file ThreatAssessmentMetricsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_THREATASSESSMENTMETRICSTYPE_H
#define UCI_TYPE_THREATASSESSMENTMETRICSTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "DetectionEnvelopeType.h"
#include "ThreatAssessmentProbabilityType.h"
#include "ThreatZoneType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ThreatAssessmentMetricsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ThreatAssessmentMetricsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ThreatAssessmentMetricsType.
    */
  static UCI_EXPORT ThreatAssessmentMetricsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ThreatAssessmentMetricsType initializing the data accessed by the new
    * ThreatAssessmentMetricsType using the data accessed by the specified ThreatAssessmentMetricsType (cloning).
    *
    * @param accessor The ThreatAssessmentMetricsType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created ThreatAssessmentMetricsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ThreatAssessmentMetricsType.
    */
  static UCI_EXPORT ThreatAssessmentMetricsType& create(const ThreatAssessmentMetricsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ThreatAssessmentMetricsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The ThreatAssessmentMetricsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ThreatAssessmentMetricsType& accessor);

  /** Returns this accessor's type constant, i.e. threatAssessmentMetricsType.
    *
    * @return This accessor's type constant, i.e. threatAssessmentMetricsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::threatAssessmentMetricsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ThreatAssessmentMetricsType.
    *
    * @return The version that was initialized from the uci:version attribute of ThreatAssessmentMetricsType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ThreatAssessmentMetricsType& accessor) = 0;

  /** Defines the detection characteristics of the vehicle as a "BugSplat". [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::DetectionEnvelopeType, uci::type::accessorType::detectionEnvelopeType> DetectionEnvelope;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Acquisition.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Acquisition.
    */
  virtual const uci::type::ThreatAssessmentProbabilityType& getAcquisition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Acquisition.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Acquisition.
    */
  virtual uci::type::ThreatAssessmentProbabilityType& getAcquisition() = 0;

  /** Sets the complex content identified by Acquisition to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Acquisition.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentMetricsType& setAcquisition(const uci::type::ThreatAssessmentProbabilityType& value) = 0;

  /** Returns whether the Element identified by Acquisition exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Acquisition is enabled or not.
    */
  virtual bool hasAcquisition() const = 0;

  /** Enables the Element identified by Acquisition.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Acquisition.
    */
  virtual uci::type::ThreatAssessmentProbabilityType& enableAcquisition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Acquisition.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentMetricsType& clearAcquisition() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Track.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Track.
    */
  virtual const uci::type::ThreatAssessmentProbabilityType& getTrack() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Track.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Track.
    */
  virtual uci::type::ThreatAssessmentProbabilityType& getTrack() = 0;

  /** Sets the complex content identified by Track to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Track.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentMetricsType& setTrack(const uci::type::ThreatAssessmentProbabilityType& value) = 0;

  /** Returns whether the Element identified by Track exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Track is enabled or not.
    */
  virtual bool hasTrack() const = 0;

  /** Enables the Element identified by Track.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Track.
    */
  virtual uci::type::ThreatAssessmentProbabilityType& enableTrack(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Track.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentMetricsType& clearTrack() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Launch.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Launch.
    */
  virtual const uci::type::ThreatAssessmentProbabilityType& getLaunch() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Launch.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Launch.
    */
  virtual uci::type::ThreatAssessmentProbabilityType& getLaunch() = 0;

  /** Sets the complex content identified by Launch to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Launch.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentMetricsType& setLaunch(const uci::type::ThreatAssessmentProbabilityType& value) = 0;

  /** Returns whether the Element identified by Launch exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Launch is enabled or not.
    */
  virtual bool hasLaunch() const = 0;

  /** Enables the Element identified by Launch.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Launch.
    */
  virtual uci::type::ThreatAssessmentProbabilityType& enableLaunch(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Launch.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentMetricsType& clearLaunch() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Intercept.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Intercept.
    */
  virtual const uci::type::ThreatAssessmentProbabilityType& getIntercept() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Intercept.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Intercept.
    */
  virtual uci::type::ThreatAssessmentProbabilityType& getIntercept() = 0;

  /** Sets the complex content identified by Intercept to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Intercept.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentMetricsType& setIntercept(const uci::type::ThreatAssessmentProbabilityType& value) = 0;

  /** Returns whether the Element identified by Intercept exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Intercept is enabled or not.
    */
  virtual bool hasIntercept() const = 0;

  /** Enables the Element identified by Intercept.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Intercept.
    */
  virtual uci::type::ThreatAssessmentProbabilityType& enableIntercept(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Intercept.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentMetricsType& clearIntercept() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Kill.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Kill.
    */
  virtual const uci::type::ThreatAssessmentProbabilityType& getKill() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Kill.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Kill.
    */
  virtual uci::type::ThreatAssessmentProbabilityType& getKill() = 0;

  /** Sets the complex content identified by Kill to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Kill.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentMetricsType& setKill(const uci::type::ThreatAssessmentProbabilityType& value) = 0;

  /** Returns whether the Element identified by Kill exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Kill is enabled or not.
    */
  virtual bool hasKill() const = 0;

  /** Enables the Element identified by Kill.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Kill.
    */
  virtual uci::type::ThreatAssessmentProbabilityType& enableKill(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Kill.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentMetricsType& clearKill() = 0;

  /** Returns a const reference to the bounded list identified by DetectionEnvelope.
    *
    * @return A const reference to the bounded list identified by DetectionEnvelope.
    */
  virtual const uci::type::ThreatAssessmentMetricsType::DetectionEnvelope& getDetectionEnvelope() const = 0;

  /** Returns a reference to the bounded list identified by DetectionEnvelope.
    *
    * @return A reference to the bounded list identified by DetectionEnvelope.
    */
  virtual uci::type::ThreatAssessmentMetricsType::DetectionEnvelope& getDetectionEnvelope() = 0;

  /** Sets the bounded list identified by DetectionEnvelope.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentMetricsType& setDetectionEnvelope(const uci::type::ThreatAssessmentMetricsType::DetectionEnvelope& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ThreatZone.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ThreatZone.
    */
  virtual const uci::type::ThreatZoneType& getThreatZone() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ThreatZone.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ThreatZone.
    */
  virtual uci::type::ThreatZoneType& getThreatZone() = 0;

  /** Sets the complex content identified by ThreatZone to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ThreatZone.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentMetricsType& setThreatZone(const uci::type::ThreatZoneType& value) = 0;

  /** Returns whether the Element identified by ThreatZone exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ThreatZone is enabled or not.
    */
  virtual bool hasThreatZone() const = 0;

  /** Enables the Element identified by ThreatZone.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ThreatZone.
    */
  virtual uci::type::ThreatZoneType& enableThreatZone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ThreatZone.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentMetricsType& clearThreatZone() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ThreatAssessmentMetricsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ThreatAssessmentMetricsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ThreatAssessmentMetricsType to copy from.
    */
  ThreatAssessmentMetricsType(const ThreatAssessmentMetricsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ThreatAssessmentMetricsType to the contents of the
    * ThreatAssessmentMetricsType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ThreatAssessmentMetricsType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this ThreatAssessmentMetricsType.
    * @return A reference to this ThreatAssessmentMetricsType.
    */
  ThreatAssessmentMetricsType& operator=(const ThreatAssessmentMetricsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_THREATASSESSMENTMETRICSTYPE_H

