/** @file PO_ComponentStatusFocalPlaneArrayChannelType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_COMPONENTSTATUSFOCALPLANEARRAYCHANNELTYPE_H
#define UCI_TYPE_PO_COMPONENTSTATUSFOCALPLANEARRAYCHANNELTYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "ComponentControlsStatusType.h"
#include "PO_ComponentStatusFocalPlaneArrayCollectionTimeType.h"
#include "PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType.h"
#include "PO_ComponentStatusFocalPlaneArrayOpticalBandType.h"
#include "PO_ComponentStatusFocalPlaneArrayPixelAggregationType.h"
#include "PO_ComponentStatusFocalPlaneArrayPixelPolarityType.h"
#include "PO_ComponentStatusFocalPlaneArrayPixelScalingType.h"
#include "PO_ComponentStatusFocalPlaneArrayScanDirectionType.h"
#include "PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType.h"
#include "PO_FPA_ChannelID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_ComponentStatusFocalPlaneArrayChannelType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PO_ComponentStatusFocalPlaneArrayChannelType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_ComponentStatusFocalPlaneArrayChannelType.
    */
  static UCI_EXPORT PO_ComponentStatusFocalPlaneArrayChannelType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_ComponentStatusFocalPlaneArrayChannelType initializing the data accessed by the new
    * PO_ComponentStatusFocalPlaneArrayChannelType using the data accessed by the specified
    * PO_ComponentStatusFocalPlaneArrayChannelType (cloning).
    *
    * @param accessor The PO_ComponentStatusFocalPlaneArrayChannelType that provides access to the data that is to be used
    *      to initialize the data accessed by the new created PO_ComponentStatusFocalPlaneArrayChannelType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_ComponentStatusFocalPlaneArrayChannelType.
    */
  static UCI_EXPORT PO_ComponentStatusFocalPlaneArrayChannelType& create(const PO_ComponentStatusFocalPlaneArrayChannelType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_ComponentStatusFocalPlaneArrayChannelType. Use of the specified accessor after
    * it has been destroyed will result in undefined behavior.
    *
    * @param accessor The PO_ComponentStatusFocalPlaneArrayChannelType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_ComponentStatusFocalPlaneArrayChannelType& accessor);

  /** Returns this accessor's type constant, i.e. pO_ComponentStatusFocalPlaneArrayChannelType.
    *
    * @return This accessor's type constant, i.e. pO_ComponentStatusFocalPlaneArrayChannelType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_ComponentStatusFocalPlaneArrayChannelType;
  }

  /** Returns the version that was initialized from the uci:version attribute of
    * PO_ComponentStatusFocalPlaneArrayChannelType.
    *
    * @return The version that was initialized from the uci:version attribute of
    *      PO_ComponentStatusFocalPlaneArrayChannelType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_ComponentStatusFocalPlaneArrayChannelType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ChannelID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ChannelID.
    */
  virtual const uci::type::PO_FPA_ChannelID_Type& getChannelID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ChannelID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ChannelID.
    */
  virtual uci::type::PO_FPA_ChannelID_Type& getChannelID() = 0;

  /** Sets the complex content identified by ChannelID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ChannelID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setChannelID(const uci::type::PO_FPA_ChannelID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ChannelControlsStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ChannelControlsStatus.
    */
  virtual const uci::type::ComponentControlsStatusType& getChannelControlsStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ChannelControlsStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ChannelControlsStatus.
    */
  virtual uci::type::ComponentControlsStatusType& getChannelControlsStatus() = 0;

  /** Sets the complex content identified by ChannelControlsStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ChannelControlsStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setChannelControlsStatus(const uci::type::ComponentControlsStatusType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OpticalBand.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OpticalBand.
    */
  virtual const uci::type::PO_ComponentStatusFocalPlaneArrayOpticalBandType& getOpticalBand() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OpticalBand.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OpticalBand.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayOpticalBandType& getOpticalBand() = 0;

  /** Sets the complex content identified by OpticalBand to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OpticalBand.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setOpticalBand(const uci::type::PO_ComponentStatusFocalPlaneArrayOpticalBandType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PixelAggregation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PixelAggregation.
    */
  virtual const uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType& getPixelAggregation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PixelAggregation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PixelAggregation.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType& getPixelAggregation() = 0;

  /** Sets the complex content identified by PixelAggregation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PixelAggregation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setPixelAggregation(const uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType& value) = 0;

  /** Returns whether the Element identified by PixelAggregation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PixelAggregation is enabled or not.
    */
  virtual bool hasPixelAggregation() const = 0;

  /** Enables the Element identified by PixelAggregation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PixelAggregation.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayPixelAggregationType& enablePixelAggregation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PixelAggregation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& clearPixelAggregation() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * TimeDelayIntegration.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      TimeDelayIntegration.
    */
  virtual const uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType& getTimeDelayIntegration() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TimeDelayIntegration.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TimeDelayIntegration.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType& getTimeDelayIntegration() = 0;

  /** Sets the complex content identified by TimeDelayIntegration to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TimeDelayIntegration.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setTimeDelayIntegration(const uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType& value) = 0;

  /** Returns whether the Element identified by TimeDelayIntegration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TimeDelayIntegration is enabled or not.
    */
  virtual bool hasTimeDelayIntegration() const = 0;

  /** Enables the Element identified by TimeDelayIntegration.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TimeDelayIntegration.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayTimeDelayIntegrationType& enableTimeDelayIntegration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TimeDelayIntegration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& clearTimeDelayIntegration() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PixelScaling.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PixelScaling.
    */
  virtual const uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType& getPixelScaling() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PixelScaling.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PixelScaling.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType& getPixelScaling() = 0;

  /** Sets the complex content identified by PixelScaling to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PixelScaling.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setPixelScaling(const uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType& value) = 0;

  /** Returns whether the Element identified by PixelScaling exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PixelScaling is enabled or not.
    */
  virtual bool hasPixelScaling() const = 0;

  /** Enables the Element identified by PixelScaling.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PixelScaling.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayPixelScalingType& enablePixelScaling(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PixelScaling.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& clearPixelScaling() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PixelPolarity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PixelPolarity.
    */
  virtual const uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType& getPixelPolarity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PixelPolarity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PixelPolarity.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType& getPixelPolarity() = 0;

  /** Sets the complex content identified by PixelPolarity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PixelPolarity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setPixelPolarity(const uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType& value) = 0;

  /** Returns whether the Element identified by PixelPolarity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PixelPolarity is enabled or not.
    */
  virtual bool hasPixelPolarity() const = 0;

  /** Enables the Element identified by PixelPolarity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PixelPolarity.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayPixelPolarityType& enablePixelPolarity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PixelPolarity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& clearPixelPolarity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CollectionTime.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CollectionTime.
    */
  virtual const uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType& getCollectionTime() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CollectionTime.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CollectionTime.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType& getCollectionTime() = 0;

  /** Sets the complex content identified by CollectionTime to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionTime.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setCollectionTime(const uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType& value) = 0;

  /** Returns whether the Element identified by CollectionTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionTime is enabled or not.
    */
  virtual bool hasCollectionTime() const = 0;

  /** Enables the Element identified by CollectionTime.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CollectionTime.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayCollectionTimeType& enableCollectionTime(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& clearCollectionTime() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * NonUniformityCorrection.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      NonUniformityCorrection.
    */
  virtual const uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType& getNonUniformityCorrection() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * NonUniformityCorrection.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      NonUniformityCorrection.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType& getNonUniformityCorrection() = 0;

  /** Sets the complex content identified by NonUniformityCorrection to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by NonUniformityCorrection.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setNonUniformityCorrection(const uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType& value) = 0;

  /** Returns whether the Element identified by NonUniformityCorrection exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NonUniformityCorrection is enabled or not.
    */
  virtual bool hasNonUniformityCorrection() const = 0;

  /** Enables the Element identified by NonUniformityCorrection.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      NonUniformityCorrection.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayNonUniformityCorrectionType& enableNonUniformityCorrection(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by NonUniformityCorrection.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& clearNonUniformityCorrection() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ScanDirection.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ScanDirection.
    */
  virtual const uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType& getScanDirection() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ScanDirection.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ScanDirection.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType& getScanDirection() = 0;

  /** Sets the complex content identified by ScanDirection to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ScanDirection.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& setScanDirection(const uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType& value) = 0;

  /** Returns whether the Element identified by ScanDirection exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ScanDirection is enabled or not.
    */
  virtual bool hasScanDirection() const = 0;

  /** Enables the Element identified by ScanDirection.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ScanDirection.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayScanDirectionType& enableScanDirection(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ScanDirection.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusFocalPlaneArrayChannelType& clearScanDirection() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_ComponentStatusFocalPlaneArrayChannelType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_ComponentStatusFocalPlaneArrayChannelType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_ComponentStatusFocalPlaneArrayChannelType to copy from.
    */
  PO_ComponentStatusFocalPlaneArrayChannelType(const PO_ComponentStatusFocalPlaneArrayChannelType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_ComponentStatusFocalPlaneArrayChannelType to the contents of
    * the PO_ComponentStatusFocalPlaneArrayChannelType on the right hand side (rhs) of the assignment operator [only
    * available to derived classes].
    *
    * @param rhs The PO_ComponentStatusFocalPlaneArrayChannelType on the right hand side (rhs) of the assignment operator
    *      whose contents are used to set the contents of this PO_ComponentStatusFocalPlaneArrayChannelType.
    * @return A reference to this PO_ComponentStatusFocalPlaneArrayChannelType.
    */
  PO_ComponentStatusFocalPlaneArrayChannelType& operator=(const PO_ComponentStatusFocalPlaneArrayChannelType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_COMPONENTSTATUSFOCALPLANEARRAYCHANNELTYPE_H

