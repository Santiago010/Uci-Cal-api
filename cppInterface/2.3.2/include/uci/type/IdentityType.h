/** @file IdentityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_IDENTITYTYPE_H
#define UCI_TYPE_IDENTITYTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/EOB_IdentityType.h"
#include "uci/type/EmitterIdentityType.h"
#include "uci/type/EnvironmentIdentityType.h"
#include "uci/type/FacilityIdentificationType.h"
#include "uci/type/PlatformIdentityType.h"
#include "uci/type/SpecificEmitterIdentityType.h"
#include "uci/type/SpecificIdentityType.h"
#include "uci/type/StandardIdentityType.h"
#include "uci/type/StoreType.h"
#include "uci/type/VehicleIdentificationType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class IdentityType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new IdentityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IdentityType.
    */
  static UCI_EXPORT IdentityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new IdentityType initializing the data accessed by the new IdentityType using the data
    * accessed by the specified IdentityType (cloning).
    *
    * @param accessor The IdentityType that provides access to the data that is to be used to initialize the data accessed
    *      by the new created IdentityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IdentityType.
    */
  static UCI_EXPORT IdentityType& create(const IdentityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified IdentityType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The IdentityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(IdentityType& accessor);

  /** Returns this accessor's type constant, i.e. identityType.
    *
    * @return This accessor's type constant, i.e. identityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::identityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of IdentityType.
    *
    * @return The version that was initialized from the uci:version attribute of IdentityType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const IdentityType& accessor) = 0;

  /** Indicates an emitter type that has been identified in association with the asset. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EmitterIdentityType, uci::type::accessorType::emitterIdentityType> Emitter;

  /** Indicates a specific emitter type ***instance*** that has been identified in association with the asset. Specific
    * Emitter Identification (SEI) technology passively measures emitters, and characterizes unique emitter signatures that
    * can be used for friendly or enemy emitter identification and fingerprinting. A SEI and this SpecificEmitter element
    * refer to a specific physical instance of a type of emitter as given in the sibling EmitterType element. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SpecificEmitterIdentityType, uci::type::accessorType::specificEmitterIdentityType> SpecificEmitter;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Standard.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Standard.
    */
  virtual const uci::type::StandardIdentityType& getStandard() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Standard.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Standard.
    */
  virtual uci::type::StandardIdentityType& getStandard() = 0;

  /** Sets the complex content identified by Standard to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Standard.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& setStandard(const uci::type::StandardIdentityType& value) = 0;

  /** Returns whether the Element identified by Standard exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Standard is enabled or not.
    */
  virtual bool hasStandard() const = 0;

  /** Enables the Element identified by Standard.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Standard.
    */
  virtual uci::type::StandardIdentityType& enableStandard(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Standard.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& clearStandard() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Environment.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Environment.
    */
  virtual const uci::type::EnvironmentIdentityType& getEnvironment() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Environment.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Environment.
    */
  virtual uci::type::EnvironmentIdentityType& getEnvironment() = 0;

  /** Sets the complex content identified by Environment to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Environment.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& setEnvironment(const uci::type::EnvironmentIdentityType& value) = 0;

  /** Returns whether the Element identified by Environment exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Environment is enabled or not.
    */
  virtual bool hasEnvironment() const = 0;

  /** Enables the Element identified by Environment.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Environment.
    */
  virtual uci::type::EnvironmentIdentityType& enableEnvironment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Environment.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& clearEnvironment() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Platform.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Platform.
    */
  virtual const uci::type::PlatformIdentityType& getPlatform() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Platform.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Platform.
    */
  virtual uci::type::PlatformIdentityType& getPlatform() = 0;

  /** Sets the complex content identified by Platform to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Platform.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& setPlatform(const uci::type::PlatformIdentityType& value) = 0;

  /** Returns whether the Element identified by Platform exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Platform is enabled or not.
    */
  virtual bool hasPlatform() const = 0;

  /** Enables the Element identified by Platform.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Platform.
    */
  virtual uci::type::PlatformIdentityType& enablePlatform(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Platform.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& clearPlatform() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Specific.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Specific.
    */
  virtual const uci::type::SpecificIdentityType& getSpecific() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Specific.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Specific.
    */
  virtual uci::type::SpecificIdentityType& getSpecific() = 0;

  /** Sets the complex content identified by Specific to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Specific.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& setSpecific(const uci::type::SpecificIdentityType& value) = 0;

  /** Returns whether the Element identified by Specific exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Specific is enabled or not.
    */
  virtual bool hasSpecific() const = 0;

  /** Enables the Element identified by Specific.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Specific.
    */
  virtual uci::type::SpecificIdentityType& enableSpecific(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Specific.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& clearSpecific() = 0;

  /** Returns a const reference to the bounded list identified by Emitter.
    *
    * @return A const reference to the bounded list identified by Emitter.
    */
  virtual const uci::type::IdentityType::Emitter& getEmitter() const = 0;

  /** Returns a reference to the bounded list identified by Emitter.
    *
    * @return A reference to the bounded list identified by Emitter.
    */
  virtual uci::type::IdentityType::Emitter& getEmitter() = 0;

  /** Sets the bounded list identified by Emitter.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& setEmitter(const uci::type::IdentityType::Emitter& value) = 0;

  /** Returns a const reference to the bounded list identified by SpecificEmitter.
    *
    * @return A const reference to the bounded list identified by SpecificEmitter.
    */
  virtual const uci::type::IdentityType::SpecificEmitter& getSpecificEmitter() const = 0;

  /** Returns a reference to the bounded list identified by SpecificEmitter.
    *
    * @return A reference to the bounded list identified by SpecificEmitter.
    */
  virtual uci::type::IdentityType::SpecificEmitter& getSpecificEmitter() = 0;

  /** Sets the bounded list identified by SpecificEmitter.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& setSpecificEmitter(const uci::type::IdentityType::SpecificEmitter& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SpecificFacility.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SpecificFacility.
    */
  virtual const uci::type::FacilityIdentificationType& getSpecificFacility() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SpecificFacility.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SpecificFacility.
    */
  virtual uci::type::FacilityIdentificationType& getSpecificFacility() = 0;

  /** Sets the complex content identified by SpecificFacility to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SpecificFacility.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& setSpecificFacility(const uci::type::FacilityIdentificationType& value) = 0;

  /** Returns whether the Element identified by SpecificFacility exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SpecificFacility is enabled or not.
    */
  virtual bool hasSpecificFacility() const = 0;

  /** Enables the Element identified by SpecificFacility.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SpecificFacility.
    */
  virtual uci::type::FacilityIdentificationType& enableSpecificFacility(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SpecificFacility.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& clearSpecificFacility() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SpecificVehicle.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SpecificVehicle.
    */
  virtual const uci::type::VehicleIdentificationType& getSpecificVehicle() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SpecificVehicle.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SpecificVehicle.
    */
  virtual uci::type::VehicleIdentificationType& getSpecificVehicle() = 0;

  /** Sets the complex content identified by SpecificVehicle to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SpecificVehicle.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& setSpecificVehicle(const uci::type::VehicleIdentificationType& value) = 0;

  /** Returns whether the Element identified by SpecificVehicle exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SpecificVehicle is enabled or not.
    */
  virtual bool hasSpecificVehicle() const = 0;

  /** Enables the Element identified by SpecificVehicle.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SpecificVehicle.
    */
  virtual uci::type::VehicleIdentificationType& enableSpecificVehicle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SpecificVehicle.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& clearSpecificVehicle() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EOB.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EOB.
    */
  virtual const uci::type::EOB_IdentityType& getEOB() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EOB.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EOB.
    */
  virtual uci::type::EOB_IdentityType& getEOB() = 0;

  /** Sets the complex content identified by EOB to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EOB.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& setEOB(const uci::type::EOB_IdentityType& value) = 0;

  /** Returns whether the Element identified by EOB exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EOB is enabled or not.
    */
  virtual bool hasEOB() const = 0;

  /** Enables the Element identified by EOB.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EOB.
    */
  virtual uci::type::EOB_IdentityType& enableEOB(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EOB.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& clearEOB() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Weapon.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Weapon.
    */
  virtual const uci::type::StoreType& getWeapon() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Weapon.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Weapon.
    */
  virtual uci::type::StoreType& getWeapon() = 0;

  /** Sets the complex content identified by Weapon to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Weapon.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& setWeapon(const uci::type::StoreType& value) = 0;

  /** Returns whether the Element identified by Weapon exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Weapon is enabled or not.
    */
  virtual bool hasWeapon() const = 0;

  /** Enables the Element identified by Weapon.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Weapon.
    */
  virtual uci::type::StoreType& enableWeapon(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Weapon.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityType& clearWeapon() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  IdentityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~IdentityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The IdentityType to copy from.
    */
  IdentityType(const IdentityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this IdentityType to the contents of the IdentityType on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The IdentityType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this IdentityType.
    * @return A reference to this IdentityType.
    */
  IdentityType& operator=(const IdentityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_IDENTITYTYPE_H

