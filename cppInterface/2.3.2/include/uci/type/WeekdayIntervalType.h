/** @file WeekdayIntervalType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_WEEKDAYINTERVALTYPE_H
#define UCI_TYPE_WEEKDAYINTERVALTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/DurationType.h"
#include "uci/type/TimeType.h"
#include "uci/type/WeekdayEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class WeekdayIntervalType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new WeekdayIntervalType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed WeekdayIntervalType.
    */
  static UCI_EXPORT WeekdayIntervalType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new WeekdayIntervalType initializing the data accessed by the new WeekdayIntervalType using
    * the data accessed by the specified WeekdayIntervalType (cloning).
    *
    * @param accessor The WeekdayIntervalType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created WeekdayIntervalType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed WeekdayIntervalType.
    */
  static UCI_EXPORT WeekdayIntervalType& create(const WeekdayIntervalType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified WeekdayIntervalType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The WeekdayIntervalType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(WeekdayIntervalType& accessor);

  /** Devuelve la constante de tipo de este accesorio, p.e. weekdayIntervalType.
    *
  /** Returns this accessor's type constant, i.e. weekdayIntervalType.
    *
    * @return This accessor's type constant, i.e. weekdayIntervalType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::weekdayIntervalType;
  }

  /** Returns the version that was initialized from the uci:version attribute of WeekdayIntervalType.
    *
    * @return The version that was initialized from the uci:version attribute of WeekdayIntervalType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const WeekdayIntervalType& accessor) = 0;

  /** Indicates the days of the week in which the interval is valid. List size for this element is based on "Select All
    * That Apply" condition. [Occurrences: Minimum: 1; Maximum: 7]
    */
  typedef uci::base::BoundedList<uci::type::WeekdayEnum, uci::type::accessorType::weekdayEnum> Weekday;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TimeSpan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TimeSpan.
    */
  virtual const uci::type::DateTimeRangeType& getTimeSpan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TimeSpan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TimeSpan.
    */
  virtual uci::type::DateTimeRangeType& getTimeSpan() = 0;

  /** Sets the complex content identified by TimeSpan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TimeSpan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeekdayIntervalType& setTimeSpan(const uci::type::DateTimeRangeType& value) = 0;

  /** Returns a const reference to the bounded list identified by Weekday.
    *
    * @return A const reference to the bounded list identified by Weekday.
    */
  virtual const uci::type::WeekdayIntervalType::Weekday& getWeekday() const = 0;

  /** Returns a reference to the bounded list identified by Weekday.
    *
    * @return A reference to the bounded list identified by Weekday.
    */
  virtual uci::type::WeekdayIntervalType::Weekday& getWeekday() = 0;

  /** Sets the bounded list identified by Weekday.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeekdayIntervalType& setWeekday(const uci::type::WeekdayIntervalType::Weekday& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by WeeklyIntervalPeriod.
    *
    * @return The value of the simple primitive data type identified by WeeklyIntervalPeriod.
    */
  virtual xs::UnsignedInt getWeeklyIntervalPeriod() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by WeeklyIntervalPeriod.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeekdayIntervalType& setWeeklyIntervalPeriod(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by StartTime.
    *
    * @return The value of the simple primitive data type identified by StartTime.
    */
  virtual uci::type::TimeTypeValue getStartTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by StartTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeekdayIntervalType& setStartTime(uci::type::TimeTypeValue value) = 0;

  /** Returns whether the Element identified by StartTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by StartTime is enabled or not.
    */
  virtual bool hasStartTime() const = 0;

  /** Clears (disabled) the Element identified by StartTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeekdayIntervalType& clearStartTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Duration.
    *
    * @return The value of the simple primitive data type identified by Duration.
    */
  virtual uci::type::DurationTypeValue getDuration() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Duration.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeekdayIntervalType& setDuration(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by Duration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Duration is enabled or not.
    */
  virtual bool hasDuration() const = 0;

  /** Clears (disabled) the Element identified by Duration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeekdayIntervalType& clearDuration() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  WeekdayIntervalType() {
  }

  /** The destructor [only available to derived classes]. */
  ~WeekdayIntervalType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The WeekdayIntervalType to copy from.
    */
  WeekdayIntervalType(const WeekdayIntervalType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this WeekdayIntervalType to the contents of the WeekdayIntervalType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The WeekdayIntervalType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this WeekdayIntervalType.
    * @return A reference to this WeekdayIntervalType.
    */
  WeekdayIntervalType& operator=(const WeekdayIntervalType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_WEEKDAYINTERVALTYPE_H

