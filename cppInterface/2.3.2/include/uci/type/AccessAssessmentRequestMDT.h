/** @file AccessAssessmentRequestMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ACCESSASSESSMENTREQUESTMDT_H
#define UCI_TYPE_ACCESSASSESSMENTREQUESTMDT_H

#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AccessEffortEnum.h"
#include "CapabilityTaxonomyUniversalType.h"
#include "DateTimeRangeType.h"
#include "DurationType.h"
#include "IdentityKindAssetType.h"
#include "RepeatEnum.h"
#include "RequestBaseType.h"
#include "VisibleString32Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class AccessAssessmentRequestMDT : public virtual RequestBaseType {
public:

  /** This method constructs a new AccessAssessmentRequestMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AccessAssessmentRequestMDT.
    */
  static UCI_EXPORT AccessAssessmentRequestMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new AccessAssessmentRequestMDT initializing the data accessed by the new
    * AccessAssessmentRequestMDT using the data accessed by the specified AccessAssessmentRequestMDT (cloning).
    *
    * @param accessor The AccessAssessmentRequestMDT that provides access to the data that is to be used to initialize the
    *      data accessed by the new created AccessAssessmentRequestMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AccessAssessmentRequestMDT.
    */
  static UCI_EXPORT AccessAssessmentRequestMDT& create(const AccessAssessmentRequestMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified AccessAssessmentRequestMDT. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The AccessAssessmentRequestMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(AccessAssessmentRequestMDT& accessor);

  /** Returns this accessor's type constant, i.e. accessAssessmentRequestMDT.
    *
    * @return This accessor's type constant, i.e. accessAssessmentRequestMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::accessAssessmentRequestMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of AccessAssessmentRequestMDT.
    *
    * @return The version that was initialized from the uci:version attribute of AccessAssessmentRequestMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AccessAssessmentRequestMDT& accessor) = 0;

  /** Indicates a subject of the AccessAssessment; a column to include in the access assessment table result. See
    * AccessAssessment message for more insight into table structure. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::IdentityKindAssetType, uci::type::accessorType::identityKindAssetType> SubjectObject;

  /** Indicates an object to assess for each sibling SubjectObject; a row to include in the access assessment table result.
    * See AccessAssessment message for more insight into table structure. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::IdentityKindAssetType, uci::type::accessorType::identityKindAssetType> ObjectToAssess;

  /** Indicates a modeled "level of effort" to assess per capability per Object. Each Subject-Object pair is a cell in the
    * resulting access assessment table. Each cell can include an access assessment dimension per modeled level of effort
    * indicated here. See AccessAssessment message for more insight into table structure. List size for this element is
    * based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 5]
    */
  typedef uci::base::BoundedList<uci::type::AccessEffortEnum, uci::type::accessorType::accessEffortEnum> EffortToAssess;

  /** Returns a const reference to the value of the enumeration identified by RequestFrequency.
    *
    * @return A const reference to the value of the enumeration identified by RequestFrequency.
    */
  virtual const uci::type::RepeatEnum& getRequestFrequency() const = 0;

  /** Returns a reference to the value of the enumeration identified by RequestFrequency.
    *
    * @return A reference to the value of the enumeration identified by RequestFrequency.
    */
  virtual uci::type::RepeatEnum& getRequestFrequency() = 0;

  /** Sets the value of the enumeration identified by RequestFrequency.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& setRequestFrequency(const uci::type::RepeatEnum& value) = 0;

  /** Sets the value of the enumeration identified by RequestFrequency.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& setRequestFrequency(uci::type::RepeatEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AssessmentPeriod.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AssessmentPeriod.
    */
  virtual const uci::type::DateTimeRangeType& getAssessmentPeriod() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AssessmentPeriod.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AssessmentPeriod.
    */
  virtual uci::type::DateTimeRangeType& getAssessmentPeriod() = 0;

  /** Sets the complex content identified by AssessmentPeriod to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AssessmentPeriod.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& setAssessmentPeriod(const uci::type::DateTimeRangeType& value) = 0;

  /** Returns whether the Element identified by AssessmentPeriod exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AssessmentPeriod is enabled or not.
    */
  virtual bool hasAssessmentPeriod() const = 0;

  /** Enables the Element identified by AssessmentPeriod.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AssessmentPeriod.
    */
  virtual uci::type::DateTimeRangeType& enableAssessmentPeriod(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AssessmentPeriod.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& clearAssessmentPeriod() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AssessmentInterval.
    *
    * @return The value of the simple primitive data type identified by AssessmentInterval.
    */
  virtual uci::type::DurationTypeValue getAssessmentInterval() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AssessmentInterval.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& setAssessmentInterval(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by AssessmentInterval exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AssessmentInterval is enabled or not.
    */
  virtual bool hasAssessmentInterval() const = 0;

  /** Clears (disabled) the Element identified by AssessmentInterval.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& clearAssessmentInterval() = 0;

  /** Returns a const reference to the bounded list identified by SubjectObject.
    *
    * @return A const reference to the bounded list identified by SubjectObject.
    */
  virtual const uci::type::AccessAssessmentRequestMDT::SubjectObject& getSubjectObject() const = 0;

  /** Returns a reference to the bounded list identified by SubjectObject.
    *
    * @return A reference to the bounded list identified by SubjectObject.
    */
  virtual uci::type::AccessAssessmentRequestMDT::SubjectObject& getSubjectObject() = 0;

  /** Sets the bounded list identified by SubjectObject.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& setSubjectObject(const uci::type::AccessAssessmentRequestMDT::SubjectObject& value) = 0;

  /** Returns a const reference to the bounded list identified by ObjectToAssess.
    *
    * @return A const reference to the bounded list identified by ObjectToAssess.
    */
  virtual const uci::type::AccessAssessmentRequestMDT::ObjectToAssess& getObjectToAssess() const = 0;

  /** Returns a reference to the bounded list identified by ObjectToAssess.
    *
    * @return A reference to the bounded list identified by ObjectToAssess.
    */
  virtual uci::type::AccessAssessmentRequestMDT::ObjectToAssess& getObjectToAssess() = 0;

  /** Sets the bounded list identified by ObjectToAssess.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& setObjectToAssess(const uci::type::AccessAssessmentRequestMDT::ObjectToAssess& value) = 0;

  /** Returns a const reference to the bounded list identified by EffortToAssess.
    *
    * @return A const reference to the bounded list identified by EffortToAssess.
    */
  virtual const uci::type::AccessAssessmentRequestMDT::EffortToAssess& getEffortToAssess() const = 0;

  /** Returns a reference to the bounded list identified by EffortToAssess.
    *
    * @return A reference to the bounded list identified by EffortToAssess.
    */
  virtual uci::type::AccessAssessmentRequestMDT::EffortToAssess& getEffortToAssess() = 0;

  /** Sets the bounded list identified by EffortToAssess.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& setEffortToAssess(const uci::type::AccessAssessmentRequestMDT::EffortToAssess& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CapabilitiesToAssess.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CapabilitiesToAssess.
    */
  virtual const uci::type::CapabilityTaxonomyUniversalType& getCapabilitiesToAssess() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CapabilitiesToAssess.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CapabilitiesToAssess.
    */
  virtual uci::type::CapabilityTaxonomyUniversalType& getCapabilitiesToAssess() = 0;

  /** Sets the complex content identified by CapabilitiesToAssess to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CapabilitiesToAssess.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& setCapabilitiesToAssess(const uci::type::CapabilityTaxonomyUniversalType& value) = 0;

  /** Returns whether the Element identified by CapabilitiesToAssess exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CapabilitiesToAssess is enabled or not.
    */
  virtual bool hasCapabilitiesToAssess() const = 0;

  /** Enables the Element identified by CapabilitiesToAssess.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CapabilitiesToAssess.
    */
  virtual uci::type::CapabilityTaxonomyUniversalType& enableCapabilitiesToAssess(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CapabilitiesToAssess.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& clearCapabilitiesToAssess() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by AssessmentName.
    *
    * @return A const reference to the accessor that provides access to the string identified by AssessmentName.
    */
  virtual const uci::type::VisibleString32Type& getAssessmentName() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by AssessmentName.
    *
    * @return A reference to the accessor that provides access to the string identified by AssessmentName.
    */
  virtual uci::type::VisibleString32Type& getAssessmentName() = 0;

  /** Sets the string identified by AssessmentName to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by AssessmentName.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& setAssessmentName(const uci::type::VisibleString32Type& value) = 0;

  /** Sets the string identified by AssessmentName to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& setAssessmentName(const std::string& value) = 0;

  /** Sets the string identified by AssessmentName to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& setAssessmentName(const char* value) = 0;

  /** Returns whether the Element identified by AssessmentName exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AssessmentName is enabled or not.
    */
  virtual bool hasAssessmentName() const = 0;

  /** Enables the Element identified by AssessmentName.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by AssessmentName.
    */
  virtual uci::type::VisibleString32Type& enableAssessmentName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AssessmentName.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& clearAssessmentName() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ResultsInAccessAssessmentMessage.
    *
    * @return The value of the simple primitive data type identified by ResultsInAccessAssessmentMessage.
    */
  virtual xs::Boolean getResultsInAccessAssessmentMessage() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ResultsInAccessAssessmentMessage.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessAssessmentRequestMDT& setResultsInAccessAssessmentMessage(xs::Boolean value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AccessAssessmentRequestMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~AccessAssessmentRequestMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AccessAssessmentRequestMDT to copy from.
    */
  AccessAssessmentRequestMDT(const AccessAssessmentRequestMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AccessAssessmentRequestMDT to the contents of the
    * AccessAssessmentRequestMDT on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The AccessAssessmentRequestMDT on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this AccessAssessmentRequestMDT.
    * @return A reference to this AccessAssessmentRequestMDT.
    */
  AccessAssessmentRequestMDT& operator=(const AccessAssessmentRequestMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ACCESSASSESSMENTREQUESTMDT_H

