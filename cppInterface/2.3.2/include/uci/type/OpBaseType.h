/** @file OpBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OPBASETYPE_H
#define UCI_TYPE_OPBASETYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/UnsignedIntAccessor.h"
#include "../base/export.h"
#include "CreationSourceEnum.h"
#include "DataLinkIdentifierPET.h"
#include "MissionTraceabilityType.h"
#include "OpDescriptionType.h"
#include "QualifyingTagsType.h"
#include "ScheduleType.h"
#include "SystemID_Type.h"
#include "SystemScheduleStateType.h"
#include "TimeFunctionType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The base type containing information common to messages OpLine, OpPoint, and OpZone. */
class OpBaseType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OpBaseType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OpBaseType.
    */
  static UCI_EXPORT OpBaseType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OpBaseType initializing the data accessed by the new OpBaseType using the data accessed
    * by the specified OpBaseType (cloning).
    *
    * @param accessor The OpBaseType that provides access to the data that is to be used to initialize the data accessed by
    *      the new created OpBaseType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OpBaseType.
    */
  static UCI_EXPORT OpBaseType& create(const OpBaseType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OpBaseType. Use of the specified accessor after it has been destroyed will result
    * in undefined behavior.
    *
    * @param accessor The OpBaseType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OpBaseType& accessor);

  /** Returns this accessor's type constant, i.e. opBaseType.
    *
    * @return This accessor's type constant, i.e. opBaseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::opBaseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OpBaseType.
    *
    * @return The version that was initialized from the uci:version attribute of OpBaseType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.001.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OpBaseType& accessor) = 0;

  /** Indicates time related events that are associated to the Op data type such as when activated or when operational. The
    * multiplicity is limited to N-1 options where NONE is an event that has no value, thus removed from list of available
    * options. [Occurrences: Minimum: 0; Maximum: 12]
    */
  typedef uci::base::BoundedList<uci::type::TimeFunctionType, uci::type::accessorType::timeFunctionType> AssociatedTime;

  /** List of data link ID. Multiple data link IDs can be reported for the same network type. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::DataLinkIdentifierPET, uci::type::accessorType::dataLinkIdentifierPET> DataLinkIdentifier;

  /** One or more systems to which this item applies. If omitted, item applies to all systems (i.e., Link-16 J3.0 receipt
    * is globally assigned). [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SystemID_Type, uci::type::accessorType::systemID_Type> SystemID;

  /** System-specific schedule that will override any part of the main schedule. This allows for system-specific schedule
    * different than main schedule. When adding a SystemScheduleOverride, the child SystemID also must be added to the
    * sibling SystemID list if the sibling list is not empty. The SystemScheduleOverride is independent of time planning.
    * For the system, this override can be done at execution. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SystemScheduleStateType, uci::type::accessorType::systemScheduleStateType> SystemScheduleOverride;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OpDescription.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OpDescription.
    */
  virtual const uci::type::OpDescriptionType& getOpDescription() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OpDescription.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OpDescription.
    */
  virtual uci::type::OpDescriptionType& getOpDescription() = 0;

  /** Sets the complex content identified by OpDescription to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OpDescription.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& setOpDescription(const uci::type::OpDescriptionType& value) = 0;

  /** Returns whether the Element identified by OpDescription exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OpDescription is enabled or not.
    */
  virtual bool hasOpDescription() const = 0;

  /** Enables the Element identified by OpDescription.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OpDescription.
    */
  virtual uci::type::OpDescriptionType& enableOpDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OpDescription.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& clearOpDescription() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * MissionTraceability.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      MissionTraceability.
    */
  virtual const uci::type::MissionTraceabilityType& getMissionTraceability() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MissionTraceability.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MissionTraceability.
    */
  virtual uci::type::MissionTraceabilityType& getMissionTraceability() = 0;

  /** Sets the complex content identified by MissionTraceability to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MissionTraceability.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& setMissionTraceability(const uci::type::MissionTraceabilityType& value) = 0;

  /** Returns whether the Element identified by MissionTraceability exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MissionTraceability is enabled or not.
    */
  virtual bool hasMissionTraceability() const = 0;

  /** Enables the Element identified by MissionTraceability.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MissionTraceability.
    */
  virtual uci::type::MissionTraceabilityType& enableMissionTraceability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MissionTraceability.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& clearMissionTraceability() = 0;

  /** Returns a const reference to the value of the enumeration identified by Source.
    *
    * @return A const reference to the value of the enumeration identified by Source.
    */
  virtual const uci::type::CreationSourceEnum& getSource() const = 0;

  /** Returns a reference to the value of the enumeration identified by Source.
    *
    * @return A reference to the value of the enumeration identified by Source.
    */
  virtual uci::type::CreationSourceEnum& getSource() = 0;

  /** Sets the value of the enumeration identified by Source.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& setSource(const uci::type::CreationSourceEnum& value) = 0;

  /** Sets the value of the enumeration identified by Source.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& setSource(uci::type::CreationSourceEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Source exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Source is enabled or not.
    */
  virtual bool hasSource() const = 0;

  /** Enables the Element identified by Source.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Source.
    */
  virtual uci::type::CreationSourceEnum& enableSource(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Source.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& clearSource() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Schedule.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Schedule.
    */
  virtual const uci::type::ScheduleType& getSchedule() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Schedule.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Schedule.
    */
  virtual uci::type::ScheduleType& getSchedule() = 0;

  /** Sets the complex content identified by Schedule to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Schedule.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& setSchedule(const uci::type::ScheduleType& value) = 0;

  /** Returns whether the Element identified by Schedule exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Schedule is enabled or not.
    */
  virtual bool hasSchedule() const = 0;

  /** Enables the Element identified by Schedule.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Schedule.
    */
  virtual uci::type::ScheduleType& enableSchedule(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Schedule.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& clearSchedule() = 0;

  /** Returns a const reference to the bounded list identified by AssociatedTime.
    *
    * @return A const reference to the bounded list identified by AssociatedTime.
    */
  virtual const uci::type::OpBaseType::AssociatedTime& getAssociatedTime() const = 0;

  /** Returns a reference to the bounded list identified by AssociatedTime.
    *
    * @return A reference to the bounded list identified by AssociatedTime.
    */
  virtual uci::type::OpBaseType::AssociatedTime& getAssociatedTime() = 0;

  /** Sets the bounded list identified by AssociatedTime.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& setAssociatedTime(const uci::type::OpBaseType::AssociatedTime& value) = 0;

  /** Returns a const reference to the bounded list identified by DataLinkIdentifier.
    *
    * @return A const reference to the bounded list identified by DataLinkIdentifier.
    */
  virtual const uci::type::OpBaseType::DataLinkIdentifier& getDataLinkIdentifier() const = 0;

  /** Returns a reference to the bounded list identified by DataLinkIdentifier.
    *
    * @return A reference to the bounded list identified by DataLinkIdentifier.
    */
  virtual uci::type::OpBaseType::DataLinkIdentifier& getDataLinkIdentifier() = 0;

  /** Sets the bounded list identified by DataLinkIdentifier.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& setDataLinkIdentifier(const uci::type::OpBaseType::DataLinkIdentifier& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Priority.
    *
    * @return The value of the simple primitive data type identified by Priority.
    */
  virtual xs::UnsignedInt getPriority() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Priority.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& setPriority(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by Priority exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Priority is enabled or not.
    */
  virtual bool hasPriority() const = 0;

  /** Clears (disabled) the Element identified by Priority.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& clearPriority() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by QualifyingTags.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by QualifyingTags.
    */
  virtual const uci::type::QualifyingTagsType& getQualifyingTags() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by QualifyingTags.
    *
    * @return A reference to the accessor that provides access to the complex content identified by QualifyingTags.
    */
  virtual uci::type::QualifyingTagsType& getQualifyingTags() = 0;

  /** Sets the complex content identified by QualifyingTags to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by QualifyingTags.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& setQualifyingTags(const uci::type::QualifyingTagsType& value) = 0;

  /** Returns whether the Element identified by QualifyingTags exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by QualifyingTags is enabled or not.
    */
  virtual bool hasQualifyingTags() const = 0;

  /** Enables the Element identified by QualifyingTags.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by QualifyingTags.
    */
  virtual uci::type::QualifyingTagsType& enableQualifyingTags(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by QualifyingTags.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& clearQualifyingTags() = 0;

  /** Returns a const reference to the bounded list identified by SystemID.
    *
    * @return A const reference to the bounded list identified by SystemID.
    */
  virtual const uci::type::OpBaseType::SystemID& getSystemID() const = 0;

  /** Returns a reference to the bounded list identified by SystemID.
    *
    * @return A reference to the bounded list identified by SystemID.
    */
  virtual uci::type::OpBaseType::SystemID& getSystemID() = 0;

  /** Sets the bounded list identified by SystemID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& setSystemID(const uci::type::OpBaseType::SystemID& value) = 0;

  /** Returns a const reference to the bounded list identified by SystemScheduleOverride.
    *
    * @return A const reference to the bounded list identified by SystemScheduleOverride.
    */
  virtual const uci::type::OpBaseType::SystemScheduleOverride& getSystemScheduleOverride() const = 0;

  /** Returns a reference to the bounded list identified by SystemScheduleOverride.
    *
    * @return A reference to the bounded list identified by SystemScheduleOverride.
    */
  virtual uci::type::OpBaseType::SystemScheduleOverride& getSystemScheduleOverride() = 0;

  /** Sets the bounded list identified by SystemScheduleOverride.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpBaseType& setSystemScheduleOverride(const uci::type::OpBaseType::SystemScheduleOverride& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OpBaseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OpBaseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OpBaseType to copy from.
    */
  OpBaseType(const OpBaseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OpBaseType to the contents of the OpBaseType on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OpBaseType on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this OpBaseType.
    * @return A reference to this OpBaseType.
    */
  OpBaseType& operator=(const OpBaseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_OPBASETYPE_H

