/** @file EA_ActivityCommandType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_EA_ACTIVITYCOMMANDTYPE_H
#define UCI_TYPE_EA_ACTIVITYCOMMANDTYPE_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CapabilityCommandFrequencyType.h"
#include "uci/type/DependentActivityType.h"
#include "uci/type/EA_ActivityChangeBeamCommandType.h"
#include "uci/type/EA_ChangeLocationAndPowerType.h"
#include "uci/type/ProtectedAssetReturnPowerType.h"
#include "uci/type/SelectAntennaType.h"
#include "uci/type/SharedRF_ApertureActivityCommandBaseType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class EA_ActivityCommandType : public virtual SharedRF_ApertureActivityCommandBaseType {
public:

  /** This method constructs a new EA_ActivityCommandType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EA_ActivityCommandType.
    */
  static UCI_EXPORT EA_ActivityCommandType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new EA_ActivityCommandType initializing the data accessed by the new EA_ActivityCommandType
    * using the data accessed by the specified EA_ActivityCommandType (cloning).
    *
    * @param accessor The EA_ActivityCommandType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created EA_ActivityCommandType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EA_ActivityCommandType.
    */
  static UCI_EXPORT EA_ActivityCommandType& create(const EA_ActivityCommandType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified EA_ActivityCommandType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The EA_ActivityCommandType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(EA_ActivityCommandType& accessor);

  /** Returns this accessor's type constant, i.e. eA_ActivityCommandType.
    *
    * @return This accessor's type constant, i.e. eA_ActivityCommandType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::eA_ActivityCommandType;
  }

  /** Returns the version that was initialized from the uci:version attribute of EA_ActivityCommandType.
    *
    * @return The version that was initialized from the uci:version attribute of EA_ActivityCommandType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const EA_ActivityCommandType& accessor) = 0;

  /** Indicates a command to modify an existing Beam of an existing EA Activity. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EA_ActivityChangeBeamCommandType, uci::type::accessorType::eA_ActivityChangeBeamCommandType> ChangeBeam;

  /** The ProtectedAsset child element indicates which of the protected assets of the activity are the subject of the child
    * attribute ChangeProtectedAssetPredictedReturnPower. (In order to add or remove protected entities, a new
    * CapabilityCommandType must be utilized.). [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProtectedAssetReturnPowerType, uci::type::accessorType::protectedAssetReturnPowerType> ChangeProtectedEntityPredictedReturnPower;

  /** Returns a const reference to the bounded list identified by ChangeBeam.
    *
    * @return A const reference to the bounded list identified by ChangeBeam.
    */
  virtual const uci::type::EA_ActivityCommandType::ChangeBeam& getChangeBeam() const = 0;

  /** Returns a reference to the bounded list identified by ChangeBeam.
    *
    * @return A reference to the bounded list identified by ChangeBeam.
    */
  virtual uci::type::EA_ActivityCommandType::ChangeBeam& getChangeBeam() = 0;

  /** Sets the bounded list identified by ChangeBeam.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_ActivityCommandType& setChangeBeam(const uci::type::EA_ActivityCommandType::ChangeBeam& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ChangeDependentActivity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ChangeDependentActivity.
    */
  virtual const uci::type::DependentActivityType& getChangeDependentActivity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ChangeDependentActivity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ChangeDependentActivity.
    */
  virtual uci::type::DependentActivityType& getChangeDependentActivity() = 0;

  /** Sets the complex content identified by ChangeDependentActivity to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ChangeDependentActivity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_ActivityCommandType& setChangeDependentActivity(const uci::type::DependentActivityType& value) = 0;

  /** Returns whether the Element identified by ChangeDependentActivity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ChangeDependentActivity is enabled or not.
    */
  virtual bool hasChangeDependentActivity() const = 0;

  /** Enables the Element identified by ChangeDependentActivity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ChangeDependentActivity.
    */
  virtual uci::type::DependentActivityType& enableChangeDependentActivity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ChangeDependentActivity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_ActivityCommandType& clearChangeDependentActivity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ChangeReceiveAntenna.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ChangeReceiveAntenna.
    */
  virtual const uci::type::SelectAntennaType& getChangeReceiveAntenna() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ChangeReceiveAntenna.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ChangeReceiveAntenna.
    */
  virtual uci::type::SelectAntennaType& getChangeReceiveAntenna() = 0;

  /** Sets the complex content identified by ChangeReceiveAntenna to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ChangeReceiveAntenna.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_ActivityCommandType& setChangeReceiveAntenna(const uci::type::SelectAntennaType& value) = 0;

  /** Returns whether the Element identified by ChangeReceiveAntenna exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ChangeReceiveAntenna is enabled or not.
    */
  virtual bool hasChangeReceiveAntenna() const = 0;

  /** Enables the Element identified by ChangeReceiveAntenna.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ChangeReceiveAntenna.
    */
  virtual uci::type::SelectAntennaType& enableChangeReceiveAntenna(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ChangeReceiveAntenna.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_ActivityCommandType& clearChangeReceiveAntenna() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ChangeTransmitAntenna.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ChangeTransmitAntenna.
    */
  virtual const uci::type::SelectAntennaType& getChangeTransmitAntenna() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ChangeTransmitAntenna.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ChangeTransmitAntenna.
    */
  virtual uci::type::SelectAntennaType& getChangeTransmitAntenna() = 0;

  /** Sets the complex content identified by ChangeTransmitAntenna to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ChangeTransmitAntenna.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_ActivityCommandType& setChangeTransmitAntenna(const uci::type::SelectAntennaType& value) = 0;

  /** Returns whether the Element identified by ChangeTransmitAntenna exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ChangeTransmitAntenna is enabled or not.
    */
  virtual bool hasChangeTransmitAntenna() const = 0;

  /** Enables the Element identified by ChangeTransmitAntenna.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ChangeTransmitAntenna.
    */
  virtual uci::type::SelectAntennaType& enableChangeTransmitAntenna(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ChangeTransmitAntenna.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_ActivityCommandType& clearChangeTransmitAntenna() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ChangeTarget.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ChangeTarget.
    */
  virtual const uci::type::EA_ChangeLocationAndPowerType& getChangeTarget() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ChangeTarget.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ChangeTarget.
    */
  virtual uci::type::EA_ChangeLocationAndPowerType& getChangeTarget() = 0;

  /** Sets the complex content identified by ChangeTarget to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ChangeTarget.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_ActivityCommandType& setChangeTarget(const uci::type::EA_ChangeLocationAndPowerType& value) = 0;

  /** Returns whether the Element identified by ChangeTarget exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ChangeTarget is enabled or not.
    */
  virtual bool hasChangeTarget() const = 0;

  /** Enables the Element identified by ChangeTarget.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ChangeTarget.
    */
  virtual uci::type::EA_ChangeLocationAndPowerType& enableChangeTarget(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ChangeTarget.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_ActivityCommandType& clearChangeTarget() = 0;

  /** Returns a const reference to the bounded list identified by ChangeProtectedEntityPredictedReturnPower.
    *
    * @return A const reference to the bounded list identified by ChangeProtectedEntityPredictedReturnPower.
    */
  virtual const uci::type::EA_ActivityCommandType::ChangeProtectedEntityPredictedReturnPower& getChangeProtectedEntityPredictedReturnPower() const = 0;

  /** Returns a reference to the bounded list identified by ChangeProtectedEntityPredictedReturnPower.
    *
    * @return A reference to the bounded list identified by ChangeProtectedEntityPredictedReturnPower.
    */
  virtual uci::type::EA_ActivityCommandType::ChangeProtectedEntityPredictedReturnPower& getChangeProtectedEntityPredictedReturnPower() = 0;

  /** Sets the bounded list identified by ChangeProtectedEntityPredictedReturnPower.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_ActivityCommandType& setChangeProtectedEntityPredictedReturnPower(const uci::type::EA_ActivityCommandType::ChangeProtectedEntityPredictedReturnPower& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Frequency.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual const uci::type::CapabilityCommandFrequencyType& getFrequency() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Frequency.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual uci::type::CapabilityCommandFrequencyType& getFrequency() = 0;

  /** Sets the complex content identified by Frequency to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Frequency.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_ActivityCommandType& setFrequency(const uci::type::CapabilityCommandFrequencyType& value) = 0;

  /** Returns whether the Element identified by Frequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Frequency is enabled or not.
    */
  virtual bool hasFrequency() const = 0;

  /** Enables the Element identified by Frequency.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual uci::type::CapabilityCommandFrequencyType& enableFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Frequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_ActivityCommandType& clearFrequency() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  EA_ActivityCommandType() {
  }

  /** The destructor [only available to derived classes]. */
  ~EA_ActivityCommandType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The EA_ActivityCommandType to copy from.
    */
  EA_ActivityCommandType(const EA_ActivityCommandType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this EA_ActivityCommandType to the contents of the
    * EA_ActivityCommandType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The EA_ActivityCommandType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this EA_ActivityCommandType.
    * @return A reference to this EA_ActivityCommandType.
    */
  EA_ActivityCommandType& operator=(const EA_ActivityCommandType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_EA_ACTIVITYCOMMANDTYPE_H

