/** @file DamageAssessmentMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_DAMAGEASSESSMENTMDT_H
#define UCI_TYPE_DAMAGEASSESSMENTMDT_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/DamageAssessmentDetailType.h"
#include "uci/type/DamageAssessmentID_Type.h"
#include "uci/type/DamageCategoryEnum.h"
#include "uci/type/DamageSubjectType.h"
#include "uci/type/DamageSummaryID_Type.h"
#include "uci/type/DamageSummaryType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/VisibleString1024Type.h"
#include "uci/type/ZoneType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class DamageAssessmentMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new DamageAssessmentMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DamageAssessmentMDT.
    */
  static UCI_EXPORT DamageAssessmentMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new DamageAssessmentMDT initializing the data accessed by the new DamageAssessmentMDT using
    * the data accessed by the specified DamageAssessmentMDT (cloning).
    *
    * @param accessor The DamageAssessmentMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created DamageAssessmentMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DamageAssessmentMDT.
    */
  static UCI_EXPORT DamageAssessmentMDT& create(const DamageAssessmentMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified DamageAssessmentMDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The DamageAssessmentMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(DamageAssessmentMDT& accessor);

  /** Returns this accessor's type constant, i.e. damageAssessmentMDT.
    *
    * @return This accessor's type constant, i.e. damageAssessmentMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::damageAssessmentMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of DamageAssessmentMDT.
    *
    * @return The version that was initialized from the uci:version attribute of DamageAssessmentMDT.
    */
  static std::string getUCITypeVersion() {
    return "002.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const DamageAssessmentMDT& accessor) = 0;

  /** Indicates damage assessment details for a specific object. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::DamageAssessmentDetailType, uci::type::accessorType::damageAssessmentDetailType> AssessedObject;

  /** Indicates summarized damage information that was used for this assessment. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::DamageSummaryID_Type, uci::type::accessorType::damageSummaryID_Type> DamageSummaryID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * DamageAssessmentID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      DamageAssessmentID.
    */
  virtual const uci::type::DamageAssessmentID_Type& getDamageAssessmentID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DamageAssessmentID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DamageAssessmentID.
    */
  virtual uci::type::DamageAssessmentID_Type& getDamageAssessmentID() = 0;

  /** Sets the complex content identified by DamageAssessmentID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DamageAssessmentID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setDamageAssessmentID(const uci::type::DamageAssessmentID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by AssessmentType.
    *
    * @return A const reference to the value of the enumeration identified by AssessmentType.
    */
  virtual const uci::type::DamageCategoryEnum& getAssessmentType() const = 0;

  /** Returns a reference to the value of the enumeration identified by AssessmentType.
    *
    * @return A reference to the value of the enumeration identified by AssessmentType.
    */
  virtual uci::type::DamageCategoryEnum& getAssessmentType() = 0;

  /** Sets the value of the enumeration identified by AssessmentType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setAssessmentType(const uci::type::DamageCategoryEnum& value) = 0;

  /** Sets the value of the enumeration identified by AssessmentType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setAssessmentType(uci::type::DamageCategoryEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Subject.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Subject.
    */
  virtual const uci::type::DamageSubjectType& getSubject() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Subject.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Subject.
    */
  virtual uci::type::DamageSubjectType& getSubject() = 0;

  /** Sets the complex content identified by Subject to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Subject.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setSubject(const uci::type::DamageSubjectType& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by CompletionTime.
    *
    * @return The value of the simple primitive data type identified by CompletionTime.
    */
  virtual uci::type::DateTimeTypeValue getCompletionTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CompletionTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setCompletionTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AssessmentZone.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AssessmentZone.
    */
  virtual const uci::type::ZoneType& getAssessmentZone() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AssessmentZone.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AssessmentZone.
    */
  virtual uci::type::ZoneType& getAssessmentZone() = 0;

  /** Sets the complex content identified by AssessmentZone to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AssessmentZone.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setAssessmentZone(const uci::type::ZoneType& value) = 0;

  /** Returns whether the Element identified by AssessmentZone exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AssessmentZone is enabled or not.
    */
  virtual bool hasAssessmentZone() const = 0;

  /** Enables the Element identified by AssessmentZone.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AssessmentZone.
    */
  virtual uci::type::ZoneType& enableAssessmentZone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AssessmentZone.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& clearAssessmentZone() = 0;

  /** Returns a const reference to the bounded list identified by AssessedObject.
    *
    * @return A const reference to the bounded list identified by AssessedObject.
    */
  virtual const uci::type::DamageAssessmentMDT::AssessedObject& getAssessedObject() const = 0;

  /** Returns a reference to the bounded list identified by AssessedObject.
    *
    * @return A reference to the bounded list identified by AssessedObject.
    */
  virtual uci::type::DamageAssessmentMDT::AssessedObject& getAssessedObject() = 0;

  /** Sets the bounded list identified by AssessedObject.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setAssessedObject(const uci::type::DamageAssessmentMDT::AssessedObject& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Summary.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Summary.
    */
  virtual const uci::type::DamageSummaryType& getSummary() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Summary.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Summary.
    */
  virtual uci::type::DamageSummaryType& getSummary() = 0;

  /** Sets the complex content identified by Summary to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Summary.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setSummary(const uci::type::DamageSummaryType& value) = 0;

  /** Returns whether the Element identified by Summary exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Summary is enabled or not.
    */
  virtual bool hasSummary() const = 0;

  /** Enables the Element identified by Summary.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Summary.
    */
  virtual uci::type::DamageSummaryType& enableSummary(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Summary.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& clearSummary() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by AssessmentNarrative.
    *
    * @return A const reference to the accessor that provides access to the string identified by AssessmentNarrative.
    */
  virtual const uci::type::VisibleString1024Type& getAssessmentNarrative() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by AssessmentNarrative.
    *
    * @return A reference to the accessor that provides access to the string identified by AssessmentNarrative.
    */
  virtual uci::type::VisibleString1024Type& getAssessmentNarrative() = 0;

  /** Sets the string identified by AssessmentNarrative to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by AssessmentNarrative.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setAssessmentNarrative(const uci::type::VisibleString1024Type& value) = 0;

  /** Sets the string identified by AssessmentNarrative to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setAssessmentNarrative(const std::string& value) = 0;

  /** Sets the string identified by AssessmentNarrative to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setAssessmentNarrative(const char* value) = 0;

  /** Returns whether the Element identified by AssessmentNarrative exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AssessmentNarrative is enabled or not.
    */
  virtual bool hasAssessmentNarrative() const = 0;

  /** Enables the Element identified by AssessmentNarrative.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by AssessmentNarrative.
    */
  virtual uci::type::VisibleString1024Type& enableAssessmentNarrative(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AssessmentNarrative.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& clearAssessmentNarrative() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ReAttackRequired.
    *
    * @return The value of the simple primitive data type identified by ReAttackRequired.
    */
  virtual xs::Boolean getReAttackRequired() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ReAttackRequired.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setReAttackRequired(xs::Boolean value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ReAttackNarrative.
    *
    * @return A const reference to the accessor that provides access to the string identified by ReAttackNarrative.
    */
  virtual const uci::type::VisibleString1024Type& getReAttackNarrative() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ReAttackNarrative.
    *
    * @return A reference to the accessor that provides access to the string identified by ReAttackNarrative.
    */
  virtual uci::type::VisibleString1024Type& getReAttackNarrative() = 0;

  /** Sets the string identified by ReAttackNarrative to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ReAttackNarrative.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setReAttackNarrative(const uci::type::VisibleString1024Type& value) = 0;

  /** Sets the string identified by ReAttackNarrative to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setReAttackNarrative(const std::string& value) = 0;

  /** Sets the string identified by ReAttackNarrative to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setReAttackNarrative(const char* value) = 0;

  /** Returns whether the Element identified by ReAttackNarrative exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReAttackNarrative is enabled or not.
    */
  virtual bool hasReAttackNarrative() const = 0;

  /** Enables the Element identified by ReAttackNarrative.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ReAttackNarrative.
    */
  virtual uci::type::VisibleString1024Type& enableReAttackNarrative(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReAttackNarrative.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& clearReAttackNarrative() = 0;

  /** Returns a const reference to the bounded list identified by DamageSummaryID.
    *
    * @return A const reference to the bounded list identified by DamageSummaryID.
    */
  virtual const uci::type::DamageAssessmentMDT::DamageSummaryID& getDamageSummaryID() const = 0;

  /** Returns a reference to the bounded list identified by DamageSummaryID.
    *
    * @return A reference to the bounded list identified by DamageSummaryID.
    */
  virtual uci::type::DamageAssessmentMDT::DamageSummaryID& getDamageSummaryID() = 0;

  /** Sets the bounded list identified by DamageSummaryID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageAssessmentMDT& setDamageSummaryID(const uci::type::DamageAssessmentMDT::DamageSummaryID& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  DamageAssessmentMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~DamageAssessmentMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The DamageAssessmentMDT to copy from.
    */
  DamageAssessmentMDT(const DamageAssessmentMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this DamageAssessmentMDT to the contents of the DamageAssessmentMDT on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The DamageAssessmentMDT on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this DamageAssessmentMDT.
    * @return A reference to this DamageAssessmentMDT.
    */
  DamageAssessmentMDT& operator=(const DamageAssessmentMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_DAMAGEASSESSMENTMDT_H

