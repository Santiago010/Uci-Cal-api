/** @file ComponentDetailedStatusType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMPONENTDETAILEDSTATUSTYPE_H
#define UCI_TYPE_COMPONENTDETAILEDSTATUSTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ComponentDetailedStatusInfoType.h"
#include "ComponentElementID_Type.h"
#include "ComponentElementIdentifierChoiceType.h"
#include "ComponentElementStateType.h"
#include "VisibleString256Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates component specific/unique status information. Similar to SubsystemStatusDetailed that supports reporting
  * vendor specific data.
  */
class ComponentDetailedStatusType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ComponentDetailedStatusType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ComponentDetailedStatusType.
    */
  static UCI_EXPORT ComponentDetailedStatusType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ComponentDetailedStatusType initializing the data accessed by the new
    * ComponentDetailedStatusType using the data accessed by the specified ComponentDetailedStatusType (cloning).
    *
    * @param accessor The ComponentDetailedStatusType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created ComponentDetailedStatusType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ComponentDetailedStatusType.
    */
  static UCI_EXPORT ComponentDetailedStatusType& create(const ComponentDetailedStatusType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ComponentDetailedStatusType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The ComponentDetailedStatusType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ComponentDetailedStatusType& accessor);

  /** Returns this accessor's type constant, i.e. componentDetailedStatusType.
    *
    * @return This accessor's type constant, i.e. componentDetailedStatusType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::componentDetailedStatusType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ComponentDetailedStatusType.
    *
    * @return The version that was initialized from the uci:version attribute of ComponentDetailedStatusType.
    */
  static std::string getUCITypeVersion() {
    return "000.001.001.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ComponentDetailedStatusType& accessor) = 0;

  /** This contains detailed status of a component element. This field can be used to provide status for component elements
    * such as electrical systems, hydraulic systems, etc. For example an electrical system may have a generator, AC or DC
    * components that need to have a status reported. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ComponentDetailedStatusInfoType, uci::type::accessorType::componentDetailedStatusInfoType> ComponentDetailedStatusInfo;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ComponentElement_ID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ComponentElement_ID.
    */
  virtual const uci::type::ComponentElementID_Type& getComponentElement_ID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ComponentElement_ID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ComponentElement_ID.
    */
  virtual uci::type::ComponentElementID_Type& getComponentElement_ID() = 0;

  /** Sets the complex content identified by ComponentElement_ID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ComponentElement_ID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentDetailedStatusType& setComponentElement_ID(const uci::type::ComponentElementID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ComponentElementIdentifier.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ComponentElementIdentifier.
    */
  virtual const uci::type::ComponentElementIdentifierChoiceType& getComponentElementIdentifier() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ComponentElementIdentifier.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ComponentElementIdentifier.
    */
  virtual uci::type::ComponentElementIdentifierChoiceType& getComponentElementIdentifier() = 0;

  /** Sets the complex content identified by ComponentElementIdentifier to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ComponentElementIdentifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentDetailedStatusType& setComponentElementIdentifier(const uci::type::ComponentElementIdentifierChoiceType& value) = 0;

  /** Returns whether the Element identified by ComponentElementIdentifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ComponentElementIdentifier is enabled or not.
    */
  virtual bool hasComponentElementIdentifier() const = 0;

  /** Enables the Element identified by ComponentElementIdentifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ComponentElementIdentifier.
    */
  virtual uci::type::ComponentElementIdentifierChoiceType& enableComponentElementIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ComponentElementIdentifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentDetailedStatusType& clearComponentElementIdentifier() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * ComponentElementDescription.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      ComponentElementDescription.
    */
  virtual const asb_uci::type::VisibleString256Type& getComponentElementDescription() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ComponentElementDescription.
    *
    * @return A reference to the accessor that provides access to the string identified by ComponentElementDescription.
    */
  virtual asb_uci::type::VisibleString256Type& getComponentElementDescription() = 0;

  /** Sets the string identified by ComponentElementDescription to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ComponentElementDescription.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentDetailedStatusType& setComponentElementDescription(const asb_uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by ComponentElementDescription to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentDetailedStatusType& setComponentElementDescription(const std::string& value) = 0;

  /** Sets the string identified by ComponentElementDescription to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentDetailedStatusType& setComponentElementDescription(const char* value) = 0;

  /** Returns whether the Element identified by ComponentElementDescription exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ComponentElementDescription is enabled or not.
    */
  virtual bool hasComponentElementDescription() const = 0;

  /** Enables the Element identified by ComponentElementDescription.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ComponentElementDescription.
    */
  virtual asb_uci::type::VisibleString256Type& enableComponentElementDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ComponentElementDescription.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentDetailedStatusType& clearComponentElementDescription() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ComponentElementState.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ComponentElementState.
    */
  virtual const uci::type::ComponentElementStateType& getComponentElementState() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ComponentElementState.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ComponentElementState.
    */
  virtual uci::type::ComponentElementStateType& getComponentElementState() = 0;

  /** Sets the complex content identified by ComponentElementState to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ComponentElementState.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentDetailedStatusType& setComponentElementState(const uci::type::ComponentElementStateType& value) = 0;

  /** Returns whether the Element identified by ComponentElementState exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ComponentElementState is enabled or not.
    */
  virtual bool hasComponentElementState() const = 0;

  /** Enables the Element identified by ComponentElementState.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ComponentElementState.
    */
  virtual uci::type::ComponentElementStateType& enableComponentElementState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ComponentElementState.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentDetailedStatusType& clearComponentElementState() = 0;

  /** Returns a const reference to the bounded list identified by ComponentDetailedStatusInfo.
    *
    * @return A const reference to the bounded list identified by ComponentDetailedStatusInfo.
    */
  virtual const uci::type::ComponentDetailedStatusType::ComponentDetailedStatusInfo& getComponentDetailedStatusInfo() const = 0;

  /** Returns a reference to the bounded list identified by ComponentDetailedStatusInfo.
    *
    * @return A reference to the bounded list identified by ComponentDetailedStatusInfo.
    */
  virtual uci::type::ComponentDetailedStatusType::ComponentDetailedStatusInfo& getComponentDetailedStatusInfo() = 0;

  /** Sets the bounded list identified by ComponentDetailedStatusInfo.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentDetailedStatusType& setComponentDetailedStatusInfo(const uci::type::ComponentDetailedStatusType::ComponentDetailedStatusInfo& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ComponentDetailedStatusType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ComponentDetailedStatusType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ComponentDetailedStatusType to copy from.
    */
  ComponentDetailedStatusType(const ComponentDetailedStatusType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ComponentDetailedStatusType to the contents of the
    * ComponentDetailedStatusType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ComponentDetailedStatusType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this ComponentDetailedStatusType.
    * @return A reference to this ComponentDetailedStatusType.
    */
  ComponentDetailedStatusType& operator=(const ComponentDetailedStatusType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMPONENTDETAILEDSTATUSTYPE_H

