/** @file CommControlType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMCONTROLTYPE_H
#define UCI_TYPE_COMMCONTROLTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/UnsignedByteAccessor.h"
#include "../base/export.h"
#include "CommConnectionType.h"
#include "CommReceiverStateEnum.h"
#include "CommTransmitterStateEnum.h"
#include "ComponentID_Type.h"
#include "DataRateType.h"
#include "MilliwattPowerRatioType.h"
#include "RemoteDestinationType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Utilized to control the waveform setup, modification, and status for a capability. */
class CommControlType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CommControlType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommControlType.
    */
  static UCI_EXPORT CommControlType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CommControlType initializing the data accessed by the new CommControlType using the data
    * accessed by the specified CommControlType (cloning).
    *
    * @param accessor The CommControlType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created CommControlType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommControlType.
    */
  static UCI_EXPORT CommControlType& create(const CommControlType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CommControlType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The CommControlType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CommControlType& accessor);

  /** Returns this accessor's type constant, i.e. commControlType.
    *
    * @return This accessor's type constant, i.e. commControlType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commControlType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CommControlType.
    *
    * @return The version that was initialized from the uci:version attribute of CommControlType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CommControlType& accessor) = 0;

  /** Sets / Indicates the Antenna Component associated with this waveform capability. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ComponentID_Type, uci::type::accessorType::componentID_Type> AntennaID;

  /** Returns the value of the SimplePrimitive data type identified by InhibitTransmit.
    *
    * @return The value of the simple primitive data type identified by InhibitTransmit.
    */
  virtual xs::Boolean getInhibitTransmit() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InhibitTransmit.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& setInhibitTransmit(xs::Boolean value) = 0;

  /** Returns whether the Element identified by InhibitTransmit exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InhibitTransmit is enabled or not.
    */
  virtual bool hasInhibitTransmit() const = 0;

  /** Clears (disabled) the Element identified by InhibitTransmit.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& clearInhibitTransmit() = 0;

  /** Returns the value of the SimplePrimitive data type identified by InhibitReceive.
    *
    * @return The value of the simple primitive data type identified by InhibitReceive.
    */
  virtual xs::Boolean getInhibitReceive() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InhibitReceive.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& setInhibitReceive(xs::Boolean value) = 0;

  /** Returns whether the Element identified by InhibitReceive exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InhibitReceive is enabled or not.
    */
  virtual bool hasInhibitReceive() const = 0;

  /** Clears (disabled) the Element identified by InhibitReceive.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& clearInhibitReceive() = 0;

  /** Returns the value of the SimplePrimitive data type identified by InhibitRelay.
    *
    * @return The value of the simple primitive data type identified by InhibitRelay.
    */
  virtual xs::Boolean getInhibitRelay() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InhibitRelay.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& setInhibitRelay(xs::Boolean value) = 0;

  /** Returns whether the Element identified by InhibitRelay exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InhibitRelay is enabled or not.
    */
  virtual bool hasInhibitRelay() const = 0;

  /** Clears (disabled) the Element identified by InhibitRelay.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& clearInhibitRelay() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ConnectionSettings.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ConnectionSettings.
    */
  virtual const uci::type::CommConnectionType& getConnectionSettings() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ConnectionSettings.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ConnectionSettings.
    */
  virtual uci::type::CommConnectionType& getConnectionSettings() = 0;

  /** Sets the complex content identified by ConnectionSettings to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ConnectionSettings.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& setConnectionSettings(const uci::type::CommConnectionType& value) = 0;

  /** Returns whether the Element identified by ConnectionSettings exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConnectionSettings is enabled or not.
    */
  virtual bool hasConnectionSettings() const = 0;

  /** Enables the Element identified by ConnectionSettings.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ConnectionSettings.
    */
  virtual uci::type::CommConnectionType& enableConnectionSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ConnectionSettings.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& clearConnectionSettings() = 0;

  /** Returns a const reference to the value of the enumeration identified by ReceiverState.
    *
    * @return A const reference to the value of the enumeration identified by ReceiverState.
    */
  virtual const uci::type::CommReceiverStateEnum& getReceiverState() const = 0;

  /** Returns a reference to the value of the enumeration identified by ReceiverState.
    *
    * @return A reference to the value of the enumeration identified by ReceiverState.
    */
  virtual uci::type::CommReceiverStateEnum& getReceiverState() = 0;

  /** Sets the value of the enumeration identified by ReceiverState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& setReceiverState(const uci::type::CommReceiverStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by ReceiverState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& setReceiverState(uci::type::CommReceiverStateEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ReceiverState exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReceiverState is enabled or not.
    */
  virtual bool hasReceiverState() const = 0;

  /** Enables the Element identified by ReceiverState.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ReceiverState.
    */
  virtual uci::type::CommReceiverStateEnum& enableReceiverState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReceiverState.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& clearReceiverState() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RxPowerLevel.
    *
    * @return The value of the simple primitive data type identified by RxPowerLevel.
    */
  virtual uci::type::MilliwattPowerRatioTypeValue getRxPowerLevel() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RxPowerLevel.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& setRxPowerLevel(uci::type::MilliwattPowerRatioTypeValue value) = 0;

  /** Returns whether the Element identified by RxPowerLevel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RxPowerLevel is enabled or not.
    */
  virtual bool hasRxPowerLevel() const = 0;

  /** Clears (disabled) the Element identified by RxPowerLevel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& clearRxPowerLevel() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SquelchLevel.
    *
    * @return The value of the simple primitive data type identified by SquelchLevel.
    */
  virtual xs::UnsignedByte getSquelchLevel() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SquelchLevel.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& setSquelchLevel(xs::UnsignedByte value) = 0;

  /** Returns whether the Element identified by SquelchLevel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SquelchLevel is enabled or not.
    */
  virtual bool hasSquelchLevel() const = 0;

  /** Clears (disabled) the Element identified by SquelchLevel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& clearSquelchLevel() = 0;

  /** Returns a const reference to the value of the enumeration identified by TransmitterState.
    *
    * @return A const reference to the value of the enumeration identified by TransmitterState.
    */
  virtual const uci::type::CommTransmitterStateEnum& getTransmitterState() const = 0;

  /** Returns a reference to the value of the enumeration identified by TransmitterState.
    *
    * @return A reference to the value of the enumeration identified by TransmitterState.
    */
  virtual uci::type::CommTransmitterStateEnum& getTransmitterState() = 0;

  /** Sets the value of the enumeration identified by TransmitterState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& setTransmitterState(const uci::type::CommTransmitterStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by TransmitterState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& setTransmitterState(uci::type::CommTransmitterStateEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by TransmitterState exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TransmitterState is enabled or not.
    */
  virtual bool hasTransmitterState() const = 0;

  /** Enables the Element identified by TransmitterState.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by TransmitterState.
    */
  virtual uci::type::CommTransmitterStateEnum& enableTransmitterState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TransmitterState.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& clearTransmitterState() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TxPowerLevel.
    *
    * @return The value of the simple primitive data type identified by TxPowerLevel.
    */
  virtual uci::type::MilliwattPowerRatioTypeValue getTxPowerLevel() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TxPowerLevel.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& setTxPowerLevel(uci::type::MilliwattPowerRatioTypeValue value) = 0;

  /** Returns whether the Element identified by TxPowerLevel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TxPowerLevel is enabled or not.
    */
  virtual bool hasTxPowerLevel() const = 0;

  /** Clears (disabled) the Element identified by TxPowerLevel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& clearTxPowerLevel() = 0;

  /** Returns the value of the SimplePrimitive data type identified by VolumeLevel.
    *
    * @return The value of the simple primitive data type identified by VolumeLevel.
    */
  virtual xs::UnsignedByte getVolumeLevel() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by VolumeLevel.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& setVolumeLevel(xs::UnsignedByte value) = 0;

  /** Returns whether the Element identified by VolumeLevel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VolumeLevel is enabled or not.
    */
  virtual bool hasVolumeLevel() const = 0;

  /** Clears (disabled) the Element identified by VolumeLevel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& clearVolumeLevel() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RF_DataRate.
    *
    * @return The value of the simple primitive data type identified by RF_DataRate.
    */
  virtual uci::type::DataRateTypeValue getRF_DataRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RF_DataRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& setRF_DataRate(uci::type::DataRateTypeValue value) = 0;

  /** Returns whether the Element identified by RF_DataRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RF_DataRate is enabled or not.
    */
  virtual bool hasRF_DataRate() const = 0;

  /** Clears (disabled) the Element identified by RF_DataRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& clearRF_DataRate() = 0;

  /** Returns a const reference to the bounded list identified by AntennaID.
    *
    * @return A const reference to the bounded list identified by AntennaID.
    */
  virtual const uci::type::CommControlType::AntennaID& getAntennaID() const = 0;

  /** Returns a reference to the bounded list identified by AntennaID.
    *
    * @return A reference to the bounded list identified by AntennaID.
    */
  virtual uci::type::CommControlType::AntennaID& getAntennaID() = 0;

  /** Sets the bounded list identified by AntennaID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& setAntennaID(const uci::type::CommControlType::AntennaID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RemoteDestination.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RemoteDestination.
    */
  virtual const uci::type::RemoteDestinationType& getRemoteDestination() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RemoteDestination.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RemoteDestination.
    */
  virtual uci::type::RemoteDestinationType& getRemoteDestination() = 0;

  /** Sets the complex content identified by RemoteDestination to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RemoteDestination.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& setRemoteDestination(const uci::type::RemoteDestinationType& value) = 0;

  /** Returns whether the Element identified by RemoteDestination exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RemoteDestination is enabled or not.
    */
  virtual bool hasRemoteDestination() const = 0;

  /** Enables the Element identified by RemoteDestination.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RemoteDestination.
    */
  virtual uci::type::RemoteDestinationType& enableRemoteDestination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RemoteDestination.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommControlType& clearRemoteDestination() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CommControlType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommControlType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommControlType to copy from.
    */
  CommControlType(const CommControlType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CommControlType to the contents of the CommControlType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CommControlType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this CommControlType.
    * @return A reference to this CommControlType.
    */
  CommControlType& operator=(const CommControlType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMMCONTROLTYPE_H

