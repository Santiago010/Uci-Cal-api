/** @file FileHeaderType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_FILEHEADERTYPE_H
#define UCI_TYPE_FILEHEADERTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/AlphanumericPunctuatedString11Type.h"
#include "uci/type/AlphanumericSpaceString11Type.h"
#include "uci/type/CountryCodeType.h"
#include "uci/type/FIPS_ClassificationSystemType.h"
#include "uci/type/FileDeclassificationEnum.h"
#include "uci/type/FileHeaderClassificationAuthorityType.h"
#include "uci/type/FileHeaderDowngradeStringType.h"
#include "uci/type/NumericSpaceString11Type.h"
#include "uci/type/SAR_CollectionReasonEnum.h"
#include "uci/type/VisibleString16Type.h"
#include "uci/type/VisibleString3Type.h"
#include "uci/type/VisibleString80Type.h"
#include "uci/type/VisibleString9Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class FileHeaderType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new FileHeaderType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed FileHeaderType.
    */
  static UCI_EXPORT FileHeaderType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new FileHeaderType initializing the data accessed by the new FileHeaderType using the data
    * accessed by the specified FileHeaderType (cloning).
    *
    * @param accessor The FileHeaderType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created FileHeaderType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed FileHeaderType.
    */
  static UCI_EXPORT FileHeaderType& create(const FileHeaderType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified FileHeaderType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The FileHeaderType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(FileHeaderType& accessor);

  /** Returns this accessor's type constant, i.e. fileHeaderType.
    *
    * @return This accessor's type constant, i.e. fileHeaderType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::fileHeaderType;
  }

  /** Returns the version that was initialized from the uci:version attribute of FileHeaderType.
    *
    * @return The version that was initialized from the uci:version attribute of FileHeaderType.
    */
  static std::string getUCITypeVersion() {
    return "000.001.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const FileHeaderType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CountryCode.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CountryCode.
    */
  virtual const uci::type::CountryCodeType& getCountryCode() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CountryCode.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CountryCode.
    */
  virtual uci::type::CountryCodeType& getCountryCode() = 0;

  /** Sets the complex content identified by CountryCode to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CountryCode.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setCountryCode(const uci::type::CountryCodeType& value) = 0;

  /** Returns whether the Element identified by CountryCode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CountryCode is enabled or not.
    */
  virtual bool hasCountryCode() const = 0;

  /** Enables the Element identified by CountryCode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CountryCode.
    */
  virtual uci::type::CountryCodeType& enableCountryCode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CountryCode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& clearCountryCode() = 0;

  /** Returns a const reference to the value of the enumeration identified by SceneSource.
    *
    * @return A const reference to the value of the enumeration identified by SceneSource.
    */
  virtual const uci::type::SAR_CollectionReasonEnum& getSceneSource() const = 0;

  /** Returns a reference to the value of the enumeration identified by SceneSource.
    *
    * @return A reference to the value of the enumeration identified by SceneSource.
    */
  virtual uci::type::SAR_CollectionReasonEnum& getSceneSource() = 0;

  /** Sets the value of the enumeration identified by SceneSource.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setSceneSource(const uci::type::SAR_CollectionReasonEnum& value) = 0;

  /** Sets the value of the enumeration identified by SceneSource.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setSceneSource(uci::type::SAR_CollectionReasonEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by SceneSource exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SceneSource is enabled or not.
    */
  virtual bool hasSceneSource() const = 0;

  /** Enables the Element identified by SceneSource.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by SceneSource.
    */
  virtual uci::type::SAR_CollectionReasonEnum& enableSceneSource(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SceneSource.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& clearSceneSource() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * OriginatingStationIdentifier.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      OriginatingStationIdentifier.
    */
  virtual const uci::type::AlphanumericPunctuatedString11Type& getOriginatingStationIdentifier() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by OriginatingStationIdentifier.
    *
    * @return A reference to the accessor that provides access to the string identified by OriginatingStationIdentifier.
    */
  virtual uci::type::AlphanumericPunctuatedString11Type& getOriginatingStationIdentifier() = 0;

  /** Sets the string identified by OriginatingStationIdentifier to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by OriginatingStationIdentifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setOriginatingStationIdentifier(const uci::type::AlphanumericPunctuatedString11Type& value) = 0;

  /** Sets the string identified by OriginatingStationIdentifier to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setOriginatingStationIdentifier(const std::string& value) = 0;

  /** Sets the string identified by OriginatingStationIdentifier to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setOriginatingStationIdentifier(const char* value) = 0;

  /** Returns whether the Element identified by OriginatingStationIdentifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OriginatingStationIdentifier is enabled or not.
    */
  virtual bool hasOriginatingStationIdentifier() const = 0;

  /** Enables the Element identified by OriginatingStationIdentifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by OriginatingStationIdentifier.
    */
  virtual uci::type::AlphanumericPunctuatedString11Type& enableOriginatingStationIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OriginatingStationIdentifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& clearOriginatingStationIdentifier() = 0;

  /** Returns the value of the SimplePrimitive data type identified by CollectionIdentifier.
    *
    * @return The value of the simple primitive data type identified by CollectionIdentifier.
    */
  virtual xs::UnsignedInt getCollectionIdentifier() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CollectionIdentifier.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setCollectionIdentifier(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by CollectionIdentifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionIdentifier is enabled or not.
    */
  virtual bool hasCollectionIdentifier() const = 0;

  /** Clears (disabled) the Element identified by CollectionIdentifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& clearCollectionIdentifier() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileTitle.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileTitle.
    */
  virtual const uci::type::VisibleString80Type& getFileTitle() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileTitle.
    *
    * @return A reference to the accessor that provides access to the string identified by FileTitle.
    */
  virtual uci::type::VisibleString80Type& getFileTitle() = 0;

  /** Sets the string identified by FileTitle to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileTitle.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileTitle(const uci::type::VisibleString80Type& value) = 0;

  /** Sets the string identified by FileTitle to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileTitle(const std::string& value) = 0;

  /** Sets the string identified by FileTitle to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileTitle(const char* value) = 0;

  /** Returns whether the Element identified by FileTitle exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileTitle is enabled or not.
    */
  virtual bool hasFileTitle() const = 0;

  /** Enables the Element identified by FileTitle.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileTitle.
    */
  virtual uci::type::VisibleString80Type& enableFileTitle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileTitle.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& clearFileTitle() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by OriginatorsName.
    *
    * @return A const reference to the accessor that provides access to the string identified by OriginatorsName.
    */
  virtual const uci::type::AlphanumericSpaceString11Type& getOriginatorsName() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by OriginatorsName.
    *
    * @return A reference to the accessor that provides access to the string identified by OriginatorsName.
    */
  virtual uci::type::AlphanumericSpaceString11Type& getOriginatorsName() = 0;

  /** Sets the string identified by OriginatorsName to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by OriginatorsName.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setOriginatorsName(const uci::type::AlphanumericSpaceString11Type& value) = 0;

  /** Sets the string identified by OriginatorsName to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setOriginatorsName(const std::string& value) = 0;

  /** Sets the string identified by OriginatorsName to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setOriginatorsName(const char* value) = 0;

  /** Returns whether the Element identified by OriginatorsName exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OriginatorsName is enabled or not.
    */
  virtual bool hasOriginatorsName() const = 0;

  /** Enables the Element identified by OriginatorsName.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by OriginatorsName.
    */
  virtual uci::type::AlphanumericSpaceString11Type& enableOriginatorsName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OriginatorsName.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& clearOriginatorsName() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by OriginatorsPhone.
    *
    * @return A const reference to the accessor that provides access to the string identified by OriginatorsPhone.
    */
  virtual const uci::type::NumericSpaceString11Type& getOriginatorsPhone() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by OriginatorsPhone.
    *
    * @return A reference to the accessor that provides access to the string identified by OriginatorsPhone.
    */
  virtual uci::type::NumericSpaceString11Type& getOriginatorsPhone() = 0;

  /** Sets the string identified by OriginatorsPhone to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by OriginatorsPhone.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setOriginatorsPhone(const uci::type::NumericSpaceString11Type& value) = 0;

  /** Sets the string identified by OriginatorsPhone to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setOriginatorsPhone(const std::string& value) = 0;

  /** Sets the string identified by OriginatorsPhone to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setOriginatorsPhone(const char* value) = 0;

  /** Returns whether the Element identified by OriginatorsPhone exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OriginatorsPhone is enabled or not.
    */
  virtual bool hasOriginatorsPhone() const = 0;

  /** Enables the Element identified by OriginatorsPhone.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by OriginatorsPhone.
    */
  virtual uci::type::NumericSpaceString11Type& enableOriginatorsPhone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OriginatorsPhone.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& clearOriginatorsPhone() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileClassificationSystem.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileClassificationSystem.
    */
  virtual const uci::type::FIPS_ClassificationSystemType& getFileClassificationSystem() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileClassificationSystem.
    *
    * @return A reference to the accessor that provides access to the string identified by FileClassificationSystem.
    */
  virtual uci::type::FIPS_ClassificationSystemType& getFileClassificationSystem() = 0;

  /** Sets the string identified by FileClassificationSystem to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileClassificationSystem.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileClassificationSystem(const uci::type::FIPS_ClassificationSystemType& value) = 0;

  /** Sets the string identified by FileClassificationSystem to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileClassificationSystem(const std::string& value) = 0;

  /** Sets the string identified by FileClassificationSystem to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileClassificationSystem(const char* value) = 0;

  /** Returns whether the Element identified by FileClassificationSystem exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileClassificationSystem is enabled or not.
    */
  virtual bool hasFileClassificationSystem() const = 0;

  /** Enables the Element identified by FileClassificationSystem.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileClassificationSystem.
    */
  virtual uci::type::FIPS_ClassificationSystemType& enableFileClassificationSystem(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileClassificationSystem.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& clearFileClassificationSystem() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileSecurityControlNumber.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileSecurityControlNumber.
    */
  virtual const uci::type::VisibleString16Type& getFileSecurityControlNumber() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileSecurityControlNumber.
    *
    * @return A reference to the accessor that provides access to the string identified by FileSecurityControlNumber.
    */
  virtual uci::type::VisibleString16Type& getFileSecurityControlNumber() = 0;

  /** Sets the string identified by FileSecurityControlNumber to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileSecurityControlNumber.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileSecurityControlNumber(const uci::type::VisibleString16Type& value) = 0;

  /** Sets the string identified by FileSecurityControlNumber to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileSecurityControlNumber(const std::string& value) = 0;

  /** Sets the string identified by FileSecurityControlNumber to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileSecurityControlNumber(const char* value) = 0;

  /** Returns whether the Element identified by FileSecurityControlNumber exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileSecurityControlNumber is enabled or not.
    */
  virtual bool hasFileSecurityControlNumber() const = 0;

  /** Enables the Element identified by FileSecurityControlNumber.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileSecurityControlNumber.
    */
  virtual uci::type::VisibleString16Type& enableFileSecurityControlNumber(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileSecurityControlNumber.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& clearFileSecurityControlNumber() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileControlAndHandling.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileControlAndHandling.
    */
  virtual const uci::type::VisibleString3Type& getFileControlAndHandling() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileControlAndHandling.
    *
    * @return A reference to the accessor that provides access to the string identified by FileControlAndHandling.
    */
  virtual uci::type::VisibleString3Type& getFileControlAndHandling() = 0;

  /** Sets the string identified by FileControlAndHandling to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileControlAndHandling.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileControlAndHandling(const uci::type::VisibleString3Type& value) = 0;

  /** Sets the string identified by FileControlAndHandling to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileControlAndHandling(const std::string& value) = 0;

  /** Sets the string identified by FileControlAndHandling to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileControlAndHandling(const char* value) = 0;

  /** Returns whether the Element identified by FileControlAndHandling exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileControlAndHandling is enabled or not.
    */
  virtual bool hasFileControlAndHandling() const = 0;

  /** Enables the Element identified by FileControlAndHandling.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileControlAndHandling.
    */
  virtual uci::type::VisibleString3Type& enableFileControlAndHandling(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileControlAndHandling.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& clearFileControlAndHandling() = 0;

  /** Returns a const reference to the value of the enumeration identified by FileDeclassificationType.
    *
    * @return A const reference to the value of the enumeration identified by FileDeclassificationType.
    */
  virtual const uci::type::FileDeclassificationEnum& getFileDeclassificationType() const = 0;

  /** Returns a reference to the value of the enumeration identified by FileDeclassificationType.
    *
    * @return A reference to the value of the enumeration identified by FileDeclassificationType.
    */
  virtual uci::type::FileDeclassificationEnum& getFileDeclassificationType() = 0;

  /** Sets the value of the enumeration identified by FileDeclassificationType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileDeclassificationType(const uci::type::FileDeclassificationEnum& value) = 0;

  /** Sets the value of the enumeration identified by FileDeclassificationType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileDeclassificationType(uci::type::FileDeclassificationEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by FileDeclassificationType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileDeclassificationType is enabled or not.
    */
  virtual bool hasFileDeclassificationType() const = 0;

  /** Enables the Element identified by FileDeclassificationType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by FileDeclassificationType.
    */
  virtual uci::type::FileDeclassificationEnum& enableFileDeclassificationType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileDeclassificationType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& clearFileDeclassificationType() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * FileClassificationAuthorityType.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      FileClassificationAuthorityType.
    */
  virtual const uci::type::FileHeaderClassificationAuthorityType& getFileClassificationAuthorityType() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileClassificationAuthorityType.
    *
    * @return A reference to the accessor that provides access to the string identified by FileClassificationAuthorityType.
    */
  virtual uci::type::FileHeaderClassificationAuthorityType& getFileClassificationAuthorityType() = 0;

  /** Sets the string identified by FileClassificationAuthorityType to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileClassificationAuthorityType.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileClassificationAuthorityType(const uci::type::FileHeaderClassificationAuthorityType& value) = 0;

  /** Sets the string identified by FileClassificationAuthorityType to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileClassificationAuthorityType(const std::string& value) = 0;

  /** Sets the string identified by FileClassificationAuthorityType to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileClassificationAuthorityType(const char* value) = 0;

  /** Returns whether the Element identified by FileClassificationAuthorityType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileClassificationAuthorityType is enabled or not.
    */
  virtual bool hasFileClassificationAuthorityType() const = 0;

  /** Enables the Element identified by FileClassificationAuthorityType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileClassificationAuthorityType.
    */
  virtual uci::type::FileHeaderClassificationAuthorityType& enableFileClassificationAuthorityType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileClassificationAuthorityType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& clearFileClassificationAuthorityType() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileDowngrade.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileDowngrade.
    */
  virtual const uci::type::FileHeaderDowngradeStringType& getFileDowngrade() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileDowngrade.
    *
    * @return A reference to the accessor that provides access to the string identified by FileDowngrade.
    */
  virtual uci::type::FileHeaderDowngradeStringType& getFileDowngrade() = 0;

  /** Sets the string identified by FileDowngrade to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileDowngrade.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileDowngrade(const uci::type::FileHeaderDowngradeStringType& value) = 0;

  /** Sets the string identified by FileDowngrade to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileDowngrade(const std::string& value) = 0;

  /** Sets the string identified by FileDowngrade to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileDowngrade(const char* value) = 0;

  /** Returns whether the Element identified by FileDowngrade exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileDowngrade is enabled or not.
    */
  virtual bool hasFileDowngrade() const = 0;

  /** Enables the Element identified by FileDowngrade.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileDowngrade.
    */
  virtual uci::type::FileHeaderDowngradeStringType& enableFileDowngrade(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileDowngrade.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& clearFileDowngrade() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileSecuritySourceDate.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileSecuritySourceDate.
    */
  virtual const uci::type::VisibleString9Type& getFileSecuritySourceDate() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileSecuritySourceDate.
    *
    * @return A reference to the accessor that provides access to the string identified by FileSecuritySourceDate.
    */
  virtual uci::type::VisibleString9Type& getFileSecuritySourceDate() = 0;

  /** Sets the string identified by FileSecuritySourceDate to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileSecuritySourceDate.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileSecuritySourceDate(const uci::type::VisibleString9Type& value) = 0;

  /** Sets the string identified by FileSecuritySourceDate to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileSecuritySourceDate(const std::string& value) = 0;

  /** Sets the string identified by FileSecuritySourceDate to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& setFileSecuritySourceDate(const char* value) = 0;

  /** Returns whether the Element identified by FileSecuritySourceDate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileSecuritySourceDate is enabled or not.
    */
  virtual bool hasFileSecuritySourceDate() const = 0;

  /** Enables the Element identified by FileSecuritySourceDate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileSecuritySourceDate.
    */
  virtual uci::type::VisibleString9Type& enableFileSecuritySourceDate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileSecuritySourceDate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileHeaderType& clearFileSecuritySourceDate() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  FileHeaderType() {
  }

  /** The destructor [only available to derived classes]. */
  ~FileHeaderType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The FileHeaderType to copy from.
    */
  FileHeaderType(const FileHeaderType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this FileHeaderType to the contents of the FileHeaderType on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The FileHeaderType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this FileHeaderType.
    * @return A reference to this FileHeaderType.
    */
  FileHeaderType& operator=(const FileHeaderType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_FILEHEADERTYPE_H

