/** @file InertialStateRelativeType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_INERTIALSTATERELATIVETYPE_H
#define UCI_TYPE_INERTIALSTATERELATIVETYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/Acceleration3D_Type.h"
#include "uci/type/OrientationRateType.h"
#include "uci/type/OrientationType.h"
#include "uci/type/PointChoice4D_Type.h"
#include "uci/type/UncertaintyType.h"
#include "uci/type/Velocity2D_Type.h"
#include "uci/type/Velocity3D_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class InertialStateRelativeType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new InertialStateRelativeType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed InertialStateRelativeType.
    */
  static UCI_EXPORT InertialStateRelativeType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new InertialStateRelativeType initializing the data accessed by the new
    * InertialStateRelativeType using the data accessed by the specified InertialStateRelativeType (cloning).
    *
    * @param accessor The InertialStateRelativeType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created InertialStateRelativeType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed InertialStateRelativeType.
    */
  static UCI_EXPORT InertialStateRelativeType& create(const InertialStateRelativeType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified InertialStateRelativeType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The InertialStateRelativeType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(InertialStateRelativeType& accessor);

  /** Returns this accessor's type constant, i.e. inertialStateRelativeType.
    *
    * @return This accessor's type constant, i.e. inertialStateRelativeType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::inertialStateRelativeType;
  }

  /** Returns the version that was initialized from the uci:version attribute of InertialStateRelativeType.
    *
    * @return The version that was initialized from the uci:version attribute of InertialStateRelativeType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const InertialStateRelativeType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual const uci::type::PointChoice4D_Type& getPosition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual uci::type::PointChoice4D_Type& getPosition() = 0;

  /** Sets the complex content identified by Position to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Position.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::InertialStateRelativeType& setPosition(const uci::type::PointChoice4D_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * PositionUncertainty.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      PositionUncertainty.
    */
  virtual const uci::type::UncertaintyType& getPositionUncertainty() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PositionUncertainty.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PositionUncertainty.
    */
  virtual uci::type::UncertaintyType& getPositionUncertainty() = 0;

  /** Sets the complex content identified by PositionUncertainty to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PositionUncertainty.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::InertialStateRelativeType& setPositionUncertainty(const uci::type::UncertaintyType& value) = 0;

  /** Returns whether the Element identified by PositionUncertainty exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PositionUncertainty is enabled or not.
    */
  virtual bool hasPositionUncertainty() const = 0;

  /** Enables the Element identified by PositionUncertainty.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PositionUncertainty.
    */
  virtual uci::type::UncertaintyType& enablePositionUncertainty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PositionUncertainty.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::InertialStateRelativeType& clearPositionUncertainty() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DomainVelocity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DomainVelocity.
    */
  virtual const uci::type::Velocity3D_Type& getDomainVelocity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DomainVelocity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DomainVelocity.
    */
  virtual uci::type::Velocity3D_Type& getDomainVelocity() = 0;

  /** Sets the complex content identified by DomainVelocity to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DomainVelocity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::InertialStateRelativeType& setDomainVelocity(const uci::type::Velocity3D_Type& value) = 0;

  /** Returns whether the Element identified by DomainVelocity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DomainVelocity is enabled or not.
    */
  virtual bool hasDomainVelocity() const = 0;

  /** Enables the Element identified by DomainVelocity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DomainVelocity.
    */
  virtual uci::type::Velocity3D_Type& enableDomainVelocity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DomainVelocity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::InertialStateRelativeType& clearDomainVelocity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by GroundVelocity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by GroundVelocity.
    */
  virtual const uci::type::Velocity2D_Type& getGroundVelocity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by GroundVelocity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by GroundVelocity.
    */
  virtual uci::type::Velocity2D_Type& getGroundVelocity() = 0;

  /** Sets the complex content identified by GroundVelocity to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GroundVelocity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::InertialStateRelativeType& setGroundVelocity(const uci::type::Velocity2D_Type& value) = 0;

  /** Returns whether the Element identified by GroundVelocity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by GroundVelocity is enabled or not.
    */
  virtual bool hasGroundVelocity() const = 0;

  /** Enables the Element identified by GroundVelocity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by GroundVelocity.
    */
  virtual uci::type::Velocity2D_Type& enableGroundVelocity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by GroundVelocity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::InertialStateRelativeType& clearGroundVelocity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RelativeVelocity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RelativeVelocity.
    */
  virtual const uci::type::Velocity3D_Type& getRelativeVelocity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RelativeVelocity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RelativeVelocity.
    */
  virtual uci::type::Velocity3D_Type& getRelativeVelocity() = 0;

  /** Sets the complex content identified by RelativeVelocity to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RelativeVelocity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::InertialStateRelativeType& setRelativeVelocity(const uci::type::Velocity3D_Type& value) = 0;

  /** Returns whether the Element identified by RelativeVelocity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RelativeVelocity is enabled or not.
    */
  virtual bool hasRelativeVelocity() const = 0;

  /** Enables the Element identified by RelativeVelocity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RelativeVelocity.
    */
  virtual uci::type::Velocity3D_Type& enableRelativeVelocity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RelativeVelocity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::InertialStateRelativeType& clearRelativeVelocity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * DomainAcceleration.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      DomainAcceleration.
    */
  virtual const uci::type::Acceleration3D_Type& getDomainAcceleration() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DomainAcceleration.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DomainAcceleration.
    */
  virtual uci::type::Acceleration3D_Type& getDomainAcceleration() = 0;

  /** Sets the complex content identified by DomainAcceleration to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DomainAcceleration.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::InertialStateRelativeType& setDomainAcceleration(const uci::type::Acceleration3D_Type& value) = 0;

  /** Returns whether the Element identified by DomainAcceleration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DomainAcceleration is enabled or not.
    */
  virtual bool hasDomainAcceleration() const = 0;

  /** Enables the Element identified by DomainAcceleration.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DomainAcceleration.
    */
  virtual uci::type::Acceleration3D_Type& enableDomainAcceleration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DomainAcceleration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::InertialStateRelativeType& clearDomainAcceleration() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Orientation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Orientation.
    */
  virtual const uci::type::OrientationType& getOrientation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Orientation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Orientation.
    */
  virtual uci::type::OrientationType& getOrientation() = 0;

  /** Sets the complex content identified by Orientation to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Orientation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::InertialStateRelativeType& setOrientation(const uci::type::OrientationType& value) = 0;

  /** Returns whether the Element identified by Orientation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Orientation is enabled or not.
    */
  virtual bool hasOrientation() const = 0;

  /** Enables the Element identified by Orientation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Orientation.
    */
  virtual uci::type::OrientationType& enableOrientation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Orientation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::InertialStateRelativeType& clearOrientation() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OrientationRate.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OrientationRate.
    */
  virtual const uci::type::OrientationRateType& getOrientationRate() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrientationRate.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrientationRate.
    */
  virtual uci::type::OrientationRateType& getOrientationRate() = 0;

  /** Sets the complex content identified by OrientationRate to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrientationRate.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::InertialStateRelativeType& setOrientationRate(const uci::type::OrientationRateType& value) = 0;

  /** Returns whether the Element identified by OrientationRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrientationRate is enabled or not.
    */
  virtual bool hasOrientationRate() const = 0;

  /** Enables the Element identified by OrientationRate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrientationRate.
    */
  virtual uci::type::OrientationRateType& enableOrientationRate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrientationRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::InertialStateRelativeType& clearOrientationRate() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  InertialStateRelativeType() {
  }

  /** The destructor [only available to derived classes]. */
  ~InertialStateRelativeType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The InertialStateRelativeType to copy from.
    */
  InertialStateRelativeType(const InertialStateRelativeType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this InertialStateRelativeType to the contents of the
    * InertialStateRelativeType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The InertialStateRelativeType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this InertialStateRelativeType.
    * @return A reference to this InertialStateRelativeType.
    */
  InertialStateRelativeType& operator=(const InertialStateRelativeType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_INERTIALSTATERELATIVETYPE_H

