/** @file PlanInputsCoreType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLANINPUTSCORETYPE_H
#define UCI_TYPE_PLANINPUTSCORETYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/FileLocationID_Type.h"
#include "uci/type/MissionEnvironmentConstraintType.h"
#include "uci/type/OpConstraintWeightingType.h"
#include "uci/type/PlanInitiationSourceEnum.h"
#include "uci/type/PlanningDataSourceEnum.h"
#include "uci/type/PlanningProcessID_Type.h"
#include "uci/type/ReplanReasonType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates input data used to create different types of *Plans. */
class PlanInputsCoreType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PlanInputsCoreType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanInputsCoreType.
    */
  static UCI_EXPORT PlanInputsCoreType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlanInputsCoreType initializing the data accessed by the new PlanInputsCoreType using
    * the data accessed by the specified PlanInputsCoreType (cloning).
    *
    * @param accessor The PlanInputsCoreType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PlanInputsCoreType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanInputsCoreType.
    */
  static UCI_EXPORT PlanInputsCoreType& create(const PlanInputsCoreType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlanInputsCoreType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The PlanInputsCoreType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlanInputsCoreType& accessor);

  /** Returns this accessor's type constant, i.e. planInputsCoreType.
    *
    * @return This accessor's type constant, i.e. planInputsCoreType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::planInputsCoreType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlanInputsCoreType.
    *
    * @return The version that was initialized from the uci:version attribute of PlanInputsCoreType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlanInputsCoreType& accessor) = 0;

  /** Indicates a selective override of an item in the mission environment world state to use/used in the Plan.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::MissionEnvironmentConstraintType, uci::type::accessorType::missionEnvironmentConstraintType> EnvironmentOverride;

  /** Further constrain a Mission Plan to an operational constraint that indicates how much the constraint should play a
    * role in the planning process. The multiplicity is based on the list of available OpConstraintEnums. [Occurrences:
    * Minimum: 0; Maximum: 15]
    */
  typedef uci::base::BoundedList<uci::type::OpConstraintWeightingType, uci::type::accessorType::opConstraintWeightingType> OpConstraint;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * PlanningProcessID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      PlanningProcessID.
    */
  virtual const uci::type::PlanningProcessID_Type& getPlanningProcessID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PlanningProcessID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PlanningProcessID.
    */
  virtual uci::type::PlanningProcessID_Type& getPlanningProcessID() = 0;

  /** Sets the complex content identified by PlanningProcessID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PlanningProcessID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanInputsCoreType& setPlanningProcessID(const uci::type::PlanningProcessID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by PlanInitiation.
    *
    * @return A const reference to the value of the enumeration identified by PlanInitiation.
    */
  virtual const uci::type::PlanInitiationSourceEnum& getPlanInitiation() const = 0;

  /** Returns a reference to the value of the enumeration identified by PlanInitiation.
    *
    * @return A reference to the value of the enumeration identified by PlanInitiation.
    */
  virtual uci::type::PlanInitiationSourceEnum& getPlanInitiation() = 0;

  /** Sets the value of the enumeration identified by PlanInitiation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanInputsCoreType& setPlanInitiation(const uci::type::PlanInitiationSourceEnum& value) = 0;

  /** Sets the value of the enumeration identified by PlanInitiation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanInputsCoreType& setPlanInitiation(uci::type::PlanInitiationSourceEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by PlanningDataSource.
    *
    * @return A const reference to the value of the enumeration identified by PlanningDataSource.
    */
  virtual const uci::type::PlanningDataSourceEnum& getPlanningDataSource() const = 0;

  /** Returns a reference to the value of the enumeration identified by PlanningDataSource.
    *
    * @return A reference to the value of the enumeration identified by PlanningDataSource.
    */
  virtual uci::type::PlanningDataSourceEnum& getPlanningDataSource() = 0;

  /** Sets the value of the enumeration identified by PlanningDataSource.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanInputsCoreType& setPlanningDataSource(const uci::type::PlanningDataSourceEnum& value) = 0;

  /** Sets the value of the enumeration identified by PlanningDataSource.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanInputsCoreType& setPlanningDataSource(uci::type::PlanningDataSourceEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ReplanReason.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ReplanReason.
    */
  virtual const uci::type::ReplanReasonType& getReplanReason() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ReplanReason.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ReplanReason.
    */
  virtual uci::type::ReplanReasonType& getReplanReason() = 0;

  /** Sets the complex content identified by ReplanReason to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ReplanReason.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanInputsCoreType& setReplanReason(const uci::type::ReplanReasonType& value) = 0;

  /** Returns whether the Element identified by ReplanReason exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReplanReason is enabled or not.
    */
  virtual bool hasReplanReason() const = 0;

  /** Enables the Element identified by ReplanReason.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ReplanReason.
    */
  virtual uci::type::ReplanReasonType& enableReplanReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReplanReason.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanInputsCoreType& clearReplanReason() = 0;

  /** Returns a const reference to the bounded list identified by EnvironmentOverride.
    *
    * @return A const reference to the bounded list identified by EnvironmentOverride.
    */
  virtual const uci::type::PlanInputsCoreType::EnvironmentOverride& getEnvironmentOverride() const = 0;

  /** Returns a reference to the bounded list identified by EnvironmentOverride.
    *
    * @return A reference to the bounded list identified by EnvironmentOverride.
    */
  virtual uci::type::PlanInputsCoreType::EnvironmentOverride& getEnvironmentOverride() = 0;

  /** Sets the bounded list identified by EnvironmentOverride.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanInputsCoreType& setEnvironmentOverride(const uci::type::PlanInputsCoreType::EnvironmentOverride& value) = 0;

  /** Returns a const reference to the bounded list identified by OpConstraint.
    *
    * @return A const reference to the bounded list identified by OpConstraint.
    */
  virtual const uci::type::PlanInputsCoreType::OpConstraint& getOpConstraint() const = 0;

  /** Returns a reference to the bounded list identified by OpConstraint.
    *
    * @return A reference to the bounded list identified by OpConstraint.
    */
  virtual uci::type::PlanInputsCoreType::OpConstraint& getOpConstraint() = 0;

  /** Sets the bounded list identified by OpConstraint.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanInputsCoreType& setOpConstraint(const uci::type::PlanInputsCoreType::OpConstraint& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SpecialInstructionsID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SpecialInstructionsID.
    */
  virtual const uci::type::FileLocationID_Type& getSpecialInstructionsID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SpecialInstructionsID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SpecialInstructionsID.
    */
  virtual uci::type::FileLocationID_Type& getSpecialInstructionsID() = 0;

  /** Sets the complex content identified by SpecialInstructionsID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SpecialInstructionsID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanInputsCoreType& setSpecialInstructionsID(const uci::type::FileLocationID_Type& value) = 0;

  /** Returns whether the Element identified by SpecialInstructionsID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SpecialInstructionsID is enabled or not.
    */
  virtual bool hasSpecialInstructionsID() const = 0;

  /** Enables the Element identified by SpecialInstructionsID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SpecialInstructionsID.
    */
  virtual uci::type::FileLocationID_Type& enableSpecialInstructionsID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SpecialInstructionsID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanInputsCoreType& clearSpecialInstructionsID() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlanInputsCoreType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlanInputsCoreType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlanInputsCoreType to copy from.
    */
  PlanInputsCoreType(const PlanInputsCoreType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlanInputsCoreType to the contents of the PlanInputsCoreType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PlanInputsCoreType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this PlanInputsCoreType.
    * @return A reference to this PlanInputsCoreType.
    */
  PlanInputsCoreType& operator=(const PlanInputsCoreType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLANINPUTSCORETYPE_H

