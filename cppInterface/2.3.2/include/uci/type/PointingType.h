/** @file PointingType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_POINTINGTYPE_H
#define UCI_TYPE_POINTINGTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ActivityID_Type.h"
#include "uci/type/EmptyType.h"
#include "uci/type/FixedPointingEnum.h"
#include "uci/type/LOS_D_Type.h"
#include "uci/type/PO_AirTargetVolumeCommandType.h"
#include "uci/type/TargetType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the position or location to point the XX Subsystem to do a XX collection, track, or search as part of an XX
  * Activity. If the XX Subsystem cannot point itself, then the TurretSlaved Type is used. If the system wants to allow
  * the subsystem to control its own LOS then the ActivitySlavedID is used. FixedPointing is used to point to a
  * predetermined location defined by its Enum values.
  */
class PointingType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PointingType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PointingType.
    */
  static UCI_EXPORT PointingType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PointingType initializing the data accessed by the new PointingType using the data
    * accessed by the specified PointingType (cloning).
    *
    * @param accessor The PointingType that provides access to the data that is to be used to initialize the data accessed
    *      by the new created PointingType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PointingType.
    */
  static UCI_EXPORT PointingType& create(const PointingType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PointingType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The PointingType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PointingType& accessor);

  /** Returns this accessor's type constant, i.e. pointingType.
    *
    * @return This accessor's type constant, i.e. pointingType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pointingType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PointingType.
    *
    * @return The version that was initialized from the uci:version attribute of PointingType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PointingType& accessor) = 0;

  /** Indicates the source of or explicit values for geospatial characteristics of the target of the Command. When multiple
    * points/targets are given, a best-fit, multi-track or similar behavior is expected. [Occurrences: Minimum: 1; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::TargetType, uci::type::accessorType::targetType> Geospatial;

  /** Indicates the volume or specific Entity that defines the extents of the spatial region covered by the command. For
    * non-cued Capabilities, one air volume instance of this element is expected. For cued Capabilities, two instances of
    * this element are allowed: one with an Entity specified and a second with an air volume that define the extents of the
    * cue volume around the Entity. For cued Capabilities, a single instance is allowed if it is an Entity in which case
    * the Entity location uncertainty defines the extents of the cue volume. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_AirTargetVolumeCommandType, uci::type::accessorType::pO_AirTargetVolumeCommandType> Volume;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum PointingTypeChoice {
    POINTINGTYPE_CHOICE_NONE,
    POINTINGTYPE_CHOICE_GEOSPATIAL,
    POINTINGTYPE_CHOICE_LOS_OPTION,
    POINTINGTYPE_CHOICE_VOLUME,
    POINTINGTYPE_CHOICE_TURRETSLAVED,
    POINTINGTYPE_CHOICE_ACTIVITYSLAVEDID,
    POINTINGTYPE_CHOICE_FIXEDPOINTING
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual PointingTypeChoice getPointingTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getPointingTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the access
    * methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PointingType& setPointingTypeChoiceOrdinal(PointingTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the bounded list identified by Geospatial.
    *
    * @return A const reference to the bounded list identified by Geospatial.
    */
  virtual const uci::type::PointingType::Geospatial& getGeospatial() const = 0;

  /** Returns a reference to the bounded list identified by Geospatial.
    *
    * @return A reference to the bounded list identified by Geospatial.
    */
  virtual uci::type::PointingType::Geospatial& getGeospatial() = 0;

  /** Sets the bounded list identified by Geospatial.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PointingType& setGeospatial(const uci::type::PointingType::Geospatial& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Geospatial.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Geospatial, false otherwise.
    */
  virtual bool isGeospatial() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Geospatial.
    *
    * @return A reference to the accessor that provides access to the choice identified by Geospatial.
    */
  virtual uci::type::PointingType::Geospatial& chooseGeospatial() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by LOS_Option.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by LOS_Option.
    */
  virtual const uci::type::LOS_D_Type& getLOS_Option() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LOS_Option.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LOS_Option.
    */
  virtual uci::type::LOS_D_Type& getLOS_Option() = 0;

  /** Sets the complex content identified by LOS_Option to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LOS_Option.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PointingType& setLOS_Option(const uci::type::LOS_D_Type& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by LOS_Option.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by LOS_Option, false otherwise.
    */
  virtual bool isLOS_Option() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by LOS_Option.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by LOS_Option.
    */
  virtual uci::type::LOS_D_Type& chooseLOS_Option(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the bounded list identified by Volume.
    *
    * @return A const reference to the bounded list identified by Volume.
    */
  virtual const uci::type::PointingType::Volume& getVolume() const = 0;

  /** Returns a reference to the bounded list identified by Volume.
    *
    * @return A reference to the bounded list identified by Volume.
    */
  virtual uci::type::PointingType::Volume& getVolume() = 0;

  /** Sets the bounded list identified by Volume.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PointingType& setVolume(const uci::type::PointingType::Volume& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Volume.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Volume, false otherwise.
    */
  virtual bool isVolume() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Volume.
    *
    * @return A reference to the accessor that provides access to the choice identified by Volume.
    */
  virtual uci::type::PointingType::Volume& chooseVolume() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by TurretSlaved.
    *
    * @return A const reference to the accessor that provides access to the string identified by TurretSlaved.
    */
  virtual const uci::type::EmptyType& getTurretSlaved() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by TurretSlaved.
    *
    * @return A reference to the accessor that provides access to the string identified by TurretSlaved.
    */
  virtual uci::type::EmptyType& getTurretSlaved() = 0;

  /** Sets the string identified by TurretSlaved to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by TurretSlaved.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PointingType& setTurretSlaved(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by TurretSlaved to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PointingType& setTurretSlaved(const std::string& value) = 0;

  /** Sets the string identified by TurretSlaved to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PointingType& setTurretSlaved(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by TurretSlaved.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by TurretSlaved, false otherwise.
    */
  virtual bool isTurretSlaved() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by TurretSlaved.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by TurretSlaved.
    */
  virtual uci::type::EmptyType& chooseTurretSlaved(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActivitySlavedID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActivitySlavedID.
    */
  virtual const uci::type::ActivityID_Type& getActivitySlavedID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActivitySlavedID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActivitySlavedID.
    */
  virtual uci::type::ActivityID_Type& getActivitySlavedID() = 0;

  /** Sets the complex content identified by ActivitySlavedID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivitySlavedID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PointingType& setActivitySlavedID(const uci::type::ActivityID_Type& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ActivitySlavedID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ActivitySlavedID, false
    *      otherwise.
    */
  virtual bool isActivitySlavedID() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ActivitySlavedID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ActivitySlavedID.
    */
  virtual uci::type::ActivityID_Type& chooseActivitySlavedID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the value of the enumeration identified by FixedPointing.
    *
    * @return A const reference to the value of the enumeration identified by FixedPointing.
    */
  virtual const uci::type::FixedPointingEnum& getFixedPointing() const = 0;

  /** Returns a reference to the value of the enumeration identified by FixedPointing.
    *
    * @return A reference to the value of the enumeration identified by FixedPointing.
    */
  virtual uci::type::FixedPointingEnum& getFixedPointing() = 0;

  /** Sets the value of the enumeration identified by FixedPointing.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PointingType& setFixedPointing(const uci::type::FixedPointingEnum& value) = 0;

  /** Sets the value of the enumeration identified by FixedPointing.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PointingType& setFixedPointing(uci::type::FixedPointingEnum::EnumerationItem value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FixedPointing.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FixedPointing, false otherwise.
    */
  virtual bool isFixedPointing() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by FixedPointing.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FixedPointing.
    */
  virtual uci::type::FixedPointingEnum& chooseFixedPointing(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PointingType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PointingType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PointingType to copy from.
    */
  PointingType(const PointingType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PointingType to the contents of the PointingType on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PointingType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this PointingType.
    * @return A reference to this PointingType.
    */
  PointingType& operator=(const PointingType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_POINTINGTYPE_H

