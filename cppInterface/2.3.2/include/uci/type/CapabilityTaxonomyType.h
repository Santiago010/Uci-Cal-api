/** @file CapabilityTaxonomyType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CAPABILITYTAXONOMYTYPE_H
#define UCI_TYPE_CAPABILITYTAXONOMYTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/AMTI_SpecificDataType.h"
#include "uci/type/AO_CapabilityEnum.h"
#include "uci/type/ActionTypeEnum.h"
#include "uci/type/AirSampleCapabilityEnum.h"
#include "uci/type/COMINT_SpecificDataType.h"
#include "uci/type/CS_CapabilityEnum.h"
#include "uci/type/CapabilityInitiationEnum.h"
#include "uci/type/CargoDeliverySpecificDataType.h"
#include "uci/type/CommCapabilityEnum.h"
#include "uci/type/ESM_SpecificDataType.h"
#include "uci/type/EffectTypeEnum.h"
#include "uci/type/FlightCapabilityEnum.h"
#include "uci/type/OrbitChangeCapabilityEnum.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityEnum.h"
#include "uci/type/OrbitalSurveillanceSpecificDataType.h"
#include "uci/type/PO_CapabilityEnum.h"
#include "uci/type/RefuelCapabilityEnum.h"
#include "uci/type/ResponseTypeEnum.h"
#include "uci/type/SAR_SpecificDataType.h"
#include "uci/type/SMTI_SpecificDataType.h"
#include "uci/type/StoreType.h"
#include "uci/type/SystemDeploymentEnum.h"
#include "uci/type/TacticalOrderCapabilityEnum.h"
#include "uci/type/WeatherRadarCapabilityEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class CapabilityTaxonomyType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CapabilityTaxonomyType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CapabilityTaxonomyType.
    */
  static UCI_EXPORT CapabilityTaxonomyType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CapabilityTaxonomyType initializing the data accessed by the new CapabilityTaxonomyType
    * using the data accessed by the specified CapabilityTaxonomyType (cloning).
    *
    * @param accessor The CapabilityTaxonomyType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created CapabilityTaxonomyType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CapabilityTaxonomyType.
    */
  static UCI_EXPORT CapabilityTaxonomyType& create(const CapabilityTaxonomyType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CapabilityTaxonomyType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The CapabilityTaxonomyType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CapabilityTaxonomyType& accessor);

  /** Returns this accessor's type constant, i.e. capabilityTaxonomyType.
    *
    * @return This accessor's type constant, i.e. capabilityTaxonomyType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::capabilityTaxonomyType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CapabilityTaxonomyType.
    *
    * @return The version that was initialized from the uci:version attribute of CapabilityTaxonomyType.
    */
  static std::string getUCITypeVersion() {
    return "003.002.003.003";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CapabilityTaxonomyType& accessor) = 0;

  /** Indicates an Action Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 84]
    */
  typedef uci::base::BoundedList<uci::type::ActionTypeEnum, uci::type::accessorType::actionTypeEnum> Action;

  /** Indicates an AirSample Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 2]
    */
  typedef uci::base::BoundedList<uci::type::AirSampleCapabilityEnum, uci::type::accessorType::airSampleCapabilityEnum> AirSample;

  /** Indicates an AMTI Capability and any optional SubCapabilities. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::AMTI_SpecificDataType, uci::type::accessorType::aMTI_SpecificDataType> AMTI;

  /** Indicates an AO Capability. List size for this element is based on "Select All That Apply" condition. [Occurrences:
    * Minimum: 0; Maximum: 5]
    */
  typedef uci::base::BoundedList<uci::type::AO_CapabilityEnum, uci::type::accessorType::aO_CapabilityEnum> AO;

  /** Indicates a CargoDelivery Capability and any optional SubCapabilities. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::CargoDeliverySpecificDataType, uci::type::accessorType::cargoDeliverySpecificDataType> CargoDelivery;

  /** Indicates a COMINT Capability and any optional SubCapabilities. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::COMINT_SpecificDataType, uci::type::accessorType::cOMINT_SpecificDataType> COMINT;

  /** Indicates a CommRelay Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 53]
    */
  typedef uci::base::BoundedList<uci::type::CommCapabilityEnum, uci::type::accessorType::commCapabilityEnum> CommRelay;

  /** Indicates an EA Capability. List size for this element is based on "Select All That Apply" condition. [Occurrences:
    * Minimum: 0; Maximum: 2]
    */
  typedef uci::base::BoundedList<uci::type::CapabilityInitiationEnum, uci::type::accessorType::capabilityInitiationEnum> EA;

  /** Indicates an Effect Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 47]
    */
  typedef uci::base::BoundedList<uci::type::EffectTypeEnum, uci::type::accessorType::effectTypeEnum> Effect;

  /** Indicates an ESM Capability and any optional SubCapabilities. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::ESM_SpecificDataType, uci::type::accessorType::eSM_SpecificDataType> ESM;

  /** Indicates a Flight Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 2]
    */
  typedef uci::base::BoundedList<uci::type::FlightCapabilityEnum, uci::type::accessorType::flightCapabilityEnum> Flight;

  /** Indicates an OrbitChange Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 9]
    */
  typedef uci::base::BoundedList<uci::type::OrbitChangeCapabilityEnum, uci::type::accessorType::orbitChangeCapabilityEnum> OrbitChange;

  /** Indicates an OrbitalSurveillance Capability and any optional SubCapabilities. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OrbitalSurveillanceSpecificDataType, uci::type::accessorType::orbitalSurveillanceSpecificDataType> OrbitalSurveillance;

  /** Indicates an OrbitalSurveillanceSensor Capability. List size for this element is based on "Select All That Apply"
    * condition. [Occurrences: Minimum: 0; Maximum: 2]
    */
  typedef uci::base::BoundedList<uci::type::OrbitalSurveillanceSensorCapabilityEnum, uci::type::accessorType::orbitalSurveillanceSensorCapabilityEnum> OrbitalSurveillanceSensor;

  /** Indicates a PO Capability. List size for this element is based on "Select All That Apply" condition. [Occurrences:
    * Minimum: 0; Maximum: 19]
    */
  typedef uci::base::BoundedList<uci::type::PO_CapabilityEnum, uci::type::accessorType::pO_CapabilityEnum> PO;

  /** Indicates a Refuel Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 3]
    */
  typedef uci::base::BoundedList<uci::type::RefuelCapabilityEnum, uci::type::accessorType::refuelCapabilityEnum> Refuel;

  /** Indicates a Response Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 4]
    */
  typedef uci::base::BoundedList<uci::type::ResponseTypeEnum, uci::type::accessorType::responseTypeEnum> Response;

  /** Indicates a SAR Capability and any optional SubCapabilities. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::SAR_SpecificDataType, uci::type::accessorType::sAR_SpecificDataType> SAR;

  /** Indicates a SMTI Capability and any optional SubCapabilities. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::SMTI_SpecificDataType, uci::type::accessorType::sMTI_SpecificDataType> SMTI;

  /** Indicates a Strike Capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::StoreType, uci::type::accessorType::storeType> Strike;

  /** Indicates a SystemDeployment Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 6]
    */
  typedef uci::base::BoundedList<uci::type::SystemDeploymentEnum, uci::type::accessorType::systemDeploymentEnum> SystemDeployment;

  /** Indicates a TacticalOrder Capability. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 11]
    */
  typedef uci::base::BoundedList<uci::type::TacticalOrderCapabilityEnum, uci::type::accessorType::tacticalOrderCapabilityEnum> TacticalOrder;

  /** Returns a const reference to the bounded list identified by Action.
    *
    * @return A const reference to the bounded list identified by Action.
    */
  virtual const uci::type::CapabilityTaxonomyType::Action& getAction() const = 0;

  /** Returns a reference to the bounded list identified by Action.
    *
    * @return A reference to the bounded list identified by Action.
    */
  virtual uci::type::CapabilityTaxonomyType::Action& getAction() = 0;

  /** Sets the bounded list identified by Action.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setAction(const uci::type::CapabilityTaxonomyType::Action& value) = 0;

  /** Returns a const reference to the bounded list identified by AirSample.
    *
    * @return A const reference to the bounded list identified by AirSample.
    */
  virtual const uci::type::CapabilityTaxonomyType::AirSample& getAirSample() const = 0;

  /** Returns a reference to the bounded list identified by AirSample.
    *
    * @return A reference to the bounded list identified by AirSample.
    */
  virtual uci::type::CapabilityTaxonomyType::AirSample& getAirSample() = 0;

  /** Sets the bounded list identified by AirSample.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setAirSample(const uci::type::CapabilityTaxonomyType::AirSample& value) = 0;

  /** Returns a const reference to the bounded list identified by AMTI.
    *
    * @return A const reference to the bounded list identified by AMTI.
    */
  virtual const uci::type::CapabilityTaxonomyType::AMTI& getAMTI() const = 0;

  /** Returns a reference to the bounded list identified by AMTI.
    *
    * @return A reference to the bounded list identified by AMTI.
    */
  virtual uci::type::CapabilityTaxonomyType::AMTI& getAMTI() = 0;

  /** Sets the bounded list identified by AMTI.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setAMTI(const uci::type::CapabilityTaxonomyType::AMTI& value) = 0;

  /** Returns a const reference to the bounded list identified by AO.
    *
    * @return A const reference to the bounded list identified by AO.
    */
  virtual const uci::type::CapabilityTaxonomyType::AO& getAO() const = 0;

  /** Returns a reference to the bounded list identified by AO.
    *
    * @return A reference to the bounded list identified by AO.
    */
  virtual uci::type::CapabilityTaxonomyType::AO& getAO() = 0;

  /** Sets the bounded list identified by AO.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setAO(const uci::type::CapabilityTaxonomyType::AO& value) = 0;

  /** Returns a const reference to the bounded list identified by CargoDelivery.
    *
    * @return A const reference to the bounded list identified by CargoDelivery.
    */
  virtual const uci::type::CapabilityTaxonomyType::CargoDelivery& getCargoDelivery() const = 0;

  /** Returns a reference to the bounded list identified by CargoDelivery.
    *
    * @return A reference to the bounded list identified by CargoDelivery.
    */
  virtual uci::type::CapabilityTaxonomyType::CargoDelivery& getCargoDelivery() = 0;

  /** Sets the bounded list identified by CargoDelivery.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setCargoDelivery(const uci::type::CapabilityTaxonomyType::CargoDelivery& value) = 0;

  /** Returns a const reference to the bounded list identified by COMINT.
    *
    * @return A const reference to the bounded list identified by COMINT.
    */
  virtual const uci::type::CapabilityTaxonomyType::COMINT& getCOMINT() const = 0;

  /** Returns a reference to the bounded list identified by COMINT.
    *
    * @return A reference to the bounded list identified by COMINT.
    */
  virtual uci::type::CapabilityTaxonomyType::COMINT& getCOMINT() = 0;

  /** Sets the bounded list identified by COMINT.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setCOMINT(const uci::type::CapabilityTaxonomyType::COMINT& value) = 0;

  /** Returns a const reference to the bounded list identified by CommRelay.
    *
    * @return A const reference to the bounded list identified by CommRelay.
    */
  virtual const uci::type::CapabilityTaxonomyType::CommRelay& getCommRelay() const = 0;

  /** Returns a reference to the bounded list identified by CommRelay.
    *
    * @return A reference to the bounded list identified by CommRelay.
    */
  virtual uci::type::CapabilityTaxonomyType::CommRelay& getCommRelay() = 0;

  /** Sets the bounded list identified by CommRelay.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setCommRelay(const uci::type::CapabilityTaxonomyType::CommRelay& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by CounterSpace.
    *
    * @return A const reference to the value of the enumeration identified by CounterSpace.
    */
  virtual const uci::type::CS_CapabilityEnum& getCounterSpace() const = 0;

  /** Returns a reference to the value of the enumeration identified by CounterSpace.
    *
    * @return A reference to the value of the enumeration identified by CounterSpace.
    */
  virtual uci::type::CS_CapabilityEnum& getCounterSpace() = 0;

  /** Sets the value of the enumeration identified by CounterSpace.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setCounterSpace(const uci::type::CS_CapabilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by CounterSpace.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setCounterSpace(uci::type::CS_CapabilityEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by CounterSpace exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CounterSpace is enabled or not.
    */
  virtual bool hasCounterSpace() const = 0;

  /** Enables the Element identified by CounterSpace.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by CounterSpace.
    */
  virtual uci::type::CS_CapabilityEnum& enableCounterSpace(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CounterSpace.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& clearCounterSpace() = 0;

  /** Returns a const reference to the bounded list identified by EA.
    *
    * @return A const reference to the bounded list identified by EA.
    */
  virtual const uci::type::CapabilityTaxonomyType::EA& getEA() const = 0;

  /** Returns a reference to the bounded list identified by EA.
    *
    * @return A reference to the bounded list identified by EA.
    */
  virtual uci::type::CapabilityTaxonomyType::EA& getEA() = 0;

  /** Sets the bounded list identified by EA.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setEA(const uci::type::CapabilityTaxonomyType::EA& value) = 0;

  /** Returns a const reference to the bounded list identified by Effect.
    *
    * @return A const reference to the bounded list identified by Effect.
    */
  virtual const uci::type::CapabilityTaxonomyType::Effect& getEffect() const = 0;

  /** Returns a reference to the bounded list identified by Effect.
    *
    * @return A reference to the bounded list identified by Effect.
    */
  virtual uci::type::CapabilityTaxonomyType::Effect& getEffect() = 0;

  /** Sets the bounded list identified by Effect.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setEffect(const uci::type::CapabilityTaxonomyType::Effect& value) = 0;

  /** Returns a const reference to the bounded list identified by ESM.
    *
    * @return A const reference to the bounded list identified by ESM.
    */
  virtual const uci::type::CapabilityTaxonomyType::ESM& getESM() const = 0;

  /** Returns a reference to the bounded list identified by ESM.
    *
    * @return A reference to the bounded list identified by ESM.
    */
  virtual uci::type::CapabilityTaxonomyType::ESM& getESM() = 0;

  /** Sets the bounded list identified by ESM.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setESM(const uci::type::CapabilityTaxonomyType::ESM& value) = 0;

  /** Returns a const reference to the bounded list identified by Flight.
    *
    * @return A const reference to the bounded list identified by Flight.
    */
  virtual const uci::type::CapabilityTaxonomyType::Flight& getFlight() const = 0;

  /** Returns a reference to the bounded list identified by Flight.
    *
    * @return A reference to the bounded list identified by Flight.
    */
  virtual uci::type::CapabilityTaxonomyType::Flight& getFlight() = 0;

  /** Sets the bounded list identified by Flight.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setFlight(const uci::type::CapabilityTaxonomyType::Flight& value) = 0;

  /** Returns a const reference to the bounded list identified by OrbitChange.
    *
    * @return A const reference to the bounded list identified by OrbitChange.
    */
  virtual const uci::type::CapabilityTaxonomyType::OrbitChange& getOrbitChange() const = 0;

  /** Returns a reference to the bounded list identified by OrbitChange.
    *
    * @return A reference to the bounded list identified by OrbitChange.
    */
  virtual uci::type::CapabilityTaxonomyType::OrbitChange& getOrbitChange() = 0;

  /** Sets the bounded list identified by OrbitChange.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setOrbitChange(const uci::type::CapabilityTaxonomyType::OrbitChange& value) = 0;

  /** Returns a const reference to the bounded list identified by OrbitalSurveillance.
    *
    * @return A const reference to the bounded list identified by OrbitalSurveillance.
    */
  virtual const uci::type::CapabilityTaxonomyType::OrbitalSurveillance& getOrbitalSurveillance() const = 0;

  /** Returns a reference to the bounded list identified by OrbitalSurveillance.
    *
    * @return A reference to the bounded list identified by OrbitalSurveillance.
    */
  virtual uci::type::CapabilityTaxonomyType::OrbitalSurveillance& getOrbitalSurveillance() = 0;

  /** Sets the bounded list identified by OrbitalSurveillance.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setOrbitalSurveillance(const uci::type::CapabilityTaxonomyType::OrbitalSurveillance& value) = 0;

  /** Returns a const reference to the bounded list identified by OrbitalSurveillanceSensor.
    *
    * @return A const reference to the bounded list identified by OrbitalSurveillanceSensor.
    */
  virtual const uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor& getOrbitalSurveillanceSensor() const = 0;

  /** Returns a reference to the bounded list identified by OrbitalSurveillanceSensor.
    *
    * @return A reference to the bounded list identified by OrbitalSurveillanceSensor.
    */
  virtual uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor& getOrbitalSurveillanceSensor() = 0;

  /** Sets the bounded list identified by OrbitalSurveillanceSensor.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setOrbitalSurveillanceSensor(const uci::type::CapabilityTaxonomyType::OrbitalSurveillanceSensor& value) = 0;

  /** Returns a const reference to the bounded list identified by PO.
    *
    * @return A const reference to the bounded list identified by PO.
    */
  virtual const uci::type::CapabilityTaxonomyType::PO& getPO() const = 0;

  /** Returns a reference to the bounded list identified by PO.
    *
    * @return A reference to the bounded list identified by PO.
    */
  virtual uci::type::CapabilityTaxonomyType::PO& getPO() = 0;

  /** Sets the bounded list identified by PO.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setPO(const uci::type::CapabilityTaxonomyType::PO& value) = 0;

  /** Returns a const reference to the bounded list identified by Refuel.
    *
    * @return A const reference to the bounded list identified by Refuel.
    */
  virtual const uci::type::CapabilityTaxonomyType::Refuel& getRefuel() const = 0;

  /** Returns a reference to the bounded list identified by Refuel.
    *
    * @return A reference to the bounded list identified by Refuel.
    */
  virtual uci::type::CapabilityTaxonomyType::Refuel& getRefuel() = 0;

  /** Sets the bounded list identified by Refuel.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setRefuel(const uci::type::CapabilityTaxonomyType::Refuel& value) = 0;

  /** Returns a const reference to the bounded list identified by Response.
    *
    * @return A const reference to the bounded list identified by Response.
    */
  virtual const uci::type::CapabilityTaxonomyType::Response& getResponse() const = 0;

  /** Returns a reference to the bounded list identified by Response.
    *
    * @return A reference to the bounded list identified by Response.
    */
  virtual uci::type::CapabilityTaxonomyType::Response& getResponse() = 0;

  /** Sets the bounded list identified by Response.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setResponse(const uci::type::CapabilityTaxonomyType::Response& value) = 0;

  /** Returns a const reference to the bounded list identified by SAR.
    *
    * @return A const reference to the bounded list identified by SAR.
    */
  virtual const uci::type::CapabilityTaxonomyType::SAR& getSAR() const = 0;

  /** Returns a reference to the bounded list identified by SAR.
    *
    * @return A reference to the bounded list identified by SAR.
    */
  virtual uci::type::CapabilityTaxonomyType::SAR& getSAR() = 0;

  /** Sets the bounded list identified by SAR.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setSAR(const uci::type::CapabilityTaxonomyType::SAR& value) = 0;

  /** Returns a const reference to the bounded list identified by SMTI.
    *
    * @return A const reference to the bounded list identified by SMTI.
    */
  virtual const uci::type::CapabilityTaxonomyType::SMTI& getSMTI() const = 0;

  /** Returns a reference to the bounded list identified by SMTI.
    *
    * @return A reference to the bounded list identified by SMTI.
    */
  virtual uci::type::CapabilityTaxonomyType::SMTI& getSMTI() = 0;

  /** Sets the bounded list identified by SMTI.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setSMTI(const uci::type::CapabilityTaxonomyType::SMTI& value) = 0;

  /** Returns a const reference to the bounded list identified by Strike.
    *
    * @return A const reference to the bounded list identified by Strike.
    */
  virtual const uci::type::CapabilityTaxonomyType::Strike& getStrike() const = 0;

  /** Returns a reference to the bounded list identified by Strike.
    *
    * @return A reference to the bounded list identified by Strike.
    */
  virtual uci::type::CapabilityTaxonomyType::Strike& getStrike() = 0;

  /** Sets the bounded list identified by Strike.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setStrike(const uci::type::CapabilityTaxonomyType::Strike& value) = 0;

  /** Returns a const reference to the bounded list identified by SystemDeployment.
    *
    * @return A const reference to the bounded list identified by SystemDeployment.
    */
  virtual const uci::type::CapabilityTaxonomyType::SystemDeployment& getSystemDeployment() const = 0;

  /** Returns a reference to the bounded list identified by SystemDeployment.
    *
    * @return A reference to the bounded list identified by SystemDeployment.
    */
  virtual uci::type::CapabilityTaxonomyType::SystemDeployment& getSystemDeployment() = 0;

  /** Sets the bounded list identified by SystemDeployment.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setSystemDeployment(const uci::type::CapabilityTaxonomyType::SystemDeployment& value) = 0;

  /** Returns a const reference to the bounded list identified by TacticalOrder.
    *
    * @return A const reference to the bounded list identified by TacticalOrder.
    */
  virtual const uci::type::CapabilityTaxonomyType::TacticalOrder& getTacticalOrder() const = 0;

  /** Returns a reference to the bounded list identified by TacticalOrder.
    *
    * @return A reference to the bounded list identified by TacticalOrder.
    */
  virtual uci::type::CapabilityTaxonomyType::TacticalOrder& getTacticalOrder() = 0;

  /** Sets the bounded list identified by TacticalOrder.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setTacticalOrder(const uci::type::CapabilityTaxonomyType::TacticalOrder& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by WeatherRadar.
    *
    * @return A const reference to the value of the enumeration identified by WeatherRadar.
    */
  virtual const uci::type::WeatherRadarCapabilityEnum& getWeatherRadar() const = 0;

  /** Returns a reference to the value of the enumeration identified by WeatherRadar.
    *
    * @return A reference to the value of the enumeration identified by WeatherRadar.
    */
  virtual uci::type::WeatherRadarCapabilityEnum& getWeatherRadar() = 0;

  /** Sets the value of the enumeration identified by WeatherRadar.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setWeatherRadar(const uci::type::WeatherRadarCapabilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by WeatherRadar.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& setWeatherRadar(uci::type::WeatherRadarCapabilityEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by WeatherRadar exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WeatherRadar is enabled or not.
    */
  virtual bool hasWeatherRadar() const = 0;

  /** Enables the Element identified by WeatherRadar.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by WeatherRadar.
    */
  virtual uci::type::WeatherRadarCapabilityEnum& enableWeatherRadar(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by WeatherRadar.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityTaxonomyType& clearWeatherRadar() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CapabilityTaxonomyType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CapabilityTaxonomyType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CapabilityTaxonomyType to copy from.
    */
  CapabilityTaxonomyType(const CapabilityTaxonomyType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CapabilityTaxonomyType to the contents of the
    * CapabilityTaxonomyType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CapabilityTaxonomyType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this CapabilityTaxonomyType.
    * @return A reference to this CapabilityTaxonomyType.
    */
  CapabilityTaxonomyType& operator=(const CapabilityTaxonomyType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_CAPABILITYTAXONOMYTYPE_H

