/** @file EntitySourceIdentifierType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ENTITYSOURCEIDENTIFIERTYPE_H
#define UCI_TYPE_ENTITYSOURCEIDENTIFIERTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/EOB_RecordID_Type.h"
#include "uci/type/EntityCapabilitySourceType.h"
#include "uci/type/EntityExternalType.h"
#include "uci/type/EntityFusionSourceType.h"
#include "uci/type/ID_Type.h"
#include "uci/type/OperatorID_Type.h"
#include "uci/type/ProductMetadataID_Type.h"
#include "uci/type/SOB_C2_RecordID_Type.h"
#include "uci/type/SOB_SatelliteRecordID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class EntitySourceIdentifierType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new EntitySourceIdentifierType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EntitySourceIdentifierType.
    */
  static UCI_EXPORT EntitySourceIdentifierType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new EntitySourceIdentifierType initializing the data accessed by the new
    * EntitySourceIdentifierType using the data accessed by the specified EntitySourceIdentifierType (cloning).
    *
    * @param accessor The EntitySourceIdentifierType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created EntitySourceIdentifierType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EntitySourceIdentifierType.
    */
  static UCI_EXPORT EntitySourceIdentifierType& create(const EntitySourceIdentifierType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified EntitySourceIdentifierType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The EntitySourceIdentifierType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(EntitySourceIdentifierType& accessor);

  /** Returns this accessor's type constant, i.e. entitySourceIdentifierType.
    *
    * @return This accessor's type constant, i.e. entitySourceIdentifierType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::entitySourceIdentifierType;
  }

  /** Returns the version that was initialized from the uci:version attribute of EntitySourceIdentifierType.
    *
    * @return The version that was initialized from the uci:version attribute of EntitySourceIdentifierType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const EntitySourceIdentifierType& accessor) = 0;

  /** Indicates the Entity is an output of a fusion service and provides references to a fusion input Entity that
    * fused/contributed to it. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EntityFusionSourceType, uci::type::accessorType::entityFusionSourceType> Fusion;

  /** Indicates the unique ID of the Product from which the Entity was derived. [Occurrences: Minimum: 1; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type> ProductMetadataID;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum EntitySourceIdentifierTypeChoice {
    ENTITYSOURCEIDENTIFIERTYPE_CHOICE_NONE,
    ENTITYSOURCEIDENTIFIERTYPE_CHOICE_EOB_RECORDID,
    ENTITYSOURCEIDENTIFIERTYPE_CHOICE_EXTERNALIDENTIFIER,
    ENTITYSOURCEIDENTIFIERTYPE_CHOICE_FUSION,
    ENTITYSOURCEIDENTIFIERTYPE_CHOICE_INTERNALLYDERIVEDID,
    ENTITYSOURCEIDENTIFIERTYPE_CHOICE_CAPABILITY,
    ENTITYSOURCEIDENTIFIERTYPE_CHOICE_PRODUCTMETADATAID,
    ENTITYSOURCEIDENTIFIERTYPE_CHOICE_OPERATORID,
    ENTITYSOURCEIDENTIFIERTYPE_CHOICE_SOB_SATELLITERECORDID,
    ENTITYSOURCEIDENTIFIERTYPE_CHOICE_SOB_C2_RECORDID
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual EntitySourceIdentifierTypeChoice getEntitySourceIdentifierTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getEntitySourceIdentifierTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition,
    * the access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntitySourceIdentifierType& setEntitySourceIdentifierTypeChoiceOrdinal(EntitySourceIdentifierTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EOB_RecordID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EOB_RecordID.
    */
  virtual const uci::type::EOB_RecordID_Type& getEOB_RecordID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EOB_RecordID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EOB_RecordID.
    */
  virtual uci::type::EOB_RecordID_Type& getEOB_RecordID() = 0;

  /** Sets the complex content identified by EOB_RecordID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EOB_RecordID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntitySourceIdentifierType& setEOB_RecordID(const uci::type::EOB_RecordID_Type& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by EOB_RecordID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by EOB_RecordID, false otherwise.
    */
  virtual bool isEOB_RecordID() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by EOB_RecordID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EOB_RecordID.
    */
  virtual uci::type::EOB_RecordID_Type& chooseEOB_RecordID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ExternalIdentifier.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ExternalIdentifier.
    */
  virtual const uci::type::EntityExternalType& getExternalIdentifier() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ExternalIdentifier.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ExternalIdentifier.
    */
  virtual uci::type::EntityExternalType& getExternalIdentifier() = 0;

  /** Sets the complex content identified by ExternalIdentifier to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ExternalIdentifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntitySourceIdentifierType& setExternalIdentifier(const uci::type::EntityExternalType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ExternalIdentifier.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ExternalIdentifier, false
    *      otherwise.
    */
  virtual bool isExternalIdentifier() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ExternalIdentifier.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ExternalIdentifier.
    */
  virtual uci::type::EntityExternalType& chooseExternalIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the bounded list identified by Fusion.
    *
    * @return A const reference to the bounded list identified by Fusion.
    */
  virtual const uci::type::EntitySourceIdentifierType::Fusion& getFusion() const = 0;

  /** Returns a reference to the bounded list identified by Fusion.
    *
    * @return A reference to the bounded list identified by Fusion.
    */
  virtual uci::type::EntitySourceIdentifierType::Fusion& getFusion() = 0;

  /** Sets the bounded list identified by Fusion.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntitySourceIdentifierType& setFusion(const uci::type::EntitySourceIdentifierType::Fusion& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Fusion.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Fusion, false otherwise.
    */
  virtual bool isFusion() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Fusion.
    *
    * @return A reference to the accessor that provides access to the choice identified by Fusion.
    */
  virtual uci::type::EntitySourceIdentifierType::Fusion& chooseFusion() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * InternallyDerivedID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      InternallyDerivedID.
    */
  virtual const uci::type::ID_Type& getInternallyDerivedID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by InternallyDerivedID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by InternallyDerivedID.
    */
  virtual uci::type::ID_Type& getInternallyDerivedID() = 0;

  /** Sets the complex content identified by InternallyDerivedID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by InternallyDerivedID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntitySourceIdentifierType& setInternallyDerivedID(const uci::type::ID_Type& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by InternallyDerivedID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by InternallyDerivedID, false
    *      otherwise.
    */
  virtual bool isInternallyDerivedID() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by InternallyDerivedID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by InternallyDerivedID.
    */
  virtual uci::type::ID_Type& chooseInternallyDerivedID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Capability.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Capability.
    */
  virtual const uci::type::EntityCapabilitySourceType& getCapability() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Capability.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Capability.
    */
  virtual uci::type::EntityCapabilitySourceType& getCapability() = 0;

  /** Sets the complex content identified by Capability to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Capability.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntitySourceIdentifierType& setCapability(const uci::type::EntityCapabilitySourceType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Capability.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Capability, false otherwise.
    */
  virtual bool isCapability() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Capability.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Capability.
    */
  virtual uci::type::EntityCapabilitySourceType& chooseCapability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the bounded list identified by ProductMetadataID.
    *
    * @return A const reference to the bounded list identified by ProductMetadataID.
    */
  virtual const uci::type::EntitySourceIdentifierType::ProductMetadataID& getProductMetadataID() const = 0;

  /** Returns a reference to the bounded list identified by ProductMetadataID.
    *
    * @return A reference to the bounded list identified by ProductMetadataID.
    */
  virtual uci::type::EntitySourceIdentifierType::ProductMetadataID& getProductMetadataID() = 0;

  /** Sets the bounded list identified by ProductMetadataID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntitySourceIdentifierType& setProductMetadataID(const uci::type::EntitySourceIdentifierType::ProductMetadataID& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ProductMetadataID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ProductMetadataID, false
    *      otherwise.
    */
  virtual bool isProductMetadataID() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ProductMetadataID.
    *
    * @return A reference to the accessor that provides access to the choice identified by ProductMetadataID.
    */
  virtual uci::type::EntitySourceIdentifierType::ProductMetadataID& chooseProductMetadataID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OperatorID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OperatorID.
    */
  virtual const uci::type::OperatorID_Type& getOperatorID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OperatorID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OperatorID.
    */
  virtual uci::type::OperatorID_Type& getOperatorID() = 0;

  /** Sets the complex content identified by OperatorID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OperatorID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntitySourceIdentifierType& setOperatorID(const uci::type::OperatorID_Type& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OperatorID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OperatorID, false otherwise.
    */
  virtual bool isOperatorID() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by OperatorID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OperatorID.
    */
  virtual uci::type::OperatorID_Type& chooseOperatorID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SOB_SatelliteRecordID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SOB_SatelliteRecordID.
    */
  virtual const uci::type::SOB_SatelliteRecordID_Type& getSOB_SatelliteRecordID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SOB_SatelliteRecordID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SOB_SatelliteRecordID.
    */
  virtual uci::type::SOB_SatelliteRecordID_Type& getSOB_SatelliteRecordID() = 0;

  /** Sets the complex content identified by SOB_SatelliteRecordID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SOB_SatelliteRecordID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntitySourceIdentifierType& setSOB_SatelliteRecordID(const uci::type::SOB_SatelliteRecordID_Type& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SOB_SatelliteRecordID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SOB_SatelliteRecordID, false
    *      otherwise.
    */
  virtual bool isSOB_SatelliteRecordID() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SOB_SatelliteRecordID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SOB_SatelliteRecordID.
    */
  virtual uci::type::SOB_SatelliteRecordID_Type& chooseSOB_SatelliteRecordID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SOB_C2_RecordID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SOB_C2_RecordID.
    */
  virtual const uci::type::SOB_C2_RecordID_Type& getSOB_C2_RecordID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SOB_C2_RecordID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SOB_C2_RecordID.
    */
  virtual uci::type::SOB_C2_RecordID_Type& getSOB_C2_RecordID() = 0;

  /** Sets the complex content identified by SOB_C2_RecordID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SOB_C2_RecordID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntitySourceIdentifierType& setSOB_C2_RecordID(const uci::type::SOB_C2_RecordID_Type& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SOB_C2_RecordID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SOB_C2_RecordID, false
    *      otherwise.
    */
  virtual bool isSOB_C2_RecordID() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SOB_C2_RecordID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SOB_C2_RecordID.
    */
  virtual uci::type::SOB_C2_RecordID_Type& chooseSOB_C2_RecordID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  EntitySourceIdentifierType() {
  }

  /** The destructor [only available to derived classes]. */
  ~EntitySourceIdentifierType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The EntitySourceIdentifierType to copy from.
    */
  EntitySourceIdentifierType(const EntitySourceIdentifierType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this EntitySourceIdentifierType to the contents of the
    * EntitySourceIdentifierType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The EntitySourceIdentifierType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this EntitySourceIdentifierType.
    * @return A reference to this EntitySourceIdentifierType.
    */
  EntitySourceIdentifierType& operator=(const EntitySourceIdentifierType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ENTITYSOURCEIDENTIFIERTYPE_H

