/** @file CommCapabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMCAPABILITYTYPE_H
#define UCI_TYPE_COMMCAPABILITYTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CapabilityCommandRankingType.h"
#include "CapabilityID_Type.h"
#include "CommConnectionCommandEnum.h"
#include "CommControlType.h"
#include "CommLinkPortMapType.h"
#include "CommProfileID_Type.h"
#include "CommWaveformCapabilityCommandPET.h"
#include "CryptoLocationType.h"
#include "CryptoRolloverCommandType.h"
#include "LinkConnectionRequestType.h"
#include "NetworkLinkActionTypeEnum.h"
#include "NetworkLinkID_Type.h"
#include "SecurityInformationType.h"
#include "SubsystemID_Type.h"
#include "VerboseStatusType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class CommCapabilityType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CommCapabilityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommCapabilityType.
    */
  static UCI_EXPORT CommCapabilityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CommCapabilityType initializing the data accessed by the new CommCapabilityType using
    * the data accessed by the specified CommCapabilityType (cloning).
    *
    * @param accessor The CommCapabilityType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created CommCapabilityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommCapabilityType.
    */
  static UCI_EXPORT CommCapabilityType& create(const CommCapabilityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CommCapabilityType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The CommCapabilityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CommCapabilityType& accessor);

  /** Returns this accessor's type constant, i.e. commCapabilityType.
    *
    * @return This accessor's type constant, i.e. commCapabilityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commCapabilityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CommCapabilityType.
    *
    * @return The version that was initialized from the uci:version attribute of CommCapabilityType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CommCapabilityType& accessor) = 0;

  /** Indicates a Capability instance which the communication effectivity has been allocated to. [Occurrences: Minimum: 1;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CapabilityID_Type, uci::type::accessorType::capabilityID_Type> CapabilityID;

  /** Allows the Communication Planner to apply the key at a specified slot. Such as selecting the appropriate VINSON Key.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CryptoLocationType, uci::type::accessorType::cryptoLocationType> CryptoKey;

  /** Allows the Communication Planner to Zeroize crypto slots. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::CryptoLocationType, uci::type::accessorType::cryptoLocationType> CryptoZeroize;

  /** Indicates a command to change the connection status of the individual data links managed by the waveform. Generally,
    * a link's connection status must be CONNECTED for the waveform to transmit payload data over the communication medium
    * or for the waveform to receive transmissions from the communication medium. Note that this parameter is not available
    * until after a CommActivity is created and may not be available until the waveform has joined the network.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::LinkConnectionRequestType, uci::type::accessorType::linkConnectionRequestType> LinkConnectionRequest;

  /** Returns a const reference to the value of the enumeration identified by Action.
    *
    * @return A const reference to the value of the enumeration identified by Action.
    */
  virtual const uci::type::NetworkLinkActionTypeEnum& getAction() const = 0;

  /** Returns a reference to the value of the enumeration identified by Action.
    *
    * @return A reference to the value of the enumeration identified by Action.
    */
  virtual uci::type::NetworkLinkActionTypeEnum& getAction() = 0;

  /** Sets the value of the enumeration identified by Action.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setAction(const uci::type::NetworkLinkActionTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by Action.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setAction(uci::type::NetworkLinkActionTypeEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by CapabilityID.
    *
    * @return A const reference to the bounded list identified by CapabilityID.
    */
  virtual const uci::type::CommCapabilityType::CapabilityID& getCapabilityID() const = 0;

  /** Returns a reference to the bounded list identified by CapabilityID.
    *
    * @return A reference to the bounded list identified by CapabilityID.
    */
  virtual uci::type::CommCapabilityType::CapabilityID& getCapabilityID() = 0;

  /** Sets the bounded list identified by CapabilityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setCapabilityID(const uci::type::CommCapabilityType::CapabilityID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SubsystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SubsystemID.
    */
  virtual const uci::type::SubsystemID_Type& getSubsystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SubsystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SubsystemID.
    */
  virtual uci::type::SubsystemID_Type& getSubsystemID() = 0;

  /** Sets the complex content identified by SubsystemID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SubsystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setSubsystemID(const uci::type::SubsystemID_Type& value) = 0;

  /** Returns whether the Element identified by SubsystemID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SubsystemID is enabled or not.
    */
  virtual bool hasSubsystemID() const = 0;

  /** Enables the Element identified by SubsystemID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SubsystemID.
    */
  virtual uci::type::SubsystemID_Type& enableSubsystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SubsystemID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& clearSubsystemID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Ranking.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Ranking.
    */
  virtual const uci::type::CapabilityCommandRankingType& getRanking() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Ranking.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Ranking.
    */
  virtual uci::type::CapabilityCommandRankingType& getRanking() = 0;

  /** Sets the complex content identified by Ranking to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Ranking.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setRanking(const uci::type::CapabilityCommandRankingType& value) = 0;

  /** Returns whether the Element identified by Ranking exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Ranking is enabled or not.
    */
  virtual bool hasRanking() const = 0;

  /** Enables the Element identified by Ranking.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Ranking.
    */
  virtual uci::type::CapabilityCommandRankingType& enableRanking(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Ranking.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& clearRanking() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Classification.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Classification.
    */
  virtual const uci::type::SecurityInformationType& getClassification() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Classification.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Classification.
    */
  virtual uci::type::SecurityInformationType& getClassification() = 0;

  /** Sets the complex content identified by Classification to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Classification.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setClassification(const uci::type::SecurityInformationType& value) = 0;

  /** Returns whether the Element identified by Classification exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Classification is enabled or not.
    */
  virtual bool hasClassification() const = 0;

  /** Enables the Element identified by Classification.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Classification.
    */
  virtual uci::type::SecurityInformationType& enableClassification(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Classification.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& clearClassification() = 0;

  /** Returns a const reference to the value of the enumeration identified by ConnectionRequest.
    *
    * @return A const reference to the value of the enumeration identified by ConnectionRequest.
    */
  virtual const uci::type::CommConnectionCommandEnum& getConnectionRequest() const = 0;

  /** Returns a reference to the value of the enumeration identified by ConnectionRequest.
    *
    * @return A reference to the value of the enumeration identified by ConnectionRequest.
    */
  virtual uci::type::CommConnectionCommandEnum& getConnectionRequest() = 0;

  /** Sets the value of the enumeration identified by ConnectionRequest.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setConnectionRequest(const uci::type::CommConnectionCommandEnum& value) = 0;

  /** Sets the value of the enumeration identified by ConnectionRequest.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setConnectionRequest(uci::type::CommConnectionCommandEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ConnectionRequest exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConnectionRequest is enabled or not.
    */
  virtual bool hasConnectionRequest() const = 0;

  /** Enables the Element identified by ConnectionRequest.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ConnectionRequest.
    */
  virtual uci::type::CommConnectionCommandEnum& enableConnectionRequest(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ConnectionRequest.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& clearConnectionRequest() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ActivateProfileID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ActivateProfileID.
    */
  virtual const uci::type::CommProfileID_Type& getActivateProfileID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActivateProfileID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActivateProfileID.
    */
  virtual uci::type::CommProfileID_Type& getActivateProfileID() = 0;

  /** Sets the complex content identified by ActivateProfileID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivateProfileID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setActivateProfileID(const uci::type::CommProfileID_Type& value) = 0;

  /** Returns whether the Element identified by ActivateProfileID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActivateProfileID is enabled or not.
    */
  virtual bool hasActivateProfileID() const = 0;

  /** Enables the Element identified by ActivateProfileID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActivateProfileID.
    */
  virtual uci::type::CommProfileID_Type& enableActivateProfileID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActivateProfileID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& clearActivateProfileID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by NetworkLinkID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by NetworkLinkID.
    */
  virtual const uci::type::NetworkLinkID_Type& getNetworkLinkID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by NetworkLinkID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by NetworkLinkID.
    */
  virtual uci::type::NetworkLinkID_Type& getNetworkLinkID() = 0;

  /** Sets the complex content identified by NetworkLinkID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by NetworkLinkID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setNetworkLinkID(const uci::type::NetworkLinkID_Type& value) = 0;

  /** Returns whether the Element identified by NetworkLinkID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NetworkLinkID is enabled or not.
    */
  virtual bool hasNetworkLinkID() const = 0;

  /** Enables the Element identified by NetworkLinkID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by NetworkLinkID.
    */
  virtual uci::type::NetworkLinkID_Type& enableNetworkLinkID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by NetworkLinkID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& clearNetworkLinkID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CommonSettings.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CommonSettings.
    */
  virtual const uci::type::CommControlType& getCommonSettings() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CommonSettings.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CommonSettings.
    */
  virtual uci::type::CommControlType& getCommonSettings() = 0;

  /** Sets the complex content identified by CommonSettings to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CommonSettings.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setCommonSettings(const uci::type::CommControlType& value) = 0;

  /** Returns whether the Element identified by CommonSettings exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CommonSettings is enabled or not.
    */
  virtual bool hasCommonSettings() const = 0;

  /** Enables the Element identified by CommonSettings.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CommonSettings.
    */
  virtual uci::type::CommControlType& enableCommonSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CommonSettings.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& clearCommonSettings() = 0;

  /** Returns a const reference to the bounded list identified by CryptoKey.
    *
    * @return A const reference to the bounded list identified by CryptoKey.
    */
  virtual const uci::type::CommCapabilityType::CryptoKey& getCryptoKey() const = 0;

  /** Returns a reference to the bounded list identified by CryptoKey.
    *
    * @return A reference to the bounded list identified by CryptoKey.
    */
  virtual uci::type::CommCapabilityType::CryptoKey& getCryptoKey() = 0;

  /** Sets the bounded list identified by CryptoKey.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setCryptoKey(const uci::type::CommCapabilityType::CryptoKey& value) = 0;

  /** Returns a const reference to the bounded list identified by CryptoZeroize.
    *
    * @return A const reference to the bounded list identified by CryptoZeroize.
    */
  virtual const uci::type::CommCapabilityType::CryptoZeroize& getCryptoZeroize() const = 0;

  /** Returns a reference to the bounded list identified by CryptoZeroize.
    *
    * @return A reference to the bounded list identified by CryptoZeroize.
    */
  virtual uci::type::CommCapabilityType::CryptoZeroize& getCryptoZeroize() = 0;

  /** Sets the bounded list identified by CryptoZeroize.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setCryptoZeroize(const uci::type::CommCapabilityType::CryptoZeroize& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CryptoRollover.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CryptoRollover.
    */
  virtual const uci::type::CryptoRolloverCommandType& getCryptoRollover() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CryptoRollover.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CryptoRollover.
    */
  virtual uci::type::CryptoRolloverCommandType& getCryptoRollover() = 0;

  /** Sets the complex content identified by CryptoRollover to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CryptoRollover.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setCryptoRollover(const uci::type::CryptoRolloverCommandType& value) = 0;

  /** Returns whether the Element identified by CryptoRollover exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CryptoRollover is enabled or not.
    */
  virtual bool hasCryptoRollover() const = 0;

  /** Enables the Element identified by CryptoRollover.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CryptoRollover.
    */
  virtual uci::type::CryptoRolloverCommandType& enableCryptoRollover(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CryptoRollover.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& clearCryptoRollover() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * LinkPortAssignments.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      LinkPortAssignments.
    */
  virtual const uci::type::CommLinkPortMapType& getLinkPortAssignments() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LinkPortAssignments.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LinkPortAssignments.
    */
  virtual uci::type::CommLinkPortMapType& getLinkPortAssignments() = 0;

  /** Sets the complex content identified by LinkPortAssignments to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LinkPortAssignments.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setLinkPortAssignments(const uci::type::CommLinkPortMapType& value) = 0;

  /** Returns whether the Element identified by LinkPortAssignments exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LinkPortAssignments is enabled or not.
    */
  virtual bool hasLinkPortAssignments() const = 0;

  /** Enables the Element identified by LinkPortAssignments.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by LinkPortAssignments.
    */
  virtual uci::type::CommLinkPortMapType& enableLinkPortAssignments(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LinkPortAssignments.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& clearLinkPortAssignments() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by VerboseStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by VerboseStatus.
    */
  virtual const uci::type::VerboseStatusType& getVerboseStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by VerboseStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by VerboseStatus.
    */
  virtual uci::type::VerboseStatusType& getVerboseStatus() = 0;

  /** Sets the complex content identified by VerboseStatus to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by VerboseStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setVerboseStatus(const uci::type::VerboseStatusType& value) = 0;

  /** Returns whether the Element identified by VerboseStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VerboseStatus is enabled or not.
    */
  virtual bool hasVerboseStatus() const = 0;

  /** Enables the Element identified by VerboseStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by VerboseStatus.
    */
  virtual uci::type::VerboseStatusType& enableVerboseStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VerboseStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& clearVerboseStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * WaveformSpecificSettings.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      WaveformSpecificSettings.
    */
  virtual const uci::type::CommWaveformCapabilityCommandPET& getWaveformSpecificSettings() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * WaveformSpecificSettings.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      WaveformSpecificSettings.
    */
  virtual uci::type::CommWaveformCapabilityCommandPET& getWaveformSpecificSettings() = 0;

  /** Sets the complex content identified by WaveformSpecificSettings to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by WaveformSpecificSettings.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setWaveformSpecificSettings(const uci::type::CommWaveformCapabilityCommandPET& value) = 0;

  /** Returns whether the Element identified by WaveformSpecificSettings exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WaveformSpecificSettings is enabled or not.
    */
  virtual bool hasWaveformSpecificSettings() const = 0;

  /** Enables the Element identified by WaveformSpecificSettings.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      WaveformSpecificSettings.
    */
  virtual uci::type::CommWaveformCapabilityCommandPET& enableWaveformSpecificSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by WaveformSpecificSettings.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& clearWaveformSpecificSettings() = 0;

  /** Returns a const reference to the bounded list identified by LinkConnectionRequest.
    *
    * @return A const reference to the bounded list identified by LinkConnectionRequest.
    */
  virtual const uci::type::CommCapabilityType::LinkConnectionRequest& getLinkConnectionRequest() const = 0;

  /** Returns a reference to the bounded list identified by LinkConnectionRequest.
    *
    * @return A reference to the bounded list identified by LinkConnectionRequest.
    */
  virtual uci::type::CommCapabilityType::LinkConnectionRequest& getLinkConnectionRequest() = 0;

  /** Sets the bounded list identified by LinkConnectionRequest.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommCapabilityType& setLinkConnectionRequest(const uci::type::CommCapabilityType::LinkConnectionRequest& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CommCapabilityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommCapabilityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommCapabilityType to copy from.
    */
  CommCapabilityType(const CommCapabilityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CommCapabilityType to the contents of the CommCapabilityType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CommCapabilityType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this CommCapabilityType.
    * @return A reference to this CommCapabilityType.
    */
  CommCapabilityType& operator=(const CommCapabilityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMMCAPABILITYTYPE_H

