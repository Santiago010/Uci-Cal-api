/** @file SMTI_CollectionConstraintsQualityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SMTI_COLLECTIONCONSTRAINTSQUALITYTYPE_H
#define UCI_TYPE_SMTI_COLLECTIONCONSTRAINTSQUALITYTYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "DistanceType.h"
#include "NIIRS_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SMTI_CollectionConstraintsQualityType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SMTI_CollectionConstraintsQualityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SMTI_CollectionConstraintsQualityType.
    */
  static UCI_EXPORT SMTI_CollectionConstraintsQualityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SMTI_CollectionConstraintsQualityType initializing the data accessed by the new
    * SMTI_CollectionConstraintsQualityType using the data accessed by the specified SMTI_CollectionConstraintsQualityType
    * (cloning).
    *
    * @param accessor The SMTI_CollectionConstraintsQualityType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created SMTI_CollectionConstraintsQualityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SMTI_CollectionConstraintsQualityType.
    */
  static UCI_EXPORT SMTI_CollectionConstraintsQualityType& create(const SMTI_CollectionConstraintsQualityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SMTI_CollectionConstraintsQualityType. Use of the specified accessor after it has
    * been destroyed will result in undefined behavior.
    *
    * @param accessor The SMTI_CollectionConstraintsQualityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SMTI_CollectionConstraintsQualityType& accessor);

  /** Returns this accessor's type constant, i.e. sMTI_CollectionConstraintsQualityType.
    *
    * @return This accessor's type constant, i.e. sMTI_CollectionConstraintsQualityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sMTI_CollectionConstraintsQualityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SMTI_CollectionConstraintsQualityType.
    *
    * @return The version that was initialized from the uci:version attribute of SMTI_CollectionConstraintsQualityType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SMTI_CollectionConstraintsQualityType& accessor) = 0;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum SMTI_CollectionConstraintsQualityTypeChoice {
    SMTI_COLLECTIONCONSTRAINTSQUALITYTYPE_CHOICE_NONE,
    SMTI_COLLECTIONCONSTRAINTSQUALITYTYPE_CHOICE_MTIIRS,
    SMTI_COLLECTIONCONSTRAINTSQUALITYTYPE_CHOICE_CIRCULARERRORPROBABLE90
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual SMTI_CollectionConstraintsQualityTypeChoice getSMTI_CollectionConstraintsQualityTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getSMTI_CollectionConstraintsQualityTypeChoiceOrdinal() will be the ordinal specified when this method was invoked.
    * In addition, the access methods associated with the chosen element will be enabled and will provide access to the
    * chosen element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsQualityType& setSMTI_CollectionConstraintsQualityTypeChoiceOrdinal(SMTI_CollectionConstraintsQualityTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by MTIIRS.
    *
    * @return A const reference to the accessor that provides access to the string identified by MTIIRS.
    */
  virtual const uci::type::NIIRS_Type& getMTIIRS() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by MTIIRS.
    *
    * @return A reference to the accessor that provides access to the string identified by MTIIRS.
    */
  virtual uci::type::NIIRS_Type& getMTIIRS() = 0;

  /** Sets the string identified by MTIIRS to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by MTIIRS.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsQualityType& setMTIIRS(const uci::type::NIIRS_Type& value) = 0;

  /** Sets the string identified by MTIIRS to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsQualityType& setMTIIRS(const std::string& value) = 0;

  /** Sets the string identified by MTIIRS to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsQualityType& setMTIIRS(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by MTIIRS.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by MTIIRS, false otherwise.
    */
  virtual bool isMTIIRS() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by MTIIRS.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by MTIIRS.
    */
  virtual uci::type::NIIRS_Type& chooseMTIIRS(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns the value of the SimplePrimitive data type identified by CircularErrorProbable90.
    *
    * @return The value of the simple primitive data type identified by CircularErrorProbable90.
    */
  virtual uci::type::DistanceTypeValue getCircularErrorProbable90() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CircularErrorProbable90.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsQualityType& setCircularErrorProbable90(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CircularErrorProbable90.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CircularErrorProbable90, false
    *      otherwise.
    */
  virtual bool isCircularErrorProbable90() const = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SMTI_CollectionConstraintsQualityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SMTI_CollectionConstraintsQualityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SMTI_CollectionConstraintsQualityType to copy from.
    */
  SMTI_CollectionConstraintsQualityType(const SMTI_CollectionConstraintsQualityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SMTI_CollectionConstraintsQualityType to the contents of the
    * SMTI_CollectionConstraintsQualityType on the right hand side (rhs) of the assignment operator [only available to
    * derived classes].
    *
    * @param rhs The SMTI_CollectionConstraintsQualityType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this SMTI_CollectionConstraintsQualityType.
    * @return A reference to this SMTI_CollectionConstraintsQualityType.
    */
  SMTI_CollectionConstraintsQualityType& operator=(const SMTI_CollectionConstraintsQualityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SMTI_COLLECTIONCONSTRAINTSQUALITYTYPE_H

