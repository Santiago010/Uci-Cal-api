/** @file MvObservationType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_MVOBSERVATIONTYPE_H
#define UCI_TYPE_MVOBSERVATIONTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AngleType.h"
#include "DateTimeType.h"
#include "EntityID_Type.h"
#include "KinematicsChoiceType.h"
#include "ObservationMeasurementID_Type.h"
#include "PercentType.h"
#include "VisualMagnitudeType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class MvObservationType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new MvObservationType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MvObservationType.
    */
  static UCI_EXPORT MvObservationType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new MvObservationType initializing the data accessed by the new MvObservationType using the
    * data accessed by the specified MvObservationType (cloning).
    *
    * @param accessor The MvObservationType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created MvObservationType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MvObservationType.
    */
  static UCI_EXPORT MvObservationType& create(const MvObservationType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified MvObservationType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The MvObservationType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(MvObservationType& accessor);

  /** Returns this accessor's type constant, i.e. mvObservationType.
    *
    * @return This accessor's type constant, i.e. mvObservationType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::mvObservationType;
  }

  /** Returns the version that was initialized from the uci:version attribute of MvObservationType.
    *
    * @return The version that was initialized from the uci:version attribute of MvObservationType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const MvObservationType& accessor) = 0;

  /** Indicates observation ID or IDs for possible associations (e.g. with ObservationMeasurementReports) to indicate which
    * observations were analyzed to determine the anomaly. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ObservationMeasurementID_Type, uci::type::accessorType::observationMeasurementID_Type> ObservationMeasurementID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EntityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EntityID.
    */
  virtual const uci::type::EntityID_Type& getEntityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EntityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EntityID.
    */
  virtual uci::type::EntityID_Type& getEntityID() = 0;

  /** Sets the complex content identified by EntityID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EntityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MvObservationType& setEntityID(const uci::type::EntityID_Type& value) = 0;

  /** Enables the Element identified by EntityID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return A reference to the accessor that provides access to the complex content identified by EntityID.
    */
  virtual uci::type::EntityID_Type& enableEntityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ObservationTime.
    *
    * @return The value of the simple primitive data type identified by ObservationTime.
    */
  virtual uci::type::DateTimeTypeValue getObservationTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ObservationTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MvObservationType& setObservationTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the bounded list identified by ObservationMeasurementID.
    *
    * @return A const reference to the bounded list identified by ObservationMeasurementID.
    */
  virtual const uci::type::MvObservationType::ObservationMeasurementID& getObservationMeasurementID() const = 0;

  /** Returns a reference to the bounded list identified by ObservationMeasurementID.
    *
    * @return A reference to the bounded list identified by ObservationMeasurementID.
    */
  virtual uci::type::MvObservationType::ObservationMeasurementID& getObservationMeasurementID() = 0;

  /** Sets the bounded list identified by ObservationMeasurementID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MvObservationType& setObservationMeasurementID(const uci::type::MvObservationType::ObservationMeasurementID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SensorLocation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SensorLocation.
    */
  virtual const uci::type::KinematicsChoiceType& getSensorLocation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SensorLocation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SensorLocation.
    */
  virtual uci::type::KinematicsChoiceType& getSensorLocation() = 0;

  /** Sets the complex content identified by SensorLocation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SensorLocation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MvObservationType& setSensorLocation(const uci::type::KinematicsChoiceType& value) = 0;

  /** Returns whether the Element identified by SensorLocation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SensorLocation is enabled or not.
    */
  virtual bool hasSensorLocation() const = 0;

  /** Enables the Element identified by SensorLocation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SensorLocation.
    */
  virtual uci::type::KinematicsChoiceType& enableSensorLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SensorLocation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MvObservationType& clearSensorLocation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by VisualMagnitude.
    *
    * @return The value of the simple primitive data type identified by VisualMagnitude.
    */
  virtual uci::type::VisualMagnitudeTypeValue getVisualMagnitude() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by VisualMagnitude.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MvObservationType& setVisualMagnitude(uci::type::VisualMagnitudeTypeValue value) = 0;

  /** Returns whether the Element identified by VisualMagnitude exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VisualMagnitude is enabled or not.
    */
  virtual bool hasVisualMagnitude() const = 0;

  /** Clears (disabled) the Element identified by VisualMagnitude.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MvObservationType& clearVisualMagnitude() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RightAscension.
    *
    * @return The value of the simple primitive data type identified by RightAscension.
    */
  virtual uci::type::AngleTypeValue getRightAscension() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RightAscension.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MvObservationType& setRightAscension(uci::type::AngleTypeValue value) = 0;

  /** Returns whether the Element identified by RightAscension exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RightAscension is enabled or not.
    */
  virtual bool hasRightAscension() const = 0;

  /** Clears (disabled) the Element identified by RightAscension.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MvObservationType& clearRightAscension() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Declination.
    *
    * @return The value of the simple primitive data type identified by Declination.
    */
  virtual uci::type::AngleTypeValue getDeclination() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Declination.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MvObservationType& setDeclination(uci::type::AngleTypeValue value) = 0;

  /** Returns whether the Element identified by Declination exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Declination is enabled or not.
    */
  virtual bool hasDeclination() const = 0;

  /** Clears (disabled) the Element identified by Declination.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MvObservationType& clearDeclination() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Probability.
    *
    * @return The value of the simple primitive data type identified by Probability.
    */
  virtual uci::type::PercentTypeValue getProbability() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Probability.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MvObservationType& setProbability(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by Probability exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Probability is enabled or not.
    */
  virtual bool hasProbability() const = 0;

  /** Clears (disabled) the Element identified by Probability.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MvObservationType& clearProbability() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  MvObservationType() {
  }

  /** The destructor [only available to derived classes]. */
  ~MvObservationType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The MvObservationType to copy from.
    */
  MvObservationType(const MvObservationType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this MvObservationType to the contents of the MvObservationType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The MvObservationType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this MvObservationType.
    * @return A reference to this MvObservationType.
    */
  MvObservationType& operator=(const MvObservationType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_MVOBSERVATIONTYPE_H

