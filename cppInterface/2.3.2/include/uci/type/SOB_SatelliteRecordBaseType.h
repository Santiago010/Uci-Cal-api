/** @file SOB_SatelliteRecordBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SOB_SATELLITERECORDBASETYPE_H
#define UCI_TYPE_SOB_SATELLITERECORDBASETYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/EOB_RecordID_Type.h"
#include "uci/type/FileMetadataID_Type.h"
#include "uci/type/LaunchObservationID_Type.h"
#include "uci/type/LaunchStaticDetailsType.h"
#include "uci/type/MassType.h"
#include "uci/type/OB_OperationalStatusEnum.h"
#include "uci/type/OrbitKinematicsParametersType.h"
#include "uci/type/OrbitRegimeType.h"
#include "uci/type/OrderOfBattleEmitterType.h"
#include "uci/type/OrderOfBattleTimestampsType.h"
#include "uci/type/ProductMetadataID_Type.h"
#include "uci/type/SOB_EquipmentType.h"
#include "uci/type/SOB_SatelliteRecordID_Type.h"
#include "uci/type/SOB_SatelliteRecordRemoveInfoType.h"
#include "uci/type/SatelliteCharacteristicsOverrideType.h"
#include "uci/type/SatelliteEnduranceType.h"
#include "uci/type/SatelliteIdentityType.h"
#include "uci/type/VisibleString1024Type.h"
#include "uci/type/VisibleString512Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Contains satellite or launch vehicle information similar to a space catalog record. */
class SOB_SatelliteRecordBaseType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SOB_SatelliteRecordBaseType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SOB_SatelliteRecordBaseType.
    */
  static UCI_EXPORT SOB_SatelliteRecordBaseType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SOB_SatelliteRecordBaseType initializing the data accessed by the new
    * SOB_SatelliteRecordBaseType using the data accessed by the specified SOB_SatelliteRecordBaseType (cloning).
    *
    * @param accessor The SOB_SatelliteRecordBaseType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created SOB_SatelliteRecordBaseType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SOB_SatelliteRecordBaseType.
    */
  static UCI_EXPORT SOB_SatelliteRecordBaseType& create(const SOB_SatelliteRecordBaseType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SOB_SatelliteRecordBaseType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The SOB_SatelliteRecordBaseType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SOB_SatelliteRecordBaseType& accessor);

  /** Returns this accessor's type constant, i.e. sOB_SatelliteRecordBaseType.
    *
    * @return This accessor's type constant, i.e. sOB_SatelliteRecordBaseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sOB_SatelliteRecordBaseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SOB_SatelliteRecordBaseType.
    *
    * @return The version that was initialized from the uci:version attribute of SOB_SatelliteRecordBaseType.
    */
  static std::string getUCITypeVersion() {
    return "003.002.003.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SOB_SatelliteRecordBaseType& accessor) = 0;

  /** Describes the pieces of equipment on the satellite, or the eqiupment that make up the launch vehicle. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SOB_EquipmentType, uci::type::accessorType::sOB_EquipmentType> Equipment;

  /** Degree to which the item is ready to perform the overall mission. Default value is 'OPR'. List size for this element
    * is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 24]
    */
  typedef uci::base::BoundedList<uci::type::OB_OperationalStatusEnum, uci::type::accessorType::oB_OperationalStatusEnum> OperationalStatus;

  /** Specifies satellite records associated with this SOB Satellite Record. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::SOB_SatelliteRecordID_Type, uci::type::accessorType::sOB_SatelliteRecordID_Type> RelatedSatelliteRecordID;

  /** A reference to metadata for a product associated with the record. For example, an image of the satellite collected by
    * a tactical sensor. Products meant to convey generally static physical or performance characteristics should be given
    * in the sibling Characteristics element. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type> ProductID;

  /** A reference to metadata for a file associated with the record. Files meant to convey generally static physical or
    * performance characteristics should be given in the sibling Characteristics element. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> FileID;

  /** Indicates modes and parametrics of an emitter associated with the record. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OrderOfBattleEmitterType, uci::type::accessorType::orderOfBattleEmitterType> Emitter;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SOB_SatelliteRecordID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SOB_SatelliteRecordID.
    */
  virtual const uci::type::SOB_SatelliteRecordID_Type& getSOB_SatelliteRecordID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SOB_SatelliteRecordID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SOB_SatelliteRecordID.
    */
  virtual uci::type::SOB_SatelliteRecordID_Type& getSOB_SatelliteRecordID() = 0;

  /** Sets the complex content identified by SOB_SatelliteRecordID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SOB_SatelliteRecordID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setSOB_SatelliteRecordID(const uci::type::SOB_SatelliteRecordID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EOB_RecordID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EOB_RecordID.
    */
  virtual const uci::type::EOB_RecordID_Type& getEOB_RecordID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EOB_RecordID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EOB_RecordID.
    */
  virtual uci::type::EOB_RecordID_Type& getEOB_RecordID() = 0;

  /** Sets the complex content identified by EOB_RecordID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EOB_RecordID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setEOB_RecordID(const uci::type::EOB_RecordID_Type& value) = 0;

  /** Returns whether the Element identified by EOB_RecordID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EOB_RecordID is enabled or not.
    */
  virtual bool hasEOB_RecordID() const = 0;

  /** Enables the Element identified by EOB_RecordID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EOB_RecordID.
    */
  virtual uci::type::EOB_RecordID_Type& enableEOB_RecordID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EOB_RecordID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& clearEOB_RecordID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual const uci::type::SatelliteIdentityType& getIdentity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::SatelliteIdentityType& getIdentity() = 0;

  /** Sets the complex content identified by Identity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Identity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setIdentity(const uci::type::SatelliteIdentityType& value) = 0;

  /** Returns whether the Element identified by Identity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Identity is enabled or not.
    */
  virtual bool hasIdentity() const = 0;

  /** Enables the Element identified by Identity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::SatelliteIdentityType& enableIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Identity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& clearIdentity() = 0;

  /** Returns a const reference to the bounded list identified by Equipment.
    *
    * @return A const reference to the bounded list identified by Equipment.
    */
  virtual const uci::type::SOB_SatelliteRecordBaseType::Equipment& getEquipment() const = 0;

  /** Returns a reference to the bounded list identified by Equipment.
    *
    * @return A reference to the bounded list identified by Equipment.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType::Equipment& getEquipment() = 0;

  /** Sets the bounded list identified by Equipment.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setEquipment(const uci::type::SOB_SatelliteRecordBaseType::Equipment& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Orbit.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Orbit.
    */
  virtual const uci::type::OrbitRegimeType& getOrbit() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Orbit.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Orbit.
    */
  virtual uci::type::OrbitRegimeType& getOrbit() = 0;

  /** Sets the complex content identified by Orbit to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Orbit.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setOrbit(const uci::type::OrbitRegimeType& value) = 0;

  /** Returns whether the Element identified by Orbit exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Orbit is enabled or not.
    */
  virtual bool hasOrbit() const = 0;

  /** Enables the Element identified by Orbit.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Orbit.
    */
  virtual uci::type::OrbitRegimeType& enableOrbit(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Orbit.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& clearOrbit() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Timestamps.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Timestamps.
    */
  virtual const uci::type::OrderOfBattleTimestampsType& getTimestamps() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Timestamps.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Timestamps.
    */
  virtual uci::type::OrderOfBattleTimestampsType& getTimestamps() = 0;

  /** Sets the complex content identified by Timestamps to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Timestamps.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setTimestamps(const uci::type::OrderOfBattleTimestampsType& value) = 0;

  /** Returns whether the Element identified by Timestamps exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Timestamps is enabled or not.
    */
  virtual bool hasTimestamps() const = 0;

  /** Enables the Element identified by Timestamps.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Timestamps.
    */
  virtual uci::type::OrderOfBattleTimestampsType& enableTimestamps(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Timestamps.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& clearTimestamps() = 0;

  /** Returns the value of the SimplePrimitive data type identified by DecayDate.
    *
    * @return The value of the simple primitive data type identified by DecayDate.
    */
  virtual uci::type::DateTimeTypeValue getDecayDate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DecayDate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setDecayDate(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by DecayDate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DecayDate is enabled or not.
    */
  virtual bool hasDecayDate() const = 0;

  /** Clears (disabled) the Element identified by DecayDate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& clearDecayDate() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RelatedLaunchObservationID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RelatedLaunchObservationID.
    */
  virtual const uci::type::LaunchObservationID_Type& getRelatedLaunchObservationID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * RelatedLaunchObservationID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      RelatedLaunchObservationID.
    */
  virtual uci::type::LaunchObservationID_Type& getRelatedLaunchObservationID() = 0;

  /** Sets the complex content identified by RelatedLaunchObservationID to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RelatedLaunchObservationID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setRelatedLaunchObservationID(const uci::type::LaunchObservationID_Type& value) = 0;

  /** Returns whether the Element identified by RelatedLaunchObservationID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RelatedLaunchObservationID is enabled or not.
    */
  virtual bool hasRelatedLaunchObservationID() const = 0;

  /** Enables the Element identified by RelatedLaunchObservationID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      RelatedLaunchObservationID.
    */
  virtual uci::type::LaunchObservationID_Type& enableRelatedLaunchObservationID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RelatedLaunchObservationID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& clearRelatedLaunchObservationID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * HistoricalLaunchData.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      HistoricalLaunchData.
    */
  virtual const uci::type::LaunchStaticDetailsType& getHistoricalLaunchData() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by HistoricalLaunchData.
    *
    * @return A reference to the accessor that provides access to the complex content identified by HistoricalLaunchData.
    */
  virtual uci::type::LaunchStaticDetailsType& getHistoricalLaunchData() = 0;

  /** Sets the complex content identified by HistoricalLaunchData to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by HistoricalLaunchData.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setHistoricalLaunchData(const uci::type::LaunchStaticDetailsType& value) = 0;

  /** Returns whether the Element identified by HistoricalLaunchData exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by HistoricalLaunchData is enabled or not.
    */
  virtual bool hasHistoricalLaunchData() const = 0;

  /** Enables the Element identified by HistoricalLaunchData.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by HistoricalLaunchData.
    */
  virtual uci::type::LaunchStaticDetailsType& enableHistoricalLaunchData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by HistoricalLaunchData.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& clearHistoricalLaunchData() = 0;

  /** Returns a const reference to the bounded list identified by OperationalStatus.
    *
    * @return A const reference to the bounded list identified by OperationalStatus.
    */
  virtual const uci::type::SOB_SatelliteRecordBaseType::OperationalStatus& getOperationalStatus() const = 0;

  /** Returns a reference to the bounded list identified by OperationalStatus.
    *
    * @return A reference to the bounded list identified by OperationalStatus.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType::OperationalStatus& getOperationalStatus() = 0;

  /** Sets the bounded list identified by OperationalStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setOperationalStatus(const uci::type::SOB_SatelliteRecordBaseType::OperationalStatus& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Kinematics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Kinematics.
    */
  virtual const uci::type::OrbitKinematicsParametersType& getKinematics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Kinematics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Kinematics.
    */
  virtual uci::type::OrbitKinematicsParametersType& getKinematics() = 0;

  /** Sets the complex content identified by Kinematics to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Kinematics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setKinematics(const uci::type::OrbitKinematicsParametersType& value) = 0;

  /** Returns whether the Element identified by Kinematics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Kinematics is enabled or not.
    */
  virtual bool hasKinematics() const = 0;

  /** Enables the Element identified by Kinematics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Kinematics.
    */
  virtual uci::type::OrbitKinematicsParametersType& enableKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Kinematics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& clearKinematics() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Mass.
    *
    * @return The value of the simple primitive data type identified by Mass.
    */
  virtual uci::type::MassTypeValue getMass() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Mass.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setMass(uci::type::MassTypeValue value) = 0;

  /** Returns whether the Element identified by Mass exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mass is enabled or not.
    */
  virtual bool hasMass() const = 0;

  /** Clears (disabled) the Element identified by Mass.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& clearMass() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Endurance.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Endurance.
    */
  virtual const uci::type::SatelliteEnduranceType& getEndurance() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Endurance.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Endurance.
    */
  virtual uci::type::SatelliteEnduranceType& getEndurance() = 0;

  /** Sets the complex content identified by Endurance to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Endurance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setEndurance(const uci::type::SatelliteEnduranceType& value) = 0;

  /** Returns whether the Element identified by Endurance exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Endurance is enabled or not.
    */
  virtual bool hasEndurance() const = 0;

  /** Enables the Element identified by Endurance.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Endurance.
    */
  virtual uci::type::SatelliteEnduranceType& enableEndurance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Endurance.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& clearEndurance() = 0;

  /** Returns a const reference to the bounded list identified by RelatedSatelliteRecordID.
    *
    * @return A const reference to the bounded list identified by RelatedSatelliteRecordID.
    */
  virtual const uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID& getRelatedSatelliteRecordID() const = 0;

  /** Returns a reference to the bounded list identified by RelatedSatelliteRecordID.
    *
    * @return A reference to the bounded list identified by RelatedSatelliteRecordID.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID& getRelatedSatelliteRecordID() = 0;

  /** Sets the bounded list identified by RelatedSatelliteRecordID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setRelatedSatelliteRecordID(const uci::type::SOB_SatelliteRecordBaseType::RelatedSatelliteRecordID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by PatternOfLife.
    *
    * @return A const reference to the accessor that provides access to the string identified by PatternOfLife.
    */
  virtual const uci::type::VisibleString1024Type& getPatternOfLife() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by PatternOfLife.
    *
    * @return A reference to the accessor that provides access to the string identified by PatternOfLife.
    */
  virtual uci::type::VisibleString1024Type& getPatternOfLife() = 0;

  /** Sets the string identified by PatternOfLife to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by PatternOfLife.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setPatternOfLife(const uci::type::VisibleString1024Type& value) = 0;

  /** Sets the string identified by PatternOfLife to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setPatternOfLife(const std::string& value) = 0;

  /** Sets the string identified by PatternOfLife to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setPatternOfLife(const char* value) = 0;

  /** Returns whether the Element identified by PatternOfLife exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PatternOfLife is enabled or not.
    */
  virtual bool hasPatternOfLife() const = 0;

  /** Enables the Element identified by PatternOfLife.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by PatternOfLife.
    */
  virtual uci::type::VisibleString1024Type& enablePatternOfLife(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PatternOfLife.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& clearPatternOfLife() = 0;

  /** Returns a const reference to the bounded list identified by ProductID.
    *
    * @return A const reference to the bounded list identified by ProductID.
    */
  virtual const uci::type::SOB_SatelliteRecordBaseType::ProductID& getProductID() const = 0;

  /** Returns a reference to the bounded list identified by ProductID.
    *
    * @return A reference to the bounded list identified by ProductID.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType::ProductID& getProductID() = 0;

  /** Sets the bounded list identified by ProductID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setProductID(const uci::type::SOB_SatelliteRecordBaseType::ProductID& value) = 0;

  /** Returns a const reference to the bounded list identified by FileID.
    *
    * @return A const reference to the bounded list identified by FileID.
    */
  virtual const uci::type::SOB_SatelliteRecordBaseType::FileID& getFileID() const = 0;

  /** Returns a reference to the bounded list identified by FileID.
    *
    * @return A reference to the bounded list identified by FileID.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType::FileID& getFileID() = 0;

  /** Sets the bounded list identified by FileID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setFileID(const uci::type::SOB_SatelliteRecordBaseType::FileID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Characteristics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Characteristics.
    */
  virtual const uci::type::SatelliteCharacteristicsOverrideType& getCharacteristics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Characteristics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Characteristics.
    */
  virtual uci::type::SatelliteCharacteristicsOverrideType& getCharacteristics() = 0;

  /** Sets the complex content identified by Characteristics to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Characteristics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setCharacteristics(const uci::type::SatelliteCharacteristicsOverrideType& value) = 0;

  /** Returns whether the Element identified by Characteristics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Characteristics is enabled or not.
    */
  virtual bool hasCharacteristics() const = 0;

  /** Enables the Element identified by Characteristics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Characteristics.
    */
  virtual uci::type::SatelliteCharacteristicsOverrideType& enableCharacteristics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Characteristics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& clearCharacteristics() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RemoveInfo.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RemoveInfo.
    */
  virtual const uci::type::SOB_SatelliteRecordRemoveInfoType& getRemoveInfo() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RemoveInfo.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RemoveInfo.
    */
  virtual uci::type::SOB_SatelliteRecordRemoveInfoType& getRemoveInfo() = 0;

  /** Sets the complex content identified by RemoveInfo to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RemoveInfo.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setRemoveInfo(const uci::type::SOB_SatelliteRecordRemoveInfoType& value) = 0;

  /** Returns whether the Element identified by RemoveInfo exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RemoveInfo is enabled or not.
    */
  virtual bool hasRemoveInfo() const = 0;

  /** Enables the Element identified by RemoveInfo.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RemoveInfo.
    */
  virtual uci::type::SOB_SatelliteRecordRemoveInfoType& enableRemoveInfo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RemoveInfo.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& clearRemoveInfo() = 0;

  /** Returns a const reference to the bounded list identified by Emitter.
    *
    * @return A const reference to the bounded list identified by Emitter.
    */
  virtual const uci::type::SOB_SatelliteRecordBaseType::Emitter& getEmitter() const = 0;

  /** Returns a reference to the bounded list identified by Emitter.
    *
    * @return A reference to the bounded list identified by Emitter.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType::Emitter& getEmitter() = 0;

  /** Sets the bounded list identified by Emitter.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setEmitter(const uci::type::SOB_SatelliteRecordBaseType::Emitter& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by RemarksText.
    *
    * @return A const reference to the accessor that provides access to the string identified by RemarksText.
    */
  virtual const uci::type::VisibleString512Type& getRemarksText() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by RemarksText.
    *
    * @return A reference to the accessor that provides access to the string identified by RemarksText.
    */
  virtual uci::type::VisibleString512Type& getRemarksText() = 0;

  /** Sets the string identified by RemarksText to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by RemarksText.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setRemarksText(const uci::type::VisibleString512Type& value) = 0;

  /** Sets the string identified by RemarksText to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setRemarksText(const std::string& value) = 0;

  /** Sets the string identified by RemarksText to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& setRemarksText(const char* value) = 0;

  /** Returns whether the Element identified by RemarksText exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RemarksText is enabled or not.
    */
  virtual bool hasRemarksText() const = 0;

  /** Enables the Element identified by RemarksText.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by RemarksText.
    */
  virtual uci::type::VisibleString512Type& enableRemarksText(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RemarksText.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_SatelliteRecordBaseType& clearRemarksText() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SOB_SatelliteRecordBaseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SOB_SatelliteRecordBaseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SOB_SatelliteRecordBaseType to copy from.
    */
  SOB_SatelliteRecordBaseType(const SOB_SatelliteRecordBaseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SOB_SatelliteRecordBaseType to the contents of the
    * SOB_SatelliteRecordBaseType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The SOB_SatelliteRecordBaseType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this SOB_SatelliteRecordBaseType.
    * @return A reference to this SOB_SatelliteRecordBaseType.
    */
  SOB_SatelliteRecordBaseType& operator=(const SOB_SatelliteRecordBaseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SOB_SATELLITERECORDBASETYPE_H

