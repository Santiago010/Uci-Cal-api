/** @file PO_TrackSettingsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_TRACKSETTINGSTYPE_H
#define UCI_TYPE_PO_TRACKSETTINGSTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "DistanceType.h"
#include "DurationType.h"
#include "IdentityBasicType.h"
#include "IncreaseDecreaseEnum.h"
#include "LOS_VariableB_Type.h"
#include "PO_AirTargetVolumeType.h"
#include "PO_CoastSettingValueType.h"
#include "PO_LockPersistenceEnum.h"
#include "PO_TrackCommandEnum.h"
#include "TrackOptionsID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Commanded values for track parameters that will be used to customize target detections. */
class PO_TrackSettingsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PO_TrackSettingsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_TrackSettingsType.
    */
  static UCI_EXPORT PO_TrackSettingsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_TrackSettingsType initializing the data accessed by the new PO_TrackSettingsType
    * using the data accessed by the specified PO_TrackSettingsType (cloning).
    *
    * @param accessor The PO_TrackSettingsType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PO_TrackSettingsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_TrackSettingsType.
    */
  static UCI_EXPORT PO_TrackSettingsType& create(const PO_TrackSettingsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_TrackSettingsType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The PO_TrackSettingsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_TrackSettingsType& accessor);

  /** Returns this accessor's type constant, i.e. pO_TrackSettingsType.
    *
    * @return This accessor's type constant, i.e. pO_TrackSettingsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_TrackSettingsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PO_TrackSettingsType.
    *
    * @return The version that was initialized from the uci:version attribute of PO_TrackSettingsType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_TrackSettingsType& accessor) = 0;

  /** Commanded value that defines the amount of time to coast a track before dropping it. The value should fall in the set
    * of valid range values associated with the capability and associated environment setting. List size is based on
    * allowing one per environment option available. [Occurrences: Minimum: 0; Maximum: 6]
    */
  typedef uci::base::BoundedList<uci::type::PO_CoastSettingValueType, uci::type::accessorType::pO_CoastSettingValueType> CoastSetting;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TrackOptionID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TrackOptionID.
    */
  virtual const uci::type::TrackOptionsID_Type& getTrackOptionID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TrackOptionID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TrackOptionID.
    */
  virtual uci::type::TrackOptionsID_Type& getTrackOptionID() = 0;

  /** Sets the complex content identified by TrackOptionID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TrackOptionID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& setTrackOptionID(const uci::type::TrackOptionsID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by Mode.
    *
    * @return A const reference to the value of the enumeration identified by Mode.
    */
  virtual const uci::type::PO_TrackCommandEnum& getMode() const = 0;

  /** Returns a reference to the value of the enumeration identified by Mode.
    *
    * @return A reference to the value of the enumeration identified by Mode.
    */
  virtual uci::type::PO_TrackCommandEnum& getMode() = 0;

  /** Sets the value of the enumeration identified by Mode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& setMode(const uci::type::PO_TrackCommandEnum& value) = 0;

  /** Sets the value of the enumeration identified by Mode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& setMode(uci::type::PO_TrackCommandEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Mode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mode is enabled or not.
    */
  virtual bool hasMode() const = 0;

  /** Enables the Element identified by Mode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Mode.
    */
  virtual uci::type::PO_TrackCommandEnum& enableMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Mode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& clearMode() = 0;

  /** Returns a const reference to the value of the enumeration identified by TrackArea.
    *
    * @return A const reference to the value of the enumeration identified by TrackArea.
    */
  virtual const uci::type::IncreaseDecreaseEnum& getTrackArea() const = 0;

  /** Returns a reference to the value of the enumeration identified by TrackArea.
    *
    * @return A reference to the value of the enumeration identified by TrackArea.
    */
  virtual uci::type::IncreaseDecreaseEnum& getTrackArea() = 0;

  /** Sets the value of the enumeration identified by TrackArea.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& setTrackArea(const uci::type::IncreaseDecreaseEnum& value) = 0;

  /** Sets the value of the enumeration identified by TrackArea.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& setTrackArea(uci::type::IncreaseDecreaseEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by TrackArea exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TrackArea is enabled or not.
    */
  virtual bool hasTrackArea() const = 0;

  /** Enables the Element identified by TrackArea.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by TrackArea.
    */
  virtual uci::type::IncreaseDecreaseEnum& enableTrackArea(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TrackArea.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& clearTrackArea() = 0;

  /** Returns a const reference to the value of the enumeration identified by LockPersistence.
    *
    * @return A const reference to the value of the enumeration identified by LockPersistence.
    */
  virtual const uci::type::PO_LockPersistenceEnum& getLockPersistence() const = 0;

  /** Returns a reference to the value of the enumeration identified by LockPersistence.
    *
    * @return A reference to the value of the enumeration identified by LockPersistence.
    */
  virtual uci::type::PO_LockPersistenceEnum& getLockPersistence() = 0;

  /** Sets the value of the enumeration identified by LockPersistence.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& setLockPersistence(const uci::type::PO_LockPersistenceEnum& value) = 0;

  /** Sets the value of the enumeration identified by LockPersistence.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& setLockPersistence(uci::type::PO_LockPersistenceEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by LockPersistence exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LockPersistence is enabled or not.
    */
  virtual bool hasLockPersistence() const = 0;

  /** Enables the Element identified by LockPersistence.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by LockPersistence.
    */
  virtual uci::type::PO_LockPersistenceEnum& enableLockPersistence(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LockPersistence.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& clearLockPersistence() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ATR_Filter.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ATR_Filter.
    */
  virtual const uci::type::IdentityBasicType& getATR_Filter() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ATR_Filter.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ATR_Filter.
    */
  virtual uci::type::IdentityBasicType& getATR_Filter() = 0;

  /** Sets the complex content identified by ATR_Filter to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ATR_Filter.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& setATR_Filter(const uci::type::IdentityBasicType& value) = 0;

  /** Returns whether the Element identified by ATR_Filter exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ATR_Filter is enabled or not.
    */
  virtual bool hasATR_Filter() const = 0;

  /** Enables the Element identified by ATR_Filter.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ATR_Filter.
    */
  virtual uci::type::IdentityBasicType& enableATR_Filter(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ATR_Filter.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& clearATR_Filter() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OffsetTrackSetting.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OffsetTrackSetting.
    */
  virtual const uci::type::LOS_VariableB_Type& getOffsetTrackSetting() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OffsetTrackSetting.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OffsetTrackSetting.
    */
  virtual uci::type::LOS_VariableB_Type& getOffsetTrackSetting() = 0;

  /** Sets the complex content identified by OffsetTrackSetting to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OffsetTrackSetting.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& setOffsetTrackSetting(const uci::type::LOS_VariableB_Type& value) = 0;

  /** Returns whether the Element identified by OffsetTrackSetting exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OffsetTrackSetting is enabled or not.
    */
  virtual bool hasOffsetTrackSetting() const = 0;

  /** Enables the Element identified by OffsetTrackSetting.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OffsetTrackSetting.
    */
  virtual uci::type::LOS_VariableB_Type& enableOffsetTrackSetting(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OffsetTrackSetting.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& clearOffsetTrackSetting() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ObservedEntityThreshold.
    *
    * @return The value of the simple primitive data type identified by ObservedEntityThreshold.
    */
  virtual uci::type::DurationTypeValue getObservedEntityThreshold() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ObservedEntityThreshold.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& setObservedEntityThreshold(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by ObservedEntityThreshold exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ObservedEntityThreshold is enabled or not.
    */
  virtual bool hasObservedEntityThreshold() const = 0;

  /** Clears (disabled) the Element identified by ObservedEntityThreshold.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& clearObservedEntityThreshold() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TrackingRange.
    *
    * @return The value of the simple primitive data type identified by TrackingRange.
    */
  virtual uci::type::DistanceTypeValue getTrackingRange() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TrackingRange.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& setTrackingRange(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by TrackingRange exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TrackingRange is enabled or not.
    */
  virtual bool hasTrackingRange() const = 0;

  /** Clears (disabled) the Element identified by TrackingRange.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& clearTrackingRange() = 0;

  /** Returns a const reference to the bounded list identified by CoastSetting.
    *
    * @return A const reference to the bounded list identified by CoastSetting.
    */
  virtual const uci::type::PO_TrackSettingsType::CoastSetting& getCoastSetting() const = 0;

  /** Returns a reference to the bounded list identified by CoastSetting.
    *
    * @return A reference to the bounded list identified by CoastSetting.
    */
  virtual uci::type::PO_TrackSettingsType::CoastSetting& getCoastSetting() = 0;

  /** Sets the bounded list identified by CoastSetting.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& setCoastSetting(const uci::type::PO_TrackSettingsType::CoastSetting& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by BlankingVolume.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by BlankingVolume.
    */
  virtual const uci::type::PO_AirTargetVolumeType& getBlankingVolume() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by BlankingVolume.
    *
    * @return A reference to the accessor that provides access to the complex content identified by BlankingVolume.
    */
  virtual uci::type::PO_AirTargetVolumeType& getBlankingVolume() = 0;

  /** Sets the complex content identified by BlankingVolume to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by BlankingVolume.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& setBlankingVolume(const uci::type::PO_AirTargetVolumeType& value) = 0;

  /** Returns whether the Element identified by BlankingVolume exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BlankingVolume is enabled or not.
    */
  virtual bool hasBlankingVolume() const = 0;

  /** Enables the Element identified by BlankingVolume.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by BlankingVolume.
    */
  virtual uci::type::PO_AirTargetVolumeType& enableBlankingVolume(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by BlankingVolume.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackSettingsType& clearBlankingVolume() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_TrackSettingsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_TrackSettingsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_TrackSettingsType to copy from.
    */
  PO_TrackSettingsType(const PO_TrackSettingsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_TrackSettingsType to the contents of the PO_TrackSettingsType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PO_TrackSettingsType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this PO_TrackSettingsType.
    * @return A reference to this PO_TrackSettingsType.
    */
  PO_TrackSettingsType& operator=(const PO_TrackSettingsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_TRACKSETTINGSTYPE_H

