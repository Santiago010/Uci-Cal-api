/** @file PlanPolicyApplicablePlanType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLANPOLICYAPPLICABLEPLANTYPE_H
#define UCI_TYPE_PLANPOLICYAPPLICABLEPLANTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AutonomousPlanningConstrainingPlansType.h"
#include "AutonomousPlanningOtherSystemConstrainingPlansType.h"
#include "PlanPartsType.h"
#include "PlanTypeEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PlanPolicyApplicablePlanType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PlanPolicyApplicablePlanType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanPolicyApplicablePlanType.
    */
  static UCI_EXPORT PlanPolicyApplicablePlanType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlanPolicyApplicablePlanType initializing the data accessed by the new
    * PlanPolicyApplicablePlanType using the data accessed by the specified PlanPolicyApplicablePlanType (cloning).
    *
    * @param accessor The PlanPolicyApplicablePlanType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created PlanPolicyApplicablePlanType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanPolicyApplicablePlanType.
    */
  static UCI_EXPORT PlanPolicyApplicablePlanType& create(const PlanPolicyApplicablePlanType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlanPolicyApplicablePlanType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The PlanPolicyApplicablePlanType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlanPolicyApplicablePlanType& accessor);

  /** Returns this accessor's type constant, i.e. planPolicyApplicablePlanType.
    *
    * @return This accessor's type constant, i.e. planPolicyApplicablePlanType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::planPolicyApplicablePlanType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlanPolicyApplicablePlanType.
    *
    * @return The version that was initialized from the uci:version attribute of PlanPolicyApplicablePlanType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlanPolicyApplicablePlanType& accessor) = 0;

  /** Indicates a set of constraining plans (applicable to different system than the one planned for) that are used in the
    * planning activity, which is applicable to the associated *Policy elements. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::AutonomousPlanningOtherSystemConstrainingPlansType, uci::type::accessorType::autonomousPlanningOtherSystemConstrainingPlansType> OtherSystemConstrainingPlans;

  /** Returns a const reference to the value of the enumeration identified by PlanType.
    *
    * @return A const reference to the value of the enumeration identified by PlanType.
    */
  virtual const uci::type::PlanTypeEnum& getPlanType() const = 0;

  /** Returns a reference to the value of the enumeration identified by PlanType.
    *
    * @return A reference to the value of the enumeration identified by PlanType.
    */
  virtual uci::type::PlanTypeEnum& getPlanType() = 0;

  /** Sets the value of the enumeration identified by PlanType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPolicyApplicablePlanType& setPlanType(const uci::type::PlanTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by PlanType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPolicyApplicablePlanType& setPlanType(uci::type::PlanTypeEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PlanParts.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PlanParts.
    */
  virtual const uci::type::PlanPartsType& getPlanParts() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PlanParts.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PlanParts.
    */
  virtual uci::type::PlanPartsType& getPlanParts() = 0;

  /** Sets the complex content identified by PlanParts to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PlanParts.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPolicyApplicablePlanType& setPlanParts(const uci::type::PlanPartsType& value) = 0;

  /** Returns whether the Element identified by PlanParts exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PlanParts is enabled or not.
    */
  virtual bool hasPlanParts() const = 0;

  /** Enables the Element identified by PlanParts.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PlanParts.
    */
  virtual uci::type::PlanPartsType& enablePlanParts(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PlanParts.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPolicyApplicablePlanType& clearPlanParts() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ConstrainingPlans.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ConstrainingPlans.
    */
  virtual const uci::type::AutonomousPlanningConstrainingPlansType& getConstrainingPlans() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ConstrainingPlans.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ConstrainingPlans.
    */
  virtual uci::type::AutonomousPlanningConstrainingPlansType& getConstrainingPlans() = 0;

  /** Sets the complex content identified by ConstrainingPlans to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ConstrainingPlans.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPolicyApplicablePlanType& setConstrainingPlans(const uci::type::AutonomousPlanningConstrainingPlansType& value) = 0;

  /** Returns whether the Element identified by ConstrainingPlans exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConstrainingPlans is enabled or not.
    */
  virtual bool hasConstrainingPlans() const = 0;

  /** Enables the Element identified by ConstrainingPlans.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ConstrainingPlans.
    */
  virtual uci::type::AutonomousPlanningConstrainingPlansType& enableConstrainingPlans(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ConstrainingPlans.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPolicyApplicablePlanType& clearConstrainingPlans() = 0;

  /** Returns a const reference to the bounded list identified by OtherSystemConstrainingPlans.
    *
    * @return A const reference to the bounded list identified by OtherSystemConstrainingPlans.
    */
  virtual const uci::type::PlanPolicyApplicablePlanType::OtherSystemConstrainingPlans& getOtherSystemConstrainingPlans() const = 0;

  /** Returns a reference to the bounded list identified by OtherSystemConstrainingPlans.
    *
    * @return A reference to the bounded list identified by OtherSystemConstrainingPlans.
    */
  virtual uci::type::PlanPolicyApplicablePlanType::OtherSystemConstrainingPlans& getOtherSystemConstrainingPlans() = 0;

  /** Sets the bounded list identified by OtherSystemConstrainingPlans.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPolicyApplicablePlanType& setOtherSystemConstrainingPlans(const uci::type::PlanPolicyApplicablePlanType::OtherSystemConstrainingPlans& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlanPolicyApplicablePlanType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlanPolicyApplicablePlanType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlanPolicyApplicablePlanType to copy from.
    */
  PlanPolicyApplicablePlanType(const PlanPolicyApplicablePlanType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlanPolicyApplicablePlanType to the contents of the
    * PlanPolicyApplicablePlanType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The PlanPolicyApplicablePlanType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this PlanPolicyApplicablePlanType.
    * @return A reference to this PlanPolicyApplicablePlanType.
    */
  PlanPolicyApplicablePlanType& operator=(const PlanPolicyApplicablePlanType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLANPOLICYAPPLICABLEPLANTYPE_H

