/** @file SelfDefenseStatusMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SELFDEFENSESTATUSMDT_H
#define UCI_TYPE_SELFDEFENSESTATUSMDT_H

#include "../base/BooleanAccessor.h"
#include "../base/UnsignedIntAccessor.h"
#include "../base/export.h"
#include "SupportCapabilityStatusBaseType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Component of the vehicle to defend against attack. */
class SelfDefenseStatusMDT : public virtual SupportCapabilityStatusBaseType {
public:

  /** This method constructs a new SelfDefenseStatusMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SelfDefenseStatusMDT.
    */
  static UCI_EXPORT SelfDefenseStatusMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SelfDefenseStatusMDT initializing the data accessed by the new SelfDefenseStatusMDT
    * using the data accessed by the specified SelfDefenseStatusMDT (cloning).
    *
    * @param accessor The SelfDefenseStatusMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SelfDefenseStatusMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SelfDefenseStatusMDT.
    */
  static UCI_EXPORT SelfDefenseStatusMDT& create(const SelfDefenseStatusMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SelfDefenseStatusMDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The SelfDefenseStatusMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SelfDefenseStatusMDT& accessor);

  /** Returns this accessor's type constant, i.e. selfDefenseStatusMDT.
    *
    * @return This accessor's type constant, i.e. selfDefenseStatusMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::selfDefenseStatusMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of SelfDefenseStatusMDT.
    *
    * @return The version that was initialized from the uci:version attribute of SelfDefenseStatusMDT.
    */
  static std::string getUCITypeVersion() {
    return "001.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SelfDefenseStatusMDT& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Chaff.
    *
    * @return The value of the simple primitive data type identified by Chaff.
    */
  virtual xs::UnsignedInt getChaff() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Chaff.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SelfDefenseStatusMDT& setChaff(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Flare.
    *
    * @return The value of the simple primitive data type identified by Flare.
    */
  virtual xs::UnsignedInt getFlare() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Flare.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SelfDefenseStatusMDT& setFlare(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Decoy.
    *
    * @return The value of the simple primitive data type identified by Decoy.
    */
  virtual xs::UnsignedInt getDecoy() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Decoy.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SelfDefenseStatusMDT& setDecoy(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by DirectedEnergy.
    *
    * @return The value of the simple primitive data type identified by DirectedEnergy.
    */
  virtual xs::Boolean getDirectedEnergy() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DirectedEnergy.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SelfDefenseStatusMDT& setDirectedEnergy(xs::Boolean value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SelfDefenseStatusMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~SelfDefenseStatusMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SelfDefenseStatusMDT to copy from.
    */
  SelfDefenseStatusMDT(const SelfDefenseStatusMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SelfDefenseStatusMDT to the contents of the SelfDefenseStatusMDT
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SelfDefenseStatusMDT on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this SelfDefenseStatusMDT.
    * @return A reference to this SelfDefenseStatusMDT.
    */
  SelfDefenseStatusMDT& operator=(const SelfDefenseStatusMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SELFDEFENSESTATUSMDT_H

