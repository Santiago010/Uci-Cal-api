/** @file RouteMetricsMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ROUTEMETRICSMDT_H
#define UCI_TYPE_ROUTEMETRICSMDT_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ActivityMetricsType.h"
#include "ActivityPlanPartsEnum.h"
#include "MetricsType.h"
#include "PathMetricsType.h"
#include "PathTypeEnum.h"
#include "RouteActivityPlanID_Type.h"
#include "RouteMetricsID_Type.h"
#include "RoutePlanID_Type.h"
#include "SegmentMetricsType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class RouteMetricsMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RouteMetricsMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RouteMetricsMDT.
    */
  static UCI_EXPORT RouteMetricsMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RouteMetricsMDT initializing the data accessed by the new RouteMetricsMDT using the data
    * accessed by the specified RouteMetricsMDT (cloning).
    *
    * @param accessor The RouteMetricsMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created RouteMetricsMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RouteMetricsMDT.
    */
  static UCI_EXPORT RouteMetricsMDT& create(const RouteMetricsMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RouteMetricsMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The RouteMetricsMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RouteMetricsMDT& accessor);

  /** Returns this accessor's type constant, i.e. routeMetricsMDT.
    *
    * @return This accessor's type constant, i.e. routeMetricsMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::routeMetricsMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of RouteMetricsMDT.
    *
    * @return The version that was initialized from the uci:version attribute of RouteMetricsMDT.
    */
  static std::string getUCITypeVersion() {
    return "002.001.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RouteMetricsMDT& accessor) = 0;

  /** Indicates which part or parts of the RoutePlan indicated by the sibling RoutePlanID were included in the metrics
    * analysis summarized in this message. If omitted, all parts were analyzed. List size for this element is based on
    * "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 12]
    */
  typedef uci::base::BoundedList<uci::type::PathTypeEnum, uci::type::accessorType::pathTypeEnum> RouteParts;

  /** Indicates a RouteActivityPlan whose metrics are given by the sibling elements. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RouteActivityPlanID_Type, uci::type::accessorType::routeActivityPlanID_Type> RouteActivityPlanID;

  /** Indicates which part or parts of the RouteActivityPlan indicated by the sibling RouteActivityPlanID were included in
    * the metrics analysis summarized in this message. If omitted, all parts were analyzed. List size for this element is
    * based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 9]
    */
  typedef uci::base::BoundedList<uci::type::ActivityPlanPartsEnum, uci::type::accessorType::activityPlanPartsEnum> ActivityPlanParts;

  /** Indicates summary metrics for all the Segments of a single Path of the RoutePlan referenced by the sibling
    * RoutePlanID. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PathMetricsType, uci::type::accessorType::pathMetricsType> PathMetrics;

  /** Indicates summary metrics for a single Segment of the RoutePlan referenced by the sibling RoutePlanID. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SegmentMetricsType, uci::type::accessorType::segmentMetricsType> SegmentMetrics;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RouteMetricsID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RouteMetricsID.
    */
  virtual const uci::type::RouteMetricsID_Type& getRouteMetricsID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RouteMetricsID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RouteMetricsID.
    */
  virtual uci::type::RouteMetricsID_Type& getRouteMetricsID() = 0;

  /** Sets the complex content identified by RouteMetricsID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RouteMetricsID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteMetricsMDT& setRouteMetricsID(const uci::type::RouteMetricsID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RoutePlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RoutePlanID.
    */
  virtual const uci::type::RoutePlanID_Type& getRoutePlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RoutePlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RoutePlanID.
    */
  virtual uci::type::RoutePlanID_Type& getRoutePlanID() = 0;

  /** Sets the complex content identified by RoutePlanID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RoutePlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteMetricsMDT& setRoutePlanID(const uci::type::RoutePlanID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by RouteParts.
    *
    * @return A const reference to the bounded list identified by RouteParts.
    */
  virtual const uci::type::RouteMetricsMDT::RouteParts& getRouteParts() const = 0;

  /** Returns a reference to the bounded list identified by RouteParts.
    *
    * @return A reference to the bounded list identified by RouteParts.
    */
  virtual uci::type::RouteMetricsMDT::RouteParts& getRouteParts() = 0;

  /** Sets the bounded list identified by RouteParts.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteMetricsMDT& setRouteParts(const uci::type::RouteMetricsMDT::RouteParts& value) = 0;

  /** Returns a const reference to the bounded list identified by RouteActivityPlanID.
    *
    * @return A const reference to the bounded list identified by RouteActivityPlanID.
    */
  virtual const uci::type::RouteMetricsMDT::RouteActivityPlanID& getRouteActivityPlanID() const = 0;

  /** Returns a reference to the bounded list identified by RouteActivityPlanID.
    *
    * @return A reference to the bounded list identified by RouteActivityPlanID.
    */
  virtual uci::type::RouteMetricsMDT::RouteActivityPlanID& getRouteActivityPlanID() = 0;

  /** Sets the bounded list identified by RouteActivityPlanID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteMetricsMDT& setRouteActivityPlanID(const uci::type::RouteMetricsMDT::RouteActivityPlanID& value) = 0;

  /** Returns a const reference to the bounded list identified by ActivityPlanParts.
    *
    * @return A const reference to the bounded list identified by ActivityPlanParts.
    */
  virtual const uci::type::RouteMetricsMDT::ActivityPlanParts& getActivityPlanParts() const = 0;

  /** Returns a reference to the bounded list identified by ActivityPlanParts.
    *
    * @return A reference to the bounded list identified by ActivityPlanParts.
    */
  virtual uci::type::RouteMetricsMDT::ActivityPlanParts& getActivityPlanParts() = 0;

  /** Sets the bounded list identified by ActivityPlanParts.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteMetricsMDT& setActivityPlanParts(const uci::type::RouteMetricsMDT::ActivityPlanParts& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RouteMetrics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RouteMetrics.
    */
  virtual const uci::type::MetricsType& getRouteMetrics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RouteMetrics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RouteMetrics.
    */
  virtual uci::type::MetricsType& getRouteMetrics() = 0;

  /** Sets the complex content identified by RouteMetrics to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RouteMetrics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteMetricsMDT& setRouteMetrics(const uci::type::MetricsType& value) = 0;

  /** Returns whether the Element identified by RouteMetrics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RouteMetrics is enabled or not.
    */
  virtual bool hasRouteMetrics() const = 0;

  /** Enables the Element identified by RouteMetrics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RouteMetrics.
    */
  virtual uci::type::MetricsType& enableRouteMetrics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RouteMetrics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteMetricsMDT& clearRouteMetrics() = 0;

  /** Returns a const reference to the bounded list identified by PathMetrics.
    *
    * @return A const reference to the bounded list identified by PathMetrics.
    */
  virtual const uci::type::RouteMetricsMDT::PathMetrics& getPathMetrics() const = 0;

  /** Returns a reference to the bounded list identified by PathMetrics.
    *
    * @return A reference to the bounded list identified by PathMetrics.
    */
  virtual uci::type::RouteMetricsMDT::PathMetrics& getPathMetrics() = 0;

  /** Sets the bounded list identified by PathMetrics.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteMetricsMDT& setPathMetrics(const uci::type::RouteMetricsMDT::PathMetrics& value) = 0;

  /** Returns a const reference to the bounded list identified by SegmentMetrics.
    *
    * @return A const reference to the bounded list identified by SegmentMetrics.
    */
  virtual const uci::type::RouteMetricsMDT::SegmentMetrics& getSegmentMetrics() const = 0;

  /** Returns a reference to the bounded list identified by SegmentMetrics.
    *
    * @return A reference to the bounded list identified by SegmentMetrics.
    */
  virtual uci::type::RouteMetricsMDT::SegmentMetrics& getSegmentMetrics() = 0;

  /** Sets the bounded list identified by SegmentMetrics.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteMetricsMDT& setSegmentMetrics(const uci::type::RouteMetricsMDT::SegmentMetrics& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActivityMetrics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActivityMetrics.
    */
  virtual const uci::type::ActivityMetricsType& getActivityMetrics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActivityMetrics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActivityMetrics.
    */
  virtual uci::type::ActivityMetricsType& getActivityMetrics() = 0;

  /** Sets the complex content identified by ActivityMetrics to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivityMetrics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteMetricsMDT& setActivityMetrics(const uci::type::ActivityMetricsType& value) = 0;

  /** Returns whether the Element identified by ActivityMetrics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActivityMetrics is enabled or not.
    */
  virtual bool hasActivityMetrics() const = 0;

  /** Enables the Element identified by ActivityMetrics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActivityMetrics.
    */
  virtual uci::type::ActivityMetricsType& enableActivityMetrics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActivityMetrics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteMetricsMDT& clearActivityMetrics() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RouteMetricsMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~RouteMetricsMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RouteMetricsMDT to copy from.
    */
  RouteMetricsMDT(const RouteMetricsMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RouteMetricsMDT to the contents of the RouteMetricsMDT on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The RouteMetricsMDT on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this RouteMetricsMDT.
    * @return A reference to this RouteMetricsMDT.
    */
  RouteMetricsMDT& operator=(const RouteMetricsMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ROUTEMETRICSMDT_H

