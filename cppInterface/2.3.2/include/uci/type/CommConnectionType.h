/** @file CommConnectionType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMCONNECTIONTYPE_H
#define UCI_TYPE_COMMCONNECTIONTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/FloatAccessor.h"
#include "../base/export.h"
#include "CommModulationTypeEnum.h"
#include "DateTimeType.h"
#include "DurationType.h"
#include "ForeignKeyType.h"
#include "FrequencyType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Utilized to perform the tuning of a communications capability. */
class CommConnectionType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CommConnectionType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommConnectionType.
    */
  static UCI_EXPORT CommConnectionType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CommConnectionType initializing the data accessed by the new CommConnectionType using
    * the data accessed by the specified CommConnectionType (cloning).
    *
    * @param accessor The CommConnectionType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created CommConnectionType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommConnectionType.
    */
  static UCI_EXPORT CommConnectionType& create(const CommConnectionType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CommConnectionType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The CommConnectionType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CommConnectionType& accessor);

  /** Returns this accessor's type constant, i.e. commConnectionType.
    *
    * @return This accessor's type constant, i.e. commConnectionType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commConnectionType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CommConnectionType.
    *
    * @return The version that was initialized from the uci:version attribute of CommConnectionType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CommConnectionType& accessor) = 0;

  /** This element represents a potential list of transmit channels to tune this waveform to. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType> TransmitChannel;

  /** This element represents a potential list of transmit frequencies to tune this waveform to. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FrequencyType, uci::type::accessorType::frequencyType> TransmitFrequency;

  /** This element represents a potential list of receive channels to tune this waveform to. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType> ReceiveChannel;

  /** This element represents a potential list of receive frequencies to tune this waveform to. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FrequencyType, uci::type::accessorType::frequencyType> ReceiveFrequency;

  /** This element represents a key to a configuration containing the network ID / Name. This is specifically an ID to aid
    * a waveform to ID its own terminal, a waveform network, or IP Address. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType> NetworkKey;

  /** Returns a const reference to the bounded list identified by TransmitChannel.
    *
    * @return A const reference to the bounded list identified by TransmitChannel.
    */
  virtual const uci::type::CommConnectionType::TransmitChannel& getTransmitChannel() const = 0;

  /** Returns a reference to the bounded list identified by TransmitChannel.
    *
    * @return A reference to the bounded list identified by TransmitChannel.
    */
  virtual uci::type::CommConnectionType::TransmitChannel& getTransmitChannel() = 0;

  /** Sets the bounded list identified by TransmitChannel.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& setTransmitChannel(const uci::type::CommConnectionType::TransmitChannel& value) = 0;

  /** Returns a const reference to the bounded list identified by TransmitFrequency.
    *
    * @return A const reference to the bounded list identified by TransmitFrequency.
    */
  virtual const uci::type::CommConnectionType::TransmitFrequency& getTransmitFrequency() const = 0;

  /** Returns a reference to the bounded list identified by TransmitFrequency.
    *
    * @return A reference to the bounded list identified by TransmitFrequency.
    */
  virtual uci::type::CommConnectionType::TransmitFrequency& getTransmitFrequency() = 0;

  /** Sets the bounded list identified by TransmitFrequency.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& setTransmitFrequency(const uci::type::CommConnectionType::TransmitFrequency& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by InstantaneousTransmitBandwidth.
    *
    * @return The value of the simple primitive data type identified by InstantaneousTransmitBandwidth.
    */
  virtual uci::type::FrequencyTypeValue getInstantaneousTransmitBandwidth() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InstantaneousTransmitBandwidth.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& setInstantaneousTransmitBandwidth(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by InstantaneousTransmitBandwidth exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InstantaneousTransmitBandwidth is enabled or not.
    */
  virtual bool hasInstantaneousTransmitBandwidth() const = 0;

  /** Clears (disabled) the Element identified by InstantaneousTransmitBandwidth.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& clearInstantaneousTransmitBandwidth() = 0;

  /** Returns a const reference to the bounded list identified by ReceiveChannel.
    *
    * @return A const reference to the bounded list identified by ReceiveChannel.
    */
  virtual const uci::type::CommConnectionType::ReceiveChannel& getReceiveChannel() const = 0;

  /** Returns a reference to the bounded list identified by ReceiveChannel.
    *
    * @return A reference to the bounded list identified by ReceiveChannel.
    */
  virtual uci::type::CommConnectionType::ReceiveChannel& getReceiveChannel() = 0;

  /** Sets the bounded list identified by ReceiveChannel.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& setReceiveChannel(const uci::type::CommConnectionType::ReceiveChannel& value) = 0;

  /** Returns a const reference to the bounded list identified by ReceiveFrequency.
    *
    * @return A const reference to the bounded list identified by ReceiveFrequency.
    */
  virtual const uci::type::CommConnectionType::ReceiveFrequency& getReceiveFrequency() const = 0;

  /** Returns a reference to the bounded list identified by ReceiveFrequency.
    *
    * @return A reference to the bounded list identified by ReceiveFrequency.
    */
  virtual uci::type::CommConnectionType::ReceiveFrequency& getReceiveFrequency() = 0;

  /** Sets the bounded list identified by ReceiveFrequency.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& setReceiveFrequency(const uci::type::CommConnectionType::ReceiveFrequency& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by InstantaneousReceiveBandwidth.
    *
    * @return The value of the simple primitive data type identified by InstantaneousReceiveBandwidth.
    */
  virtual uci::type::FrequencyTypeValue getInstantaneousReceiveBandwidth() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InstantaneousReceiveBandwidth.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& setInstantaneousReceiveBandwidth(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by InstantaneousReceiveBandwidth exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InstantaneousReceiveBandwidth is enabled or not.
    */
  virtual bool hasInstantaneousReceiveBandwidth() const = 0;

  /** Clears (disabled) the Element identified by InstantaneousReceiveBandwidth.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& clearInstantaneousReceiveBandwidth() = 0;

  /** Returns a const reference to the value of the enumeration identified by Modulation.
    *
    * @return A const reference to the value of the enumeration identified by Modulation.
    */
  virtual const uci::type::CommModulationTypeEnum& getModulation() const = 0;

  /** Returns a reference to the value of the enumeration identified by Modulation.
    *
    * @return A reference to the value of the enumeration identified by Modulation.
    */
  virtual uci::type::CommModulationTypeEnum& getModulation() = 0;

  /** Sets the value of the enumeration identified by Modulation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& setModulation(const uci::type::CommModulationTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by Modulation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& setModulation(uci::type::CommModulationTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Modulation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Modulation is enabled or not.
    */
  virtual bool hasModulation() const = 0;

  /** Enables the Element identified by Modulation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Modulation.
    */
  virtual uci::type::CommModulationTypeEnum& enableModulation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Modulation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& clearModulation() = 0;

  /** Returns a const reference to the bounded list identified by NetworkKey.
    *
    * @return A const reference to the bounded list identified by NetworkKey.
    */
  virtual const uci::type::CommConnectionType::NetworkKey& getNetworkKey() const = 0;

  /** Returns a reference to the bounded list identified by NetworkKey.
    *
    * @return A reference to the bounded list identified by NetworkKey.
    */
  virtual uci::type::CommConnectionType::NetworkKey& getNetworkKey() = 0;

  /** Sets the bounded list identified by NetworkKey.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& setNetworkKey(const uci::type::CommConnectionType::NetworkKey& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by NetworkTimeRef.
    *
    * @return The value of the simple primitive data type identified by NetworkTimeRef.
    */
  virtual xs::Boolean getNetworkTimeRef() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by NetworkTimeRef.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& setNetworkTimeRef(xs::Boolean value) = 0;

  /** Returns whether the Element identified by NetworkTimeRef exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NetworkTimeRef is enabled or not.
    */
  virtual bool hasNetworkTimeRef() const = 0;

  /** Clears (disabled) the Element identified by NetworkTimeRef.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& clearNetworkTimeRef() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ExternalTimeRef.
    *
    * @return The value of the simple primitive data type identified by ExternalTimeRef.
    */
  virtual xs::Boolean getExternalTimeRef() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ExternalTimeRef.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& setExternalTimeRef(xs::Boolean value) = 0;

  /** Returns whether the Element identified by ExternalTimeRef exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ExternalTimeRef is enabled or not.
    */
  virtual bool hasExternalTimeRef() const = 0;

  /** Clears (disabled) the Element identified by ExternalTimeRef.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& clearExternalTimeRef() = 0;

  /** Returns the value of the SimplePrimitive data type identified by NetworkTime.
    *
    * @return The value of the simple primitive data type identified by NetworkTime.
    */
  virtual uci::type::DateTimeTypeValue getNetworkTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by NetworkTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& setNetworkTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by NetworkTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NetworkTime is enabled or not.
    */
  virtual bool hasNetworkTime() const = 0;

  /** Clears (disabled) the Element identified by NetworkTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& clearNetworkTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by NetworkTimeUncertaintyRange.
    *
    * @return The value of the simple primitive data type identified by NetworkTimeUncertaintyRange.
    */
  virtual xs::Float getNetworkTimeUncertaintyRange() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by NetworkTimeUncertaintyRange.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& setNetworkTimeUncertaintyRange(xs::Float value) = 0;

  /** Returns whether the Element identified by NetworkTimeUncertaintyRange exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NetworkTimeUncertaintyRange is enabled or not.
    */
  virtual bool hasNetworkTimeUncertaintyRange() const = 0;

  /** Clears (disabled) the Element identified by NetworkTimeUncertaintyRange.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& clearNetworkTimeUncertaintyRange() = 0;

  /** Returns the value of the SimplePrimitive data type identified by NetworkTimeOffset.
    *
    * @return The value of the simple primitive data type identified by NetworkTimeOffset.
    */
  virtual uci::type::DurationTypeValue getNetworkTimeOffset() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by NetworkTimeOffset.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& setNetworkTimeOffset(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by NetworkTimeOffset exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NetworkTimeOffset is enabled or not.
    */
  virtual bool hasNetworkTimeOffset() const = 0;

  /** Clears (disabled) the Element identified by NetworkTimeOffset.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommConnectionType& clearNetworkTimeOffset() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CommConnectionType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommConnectionType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommConnectionType to copy from.
    */
  CommConnectionType(const CommConnectionType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CommConnectionType to the contents of the CommConnectionType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CommConnectionType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this CommConnectionType.
    * @return A reference to this CommConnectionType.
    */
  CommConnectionType& operator=(const CommConnectionType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMMCONNECTIONTYPE_H

