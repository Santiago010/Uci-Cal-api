/** @file AirfieldRunwayType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_AIRFIELDRUNWAYTYPE_H
#define UCI_TYPE_AIRFIELDRUNWAYTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/AnglePositiveType.h"
#include "uci/type/ApproachLightingEnum.h"
#include "uci/type/ArresterWiresEnum.h"
#include "uci/type/BrakingActionEnum.h"
#include "uci/type/DistanceType.h"
#include "uci/type/EmptyType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/RunwayCoordinatesType.h"
#include "uci/type/RunwayID_Type.h"
#include "uci/type/RunwayStatusEnum.h"
#include "uci/type/RunwayUsageDetailsType.h"
#include "uci/type/SafeAltitudeType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See the annotation in the associated message airfield runway data. */
class AirfieldRunwayType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new AirfieldRunwayType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AirfieldRunwayType.
    */
  static UCI_EXPORT AirfieldRunwayType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new AirfieldRunwayType initializing the data accessed by the new AirfieldRunwayType using
    * the data accessed by the specified AirfieldRunwayType (cloning).
    *
    * @param accessor The AirfieldRunwayType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created AirfieldRunwayType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AirfieldRunwayType.
    */
  static UCI_EXPORT AirfieldRunwayType& create(const AirfieldRunwayType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified AirfieldRunwayType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The AirfieldRunwayType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(AirfieldRunwayType& accessor);

  /** Returns this accessor's type constant, i.e. airfieldRunwayType.
    *
    * @return This accessor's type constant, i.e. airfieldRunwayType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::airfieldRunwayType;
  }

  /** Returns the version that was initialized from the uci:version attribute of AirfieldRunwayType.
    *
    * @return The version that was initialized from the uci:version attribute of AirfieldRunwayType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AirfieldRunwayType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RunwayID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RunwayID.
    */
  virtual const uci::type::RunwayID_Type& getRunwayID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RunwayID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RunwayID.
    */
  virtual uci::type::RunwayID_Type& getRunwayID() = 0;

  /** Sets the complex content identified by RunwayID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RunwayID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setRunwayID(const uci::type::RunwayID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by SecondaryIndicator.
    *
    * @return A const reference to the accessor that provides access to the string identified by SecondaryIndicator.
    */
  virtual const uci::type::EmptyType& getSecondaryIndicator() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by SecondaryIndicator.
    *
    * @return A reference to the accessor that provides access to the string identified by SecondaryIndicator.
    */
  virtual uci::type::EmptyType& getSecondaryIndicator() = 0;

  /** Sets the string identified by SecondaryIndicator to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by SecondaryIndicator.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setSecondaryIndicator(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by SecondaryIndicator to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setSecondaryIndicator(const std::string& value) = 0;

  /** Sets the string identified by SecondaryIndicator to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setSecondaryIndicator(const char* value) = 0;

  /** Returns whether the Element identified by SecondaryIndicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SecondaryIndicator is enabled or not.
    */
  virtual bool hasSecondaryIndicator() const = 0;

  /** Enables the Element identified by SecondaryIndicator.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by SecondaryIndicator.
    */
  virtual uci::type::EmptyType& enableSecondaryIndicator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SecondaryIndicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearSecondaryIndicator() = 0;

  /** Returns a const reference to the value of the enumeration identified by Status.
    *
    * @return A const reference to the value of the enumeration identified by Status.
    */
  virtual const uci::type::RunwayStatusEnum& getStatus() const = 0;

  /** Returns a reference to the value of the enumeration identified by Status.
    *
    * @return A reference to the value of the enumeration identified by Status.
    */
  virtual uci::type::RunwayStatusEnum& getStatus() = 0;

  /** Sets the value of the enumeration identified by Status.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setStatus(const uci::type::RunwayStatusEnum& value) = 0;

  /** Sets the value of the enumeration identified by Status.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setStatus(uci::type::RunwayStatusEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Status exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Status is enabled or not.
    */
  virtual bool hasStatus() const = 0;

  /** Enables the Element identified by Status.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Status.
    */
  virtual uci::type::RunwayStatusEnum& enableStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Status.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearStatus() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Direction.
    *
    * @return The value of the simple primitive data type identified by Direction.
    */
  virtual uci::type::AnglePositiveTypeValue getDirection() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Direction.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setDirection(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by Direction exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Direction is enabled or not.
    */
  virtual bool hasDirection() const = 0;

  /** Clears (disabled) the Element identified by Direction.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearDirection() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AvailableLength.
    *
    * @return The value of the simple primitive data type identified by AvailableLength.
    */
  virtual uci::type::DistanceTypeValue getAvailableLength() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AvailableLength.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setAvailableLength(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by AvailableLength exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AvailableLength is enabled or not.
    */
  virtual bool hasAvailableLength() const = 0;

  /** Clears (disabled) the Element identified by AvailableLength.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearAvailableLength() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by GCA.
    *
    * @return A const reference to the accessor that provides access to the string identified by GCA.
    */
  virtual const uci::type::EmptyType& getGCA() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by GCA.
    *
    * @return A reference to the accessor that provides access to the string identified by GCA.
    */
  virtual uci::type::EmptyType& getGCA() = 0;

  /** Sets the string identified by GCA to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by GCA.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setGCA(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by GCA to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setGCA(const std::string& value) = 0;

  /** Sets the string identified by GCA to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setGCA(const char* value) = 0;

  /** Returns whether the Element identified by GCA exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by GCA is enabled or not.
    */
  virtual bool hasGCA() const = 0;

  /** Enables the Element identified by GCA.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by GCA.
    */
  virtual uci::type::EmptyType& enableGCA(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by GCA.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearGCA() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ILS.
    *
    * @return A const reference to the accessor that provides access to the string identified by ILS.
    */
  virtual const uci::type::EmptyType& getILS() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ILS.
    *
    * @return A reference to the accessor that provides access to the string identified by ILS.
    */
  virtual uci::type::EmptyType& getILS() = 0;

  /** Sets the string identified by ILS to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ILS.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setILS(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by ILS to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setILS(const std::string& value) = 0;

  /** Sets the string identified by ILS to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setILS(const char* value) = 0;

  /** Returns whether the Element identified by ILS exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ILS is enabled or not.
    */
  virtual bool hasILS() const = 0;

  /** Enables the Element identified by ILS.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ILS.
    */
  virtual uci::type::EmptyType& enableILS(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ILS.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearILS() = 0;

  /** Returns a const reference to the value of the enumeration identified by ApproachLighting.
    *
    * @return A const reference to the value of the enumeration identified by ApproachLighting.
    */
  virtual const uci::type::ApproachLightingEnum& getApproachLighting() const = 0;

  /** Returns a reference to the value of the enumeration identified by ApproachLighting.
    *
    * @return A reference to the value of the enumeration identified by ApproachLighting.
    */
  virtual uci::type::ApproachLightingEnum& getApproachLighting() = 0;

  /** Sets the value of the enumeration identified by ApproachLighting.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setApproachLighting(const uci::type::ApproachLightingEnum& value) = 0;

  /** Sets the value of the enumeration identified by ApproachLighting.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setApproachLighting(uci::type::ApproachLightingEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ApproachLighting exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ApproachLighting is enabled or not.
    */
  virtual bool hasApproachLighting() const = 0;

  /** Enables the Element identified by ApproachLighting.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ApproachLighting.
    */
  virtual uci::type::ApproachLightingEnum& enableApproachLighting(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ApproachLighting.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearApproachLighting() = 0;

  /** Returns a const reference to the value of the enumeration identified by ArresterWires.
    *
    * @return A const reference to the value of the enumeration identified by ArresterWires.
    */
  virtual const uci::type::ArresterWiresEnum& getArresterWires() const = 0;

  /** Returns a reference to the value of the enumeration identified by ArresterWires.
    *
    * @return A reference to the value of the enumeration identified by ArresterWires.
    */
  virtual uci::type::ArresterWiresEnum& getArresterWires() = 0;

  /** Sets the value of the enumeration identified by ArresterWires.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setArresterWires(const uci::type::ArresterWiresEnum& value) = 0;

  /** Sets the value of the enumeration identified by ArresterWires.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setArresterWires(uci::type::ArresterWiresEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ArresterWires exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ArresterWires is enabled or not.
    */
  virtual bool hasArresterWires() const = 0;

  /** Enables the Element identified by ArresterWires.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ArresterWires.
    */
  virtual uci::type::ArresterWiresEnum& enableArresterWires(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ArresterWires.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearArresterWires() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ArresterBarrier.
    *
    * @return A const reference to the accessor that provides access to the string identified by ArresterBarrier.
    */
  virtual const uci::type::EmptyType& getArresterBarrier() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ArresterBarrier.
    *
    * @return A reference to the accessor that provides access to the string identified by ArresterBarrier.
    */
  virtual uci::type::EmptyType& getArresterBarrier() = 0;

  /** Sets the string identified by ArresterBarrier to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ArresterBarrier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setArresterBarrier(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by ArresterBarrier to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setArresterBarrier(const std::string& value) = 0;

  /** Sets the string identified by ArresterBarrier to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setArresterBarrier(const char* value) = 0;

  /** Returns whether the Element identified by ArresterBarrier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ArresterBarrier is enabled or not.
    */
  virtual bool hasArresterBarrier() const = 0;

  /** Enables the Element identified by ArresterBarrier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ArresterBarrier.
    */
  virtual uci::type::EmptyType& enableArresterBarrier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ArresterBarrier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearArresterBarrier() = 0;

  /** Returns a const reference to the value of the enumeration identified by BrakingAction.
    *
    * @return A const reference to the value of the enumeration identified by BrakingAction.
    */
  virtual const uci::type::BrakingActionEnum& getBrakingAction() const = 0;

  /** Returns a reference to the value of the enumeration identified by BrakingAction.
    *
    * @return A reference to the value of the enumeration identified by BrakingAction.
    */
  virtual uci::type::BrakingActionEnum& getBrakingAction() = 0;

  /** Sets the value of the enumeration identified by BrakingAction.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setBrakingAction(const uci::type::BrakingActionEnum& value) = 0;

  /** Sets the value of the enumeration identified by BrakingAction.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setBrakingAction(uci::type::BrakingActionEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by BrakingAction exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BrakingAction is enabled or not.
    */
  virtual bool hasBrakingAction() const = 0;

  /** Enables the Element identified by BrakingAction.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by BrakingAction.
    */
  virtual uci::type::BrakingActionEnum& enableBrakingAction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by BrakingAction.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearBrakingAction() = 0;

  /** Returns the value of the SimplePrimitive data type identified by VisualRange.
    *
    * @return The value of the simple primitive data type identified by VisualRange.
    */
  virtual uci::type::DistanceTypeValue getVisualRange() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by VisualRange.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setVisualRange(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by VisualRange exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VisualRange is enabled or not.
    */
  virtual bool hasVisualRange() const = 0;

  /** Clears (disabled) the Element identified by VisualRange.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearVisualRange() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * TakeoffCoordinates.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      TakeoffCoordinates.
    */
  virtual const uci::type::RunwayCoordinatesType& getTakeoffCoordinates() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TakeoffCoordinates.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TakeoffCoordinates.
    */
  virtual uci::type::RunwayCoordinatesType& getTakeoffCoordinates() = 0;

  /** Sets the complex content identified by TakeoffCoordinates to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TakeoffCoordinates.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setTakeoffCoordinates(const uci::type::RunwayCoordinatesType& value) = 0;

  /** Returns whether the Element identified by TakeoffCoordinates exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TakeoffCoordinates is enabled or not.
    */
  virtual bool hasTakeoffCoordinates() const = 0;

  /** Enables the Element identified by TakeoffCoordinates.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TakeoffCoordinates.
    */
  virtual uci::type::RunwayCoordinatesType& enableTakeoffCoordinates(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TakeoffCoordinates.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearTakeoffCoordinates() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * LandingCoordinates.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      LandingCoordinates.
    */
  virtual const uci::type::RunwayCoordinatesType& getLandingCoordinates() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LandingCoordinates.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LandingCoordinates.
    */
  virtual uci::type::RunwayCoordinatesType& getLandingCoordinates() = 0;

  /** Sets the complex content identified by LandingCoordinates to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LandingCoordinates.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setLandingCoordinates(const uci::type::RunwayCoordinatesType& value) = 0;

  /** Returns whether the Element identified by LandingCoordinates exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LandingCoordinates is enabled or not.
    */
  virtual bool hasLandingCoordinates() const = 0;

  /** Enables the Element identified by LandingCoordinates.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by LandingCoordinates.
    */
  virtual uci::type::RunwayCoordinatesType& enableLandingCoordinates(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LandingCoordinates.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearLandingCoordinates() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * DefaultRunwayUsageDetails.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      DefaultRunwayUsageDetails.
    */
  virtual const uci::type::RunwayUsageDetailsType& getDefaultRunwayUsageDetails() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * DefaultRunwayUsageDetails.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      DefaultRunwayUsageDetails.
    */
  virtual uci::type::RunwayUsageDetailsType& getDefaultRunwayUsageDetails() = 0;

  /** Sets the complex content identified by DefaultRunwayUsageDetails to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DefaultRunwayUsageDetails.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setDefaultRunwayUsageDetails(const uci::type::RunwayUsageDetailsType& value) = 0;

  /** Returns whether the Element identified by DefaultRunwayUsageDetails exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DefaultRunwayUsageDetails is enabled or not.
    */
  virtual bool hasDefaultRunwayUsageDetails() const = 0;

  /** Enables the Element identified by DefaultRunwayUsageDetails.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      DefaultRunwayUsageDetails.
    */
  virtual uci::type::RunwayUsageDetailsType& enableDefaultRunwayUsageDetails(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DefaultRunwayUsageDetails.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearDefaultRunwayUsageDetails() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SafeAltitude.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SafeAltitude.
    */
  virtual const uci::type::SafeAltitudeType& getSafeAltitude() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SafeAltitude.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SafeAltitude.
    */
  virtual uci::type::SafeAltitudeType& getSafeAltitude() = 0;

  /** Sets the complex content identified by SafeAltitude to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SafeAltitude.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setSafeAltitude(const uci::type::SafeAltitudeType& value) = 0;

  /** Returns whether the Element identified by SafeAltitude exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SafeAltitude is enabled or not.
    */
  virtual bool hasSafeAltitude() const = 0;

  /** Enables the Element identified by SafeAltitude.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SafeAltitude.
    */
  virtual uci::type::SafeAltitudeType& enableSafeAltitude(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SafeAltitude.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearSafeAltitude() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * DAFIF_RunwayIdentifier.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      DAFIF_RunwayIdentifier.
    */
  virtual const uci::type::ForeignKeyType& getDAFIF_RunwayIdentifier() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DAFIF_RunwayIdentifier.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DAFIF_RunwayIdentifier.
    */
  virtual uci::type::ForeignKeyType& getDAFIF_RunwayIdentifier() = 0;

  /** Sets the complex content identified by DAFIF_RunwayIdentifier to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DAFIF_RunwayIdentifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& setDAFIF_RunwayIdentifier(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by DAFIF_RunwayIdentifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DAFIF_RunwayIdentifier is enabled or not.
    */
  virtual bool hasDAFIF_RunwayIdentifier() const = 0;

  /** Enables the Element identified by DAFIF_RunwayIdentifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DAFIF_RunwayIdentifier.
    */
  virtual uci::type::ForeignKeyType& enableDAFIF_RunwayIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DAFIF_RunwayIdentifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldRunwayType& clearDAFIF_RunwayIdentifier() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AirfieldRunwayType() {
  }

  /** The destructor [only available to derived classes]. */
  ~AirfieldRunwayType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AirfieldRunwayType to copy from.
    */
  AirfieldRunwayType(const AirfieldRunwayType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AirfieldRunwayType to the contents of the AirfieldRunwayType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The AirfieldRunwayType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this AirfieldRunwayType.
    * @return A reference to this AirfieldRunwayType.
    */
  AirfieldRunwayType& operator=(const AirfieldRunwayType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_AIRFIELDRUNWAYTYPE_H

