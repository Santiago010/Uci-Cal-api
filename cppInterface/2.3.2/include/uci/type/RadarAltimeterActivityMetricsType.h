/** @file RadarAltimeterActivityMetricsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_RADARALTIMETERACTIVITYMETRICSTYPE_H
#define UCI_TYPE_RADARALTIMETERACTIVITYMETRICSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/ConcurrentCollectionDetailsType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/DecibelType.h"
#include "uci/type/DurationType.h"
#include "uci/type/PercentType.h"
#include "uci/type/RadarAltimeterActivityEstimatedPerformanceType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Specific performance metrics that provide the system insight regarding the progress of an activity, description of
  * the results of an activity and related stats. This is a list to provide reporting for all revisits between activity
  * messages.
  */
class RadarAltimeterActivityMetricsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RadarAltimeterActivityMetricsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RadarAltimeterActivityMetricsType.
    */
  static UCI_EXPORT RadarAltimeterActivityMetricsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RadarAltimeterActivityMetricsType initializing the data accessed by the new
    * RadarAltimeterActivityMetricsType using the data accessed by the specified RadarAltimeterActivityMetricsType
    * (cloning).
    *
    * @param accessor The RadarAltimeterActivityMetricsType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created RadarAltimeterActivityMetricsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RadarAltimeterActivityMetricsType.
    */
  static UCI_EXPORT RadarAltimeterActivityMetricsType& create(const RadarAltimeterActivityMetricsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RadarAltimeterActivityMetricsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The RadarAltimeterActivityMetricsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RadarAltimeterActivityMetricsType& accessor);

  /** Returns this accessor's type constant, i.e. radarAltimeterActivityMetricsType.
    *
    * @return This accessor's type constant, i.e. radarAltimeterActivityMetricsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::radarAltimeterActivityMetricsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of RadarAltimeterActivityMetricsType.
    *
    * @return The version that was initialized from the uci:version attribute of RadarAltimeterActivityMetricsType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RadarAltimeterActivityMetricsType& accessor) = 0;

  /** This is the list of other activities that were executed concurrently with this activity. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ConcurrentCollectionDetailsType, uci::type::accessorType::concurrentCollectionDetailsType> ConcurrentActivity;

  /** Estimated performance of the activity. [Occurrences: Minimum: 0; Maximum: 5] */
  typedef uci::base::BoundedList<uci::type::RadarAltimeterActivityEstimatedPerformanceType, uci::type::accessorType::radarAltimeterActivityEstimatedPerformanceType> EstimatedPerformance;

  /** Returns the value of the SimplePrimitive data type identified by Attempts.
    *
    * @return The value of the simple primitive data type identified by Attempts.
    */
  virtual xs::UnsignedInt getAttempts() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Attempts.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& setAttempts(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by Attempts exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Attempts is enabled or not.
    */
  virtual bool hasAttempts() const = 0;

  /** Clears (disabled) the Element identified by Attempts.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& clearAttempts() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ActualRevisitPeriod.
    *
    * @return The value of the simple primitive data type identified by ActualRevisitPeriod.
    */
  virtual uci::type::DurationTypeValue getActualRevisitPeriod() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ActualRevisitPeriod.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& setActualRevisitPeriod(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by ActualRevisitPeriod exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActualRevisitPeriod is enabled or not.
    */
  virtual bool hasActualRevisitPeriod() const = 0;

  /** Clears (disabled) the Element identified by ActualRevisitPeriod.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& clearActualRevisitPeriod() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ActualStartTime.
    *
    * @return The value of the simple primitive data type identified by ActualStartTime.
    */
  virtual uci::type::DateTimeTypeValue getActualStartTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ActualStartTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& setActualStartTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by ActualStartTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActualStartTime is enabled or not.
    */
  virtual bool hasActualStartTime() const = 0;

  /** Clears (disabled) the Element identified by ActualStartTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& clearActualStartTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ActualStopTime.
    *
    * @return The value of the simple primitive data type identified by ActualStopTime.
    */
  virtual uci::type::DateTimeTypeValue getActualStopTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ActualStopTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& setActualStopTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by ActualStopTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActualStopTime is enabled or not.
    */
  virtual bool hasActualStopTime() const = 0;

  /** Clears (disabled) the Element identified by ActualStopTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& clearActualStopTime() = 0;

  /** Returns a const reference to the bounded list identified by ConcurrentActivity.
    *
    * @return A const reference to the bounded list identified by ConcurrentActivity.
    */
  virtual const uci::type::RadarAltimeterActivityMetricsType::ConcurrentActivity& getConcurrentActivity() const = 0;

  /** Returns a reference to the bounded list identified by ConcurrentActivity.
    *
    * @return A reference to the bounded list identified by ConcurrentActivity.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType::ConcurrentActivity& getConcurrentActivity() = 0;

  /** Sets the bounded list identified by ConcurrentActivity.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& setConcurrentActivity(const uci::type::RadarAltimeterActivityMetricsType::ConcurrentActivity& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by PercentRadarTimeline.
    *
    * @return The value of the simple primitive data type identified by PercentRadarTimeline.
    */
  virtual uci::type::PercentTypeValue getPercentRadarTimeline() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PercentRadarTimeline.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& setPercentRadarTimeline(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by PercentRadarTimeline exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PercentRadarTimeline is enabled or not.
    */
  virtual bool hasPercentRadarTimeline() const = 0;

  /** Clears (disabled) the Element identified by PercentRadarTimeline.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& clearPercentRadarTimeline() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PercentageInFOV.
    *
    * @return The value of the simple primitive data type identified by PercentageInFOV.
    */
  virtual uci::type::PercentTypeValue getPercentageInFOV() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PercentageInFOV.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& setPercentageInFOV(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by PercentageInFOV exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PercentageInFOV is enabled or not.
    */
  virtual bool hasPercentageInFOV() const = 0;

  /** Clears (disabled) the Element identified by PercentageInFOV.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& clearPercentageInFOV() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EstimatedERP.
    *
    * @return The value of the simple primitive data type identified by EstimatedERP.
    */
  virtual uci::type::DecibelTypeValue getEstimatedERP() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EstimatedERP.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& setEstimatedERP(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by EstimatedERP exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedERP is enabled or not.
    */
  virtual bool hasEstimatedERP() const = 0;

  /** Clears (disabled) the Element identified by EstimatedERP.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& clearEstimatedERP() = 0;

  /** Returns a const reference to the bounded list identified by EstimatedPerformance.
    *
    * @return A const reference to the bounded list identified by EstimatedPerformance.
    */
  virtual const uci::type::RadarAltimeterActivityMetricsType::EstimatedPerformance& getEstimatedPerformance() const = 0;

  /** Returns a reference to the bounded list identified by EstimatedPerformance.
    *
    * @return A reference to the bounded list identified by EstimatedPerformance.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType::EstimatedPerformance& getEstimatedPerformance() = 0;

  /** Sets the bounded list identified by EstimatedPerformance.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& setEstimatedPerformance(const uci::type::RadarAltimeterActivityMetricsType::EstimatedPerformance& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by TimeToService.
    *
    * @return The value of the simple primitive data type identified by TimeToService.
    */
  virtual uci::type::DurationTypeValue getTimeToService() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TimeToService.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& setTimeToService(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by TimeToService exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TimeToService is enabled or not.
    */
  virtual bool hasTimeToService() const = 0;

  /** Clears (disabled) the Element identified by TimeToService.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& clearTimeToService() = 0;

  /** Returns the value of the SimplePrimitive data type identified by LastTimeToService.
    *
    * @return The value of the simple primitive data type identified by LastTimeToService.
    */
  virtual uci::type::DurationTypeValue getLastTimeToService() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LastTimeToService.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& setLastTimeToService(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by LastTimeToService exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LastTimeToService is enabled or not.
    */
  virtual bool hasLastTimeToService() const = 0;

  /** Clears (disabled) the Element identified by LastTimeToService.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& clearLastTimeToService() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AverageTimeToService.
    *
    * @return The value of the simple primitive data type identified by AverageTimeToService.
    */
  virtual uci::type::DurationTypeValue getAverageTimeToService() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AverageTimeToService.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& setAverageTimeToService(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by AverageTimeToService exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AverageTimeToService is enabled or not.
    */
  virtual bool hasAverageTimeToService() const = 0;

  /** Clears (disabled) the Element identified by AverageTimeToService.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& clearAverageTimeToService() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RadarAltimeterActivityMetricsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~RadarAltimeterActivityMetricsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RadarAltimeterActivityMetricsType to copy from.
    */
  RadarAltimeterActivityMetricsType(const RadarAltimeterActivityMetricsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RadarAltimeterActivityMetricsType to the contents of the
    * RadarAltimeterActivityMetricsType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The RadarAltimeterActivityMetricsType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this RadarAltimeterActivityMetricsType.
    * @return A reference to this RadarAltimeterActivityMetricsType.
    */
  RadarAltimeterActivityMetricsType& operator=(const RadarAltimeterActivityMetricsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_RADARALTIMETERACTIVITYMETRICSTYPE_H

