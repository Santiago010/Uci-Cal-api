/** @file AO_SettingsCommandMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_AO_SETTINGSCOMMANDMDT_H
#define UCI_TYPE_AO_SETTINGSCOMMANDMDT_H

#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AO_ComponentSettingsType.h"
#include "AO_MessageOutputsEnum.h"
#include "CapabilitySettingsCommandBaseType.h"
#include "JPEG_SettingsType.h"
#include "NITF_PackingPlanPET.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class AO_SettingsCommandMDT : public virtual CapabilitySettingsCommandBaseType {
public:

  /** This method constructs a new AO_SettingsCommandMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AO_SettingsCommandMDT.
    */
  static UCI_EXPORT AO_SettingsCommandMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new AO_SettingsCommandMDT initializing the data accessed by the new AO_SettingsCommandMDT
    * using the data accessed by the specified AO_SettingsCommandMDT (cloning).
    *
    * @param accessor The AO_SettingsCommandMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created AO_SettingsCommandMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AO_SettingsCommandMDT.
    */
  static UCI_EXPORT AO_SettingsCommandMDT& create(const AO_SettingsCommandMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified AO_SettingsCommandMDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The AO_SettingsCommandMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(AO_SettingsCommandMDT& accessor);

  /** Returns this accessor's type constant, i.e. aO_SettingsCommandMDT.
    *
    * @return This accessor's type constant, i.e. aO_SettingsCommandMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::aO_SettingsCommandMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of AO_SettingsCommandMDT.
    *
    * @return The version that was initialized from the uci:version attribute of AO_SettingsCommandMDT.
    */
  static std::string getUCITypeVersion() {
    return "001.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AO_SettingsCommandMDT& accessor) = 0;

  /** Describes the AO Component settings. This is used to change the set/default settings for the component prior to an
    * AO_Command and/or AO_Activity. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::AO_ComponentSettingsType, uci::type::accessorType::aO_ComponentSettingsType> AO_ComponentSettings;

  /** Specifies which messages are to be output by the Capability as the result of capability commands. Note: Only values
    * advertised in the Capability message are allowed. Any non-supported values should result in rejection of the settings
    * command. List size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum:
    * 2]
    */
  typedef uci::base::BoundedList<uci::type::AO_MessageOutputsEnum, uci::type::accessorType::aO_MessageOutputsEnum> MessageOutput;

  /** Returns a const reference to the bounded list identified by AO_ComponentSettings.
    *
    * @return A const reference to the bounded list identified by AO_ComponentSettings.
    */
  virtual const uci::type::AO_SettingsCommandMDT::AO_ComponentSettings& getAO_ComponentSettings() const = 0;

  /** Returns a reference to the bounded list identified by AO_ComponentSettings.
    *
    * @return A reference to the bounded list identified by AO_ComponentSettings.
    */
  virtual uci::type::AO_SettingsCommandMDT::AO_ComponentSettings& getAO_ComponentSettings() = 0;

  /** Sets the bounded list identified by AO_ComponentSettings.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_SettingsCommandMDT& setAO_ComponentSettings(const uci::type::AO_SettingsCommandMDT::AO_ComponentSettings& value) = 0;

  /** Returns a const reference to the bounded list identified by MessageOutput.
    *
    * @return A const reference to the bounded list identified by MessageOutput.
    */
  virtual const uci::type::AO_SettingsCommandMDT::MessageOutput& getMessageOutput() const = 0;

  /** Returns a reference to the bounded list identified by MessageOutput.
    *
    * @return A reference to the bounded list identified by MessageOutput.
    */
  virtual uci::type::AO_SettingsCommandMDT::MessageOutput& getMessageOutput() = 0;

  /** Sets the bounded list identified by MessageOutput.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_SettingsCommandMDT& setMessageOutput(const uci::type::AO_SettingsCommandMDT::MessageOutput& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * DefaultPackingPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      DefaultPackingPlan.
    */
  virtual const uci::type::NITF_PackingPlanPET& getDefaultPackingPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DefaultPackingPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DefaultPackingPlan.
    */
  virtual uci::type::NITF_PackingPlanPET& getDefaultPackingPlan() = 0;

  /** Sets the complex content identified by DefaultPackingPlan to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DefaultPackingPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_SettingsCommandMDT& setDefaultPackingPlan(const uci::type::NITF_PackingPlanPET& value) = 0;

  /** Returns whether the Element identified by DefaultPackingPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DefaultPackingPlan is enabled or not.
    */
  virtual bool hasDefaultPackingPlan() const = 0;

  /** Enables the Element identified by DefaultPackingPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DefaultPackingPlan.
    */
  virtual uci::type::NITF_PackingPlanPET& enableDefaultPackingPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DefaultPackingPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_SettingsCommandMDT& clearDefaultPackingPlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * DefaultJPEG_Settings.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      DefaultJPEG_Settings.
    */
  virtual const uci::type::JPEG_SettingsType& getDefaultJPEG_Settings() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DefaultJPEG_Settings.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DefaultJPEG_Settings.
    */
  virtual uci::type::JPEG_SettingsType& getDefaultJPEG_Settings() = 0;

  /** Sets the complex content identified by DefaultJPEG_Settings to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DefaultJPEG_Settings.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_SettingsCommandMDT& setDefaultJPEG_Settings(const uci::type::JPEG_SettingsType& value) = 0;

  /** Returns whether the Element identified by DefaultJPEG_Settings exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DefaultJPEG_Settings is enabled or not.
    */
  virtual bool hasDefaultJPEG_Settings() const = 0;

  /** Enables the Element identified by DefaultJPEG_Settings.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DefaultJPEG_Settings.
    */
  virtual uci::type::JPEG_SettingsType& enableDefaultJPEG_Settings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DefaultJPEG_Settings.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_SettingsCommandMDT& clearDefaultJPEG_Settings() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AO_SettingsCommandMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~AO_SettingsCommandMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AO_SettingsCommandMDT to copy from.
    */
  AO_SettingsCommandMDT(const AO_SettingsCommandMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AO_SettingsCommandMDT to the contents of the AO_SettingsCommandMDT
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The AO_SettingsCommandMDT on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this AO_SettingsCommandMDT.
    * @return A reference to this AO_SettingsCommandMDT.
    */
  AO_SettingsCommandMDT& operator=(const AO_SettingsCommandMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_AO_SETTINGSCOMMANDMDT_H

