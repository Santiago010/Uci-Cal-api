/** @file CommLinkStatisticsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMLINKSTATISTICSTYPE_H
#define UCI_TYPE_COMMLINKSTATISTICSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/export.h"
#include "uci/type/DataRateType.h"
#include "uci/type/DecibelType.h"
#include "uci/type/DurationType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/NetworkLinkID_Type.h"
#include "uci/type/PercentType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Utilized to report current statistics of a link on a communications capability. */
class CommLinkStatisticsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CommLinkStatisticsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommLinkStatisticsType.
    */
  static UCI_EXPORT CommLinkStatisticsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CommLinkStatisticsType initializing the data accessed by the new CommLinkStatisticsType
    * using the data accessed by the specified CommLinkStatisticsType (cloning).
    *
    * @param accessor The CommLinkStatisticsType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created CommLinkStatisticsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommLinkStatisticsType.
    */
  static UCI_EXPORT CommLinkStatisticsType& create(const CommLinkStatisticsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CommLinkStatisticsType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The CommLinkStatisticsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CommLinkStatisticsType& accessor);

  /** Returns this accessor's type constant, i.e. commLinkStatisticsType.
    *
    * @return This accessor's type constant, i.e. commLinkStatisticsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commLinkStatisticsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CommLinkStatisticsType.
    *
    * @return The version that was initialized from the uci:version attribute of CommLinkStatisticsType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CommLinkStatisticsType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by NetworkLinkID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by NetworkLinkID.
    */
  virtual const uci::type::NetworkLinkID_Type& getNetworkLinkID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by NetworkLinkID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by NetworkLinkID.
    */
  virtual uci::type::NetworkLinkID_Type& getNetworkLinkID() = 0;

  /** Sets the complex content identified by NetworkLinkID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by NetworkLinkID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& setNetworkLinkID(const uci::type::NetworkLinkID_Type& value) = 0;

  /** Returns whether the Element identified by NetworkLinkID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NetworkLinkID is enabled or not.
    */
  virtual bool hasNetworkLinkID() const = 0;

  /** Enables the Element identified by NetworkLinkID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by NetworkLinkID.
    */
  virtual uci::type::NetworkLinkID_Type& enableNetworkLinkID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by NetworkLinkID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& clearNetworkLinkID() = 0;

  /** Returns the value of the SimplePrimitive data type identified by CarrierToNoiseRatio.
    *
    * @return The value of the simple primitive data type identified by CarrierToNoiseRatio.
    */
  virtual uci::type::DecibelTypeValue getCarrierToNoiseRatio() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CarrierToNoiseRatio.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& setCarrierToNoiseRatio(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by CarrierToNoiseRatio exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CarrierToNoiseRatio is enabled or not.
    */
  virtual bool hasCarrierToNoiseRatio() const = 0;

  /** Clears (disabled) the Element identified by CarrierToNoiseRatio.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& clearCarrierToNoiseRatio() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SignalToNoiseRatio.
    *
    * @return The value of the simple primitive data type identified by SignalToNoiseRatio.
    */
  virtual uci::type::DecibelTypeValue getSignalToNoiseRatio() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SignalToNoiseRatio.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& setSignalToNoiseRatio(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by SignalToNoiseRatio exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SignalToNoiseRatio is enabled or not.
    */
  virtual bool hasSignalToNoiseRatio() const = 0;

  /** Clears (disabled) the Element identified by SignalToNoiseRatio.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& clearSignalToNoiseRatio() = 0;

  /** Returns the value of the SimplePrimitive data type identified by CurrentDataRate.
    *
    * @return The value of the simple primitive data type identified by CurrentDataRate.
    */
  virtual uci::type::DataRateTypeValue getCurrentDataRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CurrentDataRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& setCurrentDataRate(uci::type::DataRateTypeValue value) = 0;

  /** Returns whether the Element identified by CurrentDataRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CurrentDataRate is enabled or not.
    */
  virtual bool hasCurrentDataRate() const = 0;

  /** Clears (disabled) the Element identified by CurrentDataRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& clearCurrentDataRate() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MessageErrorRate.
    *
    * @return The value of the simple primitive data type identified by MessageErrorRate.
    */
  virtual uci::type::PercentTypeValue getMessageErrorRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MessageErrorRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& setMessageErrorRate(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by MessageErrorRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MessageErrorRate is enabled or not.
    */
  virtual bool hasMessageErrorRate() const = 0;

  /** Clears (disabled) the Element identified by MessageErrorRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& clearMessageErrorRate() = 0;

  /** Returns the value of the SimplePrimitive data type identified by BitErrorRate.
    *
    * @return The value of the simple primitive data type identified by BitErrorRate.
    */
  virtual uci::type::PercentTypeValue getBitErrorRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by BitErrorRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& setBitErrorRate(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by BitErrorRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BitErrorRate is enabled or not.
    */
  virtual bool hasBitErrorRate() const = 0;

  /** Clears (disabled) the Element identified by BitErrorRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& clearBitErrorRate() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TxLatency.
    *
    * @return The value of the simple primitive data type identified by TxLatency.
    */
  virtual uci::type::DurationTypeValue getTxLatency() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TxLatency.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& setTxLatency(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by TxLatency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TxLatency is enabled or not.
    */
  virtual bool hasTxLatency() const = 0;

  /** Clears (disabled) the Element identified by TxLatency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& clearTxLatency() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RxLatency.
    *
    * @return The value of the simple primitive data type identified by RxLatency.
    */
  virtual uci::type::DurationTypeValue getRxLatency() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RxLatency.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& setRxLatency(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by RxLatency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RxLatency is enabled or not.
    */
  virtual bool hasRxLatency() const = 0;

  /** Clears (disabled) the Element identified by RxLatency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& clearRxLatency() = 0;

  /** Returns the value of the SimplePrimitive data type identified by FixedDataRate.
    *
    * @return The value of the simple primitive data type identified by FixedDataRate.
    */
  virtual xs::Boolean getFixedDataRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FixedDataRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& setFixedDataRate(xs::Boolean value) = 0;

  /** Returns whether the Element identified by FixedDataRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FixedDataRate is enabled or not.
    */
  virtual bool hasFixedDataRate() const = 0;

  /** Clears (disabled) the Element identified by FixedDataRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& clearFixedDataRate() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ChannelKey.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ChannelKey.
    */
  virtual const uci::type::ForeignKeyType& getChannelKey() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ChannelKey.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ChannelKey.
    */
  virtual uci::type::ForeignKeyType& getChannelKey() = 0;

  /** Sets the complex content identified by ChannelKey to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ChannelKey.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& setChannelKey(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by ChannelKey exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ChannelKey is enabled or not.
    */
  virtual bool hasChannelKey() const = 0;

  /** Enables the Element identified by ChannelKey.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ChannelKey.
    */
  virtual uci::type::ForeignKeyType& enableChannelKey(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ChannelKey.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLinkStatisticsType& clearChannelKey() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CommLinkStatisticsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommLinkStatisticsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommLinkStatisticsType to copy from.
    */
  CommLinkStatisticsType(const CommLinkStatisticsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CommLinkStatisticsType to the contents of the
    * CommLinkStatisticsType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CommLinkStatisticsType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this CommLinkStatisticsType.
    * @return A reference to this CommLinkStatisticsType.
    */
  CommLinkStatisticsType& operator=(const CommLinkStatisticsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMMLINKSTATISTICSTYPE_H

