/** @file WorkingSOB_MDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_WORKINGSOB_MDT_H
#define UCI_TYPE_WORKINGSOB_MDT_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/DataRecordBaseType.h"
#include "uci/type/OrbitRegimeType.h"
#include "uci/type/OrderOfBattleTimestampsType.h"
#include "uci/type/SOB_C2_RecordType.h"
#include "uci/type/SOB_SatelliteRecordType.h"
#include "uci/type/WorkingSOB_ID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class WorkingSOB_MDT : public virtual DataRecordBaseType {
public:

  /** This method constructs a new WorkingSOB_MDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed WorkingSOB_MDT.
    */
  static UCI_EXPORT WorkingSOB_MDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new WorkingSOB_MDT initializing the data accessed by the new WorkingSOB_MDT using the data
    * accessed by the specified WorkingSOB_MDT (cloning).
    *
    * @param accessor The WorkingSOB_MDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created WorkingSOB_MDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed WorkingSOB_MDT.
    */
  static UCI_EXPORT WorkingSOB_MDT& create(const WorkingSOB_MDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified WorkingSOB_MDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The WorkingSOB_MDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(WorkingSOB_MDT& accessor);

  /** Returns this accessor's type constant, i.e. workingSOB_MDT.
    *
    * @return This accessor's type constant, i.e. workingSOB_MDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::workingSOB_MDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of WorkingSOB_MDT.
    *
    * @return The version that was initialized from the uci:version attribute of WorkingSOB_MDT.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const WorkingSOB_MDT& accessor) = 0;

  /** Indicates the orbit regime which the satellites corresponding to the sibling elements reside in. List size is based
    * on the number of enum values ("Select All That Apply") in OrbitRegimeEnum type. If multiple instances are given, each
    * should be of a different OrbitRegimeEnum type as indicated by the child element. [Occurrences: Minimum: 0; Maximum:
    * 11]
    */
  typedef uci::base::BoundedList<uci::type::OrbitRegimeType, uci::type::accessorType::orbitRegimeType> Orbit;

  /** Indicates a subset of satellite records from the catalog. This subset could include updates to the records that a
    * planning service would need. This record describes the characteristics of a particular satellite. [Occurrences:
    * Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SOB_SatelliteRecordType, uci::type::accessorType::sOB_SatelliteRecordType> SatelliteRecord;

  /** Indicates the attributes of the C2 node associated with the satellite or satellites. An example of a C2 node would be
    * a ground station for the satellite or satellites. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SOB_C2_RecordType, uci::type::accessorType::sOB_C2_RecordType> C2_Record;

  /** Returns a const reference to the accessor that provides access to the complex content identified by WorkingSOB_ID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by WorkingSOB_ID.
    */
  virtual const uci::type::WorkingSOB_ID_Type& getWorkingSOB_ID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by WorkingSOB_ID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by WorkingSOB_ID.
    */
  virtual uci::type::WorkingSOB_ID_Type& getWorkingSOB_ID() = 0;

  /** Sets the complex content identified by WorkingSOB_ID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by WorkingSOB_ID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WorkingSOB_MDT& setWorkingSOB_ID(const uci::type::WorkingSOB_ID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by Orbit.
    *
    * @return A const reference to the bounded list identified by Orbit.
    */
  virtual const uci::type::WorkingSOB_MDT::Orbit& getOrbit() const = 0;

  /** Returns a reference to the bounded list identified by Orbit.
    *
    * @return A reference to the bounded list identified by Orbit.
    */
  virtual uci::type::WorkingSOB_MDT::Orbit& getOrbit() = 0;

  /** Sets the bounded list identified by Orbit.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WorkingSOB_MDT& setOrbit(const uci::type::WorkingSOB_MDT::Orbit& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Timestamps.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Timestamps.
    */
  virtual const uci::type::OrderOfBattleTimestampsType& getTimestamps() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Timestamps.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Timestamps.
    */
  virtual uci::type::OrderOfBattleTimestampsType& getTimestamps() = 0;

  /** Sets the complex content identified by Timestamps to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Timestamps.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WorkingSOB_MDT& setTimestamps(const uci::type::OrderOfBattleTimestampsType& value) = 0;

  /** Returns a const reference to the bounded list identified by SatelliteRecord.
    *
    * @return A const reference to the bounded list identified by SatelliteRecord.
    */
  virtual const uci::type::WorkingSOB_MDT::SatelliteRecord& getSatelliteRecord() const = 0;

  /** Returns a reference to the bounded list identified by SatelliteRecord.
    *
    * @return A reference to the bounded list identified by SatelliteRecord.
    */
  virtual uci::type::WorkingSOB_MDT::SatelliteRecord& getSatelliteRecord() = 0;

  /** Sets the bounded list identified by SatelliteRecord.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WorkingSOB_MDT& setSatelliteRecord(const uci::type::WorkingSOB_MDT::SatelliteRecord& value) = 0;

  /** Returns a const reference to the bounded list identified by C2_Record.
    *
    * @return A const reference to the bounded list identified by C2_Record.
    */
  virtual const uci::type::WorkingSOB_MDT::C2_Record& getC2_Record() const = 0;

  /** Returns a reference to the bounded list identified by C2_Record.
    *
    * @return A reference to the bounded list identified by C2_Record.
    */
  virtual uci::type::WorkingSOB_MDT::C2_Record& getC2_Record() = 0;

  /** Sets the bounded list identified by C2_Record.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WorkingSOB_MDT& setC2_Record(const uci::type::WorkingSOB_MDT::C2_Record& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  WorkingSOB_MDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~WorkingSOB_MDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The WorkingSOB_MDT to copy from.
    */
  WorkingSOB_MDT(const WorkingSOB_MDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this WorkingSOB_MDT to the contents of the WorkingSOB_MDT on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The WorkingSOB_MDT on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this WorkingSOB_MDT.
    * @return A reference to this WorkingSOB_MDT.
    */
  WorkingSOB_MDT& operator=(const WorkingSOB_MDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_WORKINGSOB_MDT_H

