/** @file SOB_EquipmentType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SOB_EQUIPMENTTYPE_H
#define UCI_TYPE_SOB_EQUIPMENTTYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "AlphanumericString54Type.h"
#include "CountryCodeType.h"
#include "EquipmentConditionEnum.h"
#include "VisibleString128Type.h"
#include "VisibleString32Type.h"
#include "VisibleString64Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Describes a piece of equipment associated with a SOB record. */
class SOB_EquipmentType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SOB_EquipmentType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SOB_EquipmentType.
    */
  static UCI_EXPORT SOB_EquipmentType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SOB_EquipmentType initializing the data accessed by the new SOB_EquipmentType using the
    * data accessed by the specified SOB_EquipmentType (cloning).
    *
    * @param accessor The SOB_EquipmentType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SOB_EquipmentType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SOB_EquipmentType.
    */
  static UCI_EXPORT SOB_EquipmentType& create(const SOB_EquipmentType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SOB_EquipmentType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The SOB_EquipmentType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SOB_EquipmentType& accessor);

  /** Returns this accessor's type constant, i.e. sOB_EquipmentType.
    *
    * @return This accessor's type constant, i.e. sOB_EquipmentType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sOB_EquipmentType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SOB_EquipmentType.
    *
    * @return The version that was initialized from the uci:version attribute of SOB_EquipmentType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SOB_EquipmentType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by EquipmentCode.
    *
    * @return A const reference to the accessor that provides access to the string identified by EquipmentCode.
    */
  virtual const uci::type::VisibleString32Type& getEquipmentCode() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by EquipmentCode.
    *
    * @return A reference to the accessor that provides access to the string identified by EquipmentCode.
    */
  virtual uci::type::VisibleString32Type& getEquipmentCode() = 0;

  /** Sets the string identified by EquipmentCode to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by EquipmentCode.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& setEquipmentCode(const uci::type::VisibleString32Type& value) = 0;

  /** Sets the string identified by EquipmentCode to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& setEquipmentCode(const std::string& value) = 0;

  /** Sets the string identified by EquipmentCode to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& setEquipmentCode(const char* value) = 0;

  /** Returns whether the Element identified by EquipmentCode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EquipmentCode is enabled or not.
    */
  virtual bool hasEquipmentCode() const = 0;

  /** Enables the Element identified by EquipmentCode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by EquipmentCode.
    */
  virtual uci::type::VisibleString32Type& enableEquipmentCode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EquipmentCode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& clearEquipmentCode() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Manufacturer.
    *
    * @return A const reference to the accessor that provides access to the string identified by Manufacturer.
    */
  virtual const uci::type::VisibleString64Type& getManufacturer() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Manufacturer.
    *
    * @return A reference to the accessor that provides access to the string identified by Manufacturer.
    */
  virtual uci::type::VisibleString64Type& getManufacturer() = 0;

  /** Sets the string identified by Manufacturer to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Manufacturer.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& setManufacturer(const uci::type::VisibleString64Type& value) = 0;

  /** Sets the string identified by Manufacturer to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& setManufacturer(const std::string& value) = 0;

  /** Sets the string identified by Manufacturer to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& setManufacturer(const char* value) = 0;

  /** Returns whether the Element identified by Manufacturer exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Manufacturer is enabled or not.
    */
  virtual bool hasManufacturer() const = 0;

  /** Enables the Element identified by Manufacturer.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Manufacturer.
    */
  virtual uci::type::VisibleString64Type& enableManufacturer(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Manufacturer.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& clearManufacturer() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Description.
    *
    * @return A const reference to the accessor that provides access to the string identified by Description.
    */
  virtual const uci::type::VisibleString128Type& getDescription() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Description.
    *
    * @return A reference to the accessor that provides access to the string identified by Description.
    */
  virtual uci::type::VisibleString128Type& getDescription() = 0;

  /** Sets the string identified by Description to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Description.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& setDescription(const uci::type::VisibleString128Type& value) = 0;

  /** Sets the string identified by Description to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& setDescription(const std::string& value) = 0;

  /** Sets the string identified by Description to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& setDescription(const char* value) = 0;

  /** Returns whether the Element identified by Description exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Description is enabled or not.
    */
  virtual bool hasDescription() const = 0;

  /** Enables the Element identified by Description.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Description.
    */
  virtual uci::type::VisibleString128Type& enableDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Description.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& clearDescription() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CountryCode.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CountryCode.
    */
  virtual const uci::type::CountryCodeType& getCountryCode() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CountryCode.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CountryCode.
    */
  virtual uci::type::CountryCodeType& getCountryCode() = 0;

  /** Sets the complex content identified by CountryCode to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CountryCode.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& setCountryCode(const uci::type::CountryCodeType& value) = 0;

  /** Returns whether the Element identified by CountryCode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CountryCode is enabled or not.
    */
  virtual bool hasCountryCode() const = 0;

  /** Enables the Element identified by CountryCode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CountryCode.
    */
  virtual uci::type::CountryCodeType& enableCountryCode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CountryCode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& clearCountryCode() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by WSSIC_Designator.
    *
    * @return A const reference to the accessor that provides access to the string identified by WSSIC_Designator.
    */
  virtual const uci::type::AlphanumericString54Type& getWSSIC_Designator() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by WSSIC_Designator.
    *
    * @return A reference to the accessor that provides access to the string identified by WSSIC_Designator.
    */
  virtual uci::type::AlphanumericString54Type& getWSSIC_Designator() = 0;

  /** Sets the string identified by WSSIC_Designator to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by WSSIC_Designator.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& setWSSIC_Designator(const uci::type::AlphanumericString54Type& value) = 0;

  /** Sets the string identified by WSSIC_Designator to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& setWSSIC_Designator(const std::string& value) = 0;

  /** Sets the string identified by WSSIC_Designator to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& setWSSIC_Designator(const char* value) = 0;

  /** Returns whether the Element identified by WSSIC_Designator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WSSIC_Designator is enabled or not.
    */
  virtual bool hasWSSIC_Designator() const = 0;

  /** Enables the Element identified by WSSIC_Designator.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by WSSIC_Designator.
    */
  virtual uci::type::AlphanumericString54Type& enableWSSIC_Designator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by WSSIC_Designator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& clearWSSIC_Designator() = 0;

  /** Returns a const reference to the value of the enumeration identified by EquipmentCondition.
    *
    * @return A const reference to the value of the enumeration identified by EquipmentCondition.
    */
  virtual const uci::type::EquipmentConditionEnum& getEquipmentCondition() const = 0;

  /** Returns a reference to the value of the enumeration identified by EquipmentCondition.
    *
    * @return A reference to the value of the enumeration identified by EquipmentCondition.
    */
  virtual uci::type::EquipmentConditionEnum& getEquipmentCondition() = 0;

  /** Sets the value of the enumeration identified by EquipmentCondition.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& setEquipmentCondition(const uci::type::EquipmentConditionEnum& value) = 0;

  /** Sets the value of the enumeration identified by EquipmentCondition.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& setEquipmentCondition(uci::type::EquipmentConditionEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by EquipmentCondition exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EquipmentCondition is enabled or not.
    */
  virtual bool hasEquipmentCondition() const = 0;

  /** Enables the Element identified by EquipmentCondition.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by EquipmentCondition.
    */
  virtual uci::type::EquipmentConditionEnum& enableEquipmentCondition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EquipmentCondition.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SOB_EquipmentType& clearEquipmentCondition() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SOB_EquipmentType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SOB_EquipmentType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SOB_EquipmentType to copy from.
    */
  SOB_EquipmentType(const SOB_EquipmentType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SOB_EquipmentType to the contents of the SOB_EquipmentType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SOB_EquipmentType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this SOB_EquipmentType.
    * @return A reference to this SOB_EquipmentType.
    */
  SOB_EquipmentType& operator=(const SOB_EquipmentType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SOB_EQUIPMENTTYPE_H

