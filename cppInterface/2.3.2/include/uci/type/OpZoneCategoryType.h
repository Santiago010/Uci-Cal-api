/** @file OpZoneCategoryType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OPZONECATEGORYTYPE_H
#define UCI_TYPE_OPZONECATEGORYTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ConstrainedEntryExitType.h"
#include "uci/type/IngressEgressType.h"
#include "uci/type/OpZoneFilterAreaPET.h"
#include "uci/type/OpZoneJammingType.h"
#include "uci/type/OpZoneMissileDataType.h"
#include "uci/type/OpZoneNoFireType.h"
#include "uci/type/OpZoneNoFlyType.h"
#include "uci/type/OpZoneWeaponRestrictionType.h"
#include "uci/type/OpZoneWeatherType.h"
#include "uci/type/VehicleCommandDataType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Container for parameters that are unique to a specific enumeration in OpZoneCategoryEnum. For example, KeepIn
  * enumeration can have amplifying information such as entry and exit restrictions of the zone.
  */
class OpZoneCategoryType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OpZoneCategoryType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OpZoneCategoryType.
    */
  static UCI_EXPORT OpZoneCategoryType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OpZoneCategoryType initializing the data accessed by the new OpZoneCategoryType using
    * the data accessed by the specified OpZoneCategoryType (cloning).
    *
    * @param accessor The OpZoneCategoryType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created OpZoneCategoryType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OpZoneCategoryType.
    */
  static UCI_EXPORT OpZoneCategoryType& create(const OpZoneCategoryType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OpZoneCategoryType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The OpZoneCategoryType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OpZoneCategoryType& accessor);

  /** Returns this accessor's type constant, i.e. opZoneCategoryType.
    *
    * @return This accessor's type constant, i.e. opZoneCategoryType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::opZoneCategoryType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OpZoneCategoryType.
    *
    * @return The version that was initialized from the uci:version attribute of OpZoneCategoryType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OpZoneCategoryType& accessor) = 0;

  /** Indicates that the OpZone can be a zone filter type. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::OpZoneFilterAreaPET, uci::type::accessorType::opZoneFilterAreaPET> FilterArea;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum OpZoneCategoryTypeChoice {
    OPZONECATEGORYTYPE_CHOICE_NONE,
    OPZONECATEGORYTYPE_CHOICE_CONSTRAINEDENTRYEXIT,
    OPZONECATEGORYTYPE_CHOICE_FILTERAREA,
    OPZONECATEGORYTYPE_CHOICE_JAMMING,
    OPZONECATEGORYTYPE_CHOICE_KEEPIN,
    OPZONECATEGORYTYPE_CHOICE_MISSILELAUNCHPOINT,
    OPZONECATEGORYTYPE_CHOICE_NOFIRE,
    OPZONECATEGORYTYPE_CHOICE_NOFLY,
    OPZONECATEGORYTYPE_CHOICE_VEHICLECONFIGURATION,
    OPZONECATEGORYTYPE_CHOICE_WEAPONRESTRICTION,
    OPZONECATEGORYTYPE_CHOICE_WEATHERCONDITIONS
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual OpZoneCategoryTypeChoice getOpZoneCategoryTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getOpZoneCategoryTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the
    * access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpZoneCategoryType& setOpZoneCategoryTypeChoiceOrdinal(OpZoneCategoryTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ConstrainedEntryExit.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ConstrainedEntryExit.
    */
  virtual const uci::type::ConstrainedEntryExitType& getConstrainedEntryExit() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ConstrainedEntryExit.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ConstrainedEntryExit.
    */
  virtual uci::type::ConstrainedEntryExitType& getConstrainedEntryExit() = 0;

  /** Sets the complex content identified by ConstrainedEntryExit to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ConstrainedEntryExit.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpZoneCategoryType& setConstrainedEntryExit(const uci::type::ConstrainedEntryExitType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ConstrainedEntryExit.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ConstrainedEntryExit, false
    *      otherwise.
    */
  virtual bool isConstrainedEntryExit() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ConstrainedEntryExit.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ConstrainedEntryExit.
    */
  virtual uci::type::ConstrainedEntryExitType& chooseConstrainedEntryExit(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the bounded list identified by FilterArea.
    *
    * @return A const reference to the bounded list identified by FilterArea.
    */
  virtual const uci::type::OpZoneCategoryType::FilterArea& getFilterArea() const = 0;

  /** Returns a reference to the bounded list identified by FilterArea.
    *
    * @return A reference to the bounded list identified by FilterArea.
    */
  virtual uci::type::OpZoneCategoryType::FilterArea& getFilterArea() = 0;

  /** Sets the bounded list identified by FilterArea.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpZoneCategoryType& setFilterArea(const uci::type::OpZoneCategoryType::FilterArea& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FilterArea.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FilterArea, false otherwise.
    */
  virtual bool isFilterArea() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by FilterArea.
    *
    * @return A reference to the accessor that provides access to the choice identified by FilterArea.
    */
  virtual uci::type::OpZoneCategoryType::FilterArea& chooseFilterArea() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Jamming.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Jamming.
    */
  virtual const uci::type::OpZoneJammingType& getJamming() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Jamming.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Jamming.
    */
  virtual uci::type::OpZoneJammingType& getJamming() = 0;

  /** Sets the complex content identified by Jamming to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Jamming.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpZoneCategoryType& setJamming(const uci::type::OpZoneJammingType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Jamming.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Jamming, false otherwise.
    */
  virtual bool isJamming() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Jamming.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Jamming.
    */
  virtual uci::type::OpZoneJammingType& chooseJamming(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by KeepIn.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by KeepIn.
    */
  virtual const uci::type::IngressEgressType& getKeepIn() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by KeepIn.
    *
    * @return A reference to the accessor that provides access to the complex content identified by KeepIn.
    */
  virtual uci::type::IngressEgressType& getKeepIn() = 0;

  /** Sets the complex content identified by KeepIn to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by KeepIn.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpZoneCategoryType& setKeepIn(const uci::type::IngressEgressType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by KeepIn.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by KeepIn, false otherwise.
    */
  virtual bool isKeepIn() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by KeepIn.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by KeepIn.
    */
  virtual uci::type::IngressEgressType& chooseKeepIn(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * MissileLaunchPoint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      MissileLaunchPoint.
    */
  virtual const uci::type::OpZoneMissileDataType& getMissileLaunchPoint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MissileLaunchPoint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MissileLaunchPoint.
    */
  virtual uci::type::OpZoneMissileDataType& getMissileLaunchPoint() = 0;

  /** Sets the complex content identified by MissileLaunchPoint to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MissileLaunchPoint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpZoneCategoryType& setMissileLaunchPoint(const uci::type::OpZoneMissileDataType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by MissileLaunchPoint.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by MissileLaunchPoint, false
    *      otherwise.
    */
  virtual bool isMissileLaunchPoint() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by MissileLaunchPoint.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by MissileLaunchPoint.
    */
  virtual uci::type::OpZoneMissileDataType& chooseMissileLaunchPoint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by NoFire.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by NoFire.
    */
  virtual const uci::type::OpZoneNoFireType& getNoFire() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by NoFire.
    *
    * @return A reference to the accessor that provides access to the complex content identified by NoFire.
    */
  virtual uci::type::OpZoneNoFireType& getNoFire() = 0;

  /** Sets the complex content identified by NoFire to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by NoFire.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpZoneCategoryType& setNoFire(const uci::type::OpZoneNoFireType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by NoFire.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by NoFire, false otherwise.
    */
  virtual bool isNoFire() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by NoFire.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by NoFire.
    */
  virtual uci::type::OpZoneNoFireType& chooseNoFire(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by NoFly.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by NoFly.
    */
  virtual const uci::type::OpZoneNoFlyType& getNoFly() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by NoFly.
    *
    * @return A reference to the accessor that provides access to the complex content identified by NoFly.
    */
  virtual uci::type::OpZoneNoFlyType& getNoFly() = 0;

  /** Sets the complex content identified by NoFly to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by NoFly.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpZoneCategoryType& setNoFly(const uci::type::OpZoneNoFlyType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by NoFly.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by NoFly, false otherwise.
    */
  virtual bool isNoFly() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by NoFly.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by NoFly.
    */
  virtual uci::type::OpZoneNoFlyType& chooseNoFly(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * VehicleConfiguration.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      VehicleConfiguration.
    */
  virtual const uci::type::VehicleCommandDataType& getVehicleConfiguration() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by VehicleConfiguration.
    *
    * @return A reference to the accessor that provides access to the complex content identified by VehicleConfiguration.
    */
  virtual uci::type::VehicleCommandDataType& getVehicleConfiguration() = 0;

  /** Sets the complex content identified by VehicleConfiguration to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by VehicleConfiguration.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpZoneCategoryType& setVehicleConfiguration(const uci::type::VehicleCommandDataType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by VehicleConfiguration.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by VehicleConfiguration, false
    *      otherwise.
    */
  virtual bool isVehicleConfiguration() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by VehicleConfiguration.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by VehicleConfiguration.
    */
  virtual uci::type::VehicleCommandDataType& chooseVehicleConfiguration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * WeaponRestriction.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      WeaponRestriction.
    */
  virtual const uci::type::OpZoneWeaponRestrictionType& getWeaponRestriction() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by WeaponRestriction.
    *
    * @return A reference to the accessor that provides access to the complex content identified by WeaponRestriction.
    */
  virtual uci::type::OpZoneWeaponRestrictionType& getWeaponRestriction() = 0;

  /** Sets the complex content identified by WeaponRestriction to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by WeaponRestriction.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpZoneCategoryType& setWeaponRestriction(const uci::type::OpZoneWeaponRestrictionType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by WeaponRestriction.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by WeaponRestriction, false
    *      otherwise.
    */
  virtual bool isWeaponRestriction() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by WeaponRestriction.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by WeaponRestriction.
    */
  virtual uci::type::OpZoneWeaponRestrictionType& chooseWeaponRestriction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * WeatherConditions.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      WeatherConditions.
    */
  virtual const uci::type::OpZoneWeatherType& getWeatherConditions() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by WeatherConditions.
    *
    * @return A reference to the accessor that provides access to the complex content identified by WeatherConditions.
    */
  virtual uci::type::OpZoneWeatherType& getWeatherConditions() = 0;

  /** Sets the complex content identified by WeatherConditions to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by WeatherConditions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpZoneCategoryType& setWeatherConditions(const uci::type::OpZoneWeatherType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by WeatherConditions.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by WeatherConditions, false
    *      otherwise.
    */
  virtual bool isWeatherConditions() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by WeatherConditions.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by WeatherConditions.
    */
  virtual uci::type::OpZoneWeatherType& chooseWeatherConditions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OpZoneCategoryType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OpZoneCategoryType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OpZoneCategoryType to copy from.
    */
  OpZoneCategoryType(const OpZoneCategoryType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OpZoneCategoryType to the contents of the OpZoneCategoryType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OpZoneCategoryType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this OpZoneCategoryType.
    * @return A reference to this OpZoneCategoryType.
    */
  OpZoneCategoryType& operator=(const OpZoneCategoryType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_OPZONECATEGORYTYPE_H

