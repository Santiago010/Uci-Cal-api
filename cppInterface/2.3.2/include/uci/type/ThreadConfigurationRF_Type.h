/** @file ThreadConfigurationRF_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_THREADCONFIGURATIONRF_TYPE_H
#define UCI_TYPE_THREADCONFIGURATIONRF_TYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/AntennaResourceID_Type.h"
#include "uci/type/BeamPointingReferenceType.h"
#include "uci/type/BeamPowerModeEnum.h"
#include "uci/type/BeamShapingType.h"
#include "uci/type/DecibelType.h"
#include "uci/type/FrequencyRangeType.h"
#include "uci/type/PolarizationControlType.h"
#include "uci/type/RF_TypeEnum.h"
#include "uci/type/SupportCapabilityID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ThreadConfigurationRF_Type : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ThreadConfigurationRF_Type.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ThreadConfigurationRF_Type.
    */
  static UCI_EXPORT ThreadConfigurationRF_Type& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ThreadConfigurationRF_Type initializing the data accessed by the new
    * ThreadConfigurationRF_Type using the data accessed by the specified ThreadConfigurationRF_Type (cloning).
    *
    * @param accessor The ThreadConfigurationRF_Type that provides access to the data that is to be used to initialize the
    *      data accessed by the new created ThreadConfigurationRF_Type.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ThreadConfigurationRF_Type.
    */
  static UCI_EXPORT ThreadConfigurationRF_Type& create(const ThreadConfigurationRF_Type& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ThreadConfigurationRF_Type. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The ThreadConfigurationRF_Type that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ThreadConfigurationRF_Type& accessor);

  /** Returns this accessor's type constant, i.e. threadConfigurationRF_Type.
    *
    * @return This accessor's type constant, i.e. threadConfigurationRF_Type.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::threadConfigurationRF_Type;
  }

  /** Returns the version that was initialized from the uci:version attribute of ThreadConfigurationRF_Type.
    *
    * @return The version that was initialized from the uci:version attribute of ThreadConfigurationRF_Type.
    */
  static std::string getUCITypeVersion() {
    return "001.001.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ThreadConfigurationRF_Type& accessor) = 0;

  /** Polarization description for the beam. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::PolarizationControlType, uci::type::accessorType::polarizationControlType> Polarization;

  /** Returns the value of the SimplePrimitive data type identified by BeamConfigurationIndex.
    *
    * @return The value of the simple primitive data type identified by BeamConfigurationIndex.
    */
  virtual xs::UnsignedInt getBeamConfigurationIndex() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by BeamConfigurationIndex.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& setBeamConfigurationIndex(xs::UnsignedInt value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SupportCapabilityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SupportCapabilityID.
    */
  virtual const uci::type::SupportCapabilityID_Type& getSupportCapabilityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SupportCapabilityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SupportCapabilityID.
    */
  virtual uci::type::SupportCapabilityID_Type& getSupportCapabilityID() = 0;

  /** Sets the complex content identified by SupportCapabilityID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SupportCapabilityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& setSupportCapabilityID(const uci::type::SupportCapabilityID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AntennaResourceInstanceID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AntennaResourceInstanceID.
    */
  virtual const uci::type::AntennaResourceID_Type& getAntennaResourceInstanceID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * AntennaResourceInstanceID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AntennaResourceInstanceID.
    */
  virtual uci::type::AntennaResourceID_Type& getAntennaResourceInstanceID() = 0;

  /** Sets the complex content identified by AntennaResourceInstanceID to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AntennaResourceInstanceID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& setAntennaResourceInstanceID(const uci::type::AntennaResourceID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by RF_Mode.
    *
    * @return A const reference to the value of the enumeration identified by RF_Mode.
    */
  virtual const uci::type::RF_TypeEnum& getRF_Mode() const = 0;

  /** Returns a reference to the value of the enumeration identified by RF_Mode.
    *
    * @return A reference to the value of the enumeration identified by RF_Mode.
    */
  virtual uci::type::RF_TypeEnum& getRF_Mode() = 0;

  /** Sets the value of the enumeration identified by RF_Mode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& setRF_Mode(const uci::type::RF_TypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by RF_Mode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& setRF_Mode(uci::type::RF_TypeEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by BeamPowerMode.
    *
    * @return A const reference to the value of the enumeration identified by BeamPowerMode.
    */
  virtual const uci::type::BeamPowerModeEnum& getBeamPowerMode() const = 0;

  /** Returns a reference to the value of the enumeration identified by BeamPowerMode.
    *
    * @return A reference to the value of the enumeration identified by BeamPowerMode.
    */
  virtual uci::type::BeamPowerModeEnum& getBeamPowerMode() = 0;

  /** Sets the value of the enumeration identified by BeamPowerMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& setBeamPowerMode(const uci::type::BeamPowerModeEnum& value) = 0;

  /** Sets the value of the enumeration identified by BeamPowerMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& setBeamPowerMode(uci::type::BeamPowerModeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by BeamPowerMode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BeamPowerMode is enabled or not.
    */
  virtual bool hasBeamPowerMode() const = 0;

  /** Enables the Element identified by BeamPowerMode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by BeamPowerMode.
    */
  virtual uci::type::BeamPowerModeEnum& enableBeamPowerMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by BeamPowerMode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& clearBeamPowerMode() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Frequency.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual const uci::type::FrequencyRangeType& getFrequency() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Frequency.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual uci::type::FrequencyRangeType& getFrequency() = 0;

  /** Sets the complex content identified by Frequency to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Frequency.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& setFrequency(const uci::type::FrequencyRangeType& value) = 0;

  /** Returns whether the Element identified by Frequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Frequency is enabled or not.
    */
  virtual bool hasFrequency() const = 0;

  /** Enables the Element identified by Frequency.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual uci::type::FrequencyRangeType& enableFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Frequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& clearFrequency() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * BeamPointingReference.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      BeamPointingReference.
    */
  virtual const uci::type::BeamPointingReferenceType& getBeamPointingReference() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by BeamPointingReference.
    *
    * @return A reference to the accessor that provides access to the complex content identified by BeamPointingReference.
    */
  virtual uci::type::BeamPointingReferenceType& getBeamPointingReference() = 0;

  /** Sets the complex content identified by BeamPointingReference to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by BeamPointingReference.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& setBeamPointingReference(const uci::type::BeamPointingReferenceType& value) = 0;

  /** Returns whether the Element identified by BeamPointingReference exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BeamPointingReference is enabled or not.
    */
  virtual bool hasBeamPointingReference() const = 0;

  /** Enables the Element identified by BeamPointingReference.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by BeamPointingReference.
    */
  virtual uci::type::BeamPointingReferenceType& enableBeamPointingReference(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by BeamPointingReference.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& clearBeamPointingReference() = 0;

  /** Returns a const reference to the bounded list identified by Polarization.
    *
    * @return A const reference to the bounded list identified by Polarization.
    */
  virtual const uci::type::ThreadConfigurationRF_Type::Polarization& getPolarization() const = 0;

  /** Returns a reference to the bounded list identified by Polarization.
    *
    * @return A reference to the bounded list identified by Polarization.
    */
  virtual uci::type::ThreadConfigurationRF_Type::Polarization& getPolarization() = 0;

  /** Sets the bounded list identified by Polarization.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& setPolarization(const uci::type::ThreadConfigurationRF_Type::Polarization& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by AntennaAttenuation.
    *
    * @return The value of the simple primitive data type identified by AntennaAttenuation.
    */
  virtual uci::type::DecibelTypeValue getAntennaAttenuation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AntennaAttenuation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& setAntennaAttenuation(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by AntennaAttenuation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AntennaAttenuation is enabled or not.
    */
  virtual bool hasAntennaAttenuation() const = 0;

  /** Clears (disabled) the Element identified by AntennaAttenuation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& clearAntennaAttenuation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AntennaPriority.
    *
    * @return The value of the simple primitive data type identified by AntennaPriority.
    */
  virtual xs::UnsignedInt getAntennaPriority() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AntennaPriority.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& setAntennaPriority(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by AntennaPriority exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AntennaPriority is enabled or not.
    */
  virtual bool hasAntennaPriority() const = 0;

  /** Clears (disabled) the Element identified by AntennaPriority.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& clearAntennaPriority() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by BeamShaping.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by BeamShaping.
    */
  virtual const uci::type::BeamShapingType& getBeamShaping() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by BeamShaping.
    *
    * @return A reference to the accessor that provides access to the complex content identified by BeamShaping.
    */
  virtual uci::type::BeamShapingType& getBeamShaping() = 0;

  /** Sets the complex content identified by BeamShaping to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by BeamShaping.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& setBeamShaping(const uci::type::BeamShapingType& value) = 0;

  /** Returns whether the Element identified by BeamShaping exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BeamShaping is enabled or not.
    */
  virtual bool hasBeamShaping() const = 0;

  /** Enables the Element identified by BeamShaping.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by BeamShaping.
    */
  virtual uci::type::BeamShapingType& enableBeamShaping(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by BeamShaping.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreadConfigurationRF_Type& clearBeamShaping() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ThreadConfigurationRF_Type() {
  }

  /** The destructor [only available to derived classes]. */
  ~ThreadConfigurationRF_Type() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ThreadConfigurationRF_Type to copy from.
    */
  ThreadConfigurationRF_Type(const ThreadConfigurationRF_Type& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ThreadConfigurationRF_Type to the contents of the
    * ThreadConfigurationRF_Type on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ThreadConfigurationRF_Type on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this ThreadConfigurationRF_Type.
    * @return A reference to this ThreadConfigurationRF_Type.
    */
  ThreadConfigurationRF_Type& operator=(const ThreadConfigurationRF_Type& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_THREADCONFIGURATIONRF_TYPE_H

