/** @file COMINT_ReceiveDwellType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMINT_RECEIVEDWELLTYPE_H
#define UCI_TYPE_COMINT_RECEIVEDWELLTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/FloatAccessor.h"
#include "../base/IntAccessor.h"
#include "../base/export.h"
#include "COMINT_DwellStateEnum.h"
#include "COMINT_DwellTypeEnum.h"
#include "COMINT_InteractiveType.h"
#include "ComponentID_Type.h"
#include "DateTimeType.h"
#include "DecibelType.h"
#include "DurationType.h"
#include "DwellID_Type.h"
#include "FrequencyRangeType.h"
#include "FrequencyType.h"
#include "MilliwattPowerRatioType.h"
#include "NED_ConeType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class COMINT_ReceiveDwellType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new COMINT_ReceiveDwellType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed COMINT_ReceiveDwellType.
    */
  static UCI_EXPORT COMINT_ReceiveDwellType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new COMINT_ReceiveDwellType initializing the data accessed by the new
    * COMINT_ReceiveDwellType using the data accessed by the specified COMINT_ReceiveDwellType (cloning).
    *
    * @param accessor The COMINT_ReceiveDwellType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created COMINT_ReceiveDwellType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed COMINT_ReceiveDwellType.
    */
  static UCI_EXPORT COMINT_ReceiveDwellType& create(const COMINT_ReceiveDwellType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified COMINT_ReceiveDwellType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The COMINT_ReceiveDwellType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(COMINT_ReceiveDwellType& accessor);

  /** Returns this accessor's type constant, i.e. cOMINT_ReceiveDwellType.
    *
    * @return This accessor's type constant, i.e. cOMINT_ReceiveDwellType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::cOMINT_ReceiveDwellType;
  }

  /** Returns the version that was initialized from the uci:version attribute of COMINT_ReceiveDwellType.
    *
    * @return The version that was initialized from the uci:version attribute of COMINT_ReceiveDwellType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const COMINT_ReceiveDwellType& accessor) = 0;

  /** Indicates a component with the dwell is assigned to use. Required if the dwell is assigned/active. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ComponentID_Type, uci::type::accessorType::componentID_Type> ComponentID;

  /** Indicates the frequency coverage of the dwell, including all RF_ControlCommand, ESM_Command, MDF and other
    * restrictions. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FrequencyRangeType, uci::type::accessorType::frequencyRangeType> Frequency;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DwellID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DwellID.
    */
  virtual const uci::type::DwellID_Type& getDwellID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DwellID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DwellID.
    */
  virtual uci::type::DwellID_Type& getDwellID() = 0;

  /** Sets the complex content identified by DwellID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DwellID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setDwellID(const uci::type::DwellID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by DwellState.
    *
    * @return A const reference to the value of the enumeration identified by DwellState.
    */
  virtual const uci::type::COMINT_DwellStateEnum& getDwellState() const = 0;

  /** Returns a reference to the value of the enumeration identified by DwellState.
    *
    * @return A reference to the value of the enumeration identified by DwellState.
    */
  virtual uci::type::COMINT_DwellStateEnum& getDwellState() = 0;

  /** Sets the value of the enumeration identified by DwellState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setDwellState(const uci::type::COMINT_DwellStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by DwellState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setDwellState(uci::type::COMINT_DwellStateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by DwellType.
    *
    * @return A const reference to the value of the enumeration identified by DwellType.
    */
  virtual const uci::type::COMINT_DwellTypeEnum& getDwellType() const = 0;

  /** Returns a reference to the value of the enumeration identified by DwellType.
    *
    * @return A reference to the value of the enumeration identified by DwellType.
    */
  virtual uci::type::COMINT_DwellTypeEnum& getDwellType() = 0;

  /** Sets the value of the enumeration identified by DwellType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setDwellType(const uci::type::COMINT_DwellTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by DwellType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setDwellType(uci::type::COMINT_DwellTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by DwellType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DwellType is enabled or not.
    */
  virtual bool hasDwellType() const = 0;

  /** Enables the Element identified by DwellType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by DwellType.
    */
  virtual uci::type::COMINT_DwellTypeEnum& enableDwellType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DwellType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& clearDwellType() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DwellFOV.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DwellFOV.
    */
  virtual const uci::type::NED_ConeType& getDwellFOV() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DwellFOV.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DwellFOV.
    */
  virtual uci::type::NED_ConeType& getDwellFOV() = 0;

  /** Sets the complex content identified by DwellFOV to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DwellFOV.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setDwellFOV(const uci::type::NED_ConeType& value) = 0;

  /** Returns whether the Element identified by DwellFOV exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DwellFOV is enabled or not.
    */
  virtual bool hasDwellFOV() const = 0;

  /** Enables the Element identified by DwellFOV.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DwellFOV.
    */
  virtual uci::type::NED_ConeType& enableDwellFOV(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DwellFOV.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& clearDwellFOV() = 0;

  /** Returns the value of the SimplePrimitive data type identified by StartTime.
    *
    * @return The value of the simple primitive data type identified by StartTime.
    */
  virtual uci::type::DateTimeTypeValue getStartTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by StartTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setStartTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by StartTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by StartTime is enabled or not.
    */
  virtual bool hasStartTime() const = 0;

  /** Clears (disabled) the Element identified by StartTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& clearStartTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by CumulativeDwellTime.
    *
    * @return The value of the simple primitive data type identified by CumulativeDwellTime.
    */
  virtual uci::type::DurationTypeValue getCumulativeDwellTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CumulativeDwellTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setCumulativeDwellTime(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by CumulativeDwellTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CumulativeDwellTime is enabled or not.
    */
  virtual bool hasCumulativeDwellTime() const = 0;

  /** Clears (disabled) the Element identified by CumulativeDwellTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& clearCumulativeDwellTime() = 0;

  /** Returns a const reference to the bounded list identified by ComponentID.
    *
    * @return A const reference to the bounded list identified by ComponentID.
    */
  virtual const uci::type::COMINT_ReceiveDwellType::ComponentID& getComponentID() const = 0;

  /** Returns a reference to the bounded list identified by ComponentID.
    *
    * @return A reference to the bounded list identified by ComponentID.
    */
  virtual uci::type::COMINT_ReceiveDwellType::ComponentID& getComponentID() = 0;

  /** Sets the bounded list identified by ComponentID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setComponentID(const uci::type::COMINT_ReceiveDwellType::ComponentID& value) = 0;

  /** Returns a const reference to the bounded list identified by Frequency.
    *
    * @return A const reference to the bounded list identified by Frequency.
    */
  virtual const uci::type::COMINT_ReceiveDwellType::Frequency& getFrequency() const = 0;

  /** Returns a reference to the bounded list identified by Frequency.
    *
    * @return A reference to the bounded list identified by Frequency.
    */
  virtual uci::type::COMINT_ReceiveDwellType::Frequency& getFrequency() = 0;

  /** Sets the bounded list identified by Frequency.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setFrequency(const uci::type::COMINT_ReceiveDwellType::Frequency& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by DwellRevisitInterval.
    *
    * @return The value of the simple primitive data type identified by DwellRevisitInterval.
    */
  virtual uci::type::DurationTypeValue getDwellRevisitInterval() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DwellRevisitInterval.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setDwellRevisitInterval(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by DwellRevisitInterval exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DwellRevisitInterval is enabled or not.
    */
  virtual bool hasDwellRevisitInterval() const = 0;

  /** Clears (disabled) the Element identified by DwellRevisitInterval.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& clearDwellRevisitInterval() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PulseWidthLow.
    *
    * @return The value of the simple primitive data type identified by PulseWidthLow.
    */
  virtual uci::type::DurationTypeValue getPulseWidthLow() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PulseWidthLow.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setPulseWidthLow(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PulseWidthLow exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseWidthLow is enabled or not.
    */
  virtual bool hasPulseWidthLow() const = 0;

  /** Clears (disabled) the Element identified by PulseWidthLow.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& clearPulseWidthLow() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PulseWidthHigh.
    *
    * @return The value of the simple primitive data type identified by PulseWidthHigh.
    */
  virtual uci::type::DurationTypeValue getPulseWidthHigh() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PulseWidthHigh.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setPulseWidthHigh(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PulseWidthHigh exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseWidthHigh is enabled or not.
    */
  virtual bool hasPulseWidthHigh() const = 0;

  /** Clears (disabled) the Element identified by PulseWidthHigh.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& clearPulseWidthHigh() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PRI_High.
    *
    * @return The value of the simple primitive data type identified by PRI_High.
    */
  virtual uci::type::DurationTypeValue getPRI_High() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PRI_High.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setPRI_High(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PRI_High exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_High is enabled or not.
    */
  virtual bool hasPRI_High() const = 0;

  /** Clears (disabled) the Element identified by PRI_High.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& clearPRI_High() = 0;

  /** Returns the value of the SimplePrimitive data type identified by NativeSensitivity.
    *
    * @return The value of the simple primitive data type identified by NativeSensitivity.
    */
  virtual uci::type::DecibelTypeValue getNativeSensitivity() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by NativeSensitivity.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setNativeSensitivity(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by NativeSensitivity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NativeSensitivity is enabled or not.
    */
  virtual bool hasNativeSensitivity() const = 0;

  /** Clears (disabled) the Element identified by NativeSensitivity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& clearNativeSensitivity() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Desensitization.
    *
    * @return The value of the simple primitive data type identified by Desensitization.
    */
  virtual uci::type::MilliwattPowerRatioTypeValue getDesensitization() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Desensitization.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setDesensitization(uci::type::MilliwattPowerRatioTypeValue value) = 0;

  /** Returns whether the Element identified by Desensitization exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Desensitization is enabled or not.
    */
  virtual bool hasDesensitization() const = 0;

  /** Clears (disabled) the Element identified by Desensitization.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& clearDesensitization() = 0;

  /** Returns the value of the SimplePrimitive data type identified by VideoBandwidth.
    *
    * @return The value of the simple primitive data type identified by VideoBandwidth.
    */
  virtual uci::type::FrequencyTypeValue getVideoBandwidth() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by VideoBandwidth.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setVideoBandwidth(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by VideoBandwidth exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VideoBandwidth is enabled or not.
    */
  virtual bool hasVideoBandwidth() const = 0;

  /** Clears (disabled) the Element identified by VideoBandwidth.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& clearVideoBandwidth() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * COMINT_Interactive.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      COMINT_Interactive.
    */
  virtual const uci::type::COMINT_InteractiveType& getCOMINT_Interactive() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by COMINT_Interactive.
    *
    * @return A reference to the accessor that provides access to the complex content identified by COMINT_Interactive.
    */
  virtual uci::type::COMINT_InteractiveType& getCOMINT_Interactive() = 0;

  /** Sets the complex content identified by COMINT_Interactive to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by COMINT_Interactive.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setCOMINT_Interactive(const uci::type::COMINT_InteractiveType& value) = 0;

  /** Returns whether the Element identified by COMINT_Interactive exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by COMINT_Interactive is enabled or not.
    */
  virtual bool hasCOMINT_Interactive() const = 0;

  /** Enables the Element identified by COMINT_Interactive.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by COMINT_Interactive.
    */
  virtual uci::type::COMINT_InteractiveType& enableCOMINT_Interactive(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by COMINT_Interactive.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& clearCOMINT_Interactive() = 0;

  /** Returns the value of the SimplePrimitive data type identified by StopTime.
    *
    * @return The value of the simple primitive data type identified by StopTime.
    */
  virtual uci::type::DateTimeTypeValue getStopTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by StopTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setStopTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by StopTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by StopTime is enabled or not.
    */
  virtual bool hasStopTime() const = 0;

  /** Clears (disabled) the Element identified by StopTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& clearStopTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SampleRate.
    *
    * @return The value of the simple primitive data type identified by SampleRate.
    */
  virtual xs::Float getSampleRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SampleRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setSampleRate(xs::Float value) = 0;

  /** Returns whether the Element identified by SampleRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SampleRate is enabled or not.
    */
  virtual bool hasSampleRate() const = 0;

  /** Clears (disabled) the Element identified by SampleRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& clearSampleRate() = 0;

  /** Returns the value of the SimplePrimitive data type identified by FFT_PointsPerSample.
    *
    * @return The value of the simple primitive data type identified by FFT_PointsPerSample.
    */
  virtual xs::Int getFFT_PointsPerSample() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FFT_PointsPerSample.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& setFFT_PointsPerSample(xs::Int value) = 0;

  /** Returns whether the Element identified by FFT_PointsPerSample exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FFT_PointsPerSample is enabled or not.
    */
  virtual bool hasFFT_PointsPerSample() const = 0;

  /** Clears (disabled) the Element identified by FFT_PointsPerSample.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_ReceiveDwellType& clearFFT_PointsPerSample() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  COMINT_ReceiveDwellType() {
  }

  /** The destructor [only available to derived classes]. */
  ~COMINT_ReceiveDwellType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The COMINT_ReceiveDwellType to copy from.
    */
  COMINT_ReceiveDwellType(const COMINT_ReceiveDwellType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this COMINT_ReceiveDwellType to the contents of the
    * COMINT_ReceiveDwellType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The COMINT_ReceiveDwellType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this COMINT_ReceiveDwellType.
    * @return A reference to this COMINT_ReceiveDwellType.
    */
  COMINT_ReceiveDwellType& operator=(const COMINT_ReceiveDwellType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMINT_RECEIVEDWELLTYPE_H

