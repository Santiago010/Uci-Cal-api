/** @file OB_CorrelationInputType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OB_CORRELATIONINPUTTYPE_H
#define UCI_TYPE_OB_CORRELATIONINPUTTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/EntitySourceEnum.h"
#include "uci/type/MessageModeEnum.h"
#include "uci/type/SignalID_Type.h"
#include "uci/type/SystemID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the input that was correlated to the SOB with the results described in the sibling elements. */
class OB_CorrelationInputType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OB_CorrelationInputType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OB_CorrelationInputType.
    */
  static UCI_EXPORT OB_CorrelationInputType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OB_CorrelationInputType initializing the data accessed by the new
    * OB_CorrelationInputType using the data accessed by the specified OB_CorrelationInputType (cloning).
    *
    * @param accessor The OB_CorrelationInputType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created OB_CorrelationInputType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OB_CorrelationInputType.
    */
  static UCI_EXPORT OB_CorrelationInputType& create(const OB_CorrelationInputType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OB_CorrelationInputType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The OB_CorrelationInputType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OB_CorrelationInputType& accessor);

  /** Returns this accessor's type constant, i.e. oB_CorrelationInputType.
    *
    * @return This accessor's type constant, i.e. oB_CorrelationInputType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::oB_CorrelationInputType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OB_CorrelationInputType.
    *
    * @return The version that was initialized from the uci:version attribute of OB_CorrelationInputType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OB_CorrelationInputType& accessor) = 0;

  /** Indicates an Entity which was an input for xOB correlation. Generally only one is given. Multiple instances are
    * possible if the Entity is a fused and its contributors are also considered in xOB correlation. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EntityID_Type, uci::type::accessorType::entityID_Type> EntityID;

  /** Indicates a System which was an input for xOB correlation. Generally only one is given. Multiple instances are
    * possible if the System is a fused and its contributors are also considered in xOB correlation. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SystemID_Type, uci::type::accessorType::systemID_Type> SystemID;

  /** Indicates a Signal which was an input for EOB correlation. Generally only one is given. Multiple instances are
    * possible if the Signal is associated with an Entity or SignalReport which were considered collectively in EOB
    * correlation. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SignalID_Type, uci::type::accessorType::signalID_Type> SignalID;

  /** Indicates the type of System and/or Service which created the sibling correlation input or inputs. See enumerated
    * type annotations for further details. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 28]
    */
  typedef uci::base::BoundedList<uci::type::EntitySourceEnum, uci::type::accessorType::entitySourceEnum> SourceType;

  /** Returns a const reference to the bounded list identified by EntityID.
    *
    * @return A const reference to the bounded list identified by EntityID.
    */
  virtual const uci::type::OB_CorrelationInputType::EntityID& getEntityID() const = 0;

  /** Returns a reference to the bounded list identified by EntityID.
    *
    * @return A reference to the bounded list identified by EntityID.
    */
  virtual uci::type::OB_CorrelationInputType::EntityID& getEntityID() = 0;

  /** Sets the bounded list identified by EntityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_CorrelationInputType& setEntityID(const uci::type::OB_CorrelationInputType::EntityID& value) = 0;

  /** Returns a const reference to the bounded list identified by SystemID.
    *
    * @return A const reference to the bounded list identified by SystemID.
    */
  virtual const uci::type::OB_CorrelationInputType::SystemID& getSystemID() const = 0;

  /** Returns a reference to the bounded list identified by SystemID.
    *
    * @return A reference to the bounded list identified by SystemID.
    */
  virtual uci::type::OB_CorrelationInputType::SystemID& getSystemID() = 0;

  /** Sets the bounded list identified by SystemID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_CorrelationInputType& setSystemID(const uci::type::OB_CorrelationInputType::SystemID& value) = 0;

  /** Returns a const reference to the bounded list identified by SignalID.
    *
    * @return A const reference to the bounded list identified by SignalID.
    */
  virtual const uci::type::OB_CorrelationInputType::SignalID& getSignalID() const = 0;

  /** Returns a reference to the bounded list identified by SignalID.
    *
    * @return A reference to the bounded list identified by SignalID.
    */
  virtual uci::type::OB_CorrelationInputType::SignalID& getSignalID() = 0;

  /** Sets the bounded list identified by SignalID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_CorrelationInputType& setSignalID(const uci::type::OB_CorrelationInputType::SignalID& value) = 0;

  /** Returns a const reference to the bounded list identified by SourceType.
    *
    * @return A const reference to the bounded list identified by SourceType.
    */
  virtual const uci::type::OB_CorrelationInputType::SourceType& getSourceType() const = 0;

  /** Returns a reference to the bounded list identified by SourceType.
    *
    * @return A reference to the bounded list identified by SourceType.
    */
  virtual uci::type::OB_CorrelationInputType::SourceType& getSourceType() = 0;

  /** Sets the bounded list identified by SourceType.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_CorrelationInputType& setSourceType(const uci::type::OB_CorrelationInputType::SourceType& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by Exercise.
    *
    * @return A const reference to the value of the enumeration identified by Exercise.
    */
  virtual const uci::type::MessageModeEnum& getExercise() const = 0;

  /** Returns a reference to the value of the enumeration identified by Exercise.
    *
    * @return A reference to the value of the enumeration identified by Exercise.
    */
  virtual uci::type::MessageModeEnum& getExercise() = 0;

  /** Sets the value of the enumeration identified by Exercise.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_CorrelationInputType& setExercise(const uci::type::MessageModeEnum& value) = 0;

  /** Sets the value of the enumeration identified by Exercise.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OB_CorrelationInputType& setExercise(uci::type::MessageModeEnum::EnumerationItem value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OB_CorrelationInputType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OB_CorrelationInputType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OB_CorrelationInputType to copy from.
    */
  OB_CorrelationInputType(const OB_CorrelationInputType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OB_CorrelationInputType to the contents of the
    * OB_CorrelationInputType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OB_CorrelationInputType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this OB_CorrelationInputType.
    * @return A reference to this OB_CorrelationInputType.
    */
  OB_CorrelationInputType& operator=(const OB_CorrelationInputType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_OB_CORRELATIONINPUTTYPE_H

