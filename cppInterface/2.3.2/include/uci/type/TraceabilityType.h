/** @file TraceabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_TRACEABILITYTYPE_H
#define UCI_TYPE_TRACEABILITYTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ACTDF_TraceabilityType.h"
#include "AOCO_TraceabilityType.h"
#include "ATO_TraceabilityType.h"
#include "CS_STO_TraceabilityType.h"
#include "CollectionDeckTraceabilityType.h"
#include "EEI_ID_Type.h"
#include "RequirementInstanceID_ChoiceType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Tasking sources work at different levels of detail and abstraction, progressing from what to do to how specifically
  * to do it. Inputs from abstract tasking sources and Tasks can be decomposed into discrete, actionable Tasks. This type
  * provides traceability to the external tasking or Task from which this Task was derived.
  */
class TraceabilityType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new TraceabilityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed TraceabilityType.
    */
  static UCI_EXPORT TraceabilityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new TraceabilityType initializing the data accessed by the new TraceabilityType using the
    * data accessed by the specified TraceabilityType (cloning).
    *
    * @param accessor The TraceabilityType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created TraceabilityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed TraceabilityType.
    */
  static UCI_EXPORT TraceabilityType& create(const TraceabilityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified TraceabilityType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The TraceabilityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(TraceabilityType& accessor);

  /** Returns this accessor's type constant, i.e. traceabilityType.
    *
    * @return This accessor's type constant, i.e. traceabilityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::traceabilityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of TraceabilityType.
    *
    * @return The version that was initialized from the uci:version attribute of TraceabilityType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const TraceabilityType& accessor) = 0;

  /** Indicates a Requirement (Effect, Action, Task, [Capability]Command or Response) which the subject traces/originates
    * from. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RequirementInstanceID_ChoiceType, uci::type::accessorType::requirementInstanceID_ChoiceType> Requirement;

  /** Indicates a reference to an external (non-UCI) tasking source, the collection deck, which the subject
    * traces/originates from. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CollectionDeckTraceabilityType, uci::type::accessorType::collectionDeckTraceabilityType> CollectionDeckTraceability;

  /** Indicates a reference to an external (non-UCI) tasking source, Airborne Collection Tasking Message, the subject
    * traces/originates from. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ACTDF_TraceabilityType, uci::type::accessorType::aCTDF_TraceabilityType> ACTDF_Traceability;

  /** Indicates a reference to an external (non-UCI) tasking source, Essential Element of Information, the subject
    * traces/originates from. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EEI_ID_Type, uci::type::accessorType::eEI_ID_Type> EEI_ID;

  /** Indicates a reference to an external (non-UCI) tasking source, the Air Tasking Order, the subject traces/originates
    * from. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ATO_TraceabilityType, uci::type::accessorType::aTO_TraceabilityType> ATO_Traceability;

  /** Returns a const reference to the bounded list identified by Requirement.
    *
    * @return A const reference to the bounded list identified by Requirement.
    */
  virtual const uci::type::TraceabilityType::Requirement& getRequirement() const = 0;

  /** Returns a reference to the bounded list identified by Requirement.
    *
    * @return A reference to the bounded list identified by Requirement.
    */
  virtual uci::type::TraceabilityType::Requirement& getRequirement() = 0;

  /** Sets the bounded list identified by Requirement.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TraceabilityType& setRequirement(const uci::type::TraceabilityType::Requirement& value) = 0;

  /** Returns a const reference to the bounded list identified by CollectionDeckTraceability.
    *
    * @return A const reference to the bounded list identified by CollectionDeckTraceability.
    */
  virtual const uci::type::TraceabilityType::CollectionDeckTraceability& getCollectionDeckTraceability() const = 0;

  /** Returns a reference to the bounded list identified by CollectionDeckTraceability.
    *
    * @return A reference to the bounded list identified by CollectionDeckTraceability.
    */
  virtual uci::type::TraceabilityType::CollectionDeckTraceability& getCollectionDeckTraceability() = 0;

  /** Sets the bounded list identified by CollectionDeckTraceability.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TraceabilityType& setCollectionDeckTraceability(const uci::type::TraceabilityType::CollectionDeckTraceability& value) = 0;

  /** Returns a const reference to the bounded list identified by ACTDF_Traceability.
    *
    * @return A const reference to the bounded list identified by ACTDF_Traceability.
    */
  virtual const uci::type::TraceabilityType::ACTDF_Traceability& getACTDF_Traceability() const = 0;

  /** Returns a reference to the bounded list identified by ACTDF_Traceability.
    *
    * @return A reference to the bounded list identified by ACTDF_Traceability.
    */
  virtual uci::type::TraceabilityType::ACTDF_Traceability& getACTDF_Traceability() = 0;

  /** Sets the bounded list identified by ACTDF_Traceability.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TraceabilityType& setACTDF_Traceability(const uci::type::TraceabilityType::ACTDF_Traceability& value) = 0;

  /** Returns a const reference to the bounded list identified by EEI_ID.
    *
    * @return A const reference to the bounded list identified by EEI_ID.
    */
  virtual const uci::type::TraceabilityType::EEI_ID& getEEI_ID() const = 0;

  /** Returns a reference to the bounded list identified by EEI_ID.
    *
    * @return A reference to the bounded list identified by EEI_ID.
    */
  virtual uci::type::TraceabilityType::EEI_ID& getEEI_ID() = 0;

  /** Sets the bounded list identified by EEI_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TraceabilityType& setEEI_ID(const uci::type::TraceabilityType::EEI_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by ATO_Traceability.
    *
    * @return A const reference to the bounded list identified by ATO_Traceability.
    */
  virtual const uci::type::TraceabilityType::ATO_Traceability& getATO_Traceability() const = 0;

  /** Returns a reference to the bounded list identified by ATO_Traceability.
    *
    * @return A reference to the bounded list identified by ATO_Traceability.
    */
  virtual uci::type::TraceabilityType::ATO_Traceability& getATO_Traceability() = 0;

  /** Sets the bounded list identified by ATO_Traceability.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TraceabilityType& setATO_Traceability(const uci::type::TraceabilityType::ATO_Traceability& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AOCO_Traceability.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AOCO_Traceability.
    */
  virtual const uci::type::AOCO_TraceabilityType& getAOCO_Traceability() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AOCO_Traceability.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AOCO_Traceability.
    */
  virtual uci::type::AOCO_TraceabilityType& getAOCO_Traceability() = 0;

  /** Sets the complex content identified by AOCO_Traceability to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AOCO_Traceability.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TraceabilityType& setAOCO_Traceability(const uci::type::AOCO_TraceabilityType& value) = 0;

  /** Returns whether the Element identified by AOCO_Traceability exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AOCO_Traceability is enabled or not.
    */
  virtual bool hasAOCO_Traceability() const = 0;

  /** Enables the Element identified by AOCO_Traceability.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AOCO_Traceability.
    */
  virtual uci::type::AOCO_TraceabilityType& enableAOCO_Traceability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AOCO_Traceability.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TraceabilityType& clearAOCO_Traceability() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by STO_Traceability.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by STO_Traceability.
    */
  virtual const uci::type::CS_STO_TraceabilityType& getSTO_Traceability() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by STO_Traceability.
    *
    * @return A reference to the accessor that provides access to the complex content identified by STO_Traceability.
    */
  virtual uci::type::CS_STO_TraceabilityType& getSTO_Traceability() = 0;

  /** Sets the complex content identified by STO_Traceability to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by STO_Traceability.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TraceabilityType& setSTO_Traceability(const uci::type::CS_STO_TraceabilityType& value) = 0;

  /** Returns whether the Element identified by STO_Traceability exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by STO_Traceability is enabled or not.
    */
  virtual bool hasSTO_Traceability() const = 0;

  /** Enables the Element identified by STO_Traceability.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by STO_Traceability.
    */
  virtual uci::type::CS_STO_TraceabilityType& enableSTO_Traceability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by STO_Traceability.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TraceabilityType& clearSTO_Traceability() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  TraceabilityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~TraceabilityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The TraceabilityType to copy from.
    */
  TraceabilityType(const TraceabilityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this TraceabilityType to the contents of the TraceabilityType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The TraceabilityType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this TraceabilityType.
    * @return A reference to this TraceabilityType.
    */
  TraceabilityType& operator=(const TraceabilityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_TRACEABILITYTYPE_H

