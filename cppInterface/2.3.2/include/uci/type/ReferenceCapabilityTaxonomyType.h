/** @file ReferenceCapabilityTaxonomyType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_REFERENCECAPABILITYTAXONOMYTYPE_H
#define UCI_TYPE_REFERENCECAPABILITYTAXONOMYTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ActionTypeEnum.h"
#include "CommCapabilityEnum.h"
#include "CyberTypeEnum.h"
#include "EffectTypeEnum.h"
#include "EnvironmentPairingEnum.h"
#include "IdentificationTypeEnum.h"
#include "SensingTypeEnum.h"
#include "WeaponTypeEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ReferenceCapabilityTaxonomyType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ReferenceCapabilityTaxonomyType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ReferenceCapabilityTaxonomyType.
    */
  static UCI_EXPORT ReferenceCapabilityTaxonomyType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ReferenceCapabilityTaxonomyType initializing the data accessed by the new
    * ReferenceCapabilityTaxonomyType using the data accessed by the specified ReferenceCapabilityTaxonomyType (cloning).
    *
    * @param accessor The ReferenceCapabilityTaxonomyType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created ReferenceCapabilityTaxonomyType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ReferenceCapabilityTaxonomyType.
    */
  static UCI_EXPORT ReferenceCapabilityTaxonomyType& create(const ReferenceCapabilityTaxonomyType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ReferenceCapabilityTaxonomyType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The ReferenceCapabilityTaxonomyType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ReferenceCapabilityTaxonomyType& accessor);

  /** Returns this accessor's type constant, i.e. referenceCapabilityTaxonomyType.
    *
    * @return This accessor's type constant, i.e. referenceCapabilityTaxonomyType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::referenceCapabilityTaxonomyType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ReferenceCapabilityTaxonomyType.
    *
    * @return The version that was initialized from the uci:version attribute of ReferenceCapabilityTaxonomyType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ReferenceCapabilityTaxonomyType& accessor) = 0;

  /** Indicates the domain/environment which the Capability is employed from and the "target" domain/environment. See
    * enumerated type annotations for further details. List size for this element is based on "Select All That Apply"
    * condition. [Occurrences: Minimum: 1; Maximum: 48]
    */
  typedef uci::base::BoundedList<uci::type::EnvironmentPairingEnum, uci::type::accessorType::environmentPairingEnum> DomainPairing;

  /** Indicates the Effect of the Capability. See enumerated type annotations for further details. List size for this
    * element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 47]
    */
  typedef uci::base::BoundedList<uci::type::EffectTypeEnum, uci::type::accessorType::effectTypeEnum> Effect;

  /** Indicates an Action that implements the Capability. See enumerated type annotations for further details. List size
    * for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 84]
    */
  typedef uci::base::BoundedList<uci::type::ActionTypeEnum, uci::type::accessorType::actionTypeEnum> Action;

  /** Indicates a form of sensing that implements the Capability. See enumerated type annotations for further details. List
    * size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 35]
    */
  typedef uci::base::BoundedList<uci::type::SensingTypeEnum, uci::type::accessorType::sensingTypeEnum> Sensing;

  /** Indicates a weapon that implements the Capability. Offensive, defensive and self-protect weapons are included. Cyber
    * weapons are described in the sibling Cyber element. See enumerated type annotations for further details. List size
    * for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 28]
    */
  typedef uci::base::BoundedList<uci::type::WeaponTypeEnum, uci::type::accessorType::weaponTypeEnum> Weapon;

  /** Indicates a form of communications that implements the Capability. See enumerated type annotations for further
    * details. List size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum:
    * 53]
    */
  typedef uci::base::BoundedList<uci::type::CommCapabilityEnum, uci::type::accessorType::commCapabilityEnum> Communications;

  /** Indicates a form of self-identification that implements the Capability. See enumerated type annotations for further
    * details. List size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum:
    * 8]
    */
  typedef uci::base::BoundedList<uci::type::IdentificationTypeEnum, uci::type::accessorType::identificationTypeEnum> Identification;

  /** Indicates a form of offensive (OCO) or defensive (DCO) cyber operation that implements the Capability. See enumerated
    * type annotations for further details. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 17]
    */
  typedef uci::base::BoundedList<uci::type::CyberTypeEnum, uci::type::accessorType::cyberTypeEnum> Cyber;

  /** Returns a const reference to the bounded list identified by DomainPairing.
    *
    * @return A const reference to the bounded list identified by DomainPairing.
    */
  virtual const uci::type::ReferenceCapabilityTaxonomyType::DomainPairing& getDomainPairing() const = 0;

  /** Returns a reference to the bounded list identified by DomainPairing.
    *
    * @return A reference to the bounded list identified by DomainPairing.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType::DomainPairing& getDomainPairing() = 0;

  /** Sets the bounded list identified by DomainPairing.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType& setDomainPairing(const uci::type::ReferenceCapabilityTaxonomyType::DomainPairing& value) = 0;

  /** Returns a const reference to the bounded list identified by Effect.
    *
    * @return A const reference to the bounded list identified by Effect.
    */
  virtual const uci::type::ReferenceCapabilityTaxonomyType::Effect& getEffect() const = 0;

  /** Returns a reference to the bounded list identified by Effect.
    *
    * @return A reference to the bounded list identified by Effect.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType::Effect& getEffect() = 0;

  /** Sets the bounded list identified by Effect.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType& setEffect(const uci::type::ReferenceCapabilityTaxonomyType::Effect& value) = 0;

  /** Returns a const reference to the bounded list identified by Action.
    *
    * @return A const reference to the bounded list identified by Action.
    */
  virtual const uci::type::ReferenceCapabilityTaxonomyType::Action& getAction() const = 0;

  /** Returns a reference to the bounded list identified by Action.
    *
    * @return A reference to the bounded list identified by Action.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType::Action& getAction() = 0;

  /** Sets the bounded list identified by Action.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType& setAction(const uci::type::ReferenceCapabilityTaxonomyType::Action& value) = 0;

  /** Returns a const reference to the bounded list identified by Sensing.
    *
    * @return A const reference to the bounded list identified by Sensing.
    */
  virtual const uci::type::ReferenceCapabilityTaxonomyType::Sensing& getSensing() const = 0;

  /** Returns a reference to the bounded list identified by Sensing.
    *
    * @return A reference to the bounded list identified by Sensing.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType::Sensing& getSensing() = 0;

  /** Sets the bounded list identified by Sensing.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType& setSensing(const uci::type::ReferenceCapabilityTaxonomyType::Sensing& value) = 0;

  /** Returns a const reference to the bounded list identified by Weapon.
    *
    * @return A const reference to the bounded list identified by Weapon.
    */
  virtual const uci::type::ReferenceCapabilityTaxonomyType::Weapon& getWeapon() const = 0;

  /** Returns a reference to the bounded list identified by Weapon.
    *
    * @return A reference to the bounded list identified by Weapon.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType::Weapon& getWeapon() = 0;

  /** Sets the bounded list identified by Weapon.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType& setWeapon(const uci::type::ReferenceCapabilityTaxonomyType::Weapon& value) = 0;

  /** Returns a const reference to the bounded list identified by Communications.
    *
    * @return A const reference to the bounded list identified by Communications.
    */
  virtual const uci::type::ReferenceCapabilityTaxonomyType::Communications& getCommunications() const = 0;

  /** Returns a reference to the bounded list identified by Communications.
    *
    * @return A reference to the bounded list identified by Communications.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType::Communications& getCommunications() = 0;

  /** Sets the bounded list identified by Communications.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType& setCommunications(const uci::type::ReferenceCapabilityTaxonomyType::Communications& value) = 0;

  /** Returns a const reference to the bounded list identified by Identification.
    *
    * @return A const reference to the bounded list identified by Identification.
    */
  virtual const uci::type::ReferenceCapabilityTaxonomyType::Identification& getIdentification() const = 0;

  /** Returns a reference to the bounded list identified by Identification.
    *
    * @return A reference to the bounded list identified by Identification.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType::Identification& getIdentification() = 0;

  /** Sets the bounded list identified by Identification.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType& setIdentification(const uci::type::ReferenceCapabilityTaxonomyType::Identification& value) = 0;

  /** Returns a const reference to the bounded list identified by Cyber.
    *
    * @return A const reference to the bounded list identified by Cyber.
    */
  virtual const uci::type::ReferenceCapabilityTaxonomyType::Cyber& getCyber() const = 0;

  /** Returns a reference to the bounded list identified by Cyber.
    *
    * @return A reference to the bounded list identified by Cyber.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType::Cyber& getCyber() = 0;

  /** Sets the bounded list identified by Cyber.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ReferenceCapabilityTaxonomyType& setCyber(const uci::type::ReferenceCapabilityTaxonomyType::Cyber& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ReferenceCapabilityTaxonomyType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ReferenceCapabilityTaxonomyType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ReferenceCapabilityTaxonomyType to copy from.
    */
  ReferenceCapabilityTaxonomyType(const ReferenceCapabilityTaxonomyType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ReferenceCapabilityTaxonomyType to the contents of the
    * ReferenceCapabilityTaxonomyType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ReferenceCapabilityTaxonomyType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this ReferenceCapabilityTaxonomyType.
    * @return A reference to this ReferenceCapabilityTaxonomyType.
    */
  ReferenceCapabilityTaxonomyType& operator=(const ReferenceCapabilityTaxonomyType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_REFERENCECAPABILITYTAXONOMYTYPE_H

