/** @file OrbitalSurveillanceCapabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ORBITALSURVEILLANCECAPABILITYTYPE_H
#define UCI_TYPE_ORBITALSURVEILLANCECAPABILITYTYPE_H

#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CharacterizationTypeEnum.h"
#include "CommandableCapabilityDeclarationType.h"
#include "OrbitalSurveillanceCapabilityEnum.h"
#include "OrbitalSurveillanceMessageOutputsEnum.h"
#include "OrbitalSurveillanceSubCapabilityEnum.h"
#include "SensorConstraintsBaseType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type describes the Orbital Surveillance capability. */
class OrbitalSurveillanceCapabilityType : public virtual CommandableCapabilityDeclarationType {
public:

  /** This method constructs a new OrbitalSurveillanceCapabilityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitalSurveillanceCapabilityType.
    */
  static UCI_EXPORT OrbitalSurveillanceCapabilityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OrbitalSurveillanceCapabilityType initializing the data accessed by the new
    * OrbitalSurveillanceCapabilityType using the data accessed by the specified OrbitalSurveillanceCapabilityType
    * (cloning).
    *
    * @param accessor The OrbitalSurveillanceCapabilityType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created OrbitalSurveillanceCapabilityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitalSurveillanceCapabilityType.
    */
  static UCI_EXPORT OrbitalSurveillanceCapabilityType& create(const OrbitalSurveillanceCapabilityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OrbitalSurveillanceCapabilityType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The OrbitalSurveillanceCapabilityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OrbitalSurveillanceCapabilityType& accessor);

  /** Returns this accessor's type constant, i.e. orbitalSurveillanceCapabilityType.
    *
    * @return This accessor's type constant, i.e. orbitalSurveillanceCapabilityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::orbitalSurveillanceCapabilityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OrbitalSurveillanceCapabilityType.
    *
    * @return The version that was initialized from the uci:version attribute of OrbitalSurveillanceCapabilityType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.001.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OrbitalSurveillanceCapabilityType& accessor) = 0;

  /** Indicates a SubCapability of the OrbitalSurveillance Capability; the second tier in the taxonomy of the
    * OrbitalSurveillance capability type. For OrbitalSurveillance, the second tier is an indication of the desired outcome
    * of the collection. See enumeration annotations for further details. List size for this element is based on "Select
    * All That Apply" condition. [Occurrences: Minimum: 1; Maximum: 20]
    */
  typedef uci::base::BoundedList<uci::type::OrbitalSurveillanceSubCapabilityEnum, uci::type::accessorType::orbitalSurveillanceSubCapabilityEnum> SubCapabilityType;

  /** Indicates a type of characterization phenomenology that is supported by this capability. List size for this element
    * is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 10]
    */
  typedef uci::base::BoundedList<uci::type::CharacterizationTypeEnum, uci::type::accessorType::characterizationTypeEnum> CharacterizationOptions;

  /** This field specifies which type of sensor constraints are supported by this capability. If multiple instances are
    * given, each should be of a different constraint type as indicated by the child element. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SensorConstraintsBaseType, uci::type::accessorType::sensorConstraintsBaseType> SensorConstraints;

  /** Indicates a message that is an output of the Capability. See enumerated type annotations for details. List size for
    * this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 11]
    */
  typedef uci::base::BoundedList<uci::type::OrbitalSurveillanceMessageOutputsEnum, uci::type::accessorType::orbitalSurveillanceMessageOutputsEnum> MessageOutput;

  /** Returns a const reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A const reference to the value of the enumeration identified by CapabilityType.
    */
  virtual const uci::type::OrbitalSurveillanceCapabilityEnum& getCapabilityType() const = 0;

  /** Returns a reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A reference to the value of the enumeration identified by CapabilityType.
    */
  virtual uci::type::OrbitalSurveillanceCapabilityEnum& getCapabilityType() = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceCapabilityType& setCapabilityType(const uci::type::OrbitalSurveillanceCapabilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceCapabilityType& setCapabilityType(uci::type::OrbitalSurveillanceCapabilityEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by SubCapabilityType.
    *
    * @return A const reference to the bounded list identified by SubCapabilityType.
    */
  virtual const uci::type::OrbitalSurveillanceCapabilityType::SubCapabilityType& getSubCapabilityType() const = 0;

  /** Returns a reference to the bounded list identified by SubCapabilityType.
    *
    * @return A reference to the bounded list identified by SubCapabilityType.
    */
  virtual uci::type::OrbitalSurveillanceCapabilityType::SubCapabilityType& getSubCapabilityType() = 0;

  /** Sets the bounded list identified by SubCapabilityType.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceCapabilityType& setSubCapabilityType(const uci::type::OrbitalSurveillanceCapabilityType::SubCapabilityType& value) = 0;

  /** Returns a const reference to the bounded list identified by CharacterizationOptions.
    *
    * @return A const reference to the bounded list identified by CharacterizationOptions.
    */
  virtual const uci::type::OrbitalSurveillanceCapabilityType::CharacterizationOptions& getCharacterizationOptions() const = 0;

  /** Returns a reference to the bounded list identified by CharacterizationOptions.
    *
    * @return A reference to the bounded list identified by CharacterizationOptions.
    */
  virtual uci::type::OrbitalSurveillanceCapabilityType::CharacterizationOptions& getCharacterizationOptions() = 0;

  /** Sets the bounded list identified by CharacterizationOptions.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceCapabilityType& setCharacterizationOptions(const uci::type::OrbitalSurveillanceCapabilityType::CharacterizationOptions& value) = 0;

  /** Returns a const reference to the bounded list identified by SensorConstraints.
    *
    * @return A const reference to the bounded list identified by SensorConstraints.
    */
  virtual const uci::type::OrbitalSurveillanceCapabilityType::SensorConstraints& getSensorConstraints() const = 0;

  /** Returns a reference to the bounded list identified by SensorConstraints.
    *
    * @return A reference to the bounded list identified by SensorConstraints.
    */
  virtual uci::type::OrbitalSurveillanceCapabilityType::SensorConstraints& getSensorConstraints() = 0;

  /** Sets the bounded list identified by SensorConstraints.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceCapabilityType& setSensorConstraints(const uci::type::OrbitalSurveillanceCapabilityType::SensorConstraints& value) = 0;

  /** Returns a const reference to the bounded list identified by MessageOutput.
    *
    * @return A const reference to the bounded list identified by MessageOutput.
    */
  virtual const uci::type::OrbitalSurveillanceCapabilityType::MessageOutput& getMessageOutput() const = 0;

  /** Returns a reference to the bounded list identified by MessageOutput.
    *
    * @return A reference to the bounded list identified by MessageOutput.
    */
  virtual uci::type::OrbitalSurveillanceCapabilityType::MessageOutput& getMessageOutput() = 0;

  /** Sets the bounded list identified by MessageOutput.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceCapabilityType& setMessageOutput(const uci::type::OrbitalSurveillanceCapabilityType::MessageOutput& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OrbitalSurveillanceCapabilityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OrbitalSurveillanceCapabilityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OrbitalSurveillanceCapabilityType to copy from.
    */
  OrbitalSurveillanceCapabilityType(const OrbitalSurveillanceCapabilityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OrbitalSurveillanceCapabilityType to the contents of the
    * OrbitalSurveillanceCapabilityType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The OrbitalSurveillanceCapabilityType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this OrbitalSurveillanceCapabilityType.
    * @return A reference to this OrbitalSurveillanceCapabilityType.
    */
  OrbitalSurveillanceCapabilityType& operator=(const OrbitalSurveillanceCapabilityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ORBITALSURVEILLANCECAPABILITYTYPE_H

