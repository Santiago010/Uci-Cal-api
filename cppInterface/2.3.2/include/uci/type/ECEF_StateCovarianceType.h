/** @file ECEF_StateCovarianceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ECEF_STATECOVARIANCETYPE_H
#define UCI_TYPE_ECEF_STATECOVARIANCETYPE_H

#include "../base/Accessor.h"
#include "../base/DoubleAccessor.h"
#include "../base/export.h"
#include "ECEF_AccelerationAccelerationCovarianceType.h"
#include "ECEF_PositionAccelerationCovarianceType.h"
#include "ECEF_PositionOrientationCovarianceType.h"
#include "ECEF_PositionPositionCovarianceType.h"
#include "ECEF_PositionVelocityCovarianceType.h"
#include "ECEF_VelocityAccelerationCovarianceType.h"
#include "ECEF_VelocityOrientationCovarianceType.h"
#include "ECEF_VelocityVelocityCovarianceType.h"
#include "OrientationCovarianceType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The 1-sigma covariance terms for kinematics in the Earth-Centered-Earth-Fixed (ECEF) coordinate system. The
  * covariances are symmetric and therefore the covariance values expressed here are the minimum set.
  */
class ECEF_StateCovarianceType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ECEF_StateCovarianceType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ECEF_StateCovarianceType.
    */
  static UCI_EXPORT ECEF_StateCovarianceType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ECEF_StateCovarianceType initializing the data accessed by the new
    * ECEF_StateCovarianceType using the data accessed by the specified ECEF_StateCovarianceType (cloning).
    *
    * @param accessor The ECEF_StateCovarianceType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created ECEF_StateCovarianceType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ECEF_StateCovarianceType.
    */
  static UCI_EXPORT ECEF_StateCovarianceType& create(const ECEF_StateCovarianceType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ECEF_StateCovarianceType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The ECEF_StateCovarianceType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ECEF_StateCovarianceType& accessor);

  /** Returns this accessor's type constant, i.e. eCEF_StateCovarianceType.
    *
    * @return This accessor's type constant, i.e. eCEF_StateCovarianceType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::eCEF_StateCovarianceType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ECEF_StateCovarianceType.
    *
    * @return The version that was initialized from the uci:version attribute of ECEF_StateCovarianceType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ECEF_StateCovarianceType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by TimeBiasError.
    *
    * @return The value of the simple primitive data type identified by TimeBiasError.
    */
  virtual xs::Double getTimeBiasError() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TimeBiasError.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& setTimeBiasError(xs::Double value) = 0;

  /** Returns whether the Element identified by TimeBiasError exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TimeBiasError is enabled or not.
    */
  virtual bool hasTimeBiasError() const = 0;

  /** Clears (disabled) the Element identified by TimeBiasError.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& clearTimeBiasError() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PositionPosition.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PositionPosition.
    */
  virtual const uci::type::ECEF_PositionPositionCovarianceType& getPositionPosition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PositionPosition.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PositionPosition.
    */
  virtual uci::type::ECEF_PositionPositionCovarianceType& getPositionPosition() = 0;

  /** Sets the complex content identified by PositionPosition to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PositionPosition.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& setPositionPosition(const uci::type::ECEF_PositionPositionCovarianceType& value) = 0;

  /** Returns whether the Element identified by PositionPosition exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PositionPosition is enabled or not.
    */
  virtual bool hasPositionPosition() const = 0;

  /** Enables the Element identified by PositionPosition.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PositionPosition.
    */
  virtual uci::type::ECEF_PositionPositionCovarianceType& enablePositionPosition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PositionPosition.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& clearPositionPosition() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PositionVelocity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PositionVelocity.
    */
  virtual const uci::type::ECEF_PositionVelocityCovarianceType& getPositionVelocity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PositionVelocity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PositionVelocity.
    */
  virtual uci::type::ECEF_PositionVelocityCovarianceType& getPositionVelocity() = 0;

  /** Sets the complex content identified by PositionVelocity to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PositionVelocity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& setPositionVelocity(const uci::type::ECEF_PositionVelocityCovarianceType& value) = 0;

  /** Returns whether the Element identified by PositionVelocity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PositionVelocity is enabled or not.
    */
  virtual bool hasPositionVelocity() const = 0;

  /** Enables the Element identified by PositionVelocity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PositionVelocity.
    */
  virtual uci::type::ECEF_PositionVelocityCovarianceType& enablePositionVelocity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PositionVelocity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& clearPositionVelocity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by VelocityVelocity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by VelocityVelocity.
    */
  virtual const uci::type::ECEF_VelocityVelocityCovarianceType& getVelocityVelocity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by VelocityVelocity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by VelocityVelocity.
    */
  virtual uci::type::ECEF_VelocityVelocityCovarianceType& getVelocityVelocity() = 0;

  /** Sets the complex content identified by VelocityVelocity to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by VelocityVelocity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& setVelocityVelocity(const uci::type::ECEF_VelocityVelocityCovarianceType& value) = 0;

  /** Returns whether the Element identified by VelocityVelocity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VelocityVelocity is enabled or not.
    */
  virtual bool hasVelocityVelocity() const = 0;

  /** Enables the Element identified by VelocityVelocity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by VelocityVelocity.
    */
  virtual uci::type::ECEF_VelocityVelocityCovarianceType& enableVelocityVelocity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VelocityVelocity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& clearVelocityVelocity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AccelerationAcceleration.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AccelerationAcceleration.
    */
  virtual const uci::type::ECEF_AccelerationAccelerationCovarianceType& getAccelerationAcceleration() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * AccelerationAcceleration.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AccelerationAcceleration.
    */
  virtual uci::type::ECEF_AccelerationAccelerationCovarianceType& getAccelerationAcceleration() = 0;

  /** Sets the complex content identified by AccelerationAcceleration to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AccelerationAcceleration.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& setAccelerationAcceleration(const uci::type::ECEF_AccelerationAccelerationCovarianceType& value) = 0;

  /** Returns whether the Element identified by AccelerationAcceleration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AccelerationAcceleration is enabled or not.
    */
  virtual bool hasAccelerationAcceleration() const = 0;

  /** Enables the Element identified by AccelerationAcceleration.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AccelerationAcceleration.
    */
  virtual uci::type::ECEF_AccelerationAccelerationCovarianceType& enableAccelerationAcceleration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AccelerationAcceleration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& clearAccelerationAcceleration() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * PositionAcceleration.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      PositionAcceleration.
    */
  virtual const uci::type::ECEF_PositionAccelerationCovarianceType& getPositionAcceleration() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PositionAcceleration.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PositionAcceleration.
    */
  virtual uci::type::ECEF_PositionAccelerationCovarianceType& getPositionAcceleration() = 0;

  /** Sets the complex content identified by PositionAcceleration to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PositionAcceleration.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& setPositionAcceleration(const uci::type::ECEF_PositionAccelerationCovarianceType& value) = 0;

  /** Returns whether the Element identified by PositionAcceleration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PositionAcceleration is enabled or not.
    */
  virtual bool hasPositionAcceleration() const = 0;

  /** Enables the Element identified by PositionAcceleration.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PositionAcceleration.
    */
  virtual uci::type::ECEF_PositionAccelerationCovarianceType& enablePositionAcceleration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PositionAcceleration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& clearPositionAcceleration() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * VelocityAcceleration.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      VelocityAcceleration.
    */
  virtual const uci::type::ECEF_VelocityAccelerationCovarianceType& getVelocityAcceleration() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by VelocityAcceleration.
    *
    * @return A reference to the accessor that provides access to the complex content identified by VelocityAcceleration.
    */
  virtual uci::type::ECEF_VelocityAccelerationCovarianceType& getVelocityAcceleration() = 0;

  /** Sets the complex content identified by VelocityAcceleration to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by VelocityAcceleration.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& setVelocityAcceleration(const uci::type::ECEF_VelocityAccelerationCovarianceType& value) = 0;

  /** Returns whether the Element identified by VelocityAcceleration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VelocityAcceleration is enabled or not.
    */
  virtual bool hasVelocityAcceleration() const = 0;

  /** Enables the Element identified by VelocityAcceleration.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by VelocityAcceleration.
    */
  virtual uci::type::ECEF_VelocityAccelerationCovarianceType& enableVelocityAcceleration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VelocityAcceleration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& clearVelocityAcceleration() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrientationCovariance.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrientationCovariance.
    */
  virtual const uci::type::OrientationCovarianceType& getOrientationCovariance() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrientationCovariance.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrientationCovariance.
    */
  virtual uci::type::OrientationCovarianceType& getOrientationCovariance() = 0;

  /** Sets the complex content identified by OrientationCovariance to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrientationCovariance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& setOrientationCovariance(const uci::type::OrientationCovarianceType& value) = 0;

  /** Returns whether the Element identified by OrientationCovariance exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrientationCovariance is enabled or not.
    */
  virtual bool hasOrientationCovariance() const = 0;

  /** Enables the Element identified by OrientationCovariance.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrientationCovariance.
    */
  virtual uci::type::OrientationCovarianceType& enableOrientationCovariance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrientationCovariance.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& clearOrientationCovariance() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * PositionOrientationCovariance.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      PositionOrientationCovariance.
    */
  virtual const uci::type::ECEF_PositionOrientationCovarianceType& getPositionOrientationCovariance() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * PositionOrientationCovariance.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      PositionOrientationCovariance.
    */
  virtual uci::type::ECEF_PositionOrientationCovarianceType& getPositionOrientationCovariance() = 0;

  /** Sets the complex content identified by PositionOrientationCovariance to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PositionOrientationCovariance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& setPositionOrientationCovariance(const uci::type::ECEF_PositionOrientationCovarianceType& value) = 0;

  /** Returns whether the Element identified by PositionOrientationCovariance exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PositionOrientationCovariance is enabled or not.
    */
  virtual bool hasPositionOrientationCovariance() const = 0;

  /** Enables the Element identified by PositionOrientationCovariance.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      PositionOrientationCovariance.
    */
  virtual uci::type::ECEF_PositionOrientationCovarianceType& enablePositionOrientationCovariance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PositionOrientationCovariance.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& clearPositionOrientationCovariance() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * VelocityOrientationCovariance.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      VelocityOrientationCovariance.
    */
  virtual const uci::type::ECEF_VelocityOrientationCovarianceType& getVelocityOrientationCovariance() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * VelocityOrientationCovariance.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      VelocityOrientationCovariance.
    */
  virtual uci::type::ECEF_VelocityOrientationCovarianceType& getVelocityOrientationCovariance() = 0;

  /** Sets the complex content identified by VelocityOrientationCovariance to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by VelocityOrientationCovariance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& setVelocityOrientationCovariance(const uci::type::ECEF_VelocityOrientationCovarianceType& value) = 0;

  /** Returns whether the Element identified by VelocityOrientationCovariance exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VelocityOrientationCovariance is enabled or not.
    */
  virtual bool hasVelocityOrientationCovariance() const = 0;

  /** Enables the Element identified by VelocityOrientationCovariance.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      VelocityOrientationCovariance.
    */
  virtual uci::type::ECEF_VelocityOrientationCovarianceType& enableVelocityOrientationCovariance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VelocityOrientationCovariance.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_StateCovarianceType& clearVelocityOrientationCovariance() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ECEF_StateCovarianceType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ECEF_StateCovarianceType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ECEF_StateCovarianceType to copy from.
    */
  ECEF_StateCovarianceType(const ECEF_StateCovarianceType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ECEF_StateCovarianceType to the contents of the
    * ECEF_StateCovarianceType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ECEF_StateCovarianceType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this ECEF_StateCovarianceType.
    * @return A reference to this ECEF_StateCovarianceType.
    */
  ECEF_StateCovarianceType& operator=(const ECEF_StateCovarianceType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ECEF_STATECOVARIANCETYPE_H

