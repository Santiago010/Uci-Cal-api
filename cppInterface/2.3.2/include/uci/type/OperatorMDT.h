/** @file OperatorMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OPERATORMDT_H
#define UCI_TYPE_OPERATORMDT_H

#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ContactDetailsType.h"
#include "DataRecordBaseType.h"
#include "ForeignKeyType.h"
#include "OperatorID_Type.h"
#include "OperatorRoleID_Type.h"
#include "OperatorStatusEnum.h"
#include "SystemID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class OperatorMDT : public virtual DataRecordBaseType {
public:

  /** This method constructs a new OperatorMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OperatorMDT.
    */
  static UCI_EXPORT OperatorMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OperatorMDT initializing the data accessed by the new OperatorMDT using the data
    * accessed by the specified OperatorMDT (cloning).
    *
    * @param accessor The OperatorMDT that provides access to the data that is to be used to initialize the data accessed
    *      by the new created OperatorMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OperatorMDT.
    */
  static UCI_EXPORT OperatorMDT& create(const OperatorMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OperatorMDT. Use of the specified accessor after it has been destroyed will result
    * in undefined behavior.
    *
    * @param accessor The OperatorMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OperatorMDT& accessor);

  /** Returns this accessor's type constant, i.e. operatorMDT.
    *
    * @return This accessor's type constant, i.e. operatorMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::operatorMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of OperatorMDT.
    *
    * @return The version that was initialized from the uci:version attribute of OperatorMDT.
    */
  static std::string getUCITypeVersion() {
    return "000.001.000.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OperatorMDT& accessor) = 0;

  /** An operator can have many roles such as Mission Director, Intel Analyst, Liaison Officer, etc. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OperatorRoleID_Type, uci::type::accessorType::operatorRoleID_Type> OperatorRoleID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OperatorID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OperatorID.
    */
  virtual const uci::type::OperatorID_Type& getOperatorID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OperatorID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OperatorID.
    */
  virtual uci::type::OperatorID_Type& getOperatorID() = 0;

  /** Sets the complex content identified by OperatorID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OperatorID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorMDT& setOperatorID(const uci::type::OperatorID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OperatorSystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OperatorSystemID.
    */
  virtual const uci::type::SystemID_Type& getOperatorSystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OperatorSystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OperatorSystemID.
    */
  virtual uci::type::SystemID_Type& getOperatorSystemID() = 0;

  /** Sets the complex content identified by OperatorSystemID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OperatorSystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorMDT& setOperatorSystemID(const uci::type::SystemID_Type& value) = 0;

  /** Returns whether the Element identified by OperatorSystemID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OperatorSystemID is enabled or not.
    */
  virtual bool hasOperatorSystemID() const = 0;

  /** Enables the Element identified by OperatorSystemID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OperatorSystemID.
    */
  virtual uci::type::SystemID_Type& enableOperatorSystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OperatorSystemID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorMDT& clearOperatorSystemID() = 0;

  /** Returns a const reference to the value of the enumeration identified by OperatorStatus.
    *
    * @return A const reference to the value of the enumeration identified by OperatorStatus.
    */
  virtual const uci::type::OperatorStatusEnum& getOperatorStatus() const = 0;

  /** Returns a reference to the value of the enumeration identified by OperatorStatus.
    *
    * @return A reference to the value of the enumeration identified by OperatorStatus.
    */
  virtual uci::type::OperatorStatusEnum& getOperatorStatus() = 0;

  /** Sets the value of the enumeration identified by OperatorStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorMDT& setOperatorStatus(const uci::type::OperatorStatusEnum& value) = 0;

  /** Sets the value of the enumeration identified by OperatorStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorMDT& setOperatorStatus(uci::type::OperatorStatusEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Station.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Station.
    */
  virtual const uci::type::ForeignKeyType& getStation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Station.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Station.
    */
  virtual uci::type::ForeignKeyType& getStation() = 0;

  /** Sets the complex content identified by Station to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Station.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorMDT& setStation(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by Station exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Station is enabled or not.
    */
  virtual bool hasStation() const = 0;

  /** Enables the Element identified by Station.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Station.
    */
  virtual uci::type::ForeignKeyType& enableStation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Station.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorMDT& clearStation() = 0;

  /** Returns a const reference to the bounded list identified by OperatorRoleID.
    *
    * @return A const reference to the bounded list identified by OperatorRoleID.
    */
  virtual const uci::type::OperatorMDT::OperatorRoleID& getOperatorRoleID() const = 0;

  /** Returns a reference to the bounded list identified by OperatorRoleID.
    *
    * @return A reference to the bounded list identified by OperatorRoleID.
    */
  virtual uci::type::OperatorMDT::OperatorRoleID& getOperatorRoleID() = 0;

  /** Sets the bounded list identified by OperatorRoleID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorMDT& setOperatorRoleID(const uci::type::OperatorMDT::OperatorRoleID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ContactDetails.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ContactDetails.
    */
  virtual const uci::type::ContactDetailsType& getContactDetails() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ContactDetails.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ContactDetails.
    */
  virtual uci::type::ContactDetailsType& getContactDetails() = 0;

  /** Sets the complex content identified by ContactDetails to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ContactDetails.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorMDT& setContactDetails(const uci::type::ContactDetailsType& value) = 0;

  /** Returns whether the Element identified by ContactDetails exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ContactDetails is enabled or not.
    */
  virtual bool hasContactDetails() const = 0;

  /** Enables the Element identified by ContactDetails.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ContactDetails.
    */
  virtual uci::type::ContactDetailsType& enableContactDetails(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ContactDetails.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorMDT& clearContactDetails() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OperatorMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~OperatorMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OperatorMDT to copy from.
    */
  OperatorMDT(const OperatorMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OperatorMDT to the contents of the OperatorMDT on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OperatorMDT on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this OperatorMDT.
    * @return A reference to this OperatorMDT.
    */
  OperatorMDT& operator=(const OperatorMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_OPERATORMDT_H

