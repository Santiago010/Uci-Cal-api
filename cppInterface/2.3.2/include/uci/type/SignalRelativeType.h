/** @file SignalRelativeType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SIGNALRELATIVETYPE_H
#define UCI_TYPE_SIGNALRELATIVETYPE_H

#include "../base/BooleanAccessor.h"
#include "../base/export.h"
#include "EW_MeasurementEnum.h"
#include "LOS_MeasurementWithUncertaintyType.h"
#include "MeasurementStatusEnum.h"
#include "ReferenceObjectType.h"
#include "SignalMeasurementFlagEnum.h"
#include "SignalMeasurementMethodEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SignalRelativeType : public virtual LOS_MeasurementWithUncertaintyType {
public:

  /** This method constructs a new SignalRelativeType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SignalRelativeType.
    */
  static UCI_EXPORT SignalRelativeType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SignalRelativeType initializing the data accessed by the new SignalRelativeType using
    * the data accessed by the specified SignalRelativeType (cloning).
    *
    * @param accessor The SignalRelativeType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SignalRelativeType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SignalRelativeType.
    */
  static UCI_EXPORT SignalRelativeType& create(const SignalRelativeType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SignalRelativeType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The SignalRelativeType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SignalRelativeType& accessor);

  /** Returns this accessor's type constant, i.e. signalRelativeType.
    *
    * @return This accessor's type constant, i.e. signalRelativeType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::signalRelativeType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SignalRelativeType.
    *
    * @return The version that was initialized from the uci:version attribute of SignalRelativeType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SignalRelativeType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ReferenceIdentifier.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ReferenceIdentifier.
    */
  virtual const uci::type::ReferenceObjectType& getReferenceIdentifier() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ReferenceIdentifier.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ReferenceIdentifier.
    */
  virtual uci::type::ReferenceObjectType& getReferenceIdentifier() = 0;

  /** Sets the complex content identified by ReferenceIdentifier to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ReferenceIdentifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& setReferenceIdentifier(const uci::type::ReferenceObjectType& value) = 0;

  /** Returns whether the Element identified by ReferenceIdentifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReferenceIdentifier is enabled or not.
    */
  virtual bool hasReferenceIdentifier() const = 0;

  /** Enables the Element identified by ReferenceIdentifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ReferenceIdentifier.
    */
  virtual uci::type::ReferenceObjectType& enableReferenceIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReferenceIdentifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& clearReferenceIdentifier() = 0;

  /** Returns a const reference to the value of the enumeration identified by Measurement_Method.
    *
    * @return A const reference to the value of the enumeration identified by Measurement_Method.
    */
  virtual const uci::type::SignalMeasurementMethodEnum& getMeasurement_Method() const = 0;

  /** Returns a reference to the value of the enumeration identified by Measurement_Method.
    *
    * @return A reference to the value of the enumeration identified by Measurement_Method.
    */
  virtual uci::type::SignalMeasurementMethodEnum& getMeasurement_Method() = 0;

  /** Sets the value of the enumeration identified by Measurement_Method.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& setMeasurement_Method(const uci::type::SignalMeasurementMethodEnum& value) = 0;

  /** Sets the value of the enumeration identified by Measurement_Method.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& setMeasurement_Method(uci::type::SignalMeasurementMethodEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Measurement_Method exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Measurement_Method is enabled or not.
    */
  virtual bool hasMeasurement_Method() const = 0;

  /** Enables the Element identified by Measurement_Method.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Measurement_Method.
    */
  virtual uci::type::SignalMeasurementMethodEnum& enableMeasurement_Method(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Measurement_Method.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& clearMeasurement_Method() = 0;

  /** Returns a const reference to the value of the enumeration identified by Measurement_Status.
    *
    * @return A const reference to the value of the enumeration identified by Measurement_Status.
    */
  virtual const uci::type::MeasurementStatusEnum& getMeasurement_Status() const = 0;

  /** Returns a reference to the value of the enumeration identified by Measurement_Status.
    *
    * @return A reference to the value of the enumeration identified by Measurement_Status.
    */
  virtual uci::type::MeasurementStatusEnum& getMeasurement_Status() = 0;

  /** Sets the value of the enumeration identified by Measurement_Status.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& setMeasurement_Status(const uci::type::MeasurementStatusEnum& value) = 0;

  /** Sets the value of the enumeration identified by Measurement_Status.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& setMeasurement_Status(uci::type::MeasurementStatusEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Measurement_Status exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Measurement_Status is enabled or not.
    */
  virtual bool hasMeasurement_Status() const = 0;

  /** Enables the Element identified by Measurement_Status.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Measurement_Status.
    */
  virtual uci::type::MeasurementStatusEnum& enableMeasurement_Status(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Measurement_Status.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& clearMeasurement_Status() = 0;

  /** Returns a const reference to the value of the enumeration identified by Measurement_Flag.
    *
    * @return A const reference to the value of the enumeration identified by Measurement_Flag.
    */
  virtual const uci::type::SignalMeasurementFlagEnum& getMeasurement_Flag() const = 0;

  /** Returns a reference to the value of the enumeration identified by Measurement_Flag.
    *
    * @return A reference to the value of the enumeration identified by Measurement_Flag.
    */
  virtual uci::type::SignalMeasurementFlagEnum& getMeasurement_Flag() = 0;

  /** Sets the value of the enumeration identified by Measurement_Flag.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& setMeasurement_Flag(const uci::type::SignalMeasurementFlagEnum& value) = 0;

  /** Sets the value of the enumeration identified by Measurement_Flag.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& setMeasurement_Flag(uci::type::SignalMeasurementFlagEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Measurement_Flag exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Measurement_Flag is enabled or not.
    */
  virtual bool hasMeasurement_Flag() const = 0;

  /** Enables the Element identified by Measurement_Flag.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Measurement_Flag.
    */
  virtual uci::type::SignalMeasurementFlagEnum& enableMeasurement_Flag(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Measurement_Flag.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& clearMeasurement_Flag() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Suspect.
    *
    * @return The value of the simple primitive data type identified by Suspect.
    */
  virtual xs::Boolean getSuspect() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Suspect.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& setSuspect(xs::Boolean value) = 0;

  /** Returns whether the Element identified by Suspect exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Suspect is enabled or not.
    */
  virtual bool hasSuspect() const = 0;

  /** Clears (disabled) the Element identified by Suspect.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& clearSuspect() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ExcessiveAttitude.
    *
    * @return The value of the simple primitive data type identified by ExcessiveAttitude.
    */
  virtual xs::Boolean getExcessiveAttitude() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ExcessiveAttitude.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& setExcessiveAttitude(xs::Boolean value) = 0;

  /** Returns whether the Element identified by ExcessiveAttitude exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ExcessiveAttitude is enabled or not.
    */
  virtual bool hasExcessiveAttitude() const = 0;

  /** Clears (disabled) the Element identified by ExcessiveAttitude.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& clearExcessiveAttitude() = 0;

  /** Returns the value of the SimplePrimitive data type identified by FringeDetection.
    *
    * @return The value of the simple primitive data type identified by FringeDetection.
    */
  virtual xs::Boolean getFringeDetection() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FringeDetection.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& setFringeDetection(xs::Boolean value) = 0;

  /** Returns whether the Element identified by FringeDetection exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FringeDetection is enabled or not.
    */
  virtual bool hasFringeDetection() const = 0;

  /** Clears (disabled) the Element identified by FringeDetection.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& clearFringeDetection() = 0;

  /** Returns a const reference to the value of the enumeration identified by EW_MeasurementType.
    *
    * @return A const reference to the value of the enumeration identified by EW_MeasurementType.
    */
  virtual const uci::type::EW_MeasurementEnum& getEW_MeasurementType() const = 0;

  /** Returns a reference to the value of the enumeration identified by EW_MeasurementType.
    *
    * @return A reference to the value of the enumeration identified by EW_MeasurementType.
    */
  virtual uci::type::EW_MeasurementEnum& getEW_MeasurementType() = 0;

  /** Sets the value of the enumeration identified by EW_MeasurementType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& setEW_MeasurementType(const uci::type::EW_MeasurementEnum& value) = 0;

  /** Sets the value of the enumeration identified by EW_MeasurementType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& setEW_MeasurementType(uci::type::EW_MeasurementEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by EW_MeasurementType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EW_MeasurementType is enabled or not.
    */
  virtual bool hasEW_MeasurementType() const = 0;

  /** Enables the Element identified by EW_MeasurementType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by EW_MeasurementType.
    */
  virtual uci::type::EW_MeasurementEnum& enableEW_MeasurementType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EW_MeasurementType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalRelativeType& clearEW_MeasurementType() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SignalRelativeType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SignalRelativeType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SignalRelativeType to copy from.
    */
  SignalRelativeType(const SignalRelativeType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SignalRelativeType to the contents of the SignalRelativeType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SignalRelativeType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this SignalRelativeType.
    * @return A reference to this SignalRelativeType.
    */
  SignalRelativeType& operator=(const SignalRelativeType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SIGNALRELATIVETYPE_H

