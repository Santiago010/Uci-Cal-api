/** @file RadarAltimeterCapabilityCommandType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_RADARALTIMETERCAPABILITYCOMMANDTYPE_H
#define UCI_TYPE_RADARALTIMETERCAPABILITYCOMMANDTYPE_H

#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AtmosphericPropagationLossType.h"
#include "CapabilityCommandFrequencyType.h"
#include "DecibelType.h"
#include "GroundTerrainTypeEnum.h"
#include "RadarAltimeterCollectionConstraintsType.h"
#include "RadarAltimeterCollectionOptionsType.h"
#include "RepetitionType.h"
#include "SharedRF_ApertureCapabilityCommandBaseType.h"
#include "WeatherSeaStateEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class RadarAltimeterCapabilityCommandType : public virtual SharedRF_ApertureCapabilityCommandBaseType {
public:

  /** This method constructs a new RadarAltimeterCapabilityCommandType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RadarAltimeterCapabilityCommandType.
    */
  static UCI_EXPORT RadarAltimeterCapabilityCommandType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RadarAltimeterCapabilityCommandType initializing the data accessed by the new
    * RadarAltimeterCapabilityCommandType using the data accessed by the specified RadarAltimeterCapabilityCommandType
    * (cloning).
    *
    * @param accessor The RadarAltimeterCapabilityCommandType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created RadarAltimeterCapabilityCommandType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RadarAltimeterCapabilityCommandType.
    */
  static UCI_EXPORT RadarAltimeterCapabilityCommandType& create(const RadarAltimeterCapabilityCommandType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RadarAltimeterCapabilityCommandType. Use of the specified accessor after it has
    * been destroyed will result in undefined behavior.
    *
    * @param accessor The RadarAltimeterCapabilityCommandType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RadarAltimeterCapabilityCommandType& accessor);

  /** Returns this accessor's type constant, i.e. radarAltimeterCapabilityCommandType.
    *
    * @return This accessor's type constant, i.e. radarAltimeterCapabilityCommandType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::radarAltimeterCapabilityCommandType;
  }

  /** Returns the version that was initialized from the uci:version attribute of RadarAltimeterCapabilityCommandType.
    *
    * @return The version that was initialized from the uci:version attribute of RadarAltimeterCapabilityCommandType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RadarAltimeterCapabilityCommandType& accessor) = 0;

  /** Atmospheric propagation information to be used when determining SNR or range/power levels. If multiple instances are
    * given, each should be of a different band as indicated by the child element. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::AtmosphericPropagationLossType, uci::type::accessorType::atmosphericPropagationLossType> AtmosphericPropagation;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Frequency.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual const uci::type::CapabilityCommandFrequencyType& getFrequency() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Frequency.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual uci::type::CapabilityCommandFrequencyType& getFrequency() = 0;

  /** Sets the complex content identified by Frequency to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Frequency.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& setFrequency(const uci::type::CapabilityCommandFrequencyType& value) = 0;

  /** Returns whether the Element identified by Frequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Frequency is enabled or not.
    */
  virtual bool hasFrequency() const = 0;

  /** Enables the Element identified by Frequency.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual uci::type::CapabilityCommandFrequencyType& enableFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Frequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& clearFrequency() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CollectionOptions.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CollectionOptions.
    */
  virtual const uci::type::RadarAltimeterCollectionOptionsType& getCollectionOptions() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CollectionOptions.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CollectionOptions.
    */
  virtual uci::type::RadarAltimeterCollectionOptionsType& getCollectionOptions() = 0;

  /** Sets the complex content identified by CollectionOptions to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionOptions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& setCollectionOptions(const uci::type::RadarAltimeterCollectionOptionsType& value) = 0;

  /** Returns whether the Element identified by CollectionOptions exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionOptions is enabled or not.
    */
  virtual bool hasCollectionOptions() const = 0;

  /** Enables the Element identified by CollectionOptions.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CollectionOptions.
    */
  virtual uci::type::RadarAltimeterCollectionOptionsType& enableCollectionOptions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionOptions.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& clearCollectionOptions() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CollectionConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CollectionConstraints.
    */
  virtual const uci::type::RadarAltimeterCollectionConstraintsType& getCollectionConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CollectionConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CollectionConstraints.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& getCollectionConstraints() = 0;

  /** Sets the complex content identified by CollectionConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& setCollectionConstraints(const uci::type::RadarAltimeterCollectionConstraintsType& value) = 0;

  /** Returns whether the Element identified by CollectionConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionConstraints is enabled or not.
    */
  virtual bool hasCollectionConstraints() const = 0;

  /** Enables the Element identified by CollectionConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CollectionConstraints.
    */
  virtual uci::type::RadarAltimeterCollectionConstraintsType& enableCollectionConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& clearCollectionConstraints() = 0;

  /** Returns a const reference to the bounded list identified by AtmosphericPropagation.
    *
    * @return A const reference to the bounded list identified by AtmosphericPropagation.
    */
  virtual const uci::type::RadarAltimeterCapabilityCommandType::AtmosphericPropagation& getAtmosphericPropagation() const = 0;

  /** Returns a reference to the bounded list identified by AtmosphericPropagation.
    *
    * @return A reference to the bounded list identified by AtmosphericPropagation.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType::AtmosphericPropagation& getAtmosphericPropagation() = 0;

  /** Sets the bounded list identified by AtmosphericPropagation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& setAtmosphericPropagation(const uci::type::RadarAltimeterCapabilityCommandType::AtmosphericPropagation& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by SeaState.
    *
    * @return A const reference to the value of the enumeration identified by SeaState.
    */
  virtual const uci::type::WeatherSeaStateEnum& getSeaState() const = 0;

  /** Returns a reference to the value of the enumeration identified by SeaState.
    *
    * @return A reference to the value of the enumeration identified by SeaState.
    */
  virtual uci::type::WeatherSeaStateEnum& getSeaState() = 0;

  /** Sets the value of the enumeration identified by SeaState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& setSeaState(const uci::type::WeatherSeaStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by SeaState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& setSeaState(uci::type::WeatherSeaStateEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by SeaState exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SeaState is enabled or not.
    */
  virtual bool hasSeaState() const = 0;

  /** Enables the Element identified by SeaState.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by SeaState.
    */
  virtual uci::type::WeatherSeaStateEnum& enableSeaState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SeaState.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& clearSeaState() = 0;

  /** Returns a const reference to the value of the enumeration identified by TerrainType.
    *
    * @return A const reference to the value of the enumeration identified by TerrainType.
    */
  virtual const uci::type::GroundTerrainTypeEnum& getTerrainType() const = 0;

  /** Returns a reference to the value of the enumeration identified by TerrainType.
    *
    * @return A reference to the value of the enumeration identified by TerrainType.
    */
  virtual uci::type::GroundTerrainTypeEnum& getTerrainType() = 0;

  /** Sets the value of the enumeration identified by TerrainType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& setTerrainType(const uci::type::GroundTerrainTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by TerrainType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& setTerrainType(uci::type::GroundTerrainTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by TerrainType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TerrainType is enabled or not.
    */
  virtual bool hasTerrainType() const = 0;

  /** Enables the Element identified by TerrainType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by TerrainType.
    */
  virtual uci::type::GroundTerrainTypeEnum& enableTerrainType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TerrainType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& clearTerrainType() = 0;

  /** Returns the value of the SimplePrimitive data type identified by BackScatterCoefficient.
    *
    * @return The value of the simple primitive data type identified by BackScatterCoefficient.
    */
  virtual uci::type::DecibelTypeValue getBackScatterCoefficient() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by BackScatterCoefficient.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& setBackScatterCoefficient(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by BackScatterCoefficient exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BackScatterCoefficient is enabled or not.
    */
  virtual bool hasBackScatterCoefficient() const = 0;

  /** Clears (disabled) the Element identified by BackScatterCoefficient.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& clearBackScatterCoefficient() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual const uci::type::RepetitionType& getRepetition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& getRepetition() = 0;

  /** Sets the complex content identified by Repetition to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Repetition.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& setRepetition(const uci::type::RepetitionType& value) = 0;

  /** Returns whether the Element identified by Repetition exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Repetition is enabled or not.
    */
  virtual bool hasRepetition() const = 0;

  /** Enables the Element identified by Repetition.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& enableRepetition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Repetition.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterCapabilityCommandType& clearRepetition() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RadarAltimeterCapabilityCommandType() {
  }

  /** The destructor [only available to derived classes]. */
  ~RadarAltimeterCapabilityCommandType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RadarAltimeterCapabilityCommandType to copy from.
    */
  RadarAltimeterCapabilityCommandType(const RadarAltimeterCapabilityCommandType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RadarAltimeterCapabilityCommandType to the contents of the
    * RadarAltimeterCapabilityCommandType on the right hand side (rhs) of the assignment operator [only available to
    * derived classes].
    *
    * @param rhs The RadarAltimeterCapabilityCommandType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this RadarAltimeterCapabilityCommandType.
    * @return A reference to this RadarAltimeterCapabilityCommandType.
    */
  RadarAltimeterCapabilityCommandType& operator=(const RadarAltimeterCapabilityCommandType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_RADARALTIMETERCAPABILITYCOMMANDTYPE_H

