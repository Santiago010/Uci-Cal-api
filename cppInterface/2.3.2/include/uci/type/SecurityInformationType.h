/** @file SecurityInformationType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SECURITYINFORMATIONTYPE_H
#define UCI_TYPE_SECURITYINFORMATIONTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/DateTimeAccessor.h"
#include "../base/export.h"
#include "AtomicEnergyMarkingsChoiceType.h"
#include "ClassificationEnum.h"
#include "DeclassExceptionEnum.h"
#include "DisseminationControlsEnum.h"
#include "FGI_SourceOpenChoiceType.h"
#include "NonIC_MarkingsChoiceType.h"
#include "NonUS_ControlsEnum.h"
#include "OwnerProducerChoiceType.h"
#include "ReleasableToChoiceType.h"
#include "SAR_IdentifierType.h"
#include "SCI_ControlsChoiceType.h"
#include "WhitespaceVisibleString1024Type.h"
#include "WhitespaceVisibleString4096Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type indicates a variety of security information for a data asset including how a data asset shall be stored,
  * protected, and destroyed.
  */
class SecurityInformationType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SecurityInformationType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SecurityInformationType.
    */
  static UCI_EXPORT SecurityInformationType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SecurityInformationType initializing the data accessed by the new
    * SecurityInformationType using the data accessed by the specified SecurityInformationType (cloning).
    *
    * @param accessor The SecurityInformationType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created SecurityInformationType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SecurityInformationType.
    */
  static UCI_EXPORT SecurityInformationType& create(const SecurityInformationType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SecurityInformationType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The SecurityInformationType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SecurityInformationType& accessor);

  /** Returns this accessor's type constant, i.e. securityInformationType.
    *
    * @return This accessor's type constant, i.e. securityInformationType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::securityInformationType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SecurityInformationType.
    *
    * @return The version that was initialized from the uci:version attribute of SecurityInformationType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SecurityInformationType& accessor) = 0;

  /** Identifies the national government or international organization that have purview over the classification marking of
    * an information resource or portion therein. Within protected internal organizational spaces this element may include
    * up to 1000 indicators identifying information which qualifies as foreign government information for which the
    * source(s) of the information must be concealed. Measures must be taken prior to dissemination of the information to
    * conceal the source(s) of the foreign government information. Specifically, under these specific circumstances, when
    * data are moved to the shared spaces, the non-disclosable owner(s) and/or producer(s) listed in this data element's
    * value should be removed and replaced with "FGI". [Occurrences: Minimum: 1; Maximum: 358]
    */
  typedef uci::base::BoundedList<uci::type::OwnerProducerChoiceType, uci::type::accessorType::ownerProducerChoiceType> OwnerProducer;

  /** Identifies sensitive compartmented information control system(s). [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::SCI_ControlsChoiceType, uci::type::accessorType::sCI_ControlsChoiceType> SCI_Controls;

  /** Identifies the defense or intelligence programs for which special access is required. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SAR_IdentifierType, uci::type::accessorType::sAR_IdentifierType> SAR_Identifier;

  /** Identifies DoE markings. [Occurrences: Minimum: 0; Maximum: 14] */
  typedef uci::base::BoundedList<uci::type::AtomicEnergyMarkingsChoiceType, uci::type::accessorType::atomicEnergyMarkingsChoiceType> AtomicEnergyMarkings;

  /** Identifies the expansion or limitation on the distribution of information. List size for this element is based on
    * "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 13]
    */
  typedef uci::base::BoundedList<uci::type::DisseminationControlsEnum, uci::type::accessorType::disseminationControlsEnum> DisseminationControls;

  /** Identifies the country/countries and/or international organization(s) to which classified information may be
    * displayed but NOT released based on the determination of an originator in accordance with established foreign
    * disclosure procedures. This element is used in conjunction with the DisplayOnly Dissemination Controls value.
    * [Occurrences: Minimum: 0; Maximum: 357]
    */
  typedef uci::base::BoundedList<uci::type::ReleasableToChoiceType, uci::type::accessorType::releasableToChoiceType> DisplayOnlyTo;

  /** Identifies information which qualifies as foreign government information for which the source(s) of the information
    * is not concealed. The attribute can indicate that the source of information of foreign origin is UNKNOWN.
    * [Occurrences: Minimum: 0; Maximum: 357]
    */
  typedef uci::base::BoundedList<uci::type::FGI_SourceOpenChoiceType, uci::type::accessorType::fGI_SourceOpenChoiceType> FGI_SourceOpen;

  /** Identifies the country or countries and/or international organization(s) to which classified information may be
    * released based on the determination of an originator in accordance with established foreign disclosure procedures.
    * This element is used in conjunction with the Dissemination Controls element. [Occurrences: Minimum: 0; Maximum: 357]
    */
  typedef uci::base::BoundedList<uci::type::ReleasableToChoiceType, uci::type::accessorType::releasableToChoiceType> ReleasableTo;

  /** Identifies the expansion or limitation on the distribution of an information resource or portion within the domain of
    * information originating from non-intelligence components. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::NonIC_MarkingsChoiceType, uci::type::accessorType::nonIC_MarkingsChoiceType> NonIC_Markings;

  /** One or more indicators of the expansion or limitation on the distribution of an information resource or portion
    * within the domain of information originating from non-US components. List size for this element is based on "Select
    * All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 3]
    */
  typedef uci::base::BoundedList<uci::type::NonUS_ControlsEnum, uci::type::accessorType::nonUS_ControlsEnum> NonUS_Controls;

  /** A single indicator describing an exemption to the nominal 25-year point for automatic declassification. This element
    * is used in conjunction with the Declassification Date or Declassification Event. ISOO has stated it should be a
    * SINGLE value giving the longest protection. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 17]
    */
  typedef uci::base::BoundedList<uci::type::DeclassExceptionEnum, uci::type::accessorType::declassExceptionEnum> DeclassException;

  /** Returns a const reference to the value of the enumeration identified by Classification.
    *
    * @return A const reference to the value of the enumeration identified by Classification.
    */
  virtual const uci::type::ClassificationEnum& getClassification() const = 0;

  /** Returns a reference to the value of the enumeration identified by Classification.
    *
    * @return A reference to the value of the enumeration identified by Classification.
    */
  virtual uci::type::ClassificationEnum& getClassification() = 0;

  /** Sets the value of the enumeration identified by Classification.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setClassification(const uci::type::ClassificationEnum& value) = 0;

  /** Sets the value of the enumeration identified by Classification.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setClassification(uci::type::ClassificationEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by OwnerProducer.
    *
    * @return A const reference to the bounded list identified by OwnerProducer.
    */
  virtual const uci::type::SecurityInformationType::OwnerProducer& getOwnerProducer() const = 0;

  /** Returns a reference to the bounded list identified by OwnerProducer.
    *
    * @return A reference to the bounded list identified by OwnerProducer.
    */
  virtual uci::type::SecurityInformationType::OwnerProducer& getOwnerProducer() = 0;

  /** Sets the bounded list identified by OwnerProducer.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setOwnerProducer(const uci::type::SecurityInformationType::OwnerProducer& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Joint.
    *
    * @return The value of the simple primitive data type identified by Joint.
    */
  virtual xs::Boolean getJoint() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Joint.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setJoint(xs::Boolean value) = 0;

  /** Returns whether the Element identified by Joint exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Joint is enabled or not.
    */
  virtual bool hasJoint() const = 0;

  /** Clears (disabled) the Element identified by Joint.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& clearJoint() = 0;

  /** Returns a const reference to the bounded list identified by SCI_Controls.
    *
    * @return A const reference to the bounded list identified by SCI_Controls.
    */
  virtual const uci::type::SecurityInformationType::SCI_Controls& getSCI_Controls() const = 0;

  /** Returns a reference to the bounded list identified by SCI_Controls.
    *
    * @return A reference to the bounded list identified by SCI_Controls.
    */
  virtual uci::type::SecurityInformationType::SCI_Controls& getSCI_Controls() = 0;

  /** Sets the bounded list identified by SCI_Controls.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setSCI_Controls(const uci::type::SecurityInformationType::SCI_Controls& value) = 0;

  /** Returns a const reference to the bounded list identified by SAR_Identifier.
    *
    * @return A const reference to the bounded list identified by SAR_Identifier.
    */
  virtual const uci::type::SecurityInformationType::SAR_Identifier& getSAR_Identifier() const = 0;

  /** Returns a reference to the bounded list identified by SAR_Identifier.
    *
    * @return A reference to the bounded list identified by SAR_Identifier.
    */
  virtual uci::type::SecurityInformationType::SAR_Identifier& getSAR_Identifier() = 0;

  /** Sets the bounded list identified by SAR_Identifier.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setSAR_Identifier(const uci::type::SecurityInformationType::SAR_Identifier& value) = 0;

  /** Returns a const reference to the bounded list identified by AtomicEnergyMarkings.
    *
    * @return A const reference to the bounded list identified by AtomicEnergyMarkings.
    */
  virtual const uci::type::SecurityInformationType::AtomicEnergyMarkings& getAtomicEnergyMarkings() const = 0;

  /** Returns a reference to the bounded list identified by AtomicEnergyMarkings.
    *
    * @return A reference to the bounded list identified by AtomicEnergyMarkings.
    */
  virtual uci::type::SecurityInformationType::AtomicEnergyMarkings& getAtomicEnergyMarkings() = 0;

  /** Sets the bounded list identified by AtomicEnergyMarkings.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setAtomicEnergyMarkings(const uci::type::SecurityInformationType::AtomicEnergyMarkings& value) = 0;

  /** Returns a const reference to the bounded list identified by DisseminationControls.
    *
    * @return A const reference to the bounded list identified by DisseminationControls.
    */
  virtual const uci::type::SecurityInformationType::DisseminationControls& getDisseminationControls() const = 0;

  /** Returns a reference to the bounded list identified by DisseminationControls.
    *
    * @return A reference to the bounded list identified by DisseminationControls.
    */
  virtual uci::type::SecurityInformationType::DisseminationControls& getDisseminationControls() = 0;

  /** Sets the bounded list identified by DisseminationControls.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setDisseminationControls(const uci::type::SecurityInformationType::DisseminationControls& value) = 0;

  /** Returns a const reference to the bounded list identified by DisplayOnlyTo.
    *
    * @return A const reference to the bounded list identified by DisplayOnlyTo.
    */
  virtual const uci::type::SecurityInformationType::DisplayOnlyTo& getDisplayOnlyTo() const = 0;

  /** Returns a reference to the bounded list identified by DisplayOnlyTo.
    *
    * @return A reference to the bounded list identified by DisplayOnlyTo.
    */
  virtual uci::type::SecurityInformationType::DisplayOnlyTo& getDisplayOnlyTo() = 0;

  /** Sets the bounded list identified by DisplayOnlyTo.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setDisplayOnlyTo(const uci::type::SecurityInformationType::DisplayOnlyTo& value) = 0;

  /** Returns a const reference to the bounded list identified by FGI_SourceOpen.
    *
    * @return A const reference to the bounded list identified by FGI_SourceOpen.
    */
  virtual const uci::type::SecurityInformationType::FGI_SourceOpen& getFGI_SourceOpen() const = 0;

  /** Returns a reference to the bounded list identified by FGI_SourceOpen.
    *
    * @return A reference to the bounded list identified by FGI_SourceOpen.
    */
  virtual uci::type::SecurityInformationType::FGI_SourceOpen& getFGI_SourceOpen() = 0;

  /** Sets the bounded list identified by FGI_SourceOpen.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setFGI_SourceOpen(const uci::type::SecurityInformationType::FGI_SourceOpen& value) = 0;

  /** Returns a const reference to the bounded list identified by ReleasableTo.
    *
    * @return A const reference to the bounded list identified by ReleasableTo.
    */
  virtual const uci::type::SecurityInformationType::ReleasableTo& getReleasableTo() const = 0;

  /** Returns a reference to the bounded list identified by ReleasableTo.
    *
    * @return A reference to the bounded list identified by ReleasableTo.
    */
  virtual uci::type::SecurityInformationType::ReleasableTo& getReleasableTo() = 0;

  /** Sets the bounded list identified by ReleasableTo.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setReleasableTo(const uci::type::SecurityInformationType::ReleasableTo& value) = 0;

  /** Returns a const reference to the bounded list identified by NonIC_Markings.
    *
    * @return A const reference to the bounded list identified by NonIC_Markings.
    */
  virtual const uci::type::SecurityInformationType::NonIC_Markings& getNonIC_Markings() const = 0;

  /** Returns a reference to the bounded list identified by NonIC_Markings.
    *
    * @return A reference to the bounded list identified by NonIC_Markings.
    */
  virtual uci::type::SecurityInformationType::NonIC_Markings& getNonIC_Markings() = 0;

  /** Sets the bounded list identified by NonIC_Markings.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setNonIC_Markings(const uci::type::SecurityInformationType::NonIC_Markings& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ClassifiedBy.
    *
    * @return A const reference to the accessor that provides access to the string identified by ClassifiedBy.
    */
  virtual const uci::type::WhitespaceVisibleString1024Type& getClassifiedBy() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ClassifiedBy.
    *
    * @return A reference to the accessor that provides access to the string identified by ClassifiedBy.
    */
  virtual uci::type::WhitespaceVisibleString1024Type& getClassifiedBy() = 0;

  /** Sets the string identified by ClassifiedBy to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ClassifiedBy.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setClassifiedBy(const uci::type::WhitespaceVisibleString1024Type& value) = 0;

  /** Sets the string identified by ClassifiedBy to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setClassifiedBy(const std::string& value) = 0;

  /** Sets the string identified by ClassifiedBy to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setClassifiedBy(const char* value) = 0;

  /** Returns whether the Element identified by ClassifiedBy exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ClassifiedBy is enabled or not.
    */
  virtual bool hasClassifiedBy() const = 0;

  /** Enables the Element identified by ClassifiedBy.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ClassifiedBy.
    */
  virtual uci::type::WhitespaceVisibleString1024Type& enableClassifiedBy(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ClassifiedBy.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& clearClassifiedBy() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by CompilationReason.
    *
    * @return A const reference to the accessor that provides access to the string identified by CompilationReason.
    */
  virtual const uci::type::WhitespaceVisibleString1024Type& getCompilationReason() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by CompilationReason.
    *
    * @return A reference to the accessor that provides access to the string identified by CompilationReason.
    */
  virtual uci::type::WhitespaceVisibleString1024Type& getCompilationReason() = 0;

  /** Sets the string identified by CompilationReason to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by CompilationReason.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setCompilationReason(const uci::type::WhitespaceVisibleString1024Type& value) = 0;

  /** Sets the string identified by CompilationReason to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setCompilationReason(const std::string& value) = 0;

  /** Sets the string identified by CompilationReason to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setCompilationReason(const char* value) = 0;

  /** Returns whether the Element identified by CompilationReason exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CompilationReason is enabled or not.
    */
  virtual bool hasCompilationReason() const = 0;

  /** Enables the Element identified by CompilationReason.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by CompilationReason.
    */
  virtual uci::type::WhitespaceVisibleString1024Type& enableCompilationReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CompilationReason.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& clearCompilationReason() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by DerivativelyClassifiedBy.
    *
    * @return A const reference to the accessor that provides access to the string identified by DerivativelyClassifiedBy.
    */
  virtual const uci::type::WhitespaceVisibleString1024Type& getDerivativelyClassifiedBy() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by DerivativelyClassifiedBy.
    *
    * @return A reference to the accessor that provides access to the string identified by DerivativelyClassifiedBy.
    */
  virtual uci::type::WhitespaceVisibleString1024Type& getDerivativelyClassifiedBy() = 0;

  /** Sets the string identified by DerivativelyClassifiedBy to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by DerivativelyClassifiedBy.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setDerivativelyClassifiedBy(const uci::type::WhitespaceVisibleString1024Type& value) = 0;

  /** Sets the string identified by DerivativelyClassifiedBy to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setDerivativelyClassifiedBy(const std::string& value) = 0;

  /** Sets the string identified by DerivativelyClassifiedBy to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setDerivativelyClassifiedBy(const char* value) = 0;

  /** Returns whether the Element identified by DerivativelyClassifiedBy exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DerivativelyClassifiedBy is enabled or not.
    */
  virtual bool hasDerivativelyClassifiedBy() const = 0;

  /** Enables the Element identified by DerivativelyClassifiedBy.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by DerivativelyClassifiedBy.
    */
  virtual uci::type::WhitespaceVisibleString1024Type& enableDerivativelyClassifiedBy(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DerivativelyClassifiedBy.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& clearDerivativelyClassifiedBy() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ClassificationReason.
    *
    * @return A const reference to the accessor that provides access to the string identified by ClassificationReason.
    */
  virtual const uci::type::WhitespaceVisibleString4096Type& getClassificationReason() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ClassificationReason.
    *
    * @return A reference to the accessor that provides access to the string identified by ClassificationReason.
    */
  virtual uci::type::WhitespaceVisibleString4096Type& getClassificationReason() = 0;

  /** Sets the string identified by ClassificationReason to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ClassificationReason.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setClassificationReason(const uci::type::WhitespaceVisibleString4096Type& value) = 0;

  /** Sets the string identified by ClassificationReason to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setClassificationReason(const std::string& value) = 0;

  /** Sets the string identified by ClassificationReason to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setClassificationReason(const char* value) = 0;

  /** Returns whether the Element identified by ClassificationReason exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ClassificationReason is enabled or not.
    */
  virtual bool hasClassificationReason() const = 0;

  /** Enables the Element identified by ClassificationReason.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ClassificationReason.
    */
  virtual uci::type::WhitespaceVisibleString4096Type& enableClassificationReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ClassificationReason.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& clearClassificationReason() = 0;

  /** Returns a const reference to the bounded list identified by NonUS_Controls.
    *
    * @return A const reference to the bounded list identified by NonUS_Controls.
    */
  virtual const uci::type::SecurityInformationType::NonUS_Controls& getNonUS_Controls() const = 0;

  /** Returns a reference to the bounded list identified by NonUS_Controls.
    *
    * @return A reference to the bounded list identified by NonUS_Controls.
    */
  virtual uci::type::SecurityInformationType::NonUS_Controls& getNonUS_Controls() = 0;

  /** Sets the bounded list identified by NonUS_Controls.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setNonUS_Controls(const uci::type::SecurityInformationType::NonUS_Controls& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by DerivedFrom.
    *
    * @return A const reference to the accessor that provides access to the string identified by DerivedFrom.
    */
  virtual const uci::type::WhitespaceVisibleString1024Type& getDerivedFrom() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by DerivedFrom.
    *
    * @return A reference to the accessor that provides access to the string identified by DerivedFrom.
    */
  virtual uci::type::WhitespaceVisibleString1024Type& getDerivedFrom() = 0;

  /** Sets the string identified by DerivedFrom to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by DerivedFrom.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setDerivedFrom(const uci::type::WhitespaceVisibleString1024Type& value) = 0;

  /** Sets the string identified by DerivedFrom to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setDerivedFrom(const std::string& value) = 0;

  /** Sets the string identified by DerivedFrom to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setDerivedFrom(const char* value) = 0;

  /** Returns whether the Element identified by DerivedFrom exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DerivedFrom is enabled or not.
    */
  virtual bool hasDerivedFrom() const = 0;

  /** Enables the Element identified by DerivedFrom.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by DerivedFrom.
    */
  virtual uci::type::WhitespaceVisibleString1024Type& enableDerivedFrom(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DerivedFrom.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& clearDerivedFrom() = 0;

  /** Returns the value of the SimplePrimitive data type identified by DeclassDate.
    *
    * @return The value of the simple primitive data type identified by DeclassDate.
    */
  virtual xs::DateTime getDeclassDate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DeclassDate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setDeclassDate(xs::DateTime value) = 0;

  /** Returns whether the Element identified by DeclassDate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DeclassDate is enabled or not.
    */
  virtual bool hasDeclassDate() const = 0;

  /** Clears (disabled) the Element identified by DeclassDate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& clearDeclassDate() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by DeclassEvent.
    *
    * @return A const reference to the accessor that provides access to the string identified by DeclassEvent.
    */
  virtual const uci::type::WhitespaceVisibleString1024Type& getDeclassEvent() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by DeclassEvent.
    *
    * @return A reference to the accessor that provides access to the string identified by DeclassEvent.
    */
  virtual uci::type::WhitespaceVisibleString1024Type& getDeclassEvent() = 0;

  /** Sets the string identified by DeclassEvent to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by DeclassEvent.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setDeclassEvent(const uci::type::WhitespaceVisibleString1024Type& value) = 0;

  /** Sets the string identified by DeclassEvent to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setDeclassEvent(const std::string& value) = 0;

  /** Sets the string identified by DeclassEvent to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setDeclassEvent(const char* value) = 0;

  /** Returns whether the Element identified by DeclassEvent exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DeclassEvent is enabled or not.
    */
  virtual bool hasDeclassEvent() const = 0;

  /** Enables the Element identified by DeclassEvent.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by DeclassEvent.
    */
  virtual uci::type::WhitespaceVisibleString1024Type& enableDeclassEvent(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DeclassEvent.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& clearDeclassEvent() = 0;

  /** Returns a const reference to the bounded list identified by DeclassException.
    *
    * @return A const reference to the bounded list identified by DeclassException.
    */
  virtual const uci::type::SecurityInformationType::DeclassException& getDeclassException() const = 0;

  /** Returns a reference to the bounded list identified by DeclassException.
    *
    * @return A reference to the bounded list identified by DeclassException.
    */
  virtual uci::type::SecurityInformationType::DeclassException& getDeclassException() = 0;

  /** Sets the bounded list identified by DeclassException.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SecurityInformationType& setDeclassException(const uci::type::SecurityInformationType::DeclassException& value) = 0;

    /** The constructor [only available to derived classes]. */
  SecurityInformationType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SecurityInformationType() {
  }

protected:



  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SecurityInformationType to copy from.
    */
  SecurityInformationType(const SecurityInformationType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SecurityInformationType to the contents of the
    * SecurityInformationType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SecurityInformationType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this SecurityInformationType.
    * @return A reference to this SecurityInformationType.
    */
  SecurityInformationType& operator=(const SecurityInformationType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SECURITYINFORMATIONTYPE_H

