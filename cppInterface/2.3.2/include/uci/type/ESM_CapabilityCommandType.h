/** @file ESM_CapabilityCommandType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ESM_CAPABILITYCOMMANDTYPE_H
#define UCI_TYPE_ESM_CAPABILITYCOMMANDTYPE_H

#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CapabilityCommandFrequencyType.h"
#include "ESM_BinGroupActivationType.h"
#include "ProductOutputCommandBasicType.h"
#include "ResourceAllocatorCommandExtensionType.h"
#include "SharedRF_ApertureCapabilityCommandBaseType.h"
#include "SubCapabilitySelectionType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ESM_CapabilityCommandType : public virtual SharedRF_ApertureCapabilityCommandBaseType {
public:

  /** This method constructs a new ESM_CapabilityCommandType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ESM_CapabilityCommandType.
    */
  static UCI_EXPORT ESM_CapabilityCommandType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ESM_CapabilityCommandType initializing the data accessed by the new
    * ESM_CapabilityCommandType using the data accessed by the specified ESM_CapabilityCommandType (cloning).
    *
    * @param accessor The ESM_CapabilityCommandType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created ESM_CapabilityCommandType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ESM_CapabilityCommandType.
    */
  static UCI_EXPORT ESM_CapabilityCommandType& create(const ESM_CapabilityCommandType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ESM_CapabilityCommandType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The ESM_CapabilityCommandType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ESM_CapabilityCommandType& accessor);

  /** Returns this accessor's type constant, i.e. eSM_CapabilityCommandType.
    *
    * @return This accessor's type constant, i.e. eSM_CapabilityCommandType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::eSM_CapabilityCommandType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ESM_CapabilityCommandType.
    *
    * @return The version that was initialized from the uci:version attribute of ESM_CapabilityCommandType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ESM_CapabilityCommandType& accessor) = 0;

  /** This indicates the SubCapability and the SubCapabilityDetails being commanded. It's assumed one or more activities
    * are created for each SubCapabilitySelection. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SubCapabilitySelectionType, uci::type::accessorType::subCapabilitySelectionType> SubCapabilitySelection;

  /** Indicates a required output Product of the Command. Only Products consistent with ESM and supported by the commanded
    * ESM Capability should be requested. If omitted, no output Product should be produced. See ProductTypeEnum for further
    * details. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductOutputCommandBasicType, uci::type::accessorType::productOutputCommandBasicType> ProductOutput;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ResourceAllocatorCommandExtension.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ResourceAllocatorCommandExtension.
    */
  virtual const uci::type::ResourceAllocatorCommandExtensionType& getResourceAllocatorCommandExtension() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ResourceAllocatorCommandExtension.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ResourceAllocatorCommandExtension.
    */
  virtual uci::type::ResourceAllocatorCommandExtensionType& getResourceAllocatorCommandExtension() = 0;

  /** Sets the complex content identified by ResourceAllocatorCommandExtension to the contents of the complex content
    * accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ResourceAllocatorCommandExtension.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_CapabilityCommandType& setResourceAllocatorCommandExtension(const uci::type::ResourceAllocatorCommandExtensionType& value) = 0;

  /** Returns whether the Element identified by ResourceAllocatorCommandExtension exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ResourceAllocatorCommandExtension is enabled or not.
    */
  virtual bool hasResourceAllocatorCommandExtension() const = 0;

  /** Enables the Element identified by ResourceAllocatorCommandExtension.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ResourceAllocatorCommandExtension.
    */
  virtual uci::type::ResourceAllocatorCommandExtensionType& enableResourceAllocatorCommandExtension(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ResourceAllocatorCommandExtension.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_CapabilityCommandType& clearResourceAllocatorCommandExtension() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ScanScheduleActivation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ScanScheduleActivation.
    */
  virtual const uci::type::ESM_BinGroupActivationType& getScanScheduleActivation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ScanScheduleActivation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ScanScheduleActivation.
    */
  virtual uci::type::ESM_BinGroupActivationType& getScanScheduleActivation() = 0;

  /** Sets the complex content identified by ScanScheduleActivation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ScanScheduleActivation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_CapabilityCommandType& setScanScheduleActivation(const uci::type::ESM_BinGroupActivationType& value) = 0;

  /** Returns whether the Element identified by ScanScheduleActivation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ScanScheduleActivation is enabled or not.
    */
  virtual bool hasScanScheduleActivation() const = 0;

  /** Enables the Element identified by ScanScheduleActivation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ScanScheduleActivation.
    */
  virtual uci::type::ESM_BinGroupActivationType& enableScanScheduleActivation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ScanScheduleActivation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_CapabilityCommandType& clearScanScheduleActivation() = 0;

  /** Returns a const reference to the bounded list identified by SubCapabilitySelection.
    *
    * @return A const reference to the bounded list identified by SubCapabilitySelection.
    */
  virtual const uci::type::ESM_CapabilityCommandType::SubCapabilitySelection& getSubCapabilitySelection() const = 0;

  /** Returns a reference to the bounded list identified by SubCapabilitySelection.
    *
    * @return A reference to the bounded list identified by SubCapabilitySelection.
    */
  virtual uci::type::ESM_CapabilityCommandType::SubCapabilitySelection& getSubCapabilitySelection() = 0;

  /** Sets the bounded list identified by SubCapabilitySelection.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_CapabilityCommandType& setSubCapabilitySelection(const uci::type::ESM_CapabilityCommandType::SubCapabilitySelection& value) = 0;

  /** Returns a const reference to the bounded list identified by ProductOutput.
    *
    * @return A const reference to the bounded list identified by ProductOutput.
    */
  virtual const uci::type::ESM_CapabilityCommandType::ProductOutput& getProductOutput() const = 0;

  /** Returns a reference to the bounded list identified by ProductOutput.
    *
    * @return A reference to the bounded list identified by ProductOutput.
    */
  virtual uci::type::ESM_CapabilityCommandType::ProductOutput& getProductOutput() = 0;

  /** Sets the bounded list identified by ProductOutput.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_CapabilityCommandType& setProductOutput(const uci::type::ESM_CapabilityCommandType::ProductOutput& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Frequency.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual const uci::type::CapabilityCommandFrequencyType& getFrequency() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Frequency.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual uci::type::CapabilityCommandFrequencyType& getFrequency() = 0;

  /** Sets the complex content identified by Frequency to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Frequency.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_CapabilityCommandType& setFrequency(const uci::type::CapabilityCommandFrequencyType& value) = 0;

  /** Returns whether the Element identified by Frequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Frequency is enabled or not.
    */
  virtual bool hasFrequency() const = 0;

  /** Enables the Element identified by Frequency.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual uci::type::CapabilityCommandFrequencyType& enableFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Frequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_CapabilityCommandType& clearFrequency() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ESM_CapabilityCommandType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ESM_CapabilityCommandType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ESM_CapabilityCommandType to copy from.
    */
  ESM_CapabilityCommandType(const ESM_CapabilityCommandType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ESM_CapabilityCommandType to the contents of the
    * ESM_CapabilityCommandType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ESM_CapabilityCommandType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this ESM_CapabilityCommandType.
    * @return A reference to this ESM_CapabilityCommandType.
    */
  ESM_CapabilityCommandType& operator=(const ESM_CapabilityCommandType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ESM_CAPABILITYCOMMANDTYPE_H

