/** @file RepetitionEventBasedType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_REPETITIONEVENTBASEDTYPE_H
#define UCI_TYPE_REPETITIONEVENTBASEDTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/EventOffsetChoiceType.h"
#include "uci/type/EventWindowChoiceType.h"
#include "uci/type/ReferenceAssetKinematicsType.h"
#include "uci/type/RepetitionEventType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Provides a set of elements to describe an event-based repetition. */
class RepetitionEventBasedType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RepetitionEventBasedType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RepetitionEventBasedType.
    */
  static UCI_EXPORT RepetitionEventBasedType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RepetitionEventBasedType initializing the data accessed by the new
    * RepetitionEventBasedType using the data accessed by the specified RepetitionEventBasedType (cloning).
    *
    * @param accessor The RepetitionEventBasedType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created RepetitionEventBasedType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RepetitionEventBasedType.
    */
  static UCI_EXPORT RepetitionEventBasedType& create(const RepetitionEventBasedType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RepetitionEventBasedType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The RepetitionEventBasedType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RepetitionEventBasedType& accessor);

  /** Returns this accessor's type constant, i.e. repetitionEventBasedType.
    *
    * @return This accessor's type constant, i.e. repetitionEventBasedType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::repetitionEventBasedType;
  }

  /** Returns the version that was initialized from the uci:version attribute of RepetitionEventBasedType.
    *
    * @return The version that was initialized from the uci:version attribute of RepetitionEventBasedType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RepetitionEventBasedType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Event.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Event.
    */
  virtual const uci::type::RepetitionEventType& getEvent() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Event.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Event.
    */
  virtual uci::type::RepetitionEventType& getEvent() = 0;

  /** Sets the complex content identified by Event to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Event.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RepetitionEventBasedType& setEvent(const uci::type::RepetitionEventType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EventOffset.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EventOffset.
    */
  virtual const uci::type::EventOffsetChoiceType& getEventOffset() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EventOffset.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EventOffset.
    */
  virtual uci::type::EventOffsetChoiceType& getEventOffset() = 0;

  /** Sets the complex content identified by EventOffset to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EventOffset.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RepetitionEventBasedType& setEventOffset(const uci::type::EventOffsetChoiceType& value) = 0;

  /** Returns whether the Element identified by EventOffset exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EventOffset is enabled or not.
    */
  virtual bool hasEventOffset() const = 0;

  /** Enables the Element identified by EventOffset.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EventOffset.
    */
  virtual uci::type::EventOffsetChoiceType& enableEventOffset(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EventOffset.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RepetitionEventBasedType& clearEventOffset() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EventWindow.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EventWindow.
    */
  virtual const uci::type::EventWindowChoiceType& getEventWindow() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EventWindow.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EventWindow.
    */
  virtual uci::type::EventWindowChoiceType& getEventWindow() = 0;

  /** Sets the complex content identified by EventWindow to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EventWindow.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RepetitionEventBasedType& setEventWindow(const uci::type::EventWindowChoiceType& value) = 0;

  /** Returns whether the Element identified by EventWindow exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EventWindow is enabled or not.
    */
  virtual bool hasEventWindow() const = 0;

  /** Enables the Element identified by EventWindow.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EventWindow.
    */
  virtual uci::type::EventWindowChoiceType& enableEventWindow(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EventWindow.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RepetitionEventBasedType& clearEventWindow() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AlternateReferenceObject.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AlternateReferenceObject.
    */
  virtual const uci::type::ReferenceAssetKinematicsType& getAlternateReferenceObject() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * AlternateReferenceObject.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AlternateReferenceObject.
    */
  virtual uci::type::ReferenceAssetKinematicsType& getAlternateReferenceObject() = 0;

  /** Sets the complex content identified by AlternateReferenceObject to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AlternateReferenceObject.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RepetitionEventBasedType& setAlternateReferenceObject(const uci::type::ReferenceAssetKinematicsType& value) = 0;

  /** Returns whether the Element identified by AlternateReferenceObject exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AlternateReferenceObject is enabled or not.
    */
  virtual bool hasAlternateReferenceObject() const = 0;

  /** Enables the Element identified by AlternateReferenceObject.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AlternateReferenceObject.
    */
  virtual uci::type::ReferenceAssetKinematicsType& enableAlternateReferenceObject(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AlternateReferenceObject.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RepetitionEventBasedType& clearAlternateReferenceObject() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RepetitionAttempts.
    *
    * @return The value of the simple primitive data type identified by RepetitionAttempts.
    */
  virtual xs::UnsignedInt getRepetitionAttempts() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RepetitionAttempts.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RepetitionEventBasedType& setRepetitionAttempts(xs::UnsignedInt value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RepetitionEventBasedType() {
  }

  /** The destructor [only available to derived classes]. */
  ~RepetitionEventBasedType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RepetitionEventBasedType to copy from.
    */
  RepetitionEventBasedType(const RepetitionEventBasedType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RepetitionEventBasedType to the contents of the
    * RepetitionEventBasedType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The RepetitionEventBasedType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this RepetitionEventBasedType.
    * @return A reference to this RepetitionEventBasedType.
    */
  RepetitionEventBasedType& operator=(const RepetitionEventBasedType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_REPETITIONEVENTBASEDTYPE_H

