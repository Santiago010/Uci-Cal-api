/** @file SMTI_CapabilityCommandType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SMTI_CAPABILITYCOMMANDTYPE_H
#define UCI_TYPE_SMTI_CAPABILITYCOMMANDTYPE_H

#include "../base/BoundedList.h"
#include "../base/DoubleAccessor.h"
#include "../base/export.h"
#include "AtmosphericPropagationLossType.h"
#include "CapabilityCommandFrequencyType.h"
#include "DistanceType.h"
#include "ECEF_UnitVectorType.h"
#include "MultistaticModeType.h"
#include "ProductOutputCommandSMTI_Type.h"
#include "RadarPointingTargetType.h"
#include "RepetitionType.h"
#include "SMTI_CollectionConstraintsType.h"
#include "SMTI_CollectionOptionsType.h"
#include "SharedRF_ApertureCapabilityCommandBaseType.h"
#include "SurfaceTypeEnum.h"
#include "WeatherSeaStateEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SMTI_CapabilityCommandType : public virtual SharedRF_ApertureCapabilityCommandBaseType {
public:

  /** This method constructs a new SMTI_CapabilityCommandType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SMTI_CapabilityCommandType.
    */
  static UCI_EXPORT SMTI_CapabilityCommandType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SMTI_CapabilityCommandType initializing the data accessed by the new
    * SMTI_CapabilityCommandType using the data accessed by the specified SMTI_CapabilityCommandType (cloning).
    *
    * @param accessor The SMTI_CapabilityCommandType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created SMTI_CapabilityCommandType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SMTI_CapabilityCommandType.
    */
  static UCI_EXPORT SMTI_CapabilityCommandType& create(const SMTI_CapabilityCommandType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SMTI_CapabilityCommandType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The SMTI_CapabilityCommandType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SMTI_CapabilityCommandType& accessor);

  /** Returns this accessor's type constant, i.e. sMTI_CapabilityCommandType.
    *
    * @return This accessor's type constant, i.e. sMTI_CapabilityCommandType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sMTI_CapabilityCommandType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SMTI_CapabilityCommandType.
    *
    * @return The version that was initialized from the uci:version attribute of SMTI_CapabilityCommandType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.002.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SMTI_CapabilityCommandType& accessor) = 0;

  /** Atmospheric propagation information to be used when determining CNR or range/power levels. If multiple instances are
    * given, each should be of a different band as indicated by the child element. [Occurrences: Minimum: 0; Maximum: 12]
    */
  typedef uci::base::BoundedList<uci::type::AtmosphericPropagationLossType, uci::type::accessorType::atmosphericPropagationLossType> AtmosphericPropagation;

  /** Indicates a required output Product of the Command. Only Products consistent with SMTI and supported by the commanded
    * SMTI Capability should be requested. If omitted, no output Product should be produced. See ProductTypeEnum for
    * further details. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductOutputCommandSMTI_Type, uci::type::accessorType::productOutputCommandSMTI_Type> ProductOutput;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RadarPointingTarget.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RadarPointingTarget.
    */
  virtual const uci::type::RadarPointingTargetType& getRadarPointingTarget() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RadarPointingTarget.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RadarPointingTarget.
    */
  virtual uci::type::RadarPointingTargetType& getRadarPointingTarget() = 0;

  /** Sets the complex content identified by RadarPointingTarget to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RadarPointingTarget.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& setRadarPointingTarget(const uci::type::RadarPointingTargetType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by MultistaticMode.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by MultistaticMode.
    */
  virtual const uci::type::MultistaticModeType& getMultistaticMode() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MultistaticMode.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MultistaticMode.
    */
  virtual uci::type::MultistaticModeType& getMultistaticMode() = 0;

  /** Sets the complex content identified by MultistaticMode to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MultistaticMode.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& setMultistaticMode(const uci::type::MultistaticModeType& value) = 0;

  /** Returns whether the Element identified by MultistaticMode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MultistaticMode is enabled or not.
    */
  virtual bool hasMultistaticMode() const = 0;

  /** Enables the Element identified by MultistaticMode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MultistaticMode.
    */
  virtual uci::type::MultistaticModeType& enableMultistaticMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MultistaticMode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& clearMultistaticMode() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Frequency.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual const uci::type::CapabilityCommandFrequencyType& getFrequency() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Frequency.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual uci::type::CapabilityCommandFrequencyType& getFrequency() = 0;

  /** Sets the complex content identified by Frequency to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Frequency.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& setFrequency(const uci::type::CapabilityCommandFrequencyType& value) = 0;

  /** Returns whether the Element identified by Frequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Frequency is enabled or not.
    */
  virtual bool hasFrequency() const = 0;

  /** Enables the Element identified by Frequency.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual uci::type::CapabilityCommandFrequencyType& enableFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Frequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& clearFrequency() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CollectionOptions.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CollectionOptions.
    */
  virtual const uci::type::SMTI_CollectionOptionsType& getCollectionOptions() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CollectionOptions.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CollectionOptions.
    */
  virtual uci::type::SMTI_CollectionOptionsType& getCollectionOptions() = 0;

  /** Sets the complex content identified by CollectionOptions to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionOptions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& setCollectionOptions(const uci::type::SMTI_CollectionOptionsType& value) = 0;

  /** Returns whether the Element identified by CollectionOptions exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionOptions is enabled or not.
    */
  virtual bool hasCollectionOptions() const = 0;

  /** Enables the Element identified by CollectionOptions.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CollectionOptions.
    */
  virtual uci::type::SMTI_CollectionOptionsType& enableCollectionOptions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionOptions.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& clearCollectionOptions() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CollectionConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CollectionConstraints.
    */
  virtual const uci::type::SMTI_CollectionConstraintsType& getCollectionConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CollectionConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CollectionConstraints.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& getCollectionConstraints() = 0;

  /** Sets the complex content identified by CollectionConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& setCollectionConstraints(const uci::type::SMTI_CollectionConstraintsType& value) = 0;

  /** Returns whether the Element identified by CollectionConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionConstraints is enabled or not.
    */
  virtual bool hasCollectionConstraints() const = 0;

  /** Enables the Element identified by CollectionConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CollectionConstraints.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& enableCollectionConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& clearCollectionConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * PlaneNormalUnitVector.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      PlaneNormalUnitVector.
    */
  virtual const uci::type::ECEF_UnitVectorType& getPlaneNormalUnitVector() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PlaneNormalUnitVector.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PlaneNormalUnitVector.
    */
  virtual uci::type::ECEF_UnitVectorType& getPlaneNormalUnitVector() = 0;

  /** Sets the complex content identified by PlaneNormalUnitVector to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PlaneNormalUnitVector.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& setPlaneNormalUnitVector(const uci::type::ECEF_UnitVectorType& value) = 0;

  /** Returns whether the Element identified by PlaneNormalUnitVector exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PlaneNormalUnitVector is enabled or not.
    */
  virtual bool hasPlaneNormalUnitVector() const = 0;

  /** Enables the Element identified by PlaneNormalUnitVector.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PlaneNormalUnitVector.
    */
  virtual uci::type::ECEF_UnitVectorType& enablePlaneNormalUnitVector(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PlaneNormalUnitVector.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& clearPlaneNormalUnitVector() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TrackingRange.
    *
    * @return The value of the simple primitive data type identified by TrackingRange.
    */
  virtual uci::type::DistanceTypeValue getTrackingRange() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TrackingRange.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& setTrackingRange(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by TrackingRange exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TrackingRange is enabled or not.
    */
  virtual bool hasTrackingRange() const = 0;

  /** Clears (disabled) the Element identified by TrackingRange.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& clearTrackingRange() = 0;

  /** Returns the value of the SimplePrimitive data type identified by CoefficientOfTroposphericRefraction.
    *
    * @return The value of the simple primitive data type identified by CoefficientOfTroposphericRefraction.
    */
  virtual xs::Double getCoefficientOfTroposphericRefraction() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CoefficientOfTroposphericRefraction.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& setCoefficientOfTroposphericRefraction(xs::Double value) = 0;

  /** Returns whether the Element identified by CoefficientOfTroposphericRefraction exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CoefficientOfTroposphericRefraction is enabled or not.
    */
  virtual bool hasCoefficientOfTroposphericRefraction() const = 0;

  /** Clears (disabled) the Element identified by CoefficientOfTroposphericRefraction.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& clearCoefficientOfTroposphericRefraction() = 0;

  /** Returns a const reference to the bounded list identified by AtmosphericPropagation.
    *
    * @return A const reference to the bounded list identified by AtmosphericPropagation.
    */
  virtual const uci::type::SMTI_CapabilityCommandType::AtmosphericPropagation& getAtmosphericPropagation() const = 0;

  /** Returns a reference to the bounded list identified by AtmosphericPropagation.
    *
    * @return A reference to the bounded list identified by AtmosphericPropagation.
    */
  virtual uci::type::SMTI_CapabilityCommandType::AtmosphericPropagation& getAtmosphericPropagation() = 0;

  /** Sets the bounded list identified by AtmosphericPropagation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& setAtmosphericPropagation(const uci::type::SMTI_CapabilityCommandType::AtmosphericPropagation& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by SeaState.
    *
    * @return A const reference to the value of the enumeration identified by SeaState.
    */
  virtual const uci::type::WeatherSeaStateEnum& getSeaState() const = 0;

  /** Returns a reference to the value of the enumeration identified by SeaState.
    *
    * @return A reference to the value of the enumeration identified by SeaState.
    */
  virtual uci::type::WeatherSeaStateEnum& getSeaState() = 0;

  /** Sets the value of the enumeration identified by SeaState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& setSeaState(const uci::type::WeatherSeaStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by SeaState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& setSeaState(uci::type::WeatherSeaStateEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by SeaState exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SeaState is enabled or not.
    */
  virtual bool hasSeaState() const = 0;

  /** Enables the Element identified by SeaState.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by SeaState.
    */
  virtual uci::type::WeatherSeaStateEnum& enableSeaState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SeaState.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& clearSeaState() = 0;

  /** Returns a const reference to the value of the enumeration identified by SurfaceType.
    *
    * @return A const reference to the value of the enumeration identified by SurfaceType.
    */
  virtual const uci::type::SurfaceTypeEnum& getSurfaceType() const = 0;

  /** Returns a reference to the value of the enumeration identified by SurfaceType.
    *
    * @return A reference to the value of the enumeration identified by SurfaceType.
    */
  virtual uci::type::SurfaceTypeEnum& getSurfaceType() = 0;

  /** Sets the value of the enumeration identified by SurfaceType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& setSurfaceType(const uci::type::SurfaceTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by SurfaceType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& setSurfaceType(uci::type::SurfaceTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by SurfaceType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SurfaceType is enabled or not.
    */
  virtual bool hasSurfaceType() const = 0;

  /** Enables the Element identified by SurfaceType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by SurfaceType.
    */
  virtual uci::type::SurfaceTypeEnum& enableSurfaceType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SurfaceType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& clearSurfaceType() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual const uci::type::RepetitionType& getRepetition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& getRepetition() = 0;

  /** Sets the complex content identified by Repetition to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Repetition.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& setRepetition(const uci::type::RepetitionType& value) = 0;

  /** Returns whether the Element identified by Repetition exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Repetition is enabled or not.
    */
  virtual bool hasRepetition() const = 0;

  /** Enables the Element identified by Repetition.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& enableRepetition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Repetition.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& clearRepetition() = 0;

  /** Returns a const reference to the bounded list identified by ProductOutput.
    *
    * @return A const reference to the bounded list identified by ProductOutput.
    */
  virtual const uci::type::SMTI_CapabilityCommandType::ProductOutput& getProductOutput() const = 0;

  /** Returns a reference to the bounded list identified by ProductOutput.
    *
    * @return A reference to the bounded list identified by ProductOutput.
    */
  virtual uci::type::SMTI_CapabilityCommandType::ProductOutput& getProductOutput() = 0;

  /** Sets the bounded list identified by ProductOutput.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CapabilityCommandType& setProductOutput(const uci::type::SMTI_CapabilityCommandType::ProductOutput& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SMTI_CapabilityCommandType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SMTI_CapabilityCommandType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SMTI_CapabilityCommandType to copy from.
    */
  SMTI_CapabilityCommandType(const SMTI_CapabilityCommandType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SMTI_CapabilityCommandType to the contents of the
    * SMTI_CapabilityCommandType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The SMTI_CapabilityCommandType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this SMTI_CapabilityCommandType.
    * @return A reference to this SMTI_CapabilityCommandType.
    */
  SMTI_CapabilityCommandType& operator=(const SMTI_CapabilityCommandType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SMTI_CAPABILITYCOMMANDTYPE_H

