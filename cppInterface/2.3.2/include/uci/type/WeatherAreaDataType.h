/** @file WeatherAreaDataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_WEATHERAREADATATYPE_H
#define UCI_TYPE_WEATHERAREADATATYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/FloatAccessor.h"
#include "../base/export.h"
#include "CloudsType.h"
#include "DistanceType.h"
#include "PercentType.h"
#include "PrecipitationAmountType.h"
#include "TemperatureType.h"
#include "VisibleString1024Type.h"
#include "VisibleString32Type.h"
#include "WeatherDescriptionEnum.h"
#include "WeatherEffectsType.h"
#include "WeatherKindEnum.h"
#include "WeatherPrecipitationAmplificationEnum.h"
#include "WeatherPrecipitationEnum.h"
#include "WeatherSeverityEnum.h"
#include "WeatherSourceEnum.h"
#include "WeatherVisibilityEnum.h"
#include "WindDataType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class WeatherAreaDataType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new WeatherAreaDataType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed WeatherAreaDataType.
    */
  static UCI_EXPORT WeatherAreaDataType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new WeatherAreaDataType initializing the data accessed by the new WeatherAreaDataType using
    * the data accessed by the specified WeatherAreaDataType (cloning).
    *
    * @param accessor The WeatherAreaDataType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created WeatherAreaDataType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed WeatherAreaDataType.
    */
  static UCI_EXPORT WeatherAreaDataType& create(const WeatherAreaDataType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified WeatherAreaDataType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The WeatherAreaDataType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(WeatherAreaDataType& accessor);

  /** Returns this accessor's type constant, i.e. weatherAreaDataType.
    *
    * @return This accessor's type constant, i.e. weatherAreaDataType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::weatherAreaDataType;
  }

  /** Returns the version that was initialized from the uci:version attribute of WeatherAreaDataType.
    *
    * @return The version that was initialized from the uci:version attribute of WeatherAreaDataType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.001.003";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const WeatherAreaDataType& accessor) = 0;

  /** Indicates existence and characteristics of clouds. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::CloudsType, uci::type::accessorType::cloudsType> Clouds;

  /** Returns a const reference to the value of the enumeration identified by Source.
    *
    * @return A const reference to the value of the enumeration identified by Source.
    */
  virtual const uci::type::WeatherSourceEnum& getSource() const = 0;

  /** Returns a reference to the value of the enumeration identified by Source.
    *
    * @return A reference to the value of the enumeration identified by Source.
    */
  virtual uci::type::WeatherSourceEnum& getSource() = 0;

  /** Sets the value of the enumeration identified by Source.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setSource(const uci::type::WeatherSourceEnum& value) = 0;

  /** Sets the value of the enumeration identified by Source.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setSource(uci::type::WeatherSourceEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by StationCode.
    *
    * @return A const reference to the accessor that provides access to the string identified by StationCode.
    */
  virtual const uci::type::VisibleString32Type& getStationCode() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by StationCode.
    *
    * @return A reference to the accessor that provides access to the string identified by StationCode.
    */
  virtual uci::type::VisibleString32Type& getStationCode() = 0;

  /** Sets the string identified by StationCode to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by StationCode.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setStationCode(const uci::type::VisibleString32Type& value) = 0;

  /** Sets the string identified by StationCode to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setStationCode(const std::string& value) = 0;

  /** Sets the string identified by StationCode to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setStationCode(const char* value) = 0;

  /** Returns whether the Element identified by StationCode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by StationCode is enabled or not.
    */
  virtual bool hasStationCode() const = 0;

  /** Enables the Element identified by StationCode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by StationCode.
    */
  virtual uci::type::VisibleString32Type& enableStationCode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by StationCode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearStationCode() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Temperature.
    *
    * @return The value of the simple primitive data type identified by Temperature.
    */
  virtual uci::type::TemperatureTypeValue getTemperature() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Temperature.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setTemperature(uci::type::TemperatureTypeValue value) = 0;

  /** Returns whether the Element identified by Temperature exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Temperature is enabled or not.
    */
  virtual bool hasTemperature() const = 0;

  /** Clears (disabled) the Element identified by Temperature.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearTemperature() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PrecipitationPotential.
    *
    * @return The value of the simple primitive data type identified by PrecipitationPotential.
    */
  virtual uci::type::PercentTypeValue getPrecipitationPotential() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PrecipitationPotential.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setPrecipitationPotential(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by PrecipitationPotential exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PrecipitationPotential is enabled or not.
    */
  virtual bool hasPrecipitationPotential() const = 0;

  /** Clears (disabled) the Element identified by PrecipitationPotential.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearPrecipitationPotential() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PrecipitationAmount.
    *
    * @return The value of the simple primitive data type identified by PrecipitationAmount.
    */
  virtual uci::type::PrecipitationAmountTypeValue getPrecipitationAmount() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PrecipitationAmount.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setPrecipitationAmount(uci::type::PrecipitationAmountTypeValue value) = 0;

  /** Returns whether the Element identified by PrecipitationAmount exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PrecipitationAmount is enabled or not.
    */
  virtual bool hasPrecipitationAmount() const = 0;

  /** Clears (disabled) the Element identified by PrecipitationAmount.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearPrecipitationAmount() = 0;

  /** Returns a const reference to the value of the enumeration identified by TypeOfPrecipitation.
    *
    * @return A const reference to the value of the enumeration identified by TypeOfPrecipitation.
    */
  virtual const uci::type::WeatherPrecipitationEnum& getTypeOfPrecipitation() const = 0;

  /** Returns a reference to the value of the enumeration identified by TypeOfPrecipitation.
    *
    * @return A reference to the value of the enumeration identified by TypeOfPrecipitation.
    */
  virtual uci::type::WeatherPrecipitationEnum& getTypeOfPrecipitation() = 0;

  /** Sets the value of the enumeration identified by TypeOfPrecipitation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setTypeOfPrecipitation(const uci::type::WeatherPrecipitationEnum& value) = 0;

  /** Sets the value of the enumeration identified by TypeOfPrecipitation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setTypeOfPrecipitation(uci::type::WeatherPrecipitationEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by TypeOfPrecipitation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TypeOfPrecipitation is enabled or not.
    */
  virtual bool hasTypeOfPrecipitation() const = 0;

  /** Enables the Element identified by TypeOfPrecipitation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by TypeOfPrecipitation.
    */
  virtual uci::type::WeatherPrecipitationEnum& enableTypeOfPrecipitation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TypeOfPrecipitation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearTypeOfPrecipitation() = 0;

  /** Returns a const reference to the value of the enumeration identified by PrecipitationAmplification.
    *
    * @return A const reference to the value of the enumeration identified by PrecipitationAmplification.
    */
  virtual const uci::type::WeatherPrecipitationAmplificationEnum& getPrecipitationAmplification() const = 0;

  /** Returns a reference to the value of the enumeration identified by PrecipitationAmplification.
    *
    * @return A reference to the value of the enumeration identified by PrecipitationAmplification.
    */
  virtual uci::type::WeatherPrecipitationAmplificationEnum& getPrecipitationAmplification() = 0;

  /** Sets the value of the enumeration identified by PrecipitationAmplification.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setPrecipitationAmplification(const uci::type::WeatherPrecipitationAmplificationEnum& value) = 0;

  /** Sets the value of the enumeration identified by PrecipitationAmplification.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setPrecipitationAmplification(uci::type::WeatherPrecipitationAmplificationEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by PrecipitationAmplification exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PrecipitationAmplification is enabled or not.
    */
  virtual bool hasPrecipitationAmplification() const = 0;

  /** Enables the Element identified by PrecipitationAmplification.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by PrecipitationAmplification.
    */
  virtual uci::type::WeatherPrecipitationAmplificationEnum& enablePrecipitationAmplification(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PrecipitationAmplification.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearPrecipitationAmplification() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Visibility.
    *
    * @return The value of the simple primitive data type identified by Visibility.
    */
  virtual uci::type::DistanceTypeValue getVisibility() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Visibility.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setVisibility(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by Visibility exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Visibility is enabled or not.
    */
  virtual bool hasVisibility() const = 0;

  /** Clears (disabled) the Element identified by Visibility.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearVisibility() = 0;

  /** Returns a const reference to the value of the enumeration identified by VisibilityStatus.
    *
    * @return A const reference to the value of the enumeration identified by VisibilityStatus.
    */
  virtual const uci::type::WeatherVisibilityEnum& getVisibilityStatus() const = 0;

  /** Returns a reference to the value of the enumeration identified by VisibilityStatus.
    *
    * @return A reference to the value of the enumeration identified by VisibilityStatus.
    */
  virtual uci::type::WeatherVisibilityEnum& getVisibilityStatus() = 0;

  /** Sets the value of the enumeration identified by VisibilityStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setVisibilityStatus(const uci::type::WeatherVisibilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by VisibilityStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setVisibilityStatus(uci::type::WeatherVisibilityEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by VisibilityStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VisibilityStatus is enabled or not.
    */
  virtual bool hasVisibilityStatus() const = 0;

  /** Enables the Element identified by VisibilityStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by VisibilityStatus.
    */
  virtual uci::type::WeatherVisibilityEnum& enableVisibilityStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VisibilityStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearVisibilityStatus() = 0;

  /** Returns the value of the SimplePrimitive data type identified by DewPoint.
    *
    * @return The value of the simple primitive data type identified by DewPoint.
    */
  virtual uci::type::TemperatureTypeValue getDewPoint() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DewPoint.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setDewPoint(uci::type::TemperatureTypeValue value) = 0;

  /** Returns whether the Element identified by DewPoint exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DewPoint is enabled or not.
    */
  virtual bool hasDewPoint() const = 0;

  /** Clears (disabled) the Element identified by DewPoint.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearDewPoint() = 0;

  /** Returns a const reference to the bounded list identified by Clouds.
    *
    * @return A const reference to the bounded list identified by Clouds.
    */
  virtual const uci::type::WeatherAreaDataType::Clouds& getClouds() const = 0;

  /** Returns a reference to the bounded list identified by Clouds.
    *
    * @return A reference to the bounded list identified by Clouds.
    */
  virtual uci::type::WeatherAreaDataType::Clouds& getClouds() = 0;

  /** Sets the bounded list identified by Clouds.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setClouds(const uci::type::WeatherAreaDataType::Clouds& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by WeatherEffects.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by WeatherEffects.
    */
  virtual const uci::type::WeatherEffectsType& getWeatherEffects() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by WeatherEffects.
    *
    * @return A reference to the accessor that provides access to the complex content identified by WeatherEffects.
    */
  virtual uci::type::WeatherEffectsType& getWeatherEffects() = 0;

  /** Sets the complex content identified by WeatherEffects to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by WeatherEffects.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setWeatherEffects(const uci::type::WeatherEffectsType& value) = 0;

  /** Returns whether the Element identified by WeatherEffects exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WeatherEffects is enabled or not.
    */
  virtual bool hasWeatherEffects() const = 0;

  /** Enables the Element identified by WeatherEffects.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by WeatherEffects.
    */
  virtual uci::type::WeatherEffectsType& enableWeatherEffects(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by WeatherEffects.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearWeatherEffects() = 0;

  /** Returns the value of the SimplePrimitive data type identified by BarometricPressure.
    *
    * @return The value of the simple primitive data type identified by BarometricPressure.
    */
  virtual xs::Float getBarometricPressure() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by BarometricPressure.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setBarometricPressure(xs::Float value) = 0;

  /** Returns whether the Element identified by BarometricPressure exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BarometricPressure is enabled or not.
    */
  virtual bool hasBarometricPressure() const = 0;

  /** Clears (disabled) the Element identified by BarometricPressure.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearBarometricPressure() = 0;

  /** Returns the value of the SimplePrimitive data type identified by KollsmanSetting.
    *
    * @return The value of the simple primitive data type identified by KollsmanSetting.
    */
  virtual xs::Float getKollsmanSetting() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by KollsmanSetting.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setKollsmanSetting(xs::Float value) = 0;

  /** Returns whether the Element identified by KollsmanSetting exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by KollsmanSetting is enabled or not.
    */
  virtual bool hasKollsmanSetting() const = 0;

  /** Clears (disabled) the Element identified by KollsmanSetting.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearKollsmanSetting() = 0;

  /** Returns a const reference to the value of the enumeration identified by Icing.
    *
    * @return A const reference to the value of the enumeration identified by Icing.
    */
  virtual const uci::type::WeatherSeverityEnum& getIcing() const = 0;

  /** Returns a reference to the value of the enumeration identified by Icing.
    *
    * @return A reference to the value of the enumeration identified by Icing.
    */
  virtual uci::type::WeatherSeverityEnum& getIcing() = 0;

  /** Sets the value of the enumeration identified by Icing.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setIcing(const uci::type::WeatherSeverityEnum& value) = 0;

  /** Sets the value of the enumeration identified by Icing.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setIcing(uci::type::WeatherSeverityEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Icing exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Icing is enabled or not.
    */
  virtual bool hasIcing() const = 0;

  /** Enables the Element identified by Icing.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Icing.
    */
  virtual uci::type::WeatherSeverityEnum& enableIcing(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Icing.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearIcing() = 0;

  /** Returns a const reference to the value of the enumeration identified by Turbulence.
    *
    * @return A const reference to the value of the enumeration identified by Turbulence.
    */
  virtual const uci::type::WeatherSeverityEnum& getTurbulence() const = 0;

  /** Returns a reference to the value of the enumeration identified by Turbulence.
    *
    * @return A reference to the value of the enumeration identified by Turbulence.
    */
  virtual uci::type::WeatherSeverityEnum& getTurbulence() = 0;

  /** Sets the value of the enumeration identified by Turbulence.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setTurbulence(const uci::type::WeatherSeverityEnum& value) = 0;

  /** Sets the value of the enumeration identified by Turbulence.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setTurbulence(uci::type::WeatherSeverityEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Turbulence exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Turbulence is enabled or not.
    */
  virtual bool hasTurbulence() const = 0;

  /** Enables the Element identified by Turbulence.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Turbulence.
    */
  virtual uci::type::WeatherSeverityEnum& enableTurbulence(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Turbulence.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearTurbulence() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ThunderstormPotential.
    *
    * @return The value of the simple primitive data type identified by ThunderstormPotential.
    */
  virtual uci::type::PercentTypeValue getThunderstormPotential() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ThunderstormPotential.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setThunderstormPotential(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by ThunderstormPotential exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ThunderstormPotential is enabled or not.
    */
  virtual bool hasThunderstormPotential() const = 0;

  /** Clears (disabled) the Element identified by ThunderstormPotential.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearThunderstormPotential() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Remarks.
    *
    * @return A const reference to the accessor that provides access to the string identified by Remarks.
    */
  virtual const uci::type::VisibleString1024Type& getRemarks() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Remarks.
    *
    * @return A reference to the accessor that provides access to the string identified by Remarks.
    */
  virtual uci::type::VisibleString1024Type& getRemarks() = 0;

  /** Sets the string identified by Remarks to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Remarks.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setRemarks(const uci::type::VisibleString1024Type& value) = 0;

  /** Sets the string identified by Remarks to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setRemarks(const std::string& value) = 0;

  /** Sets the string identified by Remarks to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setRemarks(const char* value) = 0;

  /** Returns whether the Element identified by Remarks exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Remarks is enabled or not.
    */
  virtual bool hasRemarks() const = 0;

  /** Enables the Element identified by Remarks.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Remarks.
    */
  virtual uci::type::VisibleString1024Type& enableRemarks(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Remarks.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearRemarks() = 0;

  /** Returns a const reference to the value of the enumeration identified by Kind.
    *
    * @return A const reference to the value of the enumeration identified by Kind.
    */
  virtual const uci::type::WeatherKindEnum& getKind() const = 0;

  /** Returns a reference to the value of the enumeration identified by Kind.
    *
    * @return A reference to the value of the enumeration identified by Kind.
    */
  virtual uci::type::WeatherKindEnum& getKind() = 0;

  /** Sets the value of the enumeration identified by Kind.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setKind(const uci::type::WeatherKindEnum& value) = 0;

  /** Sets the value of the enumeration identified by Kind.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setKind(uci::type::WeatherKindEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Kind exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Kind is enabled or not.
    */
  virtual bool hasKind() const = 0;

  /** Enables the Element identified by Kind.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Kind.
    */
  virtual uci::type::WeatherKindEnum& enableKind(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Kind.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearKind() = 0;

  /** Returns a const reference to the value of the enumeration identified by Description.
    *
    * @return A const reference to the value of the enumeration identified by Description.
    */
  virtual const uci::type::WeatherDescriptionEnum& getDescription() const = 0;

  /** Returns a reference to the value of the enumeration identified by Description.
    *
    * @return A reference to the value of the enumeration identified by Description.
    */
  virtual uci::type::WeatherDescriptionEnum& getDescription() = 0;

  /** Sets the value of the enumeration identified by Description.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setDescription(const uci::type::WeatherDescriptionEnum& value) = 0;

  /** Sets the value of the enumeration identified by Description.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setDescription(uci::type::WeatherDescriptionEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Description exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Description is enabled or not.
    */
  virtual bool hasDescription() const = 0;

  /** Enables the Element identified by Description.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Description.
    */
  virtual uci::type::WeatherDescriptionEnum& enableDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Description.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearDescription() = 0;

  /** Returns a const reference to the value of the enumeration identified by Qualifier.
    *
    * @return A const reference to the value of the enumeration identified by Qualifier.
    */
  virtual const uci::type::WeatherSeverityEnum& getQualifier() const = 0;

  /** Returns a reference to the value of the enumeration identified by Qualifier.
    *
    * @return A reference to the value of the enumeration identified by Qualifier.
    */
  virtual uci::type::WeatherSeverityEnum& getQualifier() = 0;

  /** Sets the value of the enumeration identified by Qualifier.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setQualifier(const uci::type::WeatherSeverityEnum& value) = 0;

  /** Sets the value of the enumeration identified by Qualifier.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setQualifier(uci::type::WeatherSeverityEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Qualifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Qualifier is enabled or not.
    */
  virtual bool hasQualifier() const = 0;

  /** Enables the Element identified by Qualifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Qualifier.
    */
  virtual uci::type::WeatherSeverityEnum& enableQualifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Qualifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearQualifier() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by WindData.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by WindData.
    */
  virtual const uci::type::WindDataType& getWindData() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by WindData.
    *
    * @return A reference to the accessor that provides access to the complex content identified by WindData.
    */
  virtual uci::type::WindDataType& getWindData() = 0;

  /** Sets the complex content identified by WindData to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by WindData.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setWindData(const uci::type::WindDataType& value) = 0;

  /** Returns whether the Element identified by WindData exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WindData is enabled or not.
    */
  virtual bool hasWindData() const = 0;

  /** Enables the Element identified by WindData.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by WindData.
    */
  virtual uci::type::WindDataType& enableWindData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by WindData.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearWindData() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RelativeHumidity.
    *
    * @return The value of the simple primitive data type identified by RelativeHumidity.
    */
  virtual uci::type::PercentTypeValue getRelativeHumidity() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RelativeHumidity.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& setRelativeHumidity(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by RelativeHumidity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RelativeHumidity is enabled or not.
    */
  virtual bool hasRelativeHumidity() const = 0;

  /** Clears (disabled) the Element identified by RelativeHumidity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherAreaDataType& clearRelativeHumidity() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  WeatherAreaDataType() {
  }

  /** The destructor [only available to derived classes]. */
  ~WeatherAreaDataType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The WeatherAreaDataType to copy from.
    */
  WeatherAreaDataType(const WeatherAreaDataType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this WeatherAreaDataType to the contents of the WeatherAreaDataType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The WeatherAreaDataType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this WeatherAreaDataType.
    * @return A reference to this WeatherAreaDataType.
    */
  WeatherAreaDataType& operator=(const WeatherAreaDataType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_WEATHERAREADATATYPE_H

