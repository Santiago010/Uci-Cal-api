/** @file CapabilityCommandBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CAPABILITYCOMMANDBASETYPE_H
#define UCI_TYPE_CAPABILITYCOMMANDBASETYPE_H

#include "uci/base/BooleanAccessor.h"
#include "uci/type/CapabilityCommandRankingType.h"
#include "uci/type/CapabilityCommandTemporalConstraintsType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/CommandBaseType.h"
#include "uci/type/SecurityInformationType.h"
#include "uci/type/TraceabilityType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The base type for all [Capability]Command messages. */
class CapabilityCommandBaseType : public virtual CommandBaseType {
public:

  /** Returns this accessor's type constant, i.e. capabilityCommandBaseType.
    *
    * @return This accessor's type constant, i.e. capabilityCommandBaseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::capabilityCommandBaseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CapabilityCommandBaseType.
    *
    * @return The version that was initialized from the uci:version attribute of CapabilityCommandBaseType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CapabilityCommandBaseType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CapabilityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CapabilityID.
    */
  virtual const uci::type::CapabilityID_Type& getCapabilityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CapabilityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityID.
    */
  virtual uci::type::CapabilityID_Type& getCapabilityID() = 0;

  /** Sets the complex content identified by CapabilityID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CapabilityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityCommandBaseType& setCapabilityID(const uci::type::CapabilityID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Ranking.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Ranking.
    */
  virtual const uci::type::CapabilityCommandRankingType& getRanking() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Ranking.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Ranking.
    */
  virtual uci::type::CapabilityCommandRankingType& getRanking() = 0;

  /** Sets the complex content identified by Ranking to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Ranking.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityCommandBaseType& setRanking(const uci::type::CapabilityCommandRankingType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * TemporalConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      TemporalConstraints.
    */
  virtual const uci::type::CapabilityCommandTemporalConstraintsType& getTemporalConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TemporalConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TemporalConstraints.
    */
  virtual uci::type::CapabilityCommandTemporalConstraintsType& getTemporalConstraints() = 0;

  /** Sets the complex content identified by TemporalConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TemporalConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityCommandBaseType& setTemporalConstraints(const uci::type::CapabilityCommandTemporalConstraintsType& value) = 0;

  /** Returns whether the Element identified by TemporalConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TemporalConstraints is enabled or not.
    */
  virtual bool hasTemporalConstraints() const = 0;

  /** Enables the Element identified by TemporalConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TemporalConstraints.
    */
  virtual uci::type::CapabilityCommandTemporalConstraintsType& enableTemporalConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TemporalConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityCommandBaseType& clearTemporalConstraints() = 0;

  /** Returns the value of the SimplePrimitive data type identified by OverrideRejection.
    *
    * @return The value of the simple primitive data type identified by OverrideRejection.
    */
  virtual xs::Boolean getOverrideRejection() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by OverrideRejection.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityCommandBaseType& setOverrideRejection(xs::Boolean value) = 0;

  /** Returns whether the Element identified by OverrideRejection exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OverrideRejection is enabled or not.
    */
  virtual bool hasOverrideRejection() const = 0;

  /** Clears (disabled) the Element identified by OverrideRejection.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityCommandBaseType& clearOverrideRejection() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Traceability.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Traceability.
    */
  virtual const uci::type::TraceabilityType& getTraceability() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Traceability.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Traceability.
    */
  virtual uci::type::TraceabilityType& getTraceability() = 0;

  /** Sets the complex content identified by Traceability to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Traceability.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityCommandBaseType& setTraceability(const uci::type::TraceabilityType& value) = 0;

  /** Returns whether the Element identified by Traceability exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Traceability is enabled or not.
    */
  virtual bool hasTraceability() const = 0;

  /** Enables the Element identified by Traceability.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Traceability.
    */
  virtual uci::type::TraceabilityType& enableTraceability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Traceability.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityCommandBaseType& clearTraceability() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Classification.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Classification.
    */
  virtual const uci::type::SecurityInformationType& getClassification() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Classification.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Classification.
    */
  virtual uci::type::SecurityInformationType& getClassification() = 0;

  /** Sets the complex content identified by Classification to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Classification.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityCommandBaseType& setClassification(const uci::type::SecurityInformationType& value) = 0;

  /** Returns whether the Element identified by Classification exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Classification is enabled or not.
    */
  virtual bool hasClassification() const = 0;

  /** Enables the Element identified by Classification.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Classification.
    */
  virtual uci::type::SecurityInformationType& enableClassification(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Classification.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityCommandBaseType& clearClassification() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CapabilityCommandBaseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CapabilityCommandBaseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CapabilityCommandBaseType to copy from.
    */
  CapabilityCommandBaseType(const CapabilityCommandBaseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CapabilityCommandBaseType to the contents of the
    * CapabilityCommandBaseType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The CapabilityCommandBaseType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this CapabilityCommandBaseType.
    * @return A reference to this CapabilityCommandBaseType.
    */
  CapabilityCommandBaseType& operator=(const CapabilityCommandBaseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_CAPABILITYCOMMANDBASETYPE_H

