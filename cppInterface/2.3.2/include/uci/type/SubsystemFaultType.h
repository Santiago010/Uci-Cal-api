/** @file SubsystemFaultType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SUBSYSTEMFAULTTYPE_H
#define UCI_TYPE_SUBSYSTEMFAULTTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/IntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/FaultDataType.h"
#include "uci/type/FaultID_Type.h"
#include "uci/type/FaultSeverityEnum.h"
#include "uci/type/FaultStateEnum.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/SubsystemFaultAmbiguityGroupType.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/SupportCapabilityID_Type.h"
#include "uci/type/VisibleString256Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Contains fault data for reporting by subsystems and services. */
class SubsystemFaultType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SubsystemFaultType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SubsystemFaultType.
    */
  static UCI_EXPORT SubsystemFaultType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SubsystemFaultType initializing the data accessed by the new SubsystemFaultType using
    * the data accessed by the specified SubsystemFaultType (cloning).
    *
    * @param accessor The SubsystemFaultType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SubsystemFaultType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SubsystemFaultType.
    */
  static UCI_EXPORT SubsystemFaultType& create(const SubsystemFaultType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SubsystemFaultType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The SubsystemFaultType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SubsystemFaultType& accessor);

  /** Returns this accessor's type constant, i.e. subsystemFaultType.
    *
    * @return This accessor's type constant, i.e. subsystemFaultType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::subsystemFaultType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SubsystemFaultType.
    *
    * @return The version that was initialized from the uci:version attribute of SubsystemFaultType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SubsystemFaultType& accessor) = 0;

  /** Additional fault data which contains key/value pairs with format and unit indicated for the data value. This data
    * supports fault isolation and helps to minimize false alarms. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FaultDataType, uci::type::accessorType::faultDataType> FaultData;

  /** Indicates the unique ID of a Capability related to the fault. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::CapabilityID_Type, uci::type::accessorType::capabilityID_Type> CapabilityID;

  /** Indicates the unique ID of a SupportCapability related to the fault. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::SupportCapabilityID_Type, uci::type::accessorType::supportCapabilityID_Type> SupportCapabilityID;

  /** Indicates the unique ID of a Component related to the fault. When multiple components are identified, it should be
    * inferred that each Component has been individually determined to be related to the fault. In situations where the
    * Subsystem has not yet been able to isolate the fault to individual components, the sibling AmbiguityGroup element
    * should be used. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ComponentID_Type, uci::type::accessorType::componentID_Type> ComponentID;

  /** Indicates that a fault has been narrowed down to a set of components, but not yet fully isolated. Separate
    * AmbiguityGroups can be provided when it is desirable to associate specific tests with a subset of the set of
    * components. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SubsystemFaultAmbiguityGroupType, uci::type::accessorType::subsystemFaultAmbiguityGroupType> AmbiguityGroup;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FaultID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FaultID.
    */
  virtual const uci::type::FaultID_Type& getFaultID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FaultID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FaultID.
    */
  virtual uci::type::FaultID_Type& getFaultID() = 0;

  /** Sets the complex content identified by FaultID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FaultID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setFaultID(const uci::type::FaultID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by Severity.
    *
    * @return A const reference to the value of the enumeration identified by Severity.
    */
  virtual const uci::type::FaultSeverityEnum& getSeverity() const = 0;

  /** Returns a reference to the value of the enumeration identified by Severity.
    *
    * @return A reference to the value of the enumeration identified by Severity.
    */
  virtual uci::type::FaultSeverityEnum& getSeverity() = 0;

  /** Sets the value of the enumeration identified by Severity.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setSeverity(const uci::type::FaultSeverityEnum& value) = 0;

  /** Sets the value of the enumeration identified by Severity.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setSeverity(uci::type::FaultSeverityEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Severity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Severity is enabled or not.
    */
  virtual bool hasSeverity() const = 0;

  /** Enables the Element identified by Severity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Severity.
    */
  virtual uci::type::FaultSeverityEnum& enableSeverity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Severity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& clearSeverity() = 0;

  /** Returns a const reference to the value of the enumeration identified by FaultState.
    *
    * @return A const reference to the value of the enumeration identified by FaultState.
    */
  virtual const uci::type::FaultStateEnum& getFaultState() const = 0;

  /** Returns a reference to the value of the enumeration identified by FaultState.
    *
    * @return A reference to the value of the enumeration identified by FaultState.
    */
  virtual uci::type::FaultStateEnum& getFaultState() = 0;

  /** Sets the value of the enumeration identified by FaultState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setFaultState(const uci::type::FaultStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by FaultState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setFaultState(uci::type::FaultStateEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by FaultState exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FaultState is enabled or not.
    */
  virtual bool hasFaultState() const = 0;

  /** Enables the Element identified by FaultState.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by FaultState.
    */
  virtual uci::type::FaultStateEnum& enableFaultState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FaultState.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& clearFaultState() = 0;

  /** Returns a const reference to the bounded list identified by FaultData.
    *
    * @return A const reference to the bounded list identified by FaultData.
    */
  virtual const uci::type::SubsystemFaultType::FaultData& getFaultData() const = 0;

  /** Returns a reference to the bounded list identified by FaultData.
    *
    * @return A reference to the bounded list identified by FaultData.
    */
  virtual uci::type::SubsystemFaultType::FaultData& getFaultData() = 0;

  /** Sets the bounded list identified by FaultData.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setFaultData(const uci::type::SubsystemFaultType::FaultData& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by DetectionTime.
    *
    * @return The value of the simple primitive data type identified by DetectionTime.
    */
  virtual uci::type::DateTimeTypeValue getDetectionTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DetectionTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setDetectionTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by DetectionTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DetectionTime is enabled or not.
    */
  virtual bool hasDetectionTime() const = 0;

  /** Clears (disabled) the Element identified by DetectionTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& clearDetectionTime() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FaultCode.
    *
    * @return A const reference to the accessor that provides access to the string identified by FaultCode.
    */
  virtual const uci::type::VisibleString256Type& getFaultCode() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FaultCode.
    *
    * @return A reference to the accessor that provides access to the string identified by FaultCode.
    */
  virtual uci::type::VisibleString256Type& getFaultCode() = 0;

  /** Sets the string identified by FaultCode to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FaultCode.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setFaultCode(const uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by FaultCode to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setFaultCode(const std::string& value) = 0;

  /** Sets the string identified by FaultCode to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setFaultCode(const char* value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by FaultCodeCount.
    *
    * @return The value of the simple primitive data type identified by FaultCodeCount.
    */
  virtual xs::Int getFaultCodeCount() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FaultCodeCount.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setFaultCodeCount(xs::Int value) = 0;

  /** Returns whether the Element identified by FaultCodeCount exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FaultCodeCount is enabled or not.
    */
  virtual bool hasFaultCodeCount() const = 0;

  /** Clears (disabled) the Element identified by FaultCodeCount.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& clearFaultCodeCount() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FaultDescription.
    *
    * @return A const reference to the accessor that provides access to the string identified by FaultDescription.
    */
  virtual const uci::type::VisibleString256Type& getFaultDescription() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FaultDescription.
    *
    * @return A reference to the accessor that provides access to the string identified by FaultDescription.
    */
  virtual uci::type::VisibleString256Type& getFaultDescription() = 0;

  /** Sets the string identified by FaultDescription to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FaultDescription.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setFaultDescription(const uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by FaultDescription to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setFaultDescription(const std::string& value) = 0;

  /** Sets the string identified by FaultDescription to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setFaultDescription(const char* value) = 0;

  /** Returns whether the Element identified by FaultDescription exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FaultDescription is enabled or not.
    */
  virtual bool hasFaultDescription() const = 0;

  /** Enables the Element identified by FaultDescription.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FaultDescription.
    */
  virtual uci::type::VisibleString256Type& enableFaultDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FaultDescription.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& clearFaultDescription() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SubsystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SubsystemID.
    */
  virtual const uci::type::SubsystemID_Type& getSubsystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SubsystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SubsystemID.
    */
  virtual uci::type::SubsystemID_Type& getSubsystemID() = 0;

  /** Sets the complex content identified by SubsystemID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SubsystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setSubsystemID(const uci::type::SubsystemID_Type& value) = 0;

  /** Returns whether the Element identified by SubsystemID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SubsystemID is enabled or not.
    */
  virtual bool hasSubsystemID() const = 0;

  /** Enables the Element identified by SubsystemID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SubsystemID.
    */
  virtual uci::type::SubsystemID_Type& enableSubsystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SubsystemID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& clearSubsystemID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ServiceID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ServiceID.
    */
  virtual const uci::type::ServiceID_Type& getServiceID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ServiceID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ServiceID.
    */
  virtual uci::type::ServiceID_Type& getServiceID() = 0;

  /** Sets the complex content identified by ServiceID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ServiceID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setServiceID(const uci::type::ServiceID_Type& value) = 0;

  /** Returns whether the Element identified by ServiceID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ServiceID is enabled or not.
    */
  virtual bool hasServiceID() const = 0;

  /** Enables the Element identified by ServiceID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ServiceID.
    */
  virtual uci::type::ServiceID_Type& enableServiceID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ServiceID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& clearServiceID() = 0;

  /** Returns a const reference to the bounded list identified by CapabilityID.
    *
    * @return A const reference to the bounded list identified by CapabilityID.
    */
  virtual const uci::type::SubsystemFaultType::CapabilityID& getCapabilityID() const = 0;

  /** Returns a reference to the bounded list identified by CapabilityID.
    *
    * @return A reference to the bounded list identified by CapabilityID.
    */
  virtual uci::type::SubsystemFaultType::CapabilityID& getCapabilityID() = 0;

  /** Sets the bounded list identified by CapabilityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setCapabilityID(const uci::type::SubsystemFaultType::CapabilityID& value) = 0;

  /** Returns a const reference to the bounded list identified by SupportCapabilityID.
    *
    * @return A const reference to the bounded list identified by SupportCapabilityID.
    */
  virtual const uci::type::SubsystemFaultType::SupportCapabilityID& getSupportCapabilityID() const = 0;

  /** Returns a reference to the bounded list identified by SupportCapabilityID.
    *
    * @return A reference to the bounded list identified by SupportCapabilityID.
    */
  virtual uci::type::SubsystemFaultType::SupportCapabilityID& getSupportCapabilityID() = 0;

  /** Sets the bounded list identified by SupportCapabilityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setSupportCapabilityID(const uci::type::SubsystemFaultType::SupportCapabilityID& value) = 0;

  /** Returns a const reference to the bounded list identified by ComponentID.
    *
    * @return A const reference to the bounded list identified by ComponentID.
    */
  virtual const uci::type::SubsystemFaultType::ComponentID& getComponentID() const = 0;

  /** Returns a reference to the bounded list identified by ComponentID.
    *
    * @return A reference to the bounded list identified by ComponentID.
    */
  virtual uci::type::SubsystemFaultType::ComponentID& getComponentID() = 0;

  /** Sets the bounded list identified by ComponentID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setComponentID(const uci::type::SubsystemFaultType::ComponentID& value) = 0;

  /** Returns a const reference to the bounded list identified by AmbiguityGroup.
    *
    * @return A const reference to the bounded list identified by AmbiguityGroup.
    */
  virtual const uci::type::SubsystemFaultType::AmbiguityGroup& getAmbiguityGroup() const = 0;

  /** Returns a reference to the bounded list identified by AmbiguityGroup.
    *
    * @return A reference to the bounded list identified by AmbiguityGroup.
    */
  virtual uci::type::SubsystemFaultType::AmbiguityGroup& getAmbiguityGroup() = 0;

  /** Sets the bounded list identified by AmbiguityGroup.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemFaultType& setAmbiguityGroup(const uci::type::SubsystemFaultType::AmbiguityGroup& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SubsystemFaultType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SubsystemFaultType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SubsystemFaultType to copy from.
    */
  SubsystemFaultType(const SubsystemFaultType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SubsystemFaultType to the contents of the SubsystemFaultType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SubsystemFaultType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this SubsystemFaultType.
    * @return A reference to this SubsystemFaultType.
    */
  SubsystemFaultType& operator=(const SubsystemFaultType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SUBSYSTEMFAULTTYPE_H

