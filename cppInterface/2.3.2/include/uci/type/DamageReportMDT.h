/** @file DamageReportMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_DAMAGEREPORTMDT_H
#define UCI_TYPE_DAMAGEREPORTMDT_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/DamageInformationSourceType.h"
#include "uci/type/DamageReportDetailType.h"
#include "uci/type/DamageReportID_Type.h"
#include "uci/type/DamageSubjectType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/ZoneType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class DamageReportMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new DamageReportMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DamageReportMDT.
    */
  static UCI_EXPORT DamageReportMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new DamageReportMDT initializing the data accessed by the new DamageReportMDT using the data
    * accessed by the specified DamageReportMDT (cloning).
    *
    * @param accessor The DamageReportMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created DamageReportMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DamageReportMDT.
    */
  static UCI_EXPORT DamageReportMDT& create(const DamageReportMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified DamageReportMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The DamageReportMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(DamageReportMDT& accessor);

  /** Returns this accessor's type constant, i.e. damageReportMDT.
    *
    * @return This accessor's type constant, i.e. damageReportMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::damageReportMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of DamageReportMDT.
    *
    * @return The version that was initialized from the uci:version attribute of DamageReportMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const DamageReportMDT& accessor) = 0;

  /** The collection of various types of information affected by damage. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::DamageReportDetailType, uci::type::accessorType::damageReportDetailType> DamageDetails;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DamageReportID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DamageReportID.
    */
  virtual const uci::type::DamageReportID_Type& getDamageReportID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DamageReportID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DamageReportID.
    */
  virtual uci::type::DamageReportID_Type& getDamageReportID() = 0;

  /** Sets the complex content identified by DamageReportID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DamageReportID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageReportMDT& setDamageReportID(const uci::type::DamageReportID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ReportingSystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ReportingSystemID.
    */
  virtual const uci::type::SystemID_Type& getReportingSystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ReportingSystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ReportingSystemID.
    */
  virtual uci::type::SystemID_Type& getReportingSystemID() = 0;

  /** Sets the complex content identified by ReportingSystemID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ReportingSystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageReportMDT& setReportingSystemID(const uci::type::SystemID_Type& value) = 0;

  /** Returns whether the Element identified by ReportingSystemID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReportingSystemID is enabled or not.
    */
  virtual bool hasReportingSystemID() const = 0;

  /** Enables the Element identified by ReportingSystemID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ReportingSystemID.
    */
  virtual uci::type::SystemID_Type& enableReportingSystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReportingSystemID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageReportMDT& clearReportingSystemID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Subject.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Subject.
    */
  virtual const uci::type::DamageSubjectType& getSubject() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Subject.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Subject.
    */
  virtual uci::type::DamageSubjectType& getSubject() = 0;

  /** Sets the complex content identified by Subject to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Subject.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageReportMDT& setSubject(const uci::type::DamageSubjectType& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ReportCompletionTime.
    *
    * @return The value of the simple primitive data type identified by ReportCompletionTime.
    */
  virtual uci::type::DateTimeTypeValue getReportCompletionTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ReportCompletionTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageReportMDT& setReportCompletionTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ReportZone.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ReportZone.
    */
  virtual const uci::type::ZoneType& getReportZone() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ReportZone.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ReportZone.
    */
  virtual uci::type::ZoneType& getReportZone() = 0;

  /** Sets the complex content identified by ReportZone to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ReportZone.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageReportMDT& setReportZone(const uci::type::ZoneType& value) = 0;

  /** Returns whether the Element identified by ReportZone exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReportZone is enabled or not.
    */
  virtual bool hasReportZone() const = 0;

  /** Enables the Element identified by ReportZone.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ReportZone.
    */
  virtual uci::type::ZoneType& enableReportZone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReportZone.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageReportMDT& clearReportZone() = 0;

  /** Returns a const reference to the bounded list identified by DamageDetails.
    *
    * @return A const reference to the bounded list identified by DamageDetails.
    */
  virtual const uci::type::DamageReportMDT::DamageDetails& getDamageDetails() const = 0;

  /** Returns a reference to the bounded list identified by DamageDetails.
    *
    * @return A reference to the bounded list identified by DamageDetails.
    */
  virtual uci::type::DamageReportMDT::DamageDetails& getDamageDetails() = 0;

  /** Sets the bounded list identified by DamageDetails.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageReportMDT& setDamageDetails(const uci::type::DamageReportMDT::DamageDetails& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * InformationSource.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      InformationSource.
    */
  virtual const uci::type::DamageInformationSourceType& getInformationSource() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by InformationSource.
    *
    * @return A reference to the accessor that provides access to the complex content identified by InformationSource.
    */
  virtual uci::type::DamageInformationSourceType& getInformationSource() = 0;

  /** Sets the complex content identified by InformationSource to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by InformationSource.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageReportMDT& setInformationSource(const uci::type::DamageInformationSourceType& value) = 0;

  /** Returns whether the Element identified by InformationSource exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InformationSource is enabled or not.
    */
  virtual bool hasInformationSource() const = 0;

  /** Enables the Element identified by InformationSource.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by InformationSource.
    */
  virtual uci::type::DamageInformationSourceType& enableInformationSource(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by InformationSource.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageReportMDT& clearInformationSource() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  DamageReportMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~DamageReportMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The DamageReportMDT to copy from.
    */
  DamageReportMDT(const DamageReportMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this DamageReportMDT to the contents of the DamageReportMDT on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The DamageReportMDT on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this DamageReportMDT.
    * @return A reference to this DamageReportMDT.
    */
  DamageReportMDT& operator=(const DamageReportMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_DAMAGEREPORTMDT_H

