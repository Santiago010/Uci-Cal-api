/** @file ProductMetadataMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PRODUCTMETADATAMDT_H
#define UCI_TYPE_PRODUCTMETADATAMDT_H

#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "BasicEncyclopediaNumberType.h"
#include "CreationSourceEnum.h"
#include "DataRecordBaseType.h"
#include "DateTimeType.h"
#include "DemodulationParameterType.h"
#include "EntityMetadataType.h"
#include "FileNameType.h"
#include "ForeignKeyType.h"
#include "ProductCollectionLocationType.h"
#include "ProductGeospatialLocationType.h"
#include "ProductMetadataID_Type.h"
#include "ProductOutputType.h"
#include "RequirementProductMetadataType.h"
#include "SHA_2_256_HashType.h"
#include "SecurityInformationType.h"
#include "SourceFiltersType.h"
#include "SystemID_Type.h"
#include "ThumbnailType.h"
#include "TraceabilityType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ProductMetadataMDT : public virtual DataRecordBaseType {
public:

  /** This method constructs a new ProductMetadataMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ProductMetadataMDT.
    */
  static UCI_EXPORT ProductMetadataMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ProductMetadataMDT initializing the data accessed by the new ProductMetadataMDT using
    * the data accessed by the specified ProductMetadataMDT (cloning).
    *
    * @param accessor The ProductMetadataMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created ProductMetadataMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ProductMetadataMDT.
    */
  static UCI_EXPORT ProductMetadataMDT& create(const ProductMetadataMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ProductMetadataMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The ProductMetadataMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ProductMetadataMDT& accessor);

  /** Returns this accessor's type constant, i.e. productMetadataMDT.
    *
    * @return This accessor's type constant, i.e. productMetadataMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::productMetadataMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of ProductMetadataMDT.
    *
    * @return The version that was initialized from the uci:version attribute of ProductMetadataMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.002.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ProductMetadataMDT& accessor) = 0;

  /** Describes the geospatial location or locations which the product associated with this ProductMetadata is relevant. If
    * more than one is provided, they may be disjoint. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductGeospatialLocationType, uci::type::accessorType::productGeospatialLocationType> GeospatialLocation;

  /** Indicates the unique ID of a ProductMetadata message corresponding to the original product that this product was
    * derived from. It is possible for the original products to "expire" despite this reference. This differs from
    * "DerivedFrom" in SecurityInformation in that it refers to a specific ProductMetadataID for a product that might not
    * persist vs. a less specific name, description or identification that remains meaningful over time. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type> DerivedFromID;

  /** Tasking sources work at different levels of detail and abstraction, progressing from what to do to how specifically
    * to do it. Inputs from abstract tasking sources and Tasks can be decomposed into discrete, actionable Tasks. This
    * element provides traceability to the external tasking or Task associated with the Product described by this
    * ProductMetadata. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::TraceabilityType, uci::type::accessorType::traceabilityType> Traceability;

  /** Indicates Requirement-related metadata for the Product. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::RequirementProductMetadataType, uci::type::accessorType::requirementProductMetadataType> RequirementMetadata;

  /** Indicates Entity-related metadata for Products which are associated with or contain Entities. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EntityMetadataType, uci::type::accessorType::entityMetadataType> EntityMetadata;

  /** Indicates the unique product metadata ID of a product that is being associated with this product. The associated
    * products may have been created together or are used together. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type> AssociatedID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ProductMetadataID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ProductMetadataID.
    */
  virtual const uci::type::ProductMetadataID_Type& getProductMetadataID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ProductMetadataID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ProductMetadataID.
    */
  virtual uci::type::ProductMetadataID_Type& getProductMetadataID() = 0;

  /** Sets the complex content identified by ProductMetadataID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ProductMetadataID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setProductMetadataID(const uci::type::ProductMetadataID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ProductDescription.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ProductDescription.
    */
  virtual const uci::type::ProductOutputType& getProductDescription() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ProductDescription.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ProductDescription.
    */
  virtual uci::type::ProductOutputType& getProductDescription() = 0;

  /** Sets the complex content identified by ProductDescription to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ProductDescription.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setProductDescription(const uci::type::ProductOutputType& value) = 0;

  /** Enables the Element identified by ProductDescription.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return A reference to the accessor that provides access to the complex content identified by ProductDescription.
    */
  virtual uci::type::ProductOutputType& enableProductDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileName.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileName.
    */
  virtual const uci::type::FileNameType& getFileName() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileName.
    *
    * @return A reference to the accessor that provides access to the string identified by FileName.
    */
  virtual uci::type::FileNameType& getFileName() = 0;

  /** Sets the string identified by FileName to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileName.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setFileName(const uci::type::FileNameType& value) = 0;

  /** Sets the string identified by FileName to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setFileName(const std::string& value) = 0;

  /** Sets the string identified by FileName to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setFileName(const char* value) = 0;

  /** Returns whether the Element identified by FileName exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileName is enabled or not.
    */
  virtual bool hasFileName() const = 0;

  /** Enables the Element identified by FileName.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FileName.
    */
  virtual uci::type::FileNameType& enableFileName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileName.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& clearFileName() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by BE_Number.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by BE_Number.
    */
  virtual const uci::type::BasicEncyclopediaNumberType& getBE_Number() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by BE_Number.
    *
    * @return A reference to the accessor that provides access to the complex content identified by BE_Number.
    */
  virtual uci::type::BasicEncyclopediaNumberType& getBE_Number() = 0;

  /** Sets the complex content identified by BE_Number to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by BE_Number.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setBE_Number(const uci::type::BasicEncyclopediaNumberType& value) = 0;

  /** Returns whether the Element identified by BE_Number exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BE_Number is enabled or not.
    */
  virtual bool hasBE_Number() const = 0;

  /** Enables the Element identified by BE_Number.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by BE_Number.
    */
  virtual uci::type::BasicEncyclopediaNumberType& enableBE_Number(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by BE_Number.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& clearBE_Number() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SceneKey.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SceneKey.
    */
  virtual const uci::type::ForeignKeyType& getSceneKey() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SceneKey.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SceneKey.
    */
  virtual uci::type::ForeignKeyType& getSceneKey() = 0;

  /** Sets the complex content identified by SceneKey to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SceneKey.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setSceneKey(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by SceneKey exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SceneKey is enabled or not.
    */
  virtual bool hasSceneKey() const = 0;

  /** Enables the Element identified by SceneKey.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SceneKey.
    */
  virtual uci::type::ForeignKeyType& enableSceneKey(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SceneKey.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& clearSceneKey() = 0;

  /** Returns a const reference to the bounded list identified by GeospatialLocation.
    *
    * @return A const reference to the bounded list identified by GeospatialLocation.
    */
  virtual const uci::type::ProductMetadataMDT::GeospatialLocation& getGeospatialLocation() const = 0;

  /** Returns a reference to the bounded list identified by GeospatialLocation.
    *
    * @return A reference to the bounded list identified by GeospatialLocation.
    */
  virtual uci::type::ProductMetadataMDT::GeospatialLocation& getGeospatialLocation() = 0;

  /** Sets the bounded list identified by GeospatialLocation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setGeospatialLocation(const uci::type::ProductMetadataMDT::GeospatialLocation& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CollectionLocation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CollectionLocation.
    */
  virtual const uci::type::ProductCollectionLocationType& getCollectionLocation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CollectionLocation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CollectionLocation.
    */
  virtual uci::type::ProductCollectionLocationType& getCollectionLocation() = 0;

  /** Sets the complex content identified by CollectionLocation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionLocation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setCollectionLocation(const uci::type::ProductCollectionLocationType& value) = 0;

  /** Returns whether the Element identified by CollectionLocation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionLocation is enabled or not.
    */
  virtual bool hasCollectionLocation() const = 0;

  /** Enables the Element identified by CollectionLocation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CollectionLocation.
    */
  virtual uci::type::ProductCollectionLocationType& enableCollectionLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionLocation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& clearCollectionLocation() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual const uci::type::SystemID_Type& getSystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual uci::type::SystemID_Type& getSystemID() = 0;

  /** Sets the complex content identified by SystemID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setSystemID(const uci::type::SystemID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ProductSource.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ProductSource.
    */
  virtual const uci::type::SourceFiltersType& getProductSource() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ProductSource.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ProductSource.
    */
  virtual uci::type::SourceFiltersType& getProductSource() = 0;

  /** Sets the complex content identified by ProductSource to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ProductSource.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setProductSource(const uci::type::SourceFiltersType& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by CreationSource.
    *
    * @return A const reference to the value of the enumeration identified by CreationSource.
    */
  virtual const uci::type::CreationSourceEnum& getCreationSource() const = 0;

  /** Returns a reference to the value of the enumeration identified by CreationSource.
    *
    * @return A reference to the value of the enumeration identified by CreationSource.
    */
  virtual uci::type::CreationSourceEnum& getCreationSource() = 0;

  /** Sets the value of the enumeration identified by CreationSource.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setCreationSource(const uci::type::CreationSourceEnum& value) = 0;

  /** Sets the value of the enumeration identified by CreationSource.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setCreationSource(uci::type::CreationSourceEnum::EnumerationItem value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by UntrustedModification.
    *
    * @return The value of the simple primitive data type identified by UntrustedModification.
    */
  virtual xs::Boolean getUntrustedModification() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by UntrustedModification.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setUntrustedModification(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Timestamp.
    *
    * @return The value of the simple primitive data type identified by Timestamp.
    */
  virtual uci::type::DateTimeTypeValue getTimestamp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Timestamp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setTimestamp(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SecurityInformation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SecurityInformation.
    */
  virtual const uci::type::SecurityInformationType& getSecurityInformation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SecurityInformation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SecurityInformation.
    */
  virtual uci::type::SecurityInformationType& getSecurityInformation() = 0;

  /** Sets the complex content identified by SecurityInformation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SecurityInformation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setSecurityInformation(const uci::type::SecurityInformationType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Thumbnail.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Thumbnail.
    */
  virtual const uci::type::ThumbnailType& getThumbnail() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Thumbnail.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Thumbnail.
    */
  virtual uci::type::ThumbnailType& getThumbnail() = 0;

  /** Sets the complex content identified by Thumbnail to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Thumbnail.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setThumbnail(const uci::type::ThumbnailType& value) = 0;

  /** Returns whether the Element identified by Thumbnail exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Thumbnail is enabled or not.
    */
  virtual bool hasThumbnail() const = 0;

  /** Enables the Element identified by Thumbnail.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Thumbnail.
    */
  virtual uci::type::ThumbnailType& enableThumbnail(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Thumbnail.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& clearThumbnail() = 0;

  /** Returns a const reference to the bounded list identified by DerivedFromID.
    *
    * @return A const reference to the bounded list identified by DerivedFromID.
    */
  virtual const uci::type::ProductMetadataMDT::DerivedFromID& getDerivedFromID() const = 0;

  /** Returns a reference to the bounded list identified by DerivedFromID.
    *
    * @return A reference to the bounded list identified by DerivedFromID.
    */
  virtual uci::type::ProductMetadataMDT::DerivedFromID& getDerivedFromID() = 0;

  /** Sets the bounded list identified by DerivedFromID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setDerivedFromID(const uci::type::ProductMetadataMDT::DerivedFromID& value) = 0;

  /** Returns a const reference to the bounded list identified by Traceability.
    *
    * @return A const reference to the bounded list identified by Traceability.
    */
  virtual const uci::type::ProductMetadataMDT::Traceability& getTraceability() const = 0;

  /** Returns a reference to the bounded list identified by Traceability.
    *
    * @return A reference to the bounded list identified by Traceability.
    */
  virtual uci::type::ProductMetadataMDT::Traceability& getTraceability() = 0;

  /** Sets the bounded list identified by Traceability.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setTraceability(const uci::type::ProductMetadataMDT::Traceability& value) = 0;

  /** Returns a const reference to the bounded list identified by RequirementMetadata.
    *
    * @return A const reference to the bounded list identified by RequirementMetadata.
    */
  virtual const uci::type::ProductMetadataMDT::RequirementMetadata& getRequirementMetadata() const = 0;

  /** Returns a reference to the bounded list identified by RequirementMetadata.
    *
    * @return A reference to the bounded list identified by RequirementMetadata.
    */
  virtual uci::type::ProductMetadataMDT::RequirementMetadata& getRequirementMetadata() = 0;

  /** Sets the bounded list identified by RequirementMetadata.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setRequirementMetadata(const uci::type::ProductMetadataMDT::RequirementMetadata& value) = 0;

  /** Returns a const reference to the bounded list identified by EntityMetadata.
    *
    * @return A const reference to the bounded list identified by EntityMetadata.
    */
  virtual const uci::type::ProductMetadataMDT::EntityMetadata& getEntityMetadata() const = 0;

  /** Returns a reference to the bounded list identified by EntityMetadata.
    *
    * @return A reference to the bounded list identified by EntityMetadata.
    */
  virtual uci::type::ProductMetadataMDT::EntityMetadata& getEntityMetadata() = 0;

  /** Sets the bounded list identified by EntityMetadata.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setEntityMetadata(const uci::type::ProductMetadataMDT::EntityMetadata& value) = 0;

  /** Returns the accessor to the SHA_2_Hash field contained in this message fragment.
    *
    * @return The reference to the accessor to the SHA_2_Hash field.
    */
  virtual const uci::type::SHA_2_256_HashType& getSHA_2_Hash() const = 0;

  /** Returns the accessor to the SHA_2_Hash field contained in this message fragment.
    *
    * @return The reference to the accessor to the SHA_2_Hash field.
    */
  virtual uci::type::SHA_2_256_HashType& getSHA_2_Hash() = 0;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents.
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setSHA_2_Hash(const uci::type::SHA_2_256_HashType& value) = 0;

  /** Returns whether this optionalfield SHA_2_Hashis available.
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  virtual bool hasSHA_2_Hash() const = 0;

  /** Enables the optional field such that getSHA_2_Hash will return the optional field and not throw an exception when
    * invoked.
    *
    * @return The reference to the accessor to the SHA_2_Hash field.
    */
  virtual uci::type::SHA_2_256_HashType& enableSHA_2_Hash() = 0;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& clearSHA_2_Hash() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * DemodulationParameters.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      DemodulationParameters.
    */
  virtual const uci::type::DemodulationParameterType& getDemodulationParameters() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DemodulationParameters.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DemodulationParameters.
    */
  virtual uci::type::DemodulationParameterType& getDemodulationParameters() = 0;

  /** Sets the complex content identified by DemodulationParameters to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DemodulationParameters.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setDemodulationParameters(const uci::type::DemodulationParameterType& value) = 0;

  /** Returns whether the Element identified by DemodulationParameters exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DemodulationParameters is enabled or not.
    */
  virtual bool hasDemodulationParameters() const = 0;

  /** Enables the Element identified by DemodulationParameters.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DemodulationParameters.
    */
  virtual uci::type::DemodulationParameterType& enableDemodulationParameters(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DemodulationParameters.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& clearDemodulationParameters() = 0;

  /** Returns a const reference to the bounded list identified by AssociatedID.
    *
    * @return A const reference to the bounded list identified by AssociatedID.
    */
  virtual const uci::type::ProductMetadataMDT::AssociatedID& getAssociatedID() const = 0;

  /** Returns a reference to the bounded list identified by AssociatedID.
    *
    * @return A reference to the bounded list identified by AssociatedID.
    */
  virtual uci::type::ProductMetadataMDT::AssociatedID& getAssociatedID() = 0;

  /** Sets the bounded list identified by AssociatedID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductMetadataMDT& setAssociatedID(const uci::type::ProductMetadataMDT::AssociatedID& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ProductMetadataMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~ProductMetadataMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ProductMetadataMDT to copy from.
    */
  ProductMetadataMDT(const ProductMetadataMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ProductMetadataMDT to the contents of the ProductMetadataMDT on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ProductMetadataMDT on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this ProductMetadataMDT.
    * @return A reference to this ProductMetadataMDT.
    */
  ProductMetadataMDT& operator=(const ProductMetadataMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PRODUCTMETADATAMDT_H

