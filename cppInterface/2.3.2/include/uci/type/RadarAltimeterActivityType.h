/** @file RadarAltimeterActivityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_RADARALTIMETERACTIVITYTYPE_H
#define UCI_TYPE_RADARALTIMETERACTIVITYTYPE_H

#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ForeignKeyType.h"
#include "RadarAltimeterActivityMetricsType.h"
#include "RadarAltimeterActivityPredictedCollectionsType.h"
#include "RadarAltimeterSubCapabilityEnum.h"
#include "RepetitionType.h"
#include "SharedRF_ApertureActivityBaseType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class RadarAltimeterActivityType : public virtual SharedRF_ApertureActivityBaseType {
public:

  /** This method constructs a new RadarAltimeterActivityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RadarAltimeterActivityType.
    */
  static UCI_EXPORT RadarAltimeterActivityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RadarAltimeterActivityType initializing the data accessed by the new
    * RadarAltimeterActivityType using the data accessed by the specified RadarAltimeterActivityType (cloning).
    *
    * @param accessor The RadarAltimeterActivityType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created RadarAltimeterActivityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RadarAltimeterActivityType.
    */
  static UCI_EXPORT RadarAltimeterActivityType& create(const RadarAltimeterActivityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RadarAltimeterActivityType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The RadarAltimeterActivityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RadarAltimeterActivityType& accessor);

  /** Returns this accessor's type constant, i.e. radarAltimeterActivityType.
    *
    * @return This accessor's type constant, i.e. radarAltimeterActivityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::radarAltimeterActivityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of RadarAltimeterActivityType.
    *
    * @return The version that was initialized from the uci:version attribute of RadarAltimeterActivityType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RadarAltimeterActivityType& accessor) = 0;

  /** Indicates a specific SubCapability associated with the Activity. If omitted, all SubCapabilities of the associated
    * Capability are applicable for the Activity. This element is required whenever a subset of SubCapabilities of a
    * Capability are used by the Activity. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 3]
    */
  typedef uci::base::BoundedList<uci::type::RadarAltimeterSubCapabilityEnum, uci::type::accessorType::radarAltimeterSubCapabilityEnum> SubCapability;

  /** Supports interaction with a capability assessment function. This allows a subsystem or a model of a subsystem to
    * estimate future performance. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RadarAltimeterActivityPredictedCollectionsType, uci::type::accessorType::radarAltimeterActivityPredictedCollectionsType> PredictedCollections;

  /** Indicates which electronic protection IDs are in use for this activity. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType> ElectronicProtectionOptionsEmployed;

  /** Returns a const reference to the bounded list identified by SubCapability.
    *
    * @return A const reference to the bounded list identified by SubCapability.
    */
  virtual const uci::type::RadarAltimeterActivityType::SubCapability& getSubCapability() const = 0;

  /** Returns a reference to the bounded list identified by SubCapability.
    *
    * @return A reference to the bounded list identified by SubCapability.
    */
  virtual uci::type::RadarAltimeterActivityType::SubCapability& getSubCapability() = 0;

  /** Sets the bounded list identified by SubCapability.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityType& setSubCapability(const uci::type::RadarAltimeterActivityType::SubCapability& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Metrics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Metrics.
    */
  virtual const uci::type::RadarAltimeterActivityMetricsType& getMetrics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Metrics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Metrics.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& getMetrics() = 0;

  /** Sets the complex content identified by Metrics to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Metrics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityType& setMetrics(const uci::type::RadarAltimeterActivityMetricsType& value) = 0;

  /** Returns whether the Element identified by Metrics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Metrics is enabled or not.
    */
  virtual bool hasMetrics() const = 0;

  /** Enables the Element identified by Metrics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Metrics.
    */
  virtual uci::type::RadarAltimeterActivityMetricsType& enableMetrics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Metrics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityType& clearMetrics() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual const uci::type::RepetitionType& getRepetition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& getRepetition() = 0;

  /** Sets the complex content identified by Repetition to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Repetition.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityType& setRepetition(const uci::type::RepetitionType& value) = 0;

  /** Returns whether the Element identified by Repetition exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Repetition is enabled or not.
    */
  virtual bool hasRepetition() const = 0;

  /** Enables the Element identified by Repetition.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& enableRepetition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Repetition.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityType& clearRepetition() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PolicyApplied.
    *
    * @return The value of the simple primitive data type identified by PolicyApplied.
    */
  virtual xs::Boolean getPolicyApplied() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PolicyApplied.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityType& setPolicyApplied(xs::Boolean value) = 0;

  /** Returns whether the Element identified by PolicyApplied exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PolicyApplied is enabled or not.
    */
  virtual bool hasPolicyApplied() const = 0;

  /** Clears (disabled) the Element identified by PolicyApplied.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityType& clearPolicyApplied() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AllMessagesProduced.
    *
    * @return The value of the simple primitive data type identified by AllMessagesProduced.
    */
  virtual xs::Boolean getAllMessagesProduced() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AllMessagesProduced.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityType& setAllMessagesProduced(xs::Boolean value) = 0;

  /** Returns a const reference to the bounded list identified by PredictedCollections.
    *
    * @return A const reference to the bounded list identified by PredictedCollections.
    */
  virtual const uci::type::RadarAltimeterActivityType::PredictedCollections& getPredictedCollections() const = 0;

  /** Returns a reference to the bounded list identified by PredictedCollections.
    *
    * @return A reference to the bounded list identified by PredictedCollections.
    */
  virtual uci::type::RadarAltimeterActivityType::PredictedCollections& getPredictedCollections() = 0;

  /** Sets the bounded list identified by PredictedCollections.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityType& setPredictedCollections(const uci::type::RadarAltimeterActivityType::PredictedCollections& value) = 0;

  /** Returns a const reference to the bounded list identified by ElectronicProtectionOptionsEmployed.
    *
    * @return A const reference to the bounded list identified by ElectronicProtectionOptionsEmployed.
    */
  virtual const uci::type::RadarAltimeterActivityType::ElectronicProtectionOptionsEmployed& getElectronicProtectionOptionsEmployed() const = 0;

  /** Returns a reference to the bounded list identified by ElectronicProtectionOptionsEmployed.
    *
    * @return A reference to the bounded list identified by ElectronicProtectionOptionsEmployed.
    */
  virtual uci::type::RadarAltimeterActivityType::ElectronicProtectionOptionsEmployed& getElectronicProtectionOptionsEmployed() = 0;

  /** Sets the bounded list identified by ElectronicProtectionOptionsEmployed.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RadarAltimeterActivityType& setElectronicProtectionOptionsEmployed(const uci::type::RadarAltimeterActivityType::ElectronicProtectionOptionsEmployed& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RadarAltimeterActivityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~RadarAltimeterActivityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RadarAltimeterActivityType to copy from.
    */
  RadarAltimeterActivityType(const RadarAltimeterActivityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RadarAltimeterActivityType to the contents of the
    * RadarAltimeterActivityType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The RadarAltimeterActivityType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this RadarAltimeterActivityType.
    * @return A reference to this RadarAltimeterActivityType.
    */
  RadarAltimeterActivityType& operator=(const RadarAltimeterActivityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_RADARALTIMETERACTIVITYTYPE_H

