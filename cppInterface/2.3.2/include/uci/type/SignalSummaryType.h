/** @file SignalSummaryType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SIGNALSUMMARYTYPE_H
#define UCI_TYPE_SIGNALSUMMARYTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CoverageEffortEnum.h"
#include "uci/type/DurationType.h"
#include "uci/type/EmitterUrgencyEnum.h"
#include "uci/type/EmptyType.h"
#include "uci/type/FrequencyControlType.h"
#include "uci/type/FrequencyModulationVariationEnum.h"
#include "uci/type/FrequencyRangeType.h"
#include "uci/type/FrequencyType.h"
#include "uci/type/MilliwattPowerRatioType.h"
#include "uci/type/ModulationEnum.h"
#include "uci/type/PRI_TypeEnum.h"
#include "uci/type/RadarBeamPersistenceEnum.h"
#include "uci/type/RadarBeamTypeEnum.h"
#include "uci/type/SignalLocationEnum.h"
#include "uci/type/TrackModeEnum.h"
#include "uci/type/VisibleString64Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SignalSummaryType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SignalSummaryType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SignalSummaryType.
    */
  static UCI_EXPORT SignalSummaryType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SignalSummaryType initializing the data accessed by the new SignalSummaryType using the
    * data accessed by the specified SignalSummaryType (cloning).
    *
    * @param accessor The SignalSummaryType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SignalSummaryType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SignalSummaryType.
    */
  static UCI_EXPORT SignalSummaryType& create(const SignalSummaryType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SignalSummaryType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The SignalSummaryType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SignalSummaryType& accessor);

  /** Returns this accessor's type constant, i.e. signalSummaryType.
    *
    * @return This accessor's type constant, i.e. signalSummaryType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::signalSummaryType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SignalSummaryType.
    *
    * @return The version that was initialized from the uci:version attribute of SignalSummaryType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.001.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SignalSummaryType& accessor) = 0;

  /** Indicates detected modulation in the Signal. See enumeration annotations for further details. List size for this
    * element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 62]
    */
  typedef uci::base::BoundedList<uci::type::ModulationEnum, uci::type::accessorType::modulationEnum> Modulation;

  /** Indicates a specific frequency to be used for the signal description. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::FrequencyControlType, uci::type::accessorType::frequencyControlType> FrequencyCoverage;

  /** Returns a const reference to the bounded list identified by Modulation.
    *
    * @return A const reference to the bounded list identified by Modulation.
    */
  virtual const uci::type::SignalSummaryType::Modulation& getModulation() const = 0;

  /** Returns a reference to the bounded list identified by Modulation.
    *
    * @return A reference to the bounded list identified by Modulation.
    */
  virtual uci::type::SignalSummaryType::Modulation& getModulation() = 0;

  /** Sets the bounded list identified by Modulation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setModulation(const uci::type::SignalSummaryType::Modulation& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by VendorSpecificModulation.
    *
    * @return A const reference to the accessor that provides access to the string identified by VendorSpecificModulation.
    */
  virtual const uci::type::VisibleString64Type& getVendorSpecificModulation() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by VendorSpecificModulation.
    *
    * @return A reference to the accessor that provides access to the string identified by VendorSpecificModulation.
    */
  virtual uci::type::VisibleString64Type& getVendorSpecificModulation() = 0;

  /** Sets the string identified by VendorSpecificModulation to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by VendorSpecificModulation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setVendorSpecificModulation(const uci::type::VisibleString64Type& value) = 0;

  /** Sets the string identified by VendorSpecificModulation to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setVendorSpecificModulation(const std::string& value) = 0;

  /** Sets the string identified by VendorSpecificModulation to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setVendorSpecificModulation(const char* value) = 0;

  /** Returns whether the Element identified by VendorSpecificModulation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VendorSpecificModulation is enabled or not.
    */
  virtual bool hasVendorSpecificModulation() const = 0;

  /** Enables the Element identified by VendorSpecificModulation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by VendorSpecificModulation.
    */
  virtual uci::type::VisibleString64Type& enableVendorSpecificModulation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VendorSpecificModulation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearVendorSpecificModulation() = 0;

  /** Returns a const reference to the value of the enumeration identified by FrequencyModulationVariation.
    *
    * @return A const reference to the value of the enumeration identified by FrequencyModulationVariation.
    */
  virtual const uci::type::FrequencyModulationVariationEnum& getFrequencyModulationVariation() const = 0;

  /** Returns a reference to the value of the enumeration identified by FrequencyModulationVariation.
    *
    * @return A reference to the value of the enumeration identified by FrequencyModulationVariation.
    */
  virtual uci::type::FrequencyModulationVariationEnum& getFrequencyModulationVariation() = 0;

  /** Sets the value of the enumeration identified by FrequencyModulationVariation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setFrequencyModulationVariation(const uci::type::FrequencyModulationVariationEnum& value) = 0;

  /** Sets the value of the enumeration identified by FrequencyModulationVariation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setFrequencyModulationVariation(uci::type::FrequencyModulationVariationEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by FrequencyModulationVariation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FrequencyModulationVariation is enabled or not.
    */
  virtual bool hasFrequencyModulationVariation() const = 0;

  /** Enables the Element identified by FrequencyModulationVariation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by FrequencyModulationVariation.
    */
  virtual uci::type::FrequencyModulationVariationEnum& enableFrequencyModulationVariation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FrequencyModulationVariation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearFrequencyModulationVariation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by FrequencyAverage.
    *
    * @return The value of the simple primitive data type identified by FrequencyAverage.
    */
  virtual uci::type::FrequencyTypeValue getFrequencyAverage() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FrequencyAverage.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setFrequencyAverage(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by FrequencyAverage exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FrequencyAverage is enabled or not.
    */
  virtual bool hasFrequencyAverage() const = 0;

  /** Clears (disabled) the Element identified by FrequencyAverage.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearFrequencyAverage() = 0;

  /** Returns the value of the SimplePrimitive data type identified by FrequencyMin.
    *
    * @return The value of the simple primitive data type identified by FrequencyMin.
    */
  virtual uci::type::FrequencyTypeValue getFrequencyMin() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FrequencyMin.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setFrequencyMin(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by FrequencyMin exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FrequencyMin is enabled or not.
    */
  virtual bool hasFrequencyMin() const = 0;

  /** Clears (disabled) the Element identified by FrequencyMin.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearFrequencyMin() = 0;

  /** Returns the value of the SimplePrimitive data type identified by FrequencyMax.
    *
    * @return The value of the simple primitive data type identified by FrequencyMax.
    */
  virtual uci::type::FrequencyTypeValue getFrequencyMax() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FrequencyMax.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setFrequencyMax(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by FrequencyMax exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FrequencyMax is enabled or not.
    */
  virtual bool hasFrequencyMax() const = 0;

  /** Clears (disabled) the Element identified by FrequencyMax.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearFrequencyMax() = 0;

  /** Returns a const reference to the value of the enumeration identified by FrequencyRangeControlOptions.
    *
    * @return A const reference to the value of the enumeration identified by FrequencyRangeControlOptions.
    */
  virtual const uci::type::CoverageEffortEnum& getFrequencyRangeControlOptions() const = 0;

  /** Returns a reference to the value of the enumeration identified by FrequencyRangeControlOptions.
    *
    * @return A reference to the value of the enumeration identified by FrequencyRangeControlOptions.
    */
  virtual uci::type::CoverageEffortEnum& getFrequencyRangeControlOptions() = 0;

  /** Sets the value of the enumeration identified by FrequencyRangeControlOptions.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setFrequencyRangeControlOptions(const uci::type::CoverageEffortEnum& value) = 0;

  /** Sets the value of the enumeration identified by FrequencyRangeControlOptions.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setFrequencyRangeControlOptions(uci::type::CoverageEffortEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by FrequencyRangeControlOptions exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FrequencyRangeControlOptions is enabled or not.
    */
  virtual bool hasFrequencyRangeControlOptions() const = 0;

  /** Enables the Element identified by FrequencyRangeControlOptions.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by FrequencyRangeControlOptions.
    */
  virtual uci::type::CoverageEffortEnum& enableFrequencyRangeControlOptions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FrequencyRangeControlOptions.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearFrequencyRangeControlOptions() = 0;

  /** Returns a const reference to the value of the enumeration identified by PRI_Type.
    *
    * @return A const reference to the value of the enumeration identified by PRI_Type.
    */
  virtual const uci::type::PRI_TypeEnum& getPRI_Type() const = 0;

  /** Returns a reference to the value of the enumeration identified by PRI_Type.
    *
    * @return A reference to the value of the enumeration identified by PRI_Type.
    */
  virtual uci::type::PRI_TypeEnum& getPRI_Type() = 0;

  /** Sets the value of the enumeration identified by PRI_Type.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setPRI_Type(const uci::type::PRI_TypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by PRI_Type.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setPRI_Type(uci::type::PRI_TypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by PRI_Type exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_Type is enabled or not.
    */
  virtual bool hasPRI_Type() const = 0;

  /** Enables the Element identified by PRI_Type.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by PRI_Type.
    */
  virtual uci::type::PRI_TypeEnum& enablePRI_Type(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PRI_Type.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearPRI_Type() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PRI_Average.
    *
    * @return The value of the simple primitive data type identified by PRI_Average.
    */
  virtual uci::type::DurationTypeValue getPRI_Average() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PRI_Average.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setPRI_Average(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PRI_Average exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_Average is enabled or not.
    */
  virtual bool hasPRI_Average() const = 0;

  /** Clears (disabled) the Element identified by PRI_Average.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearPRI_Average() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PRI_Min.
    *
    * @return The value of the simple primitive data type identified by PRI_Min.
    */
  virtual uci::type::DurationTypeValue getPRI_Min() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PRI_Min.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setPRI_Min(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PRI_Min exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_Min is enabled or not.
    */
  virtual bool hasPRI_Min() const = 0;

  /** Clears (disabled) the Element identified by PRI_Min.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearPRI_Min() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PRI_Max.
    *
    * @return The value of the simple primitive data type identified by PRI_Max.
    */
  virtual uci::type::DurationTypeValue getPRI_Max() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PRI_Max.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setPRI_Max(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PRI_Max exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI_Max is enabled or not.
    */
  virtual bool hasPRI_Max() const = 0;

  /** Clears (disabled) the Element identified by PRI_Max.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearPRI_Max() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PulseWidthAverage.
    *
    * @return The value of the simple primitive data type identified by PulseWidthAverage.
    */
  virtual uci::type::DurationTypeValue getPulseWidthAverage() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PulseWidthAverage.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setPulseWidthAverage(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PulseWidthAverage exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseWidthAverage is enabled or not.
    */
  virtual bool hasPulseWidthAverage() const = 0;

  /** Clears (disabled) the Element identified by PulseWidthAverage.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearPulseWidthAverage() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PulseWidthMin.
    *
    * @return The value of the simple primitive data type identified by PulseWidthMin.
    */
  virtual uci::type::DurationTypeValue getPulseWidthMin() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PulseWidthMin.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setPulseWidthMin(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PulseWidthMin exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseWidthMin is enabled or not.
    */
  virtual bool hasPulseWidthMin() const = 0;

  /** Clears (disabled) the Element identified by PulseWidthMin.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearPulseWidthMin() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PulseWidthMax.
    *
    * @return The value of the simple primitive data type identified by PulseWidthMax.
    */
  virtual uci::type::DurationTypeValue getPulseWidthMax() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PulseWidthMax.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setPulseWidthMax(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PulseWidthMax exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseWidthMax is enabled or not.
    */
  virtual bool hasPulseWidthMax() const = 0;

  /** Clears (disabled) the Element identified by PulseWidthMax.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearPulseWidthMax() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SignalBandwidth.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SignalBandwidth.
    */
  virtual const uci::type::FrequencyRangeType& getSignalBandwidth() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SignalBandwidth.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SignalBandwidth.
    */
  virtual uci::type::FrequencyRangeType& getSignalBandwidth() = 0;

  /** Sets the complex content identified by SignalBandwidth to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SignalBandwidth.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setSignalBandwidth(const uci::type::FrequencyRangeType& value) = 0;

  /** Returns whether the Element identified by SignalBandwidth exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SignalBandwidth is enabled or not.
    */
  virtual bool hasSignalBandwidth() const = 0;

  /** Enables the Element identified by SignalBandwidth.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SignalBandwidth.
    */
  virtual uci::type::FrequencyRangeType& enableSignalBandwidth(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SignalBandwidth.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearSignalBandwidth() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AmplitudeAverage.
    *
    * @return The value of the simple primitive data type identified by AmplitudeAverage.
    */
  virtual uci::type::MilliwattPowerRatioTypeValue getAmplitudeAverage() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AmplitudeAverage.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setAmplitudeAverage(uci::type::MilliwattPowerRatioTypeValue value) = 0;

  /** Returns whether the Element identified by AmplitudeAverage exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AmplitudeAverage is enabled or not.
    */
  virtual bool hasAmplitudeAverage() const = 0;

  /** Clears (disabled) the Element identified by AmplitudeAverage.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearAmplitudeAverage() = 0;

  /** Returns a const reference to the value of the enumeration identified by TrackMode.
    *
    * @return A const reference to the value of the enumeration identified by TrackMode.
    */
  virtual const uci::type::TrackModeEnum& getTrackMode() const = 0;

  /** Returns a reference to the value of the enumeration identified by TrackMode.
    *
    * @return A reference to the value of the enumeration identified by TrackMode.
    */
  virtual uci::type::TrackModeEnum& getTrackMode() = 0;

  /** Sets the value of the enumeration identified by TrackMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setTrackMode(const uci::type::TrackModeEnum& value) = 0;

  /** Sets the value of the enumeration identified by TrackMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setTrackMode(uci::type::TrackModeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by TrackMode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TrackMode is enabled or not.
    */
  virtual bool hasTrackMode() const = 0;

  /** Enables the Element identified by TrackMode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by TrackMode.
    */
  virtual uci::type::TrackModeEnum& enableTrackMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TrackMode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearTrackMode() = 0;

  /** Returns a const reference to the value of the enumeration identified by Urgency.
    *
    * @return A const reference to the value of the enumeration identified by Urgency.
    */
  virtual const uci::type::EmitterUrgencyEnum& getUrgency() const = 0;

  /** Returns a reference to the value of the enumeration identified by Urgency.
    *
    * @return A reference to the value of the enumeration identified by Urgency.
    */
  virtual uci::type::EmitterUrgencyEnum& getUrgency() = 0;

  /** Sets the value of the enumeration identified by Urgency.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setUrgency(const uci::type::EmitterUrgencyEnum& value) = 0;

  /** Sets the value of the enumeration identified by Urgency.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setUrgency(uci::type::EmitterUrgencyEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Urgency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Urgency is enabled or not.
    */
  virtual bool hasUrgency() const = 0;

  /** Enables the Element identified by Urgency.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Urgency.
    */
  virtual uci::type::EmitterUrgencyEnum& enableUrgency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Urgency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearUrgency() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by WartimeReserve.
    *
    * @return A const reference to the accessor that provides access to the string identified by WartimeReserve.
    */
  virtual const uci::type::EmptyType& getWartimeReserve() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by WartimeReserve.
    *
    * @return A reference to the accessor that provides access to the string identified by WartimeReserve.
    */
  virtual uci::type::EmptyType& getWartimeReserve() = 0;

  /** Sets the string identified by WartimeReserve to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by WartimeReserve.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setWartimeReserve(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by WartimeReserve to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setWartimeReserve(const std::string& value) = 0;

  /** Sets the string identified by WartimeReserve to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setWartimeReserve(const char* value) = 0;

  /** Returns whether the Element identified by WartimeReserve exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WartimeReserve is enabled or not.
    */
  virtual bool hasWartimeReserve() const = 0;

  /** Enables the Element identified by WartimeReserve.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by WartimeReserve.
    */
  virtual uci::type::EmptyType& enableWartimeReserve(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by WartimeReserve.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearWartimeReserve() = 0;

  /** Returns a const reference to the value of the enumeration identified by LocationCategory.
    *
    * @return A const reference to the value of the enumeration identified by LocationCategory.
    */
  virtual const uci::type::SignalLocationEnum& getLocationCategory() const = 0;

  /** Returns a reference to the value of the enumeration identified by LocationCategory.
    *
    * @return A reference to the value of the enumeration identified by LocationCategory.
    */
  virtual uci::type::SignalLocationEnum& getLocationCategory() = 0;

  /** Sets the value of the enumeration identified by LocationCategory.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setLocationCategory(const uci::type::SignalLocationEnum& value) = 0;

  /** Sets the value of the enumeration identified by LocationCategory.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setLocationCategory(uci::type::SignalLocationEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by LocationCategory exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LocationCategory is enabled or not.
    */
  virtual bool hasLocationCategory() const = 0;

  /** Enables the Element identified by LocationCategory.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by LocationCategory.
    */
  virtual uci::type::SignalLocationEnum& enableLocationCategory(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LocationCategory.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearLocationCategory() = 0;

  /** Returns a const reference to the value of the enumeration identified by TypeOfBeam.
    *
    * @return A const reference to the value of the enumeration identified by TypeOfBeam.
    */
  virtual const uci::type::RadarBeamTypeEnum& getTypeOfBeam() const = 0;

  /** Returns a reference to the value of the enumeration identified by TypeOfBeam.
    *
    * @return A reference to the value of the enumeration identified by TypeOfBeam.
    */
  virtual uci::type::RadarBeamTypeEnum& getTypeOfBeam() = 0;

  /** Sets the value of the enumeration identified by TypeOfBeam.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setTypeOfBeam(const uci::type::RadarBeamTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by TypeOfBeam.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setTypeOfBeam(uci::type::RadarBeamTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by TypeOfBeam exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TypeOfBeam is enabled or not.
    */
  virtual bool hasTypeOfBeam() const = 0;

  /** Enables the Element identified by TypeOfBeam.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by TypeOfBeam.
    */
  virtual uci::type::RadarBeamTypeEnum& enableTypeOfBeam(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TypeOfBeam.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearTypeOfBeam() = 0;

  /** Returns a const reference to the value of the enumeration identified by BeamPersistence.
    *
    * @return A const reference to the value of the enumeration identified by BeamPersistence.
    */
  virtual const uci::type::RadarBeamPersistenceEnum& getBeamPersistence() const = 0;

  /** Returns a reference to the value of the enumeration identified by BeamPersistence.
    *
    * @return A reference to the value of the enumeration identified by BeamPersistence.
    */
  virtual uci::type::RadarBeamPersistenceEnum& getBeamPersistence() = 0;

  /** Sets the value of the enumeration identified by BeamPersistence.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setBeamPersistence(const uci::type::RadarBeamPersistenceEnum& value) = 0;

  /** Sets the value of the enumeration identified by BeamPersistence.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setBeamPersistence(uci::type::RadarBeamPersistenceEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by BeamPersistence exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BeamPersistence is enabled or not.
    */
  virtual bool hasBeamPersistence() const = 0;

  /** Enables the Element identified by BeamPersistence.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by BeamPersistence.
    */
  virtual uci::type::RadarBeamPersistenceEnum& enableBeamPersistence(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by BeamPersistence.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& clearBeamPersistence() = 0;

  /** Returns a const reference to the bounded list identified by FrequencyCoverage.
    *
    * @return A const reference to the bounded list identified by FrequencyCoverage.
    */
  virtual const uci::type::SignalSummaryType::FrequencyCoverage& getFrequencyCoverage() const = 0;

  /** Returns a reference to the bounded list identified by FrequencyCoverage.
    *
    * @return A reference to the bounded list identified by FrequencyCoverage.
    */
  virtual uci::type::SignalSummaryType::FrequencyCoverage& getFrequencyCoverage() = 0;

  /** Sets the bounded list identified by FrequencyCoverage.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalSummaryType& setFrequencyCoverage(const uci::type::SignalSummaryType::FrequencyCoverage& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SignalSummaryType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SignalSummaryType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SignalSummaryType to copy from.
    */
  SignalSummaryType(const SignalSummaryType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SignalSummaryType to the contents of the SignalSummaryType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SignalSummaryType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this SignalSummaryType.
    * @return A reference to this SignalSummaryType.
    */
  SignalSummaryType& operator=(const SignalSummaryType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SIGNALSUMMARYTYPE_H

