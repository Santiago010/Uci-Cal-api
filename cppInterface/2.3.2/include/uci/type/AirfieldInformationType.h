/** @file AirfieldInformationType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_AIRFIELDINFORMATIONTYPE_H
#define UCI_TYPE_AIRFIELDINFORMATIONTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/AirRaidStateEnum.h"
#include "uci/type/AirfieldContaminationType.h"
#include "uci/type/AirfieldID_ICAO_StringType.h"
#include "uci/type/AirfieldRunwayType.h"
#include "uci/type/CrashServiceEnum.h"
#include "uci/type/EmptyType.h"
#include "uci/type/PressureType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See the annotation in the associated message airfield informational data. */
class AirfieldInformationType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new AirfieldInformationType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AirfieldInformationType.
    */
  static UCI_EXPORT AirfieldInformationType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new AirfieldInformationType initializing the data accessed by the new
    * AirfieldInformationType using the data accessed by the specified AirfieldInformationType (cloning).
    *
    * @param accessor The AirfieldInformationType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created AirfieldInformationType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AirfieldInformationType.
    */
  static UCI_EXPORT AirfieldInformationType& create(const AirfieldInformationType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified AirfieldInformationType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The AirfieldInformationType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(AirfieldInformationType& accessor);

  /** Returns this accessor's type constant, i.e. airfieldInformationType.
    *
    * @return This accessor's type constant, i.e. airfieldInformationType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::airfieldInformationType;
  }

  /** Returns the version that was initialized from the uci:version attribute of AirfieldInformationType.
    *
    * @return The version that was initialized from the uci:version attribute of AirfieldInformationType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AirfieldInformationType& accessor) = 0;

  /** Contains details of one specific runway. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::AirfieldRunwayType, uci::type::accessorType::airfieldRunwayType> Runway;

  /** Returns a const reference to the accessor that provides access to the string identified by ICAO_Code.
    *
    * @return A const reference to the accessor that provides access to the string identified by ICAO_Code.
    */
  virtual const uci::type::AirfieldID_ICAO_StringType& getICAO_Code() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ICAO_Code.
    *
    * @return A reference to the accessor that provides access to the string identified by ICAO_Code.
    */
  virtual uci::type::AirfieldID_ICAO_StringType& getICAO_Code() = 0;

  /** Sets the string identified by ICAO_Code to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ICAO_Code.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setICAO_Code(const uci::type::AirfieldID_ICAO_StringType& value) = 0;

  /** Sets the string identified by ICAO_Code to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setICAO_Code(const std::string& value) = 0;

  /** Sets the string identified by ICAO_Code to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setICAO_Code(const char* value) = 0;

  /** Returns whether the Element identified by ICAO_Code exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ICAO_Code is enabled or not.
    */
  virtual bool hasICAO_Code() const = 0;

  /** Enables the Element identified by ICAO_Code.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ICAO_Code.
    */
  virtual uci::type::AirfieldID_ICAO_StringType& enableICAO_Code(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ICAO_Code.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& clearICAO_Code() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Operational.
    *
    * @return A const reference to the accessor that provides access to the string identified by Operational.
    */
  virtual const uci::type::EmptyType& getOperational() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Operational.
    *
    * @return A reference to the accessor that provides access to the string identified by Operational.
    */
  virtual uci::type::EmptyType& getOperational() = 0;

  /** Sets the string identified by Operational to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Operational.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setOperational(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by Operational to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setOperational(const std::string& value) = 0;

  /** Sets the string identified by Operational to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setOperational(const char* value) = 0;

  /** Returns whether the Element identified by Operational exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Operational is enabled or not.
    */
  virtual bool hasOperational() const = 0;

  /** Enables the Element identified by Operational.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Operational.
    */
  virtual uci::type::EmptyType& enableOperational(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Operational.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& clearOperational() = 0;

  /** Returns a const reference to the value of the enumeration identified by AirRaidState.
    *
    * @return A const reference to the value of the enumeration identified by AirRaidState.
    */
  virtual const uci::type::AirRaidStateEnum& getAirRaidState() const = 0;

  /** Returns a reference to the value of the enumeration identified by AirRaidState.
    *
    * @return A reference to the value of the enumeration identified by AirRaidState.
    */
  virtual uci::type::AirRaidStateEnum& getAirRaidState() = 0;

  /** Sets the value of the enumeration identified by AirRaidState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setAirRaidState(const uci::type::AirRaidStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by AirRaidState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setAirRaidState(uci::type::AirRaidStateEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by AirRaidState exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AirRaidState is enabled or not.
    */
  virtual bool hasAirRaidState() const = 0;

  /** Enables the Element identified by AirRaidState.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by AirRaidState.
    */
  virtual uci::type::AirRaidStateEnum& enableAirRaidState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AirRaidState.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& clearAirRaidState() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Contamination.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Contamination.
    */
  virtual const uci::type::AirfieldContaminationType& getContamination() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Contamination.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Contamination.
    */
  virtual uci::type::AirfieldContaminationType& getContamination() = 0;

  /** Sets the complex content identified by Contamination to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Contamination.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setContamination(const uci::type::AirfieldContaminationType& value) = 0;

  /** Returns whether the Element identified by Contamination exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Contamination is enabled or not.
    */
  virtual bool hasContamination() const = 0;

  /** Enables the Element identified by Contamination.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Contamination.
    */
  virtual uci::type::AirfieldContaminationType& enableContamination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Contamination.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& clearContamination() = 0;

  /** Returns a const reference to the value of the enumeration identified by CrashService.
    *
    * @return A const reference to the value of the enumeration identified by CrashService.
    */
  virtual const uci::type::CrashServiceEnum& getCrashService() const = 0;

  /** Returns a reference to the value of the enumeration identified by CrashService.
    *
    * @return A reference to the value of the enumeration identified by CrashService.
    */
  virtual uci::type::CrashServiceEnum& getCrashService() = 0;

  /** Sets the value of the enumeration identified by CrashService.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setCrashService(const uci::type::CrashServiceEnum& value) = 0;

  /** Sets the value of the enumeration identified by CrashService.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setCrashService(uci::type::CrashServiceEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by CrashService exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CrashService is enabled or not.
    */
  virtual bool hasCrashService() const = 0;

  /** Enables the Element identified by CrashService.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by CrashService.
    */
  virtual uci::type::CrashServiceEnum& enableCrashService(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CrashService.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& clearCrashService() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by SHORADEZ_Active.
    *
    * @return A const reference to the accessor that provides access to the string identified by SHORADEZ_Active.
    */
  virtual const uci::type::EmptyType& getSHORADEZ_Active() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by SHORADEZ_Active.
    *
    * @return A reference to the accessor that provides access to the string identified by SHORADEZ_Active.
    */
  virtual uci::type::EmptyType& getSHORADEZ_Active() = 0;

  /** Sets the string identified by SHORADEZ_Active to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by SHORADEZ_Active.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setSHORADEZ_Active(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by SHORADEZ_Active to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setSHORADEZ_Active(const std::string& value) = 0;

  /** Sets the string identified by SHORADEZ_Active to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setSHORADEZ_Active(const char* value) = 0;

  /** Returns whether the Element identified by SHORADEZ_Active exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SHORADEZ_Active is enabled or not.
    */
  virtual bool hasSHORADEZ_Active() const = 0;

  /** Enables the Element identified by SHORADEZ_Active.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by SHORADEZ_Active.
    */
  virtual uci::type::EmptyType& enableSHORADEZ_Active(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SHORADEZ_Active.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& clearSHORADEZ_Active() = 0;

  /** Returns a const reference to the bounded list identified by Runway.
    *
    * @return A const reference to the bounded list identified by Runway.
    */
  virtual const uci::type::AirfieldInformationType::Runway& getRunway() const = 0;

  /** Returns a reference to the bounded list identified by Runway.
    *
    * @return A reference to the bounded list identified by Runway.
    */
  virtual uci::type::AirfieldInformationType::Runway& getRunway() = 0;

  /** Sets the bounded list identified by Runway.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setRunway(const uci::type::AirfieldInformationType::Runway& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by QNH_Setting.
    *
    * @return The value of the simple primitive data type identified by QNH_Setting.
    */
  virtual uci::type::PressureTypeValue getQNH_Setting() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by QNH_Setting.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& setQNH_Setting(uci::type::PressureTypeValue value) = 0;

  /** Returns whether the Element identified by QNH_Setting exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by QNH_Setting is enabled or not.
    */
  virtual bool hasQNH_Setting() const = 0;

  /** Clears (disabled) the Element identified by QNH_Setting.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldInformationType& clearQNH_Setting() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AirfieldInformationType() {
  }

  /** The destructor [only available to derived classes]. */
  ~AirfieldInformationType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AirfieldInformationType to copy from.
    */
  AirfieldInformationType(const AirfieldInformationType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AirfieldInformationType to the contents of the
    * AirfieldInformationType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The AirfieldInformationType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this AirfieldInformationType.
    * @return A reference to this AirfieldInformationType.
    */
  AirfieldInformationType& operator=(const AirfieldInformationType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_AIRFIELDINFORMATIONTYPE_H

