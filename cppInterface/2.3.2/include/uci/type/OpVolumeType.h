/** @file OpVolumeType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OPVOLUMETYPE_H
#define UCI_TYPE_OPVOLUMETYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/GeocentricVolumeType.h"
#include "uci/type/GeometricVolumeType.h"
#include "uci/type/OrbitAltitudeEnum.h"
#include "uci/type/OrbitQualitativeEnum.h"
#include "uci/type/OrbitRegimeType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** An operational volume comprises a three dimensional region of space. */
class OpVolumeType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OpVolumeType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OpVolumeType.
    */
  static UCI_EXPORT OpVolumeType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OpVolumeType initializing the data accessed by the new OpVolumeType using the data
    * accessed by the specified OpVolumeType (cloning).
    *
    * @param accessor The OpVolumeType that provides access to the data that is to be used to initialize the data accessed
    *      by the new created OpVolumeType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OpVolumeType.
    */
  static UCI_EXPORT OpVolumeType& create(const OpVolumeType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OpVolumeType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The OpVolumeType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OpVolumeType& accessor);

  /** Returns this accessor's type constant, i.e. opVolumeType.
    *
    * @return This accessor's type constant, i.e. opVolumeType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::opVolumeType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OpVolumeType.
    *
    * @return The version that was initialized from the uci:version attribute of OpVolumeType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OpVolumeType& accessor) = 0;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum OpVolumeTypeChoice {
    OPVOLUMETYPE_CHOICE_NONE,
    OPVOLUMETYPE_CHOICE_GEOMETRICVOLUME,
    OPVOLUMETYPE_CHOICE_GEOCENTRICVOLUME,
    OPVOLUMETYPE_CHOICE_ORBITREGIME,
    OPVOLUMETYPE_CHOICE_ORBITALTITUDE,
    OPVOLUMETYPE_CHOICE_QUALITATIVE
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual OpVolumeTypeChoice getOpVolumeTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getOpVolumeTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the access
    * methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpVolumeType& setOpVolumeTypeChoiceOrdinal(OpVolumeTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by GeometricVolume.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by GeometricVolume.
    */
  virtual const uci::type::GeometricVolumeType& getGeometricVolume() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by GeometricVolume.
    *
    * @return A reference to the accessor that provides access to the complex content identified by GeometricVolume.
    */
  virtual uci::type::GeometricVolumeType& getGeometricVolume() = 0;

  /** Sets the complex content identified by GeometricVolume to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GeometricVolume.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpVolumeType& setGeometricVolume(const uci::type::GeometricVolumeType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by GeometricVolume.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by GeometricVolume, false
    *      otherwise.
    */
  virtual bool isGeometricVolume() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by GeometricVolume.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by GeometricVolume.
    */
  virtual uci::type::GeometricVolumeType& chooseGeometricVolume(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by GeocentricVolume.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by GeocentricVolume.
    */
  virtual const uci::type::GeocentricVolumeType& getGeocentricVolume() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by GeocentricVolume.
    *
    * @return A reference to the accessor that provides access to the complex content identified by GeocentricVolume.
    */
  virtual uci::type::GeocentricVolumeType& getGeocentricVolume() = 0;

  /** Sets the complex content identified by GeocentricVolume to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GeocentricVolume.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpVolumeType& setGeocentricVolume(const uci::type::GeocentricVolumeType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by GeocentricVolume.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by GeocentricVolume, false
    *      otherwise.
    */
  virtual bool isGeocentricVolume() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by GeocentricVolume.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by GeocentricVolume.
    */
  virtual uci::type::GeocentricVolumeType& chooseGeocentricVolume(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OrbitRegime.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OrbitRegime.
    */
  virtual const uci::type::OrbitRegimeType& getOrbitRegime() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitRegime.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitRegime.
    */
  virtual uci::type::OrbitRegimeType& getOrbitRegime() = 0;

  /** Sets the complex content identified by OrbitRegime to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitRegime.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpVolumeType& setOrbitRegime(const uci::type::OrbitRegimeType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OrbitRegime.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OrbitRegime, false otherwise.
    */
  virtual bool isOrbitRegime() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitRegime.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitRegime.
    */
  virtual uci::type::OrbitRegimeType& chooseOrbitRegime(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the value of the enumeration identified by OrbitAltitude.
    *
    * @return A const reference to the value of the enumeration identified by OrbitAltitude.
    */
  virtual const uci::type::OrbitAltitudeEnum& getOrbitAltitude() const = 0;

  /** Returns a reference to the value of the enumeration identified by OrbitAltitude.
    *
    * @return A reference to the value of the enumeration identified by OrbitAltitude.
    */
  virtual uci::type::OrbitAltitudeEnum& getOrbitAltitude() = 0;

  /** Sets the value of the enumeration identified by OrbitAltitude.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpVolumeType& setOrbitAltitude(const uci::type::OrbitAltitudeEnum& value) = 0;

  /** Sets the value of the enumeration identified by OrbitAltitude.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpVolumeType& setOrbitAltitude(uci::type::OrbitAltitudeEnum::EnumerationItem value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OrbitAltitude.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OrbitAltitude, false otherwise.
    */
  virtual bool isOrbitAltitude() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitAltitude.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitAltitude.
    */
  virtual uci::type::OrbitAltitudeEnum& chooseOrbitAltitude(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the value of the enumeration identified by Qualitative.
    *
    * @return A const reference to the value of the enumeration identified by Qualitative.
    */
  virtual const uci::type::OrbitQualitativeEnum& getQualitative() const = 0;

  /** Returns a reference to the value of the enumeration identified by Qualitative.
    *
    * @return A reference to the value of the enumeration identified by Qualitative.
    */
  virtual uci::type::OrbitQualitativeEnum& getQualitative() = 0;

  /** Sets the value of the enumeration identified by Qualitative.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpVolumeType& setQualitative(const uci::type::OrbitQualitativeEnum& value) = 0;

  /** Sets the value of the enumeration identified by Qualitative.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpVolumeType& setQualitative(uci::type::OrbitQualitativeEnum::EnumerationItem value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Qualitative.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Qualitative, false otherwise.
    */
  virtual bool isQualitative() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Qualitative.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Qualitative.
    */
  virtual uci::type::OrbitQualitativeEnum& chooseQualitative(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OpVolumeType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OpVolumeType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OpVolumeType to copy from.
    */
  OpVolumeType(const OpVolumeType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OpVolumeType to the contents of the OpVolumeType on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OpVolumeType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this OpVolumeType.
    * @return A reference to this OpVolumeType.
    */
  OpVolumeType& operator=(const OpVolumeType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_OPVOLUMETYPE_H

