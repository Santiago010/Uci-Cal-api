/** @file PlatformStatusType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLATFORMSTATUSTYPE_H
#define UCI_TYPE_PLATFORMSTATUSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/DatalinkControlType.h"
#include "uci/type/PlatformFunctionStatusType.h"
#include "uci/type/PlatformStatusSAM_Type.h"
#include "uci/type/SurfaceRecoveryType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PlatformStatusType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PlatformStatusType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlatformStatusType.
    */
  static UCI_EXPORT PlatformStatusType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlatformStatusType initializing the data accessed by the new PlatformStatusType using
    * the data accessed by the specified PlatformStatusType (cloning).
    *
    * @param accessor The PlatformStatusType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PlatformStatusType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlatformStatusType.
    */
  static UCI_EXPORT PlatformStatusType& create(const PlatformStatusType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlatformStatusType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The PlatformStatusType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlatformStatusType& accessor);

  /** Returns this accessor's type constant, i.e. platformStatusType.
    *
    * @return This accessor's type constant, i.e. platformStatusType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::platformStatusType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlatformStatusType.
    *
    * @return The version that was initialized from the uci:version attribute of PlatformStatusType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlatformStatusType& accessor) = 0;

  /** Not a substitute for Capability and CapabilityStatus, this field allows for high level platform SA rollup. The data
    * in this filed will always be superseded by Capability and CapabilityStatus. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PlatformFunctionStatusType, uci::type::accessorType::platformFunctionStatusType> FunctionStatus;

  /** Indicates the state of Data link control of this unit. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::DatalinkControlType, uci::type::accessorType::datalinkControlType> DatalinkControlStatus;

  /** Returns the value of the SimplePrimitive data type identified by BailoutIndicator.
    *
    * @return The value of the simple primitive data type identified by BailoutIndicator.
    */
  virtual xs::Boolean getBailoutIndicator() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by BailoutIndicator.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusType& setBailoutIndicator(xs::Boolean value) = 0;

  /** Returns whether the Element identified by BailoutIndicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BailoutIndicator is enabled or not.
    */
  virtual bool hasBailoutIndicator() const = 0;

  /** Clears (disabled) the Element identified by BailoutIndicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusType& clearBailoutIndicator() = 0;

  /** Returns the value of the SimplePrimitive data type identified by CommandAndControlIndicator.
    *
    * @return The value of the simple primitive data type identified by CommandAndControlIndicator.
    */
  virtual xs::Boolean getCommandAndControlIndicator() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CommandAndControlIndicator.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusType& setCommandAndControlIndicator(xs::Boolean value) = 0;

  /** Returns whether the Element identified by CommandAndControlIndicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CommandAndControlIndicator is enabled or not.
    */
  virtual bool hasCommandAndControlIndicator() const = 0;

  /** Clears (disabled) the Element identified by CommandAndControlIndicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusType& clearCommandAndControlIndicator() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EmergencyIndicator.
    *
    * @return The value of the simple primitive data type identified by EmergencyIndicator.
    */
  virtual xs::Boolean getEmergencyIndicator() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EmergencyIndicator.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusType& setEmergencyIndicator(xs::Boolean value) = 0;

  /** Returns whether the Element identified by EmergencyIndicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EmergencyIndicator is enabled or not.
    */
  virtual bool hasEmergencyIndicator() const = 0;

  /** Clears (disabled) the Element identified by EmergencyIndicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusType& clearEmergencyIndicator() = 0;

  /** Returns a const reference to the bounded list identified by FunctionStatus.
    *
    * @return A const reference to the bounded list identified by FunctionStatus.
    */
  virtual const uci::type::PlatformStatusType::FunctionStatus& getFunctionStatus() const = 0;

  /** Returns a reference to the bounded list identified by FunctionStatus.
    *
    * @return A reference to the bounded list identified by FunctionStatus.
    */
  virtual uci::type::PlatformStatusType::FunctionStatus& getFunctionStatus() = 0;

  /** Sets the bounded list identified by FunctionStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusType& setFunctionStatus(const uci::type::PlatformStatusType::FunctionStatus& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SAM_Status.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SAM_Status.
    */
  virtual const uci::type::PlatformStatusSAM_Type& getSAM_Status() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SAM_Status.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SAM_Status.
    */
  virtual uci::type::PlatformStatusSAM_Type& getSAM_Status() = 0;

  /** Sets the complex content identified by SAM_Status to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SAM_Status.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusType& setSAM_Status(const uci::type::PlatformStatusSAM_Type& value) = 0;

  /** Returns whether the Element identified by SAM_Status exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SAM_Status is enabled or not.
    */
  virtual bool hasSAM_Status() const = 0;

  /** Enables the Element identified by SAM_Status.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SAM_Status.
    */
  virtual uci::type::PlatformStatusSAM_Type& enableSAM_Status(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SAM_Status.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusType& clearSAM_Status() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SurfaceRecovery.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SurfaceRecovery.
    */
  virtual const uci::type::SurfaceRecoveryType& getSurfaceRecovery() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SurfaceRecovery.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SurfaceRecovery.
    */
  virtual uci::type::SurfaceRecoveryType& getSurfaceRecovery() = 0;

  /** Sets the complex content identified by SurfaceRecovery to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SurfaceRecovery.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusType& setSurfaceRecovery(const uci::type::SurfaceRecoveryType& value) = 0;

  /** Returns whether the Element identified by SurfaceRecovery exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SurfaceRecovery is enabled or not.
    */
  virtual bool hasSurfaceRecovery() const = 0;

  /** Enables the Element identified by SurfaceRecovery.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SurfaceRecovery.
    */
  virtual uci::type::SurfaceRecoveryType& enableSurfaceRecovery(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SurfaceRecovery.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusType& clearSurfaceRecovery() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SurfaceStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SurfaceStatus.
    */
  virtual const uci::type::SurfaceRecoveryType& getSurfaceStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SurfaceStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SurfaceStatus.
    */
  virtual uci::type::SurfaceRecoveryType& getSurfaceStatus() = 0;

  /** Sets the complex content identified by SurfaceStatus to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SurfaceStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusType& setSurfaceStatus(const uci::type::SurfaceRecoveryType& value) = 0;

  /** Returns whether the Element identified by SurfaceStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SurfaceStatus is enabled or not.
    */
  virtual bool hasSurfaceStatus() const = 0;

  /** Enables the Element identified by SurfaceStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SurfaceStatus.
    */
  virtual uci::type::SurfaceRecoveryType& enableSurfaceStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SurfaceStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusType& clearSurfaceStatus() = 0;

  /** Returns a const reference to the bounded list identified by DatalinkControlStatus.
    *
    * @return A const reference to the bounded list identified by DatalinkControlStatus.
    */
  virtual const uci::type::PlatformStatusType::DatalinkControlStatus& getDatalinkControlStatus() const = 0;

  /** Returns a reference to the bounded list identified by DatalinkControlStatus.
    *
    * @return A reference to the bounded list identified by DatalinkControlStatus.
    */
  virtual uci::type::PlatformStatusType::DatalinkControlStatus& getDatalinkControlStatus() = 0;

  /** Sets the bounded list identified by DatalinkControlStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusType& setDatalinkControlStatus(const uci::type::PlatformStatusType::DatalinkControlStatus& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlatformStatusType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlatformStatusType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlatformStatusType to copy from.
    */
  PlatformStatusType(const PlatformStatusType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlatformStatusType to the contents of the PlatformStatusType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PlatformStatusType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this PlatformStatusType.
    * @return A reference to this PlatformStatusType.
    */
  PlatformStatusType& operator=(const PlatformStatusType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLATFORMSTATUSTYPE_H

