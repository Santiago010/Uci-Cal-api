/** @file EffectMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_EFFECTMDT_H
#define UCI_TYPE_EFFECTMDT_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/EffectID_Type.h"
#include "uci/type/EffectTypeEnum.h"
#include "uci/type/IdentityKindInstanceType.h"
#include "uci/type/RequirementConstraintsType.h"
#include "uci/type/RequirementGuidanceType.h"
#include "uci/type/RequirementMetadataType.h"
#include "uci/type/RequirementTargetConstraintsType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class EffectMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new EffectMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EffectMDT.
    */
  static UCI_EXPORT EffectMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new EffectMDT initializing the data accessed by the new EffectMDT using the data accessed by
    * the specified EffectMDT (cloning).
    *
    * @param accessor The EffectMDT that provides access to the data that is to be used to initialize the data accessed by
    *      the new created EffectMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EffectMDT.
    */
  static UCI_EXPORT EffectMDT& create(const EffectMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified EffectMDT. Use of the specified accessor after it has been destroyed will result
    * in undefined behavior.
    *
    * @param accessor The EffectMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(EffectMDT& accessor);

  /** Returns this accessor's type constant, i.e. effectMDT.
    *
    * @return This accessor's type constant, i.e. effectMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::effectMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of EffectMDT.
    *
    * @return The version that was initialized from the uci:version attribute of EffectMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const EffectMDT& accessor) = 0;

  /** Indicates the target of the Effect; the object the Effect will be done to or for. If omitted, the Effect places no
    * explicit limitation on which TargetObject it can be done to. See sibling EffectType element annotation for an overall
    * description of Effect structure. Note that the term "target" is used in a general sense. For some Requirement types,
    * a more suitable term might be "subject", "point", "location", etc. For example, the "target" of a SUPPORT Effect
    * could be a blue/friendly System. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::IdentityKindInstanceType, uci::type::accessorType::identityKindInstanceType> TargetObject;

  /** Indicates a thing the sibling TargetObject must act on/against/toward to make the Effect applicable. See sibling
    * EffectType element annotation for an overall description of Effect structure. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::IdentityKindInstanceType, uci::type::accessorType::identityKindInstanceType> SecondaryObject;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EffectID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EffectID.
    */
  virtual const uci::type::EffectID_Type& getEffectID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EffectID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EffectID.
    */
  virtual uci::type::EffectID_Type& getEffectID() = 0;

  /** Sets the complex content identified by EffectID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EffectID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EffectMDT& setEffectID(const uci::type::EffectID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by EffectType.
    *
    * @return A const reference to the value of the enumeration identified by EffectType.
    */
  virtual const uci::type::EffectTypeEnum& getEffectType() const = 0;

  /** Returns a reference to the value of the enumeration identified by EffectType.
    *
    * @return A reference to the value of the enumeration identified by EffectType.
    */
  virtual uci::type::EffectTypeEnum& getEffectType() = 0;

  /** Sets the value of the enumeration identified by EffectType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EffectMDT& setEffectType(const uci::type::EffectTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by EffectType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EffectMDT& setEffectType(uci::type::EffectTypeEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * EffectConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      EffectConstraints.
    */
  virtual const uci::type::RequirementConstraintsType& getEffectConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EffectConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EffectConstraints.
    */
  virtual uci::type::RequirementConstraintsType& getEffectConstraints() = 0;

  /** Sets the complex content identified by EffectConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EffectConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EffectMDT& setEffectConstraints(const uci::type::RequirementConstraintsType& value) = 0;

  /** Returns whether the Element identified by EffectConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EffectConstraints is enabled or not.
    */
  virtual bool hasEffectConstraints() const = 0;

  /** Enables the Element identified by EffectConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EffectConstraints.
    */
  virtual uci::type::RequirementConstraintsType& enableEffectConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EffectConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EffectMDT& clearEffectConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EffectGuidance.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EffectGuidance.
    */
  virtual const uci::type::RequirementGuidanceType& getEffectGuidance() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EffectGuidance.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EffectGuidance.
    */
  virtual uci::type::RequirementGuidanceType& getEffectGuidance() = 0;

  /** Sets the complex content identified by EffectGuidance to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EffectGuidance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EffectMDT& setEffectGuidance(const uci::type::RequirementGuidanceType& value) = 0;

  /** Returns whether the Element identified by EffectGuidance exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EffectGuidance is enabled or not.
    */
  virtual bool hasEffectGuidance() const = 0;

  /** Enables the Element identified by EffectGuidance.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EffectGuidance.
    */
  virtual uci::type::RequirementGuidanceType& enableEffectGuidance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EffectGuidance.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EffectMDT& clearEffectGuidance() = 0;

  /** Returns a const reference to the bounded list identified by TargetObject.
    *
    * @return A const reference to the bounded list identified by TargetObject.
    */
  virtual const uci::type::EffectMDT::TargetObject& getTargetObject() const = 0;

  /** Returns a reference to the bounded list identified by TargetObject.
    *
    * @return A reference to the bounded list identified by TargetObject.
    */
  virtual uci::type::EffectMDT::TargetObject& getTargetObject() = 0;

  /** Sets the bounded list identified by TargetObject.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EffectMDT& setTargetObject(const uci::type::EffectMDT::TargetObject& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * TargetObjectConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      TargetObjectConstraints.
    */
  virtual const uci::type::RequirementTargetConstraintsType& getTargetObjectConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * TargetObjectConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      TargetObjectConstraints.
    */
  virtual uci::type::RequirementTargetConstraintsType& getTargetObjectConstraints() = 0;

  /** Sets the complex content identified by TargetObjectConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TargetObjectConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EffectMDT& setTargetObjectConstraints(const uci::type::RequirementTargetConstraintsType& value) = 0;

  /** Returns whether the Element identified by TargetObjectConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TargetObjectConstraints is enabled or not.
    */
  virtual bool hasTargetObjectConstraints() const = 0;

  /** Enables the Element identified by TargetObjectConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      TargetObjectConstraints.
    */
  virtual uci::type::RequirementTargetConstraintsType& enableTargetObjectConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TargetObjectConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EffectMDT& clearTargetObjectConstraints() = 0;

  /** Returns a const reference to the bounded list identified by SecondaryObject.
    *
    * @return A const reference to the bounded list identified by SecondaryObject.
    */
  virtual const uci::type::EffectMDT::SecondaryObject& getSecondaryObject() const = 0;

  /** Returns a reference to the bounded list identified by SecondaryObject.
    *
    * @return A reference to the bounded list identified by SecondaryObject.
    */
  virtual uci::type::EffectMDT::SecondaryObject& getSecondaryObject() = 0;

  /** Sets the bounded list identified by SecondaryObject.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EffectMDT& setSecondaryObject(const uci::type::EffectMDT::SecondaryObject& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Metadata.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Metadata.
    */
  virtual const uci::type::RequirementMetadataType& getMetadata() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Metadata.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Metadata.
    */
  virtual uci::type::RequirementMetadataType& getMetadata() = 0;

  /** Sets the complex content identified by Metadata to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Metadata.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EffectMDT& setMetadata(const uci::type::RequirementMetadataType& value) = 0;

  /** Returns whether the Element identified by Metadata exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Metadata is enabled or not.
    */
  virtual bool hasMetadata() const = 0;

  /** Enables the Element identified by Metadata.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Metadata.
    */
  virtual uci::type::RequirementMetadataType& enableMetadata(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Metadata.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EffectMDT& clearMetadata() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  EffectMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~EffectMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The EffectMDT to copy from.
    */
  EffectMDT(const EffectMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this EffectMDT to the contents of the EffectMDT on the right hand side
    * (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The EffectMDT on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this EffectMDT.
    * @return A reference to this EffectMDT.
    */
  EffectMDT& operator=(const EffectMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_EFFECTMDT_H

