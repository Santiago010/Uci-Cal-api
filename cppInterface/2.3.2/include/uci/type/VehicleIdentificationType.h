/** @file VehicleIdentificationType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_VEHICLEIDENTIFICATIONTYPE_H
#define UCI_TYPE_VEHICLEIDENTIFICATIONTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CallSignType.h"
#include "uci/type/DataLinkIdentifierPET.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/IFF_Type.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/VehicleUniqueIdentifierType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class VehicleIdentificationType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new VehicleIdentificationType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed VehicleIdentificationType.
    */
  static UCI_EXPORT VehicleIdentificationType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new VehicleIdentificationType initializing the data accessed by the new
    * VehicleIdentificationType using the data accessed by the specified VehicleIdentificationType (cloning).
    *
    * @param accessor The VehicleIdentificationType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created VehicleIdentificationType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed VehicleIdentificationType.
    */
  static UCI_EXPORT VehicleIdentificationType& create(const VehicleIdentificationType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified VehicleIdentificationType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The VehicleIdentificationType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(VehicleIdentificationType& accessor);

  /** Returns this accessor's type constant, i.e. vehicleIdentificationType.
    *
    * @return This accessor's type constant, i.e. vehicleIdentificationType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::vehicleIdentificationType;
  }

  /** Returns the version that was initialized from the uci:version attribute of VehicleIdentificationType.
    *
    * @return The version that was initialized from the uci:version attribute of VehicleIdentificationType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.001.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const VehicleIdentificationType& accessor) = 0;

  /** Indicates a call sign for the asset. Multiple call signs are allowed for different communications systems, registries
    * or other reasons. The use of ForeignKeyType is an indication that call signs aren't universally defined and come from
    * multiple systems/sources but they are expected to be unique within the context of their source. The child Key element
    * indicates the call sign itself while the child SystemName element indicates the system that assigned it and ensures
    * it is unique. Call signs from ubiquitous systems/sources such as AIS are given in sibling elements and shouldn't be
    * repeated here. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CallSignType, uci::type::accessorType::callSignType> CallSign;

  /** The specific Radar Cross Section identification for this system. This will typically be a system-specific and
    * service-specific identifier for pre-configured Radar Cross Sectional data. Services should have coordinated this data
    * ahead of time. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType> RadarCrossSection;

  /** List of data link ID. Multiple data link IDs can be reported for the same network type. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::DataLinkIdentifierPET, uci::type::accessorType::dataLinkIdentifierPET> DataLinkIdentifier;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual const uci::type::SystemID_Type& getSystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual uci::type::SystemID_Type& getSystemID() = 0;

  /** Sets the complex content identified by SystemID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleIdentificationType& setSystemID(const uci::type::SystemID_Type& value) = 0;

  /** Returns whether the Element identified by SystemID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SystemID is enabled or not.
    */
  virtual bool hasSystemID() const = 0;

  /** Enables the Element identified by SystemID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual uci::type::SystemID_Type& enableSystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SystemID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleIdentificationType& clearSystemID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * VehicleUniqueIdentifier.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      VehicleUniqueIdentifier.
    */
  virtual const uci::type::VehicleUniqueIdentifierType& getVehicleUniqueIdentifier() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * VehicleUniqueIdentifier.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      VehicleUniqueIdentifier.
    */
  virtual uci::type::VehicleUniqueIdentifierType& getVehicleUniqueIdentifier() = 0;

  /** Sets the complex content identified by VehicleUniqueIdentifier to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by VehicleUniqueIdentifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleIdentificationType& setVehicleUniqueIdentifier(const uci::type::VehicleUniqueIdentifierType& value) = 0;

  /** Returns whether the Element identified by VehicleUniqueIdentifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VehicleUniqueIdentifier is enabled or not.
    */
  virtual bool hasVehicleUniqueIdentifier() const = 0;

  /** Enables the Element identified by VehicleUniqueIdentifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      VehicleUniqueIdentifier.
    */
  virtual uci::type::VehicleUniqueIdentifierType& enableVehicleUniqueIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VehicleUniqueIdentifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleIdentificationType& clearVehicleUniqueIdentifier() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by IFF.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by IFF.
    */
  virtual const uci::type::IFF_Type& getIFF() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by IFF.
    *
    * @return A reference to the accessor that provides access to the complex content identified by IFF.
    */
  virtual uci::type::IFF_Type& getIFF() = 0;

  /** Sets the complex content identified by IFF to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by IFF.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleIdentificationType& setIFF(const uci::type::IFF_Type& value) = 0;

  /** Returns whether the Element identified by IFF exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IFF is enabled or not.
    */
  virtual bool hasIFF() const = 0;

  /** Enables the Element identified by IFF.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by IFF.
    */
  virtual uci::type::IFF_Type& enableIFF(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by IFF.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleIdentificationType& clearIFF() = 0;

  /** Returns a const reference to the bounded list identified by CallSign.
    *
    * @return A const reference to the bounded list identified by CallSign.
    */
  virtual const uci::type::VehicleIdentificationType::CallSign& getCallSign() const = 0;

  /** Returns a reference to the bounded list identified by CallSign.
    *
    * @return A reference to the bounded list identified by CallSign.
    */
  virtual uci::type::VehicleIdentificationType::CallSign& getCallSign() = 0;

  /** Sets the bounded list identified by CallSign.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleIdentificationType& setCallSign(const uci::type::VehicleIdentificationType::CallSign& value) = 0;

  /** Returns a const reference to the bounded list identified by RadarCrossSection.
    *
    * @return A const reference to the bounded list identified by RadarCrossSection.
    */
  virtual const uci::type::VehicleIdentificationType::RadarCrossSection& getRadarCrossSection() const = 0;

  /** Returns a reference to the bounded list identified by RadarCrossSection.
    *
    * @return A reference to the bounded list identified by RadarCrossSection.
    */
  virtual uci::type::VehicleIdentificationType::RadarCrossSection& getRadarCrossSection() = 0;

  /** Sets the bounded list identified by RadarCrossSection.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleIdentificationType& setRadarCrossSection(const uci::type::VehicleIdentificationType::RadarCrossSection& value) = 0;

  /** Returns a const reference to the bounded list identified by DataLinkIdentifier.
    *
    * @return A const reference to the bounded list identified by DataLinkIdentifier.
    */
  virtual const uci::type::VehicleIdentificationType::DataLinkIdentifier& getDataLinkIdentifier() const = 0;

  /** Returns a reference to the bounded list identified by DataLinkIdentifier.
    *
    * @return A reference to the bounded list identified by DataLinkIdentifier.
    */
  virtual uci::type::VehicleIdentificationType::DataLinkIdentifier& getDataLinkIdentifier() = 0;

  /** Sets the bounded list identified by DataLinkIdentifier.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::VehicleIdentificationType& setDataLinkIdentifier(const uci::type::VehicleIdentificationType::DataLinkIdentifier& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  VehicleIdentificationType() {
  }

  /** The destructor [only available to derived classes]. */
  ~VehicleIdentificationType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The VehicleIdentificationType to copy from.
    */
  VehicleIdentificationType(const VehicleIdentificationType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this VehicleIdentificationType to the contents of the
    * VehicleIdentificationType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The VehicleIdentificationType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this VehicleIdentificationType.
    * @return A reference to this VehicleIdentificationType.
    */
  VehicleIdentificationType& operator=(const VehicleIdentificationType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_VEHICLEIDENTIFICATIONTYPE_H

