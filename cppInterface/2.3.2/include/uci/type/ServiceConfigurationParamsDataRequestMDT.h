/** @file ServiceConfigurationParamsDataRequestMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SERVICECONFIGURATIONPARAMSDATAREQUESTMDT_H
#define UCI_TYPE_SERVICECONFIGURATIONPARAMSDATAREQUESTMDT_H

#include "../base/BooleanAccessor.h"
#include "../base/export.h"
#include "RequestBaseType.h"
#include "ServiceID_Type.h"
#include "SystemID_Type.h"
#include "VisibleString32Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ServiceConfigurationParamsDataRequestMDT : public virtual RequestBaseType {
public:

  /** This method constructs a new ServiceConfigurationParamsDataRequestMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ServiceConfigurationParamsDataRequestMDT.
    */
  static UCI_EXPORT ServiceConfigurationParamsDataRequestMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ServiceConfigurationParamsDataRequestMDT initializing the data accessed by the new
    * ServiceConfigurationParamsDataRequestMDT using the data accessed by the specified
    * ServiceConfigurationParamsDataRequestMDT (cloning).
    *
    * @param accessor The ServiceConfigurationParamsDataRequestMDT that provides access to the data that is to be used to
    *      initialize the data accessed by the new created ServiceConfigurationParamsDataRequestMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ServiceConfigurationParamsDataRequestMDT.
    */
  static UCI_EXPORT ServiceConfigurationParamsDataRequestMDT& create(const ServiceConfigurationParamsDataRequestMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ServiceConfigurationParamsDataRequestMDT. Use of the specified accessor after it
    * has been destroyed will result in undefined behavior.
    *
    * @param accessor The ServiceConfigurationParamsDataRequestMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ServiceConfigurationParamsDataRequestMDT& accessor);

  /** Returns this accessor's type constant, i.e. serviceConfigurationParamsDataRequestMDT.
    *
    * @return This accessor's type constant, i.e. serviceConfigurationParamsDataRequestMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::serviceConfigurationParamsDataRequestMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of ServiceConfigurationParamsDataRequestMDT.
    *
    * @return The version that was initialized from the uci:version attribute of ServiceConfigurationParamsDataRequestMDT.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ServiceConfigurationParamsDataRequestMDT& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ResultsInNativeMessage.
    *
    * @return The value of the simple primitive data type identified by ResultsInNativeMessage.
    */
  virtual xs::Boolean getResultsInNativeMessage() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ResultsInNativeMessage.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ServiceConfigurationParamsDataRequestMDT& setResultsInNativeMessage(xs::Boolean value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual const uci::type::SystemID_Type& getSystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual uci::type::SystemID_Type& getSystemID() = 0;

  /** Sets the complex content identified by SystemID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ServiceConfigurationParamsDataRequestMDT& setSystemID(const uci::type::SystemID_Type& value) = 0;

  /** Returns whether the Element identified by SystemID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SystemID is enabled or not.
    */
  virtual bool hasSystemID() const = 0;

  /** Enables the Element identified by SystemID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual uci::type::SystemID_Type& enableSystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SystemID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ServiceConfigurationParamsDataRequestMDT& clearSystemID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ServiceID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ServiceID.
    */
  virtual const uci::type::ServiceID_Type& getServiceID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ServiceID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ServiceID.
    */
  virtual uci::type::ServiceID_Type& getServiceID() = 0;

  /** Sets the complex content identified by ServiceID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ServiceID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ServiceConfigurationParamsDataRequestMDT& setServiceID(const uci::type::ServiceID_Type& value) = 0;

  /** Returns whether the Element identified by ServiceID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ServiceID is enabled or not.
    */
  virtual bool hasServiceID() const = 0;

  /** Enables the Element identified by ServiceID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ServiceID.
    */
  virtual uci::type::ServiceID_Type& enableServiceID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ServiceID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ServiceConfigurationParamsDataRequestMDT& clearServiceID() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Category.
    *
    * @return A const reference to the accessor that provides access to the string identified by Category.
    */
  virtual const uci::type::VisibleString32Type& getCategory() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Category.
    *
    * @return A reference to the accessor that provides access to the string identified by Category.
    */
  virtual uci::type::VisibleString32Type& getCategory() = 0;

  /** Sets the string identified by Category to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Category.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ServiceConfigurationParamsDataRequestMDT& setCategory(const uci::type::VisibleString32Type& value) = 0;

  /** Sets the string identified by Category to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ServiceConfigurationParamsDataRequestMDT& setCategory(const std::string& value) = 0;

  /** Sets the string identified by Category to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ServiceConfigurationParamsDataRequestMDT& setCategory(const char* value) = 0;

  /** Returns whether the Element identified by Category exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Category is enabled or not.
    */
  virtual bool hasCategory() const = 0;

  /** Enables the Element identified by Category.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Category.
    */
  virtual uci::type::VisibleString32Type& enableCategory(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Category.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ServiceConfigurationParamsDataRequestMDT& clearCategory() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ServiceConfigurationParamsDataRequestMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~ServiceConfigurationParamsDataRequestMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ServiceConfigurationParamsDataRequestMDT to copy from.
    */
  ServiceConfigurationParamsDataRequestMDT(const ServiceConfigurationParamsDataRequestMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ServiceConfigurationParamsDataRequestMDT to the contents of the
    * ServiceConfigurationParamsDataRequestMDT on the right hand side (rhs) of the assignment operator [only available to
    * derived classes].
    *
    * @param rhs The ServiceConfigurationParamsDataRequestMDT on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this ServiceConfigurationParamsDataRequestMDT.
    * @return A reference to this ServiceConfigurationParamsDataRequestMDT.
    */
  ServiceConfigurationParamsDataRequestMDT& operator=(const ServiceConfigurationParamsDataRequestMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SERVICECONFIGURATIONPARAMSDATAREQUESTMDT_H

