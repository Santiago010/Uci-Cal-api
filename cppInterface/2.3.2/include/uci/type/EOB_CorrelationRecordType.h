/** @file EOB_CorrelationRecordType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_EOB_CORRELATIONRECORDTYPE_H
#define UCI_TYPE_EOB_CORRELATIONRECORDTYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "DateTimeType.h"
#include "EOB_CorrelatedToType.h"
#include "EOB_CorrelationRecordID_Type.h"
#include "EOB_CorrelationTypeEnum.h"
#include "EOB_SignalType.h"
#include "FixedPositionType.h"
#include "IdentityConfidenceType.h"
#include "KinematicsFixedType.h"
#include "NotationType.h"
#include "OB_CorrelationInputType.h"
#include "SecurityInformationType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This represents results of previous attempts to correlate SignalReports, Entities or other inputs to the EOB. */
class EOB_CorrelationRecordType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new EOB_CorrelationRecordType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EOB_CorrelationRecordType.
    */
  static UCI_EXPORT EOB_CorrelationRecordType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new EOB_CorrelationRecordType initializing the data accessed by the new
    * EOB_CorrelationRecordType using the data accessed by the specified EOB_CorrelationRecordType (cloning).
    *
    * @param accessor The EOB_CorrelationRecordType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created EOB_CorrelationRecordType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EOB_CorrelationRecordType.
    */
  static UCI_EXPORT EOB_CorrelationRecordType& create(const EOB_CorrelationRecordType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified EOB_CorrelationRecordType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The EOB_CorrelationRecordType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(EOB_CorrelationRecordType& accessor);

  /** Returns this accessor's type constant, i.e. eOB_CorrelationRecordType.
    *
    * @return This accessor's type constant, i.e. eOB_CorrelationRecordType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::eOB_CorrelationRecordType;
  }

  /** Returns the version that was initialized from the uci:version attribute of EOB_CorrelationRecordType.
    *
    * @return The version that was initialized from the uci:version attribute of EOB_CorrelationRecordType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const EOB_CorrelationRecordType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SecurityInformation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SecurityInformation.
    */
  virtual const uci::type::SecurityInformationType& getSecurityInformation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SecurityInformation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SecurityInformation.
    */
  virtual uci::type::SecurityInformationType& getSecurityInformation() = 0;

  /** Sets the complex content identified by SecurityInformation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SecurityInformation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setSecurityInformation(const uci::type::SecurityInformationType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * EOB_CorrelationRecordID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      EOB_CorrelationRecordID.
    */
  virtual const uci::type::EOB_CorrelationRecordID_Type& getEOB_CorrelationRecordID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * EOB_CorrelationRecordID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      EOB_CorrelationRecordID.
    */
  virtual uci::type::EOB_CorrelationRecordID_Type& getEOB_CorrelationRecordID() = 0;

  /** Sets the complex content identified by EOB_CorrelationRecordID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EOB_CorrelationRecordID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setEOB_CorrelationRecordID(const uci::type::EOB_CorrelationRecordID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by CorrelationType.
    *
    * @return A const reference to the value of the enumeration identified by CorrelationType.
    */
  virtual const uci::type::EOB_CorrelationTypeEnum& getCorrelationType() const = 0;

  /** Returns a reference to the value of the enumeration identified by CorrelationType.
    *
    * @return A reference to the value of the enumeration identified by CorrelationType.
    */
  virtual uci::type::EOB_CorrelationTypeEnum& getCorrelationType() = 0;

  /** Sets the value of the enumeration identified by CorrelationType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setCorrelationType(const uci::type::EOB_CorrelationTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by CorrelationType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setCorrelationType(uci::type::EOB_CorrelationTypeEnum::EnumerationItem value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by CorrelationTimestamp.
    *
    * @return The value of the simple primitive data type identified by CorrelationTimestamp.
    */
  virtual uci::type::DateTimeTypeValue getCorrelationTimestamp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CorrelationTimestamp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setCorrelationTimestamp(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CorrelatedTo.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CorrelatedTo.
    */
  virtual const uci::type::EOB_CorrelatedToType& getCorrelatedTo() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CorrelatedTo.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CorrelatedTo.
    */
  virtual uci::type::EOB_CorrelatedToType& getCorrelatedTo() = 0;

  /** Sets the complex content identified by CorrelatedTo to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CorrelatedTo.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setCorrelatedTo(const uci::type::EOB_CorrelatedToType& value) = 0;

  /** Returns whether the Element identified by CorrelatedTo exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CorrelatedTo is enabled or not.
    */
  virtual bool hasCorrelatedTo() const = 0;

  /** Enables the Element identified by CorrelatedTo.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CorrelatedTo.
    */
  virtual uci::type::EOB_CorrelatedToType& enableCorrelatedTo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CorrelatedTo.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& clearCorrelatedTo() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CorrelationInput.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CorrelationInput.
    */
  virtual const uci::type::OB_CorrelationInputType& getCorrelationInput() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CorrelationInput.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CorrelationInput.
    */
  virtual uci::type::OB_CorrelationInputType& getCorrelationInput() = 0;

  /** Sets the complex content identified by CorrelationInput to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CorrelationInput.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setCorrelationInput(const uci::type::OB_CorrelationInputType& value) = 0;

  /** Returns whether the Element identified by CorrelationInput exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CorrelationInput is enabled or not.
    */
  virtual bool hasCorrelationInput() const = 0;

  /** Enables the Element identified by CorrelationInput.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CorrelationInput.
    */
  virtual uci::type::OB_CorrelationInputType& enableCorrelationInput(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CorrelationInput.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& clearCorrelationInput() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Signal.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Signal.
    */
  virtual const uci::type::EOB_SignalType& getSignal() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Signal.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Signal.
    */
  virtual uci::type::EOB_SignalType& getSignal() = 0;

  /** Sets the complex content identified by Signal to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Signal.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setSignal(const uci::type::EOB_SignalType& value) = 0;

  /** Returns whether the Element identified by Signal exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Signal is enabled or not.
    */
  virtual bool hasSignal() const = 0;

  /** Enables the Element identified by Signal.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Signal.
    */
  virtual uci::type::EOB_SignalType& enableSignal(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Signal.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& clearSignal() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual const uci::type::IdentityConfidenceType& getIdentity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::IdentityConfidenceType& getIdentity() = 0;

  /** Sets the complex content identified by Identity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Identity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setIdentity(const uci::type::IdentityConfidenceType& value) = 0;

  /** Returns whether the Element identified by Identity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Identity is enabled or not.
    */
  virtual bool hasIdentity() const = 0;

  /** Enables the Element identified by Identity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::IdentityConfidenceType& enableIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Identity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& clearIdentity() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ReportedNotation2.
    *
    * @return A const reference to the accessor that provides access to the string identified by ReportedNotation2.
    */
  virtual const uci::type::NotationType& getReportedNotation2() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ReportedNotation2.
    *
    * @return A reference to the accessor that provides access to the string identified by ReportedNotation2.
    */
  virtual uci::type::NotationType& getReportedNotation2() = 0;

  /** Sets the string identified by ReportedNotation2 to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ReportedNotation2.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setReportedNotation2(const uci::type::NotationType& value) = 0;

  /** Sets the string identified by ReportedNotation2 to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setReportedNotation2(const std::string& value) = 0;

  /** Sets the string identified by ReportedNotation2 to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setReportedNotation2(const char* value) = 0;

  /** Returns whether the Element identified by ReportedNotation2 exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReportedNotation2 is enabled or not.
    */
  virtual bool hasReportedNotation2() const = 0;

  /** Enables the Element identified by ReportedNotation2.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ReportedNotation2.
    */
  virtual uci::type::NotationType& enableReportedNotation2(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReportedNotation2.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& clearReportedNotation2() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ReportedNotation1.
    *
    * @return A const reference to the accessor that provides access to the string identified by ReportedNotation1.
    */
  virtual const uci::type::NotationType& getReportedNotation1() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ReportedNotation1.
    *
    * @return A reference to the accessor that provides access to the string identified by ReportedNotation1.
    */
  virtual uci::type::NotationType& getReportedNotation1() = 0;

  /** Sets the string identified by ReportedNotation1 to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ReportedNotation1.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setReportedNotation1(const uci::type::NotationType& value) = 0;

  /** Sets the string identified by ReportedNotation1 to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setReportedNotation1(const std::string& value) = 0;

  /** Sets the string identified by ReportedNotation1 to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setReportedNotation1(const char* value) = 0;

  /** Returns whether the Element identified by ReportedNotation1 exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReportedNotation1 is enabled or not.
    */
  virtual bool hasReportedNotation1() const = 0;

  /** Enables the Element identified by ReportedNotation1.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ReportedNotation1.
    */
  virtual uci::type::NotationType& enableReportedNotation1(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReportedNotation1.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& clearReportedNotation1() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual const uci::type::FixedPositionType& getPosition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual uci::type::FixedPositionType& getPosition() = 0;

  /** Sets the complex content identified by Position to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Position.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setPosition(const uci::type::FixedPositionType& value) = 0;

  /** Returns whether the Element identified by Position exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Position is enabled or not.
    */
  virtual bool hasPosition() const = 0;

  /** Enables the Element identified by Position.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual uci::type::FixedPositionType& enablePosition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Position.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& clearPosition() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * PlatformKinematics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      PlatformKinematics.
    */
  virtual const uci::type::KinematicsFixedType& getPlatformKinematics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PlatformKinematics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PlatformKinematics.
    */
  virtual uci::type::KinematicsFixedType& getPlatformKinematics() = 0;

  /** Sets the complex content identified by PlatformKinematics to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PlatformKinematics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& setPlatformKinematics(const uci::type::KinematicsFixedType& value) = 0;

  /** Returns whether the Element identified by PlatformKinematics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PlatformKinematics is enabled or not.
    */
  virtual bool hasPlatformKinematics() const = 0;

  /** Enables the Element identified by PlatformKinematics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PlatformKinematics.
    */
  virtual uci::type::KinematicsFixedType& enablePlatformKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PlatformKinematics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_CorrelationRecordType& clearPlatformKinematics() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  EOB_CorrelationRecordType() {
  }

  /** The destructor [only available to derived classes]. */
  ~EOB_CorrelationRecordType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The EOB_CorrelationRecordType to copy from.
    */
  EOB_CorrelationRecordType(const EOB_CorrelationRecordType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this EOB_CorrelationRecordType to the contents of the
    * EOB_CorrelationRecordType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The EOB_CorrelationRecordType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this EOB_CorrelationRecordType.
    * @return A reference to this EOB_CorrelationRecordType.
    */
  EOB_CorrelationRecordType& operator=(const EOB_CorrelationRecordType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_EOB_CORRELATIONRECORDTYPE_H

