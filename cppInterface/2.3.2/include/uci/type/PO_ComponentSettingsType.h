/** @file PO_ComponentSettingsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_COMPONENTSETTINGSTYPE_H
#define UCI_TYPE_PO_COMPONENTSETTINGSTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ComponentID_Type.h"
#include "PO_ComponentApertureSettingsType.h"
#include "PO_ComponentSettingsFilterType.h"
#include "PO_ComponentSettingsFocalPlaneArrayType.h"
#include "PO_ComponentSettingsLensAssemblyType.h"
#include "PO_ComponentSettingsProcessingStageType.h"
#include "PO_ComponentSettingsProductGeneratorType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_ComponentSettingsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PO_ComponentSettingsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_ComponentSettingsType.
    */
  static UCI_EXPORT PO_ComponentSettingsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_ComponentSettingsType initializing the data accessed by the new
    * PO_ComponentSettingsType using the data accessed by the specified PO_ComponentSettingsType (cloning).
    *
    * @param accessor The PO_ComponentSettingsType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created PO_ComponentSettingsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_ComponentSettingsType.
    */
  static UCI_EXPORT PO_ComponentSettingsType& create(const PO_ComponentSettingsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_ComponentSettingsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The PO_ComponentSettingsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_ComponentSettingsType& accessor);

  /** Returns this accessor's type constant, i.e. pO_ComponentSettingsType.
    *
    * @return This accessor's type constant, i.e. pO_ComponentSettingsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_ComponentSettingsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PO_ComponentSettingsType.
    *
    * @return The version that was initialized from the uci:version attribute of PO_ComponentSettingsType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_ComponentSettingsType& accessor) = 0;

  /** One type of Passive Optical Subsystem Component is the Focal Plane Array (FPA). An FPA is an array (either linear or
    * grid) of collection elements that are used to collect photons emitted by some surface, e.g. the surface of the earth.
    * A Passive Optical sensor can have any number of FPAs. This field contains the current status of a focal plane array.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_ComponentSettingsFocalPlaneArrayType, uci::type::accessorType::pO_ComponentSettingsFocalPlaneArrayType> FocalPlaneArray;

  /** One type of Passive Optical Subsystem Component is the optical lens assembly. This assembly is used to concentrate
    * the photons entering the Passive Optical sensor's optical pathway onto the sensor's various Focal Plane Arrays
    * (FPAs). [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_ComponentSettingsLensAssemblyType, uci::type::accessorType::pO_ComponentSettingsLensAssemblyType> Lens;

  /** Indicates a space through which light passes in an optical or photographic instrument, especially the variable
    * opening by which light enters a camera. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_ComponentApertureSettingsType, uci::type::accessorType::pO_ComponentApertureSettingsType> Aperture;

  /** One type of Passive Optical Subsystem Component is the optical filter. A filter is placed within the Passive Optical
    * sensor's optical pathway and stops photons of a certain frequency (possibly of all frequencies) from passing through
    * the filter on their way to the sensor's various Focal Plane Arrays (FPAs). [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_ComponentSettingsFilterType, uci::type::accessorType::pO_ComponentSettingsFilterType> Filter;

  /** Passive Optical sensors generally support a processing engine that takes the raw data collected from the Focal Plane
    * Arrays (FPAs) and processes that data in various way in order to produce an image product or products. Such engines
    * can be viewed as pipelines in which each stage in the pipeline takes the imagery data produced by one or more stages
    * earlier in the pipeline, processes that data in some fashion, and then sends the updated imagery data to the one of
    * more stages further down the pipeline. This field specifies the stages that are available in this sensor's processing
    * pipeline and whether the stage can be manually configured. This field is used to set the configuration of this
    * processing stage. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_ComponentSettingsProcessingStageType, uci::type::accessorType::pO_ComponentSettingsProcessingStageType> ProcessingStage;

  /** Passive Optical sensors have the capability of producing one or more products using the raw optical data collected by
    * their focal plane arrays. This field is used to set the current configuration and setting used by this product
    * generator to produce products. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_ComponentSettingsProductGeneratorType, uci::type::accessorType::pO_ComponentSettingsProductGeneratorType> ProductGenerator;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ComponentID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ComponentID.
    */
  virtual const uci::type::ComponentID_Type& getComponentID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ComponentID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ComponentID.
    */
  virtual uci::type::ComponentID_Type& getComponentID() = 0;

  /** Sets the complex content identified by ComponentID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ComponentID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsType& setComponentID(const uci::type::ComponentID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by FocalPlaneArray.
    *
    * @return A const reference to the bounded list identified by FocalPlaneArray.
    */
  virtual const uci::type::PO_ComponentSettingsType::FocalPlaneArray& getFocalPlaneArray() const = 0;

  /** Returns a reference to the bounded list identified by FocalPlaneArray.
    *
    * @return A reference to the bounded list identified by FocalPlaneArray.
    */
  virtual uci::type::PO_ComponentSettingsType::FocalPlaneArray& getFocalPlaneArray() = 0;

  /** Sets the bounded list identified by FocalPlaneArray.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsType& setFocalPlaneArray(const uci::type::PO_ComponentSettingsType::FocalPlaneArray& value) = 0;

  /** Returns a const reference to the bounded list identified by Lens.
    *
    * @return A const reference to the bounded list identified by Lens.
    */
  virtual const uci::type::PO_ComponentSettingsType::Lens& getLens() const = 0;

  /** Returns a reference to the bounded list identified by Lens.
    *
    * @return A reference to the bounded list identified by Lens.
    */
  virtual uci::type::PO_ComponentSettingsType::Lens& getLens() = 0;

  /** Sets the bounded list identified by Lens.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsType& setLens(const uci::type::PO_ComponentSettingsType::Lens& value) = 0;

  /** Returns a const reference to the bounded list identified by Aperture.
    *
    * @return A const reference to the bounded list identified by Aperture.
    */
  virtual const uci::type::PO_ComponentSettingsType::Aperture& getAperture() const = 0;

  /** Returns a reference to the bounded list identified by Aperture.
    *
    * @return A reference to the bounded list identified by Aperture.
    */
  virtual uci::type::PO_ComponentSettingsType::Aperture& getAperture() = 0;

  /** Sets the bounded list identified by Aperture.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsType& setAperture(const uci::type::PO_ComponentSettingsType::Aperture& value) = 0;

  /** Returns a const reference to the bounded list identified by Filter.
    *
    * @return A const reference to the bounded list identified by Filter.
    */
  virtual const uci::type::PO_ComponentSettingsType::Filter& getFilter() const = 0;

  /** Returns a reference to the bounded list identified by Filter.
    *
    * @return A reference to the bounded list identified by Filter.
    */
  virtual uci::type::PO_ComponentSettingsType::Filter& getFilter() = 0;

  /** Sets the bounded list identified by Filter.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsType& setFilter(const uci::type::PO_ComponentSettingsType::Filter& value) = 0;

  /** Returns a const reference to the bounded list identified by ProcessingStage.
    *
    * @return A const reference to the bounded list identified by ProcessingStage.
    */
  virtual const uci::type::PO_ComponentSettingsType::ProcessingStage& getProcessingStage() const = 0;

  /** Returns a reference to the bounded list identified by ProcessingStage.
    *
    * @return A reference to the bounded list identified by ProcessingStage.
    */
  virtual uci::type::PO_ComponentSettingsType::ProcessingStage& getProcessingStage() = 0;

  /** Sets the bounded list identified by ProcessingStage.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsType& setProcessingStage(const uci::type::PO_ComponentSettingsType::ProcessingStage& value) = 0;

  /** Returns a const reference to the bounded list identified by ProductGenerator.
    *
    * @return A const reference to the bounded list identified by ProductGenerator.
    */
  virtual const uci::type::PO_ComponentSettingsType::ProductGenerator& getProductGenerator() const = 0;

  /** Returns a reference to the bounded list identified by ProductGenerator.
    *
    * @return A reference to the bounded list identified by ProductGenerator.
    */
  virtual uci::type::PO_ComponentSettingsType::ProductGenerator& getProductGenerator() = 0;

  /** Sets the bounded list identified by ProductGenerator.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsType& setProductGenerator(const uci::type::PO_ComponentSettingsType::ProductGenerator& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_ComponentSettingsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_ComponentSettingsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_ComponentSettingsType to copy from.
    */
  PO_ComponentSettingsType(const PO_ComponentSettingsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_ComponentSettingsType to the contents of the
    * PO_ComponentSettingsType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PO_ComponentSettingsType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this PO_ComponentSettingsType.
    * @return A reference to this PO_ComponentSettingsType.
    */
  PO_ComponentSettingsType& operator=(const PO_ComponentSettingsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_COMPONENTSETTINGSTYPE_H

