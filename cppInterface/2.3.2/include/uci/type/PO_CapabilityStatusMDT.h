/** @file PO_CapabilityStatusMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_CAPABILITYSTATUSMDT_H
#define UCI_TYPE_PO_CAPABILITYSTATUSMDT_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CapabilityStatusBaseType.h"
#include "uci/type/FOR_Type.h"
#include "uci/type/PO_CapabilityStatusType.h"
#include "uci/type/PO_CollectionConstraintsStatusType.h"
#include "uci/type/PO_ComponentStatusType.h"
#include "uci/type/PO_MessageOutputsEnum.h"
#include "uci/type/PO_SubCapabilitySettingsType.h"
#include "uci/type/PO_TrackStatusType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_CapabilityStatusMDT : public virtual CapabilityStatusBaseType {
public:

  /** This method constructs a new PO_CapabilityStatusMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_CapabilityStatusMDT.
    */
  static UCI_EXPORT PO_CapabilityStatusMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_CapabilityStatusMDT initializing the data accessed by the new PO_CapabilityStatusMDT
    * using the data accessed by the specified PO_CapabilityStatusMDT (cloning).
    *
    * @param accessor The PO_CapabilityStatusMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PO_CapabilityStatusMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_CapabilityStatusMDT.
    */
  static UCI_EXPORT PO_CapabilityStatusMDT& create(const PO_CapabilityStatusMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_CapabilityStatusMDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The PO_CapabilityStatusMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_CapabilityStatusMDT& accessor);

  /** Returns this accessor's type constant, i.e. pO_CapabilityStatusMDT.
    *
    * @return This accessor's type constant, i.e. pO_CapabilityStatusMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_CapabilityStatusMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of PO_CapabilityStatusMDT.
    *
    * @return The version that was initialized from the uci:version attribute of PO_CapabilityStatusMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_CapabilityStatusMDT& accessor) = 0;

  /** Indicates the high level availability/state of a Capability instance. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::PO_CapabilityStatusType, uci::type::accessorType::pO_CapabilityStatusType> CapabilityStatus;

  /** Indicates the status settings associated with a subcapability as commanded in the settings command. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_SubCapabilitySettingsType, uci::type::accessorType::pO_SubCapabilitySettingsType> SubCapabilityStatus;

  /** Indicates the status of the track settings associated with a track option settings as commanded in the settings
    * command. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_TrackStatusType, uci::type::accessorType::pO_TrackStatusType> TrackStatus;

  /** The field specified the current status (and settings) of this component. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_ComponentStatusType, uci::type::accessorType::pO_ComponentStatusType> ComponentStatus;

  /** Specifies which messages are currently being output by the Capability. See enumerated type annotations for details.
    * List size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 4]
    */
  typedef uci::base::BoundedList<uci::type::PO_MessageOutputsEnum, uci::type::accessorType::pO_MessageOutputsEnum> CurrentMessageOutput;

  /** Returns a const reference to the bounded list identified by CapabilityStatus.
    *
    * @return A const reference to the bounded list identified by CapabilityStatus.
    */
  virtual const uci::type::PO_CapabilityStatusMDT::CapabilityStatus& getCapabilityStatus() const = 0;

  /** Returns a reference to the bounded list identified by CapabilityStatus.
    *
    * @return A reference to the bounded list identified by CapabilityStatus.
    */
  virtual uci::type::PO_CapabilityStatusMDT::CapabilityStatus& getCapabilityStatus() = 0;

  /** Sets the bounded list identified by CapabilityStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityStatusMDT& setCapabilityStatus(const uci::type::PO_CapabilityStatusMDT::CapabilityStatus& value) = 0;

  /** Returns a const reference to the bounded list identified by SubCapabilityStatus.
    *
    * @return A const reference to the bounded list identified by SubCapabilityStatus.
    */
  virtual const uci::type::PO_CapabilityStatusMDT::SubCapabilityStatus& getSubCapabilityStatus() const = 0;

  /** Returns a reference to the bounded list identified by SubCapabilityStatus.
    *
    * @return A reference to the bounded list identified by SubCapabilityStatus.
    */
  virtual uci::type::PO_CapabilityStatusMDT::SubCapabilityStatus& getSubCapabilityStatus() = 0;

  /** Sets the bounded list identified by SubCapabilityStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityStatusMDT& setSubCapabilityStatus(const uci::type::PO_CapabilityStatusMDT::SubCapabilityStatus& value) = 0;

  /** Returns a const reference to the bounded list identified by TrackStatus.
    *
    * @return A const reference to the bounded list identified by TrackStatus.
    */
  virtual const uci::type::PO_CapabilityStatusMDT::TrackStatus& getTrackStatus() const = 0;

  /** Returns a reference to the bounded list identified by TrackStatus.
    *
    * @return A reference to the bounded list identified by TrackStatus.
    */
  virtual uci::type::PO_CapabilityStatusMDT::TrackStatus& getTrackStatus() = 0;

  /** Sets the bounded list identified by TrackStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityStatusMDT& setTrackStatus(const uci::type::PO_CapabilityStatusMDT::TrackStatus& value) = 0;

  /** Returns a const reference to the bounded list identified by ComponentStatus.
    *
    * @return A const reference to the bounded list identified by ComponentStatus.
    */
  virtual const uci::type::PO_CapabilityStatusMDT::ComponentStatus& getComponentStatus() const = 0;

  /** Returns a reference to the bounded list identified by ComponentStatus.
    *
    * @return A reference to the bounded list identified by ComponentStatus.
    */
  virtual uci::type::PO_CapabilityStatusMDT::ComponentStatus& getComponentStatus() = 0;

  /** Sets the bounded list identified by ComponentStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityStatusMDT& setComponentStatus(const uci::type::PO_CapabilityStatusMDT::ComponentStatus& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CollectionConstraintsStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CollectionConstraintsStatus.
    */
  virtual const uci::type::PO_CollectionConstraintsStatusType& getCollectionConstraintsStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * CollectionConstraintsStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CollectionConstraintsStatus.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& getCollectionConstraintsStatus() = 0;

  /** Sets the complex content identified by CollectionConstraintsStatus to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionConstraintsStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityStatusMDT& setCollectionConstraintsStatus(const uci::type::PO_CollectionConstraintsStatusType& value) = 0;

  /** Returns whether the Element identified by CollectionConstraintsStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionConstraintsStatus is enabled or not.
    */
  virtual bool hasCollectionConstraintsStatus() const = 0;

  /** Enables the Element identified by CollectionConstraintsStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CollectionConstraintsStatus.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& enableCollectionConstraintsStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionConstraintsStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityStatusMDT& clearCollectionConstraintsStatus() = 0;

  /** Returns a const reference to the bounded list identified by CurrentMessageOutput.
    *
    * @return A const reference to the bounded list identified by CurrentMessageOutput.
    */
  virtual const uci::type::PO_CapabilityStatusMDT::CurrentMessageOutput& getCurrentMessageOutput() const = 0;

  /** Returns a reference to the bounded list identified by CurrentMessageOutput.
    *
    * @return A reference to the bounded list identified by CurrentMessageOutput.
    */
  virtual uci::type::PO_CapabilityStatusMDT::CurrentMessageOutput& getCurrentMessageOutput() = 0;

  /** Sets the bounded list identified by CurrentMessageOutput.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityStatusMDT& setCurrentMessageOutput(const uci::type::PO_CapabilityStatusMDT::CurrentMessageOutput& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CurrentFOR.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CurrentFOR.
    */
  virtual const uci::type::FOR_Type& getCurrentFOR() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CurrentFOR.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CurrentFOR.
    */
  virtual uci::type::FOR_Type& getCurrentFOR() = 0;

  /** Sets the complex content identified by CurrentFOR to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CurrentFOR.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityStatusMDT& setCurrentFOR(const uci::type::FOR_Type& value) = 0;

  /** Returns whether the Element identified by CurrentFOR exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CurrentFOR is enabled or not.
    */
  virtual bool hasCurrentFOR() const = 0;

  /** Enables the Element identified by CurrentFOR.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CurrentFOR.
    */
  virtual uci::type::FOR_Type& enableCurrentFOR(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CurrentFOR.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityStatusMDT& clearCurrentFOR() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CurrentThermalBlankingFOR.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CurrentThermalBlankingFOR.
    */
  virtual const uci::type::FOR_Type& getCurrentThermalBlankingFOR() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * CurrentThermalBlankingFOR.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CurrentThermalBlankingFOR.
    */
  virtual uci::type::FOR_Type& getCurrentThermalBlankingFOR() = 0;

  /** Sets the complex content identified by CurrentThermalBlankingFOR to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CurrentThermalBlankingFOR.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityStatusMDT& setCurrentThermalBlankingFOR(const uci::type::FOR_Type& value) = 0;

  /** Returns whether the Element identified by CurrentThermalBlankingFOR exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CurrentThermalBlankingFOR is enabled or not.
    */
  virtual bool hasCurrentThermalBlankingFOR() const = 0;

  /** Enables the Element identified by CurrentThermalBlankingFOR.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CurrentThermalBlankingFOR.
    */
  virtual uci::type::FOR_Type& enableCurrentThermalBlankingFOR(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CurrentThermalBlankingFOR.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityStatusMDT& clearCurrentThermalBlankingFOR() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_CapabilityStatusMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_CapabilityStatusMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_CapabilityStatusMDT to copy from.
    */
  PO_CapabilityStatusMDT(const PO_CapabilityStatusMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_CapabilityStatusMDT to the contents of the
    * PO_CapabilityStatusMDT on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PO_CapabilityStatusMDT on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this PO_CapabilityStatusMDT.
    * @return A reference to this PO_CapabilityStatusMDT.
    */
  PO_CapabilityStatusMDT& operator=(const PO_CapabilityStatusMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_CAPABILITYSTATUSMDT_H

