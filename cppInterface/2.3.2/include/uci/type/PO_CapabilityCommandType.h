/** @file PO_CapabilityCommandType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_CAPABILITYCOMMANDTYPE_H
#define UCI_TYPE_PO_CAPABILITYCOMMANDTYPE_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CapabilityCommandBaseType.h"
#include "uci/type/CollectionPolicyEnum.h"
#include "uci/type/PO_CollectionConstraintsSettingsType.h"
#include "uci/type/PO_ComponentSettingsType.h"
#include "uci/type/PO_ProductOutputCommandImageryType.h"
#include "uci/type/PO_SubCapabilitySettingsType.h"
#include "uci/type/PO_TargetType.h"
#include "uci/type/PO_TrackDetailsType.h"
#include "uci/type/PairIdentifierEnum.h"
#include "uci/type/RepetitionType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_CapabilityCommandType : public virtual CapabilityCommandBaseType {
public:

  /** This method constructs a new PO_CapabilityCommandType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_CapabilityCommandType.
    */
  static UCI_EXPORT PO_CapabilityCommandType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_CapabilityCommandType initializing the data accessed by the new
    * PO_CapabilityCommandType using the data accessed by the specified PO_CapabilityCommandType (cloning).
    *
    * @param accessor The PO_CapabilityCommandType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created PO_CapabilityCommandType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_CapabilityCommandType.
    */
  static UCI_EXPORT PO_CapabilityCommandType& create(const PO_CapabilityCommandType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_CapabilityCommandType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The PO_CapabilityCommandType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_CapabilityCommandType& accessor);

  /** Returns this accessor's type constant, i.e. pO_CapabilityCommandType.
    *
    * @return This accessor's type constant, i.e. pO_CapabilityCommandType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_CapabilityCommandType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PO_CapabilityCommandType.
    *
    * @return The version that was initialized from the uci:version attribute of PO_CapabilityCommandType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_CapabilityCommandType& accessor) = 0;

  /** Indicates the Capability's first tier type in the Passive Optical taxonomy. For PO, the first tier is an indication
    * of the collection technique PO spectrum. See enumerated type annotations for further details. Changes to a Subsystem
    * subcapability settings which associate to a specific capability will only apply to the activity associated with this
    * commanded condition. The default settings for the associated subcapability will remain unchanged. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_SubCapabilitySettingsType, uci::type::accessorType::pO_SubCapabilitySettingsType> SubCapability;

  /** Indicates override settings for Optical components to use for this command instead of the current/default settings.
    * Changes to a Subsystem component settings which associate to a specific capability will only apply to the activity
    * associated with this commanded condition. The default settings for the associated component will remain unchanged.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_ComponentSettingsType, uci::type::accessorType::pO_ComponentSettingsType> ComponentSettings;

  /** Indicates a required output Product of the Command. Only Products consistent with Passive Optical and supported by
    * the commanded Passive Optical Capability should be requested. If omitted, no output Product should be produced. See
    * ProductTypeEnum for further details. If the associated Capability supports product generators, this element should be
    * omitted and product output should be controlled via the sibling ComponentSettings element. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PO_ProductOutputCommandImageryType, uci::type::accessorType::pO_ProductOutputCommandImageryType> ProductOutput;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Pointing.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Pointing.
    */
  virtual const uci::type::PO_TargetType& getPointing() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Pointing.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Pointing.
    */
  virtual uci::type::PO_TargetType& getPointing() = 0;

  /** Sets the complex content identified by Pointing to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Pointing.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& setPointing(const uci::type::PO_TargetType& value) = 0;

  /** Returns whether the Element identified by Pointing exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Pointing is enabled or not.
    */
  virtual bool hasPointing() const = 0;

  /** Enables the Element identified by Pointing.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Pointing.
    */
  virtual uci::type::PO_TargetType& enablePointing(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Pointing.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& clearPointing() = 0;

  /** Returns a const reference to the bounded list identified by SubCapability.
    *
    * @return A const reference to the bounded list identified by SubCapability.
    */
  virtual const uci::type::PO_CapabilityCommandType::SubCapability& getSubCapability() const = 0;

  /** Returns a reference to the bounded list identified by SubCapability.
    *
    * @return A reference to the bounded list identified by SubCapability.
    */
  virtual uci::type::PO_CapabilityCommandType::SubCapability& getSubCapability() = 0;

  /** Sets the bounded list identified by SubCapability.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& setSubCapability(const uci::type::PO_CapabilityCommandType::SubCapability& value) = 0;

  /** Returns a const reference to the bounded list identified by ComponentSettings.
    *
    * @return A const reference to the bounded list identified by ComponentSettings.
    */
  virtual const uci::type::PO_CapabilityCommandType::ComponentSettings& getComponentSettings() const = 0;

  /** Returns a reference to the bounded list identified by ComponentSettings.
    *
    * @return A reference to the bounded list identified by ComponentSettings.
    */
  virtual uci::type::PO_CapabilityCommandType::ComponentSettings& getComponentSettings() = 0;

  /** Sets the bounded list identified by ComponentSettings.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& setComponentSettings(const uci::type::PO_CapabilityCommandType::ComponentSettings& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CollectionConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CollectionConstraints.
    */
  virtual const uci::type::PO_CollectionConstraintsSettingsType& getCollectionConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CollectionConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CollectionConstraints.
    */
  virtual uci::type::PO_CollectionConstraintsSettingsType& getCollectionConstraints() = 0;

  /** Sets the complex content identified by CollectionConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& setCollectionConstraints(const uci::type::PO_CollectionConstraintsSettingsType& value) = 0;

  /** Returns whether the Element identified by CollectionConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionConstraints is enabled or not.
    */
  virtual bool hasCollectionConstraints() const = 0;

  /** Enables the Element identified by CollectionConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CollectionConstraints.
    */
  virtual uci::type::PO_CollectionConstraintsSettingsType& enableCollectionConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& clearCollectionConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TrackDetails.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TrackDetails.
    */
  virtual const uci::type::PO_TrackDetailsType& getTrackDetails() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TrackDetails.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TrackDetails.
    */
  virtual uci::type::PO_TrackDetailsType& getTrackDetails() = 0;

  /** Sets the complex content identified by TrackDetails to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TrackDetails.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& setTrackDetails(const uci::type::PO_TrackDetailsType& value) = 0;

  /** Returns whether the Element identified by TrackDetails exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TrackDetails is enabled or not.
    */
  virtual bool hasTrackDetails() const = 0;

  /** Enables the Element identified by TrackDetails.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TrackDetails.
    */
  virtual uci::type::PO_TrackDetailsType& enableTrackDetails(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TrackDetails.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& clearTrackDetails() = 0;

  /** Returns a const reference to the value of the enumeration identified by CollectionPolicy.
    *
    * @return A const reference to the value of the enumeration identified by CollectionPolicy.
    */
  virtual const uci::type::CollectionPolicyEnum& getCollectionPolicy() const = 0;

  /** Returns a reference to the value of the enumeration identified by CollectionPolicy.
    *
    * @return A reference to the value of the enumeration identified by CollectionPolicy.
    */
  virtual uci::type::CollectionPolicyEnum& getCollectionPolicy() = 0;

  /** Sets the value of the enumeration identified by CollectionPolicy.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& setCollectionPolicy(const uci::type::CollectionPolicyEnum& value) = 0;

  /** Sets the value of the enumeration identified by CollectionPolicy.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& setCollectionPolicy(uci::type::CollectionPolicyEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by CollectionPolicy exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionPolicy is enabled or not.
    */
  virtual bool hasCollectionPolicy() const = 0;

  /** Enables the Element identified by CollectionPolicy.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by CollectionPolicy.
    */
  virtual uci::type::CollectionPolicyEnum& enableCollectionPolicy(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionPolicy.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& clearCollectionPolicy() = 0;

  /** Returns a const reference to the value of the enumeration identified by PairIdentifier.
    *
    * @return A const reference to the value of the enumeration identified by PairIdentifier.
    */
  virtual const uci::type::PairIdentifierEnum& getPairIdentifier() const = 0;

  /** Returns a reference to the value of the enumeration identified by PairIdentifier.
    *
    * @return A reference to the value of the enumeration identified by PairIdentifier.
    */
  virtual uci::type::PairIdentifierEnum& getPairIdentifier() = 0;

  /** Sets the value of the enumeration identified by PairIdentifier.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& setPairIdentifier(const uci::type::PairIdentifierEnum& value) = 0;

  /** Sets the value of the enumeration identified by PairIdentifier.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& setPairIdentifier(uci::type::PairIdentifierEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by PairIdentifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PairIdentifier is enabled or not.
    */
  virtual bool hasPairIdentifier() const = 0;

  /** Enables the Element identified by PairIdentifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by PairIdentifier.
    */
  virtual uci::type::PairIdentifierEnum& enablePairIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PairIdentifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& clearPairIdentifier() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual const uci::type::RepetitionType& getRepetition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& getRepetition() = 0;

  /** Sets the complex content identified by Repetition to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Repetition.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& setRepetition(const uci::type::RepetitionType& value) = 0;

  /** Returns whether the Element identified by Repetition exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Repetition is enabled or not.
    */
  virtual bool hasRepetition() const = 0;

  /** Enables the Element identified by Repetition.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& enableRepetition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Repetition.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& clearRepetition() = 0;

  /** Returns a const reference to the bounded list identified by ProductOutput.
    *
    * @return A const reference to the bounded list identified by ProductOutput.
    */
  virtual const uci::type::PO_CapabilityCommandType::ProductOutput& getProductOutput() const = 0;

  /** Returns a reference to the bounded list identified by ProductOutput.
    *
    * @return A reference to the bounded list identified by ProductOutput.
    */
  virtual uci::type::PO_CapabilityCommandType::ProductOutput& getProductOutput() = 0;

  /** Sets the bounded list identified by ProductOutput.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CapabilityCommandType& setProductOutput(const uci::type::PO_CapabilityCommandType::ProductOutput& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_CapabilityCommandType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_CapabilityCommandType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_CapabilityCommandType to copy from.
    */
  PO_CapabilityCommandType(const PO_CapabilityCommandType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_CapabilityCommandType to the contents of the
    * PO_CapabilityCommandType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PO_CapabilityCommandType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this PO_CapabilityCommandType.
    * @return A reference to this PO_CapabilityCommandType.
    */
  PO_CapabilityCommandType& operator=(const PO_CapabilityCommandType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_CAPABILITYCOMMANDTYPE_H

