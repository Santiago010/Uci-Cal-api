/** @file ProcessingTypeEnum.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:09 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PROCESSINGTYPEENUM_H
#define UCI_TYPE_PROCESSINGTYPEENUM_H

#include <map>
#include <sstream>

#include "uci/base/Accessor.h"
#include "uci/base/export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The actual type of processing that will occur on products to produce another product. */
class ProcessingTypeEnum : public virtual uci::base::Accessor {
public:

  /** The following are the enumerated items that comprise this enumeration */
  enum EnumerationItem {

    /** Enumerated item that indicates that the enumeration has not been set */
    enumNotSet,

    /** Wideband Complex MASINT Data. */
    UCI_WCMD,

    /** Wideband Complex Image Data (Not human viewable, used as input to CCD and 2CMV). */
    UCI_WCID,

    /** (Wideband Imagery Data) is a SAR collection product that has passed through all processing steps to become a viewable
      * image. This would be a jpg, tif, or other viewable image file. The product may be wrapped in a NITF file depending on
      * the sensor.
      */
    UCI_WBID,

    /** Inverse synthetic aperture radar. */
    UCI_INVERSE_SAR,

    /** Indicates a coherent change detection algorithm is applied. */
    UCI_COHERENT_CHANGE_DETECTION,

    /** Indicates processing which requires two parent products as input. These products should be as close to spatially
      * identical as possible. They do need to be different temporally, such as from yesterday and today. The usefulness of
      * this product is to show change over time.
      */
    UCI_TWO_COLOR_MULTI_VIEW,

    /** Indicates a dynamic imaging algorithm is applied. Dynamic imaging automates the creation of images by zooming,
      * panning, colorizing, and performing other image processing and color management operations.
      */
    UCI_DYNAMIC_IMAGE,

    /** Indicates an automatic target detection algorithm is applied. */
    UCI_AUTOMATIC_TARGET_DETECTION,

    /** Indicates an automatic target recognition algorithm is applied. */
    UCI_AUTOMATIC_TARGET_RECOGNITION,

    /** This enumerated item is used to identify the region of the electromagnetic spectrum that is visible to the human eye.
      * The visible spectrum is generally assumed to fall in the range of 390 nm (770 THz) to 700 nm (430 THz).
      */
    UCI_VISIBLE,

    /** This enumerated item is used to identify the region of the electromagnetic spectrum corresponding to invisible
      * radiant energy. The infrared spectrum is generally assumed to fall in the range from 0.8 um (short wave or near IR)
      * up to 1000 um (long wave or far infrared).
      */
    UCI_INFRARED,

    /** This enumerated item is used to specify the region of the electromagnetic spectrum that includes both the visible and
      * the infrared spectrum (see the VISIBLE_SPECTRUM and INFRARED_SPECTRUM enumerated items).
      */
    UCI_MULTISPECTRAL,

    /** This enumerated item is used to specify the region of the electromagnetic spectrum that includes both the visible and
      * the infrared spectrum that is captured as a hyperspectral image (see the VISIBLE_HYPERSPECTRAL _SPECTRUM and
      * INFRARED_HYPERSPECTRAL _SPECTRUM enumerated items).
      */
    UCI_HYPERSPECTRAL,

    /** Indicates a clip is taken from a longer stream. */
    UCI_CLIP,

    /** Indicates a still is taken from a video stream or larger still image. */
    UCI_STILL,

    /** Indicates an image georegistration algorithm is applied. Georegistration is the process of adjusting one drawing or
      * image to the geographic location of a reference drawing, image, surface, or map.
      */
    UCI_IMAGE_GEOREGISTRATION,

    /** Indicates an image pixel geolocation algorithm is applied. The algorithm identifies the geographic location of the
      * chosen pixel in the reference image.
      */
    UCI_IMAGE_PIXEL_GEOLOCATION,

    /** Automatic Man Made Object Detection (AMMOD); processing of multiple SAR images, using image amplitude to create a new
      * image with annotations or coloring that highlights man made objects.
      */
    UCI_MAN_MADE_OBJECT_DETECTION,

    /** Provides visual indication of areas having size and edge characteristics associated with man-made objects. */
    UCI_MAN_MADE_OBJECT_DETECTION_3,

    /** Change detection using only the magnitude of the RF return. */
    UCI_AMPLITUDE_CHANGE_DETECTION,

    /** Image generation that combines amplitude and phase change detection results. */
    UCI_ENHANCED_CHANGE_DETECTION,

    /** Processing of a SAR image to create a new image with MTI related indicators/tracks/Entities overlaid. */
    UCI_MTI_ON_SAR,

    /** Processing to combine multiple SAR images of the same location into a new more detailed image. */
    UCI_SAR_ON_SAR,

    /** Processing of MTI detections or an MTI stream to generate tracks/Entities over time. */
    UCI_MTI_TRACKS,

    /** Indicates a road detection algorithm is applied. */
    UCI_ROAD_DETECTION,

    /** Indicates an ocean ship detection algorithm is applied. */
    UCI_OCEAN_SHIP_DETECTION,

    /** Indicates a thermal detection algorithm is applied. */
    UCI_THERMAL_DETECTION,

    /** Indicates a cloud detection algorithm is applied. */
    UCI_CLOUD_DETECTION,

    /** Indicates processing of an imagery Product to add human readable annotations. This enumerate can be combined with
      * others to indicate an automated type of processing that created the annotations. Annotations could also be human
      * created.
      */
    UCI_ANNOTATED,

    /** Indicates an augmentation or manipulation of the product has been performed. The manipulation can occur to the
      * metadata or to the product itself and can represent addition, modification, enhancements, or redaction.
      */
    UCI_AUGMENTATION,

    /** Indicates an augmentation or manipulation of a Weather product to be performed. */
    UCI_WEATHER_AUGMENTATION,

    /** Indicates a form of processing is applied that does not appear in this list. */
    UCI_OTHER,

    /** Enumerated item that indicates maximum enumerated item exclusive of this item */
    enumMaxExclusive
  };

  /** Returns this accessor's type constant, i.e. processingTypeEnum.
    *
    * @return This accessor's type constant, i.e. processingTypeEnum.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::processingTypeEnum;
  }

  /** The assignment operator. Sets the contents of this ProcessingTypeEnum to the contents of the ProcessingTypeEnum on
    * the right hand side (rhs) of the assignment operator.
    *
    * @param rhs The ProcessingTypeEnum on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this ProcessingTypeEnum.
    * @return A reference to this ProcessingTypeEnum.
    */
  ProcessingTypeEnum& operator=(const ProcessingTypeEnum& rhs) {
    setValue(rhs.getValue());
    return *this;
  }

  /** The assignment operator that sets the value of this ProcessingTypeEnum enumeration to the EnumerationItem on the
    * right hand side of the assignment operator.
    *
    * @param rhs The EnumerationItem whose value is to be assigned to this ProcessingTypeEnum enumeration.
    * @return A reference to this ProcessingTypeEnum enumeration.
    */
  ProcessingTypeEnum& operator=(EnumerationItem rhs) {
    setValue(rhs);
    return *this;
  }

  /** Sets the value of this ProcessingTypeEnum enumeration to the value of the specified enumeration item.
    *
    * @param item The EnumerationItem whose value is to be used to set the value of this ProcessingTypeEnum enumeration.
    */
  virtual void setValue(EnumerationItem item) = 0;

  /** Returns the value of this ProcessingTypeEnum enumeration.
    *
    * @param testForValidity=true Specifies whether this ProcessingTypeEnum enumeration should be validated (true) or not
    *      (false) as part of retrieving its value.
    * @return The value of this ProcessingTypeEnum enumeration.
    */
  virtual EnumerationItem getValue(bool testForValidity=true) const = 0;

  /** Returns the number of items in this ProcessingTypeEnum enumeration.
    *
    * @return The number of items in this ProcessingTypeEnum enumeration.
    */
  int getNumberOfItems() const noexception {
    return 32;
  }

  /** Returns whether this ProcessingTypeEnum enumeration is valid or not. A ProcessingTypeEnum enumeration is valid if its
    * value is one of the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @return A flag indicating whether this ProcessingTypeEnum enumeration is valid (true) or not (false).
    */
  virtual bool isValid() const noexception {
    return isValid(getValue(false));
  }

  /** Returns whether the specified enumeration item is valid or not. A enumeration item is valid if its value is one of
    * the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @param item The EnumerationItem to test.
    * @return A flag indicating whether the specified EnumerationItem is valid (true) or not (false).
    */
  static bool isValid(EnumerationItem item) noexception {
    return (item > enumNotSet) && (item < enumMaxExclusive);
  }

  /** Returns whether the specified name item is valid or not. A name is valid if it is the name of one of the enumeration
    * items other than enumNotSet and enumMaxExclusive.
    *
    * @param name The name to test.
    * @return A flag indicating whether the specified name is valid (true) or not (false).
    */
  static bool isValid(const std::string& name) noexception {
    FromNameTable::const_iterator iter = m_fromNameTable.find(name);
    return !(iter == m_fromNameTable.end());
  }

  /** Tests whether the value of the ProcessingTypeEnum enumeration on the right hand side of the == operator is equal to
    * the value as this ProcessingTypeEnum enumeration.
    *
    * @param rhs The ProcessingTypeEnum enumeration whose value is to be compared against the value of this
    *      ProcessingTypeEnum enumeration.
    * @return True if the value of the specified ProcessingTypeEnum enumeration (rhs) is equal to the value of this
    *      ProcessingTypeEnum enumeration, false otherwise.
    */
  bool operator==(const ProcessingTypeEnum& rhs) const {
    return getValue() == rhs.getValue();
  }

  /** Tests whether the value of the ProcessingTypeEnum enumeration on the right hand side of the != operator is not equal
    * to the value as this ProcessingTypeEnum enumeration.
    *
    * @param rhs The ProcessingTypeEnum enumeration whose value is to be compared against the value of this
    *      ProcessingTypeEnum enumeration.
    * @return True if the value of the specified ProcessingTypeEnum enumeration (rhs) is not equal to the value of this
    *      ProcessingTypeEnum enumeration, false otherwise.
    */
  bool operator!=(const ProcessingTypeEnum& rhs) const {
    return getValue() != rhs.getValue();
  }

  /** Tests whether the value of the ProcessingTypeEnum enumeration on the right hand side of the < operator is less than
    * the value as this ProcessingTypeEnum enumeration.
    *
    * @param rhs The ProcessingTypeEnum enumeration whose value is to be compared against the value of this
    *      ProcessingTypeEnum enumeration.
    * @return True if the value of the specified ProcessingTypeEnum enumeration (rhs) is less than the value of this
    *      ProcessingTypeEnum enumeration, false otherwise.
    */
  bool operator<(const ProcessingTypeEnum& rhs) const {
    return getValue() < rhs.getValue();
  }

  /** Tests whether the value of the ProcessingTypeEnum enumeration on the right hand side of the <= operator is less than
    * or equal to the value as this ProcessingTypeEnum enumeration.
    *
    * @param rhs The ProcessingTypeEnum enumeration whose value is to be compared against the value of this
    *      ProcessingTypeEnum enumeration.
    * @return True if the value of the specified ProcessingTypeEnum enumeration (rhs) is less than or equal to the value of
    *      this ProcessingTypeEnum enumeration, false otherwise.
    */
  bool operator<=(const ProcessingTypeEnum& rhs) const {
    return getValue() <= rhs.getValue();
  }

  /** Tests whether the value of the ProcessingTypeEnum enumeration on the right hand side of the > operator is greater
    * than the value as this ProcessingTypeEnum enumeration.
    *
    * @param rhs The ProcessingTypeEnum enumeration whose value is to be compared against the value of this
    *      ProcessingTypeEnum enumeration.
    * @return True if the value of the specified ProcessingTypeEnum enumeration (rhs) is greater than the value of this
    *      ProcessingTypeEnum enumeration, false otherwise.
    */
  bool operator>(const ProcessingTypeEnum& rhs) const {
    return getValue() > rhs.getValue();
  }

  /** Tests whether the value of the ProcessingTypeEnum enumeration on the right hand side of the >= operator is greater
    * than or equal to the value as this ProcessingTypeEnum enumeration.
    *
    * @param rhs The ProcessingTypeEnum enumeration whose value is to be compared against the value of this
    *      ProcessingTypeEnum enumeration.
    * @return True if the value of the specified ProcessingTypeEnum enumeration (rhs) is greater than or equal to the value
    *      of this ProcessingTypeEnum enumeration, false otherwise.
    */
  bool operator>=(const ProcessingTypeEnum& rhs) const {
    return getValue() >= rhs.getValue();
  }

  /** Tests whether the value of this ProcessingTypeEnum enumeration is equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ProcessingTypeEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is equal to the value of this ProcessingTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator==(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() == rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is equal to the value of the specified ProcessingTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ProcessingTypeEnum
    *      enumeration.
    * @param rhs The ProcessingTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is equal to the value of the ProcessingTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator==(EnumerationItem lhs, const ProcessingTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs == rhs.getValue();
  }

  /** Tests whether the value of this ProcessingTypeEnum enumeration is not equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ProcessingTypeEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is not equal to the value of this ProcessingTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator!=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() != rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is not equal to the value of the specified
    * ProcessingTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ProcessingTypeEnum
    *      enumeration.
    * @param rhs The ProcessingTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is not equal to the value of the ProcessingTypeEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator!=(EnumerationItem lhs, const ProcessingTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs != rhs.getValue();
  }

  /** Tests whether the value of this ProcessingTypeEnum enumeration is less than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ProcessingTypeEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than the value of this ProcessingTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator<(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() < rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than the value of the specified ProcessingTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ProcessingTypeEnum
    *      enumeration.
    * @param rhs The ProcessingTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than the value of the ProcessingTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator<(EnumerationItem lhs, const ProcessingTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs < rhs.getValue();
  }

  /** Tests whether the value of this ProcessingTypeEnum enumeration is less than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ProcessingTypeEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than or equal to the value of this ProcessingTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator<=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() <= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than or equal to the value of the specified
    * ProcessingTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ProcessingTypeEnum
    *      enumeration.
    * @param rhs The ProcessingTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than or equal to the value of the ProcessingTypeEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator<=(EnumerationItem lhs, const ProcessingTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs <= rhs.getValue();
  }

  /** Tests whether the value of this ProcessingTypeEnum enumeration is greater than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ProcessingTypeEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than the value of this ProcessingTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator>(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() > rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than the value of the specified
    * ProcessingTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ProcessingTypeEnum
    *      enumeration.
    * @param rhs The ProcessingTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than the value of the ProcessingTypeEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator>(EnumerationItem lhs, const ProcessingTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs > rhs.getValue();
  }

  /** Tests whether the value of this ProcessingTypeEnum enumeration is greater than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ProcessingTypeEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than or equal to the value of this
    *      ProcessingTypeEnum enumeration, false otherwise.
    */
  bool operator>=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() >= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than or equal to the value of the specified
    * ProcessingTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ProcessingTypeEnum
    *      enumeration.
    * @param rhs The ProcessingTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than or equal to the value of the
    *      ProcessingTypeEnum enumeration (rhs), false otherwise.
    */
  friend bool operator>=(EnumerationItem lhs, const ProcessingTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs >= rhs.getValue();
  }

  /** Returns the name of the specified enumeration item.
    *
    * @param item The enumeration item whose name is to be returned.
    * @return The enumeration item's name if valid.
    */
  static std::string toName(EnumerationItem item) {
    ToNameTable::const_iterator iter = m_toNameTable.find(item);
    if (iter == m_toNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to convert enumerated item to its name, item not found in mapping: " << item;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Returns the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item to be returned.
    * @return The enumeration item having the specified name.
    */
  static EnumerationItem fromName(const std::string& itemName) {
    FromNameTable::const_iterator iter = m_fromNameTable.find(itemName);
    if (iter == m_fromNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to return enumerated item having specified name, name not found in mapping: " << itemName;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Return the name of the enumeration item that the value of this ProcessingTypeEnum enumeration is set to.
    *
    * @return The name of the enumeration item.
    */
  virtual std::string toName() const {
    return toName(getValue());
  }

  /** Sets the value of this ProcessingTypeEnum enumeration to the value of the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item whose value is to be used to set this ProcessingTypeEnum enumeration
    *      to.
    */
  virtual void setValueFromName(const std::string& itemName) {
    setValue(fromName(itemName));
  }

protected:

  /** The default constructor. In addition to constructing a new ProcessingTypeEnum, this constructor also makes sure the
    * conversion tables are initialized.
    */
  ProcessingTypeEnum() {
  }

  /** The destructor [only available to derived classes]. */
  ~ProcessingTypeEnum() {
  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param additionalDescription An additional description to include in the error message should an exception be thrown.
    * @param item The enumeration item to test.
    */
  static void testForValidItem(const char* additionalDescription, EnumerationItem item) {
    if (!isValid(item)) {
      std::ostringstream oStream;
      oStream << additionalDescription << ": " << item << " (item must be between " << enumNotSet << " and "<< enumMaxExclusive << " exclusive)";
      throw uci::base::UCIException(oStream.str(), 0);
    }

  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param item The enumeration item to test.
    */
  static void testForValidItem(EnumerationItem item) {
    testForValidItem("Invalid enumerated item specified", item);
  }

private:

  /** The type of table that is used to lookup the name of a enumeration item given that enumeration item. */
  typedef std::map<EnumerationItem, const std::string> ToNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  typedef std::map<const std::string, EnumerationItem> FromNameTable;

  /** The table that is used to lookup the name of a enumeration item given that enumeration item. */
  static UCI_EXPORT ToNameTable m_toNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  static UCI_EXPORT FromNameTable m_fromNameTable;

protected:

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ProcessingTypeEnum to copy from.
    */
  ProcessingTypeEnum(const ProcessingTypeEnum& rhs) {
    (void)rhs;
  }

};

} // namespace type
} // namespace uci

template<typename charT, typename traits>
std::basic_ostream<charT, traits>&
operator<<(std::basic_ostream<charT, traits>& oStream, const uci::type::ProcessingTypeEnum& enumeration)
{
  oStream << enumeration.toName();
  return oStream;
}

#endif // UCI_TYPE_PROCESSINGTYPEENUM_H

