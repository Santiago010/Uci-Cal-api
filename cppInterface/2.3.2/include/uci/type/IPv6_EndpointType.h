/** @file IPv6_EndpointType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_IPV6_ENDPOINTTYPE_H
#define UCI_TYPE_IPV6_ENDPOINTTYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "IPv6_AddressType.h"
#include "VisibleString1024Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates an IPv6 network endpoint and its related network information. */
class IPv6_EndpointType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new IPv6_EndpointType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IPv6_EndpointType.
    */
  static UCI_EXPORT IPv6_EndpointType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new IPv6_EndpointType initializing the data accessed by the new IPv6_EndpointType using the
    * data accessed by the specified IPv6_EndpointType (cloning).
    *
    * @param accessor The IPv6_EndpointType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created IPv6_EndpointType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IPv6_EndpointType.
    */
  static UCI_EXPORT IPv6_EndpointType& create(const IPv6_EndpointType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified IPv6_EndpointType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The IPv6_EndpointType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(IPv6_EndpointType& accessor);

  /** Returns this accessor's type constant, i.e. iPv6_EndpointType.
    *
    * @return This accessor's type constant, i.e. iPv6_EndpointType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::iPv6_EndpointType;
  }

  /** Returns the version that was initialized from the uci:version attribute of IPv6_EndpointType.
    *
    * @return The version that was initialized from the uci:version attribute of IPv6_EndpointType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const IPv6_EndpointType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by IP_Address.
    *
    * @return A const reference to the accessor that provides access to the string identified by IP_Address.
    */
  virtual const uci::type::IPv6_AddressType& getIP_Address() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by IP_Address.
    *
    * @return A reference to the accessor that provides access to the string identified by IP_Address.
    */
  virtual uci::type::IPv6_AddressType& getIP_Address() = 0;

  /** Sets the string identified by IP_Address to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by IP_Address.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_EndpointType& setIP_Address(const uci::type::IPv6_AddressType& value) = 0;

  /** Sets the string identified by IP_Address to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_EndpointType& setIP_Address(const std::string& value) = 0;

  /** Sets the string identified by IP_Address to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_EndpointType& setIP_Address(const char* value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by SubnetMask.
    *
    * @return A const reference to the accessor that provides access to the string identified by SubnetMask.
    */
  virtual const uci::type::IPv6_AddressType& getSubnetMask() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by SubnetMask.
    *
    * @return A reference to the accessor that provides access to the string identified by SubnetMask.
    */
  virtual uci::type::IPv6_AddressType& getSubnetMask() = 0;

  /** Sets the string identified by SubnetMask to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by SubnetMask.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_EndpointType& setSubnetMask(const uci::type::IPv6_AddressType& value) = 0;

  /** Sets the string identified by SubnetMask to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_EndpointType& setSubnetMask(const std::string& value) = 0;

  /** Sets the string identified by SubnetMask to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_EndpointType& setSubnetMask(const char* value) = 0;

  /** Returns whether the Element identified by SubnetMask exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SubnetMask is enabled or not.
    */
  virtual bool hasSubnetMask() const = 0;

  /** Enables the Element identified by SubnetMask.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by SubnetMask.
    */
  virtual uci::type::IPv6_AddressType& enableSubnetMask(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SubnetMask.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_EndpointType& clearSubnetMask() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Description.
    *
    * @return A const reference to the accessor that provides access to the string identified by Description.
    */
  virtual const uci::type::VisibleString1024Type& getDescription() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Description.
    *
    * @return A reference to the accessor that provides access to the string identified by Description.
    */
  virtual uci::type::VisibleString1024Type& getDescription() = 0;

  /** Sets the string identified by Description to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Description.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_EndpointType& setDescription(const uci::type::VisibleString1024Type& value) = 0;

  /** Sets the string identified by Description to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_EndpointType& setDescription(const std::string& value) = 0;

  /** Sets the string identified by Description to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_EndpointType& setDescription(const char* value) = 0;

  /** Returns whether the Element identified by Description exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Description is enabled or not.
    */
  virtual bool hasDescription() const = 0;

  /** Enables the Element identified by Description.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Description.
    */
  virtual uci::type::VisibleString1024Type& enableDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Description.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_EndpointType& clearDescription() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  IPv6_EndpointType() {
  }

  /** The destructor [only available to derived classes]. */
  ~IPv6_EndpointType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The IPv6_EndpointType to copy from.
    */
  IPv6_EndpointType(const IPv6_EndpointType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this IPv6_EndpointType to the contents of the IPv6_EndpointType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The IPv6_EndpointType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this IPv6_EndpointType.
    * @return A reference to this IPv6_EndpointType.
    */
  IPv6_EndpointType& operator=(const IPv6_EndpointType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_IPV6_ENDPOINTTYPE_H

