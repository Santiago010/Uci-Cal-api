/** @file RF_OperationType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_RF_OPERATIONTYPE_H
#define UCI_TYPE_RF_OPERATIONTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ActivityID_Type.h"
#include "CapabilityID_Type.h"
#include "ConfigureInteroperabilityReportType.h"
#include "DateTimeRangeBeginType.h"
#include "DurationRangeType.h"
#include "DurationType.h"
#include "FOV_VolumeType.h"
#include "ModulationEnum.h"
#include "PercentRangeType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class RF_OperationType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RF_OperationType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RF_OperationType.
    */
  static UCI_EXPORT RF_OperationType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RF_OperationType initializing the data accessed by the new RF_OperationType using the
    * data accessed by the specified RF_OperationType (cloning).
    *
    * @param accessor The RF_OperationType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created RF_OperationType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RF_OperationType.
    */
  static UCI_EXPORT RF_OperationType& create(const RF_OperationType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RF_OperationType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The RF_OperationType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RF_OperationType& accessor);

  /** Returns this accessor's type constant, i.e. rF_OperationType.
    *
    * @return This accessor's type constant, i.e. rF_OperationType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::rF_OperationType;
  }

  /** Returns the version that was initialized from the uci:version attribute of RF_OperationType.
    *
    * @return The version that was initialized from the uci:version attribute of RF_OperationType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RF_OperationType& accessor) = 0;

  /** Indicates the unique IDs of related activities. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::ActivityID_Type, uci::type::accessorType::activityID_Type> ActivityID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CapabilityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CapabilityID.
    */
  virtual const uci::type::CapabilityID_Type& getCapabilityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CapabilityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityID.
    */
  virtual uci::type::CapabilityID_Type& getCapabilityID() = 0;

  /** Sets the complex content identified by CapabilityID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CapabilityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& setCapabilityID(const uci::type::CapabilityID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by ActivityID.
    *
    * @return A const reference to the bounded list identified by ActivityID.
    */
  virtual const uci::type::RF_OperationType::ActivityID& getActivityID() const = 0;

  /** Returns a reference to the bounded list identified by ActivityID.
    *
    * @return A reference to the bounded list identified by ActivityID.
    */
  virtual uci::type::RF_OperationType::ActivityID& getActivityID() = 0;

  /** Sets the bounded list identified by ActivityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& setActivityID(const uci::type::RF_OperationType::ActivityID& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Receive.
    *
    * @return The value of the simple primitive data type identified by Receive.
    */
  virtual xs::Boolean getReceive() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Receive.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& setReceive(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Transmit.
    *
    * @return The value of the simple primitive data type identified by Transmit.
    */
  virtual xs::Boolean getTransmit() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Transmit.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& setTransmit(xs::Boolean value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EmissionLocation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EmissionLocation.
    */
  virtual const uci::type::FOV_VolumeType& getEmissionLocation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EmissionLocation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EmissionLocation.
    */
  virtual uci::type::FOV_VolumeType& getEmissionLocation() = 0;

  /** Sets the complex content identified by EmissionLocation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EmissionLocation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& setEmissionLocation(const uci::type::FOV_VolumeType& value) = 0;

  /** Returns whether the Element identified by EmissionLocation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EmissionLocation is enabled or not.
    */
  virtual bool hasEmissionLocation() const = 0;

  /** Enables the Element identified by EmissionLocation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EmissionLocation.
    */
  virtual uci::type::FOV_VolumeType& enableEmissionLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EmissionLocation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& clearEmissionLocation() = 0;

  /** Returns a const reference to the value of the enumeration identified by Modulation.
    *
    * @return A const reference to the value of the enumeration identified by Modulation.
    */
  virtual const uci::type::ModulationEnum& getModulation() const = 0;

  /** Returns a reference to the value of the enumeration identified by Modulation.
    *
    * @return A reference to the value of the enumeration identified by Modulation.
    */
  virtual uci::type::ModulationEnum& getModulation() = 0;

  /** Sets the value of the enumeration identified by Modulation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& setModulation(const uci::type::ModulationEnum& value) = 0;

  /** Sets the value of the enumeration identified by Modulation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& setModulation(uci::type::ModulationEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Modulation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Modulation is enabled or not.
    */
  virtual bool hasModulation() const = 0;

  /** Enables the Element identified by Modulation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Modulation.
    */
  virtual uci::type::ModulationEnum& enableModulation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Modulation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& clearModulation() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PRI.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PRI.
    */
  virtual const uci::type::DurationRangeType& getPRI() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PRI.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PRI.
    */
  virtual uci::type::DurationRangeType& getPRI() = 0;

  /** Sets the complex content identified by PRI to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PRI.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& setPRI(const uci::type::DurationRangeType& value) = 0;

  /** Returns whether the Element identified by PRI exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI is enabled or not.
    */
  virtual bool hasPRI() const = 0;

  /** Enables the Element identified by PRI.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PRI.
    */
  virtual uci::type::DurationRangeType& enablePRI(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PRI.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& clearPRI() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PulseWidthMax.
    *
    * @return The value of the simple primitive data type identified by PulseWidthMax.
    */
  virtual uci::type::DurationTypeValue getPulseWidthMax() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PulseWidthMax.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& setPulseWidthMax(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PulseWidthMax exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseWidthMax is enabled or not.
    */
  virtual bool hasPulseWidthMax() const = 0;

  /** Clears (disabled) the Element identified by PulseWidthMax.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& clearPulseWidthMax() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Time.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Time.
    */
  virtual const uci::type::DateTimeRangeBeginType& getTime() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Time.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Time.
    */
  virtual uci::type::DateTimeRangeBeginType& getTime() = 0;

  /** Sets the complex content identified by Time to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Time.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& setTime(const uci::type::DateTimeRangeBeginType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DutyCycle.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DutyCycle.
    */
  virtual const uci::type::PercentRangeType& getDutyCycle() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DutyCycle.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DutyCycle.
    */
  virtual uci::type::PercentRangeType& getDutyCycle() = 0;

  /** Sets the complex content identified by DutyCycle to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DutyCycle.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& setDutyCycle(const uci::type::PercentRangeType& value) = 0;

  /** Returns whether the Element identified by DutyCycle exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DutyCycle is enabled or not.
    */
  virtual bool hasDutyCycle() const = 0;

  /** Enables the Element identified by DutyCycle.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DutyCycle.
    */
  virtual uci::type::PercentRangeType& enableDutyCycle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DutyCycle.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& clearDutyCycle() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ConfigureInteroperabilityReport.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ConfigureInteroperabilityReport.
    */
  virtual const uci::type::ConfigureInteroperabilityReportType& getConfigureInteroperabilityReport() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ConfigureInteroperabilityReport.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ConfigureInteroperabilityReport.
    */
  virtual uci::type::ConfigureInteroperabilityReportType& getConfigureInteroperabilityReport() = 0;

  /** Sets the complex content identified by ConfigureInteroperabilityReport to the contents of the complex content
    * accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ConfigureInteroperabilityReport.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& setConfigureInteroperabilityReport(const uci::type::ConfigureInteroperabilityReportType& value) = 0;

  /** Returns whether the Element identified by ConfigureInteroperabilityReport exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConfigureInteroperabilityReport is enabled or not.
    */
  virtual bool hasConfigureInteroperabilityReport() const = 0;

  /** Enables the Element identified by ConfigureInteroperabilityReport.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ConfigureInteroperabilityReport.
    */
  virtual uci::type::ConfigureInteroperabilityReportType& enableConfigureInteroperabilityReport(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ConfigureInteroperabilityReport.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_OperationType& clearConfigureInteroperabilityReport() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RF_OperationType() {
  }

  /** The destructor [only available to derived classes]. */
  ~RF_OperationType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RF_OperationType to copy from.
    */
  RF_OperationType(const RF_OperationType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RF_OperationType to the contents of the RF_OperationType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The RF_OperationType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this RF_OperationType.
    * @return A reference to this RF_OperationType.
    */
  RF_OperationType& operator=(const RF_OperationType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_RF_OPERATIONTYPE_H

