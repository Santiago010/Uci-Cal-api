/** @file OrbitalSurveillanceTaskBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ORBITALSURVEILLANCETASKBASETYPE_H
#define UCI_TYPE_ORBITALSURVEILLANCETASKBASETYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AllowableSensorsType.h"
#include "DistanceType.h"
#include "OrbitalSurveillanceCapabilityEnum.h"
#include "OrbitalSurveillanceSubCapabilityDetailsChoiceType.h"
#include "OrbitalSurveillanceSubCapabilityEnum.h"
#include "ProductNeededByType.h"
#include "SDA_SpecialInstructionsConstraintType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The base type for an Orbital Surveillance Task. */
class OrbitalSurveillanceTaskBaseType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OrbitalSurveillanceTaskBaseType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitalSurveillanceTaskBaseType.
    */
  static UCI_EXPORT OrbitalSurveillanceTaskBaseType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OrbitalSurveillanceTaskBaseType initializing the data accessed by the new
    * OrbitalSurveillanceTaskBaseType using the data accessed by the specified OrbitalSurveillanceTaskBaseType (cloning).
    *
    * @param accessor The OrbitalSurveillanceTaskBaseType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created OrbitalSurveillanceTaskBaseType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitalSurveillanceTaskBaseType.
    */
  static UCI_EXPORT OrbitalSurveillanceTaskBaseType& create(const OrbitalSurveillanceTaskBaseType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OrbitalSurveillanceTaskBaseType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The OrbitalSurveillanceTaskBaseType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OrbitalSurveillanceTaskBaseType& accessor);

  /** Returns this accessor's type constant, i.e. orbitalSurveillanceTaskBaseType.
    *
    * @return This accessor's type constant, i.e. orbitalSurveillanceTaskBaseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::orbitalSurveillanceTaskBaseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OrbitalSurveillanceTaskBaseType.
    *
    * @return The version that was initialized from the uci:version attribute of OrbitalSurveillanceTaskBaseType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OrbitalSurveillanceTaskBaseType& accessor) = 0;

  /** Indicates additional instructions associated with tasking for sensor collections. When "All" is chosen, all of the
    * special instructions must be accomplished to satisfy the Task. When "Any" is chosen, that Task can be satisfied by
    * performing only one of the special instructions provided. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SDA_SpecialInstructionsConstraintType, uci::type::accessorType::sDA_SpecialInstructionsConstraintType> SDA_SpecialInstructions;

  /** Returns a const reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A const reference to the value of the enumeration identified by CapabilityType.
    */
  virtual const uci::type::OrbitalSurveillanceCapabilityEnum& getCapabilityType() const = 0;

  /** Returns a reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A reference to the value of the enumeration identified by CapabilityType.
    */
  virtual uci::type::OrbitalSurveillanceCapabilityEnum& getCapabilityType() = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& setCapabilityType(const uci::type::OrbitalSurveillanceCapabilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& setCapabilityType(uci::type::OrbitalSurveillanceCapabilityEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SubCapabilityType.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SubCapabilityType.
    */
  virtual const uci::type::OrbitalSurveillanceSubCapabilityDetailsChoiceType& getSubCapabilityType() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SubCapabilityType.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SubCapabilityType.
    */
  virtual uci::type::OrbitalSurveillanceSubCapabilityDetailsChoiceType& getSubCapabilityType() = 0;

  /** Sets the complex content identified by SubCapabilityType to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SubCapabilityType.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& setSubCapabilityType(const uci::type::OrbitalSurveillanceSubCapabilityDetailsChoiceType& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by InformationObjective.
    *
    * @return A const reference to the value of the enumeration identified by InformationObjective.
    */
  virtual const uci::type::OrbitalSurveillanceSubCapabilityEnum& getInformationObjective() const = 0;

  /** Returns a reference to the value of the enumeration identified by InformationObjective.
    *
    * @return A reference to the value of the enumeration identified by InformationObjective.
    */
  virtual uci::type::OrbitalSurveillanceSubCapabilityEnum& getInformationObjective() = 0;

  /** Sets the value of the enumeration identified by InformationObjective.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& setInformationObjective(const uci::type::OrbitalSurveillanceSubCapabilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by InformationObjective.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& setInformationObjective(uci::type::OrbitalSurveillanceSubCapabilityEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by InformationObjective exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InformationObjective is enabled or not.
    */
  virtual bool hasInformationObjective() const = 0;

  /** Enables the Element identified by InformationObjective.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by InformationObjective.
    */
  virtual uci::type::OrbitalSurveillanceSubCapabilityEnum& enableInformationObjective(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by InformationObjective.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& clearInformationObjective() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MinSize.
    *
    * @return The value of the simple primitive data type identified by MinSize.
    */
  virtual uci::type::DistanceTypeValue getMinSize() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MinSize.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& setMinSize(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by MinSize exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MinSize is enabled or not.
    */
  virtual bool hasMinSize() const = 0;

  /** Clears (disabled) the Element identified by MinSize.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& clearMinSize() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ConfirmObjectAcquisition.
    *
    * @return The value of the simple primitive data type identified by ConfirmObjectAcquisition.
    */
  virtual xs::Boolean getConfirmObjectAcquisition() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ConfirmObjectAcquisition.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& setConfirmObjectAcquisition(xs::Boolean value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ProductNeededBy.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ProductNeededBy.
    */
  virtual const uci::type::ProductNeededByType& getProductNeededBy() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ProductNeededBy.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ProductNeededBy.
    */
  virtual uci::type::ProductNeededByType& getProductNeededBy() = 0;

  /** Sets the complex content identified by ProductNeededBy to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ProductNeededBy.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& setProductNeededBy(const uci::type::ProductNeededByType& value) = 0;

  /** Returns whether the Element identified by ProductNeededBy exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProductNeededBy is enabled or not.
    */
  virtual bool hasProductNeededBy() const = 0;

  /** Enables the Element identified by ProductNeededBy.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ProductNeededBy.
    */
  virtual uci::type::ProductNeededByType& enableProductNeededBy(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ProductNeededBy.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& clearProductNeededBy() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SensorConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SensorConstraints.
    */
  virtual const uci::type::AllowableSensorsType& getSensorConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SensorConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SensorConstraints.
    */
  virtual uci::type::AllowableSensorsType& getSensorConstraints() = 0;

  /** Sets the complex content identified by SensorConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SensorConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& setSensorConstraints(const uci::type::AllowableSensorsType& value) = 0;

  /** Returns whether the Element identified by SensorConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SensorConstraints is enabled or not.
    */
  virtual bool hasSensorConstraints() const = 0;

  /** Enables the Element identified by SensorConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SensorConstraints.
    */
  virtual uci::type::AllowableSensorsType& enableSensorConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SensorConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& clearSensorConstraints() = 0;

  /** Returns a const reference to the bounded list identified by SDA_SpecialInstructions.
    *
    * @return A const reference to the bounded list identified by SDA_SpecialInstructions.
    */
  virtual const uci::type::OrbitalSurveillanceTaskBaseType::SDA_SpecialInstructions& getSDA_SpecialInstructions() const = 0;

  /** Returns a reference to the bounded list identified by SDA_SpecialInstructions.
    *
    * @return A reference to the bounded list identified by SDA_SpecialInstructions.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType::SDA_SpecialInstructions& getSDA_SpecialInstructions() = 0;

  /** Sets the bounded list identified by SDA_SpecialInstructions.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceTaskBaseType& setSDA_SpecialInstructions(const uci::type::OrbitalSurveillanceTaskBaseType::SDA_SpecialInstructions& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OrbitalSurveillanceTaskBaseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OrbitalSurveillanceTaskBaseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OrbitalSurveillanceTaskBaseType to copy from.
    */
  OrbitalSurveillanceTaskBaseType(const OrbitalSurveillanceTaskBaseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OrbitalSurveillanceTaskBaseType to the contents of the
    * OrbitalSurveillanceTaskBaseType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The OrbitalSurveillanceTaskBaseType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this OrbitalSurveillanceTaskBaseType.
    * @return A reference to this OrbitalSurveillanceTaskBaseType.
    */
  OrbitalSurveillanceTaskBaseType& operator=(const OrbitalSurveillanceTaskBaseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ORBITALSURVEILLANCETASKBASETYPE_H

