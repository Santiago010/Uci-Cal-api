/** @file LaunchObservationMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_LAUNCHOBSERVATIONMDT_H
#define UCI_TYPE_LAUNCHOBSERVATIONMDT_H

#include "../base/BoundedList.h"
#include "../base/export.h"
#include "DataRecordBaseType.h"
#include "DateTimeType.h"
#include "LaunchObjectType.h"
#include "LaunchObservationID_Type.h"
#include "LaunchStaticDetailsType.h"
#include "SourceFiltersType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class LaunchObservationMDT : public virtual DataRecordBaseType {
public:

  /** This method constructs a new LaunchObservationMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed LaunchObservationMDT.
    */
  static UCI_EXPORT LaunchObservationMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new LaunchObservationMDT initializing the data accessed by the new LaunchObservationMDT
    * using the data accessed by the specified LaunchObservationMDT (cloning).
    *
    * @param accessor The LaunchObservationMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created LaunchObservationMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed LaunchObservationMDT.
    */
  static UCI_EXPORT LaunchObservationMDT& create(const LaunchObservationMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified LaunchObservationMDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The LaunchObservationMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(LaunchObservationMDT& accessor);

  /** Returns this accessor's type constant, i.e. launchObservationMDT.
    *
    * @return This accessor's type constant, i.e. launchObservationMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::launchObservationMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of LaunchObservationMDT.
    *
    * @return The version that was initialized from the uci:version attribute of LaunchObservationMDT.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const LaunchObservationMDT& accessor) = 0;

  /** Provides the details of the launch object and applicable dynamic launch characteristics. For every launch stage
    * throughout the launch event, there should only be one corresponding launch stage field. [Occurrences: Minimum: 1;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::LaunchObjectType, uci::type::accessorType::launchObjectType> LaunchObject;

  /** Indicates the source that produced the sibling launch details. Note that this source might be different than the
    * source that produced the Entity/Entities. There could be multiple sources that provided the sibling information,
    * including from sensor data and/or from a fusion service. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SourceFiltersType, uci::type::accessorType::sourceFiltersType> Source;

  /** The unique identifier for a related launch observation. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::LaunchObservationID_Type, uci::type::accessorType::launchObservationID_Type> RelatedLaunchObservationID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * LaunchObservationID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      LaunchObservationID.
    */
  virtual const uci::type::LaunchObservationID_Type& getLaunchObservationID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LaunchObservationID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LaunchObservationID.
    */
  virtual uci::type::LaunchObservationID_Type& getLaunchObservationID() = 0;

  /** Sets the complex content identified by LaunchObservationID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LaunchObservationID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchObservationMDT& setLaunchObservationID(const uci::type::LaunchObservationID_Type& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by InitialCreateTime.
    *
    * @return The value of the simple primitive data type identified by InitialCreateTime.
    */
  virtual uci::type::DateTimeTypeValue getInitialCreateTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InitialCreateTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchObservationMDT& setInitialCreateTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by InitialCreateTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InitialCreateTime is enabled or not.
    */
  virtual bool hasInitialCreateTime() const = 0;

  /** Clears (disabled) the Element identified by InitialCreateTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchObservationMDT& clearInitialCreateTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by LastUpdateTime.
    *
    * @return The value of the simple primitive data type identified by LastUpdateTime.
    */
  virtual uci::type::DateTimeTypeValue getLastUpdateTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LastUpdateTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchObservationMDT& setLastUpdateTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by LastUpdateTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LastUpdateTime is enabled or not.
    */
  virtual bool hasLastUpdateTime() const = 0;

  /** Clears (disabled) the Element identified by LastUpdateTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchObservationMDT& clearLastUpdateTime() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * StaticLaunchCharacteristics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      StaticLaunchCharacteristics.
    */
  virtual const uci::type::LaunchStaticDetailsType& getStaticLaunchCharacteristics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * StaticLaunchCharacteristics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      StaticLaunchCharacteristics.
    */
  virtual uci::type::LaunchStaticDetailsType& getStaticLaunchCharacteristics() = 0;

  /** Sets the complex content identified by StaticLaunchCharacteristics to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by StaticLaunchCharacteristics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchObservationMDT& setStaticLaunchCharacteristics(const uci::type::LaunchStaticDetailsType& value) = 0;

  /** Returns whether the Element identified by StaticLaunchCharacteristics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by StaticLaunchCharacteristics is enabled or not.
    */
  virtual bool hasStaticLaunchCharacteristics() const = 0;

  /** Enables the Element identified by StaticLaunchCharacteristics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      StaticLaunchCharacteristics.
    */
  virtual uci::type::LaunchStaticDetailsType& enableStaticLaunchCharacteristics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by StaticLaunchCharacteristics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchObservationMDT& clearStaticLaunchCharacteristics() = 0;

  /** Returns a const reference to the bounded list identified by LaunchObject.
    *
    * @return A const reference to the bounded list identified by LaunchObject.
    */
  virtual const uci::type::LaunchObservationMDT::LaunchObject& getLaunchObject() const = 0;

  /** Returns a reference to the bounded list identified by LaunchObject.
    *
    * @return A reference to the bounded list identified by LaunchObject.
    */
  virtual uci::type::LaunchObservationMDT::LaunchObject& getLaunchObject() = 0;

  /** Sets the bounded list identified by LaunchObject.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchObservationMDT& setLaunchObject(const uci::type::LaunchObservationMDT::LaunchObject& value) = 0;

  /** Returns a const reference to the bounded list identified by Source.
    *
    * @return A const reference to the bounded list identified by Source.
    */
  virtual const uci::type::LaunchObservationMDT::Source& getSource() const = 0;

  /** Returns a reference to the bounded list identified by Source.
    *
    * @return A reference to the bounded list identified by Source.
    */
  virtual uci::type::LaunchObservationMDT::Source& getSource() = 0;

  /** Sets the bounded list identified by Source.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchObservationMDT& setSource(const uci::type::LaunchObservationMDT::Source& value) = 0;

  /** Returns a const reference to the bounded list identified by RelatedLaunchObservationID.
    *
    * @return A const reference to the bounded list identified by RelatedLaunchObservationID.
    */
  virtual const uci::type::LaunchObservationMDT::RelatedLaunchObservationID& getRelatedLaunchObservationID() const = 0;

  /** Returns a reference to the bounded list identified by RelatedLaunchObservationID.
    *
    * @return A reference to the bounded list identified by RelatedLaunchObservationID.
    */
  virtual uci::type::LaunchObservationMDT::RelatedLaunchObservationID& getRelatedLaunchObservationID() = 0;

  /** Sets the bounded list identified by RelatedLaunchObservationID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LaunchObservationMDT& setRelatedLaunchObservationID(const uci::type::LaunchObservationMDT::RelatedLaunchObservationID& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  LaunchObservationMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~LaunchObservationMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The LaunchObservationMDT to copy from.
    */
  LaunchObservationMDT(const LaunchObservationMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this LaunchObservationMDT to the contents of the LaunchObservationMDT
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The LaunchObservationMDT on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this LaunchObservationMDT.
    * @return A reference to this LaunchObservationMDT.
    */
  LaunchObservationMDT& operator=(const LaunchObservationMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_LAUNCHOBSERVATIONMDT_H

