/** @file CommTerminalActivityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMTERMINALACTIVITYTYPE_H
#define UCI_TYPE_COMMTERMINALACTIVITYTYPE_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CommConnectionStateEnum.h"
#include "uci/type/CommControlType.h"
#include "uci/type/CommLinkPortMapType.h"
#include "uci/type/CommLinkStatisticsType.h"
#include "uci/type/CommProfileID_Type.h"
#include "uci/type/CommWaveformActivityPET.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/SharedRF_ApertureActivityBaseType.h"
#include "uci/type/UserLinkStatusType.h"
#include "uci/type/VerboseStatusType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class CommTerminalActivityType : public virtual SharedRF_ApertureActivityBaseType {
public:

  /** This method constructs a new CommTerminalActivityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommTerminalActivityType.
    */
  static UCI_EXPORT CommTerminalActivityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CommTerminalActivityType initializing the data accessed by the new
    * CommTerminalActivityType using the data accessed by the specified CommTerminalActivityType (cloning).
    *
    * @param accessor The CommTerminalActivityType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created CommTerminalActivityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommTerminalActivityType.
    */
  static UCI_EXPORT CommTerminalActivityType& create(const CommTerminalActivityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CommTerminalActivityType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The CommTerminalActivityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CommTerminalActivityType& accessor);

  /** Returns this accessor's type constant, i.e. commTerminalActivityType.
    *
    * @return This accessor's type constant, i.e. commTerminalActivityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commTerminalActivityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CommTerminalActivityType.
    *
    * @return The version that was initialized from the uci:version attribute of CommTerminalActivityType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CommTerminalActivityType& accessor) = 0;

  /** Encapsulates the user link information that indicates the state and configuration of the individual user links, which
    * the waveform uses to transport the payload data over the communication medium. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::UserLinkStatusType, uci::type::accessorType::userLinkStatusType> UserLinkStatus;

  /** Returns a const reference to the value of the enumeration identified by ConnectionStatus.
    *
    * @return A const reference to the value of the enumeration identified by ConnectionStatus.
    */
  virtual const uci::type::CommConnectionStateEnum& getConnectionStatus() const = 0;

  /** Returns a reference to the value of the enumeration identified by ConnectionStatus.
    *
    * @return A reference to the value of the enumeration identified by ConnectionStatus.
    */
  virtual uci::type::CommConnectionStateEnum& getConnectionStatus() = 0;

  /** Sets the value of the enumeration identified by ConnectionStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& setConnectionStatus(const uci::type::CommConnectionStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by ConnectionStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& setConnectionStatus(uci::type::CommConnectionStateEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ConnectionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConnectionStatus is enabled or not.
    */
  virtual bool hasConnectionStatus() const = 0;

  /** Enables the Element identified by ConnectionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ConnectionStatus.
    */
  virtual uci::type::CommConnectionStateEnum& enableConnectionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ConnectionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& clearConnectionStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CommonSettingsStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CommonSettingsStatus.
    */
  virtual const uci::type::CommControlType& getCommonSettingsStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CommonSettingsStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CommonSettingsStatus.
    */
  virtual uci::type::CommControlType& getCommonSettingsStatus() = 0;

  /** Sets the complex content identified by CommonSettingsStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CommonSettingsStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& setCommonSettingsStatus(const uci::type::CommControlType& value) = 0;

  /** Returns whether the Element identified by CommonSettingsStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CommonSettingsStatus is enabled or not.
    */
  virtual bool hasCommonSettingsStatus() const = 0;

  /** Enables the Element identified by CommonSettingsStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CommonSettingsStatus.
    */
  virtual uci::type::CommControlType& enableCommonSettingsStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CommonSettingsStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& clearCommonSettingsStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CurrentProfileID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CurrentProfileID.
    */
  virtual const uci::type::CommProfileID_Type& getCurrentProfileID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CurrentProfileID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CurrentProfileID.
    */
  virtual uci::type::CommProfileID_Type& getCurrentProfileID() = 0;

  /** Sets the complex content identified by CurrentProfileID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CurrentProfileID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& setCurrentProfileID(const uci::type::CommProfileID_Type& value) = 0;

  /** Returns whether the Element identified by CurrentProfileID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CurrentProfileID is enabled or not.
    */
  virtual bool hasCurrentProfileID() const = 0;

  /** Enables the Element identified by CurrentProfileID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CurrentProfileID.
    */
  virtual uci::type::CommProfileID_Type& enableCurrentProfileID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CurrentProfileID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& clearCurrentProfileID() = 0;

  /** Returns a const reference to the bounded list identified by UserLinkStatus.
    *
    * @return A const reference to the bounded list identified by UserLinkStatus.
    */
  virtual const uci::type::CommTerminalActivityType::UserLinkStatus& getUserLinkStatus() const = 0;

  /** Returns a reference to the bounded list identified by UserLinkStatus.
    *
    * @return A reference to the bounded list identified by UserLinkStatus.
    */
  virtual uci::type::CommTerminalActivityType::UserLinkStatus& getUserLinkStatus() = 0;

  /** Sets the bounded list identified by UserLinkStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& setUserLinkStatus(const uci::type::CommTerminalActivityType::UserLinkStatus& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by LinkPortMap.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by LinkPortMap.
    */
  virtual const uci::type::CommLinkPortMapType& getLinkPortMap() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LinkPortMap.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LinkPortMap.
    */
  virtual uci::type::CommLinkPortMapType& getLinkPortMap() = 0;

  /** Sets the complex content identified by LinkPortMap to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LinkPortMap.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& setLinkPortMap(const uci::type::CommLinkPortMapType& value) = 0;

  /** Returns whether the Element identified by LinkPortMap exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LinkPortMap is enabled or not.
    */
  virtual bool hasLinkPortMap() const = 0;

  /** Enables the Element identified by LinkPortMap.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by LinkPortMap.
    */
  virtual uci::type::CommLinkPortMapType& enableLinkPortMap(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LinkPortMap.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& clearLinkPortMap() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by LinkStatistics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by LinkStatistics.
    */
  virtual const uci::type::CommLinkStatisticsType& getLinkStatistics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LinkStatistics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LinkStatistics.
    */
  virtual uci::type::CommLinkStatisticsType& getLinkStatistics() = 0;

  /** Sets the complex content identified by LinkStatistics to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LinkStatistics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& setLinkStatistics(const uci::type::CommLinkStatisticsType& value) = 0;

  /** Returns whether the Element identified by LinkStatistics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LinkStatistics is enabled or not.
    */
  virtual bool hasLinkStatistics() const = 0;

  /** Enables the Element identified by LinkStatistics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by LinkStatistics.
    */
  virtual uci::type::CommLinkStatisticsType& enableLinkStatistics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LinkStatistics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& clearLinkStatistics() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * WaveformSpecificSettingsStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      WaveformSpecificSettingsStatus.
    */
  virtual const uci::type::CommWaveformActivityPET& getWaveformSpecificSettingsStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * WaveformSpecificSettingsStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      WaveformSpecificSettingsStatus.
    */
  virtual uci::type::CommWaveformActivityPET& getWaveformSpecificSettingsStatus() = 0;

  /** Sets the complex content identified by WaveformSpecificSettingsStatus to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by WaveformSpecificSettingsStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& setWaveformSpecificSettingsStatus(const uci::type::CommWaveformActivityPET& value) = 0;

  /** Returns whether the Element identified by WaveformSpecificSettingsStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WaveformSpecificSettingsStatus is enabled or not.
    */
  virtual bool hasWaveformSpecificSettingsStatus() const = 0;

  /** Enables the Element identified by WaveformSpecificSettingsStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      WaveformSpecificSettingsStatus.
    */
  virtual uci::type::CommWaveformActivityPET& enableWaveformSpecificSettingsStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by WaveformSpecificSettingsStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& clearWaveformSpecificSettingsStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * TerminalUniqueKey.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      TerminalUniqueKey.
    */
  virtual const uci::type::ForeignKeyType& getTerminalUniqueKey() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TerminalUniqueKey.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TerminalUniqueKey.
    */
  virtual uci::type::ForeignKeyType& getTerminalUniqueKey() = 0;

  /** Sets the complex content identified by TerminalUniqueKey to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TerminalUniqueKey.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& setTerminalUniqueKey(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by TerminalUniqueKey exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TerminalUniqueKey is enabled or not.
    */
  virtual bool hasTerminalUniqueKey() const = 0;

  /** Enables the Element identified by TerminalUniqueKey.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TerminalUniqueKey.
    */
  virtual uci::type::ForeignKeyType& enableTerminalUniqueKey(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TerminalUniqueKey.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& clearTerminalUniqueKey() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by VerboseStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by VerboseStatus.
    */
  virtual const uci::type::VerboseStatusType& getVerboseStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by VerboseStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by VerboseStatus.
    */
  virtual uci::type::VerboseStatusType& getVerboseStatus() = 0;

  /** Sets the complex content identified by VerboseStatus to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by VerboseStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& setVerboseStatus(const uci::type::VerboseStatusType& value) = 0;

  /** Returns whether the Element identified by VerboseStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VerboseStatus is enabled or not.
    */
  virtual bool hasVerboseStatus() const = 0;

  /** Enables the Element identified by VerboseStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by VerboseStatus.
    */
  virtual uci::type::VerboseStatusType& enableVerboseStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VerboseStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalActivityType& clearVerboseStatus() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CommTerminalActivityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommTerminalActivityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommTerminalActivityType to copy from.
    */
  CommTerminalActivityType(const CommTerminalActivityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CommTerminalActivityType to the contents of the
    * CommTerminalActivityType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CommTerminalActivityType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this CommTerminalActivityType.
    * @return A reference to this CommTerminalActivityType.
    */
  CommTerminalActivityType& operator=(const CommTerminalActivityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMMTERMINALACTIVITYTYPE_H

