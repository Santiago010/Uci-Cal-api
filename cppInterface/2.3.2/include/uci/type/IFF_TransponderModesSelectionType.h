/** @file IFF_TransponderModesSelectionType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_IFF_TRANSPONDERMODESSELECTIONTYPE_H
#define UCI_TYPE_IFF_TRANSPONDERMODESSELECTIONTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/export.h"
#include "uci/type/IFF_Mode5DetailsType.h"
#include "uci/type/IFF_ModeS_Type.h"
#include "uci/type/OctalValueType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class IFF_TransponderModesSelectionType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new IFF_TransponderModesSelectionType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IFF_TransponderModesSelectionType.
    */
  static UCI_EXPORT IFF_TransponderModesSelectionType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new IFF_TransponderModesSelectionType initializing the data accessed by the new
    * IFF_TransponderModesSelectionType using the data accessed by the specified IFF_TransponderModesSelectionType
    * (cloning).
    *
    * @param accessor The IFF_TransponderModesSelectionType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created IFF_TransponderModesSelectionType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IFF_TransponderModesSelectionType.
    */
  static UCI_EXPORT IFF_TransponderModesSelectionType& create(const IFF_TransponderModesSelectionType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified IFF_TransponderModesSelectionType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The IFF_TransponderModesSelectionType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(IFF_TransponderModesSelectionType& accessor);

  /** Returns this accessor's type constant, i.e. iFF_TransponderModesSelectionType.
    *
    * @return This accessor's type constant, i.e. iFF_TransponderModesSelectionType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::iFF_TransponderModesSelectionType;
  }

  /** Returns the version that was initialized from the uci:version attribute of IFF_TransponderModesSelectionType.
    *
    * @return The version that was initialized from the uci:version attribute of IFF_TransponderModesSelectionType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const IFF_TransponderModesSelectionType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Mode1_Code.
    *
    * @return A const reference to the accessor that provides access to the string identified by Mode1_Code.
    */
  virtual const uci::type::OctalValueType& getMode1_Code() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Mode1_Code.
    *
    * @return A reference to the accessor that provides access to the string identified by Mode1_Code.
    */
  virtual uci::type::OctalValueType& getMode1_Code() = 0;

  /** Sets the string identified by Mode1_Code to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Mode1_Code.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& setMode1_Code(const uci::type::OctalValueType& value) = 0;

  /** Sets the string identified by Mode1_Code to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& setMode1_Code(const std::string& value) = 0;

  /** Sets the string identified by Mode1_Code to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& setMode1_Code(const char* value) = 0;

  /** Returns whether the Element identified by Mode1_Code exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mode1_Code is enabled or not.
    */
  virtual bool hasMode1_Code() const = 0;

  /** Enables the Element identified by Mode1_Code.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Mode1_Code.
    */
  virtual uci::type::OctalValueType& enableMode1_Code(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Mode1_Code.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& clearMode1_Code() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Mode2_Code.
    *
    * @return A const reference to the accessor that provides access to the string identified by Mode2_Code.
    */
  virtual const uci::type::OctalValueType& getMode2_Code() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Mode2_Code.
    *
    * @return A reference to the accessor that provides access to the string identified by Mode2_Code.
    */
  virtual uci::type::OctalValueType& getMode2_Code() = 0;

  /** Sets the string identified by Mode2_Code to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Mode2_Code.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& setMode2_Code(const uci::type::OctalValueType& value) = 0;

  /** Sets the string identified by Mode2_Code to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& setMode2_Code(const std::string& value) = 0;

  /** Sets the string identified by Mode2_Code to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& setMode2_Code(const char* value) = 0;

  /** Returns whether the Element identified by Mode2_Code exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mode2_Code is enabled or not.
    */
  virtual bool hasMode2_Code() const = 0;

  /** Enables the Element identified by Mode2_Code.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Mode2_Code.
    */
  virtual uci::type::OctalValueType& enableMode2_Code(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Mode2_Code.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& clearMode2_Code() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Mode3A_Code.
    *
    * @return A const reference to the accessor that provides access to the string identified by Mode3A_Code.
    */
  virtual const uci::type::OctalValueType& getMode3A_Code() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Mode3A_Code.
    *
    * @return A reference to the accessor that provides access to the string identified by Mode3A_Code.
    */
  virtual uci::type::OctalValueType& getMode3A_Code() = 0;

  /** Sets the string identified by Mode3A_Code to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Mode3A_Code.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& setMode3A_Code(const uci::type::OctalValueType& value) = 0;

  /** Sets the string identified by Mode3A_Code to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& setMode3A_Code(const std::string& value) = 0;

  /** Sets the string identified by Mode3A_Code to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& setMode3A_Code(const char* value) = 0;

  /** Returns whether the Element identified by Mode3A_Code exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mode3A_Code is enabled or not.
    */
  virtual bool hasMode3A_Code() const = 0;

  /** Enables the Element identified by Mode3A_Code.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Mode3A_Code.
    */
  virtual uci::type::OctalValueType& enableMode3A_Code(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Mode3A_Code.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& clearMode3A_Code() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ModeC_Enable.
    *
    * @return The value of the simple primitive data type identified by ModeC_Enable.
    */
  virtual xs::Boolean getModeC_Enable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ModeC_Enable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& setModeC_Enable(xs::Boolean value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Mode5.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Mode5.
    */
  virtual const uci::type::IFF_Mode5DetailsType& getMode5() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Mode5.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Mode5.
    */
  virtual uci::type::IFF_Mode5DetailsType& getMode5() = 0;

  /** Sets the complex content identified by Mode5 to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Mode5.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& setMode5(const uci::type::IFF_Mode5DetailsType& value) = 0;

  /** Returns whether the Element identified by Mode5 exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mode5 is enabled or not.
    */
  virtual bool hasMode5() const = 0;

  /** Enables the Element identified by Mode5.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Mode5.
    */
  virtual uci::type::IFF_Mode5DetailsType& enableMode5(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Mode5.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& clearMode5() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ModeS.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ModeS.
    */
  virtual const uci::type::IFF_ModeS_Type& getModeS() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ModeS.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ModeS.
    */
  virtual uci::type::IFF_ModeS_Type& getModeS() = 0;

  /** Sets the complex content identified by ModeS to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ModeS.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& setModeS(const uci::type::IFF_ModeS_Type& value) = 0;

  /** Returns whether the Element identified by ModeS exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ModeS is enabled or not.
    */
  virtual bool hasModeS() const = 0;

  /** Enables the Element identified by ModeS.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ModeS.
    */
  virtual uci::type::IFF_ModeS_Type& enableModeS(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ModeS.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& clearModeS() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ADS_B_Enable.
    *
    * @return The value of the simple primitive data type identified by ADS_B_Enable.
    */
  virtual xs::Boolean getADS_B_Enable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ADS_B_Enable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_TransponderModesSelectionType& setADS_B_Enable(xs::Boolean value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  IFF_TransponderModesSelectionType() {
  }

  /** The destructor [only available to derived classes]. */
  ~IFF_TransponderModesSelectionType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The IFF_TransponderModesSelectionType to copy from.
    */
  IFF_TransponderModesSelectionType(const IFF_TransponderModesSelectionType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this IFF_TransponderModesSelectionType to the contents of the
    * IFF_TransponderModesSelectionType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The IFF_TransponderModesSelectionType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this IFF_TransponderModesSelectionType.
    * @return A reference to this IFF_TransponderModesSelectionType.
    */
  IFF_TransponderModesSelectionType& operator=(const IFF_TransponderModesSelectionType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_IFF_TRANSPONDERMODESSELECTIONTYPE_H

