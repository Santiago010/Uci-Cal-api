/** @file ObservationMeasurementSourceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OBSERVATIONMEASUREMENTSOURCETYPE_H
#define UCI_TYPE_OBSERVATIONMEASUREMENTSOURCETYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/IntAccessor.h"
#include "../base/export.h"
#include "ElementDetailsType.h"
#include "FOV_ExtentType.h"
#include "MeasurementReportSourceTypeEnum.h"
#include "MeasurementSourceIdentityType.h"
#include "NameValuePairType.h"
#include "ProductMetadataID_Type.h"
#include "SourceCharacteristicsType.h"
#include "SourceCoverageType.h"
#include "SourceResolutionType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ObservationMeasurementSourceType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ObservationMeasurementSourceType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ObservationMeasurementSourceType.
    */
  static UCI_EXPORT ObservationMeasurementSourceType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ObservationMeasurementSourceType initializing the data accessed by the new
    * ObservationMeasurementSourceType using the data accessed by the specified ObservationMeasurementSourceType (cloning).
    *
    * @param accessor The ObservationMeasurementSourceType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created ObservationMeasurementSourceType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ObservationMeasurementSourceType.
    */
  static UCI_EXPORT ObservationMeasurementSourceType& create(const ObservationMeasurementSourceType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ObservationMeasurementSourceType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The ObservationMeasurementSourceType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ObservationMeasurementSourceType& accessor);

  /** Returns this accessor's type constant, i.e. observationMeasurementSourceType.
    *
    * @return This accessor's type constant, i.e. observationMeasurementSourceType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::observationMeasurementSourceType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ObservationMeasurementSourceType.
    *
    * @return The version that was initialized from the uci:version attribute of ObservationMeasurementSourceType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ObservationMeasurementSourceType& accessor) = 0;

  /** Indicates the details such as kinematics of the source of the elements. In some cases, the source may be composed of
    * multiple, kinematically dispersed elements, such as a bi-static or multi-static radar. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ElementDetailsType, uci::type::accessorType::elementDetailsType> ElementDetails;

  /** This element represents the unique identifier(s) of the ProductMetadata message(s) associated with the parent
    * MeasurementSource. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type> ProductMetadataID;

  /** Indicates a custom source parameter that is not covered by other elements. These supplemental characteristics are
    * source sensor specific and may not be relevant to all producers. Reference the data providers interface control
    * document or service specification to determine if this data will be provided. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::NameValuePairType, uci::type::accessorType::nameValuePairType> CustomCharacteristics;

  /** Returns a const reference to the bounded list identified by ElementDetails.
    *
    * @return A const reference to the bounded list identified by ElementDetails.
    */
  virtual const uci::type::ObservationMeasurementSourceType::ElementDetails& getElementDetails() const = 0;

  /** Returns a reference to the bounded list identified by ElementDetails.
    *
    * @return A reference to the bounded list identified by ElementDetails.
    */
  virtual uci::type::ObservationMeasurementSourceType::ElementDetails& getElementDetails() = 0;

  /** Sets the bounded list identified by ElementDetails.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& setElementDetails(const uci::type::ObservationMeasurementSourceType::ElementDetails& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SourceIdentity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SourceIdentity.
    */
  virtual const uci::type::MeasurementSourceIdentityType& getSourceIdentity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SourceIdentity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SourceIdentity.
    */
  virtual uci::type::MeasurementSourceIdentityType& getSourceIdentity() = 0;

  /** Sets the complex content identified by SourceIdentity to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SourceIdentity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& setSourceIdentity(const uci::type::MeasurementSourceIdentityType& value) = 0;

  /** Returns whether the Element identified by SourceIdentity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SourceIdentity is enabled or not.
    */
  virtual bool hasSourceIdentity() const = 0;

  /** Enables the Element identified by SourceIdentity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SourceIdentity.
    */
  virtual uci::type::MeasurementSourceIdentityType& enableSourceIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SourceIdentity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& clearSourceIdentity() = 0;

  /** Returns a const reference to the value of the enumeration identified by SourceType.
    *
    * @return A const reference to the value of the enumeration identified by SourceType.
    */
  virtual const uci::type::MeasurementReportSourceTypeEnum& getSourceType() const = 0;

  /** Returns a reference to the value of the enumeration identified by SourceType.
    *
    * @return A reference to the value of the enumeration identified by SourceType.
    */
  virtual uci::type::MeasurementReportSourceTypeEnum& getSourceType() = 0;

  /** Sets the value of the enumeration identified by SourceType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& setSourceType(const uci::type::MeasurementReportSourceTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by SourceType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& setSourceType(uci::type::MeasurementReportSourceTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by SourceType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SourceType is enabled or not.
    */
  virtual bool hasSourceType() const = 0;

  /** Enables the Element identified by SourceType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by SourceType.
    */
  virtual uci::type::MeasurementReportSourceTypeEnum& enableSourceType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SourceType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& clearSourceType() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SourceCoverage.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SourceCoverage.
    */
  virtual const uci::type::SourceCoverageType& getSourceCoverage() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SourceCoverage.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SourceCoverage.
    */
  virtual uci::type::SourceCoverageType& getSourceCoverage() = 0;

  /** Sets the complex content identified by SourceCoverage to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SourceCoverage.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& setSourceCoverage(const uci::type::SourceCoverageType& value) = 0;

  /** Returns whether the Element identified by SourceCoverage exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SourceCoverage is enabled or not.
    */
  virtual bool hasSourceCoverage() const = 0;

  /** Enables the Element identified by SourceCoverage.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SourceCoverage.
    */
  virtual uci::type::SourceCoverageType& enableSourceCoverage(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SourceCoverage.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& clearSourceCoverage() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SourceAngularExtent.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SourceAngularExtent.
    */
  virtual const uci::type::FOV_ExtentType& getSourceAngularExtent() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SourceAngularExtent.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SourceAngularExtent.
    */
  virtual uci::type::FOV_ExtentType& getSourceAngularExtent() = 0;

  /** Sets the complex content identified by SourceAngularExtent to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SourceAngularExtent.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& setSourceAngularExtent(const uci::type::FOV_ExtentType& value) = 0;

  /** Returns whether the Element identified by SourceAngularExtent exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SourceAngularExtent is enabled or not.
    */
  virtual bool hasSourceAngularExtent() const = 0;

  /** Enables the Element identified by SourceAngularExtent.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SourceAngularExtent.
    */
  virtual uci::type::FOV_ExtentType& enableSourceAngularExtent(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SourceAngularExtent.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& clearSourceAngularExtent() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SourceResolution.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SourceResolution.
    */
  virtual const uci::type::SourceResolutionType& getSourceResolution() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SourceResolution.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SourceResolution.
    */
  virtual uci::type::SourceResolutionType& getSourceResolution() = 0;

  /** Sets the complex content identified by SourceResolution to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SourceResolution.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& setSourceResolution(const uci::type::SourceResolutionType& value) = 0;

  /** Returns whether the Element identified by SourceResolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SourceResolution is enabled or not.
    */
  virtual bool hasSourceResolution() const = 0;

  /** Enables the Element identified by SourceResolution.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SourceResolution.
    */
  virtual uci::type::SourceResolutionType& enableSourceResolution(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SourceResolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& clearSourceResolution() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SourceSpecifiedCharacteristics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SourceSpecifiedCharacteristics.
    */
  virtual const uci::type::SourceCharacteristicsType& getSourceSpecifiedCharacteristics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * SourceSpecifiedCharacteristics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      SourceSpecifiedCharacteristics.
    */
  virtual uci::type::SourceCharacteristicsType& getSourceSpecifiedCharacteristics() = 0;

  /** Sets the complex content identified by SourceSpecifiedCharacteristics to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SourceSpecifiedCharacteristics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& setSourceSpecifiedCharacteristics(const uci::type::SourceCharacteristicsType& value) = 0;

  /** Returns whether the Element identified by SourceSpecifiedCharacteristics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SourceSpecifiedCharacteristics is enabled or not.
    */
  virtual bool hasSourceSpecifiedCharacteristics() const = 0;

  /** Enables the Element identified by SourceSpecifiedCharacteristics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      SourceSpecifiedCharacteristics.
    */
  virtual uci::type::SourceCharacteristicsType& enableSourceSpecifiedCharacteristics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SourceSpecifiedCharacteristics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& clearSourceSpecifiedCharacteristics() = 0;

  /** Returns the value of the SimplePrimitive data type identified by NumberOfLocalTracksReported.
    *
    * @return The value of the simple primitive data type identified by NumberOfLocalTracksReported.
    */
  virtual xs::Int getNumberOfLocalTracksReported() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by NumberOfLocalTracksReported.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& setNumberOfLocalTracksReported(xs::Int value) = 0;

  /** Returns whether the Element identified by NumberOfLocalTracksReported exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NumberOfLocalTracksReported is enabled or not.
    */
  virtual bool hasNumberOfLocalTracksReported() const = 0;

  /** Clears (disabled) the Element identified by NumberOfLocalTracksReported.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& clearNumberOfLocalTracksReported() = 0;

  /** Returns the value of the SimplePrimitive data type identified by NumberOfIndependentMeasurements.
    *
    * @return The value of the simple primitive data type identified by NumberOfIndependentMeasurements.
    */
  virtual xs::Int getNumberOfIndependentMeasurements() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by NumberOfIndependentMeasurements.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& setNumberOfIndependentMeasurements(xs::Int value) = 0;

  /** Returns whether the Element identified by NumberOfIndependentMeasurements exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NumberOfIndependentMeasurements is enabled or not.
    */
  virtual bool hasNumberOfIndependentMeasurements() const = 0;

  /** Clears (disabled) the Element identified by NumberOfIndependentMeasurements.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& clearNumberOfIndependentMeasurements() = 0;

  /** Returns a const reference to the bounded list identified by ProductMetadataID.
    *
    * @return A const reference to the bounded list identified by ProductMetadataID.
    */
  virtual const uci::type::ObservationMeasurementSourceType::ProductMetadataID& getProductMetadataID() const = 0;

  /** Returns a reference to the bounded list identified by ProductMetadataID.
    *
    * @return A reference to the bounded list identified by ProductMetadataID.
    */
  virtual uci::type::ObservationMeasurementSourceType::ProductMetadataID& getProductMetadataID() = 0;

  /** Sets the bounded list identified by ProductMetadataID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& setProductMetadataID(const uci::type::ObservationMeasurementSourceType::ProductMetadataID& value) = 0;

  /** Returns a const reference to the bounded list identified by CustomCharacteristics.
    *
    * @return A const reference to the bounded list identified by CustomCharacteristics.
    */
  virtual const uci::type::ObservationMeasurementSourceType::CustomCharacteristics& getCustomCharacteristics() const = 0;

  /** Returns a reference to the bounded list identified by CustomCharacteristics.
    *
    * @return A reference to the bounded list identified by CustomCharacteristics.
    */
  virtual uci::type::ObservationMeasurementSourceType::CustomCharacteristics& getCustomCharacteristics() = 0;

  /** Sets the bounded list identified by CustomCharacteristics.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationMeasurementSourceType& setCustomCharacteristics(const uci::type::ObservationMeasurementSourceType::CustomCharacteristics& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ObservationMeasurementSourceType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ObservationMeasurementSourceType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ObservationMeasurementSourceType to copy from.
    */
  ObservationMeasurementSourceType(const ObservationMeasurementSourceType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ObservationMeasurementSourceType to the contents of the
    * ObservationMeasurementSourceType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ObservationMeasurementSourceType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this ObservationMeasurementSourceType.
    * @return A reference to this ObservationMeasurementSourceType.
    */
  ObservationMeasurementSourceType& operator=(const ObservationMeasurementSourceType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_OBSERVATIONMEASUREMENTSOURCETYPE_H

