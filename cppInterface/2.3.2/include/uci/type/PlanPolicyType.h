/** @file PlanPolicyType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLANPOLICYTYPE_H
#define UCI_TYPE_PLANPOLICYTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ApprovalPolicyBaseType.h"
#include "uci/type/ByResultPolicyType.h"
#include "uci/type/ByTriggerPolicyType.h"
#include "uci/type/PlanPolicyApplicablePlanType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PlanPolicyType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PlanPolicyType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanPolicyType.
    */
  static UCI_EXPORT PlanPolicyType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlanPolicyType initializing the data accessed by the new PlanPolicyType using the data
    * accessed by the specified PlanPolicyType (cloning).
    *
    * @param accessor The PlanPolicyType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PlanPolicyType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanPolicyType.
    */
  static UCI_EXPORT PlanPolicyType& create(const PlanPolicyType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlanPolicyType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The PlanPolicyType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlanPolicyType& accessor);

  /** Returns this accessor's type constant, i.e. planPolicyType.
    *
    * @return This accessor's type constant, i.e. planPolicyType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::planPolicyType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlanPolicyType.
    *
    * @return The version that was initialized from the uci:version attribute of PlanPolicyType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlanPolicyType& accessor) = 0;

  /** Indicates the set of planning activities whose generated plans are subject to the sibling *Policy elements.
    * [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PlanPolicyApplicablePlanType, uci::type::accessorType::planPolicyApplicablePlanType> ApplicablePlanningActivity;

  /** Indicates approval policies when planning activity results match certain conditions. Conditions specified here are
    * considered to be overrides to the default planning activity approval policy given in the sibling Default element. For
    * example, if the default policy indicates task allocation approval is never required, this element could override the
    * default and require approval whenever a task allocation results in previously allocated Task or Tasks being dropped.
    * See the annotations in the sibling DefaultPolicy element for an overview of how the siblings relate to each other. If
    * multiple instances are given, each should be a different Result instance as indicated by the child Result element.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ByResultPolicyType, uci::type::accessorType::byResultPolicyType> ByResultPolicy;

  /** Indicates approval policies for re-plan activities initiated by triggered events, overriding the default approval
    * policy for the planning activity given in the sibling DefaultPolicy element. Additionally, this element allows
    * trigger-specific policies for a specific planning activities. For example, if the default policy indicates route
    * planning approval is never required, this element could override, requiring approval for route plans affecting all
    * Systems triggered by new threats if the route re-plan results in dropped tasks. If multiple instances are given, each
    * should be of a different trigger type as indicated by the child EventTrigger element. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ByTriggerPolicyType, uci::type::accessorType::byTriggerPolicyType> ByTriggerPolicy;

  /** Returns a const reference to the bounded list identified by ApplicablePlanningActivity.
    *
    * @return A const reference to the bounded list identified by ApplicablePlanningActivity.
    */
  virtual const uci::type::PlanPolicyType::ApplicablePlanningActivity& getApplicablePlanningActivity() const = 0;

  /** Returns a reference to the bounded list identified by ApplicablePlanningActivity.
    *
    * @return A reference to the bounded list identified by ApplicablePlanningActivity.
    */
  virtual uci::type::PlanPolicyType::ApplicablePlanningActivity& getApplicablePlanningActivity() = 0;

  /** Sets the bounded list identified by ApplicablePlanningActivity.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPolicyType& setApplicablePlanningActivity(const uci::type::PlanPolicyType::ApplicablePlanningActivity& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DefaultPolicy.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DefaultPolicy.
    */
  virtual const uci::type::ApprovalPolicyBaseType& getDefaultPolicy() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DefaultPolicy.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DefaultPolicy.
    */
  virtual uci::type::ApprovalPolicyBaseType& getDefaultPolicy() = 0;

  /** Sets the complex content identified by DefaultPolicy to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DefaultPolicy.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPolicyType& setDefaultPolicy(const uci::type::ApprovalPolicyBaseType& value) = 0;

  /** Returns whether the Element identified by DefaultPolicy exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DefaultPolicy is enabled or not.
    */
  virtual bool hasDefaultPolicy() const = 0;

  /** Enables the Element identified by DefaultPolicy.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DefaultPolicy.
    */
  virtual uci::type::ApprovalPolicyBaseType& enableDefaultPolicy(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DefaultPolicy.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPolicyType& clearDefaultPolicy() = 0;

  /** Returns a const reference to the bounded list identified by ByResultPolicy.
    *
    * @return A const reference to the bounded list identified by ByResultPolicy.
    */
  virtual const uci::type::PlanPolicyType::ByResultPolicy& getByResultPolicy() const = 0;

  /** Returns a reference to the bounded list identified by ByResultPolicy.
    *
    * @return A reference to the bounded list identified by ByResultPolicy.
    */
  virtual uci::type::PlanPolicyType::ByResultPolicy& getByResultPolicy() = 0;

  /** Sets the bounded list identified by ByResultPolicy.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPolicyType& setByResultPolicy(const uci::type::PlanPolicyType::ByResultPolicy& value) = 0;

  /** Returns a const reference to the bounded list identified by ByTriggerPolicy.
    *
    * @return A const reference to the bounded list identified by ByTriggerPolicy.
    */
  virtual const uci::type::PlanPolicyType::ByTriggerPolicy& getByTriggerPolicy() const = 0;

  /** Returns a reference to the bounded list identified by ByTriggerPolicy.
    *
    * @return A reference to the bounded list identified by ByTriggerPolicy.
    */
  virtual uci::type::PlanPolicyType::ByTriggerPolicy& getByTriggerPolicy() = 0;

  /** Sets the bounded list identified by ByTriggerPolicy.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPolicyType& setByTriggerPolicy(const uci::type::PlanPolicyType::ByTriggerPolicy& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlanPolicyType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlanPolicyType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlanPolicyType to copy from.
    */
  PlanPolicyType(const PlanPolicyType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlanPolicyType to the contents of the PlanPolicyType on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PlanPolicyType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this PlanPolicyType.
    * @return A reference to this PlanPolicyType.
    */
  PlanPolicyType& operator=(const PlanPolicyType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLANPOLICYTYPE_H

