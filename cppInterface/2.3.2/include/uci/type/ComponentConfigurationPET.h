/** @file ComponentConfigurationPET.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMPONENTCONFIGURATIONPET_H
#define UCI_TYPE_COMPONENTCONFIGURATIONPET_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/type/AboutType.h"
#include "uci/type/CapabilityCrossReferenceType.h"
#include "uci/type/ComponentConfigurationID_Type.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/ComponentTypeEnum.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/InstallationDetailsType.h"
#include "uci/type/MassType.h"
#include "uci/type/ServiceID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Contains component configuration data. See individual field annotations for more details. */
class ComponentConfigurationPET : public virtual uci::base::Accessor {
public:

  /** Returns this accessor's type constant, i.e. componentConfigurationPET.
    *
    * @return This accessor's type constant, i.e. componentConfigurationPET.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::componentConfigurationPET;
  }

  /** Returns the version that was initialized from the uci:version attribute of ComponentConfigurationPET.
    *
    * @return The version that was initialized from the uci:version attribute of ComponentConfigurationPET.
    */
  static std::string getUCITypeVersion() {
    return "002.001.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ComponentConfigurationPET& accessor) = 0;

  /** Indicates a Capability that is dependent upon this component. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::CapabilityCrossReferenceType, uci::type::accessorType::capabilityCrossReferenceType> CapabilityCrossReference;

  /** List of service IDs of services that are related to or tied to the component. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ServiceID_Type, uci::type::accessorType::serviceID_Type> ServiceID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ComponentConfigurationID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ComponentConfigurationID.
    */
  virtual const uci::type::ComponentConfigurationID_Type& getComponentConfigurationID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ComponentConfigurationID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ComponentConfigurationID.
    */
  virtual uci::type::ComponentConfigurationID_Type& getComponentConfigurationID() = 0;

  /** Sets the complex content identified by ComponentConfigurationID to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ComponentConfigurationID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& setComponentConfigurationID(const uci::type::ComponentConfigurationID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ComponentID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ComponentID.
    */
  virtual const uci::type::ComponentID_Type& getComponentID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ComponentID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ComponentID.
    */
  virtual uci::type::ComponentID_Type& getComponentID() = 0;

  /** Sets the complex content identified by ComponentID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ComponentID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& setComponentID(const uci::type::ComponentID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by About.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by About.
    */
  virtual const uci::type::AboutType& getAbout() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by About.
    *
    * @return A reference to the accessor that provides access to the complex content identified by About.
    */
  virtual uci::type::AboutType& getAbout() = 0;

  /** Sets the complex content identified by About to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by About.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& setAbout(const uci::type::AboutType& value) = 0;

  /** Returns whether the Element identified by About exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by About is enabled or not.
    */
  virtual bool hasAbout() const = 0;

  /** Enables the Element identified by About.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by About.
    */
  virtual uci::type::AboutType& enableAbout(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by About.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& clearAbout() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Mass.
    *
    * @return The value of the simple primitive data type identified by Mass.
    */
  virtual uci::type::MassTypeValue getMass() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Mass.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& setMass(uci::type::MassTypeValue value) = 0;

  /** Returns whether the Element identified by Mass exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mass is enabled or not.
    */
  virtual bool hasMass() const = 0;

  /** Clears (disabled) the Element identified by Mass.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& clearMass() = 0;

  /** Returns a const reference to the bounded list identified by CapabilityCrossReference.
    *
    * @return A const reference to the bounded list identified by CapabilityCrossReference.
    */
  virtual const uci::type::ComponentConfigurationPET::CapabilityCrossReference& getCapabilityCrossReference() const = 0;

  /** Returns a reference to the bounded list identified by CapabilityCrossReference.
    *
    * @return A reference to the bounded list identified by CapabilityCrossReference.
    */
  virtual uci::type::ComponentConfigurationPET::CapabilityCrossReference& getCapabilityCrossReference() = 0;

  /** Sets the bounded list identified by CapabilityCrossReference.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& setCapabilityCrossReference(const uci::type::ComponentConfigurationPET::CapabilityCrossReference& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * InstallationLocationKey.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      InstallationLocationKey.
    */
  virtual const uci::type::ForeignKeyType& getInstallationLocationKey() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * InstallationLocationKey.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      InstallationLocationKey.
    */
  virtual uci::type::ForeignKeyType& getInstallationLocationKey() = 0;

  /** Sets the complex content identified by InstallationLocationKey to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by InstallationLocationKey.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& setInstallationLocationKey(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by InstallationLocationKey exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InstallationLocationKey is enabled or not.
    */
  virtual bool hasInstallationLocationKey() const = 0;

  /** Enables the Element identified by InstallationLocationKey.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      InstallationLocationKey.
    */
  virtual uci::type::ForeignKeyType& enableInstallationLocationKey(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by InstallationLocationKey.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& clearInstallationLocationKey() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * InstallationDetails.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      InstallationDetails.
    */
  virtual const uci::type::InstallationDetailsType& getInstallationDetails() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by InstallationDetails.
    *
    * @return A reference to the accessor that provides access to the complex content identified by InstallationDetails.
    */
  virtual uci::type::InstallationDetailsType& getInstallationDetails() = 0;

  /** Sets the complex content identified by InstallationDetails to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by InstallationDetails.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& setInstallationDetails(const uci::type::InstallationDetailsType& value) = 0;

  /** Returns whether the Element identified by InstallationDetails exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InstallationDetails is enabled or not.
    */
  virtual bool hasInstallationDetails() const = 0;

  /** Enables the Element identified by InstallationDetails.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by InstallationDetails.
    */
  virtual uci::type::InstallationDetailsType& enableInstallationDetails(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by InstallationDetails.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& clearInstallationDetails() = 0;

  /** Returns a const reference to the value of the enumeration identified by ComponentType.
    *
    * @return A const reference to the value of the enumeration identified by ComponentType.
    */
  virtual const uci::type::ComponentTypeEnum& getComponentType() const = 0;

  /** Returns a reference to the value of the enumeration identified by ComponentType.
    *
    * @return A reference to the value of the enumeration identified by ComponentType.
    */
  virtual uci::type::ComponentTypeEnum& getComponentType() = 0;

  /** Sets the value of the enumeration identified by ComponentType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& setComponentType(const uci::type::ComponentTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by ComponentType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& setComponentType(uci::type::ComponentTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ComponentType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ComponentType is enabled or not.
    */
  virtual bool hasComponentType() const = 0;

  /** Enables the Element identified by ComponentType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ComponentType.
    */
  virtual uci::type::ComponentTypeEnum& enableComponentType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ComponentType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& clearComponentType() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ComponentCode.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ComponentCode.
    */
  virtual const uci::type::ForeignKeyType& getComponentCode() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ComponentCode.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ComponentCode.
    */
  virtual uci::type::ForeignKeyType& getComponentCode() = 0;

  /** Sets the complex content identified by ComponentCode to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ComponentCode.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& setComponentCode(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by ComponentCode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ComponentCode is enabled or not.
    */
  virtual bool hasComponentCode() const = 0;

  /** Enables the Element identified by ComponentCode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ComponentCode.
    */
  virtual uci::type::ForeignKeyType& enableComponentCode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ComponentCode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& clearComponentCode() = 0;

  /** Returns a const reference to the bounded list identified by ServiceID.
    *
    * @return A const reference to the bounded list identified by ServiceID.
    */
  virtual const uci::type::ComponentConfigurationPET::ServiceID& getServiceID() const = 0;

  /** Returns a reference to the bounded list identified by ServiceID.
    *
    * @return A reference to the bounded list identified by ServiceID.
    */
  virtual uci::type::ComponentConfigurationPET::ServiceID& getServiceID() = 0;

  /** Sets the bounded list identified by ServiceID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentConfigurationPET& setServiceID(const uci::type::ComponentConfigurationPET::ServiceID& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ComponentConfigurationPET() {
  }

  /** The destructor [only available to derived classes]. */
  ~ComponentConfigurationPET() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ComponentConfigurationPET to copy from.
    */
  ComponentConfigurationPET(const ComponentConfigurationPET& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ComponentConfigurationPET to the contents of the
    * ComponentConfigurationPET on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ComponentConfigurationPET on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this ComponentConfigurationPET.
    * @return A reference to this ComponentConfigurationPET.
    */
  ComponentConfigurationPET& operator=(const ComponentConfigurationPET& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMPONENTCONFIGURATIONPET_H

