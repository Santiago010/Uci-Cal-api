/** @file OrderTraceabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ORDERTRACEABILITYTYPE_H
#define UCI_TYPE_ORDERTRACEABILITYTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ACO_FileTraceabilityType.h"
#include "ACTDF_FileTraceabilityType.h"
#include "AOCO_TraceabilityType.h"
#include "ATO_FileTraceabilityType.h"
#include "CollectionDeckTraceabilityType.h"
#include "FileMetadataID_Type.h"
#include "ROME_IdentityType.h"
#include "RSTA_FileTraceabilityType.h"
#include "SystemID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Allows traceability to the source of this data. */
class OrderTraceabilityType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OrderTraceabilityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrderTraceabilityType.
    */
  static UCI_EXPORT OrderTraceabilityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OrderTraceabilityType initializing the data accessed by the new OrderTraceabilityType
    * using the data accessed by the specified OrderTraceabilityType (cloning).
    *
    * @param accessor The OrderTraceabilityType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created OrderTraceabilityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrderTraceabilityType.
    */
  static UCI_EXPORT OrderTraceabilityType& create(const OrderTraceabilityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OrderTraceabilityType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The OrderTraceabilityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OrderTraceabilityType& accessor);

  /** Returns this accessor's type constant, i.e. orderTraceabilityType.
    *
    * @return This accessor's type constant, i.e. orderTraceabilityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::orderTraceabilityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OrderTraceabilityType.
    *
    * @return The version that was initialized from the uci:version attribute of OrderTraceabilityType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OrderTraceabilityType& accessor) = 0;

  /** Indicates a reference to an external (non-UCI) tasking source: the Air Tasking Order. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ATO_FileTraceabilityType, uci::type::accessorType::aTO_FileTraceabilityType> ATO;

  /** Indicates a reference to an external (non-UCI) tasking source: the Airspace Control Order. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ACO_FileTraceabilityType, uci::type::accessorType::aCO_FileTraceabilityType> ACO;

  /** Indicates a reference to an external (non-UCI) tasking source: Aircraft Collection Tasking Data Format. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ACTDF_FileTraceabilityType, uci::type::accessorType::aCTDF_FileTraceabilityType> ACTDF;

  /** Indicates a reference to an external (non-UCI) tasking source: the ISR supplement to the ATO known as the
    * Reconnaissance, Surveillance and Target Acquisition (RSTA). [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RSTA_FileTraceabilityType, uci::type::accessorType::rSTA_FileTraceabilityType> RSTA;

  /** This element represents the unique ID of the mission specified by the ATO. ROME ID is a type of Mission ID, defined
    * by ACTDF where ROME is the acronym for Reconnaissance Operations Management Enterprise. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ROME_IdentityType, uci::type::accessorType::rOME_IdentityType> ROME_Identifier;

  /** Indicates a reference to an external (non-UCI) tasking source: the collection deck. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CollectionDeckTraceabilityType, uci::type::accessorType::collectionDeckTraceabilityType> CollectionDeck;

  /** Indicates a reference to an external (non-UCI) tasking source: Airborne Overhead Cooperative Operations.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::AOCO_TraceabilityType, uci::type::accessorType::aOCO_TraceabilityType> AOCO;

  /** Indicates a reference to an external (non-UCI) tasking source: Space Operations Directive. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> SOD_ID;

  /** Indicates a reference to an external (non-UCI) tasking source: Master Space Plan. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> MSP_ID;

  /** Indicates a reference to an external (non-UCI) tasking source: Integrated Sensor Support Plan. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> ISSP_ID;

  /** Indicates a reference to an external (non-UCI) tasking source: Joint Integrated Prioritized Target List.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> JIPTL_ID;

  /** Indicates a reference to an external (non-UCI) tasking source: Joint Space Tasking Order. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> JSTO_ID;

  /** Indicates a reference to an external (non-UCI) tasking source: Planning Order. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> PLANORD_ID;

  /** Indicates a reference to an external (non-UCI) tasking source: Operation Order. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> OPORD_ID;

  /** Indicates a reference to an external (non-UCI) tasking source: Warning Order. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> WARNORD_ID;

  /** Indicates a reference to an external (non-UCI) tasking source: Deployment Order. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> DEPORD_ID;

  /** Indicates a reference to an external (non-UCI) tasking source: Alert Order. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> ALERTORD_ID;

  /** Indicates a reference to an external (non-UCI) tasking source: Fragmentary Order. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> FRAGORD_ID;

  /** Indicates a reference to an external (non-UCI) tasking source: Execute Order. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> EXORD_ID;

  /** Indicates a reference to an external (non-UCI) tasking source: Special Instructions. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> SPINS_ID;

  /** Indicates a reference to an external (non-UCI) tasking source: Commanders Intent. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> COMMANDERS_INTENT_ID;

  /** Indicates a reference to an external (non-UCI) tasking source or other mission related file that does not fall into
    * any of the other categories. Recommended for restricted use for pending change package proposals or debug purposes.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> OTHER_FILE_ID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OrderSourceID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OrderSourceID.
    */
  virtual const uci::type::SystemID_Type& getOrderSourceID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrderSourceID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrderSourceID.
    */
  virtual uci::type::SystemID_Type& getOrderSourceID() = 0;

  /** Sets the complex content identified by OrderSourceID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrderSourceID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setOrderSourceID(const uci::type::SystemID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by ATO.
    *
    * @return A const reference to the bounded list identified by ATO.
    */
  virtual const uci::type::OrderTraceabilityType::ATO& getATO() const = 0;

  /** Returns a reference to the bounded list identified by ATO.
    *
    * @return A reference to the bounded list identified by ATO.
    */
  virtual uci::type::OrderTraceabilityType::ATO& getATO() = 0;

  /** Sets the bounded list identified by ATO.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setATO(const uci::type::OrderTraceabilityType::ATO& value) = 0;

  /** Returns a const reference to the bounded list identified by ACO.
    *
    * @return A const reference to the bounded list identified by ACO.
    */
  virtual const uci::type::OrderTraceabilityType::ACO& getACO() const = 0;

  /** Returns a reference to the bounded list identified by ACO.
    *
    * @return A reference to the bounded list identified by ACO.
    */
  virtual uci::type::OrderTraceabilityType::ACO& getACO() = 0;

  /** Sets the bounded list identified by ACO.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setACO(const uci::type::OrderTraceabilityType::ACO& value) = 0;

  /** Returns a const reference to the bounded list identified by ACTDF.
    *
    * @return A const reference to the bounded list identified by ACTDF.
    */
  virtual const uci::type::OrderTraceabilityType::ACTDF& getACTDF() const = 0;

  /** Returns a reference to the bounded list identified by ACTDF.
    *
    * @return A reference to the bounded list identified by ACTDF.
    */
  virtual uci::type::OrderTraceabilityType::ACTDF& getACTDF() = 0;

  /** Sets the bounded list identified by ACTDF.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setACTDF(const uci::type::OrderTraceabilityType::ACTDF& value) = 0;

  /** Returns a const reference to the bounded list identified by RSTA.
    *
    * @return A const reference to the bounded list identified by RSTA.
    */
  virtual const uci::type::OrderTraceabilityType::RSTA& getRSTA() const = 0;

  /** Returns a reference to the bounded list identified by RSTA.
    *
    * @return A reference to the bounded list identified by RSTA.
    */
  virtual uci::type::OrderTraceabilityType::RSTA& getRSTA() = 0;

  /** Sets the bounded list identified by RSTA.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setRSTA(const uci::type::OrderTraceabilityType::RSTA& value) = 0;

  /** Returns a const reference to the bounded list identified by ROME_Identifier.
    *
    * @return A const reference to the bounded list identified by ROME_Identifier.
    */
  virtual const uci::type::OrderTraceabilityType::ROME_Identifier& getROME_Identifier() const = 0;

  /** Returns a reference to the bounded list identified by ROME_Identifier.
    *
    * @return A reference to the bounded list identified by ROME_Identifier.
    */
  virtual uci::type::OrderTraceabilityType::ROME_Identifier& getROME_Identifier() = 0;

  /** Sets the bounded list identified by ROME_Identifier.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setROME_Identifier(const uci::type::OrderTraceabilityType::ROME_Identifier& value) = 0;

  /** Returns a const reference to the bounded list identified by CollectionDeck.
    *
    * @return A const reference to the bounded list identified by CollectionDeck.
    */
  virtual const uci::type::OrderTraceabilityType::CollectionDeck& getCollectionDeck() const = 0;

  /** Returns a reference to the bounded list identified by CollectionDeck.
    *
    * @return A reference to the bounded list identified by CollectionDeck.
    */
  virtual uci::type::OrderTraceabilityType::CollectionDeck& getCollectionDeck() = 0;

  /** Sets the bounded list identified by CollectionDeck.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setCollectionDeck(const uci::type::OrderTraceabilityType::CollectionDeck& value) = 0;

  /** Returns a const reference to the bounded list identified by AOCO.
    *
    * @return A const reference to the bounded list identified by AOCO.
    */
  virtual const uci::type::OrderTraceabilityType::AOCO& getAOCO() const = 0;

  /** Returns a reference to the bounded list identified by AOCO.
    *
    * @return A reference to the bounded list identified by AOCO.
    */
  virtual uci::type::OrderTraceabilityType::AOCO& getAOCO() = 0;

  /** Sets the bounded list identified by AOCO.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setAOCO(const uci::type::OrderTraceabilityType::AOCO& value) = 0;

  /** Returns a const reference to the bounded list identified by SOD_ID.
    *
    * @return A const reference to the bounded list identified by SOD_ID.
    */
  virtual const uci::type::OrderTraceabilityType::SOD_ID& getSOD_ID() const = 0;

  /** Returns a reference to the bounded list identified by SOD_ID.
    *
    * @return A reference to the bounded list identified by SOD_ID.
    */
  virtual uci::type::OrderTraceabilityType::SOD_ID& getSOD_ID() = 0;

  /** Sets the bounded list identified by SOD_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setSOD_ID(const uci::type::OrderTraceabilityType::SOD_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by MSP_ID.
    *
    * @return A const reference to the bounded list identified by MSP_ID.
    */
  virtual const uci::type::OrderTraceabilityType::MSP_ID& getMSP_ID() const = 0;

  /** Returns a reference to the bounded list identified by MSP_ID.
    *
    * @return A reference to the bounded list identified by MSP_ID.
    */
  virtual uci::type::OrderTraceabilityType::MSP_ID& getMSP_ID() = 0;

  /** Sets the bounded list identified by MSP_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setMSP_ID(const uci::type::OrderTraceabilityType::MSP_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by ISSP_ID.
    *
    * @return A const reference to the bounded list identified by ISSP_ID.
    */
  virtual const uci::type::OrderTraceabilityType::ISSP_ID& getISSP_ID() const = 0;

  /** Returns a reference to the bounded list identified by ISSP_ID.
    *
    * @return A reference to the bounded list identified by ISSP_ID.
    */
  virtual uci::type::OrderTraceabilityType::ISSP_ID& getISSP_ID() = 0;

  /** Sets the bounded list identified by ISSP_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setISSP_ID(const uci::type::OrderTraceabilityType::ISSP_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by JIPTL_ID.
    *
    * @return A const reference to the bounded list identified by JIPTL_ID.
    */
  virtual const uci::type::OrderTraceabilityType::JIPTL_ID& getJIPTL_ID() const = 0;

  /** Returns a reference to the bounded list identified by JIPTL_ID.
    *
    * @return A reference to the bounded list identified by JIPTL_ID.
    */
  virtual uci::type::OrderTraceabilityType::JIPTL_ID& getJIPTL_ID() = 0;

  /** Sets the bounded list identified by JIPTL_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setJIPTL_ID(const uci::type::OrderTraceabilityType::JIPTL_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by JSTO_ID.
    *
    * @return A const reference to the bounded list identified by JSTO_ID.
    */
  virtual const uci::type::OrderTraceabilityType::JSTO_ID& getJSTO_ID() const = 0;

  /** Returns a reference to the bounded list identified by JSTO_ID.
    *
    * @return A reference to the bounded list identified by JSTO_ID.
    */
  virtual uci::type::OrderTraceabilityType::JSTO_ID& getJSTO_ID() = 0;

  /** Sets the bounded list identified by JSTO_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setJSTO_ID(const uci::type::OrderTraceabilityType::JSTO_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by PLANORD_ID.
    *
    * @return A const reference to the bounded list identified by PLANORD_ID.
    */
  virtual const uci::type::OrderTraceabilityType::PLANORD_ID& getPLANORD_ID() const = 0;

  /** Returns a reference to the bounded list identified by PLANORD_ID.
    *
    * @return A reference to the bounded list identified by PLANORD_ID.
    */
  virtual uci::type::OrderTraceabilityType::PLANORD_ID& getPLANORD_ID() = 0;

  /** Sets the bounded list identified by PLANORD_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setPLANORD_ID(const uci::type::OrderTraceabilityType::PLANORD_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by OPORD_ID.
    *
    * @return A const reference to the bounded list identified by OPORD_ID.
    */
  virtual const uci::type::OrderTraceabilityType::OPORD_ID& getOPORD_ID() const = 0;

  /** Returns a reference to the bounded list identified by OPORD_ID.
    *
    * @return A reference to the bounded list identified by OPORD_ID.
    */
  virtual uci::type::OrderTraceabilityType::OPORD_ID& getOPORD_ID() = 0;

  /** Sets the bounded list identified by OPORD_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setOPORD_ID(const uci::type::OrderTraceabilityType::OPORD_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by WARNORD_ID.
    *
    * @return A const reference to the bounded list identified by WARNORD_ID.
    */
  virtual const uci::type::OrderTraceabilityType::WARNORD_ID& getWARNORD_ID() const = 0;

  /** Returns a reference to the bounded list identified by WARNORD_ID.
    *
    * @return A reference to the bounded list identified by WARNORD_ID.
    */
  virtual uci::type::OrderTraceabilityType::WARNORD_ID& getWARNORD_ID() = 0;

  /** Sets the bounded list identified by WARNORD_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setWARNORD_ID(const uci::type::OrderTraceabilityType::WARNORD_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by DEPORD_ID.
    *
    * @return A const reference to the bounded list identified by DEPORD_ID.
    */
  virtual const uci::type::OrderTraceabilityType::DEPORD_ID& getDEPORD_ID() const = 0;

  /** Returns a reference to the bounded list identified by DEPORD_ID.
    *
    * @return A reference to the bounded list identified by DEPORD_ID.
    */
  virtual uci::type::OrderTraceabilityType::DEPORD_ID& getDEPORD_ID() = 0;

  /** Sets the bounded list identified by DEPORD_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setDEPORD_ID(const uci::type::OrderTraceabilityType::DEPORD_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by ALERTORD_ID.
    *
    * @return A const reference to the bounded list identified by ALERTORD_ID.
    */
  virtual const uci::type::OrderTraceabilityType::ALERTORD_ID& getALERTORD_ID() const = 0;

  /** Returns a reference to the bounded list identified by ALERTORD_ID.
    *
    * @return A reference to the bounded list identified by ALERTORD_ID.
    */
  virtual uci::type::OrderTraceabilityType::ALERTORD_ID& getALERTORD_ID() = 0;

  /** Sets the bounded list identified by ALERTORD_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setALERTORD_ID(const uci::type::OrderTraceabilityType::ALERTORD_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by FRAGORD_ID.
    *
    * @return A const reference to the bounded list identified by FRAGORD_ID.
    */
  virtual const uci::type::OrderTraceabilityType::FRAGORD_ID& getFRAGORD_ID() const = 0;

  /** Returns a reference to the bounded list identified by FRAGORD_ID.
    *
    * @return A reference to the bounded list identified by FRAGORD_ID.
    */
  virtual uci::type::OrderTraceabilityType::FRAGORD_ID& getFRAGORD_ID() = 0;

  /** Sets the bounded list identified by FRAGORD_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setFRAGORD_ID(const uci::type::OrderTraceabilityType::FRAGORD_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by EXORD_ID.
    *
    * @return A const reference to the bounded list identified by EXORD_ID.
    */
  virtual const uci::type::OrderTraceabilityType::EXORD_ID& getEXORD_ID() const = 0;

  /** Returns a reference to the bounded list identified by EXORD_ID.
    *
    * @return A reference to the bounded list identified by EXORD_ID.
    */
  virtual uci::type::OrderTraceabilityType::EXORD_ID& getEXORD_ID() = 0;

  /** Sets the bounded list identified by EXORD_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setEXORD_ID(const uci::type::OrderTraceabilityType::EXORD_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by SPINS_ID.
    *
    * @return A const reference to the bounded list identified by SPINS_ID.
    */
  virtual const uci::type::OrderTraceabilityType::SPINS_ID& getSPINS_ID() const = 0;

  /** Returns a reference to the bounded list identified by SPINS_ID.
    *
    * @return A reference to the bounded list identified by SPINS_ID.
    */
  virtual uci::type::OrderTraceabilityType::SPINS_ID& getSPINS_ID() = 0;

  /** Sets the bounded list identified by SPINS_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setSPINS_ID(const uci::type::OrderTraceabilityType::SPINS_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by COMMANDERS_INTENT_ID.
    *
    * @return A const reference to the bounded list identified by COMMANDERS_INTENT_ID.
    */
  virtual const uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID& getCOMMANDERS_INTENT_ID() const = 0;

  /** Returns a reference to the bounded list identified by COMMANDERS_INTENT_ID.
    *
    * @return A reference to the bounded list identified by COMMANDERS_INTENT_ID.
    */
  virtual uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID& getCOMMANDERS_INTENT_ID() = 0;

  /** Sets the bounded list identified by COMMANDERS_INTENT_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setCOMMANDERS_INTENT_ID(const uci::type::OrderTraceabilityType::COMMANDERS_INTENT_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by OTHER_FILE_ID.
    *
    * @return A const reference to the bounded list identified by OTHER_FILE_ID.
    */
  virtual const uci::type::OrderTraceabilityType::OTHER_FILE_ID& getOTHER_FILE_ID() const = 0;

  /** Returns a reference to the bounded list identified by OTHER_FILE_ID.
    *
    * @return A reference to the bounded list identified by OTHER_FILE_ID.
    */
  virtual uci::type::OrderTraceabilityType::OTHER_FILE_ID& getOTHER_FILE_ID() = 0;

  /** Sets the bounded list identified by OTHER_FILE_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderTraceabilityType& setOTHER_FILE_ID(const uci::type::OrderTraceabilityType::OTHER_FILE_ID& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OrderTraceabilityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OrderTraceabilityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OrderTraceabilityType to copy from.
    */
  OrderTraceabilityType(const OrderTraceabilityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OrderTraceabilityType to the contents of the OrderTraceabilityType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OrderTraceabilityType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this OrderTraceabilityType.
    * @return A reference to this OrderTraceabilityType.
    */
  OrderTraceabilityType& operator=(const OrderTraceabilityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ORDERTRACEABILITYTYPE_H

