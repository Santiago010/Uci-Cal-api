/** @file PO_ComponentSettingsProductSettingsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_COMPONENTSETTINGSPRODUCTSETTINGSTYPE_H
#define UCI_TYPE_PO_COMPONENTSETTINGSPRODUCTSETTINGSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/FloatAccessor.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/ComponentControlsA_Type.h"
#include "uci/type/JPEG_SettingsType.h"
#include "uci/type/MISP_PackingPlanType.h"
#include "uci/type/NITF_PackingPlanPET.h"
#include "uci/type/PO_ProductGeneratorOutputID_Type.h"
#include "uci/type/ProductResolutionType.h"
#include "uci/type/SecurityInformationType.h"
#include "uci/type/VideoOutputSettingsType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_ComponentSettingsProductSettingsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PO_ComponentSettingsProductSettingsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_ComponentSettingsProductSettingsType.
    */
  static UCI_EXPORT PO_ComponentSettingsProductSettingsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_ComponentSettingsProductSettingsType initializing the data accessed by the new
    * PO_ComponentSettingsProductSettingsType using the data accessed by the specified
    * PO_ComponentSettingsProductSettingsType (cloning).
    *
    * @param accessor The PO_ComponentSettingsProductSettingsType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created PO_ComponentSettingsProductSettingsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_ComponentSettingsProductSettingsType.
    */
  static UCI_EXPORT PO_ComponentSettingsProductSettingsType& create(const PO_ComponentSettingsProductSettingsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_ComponentSettingsProductSettingsType. Use of the specified accessor after it
    * has been destroyed will result in undefined behavior.
    *
    * @param accessor The PO_ComponentSettingsProductSettingsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_ComponentSettingsProductSettingsType& accessor);

  /** Returns this accessor's type constant, i.e. pO_ComponentSettingsProductSettingsType.
    *
    * @return This accessor's type constant, i.e. pO_ComponentSettingsProductSettingsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_ComponentSettingsProductSettingsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PO_ComponentSettingsProductSettingsType.
    *
    * @return The version that was initialized from the uci:version attribute of PO_ComponentSettingsProductSettingsType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_ComponentSettingsProductSettingsType& accessor) = 0;

  /** Settings for the video encoder for generating video streams. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::VideoOutputSettingsType, uci::type::accessorType::videoOutputSettingsType> VideoOutput;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * GeneratorOutputID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      GeneratorOutputID.
    */
  virtual const uci::type::PO_ProductGeneratorOutputID_Type& getGeneratorOutputID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by GeneratorOutputID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by GeneratorOutputID.
    */
  virtual uci::type::PO_ProductGeneratorOutputID_Type& getGeneratorOutputID() = 0;

  /** Sets the complex content identified by GeneratorOutputID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GeneratorOutputID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& setGeneratorOutputID(const uci::type::PO_ProductGeneratorOutputID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ProductClassification.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ProductClassification.
    */
  virtual const uci::type::SecurityInformationType& getProductClassification() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ProductClassification.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ProductClassification.
    */
  virtual uci::type::SecurityInformationType& getProductClassification() = 0;

  /** Sets the complex content identified by ProductClassification to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ProductClassification.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& setProductClassification(const uci::type::SecurityInformationType& value) = 0;

  /** Returns whether the Element identified by ProductClassification exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProductClassification is enabled or not.
    */
  virtual bool hasProductClassification() const = 0;

  /** Enables the Element identified by ProductClassification.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ProductClassification.
    */
  virtual uci::type::SecurityInformationType& enableProductClassification(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ProductClassification.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& clearProductClassification() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by JPEG_Settings.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by JPEG_Settings.
    */
  virtual const uci::type::JPEG_SettingsType& getJPEG_Settings() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by JPEG_Settings.
    *
    * @return A reference to the accessor that provides access to the complex content identified by JPEG_Settings.
    */
  virtual uci::type::JPEG_SettingsType& getJPEG_Settings() = 0;

  /** Sets the complex content identified by JPEG_Settings to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by JPEG_Settings.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& setJPEG_Settings(const uci::type::JPEG_SettingsType& value) = 0;

  /** Returns whether the Element identified by JPEG_Settings exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by JPEG_Settings is enabled or not.
    */
  virtual bool hasJPEG_Settings() const = 0;

  /** Enables the Element identified by JPEG_Settings.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by JPEG_Settings.
    */
  virtual uci::type::JPEG_SettingsType& enableJPEG_Settings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by JPEG_Settings.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& clearJPEG_Settings() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by NITF_PackingPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by NITF_PackingPlan.
    */
  virtual const uci::type::NITF_PackingPlanPET& getNITF_PackingPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by NITF_PackingPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by NITF_PackingPlan.
    */
  virtual uci::type::NITF_PackingPlanPET& getNITF_PackingPlan() = 0;

  /** Sets the complex content identified by NITF_PackingPlan to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by NITF_PackingPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& setNITF_PackingPlan(const uci::type::NITF_PackingPlanPET& value) = 0;

  /** Returns whether the Element identified by NITF_PackingPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NITF_PackingPlan is enabled or not.
    */
  virtual bool hasNITF_PackingPlan() const = 0;

  /** Enables the Element identified by NITF_PackingPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by NITF_PackingPlan.
    */
  virtual uci::type::NITF_PackingPlanPET& enableNITF_PackingPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by NITF_PackingPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& clearNITF_PackingPlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by MISP_Settings.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by MISP_Settings.
    */
  virtual const uci::type::MISP_PackingPlanType& getMISP_Settings() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MISP_Settings.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MISP_Settings.
    */
  virtual uci::type::MISP_PackingPlanType& getMISP_Settings() = 0;

  /** Sets the complex content identified by MISP_Settings to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MISP_Settings.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& setMISP_Settings(const uci::type::MISP_PackingPlanType& value) = 0;

  /** Returns whether the Element identified by MISP_Settings exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MISP_Settings is enabled or not.
    */
  virtual bool hasMISP_Settings() const = 0;

  /** Enables the Element identified by MISP_Settings.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MISP_Settings.
    */
  virtual uci::type::MISP_PackingPlanType& enableMISP_Settings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MISP_Settings.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& clearMISP_Settings() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ProductRate.
    *
    * @return The value of the simple primitive data type identified by ProductRate.
    */
  virtual xs::UnsignedInt getProductRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ProductRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& setProductRate(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by ProductRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProductRate is enabled or not.
    */
  virtual bool hasProductRate() const = 0;

  /** Clears (disabled) the Element identified by ProductRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& clearProductRate() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ProductResolution.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ProductResolution.
    */
  virtual const uci::type::ProductResolutionType& getProductResolution() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ProductResolution.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ProductResolution.
    */
  virtual uci::type::ProductResolutionType& getProductResolution() = 0;

  /** Sets the complex content identified by ProductResolution to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ProductResolution.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& setProductResolution(const uci::type::ProductResolutionType& value) = 0;

  /** Returns whether the Element identified by ProductResolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProductResolution is enabled or not.
    */
  virtual bool hasProductResolution() const = 0;

  /** Enables the Element identified by ProductResolution.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ProductResolution.
    */
  virtual uci::type::ProductResolutionType& enableProductResolution(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ProductResolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& clearProductResolution() = 0;

  /** Returns the value of the SimplePrimitive data type identified by CompressionRatio.
    *
    * @return The value of the simple primitive data type identified by CompressionRatio.
    */
  virtual xs::Float getCompressionRatio() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CompressionRatio.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& setCompressionRatio(xs::Float value) = 0;

  /** Returns whether the Element identified by CompressionRatio exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CompressionRatio is enabled or not.
    */
  virtual bool hasCompressionRatio() const = 0;

  /** Clears (disabled) the Element identified by CompressionRatio.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& clearCompressionRatio() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ProductSize.
    *
    * @return The value of the simple primitive data type identified by ProductSize.
    */
  virtual xs::UnsignedInt getProductSize() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ProductSize.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& setProductSize(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by ProductSize exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProductSize is enabled or not.
    */
  virtual bool hasProductSize() const = 0;

  /** Clears (disabled) the Element identified by ProductSize.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& clearProductSize() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Interlaced.
    *
    * @return The value of the simple primitive data type identified by Interlaced.
    */
  virtual xs::Boolean getInterlaced() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Interlaced.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& setInterlaced(xs::Boolean value) = 0;

  /** Returns whether the Element identified by Interlaced exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Interlaced is enabled or not.
    */
  virtual bool hasInterlaced() const = 0;

  /** Clears (disabled) the Element identified by Interlaced.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& clearInterlaced() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ProductOutputControls.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ProductOutputControls.
    */
  virtual const uci::type::ComponentControlsA_Type& getProductOutputControls() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ProductOutputControls.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ProductOutputControls.
    */
  virtual uci::type::ComponentControlsA_Type& getProductOutputControls() = 0;

  /** Sets the complex content identified by ProductOutputControls to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ProductOutputControls.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& setProductOutputControls(const uci::type::ComponentControlsA_Type& value) = 0;

  /** Returns whether the Element identified by ProductOutputControls exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProductOutputControls is enabled or not.
    */
  virtual bool hasProductOutputControls() const = 0;

  /** Enables the Element identified by ProductOutputControls.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ProductOutputControls.
    */
  virtual uci::type::ComponentControlsA_Type& enableProductOutputControls(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ProductOutputControls.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& clearProductOutputControls() = 0;

  /** Returns a const reference to the bounded list identified by VideoOutput.
    *
    * @return A const reference to the bounded list identified by VideoOutput.
    */
  virtual const uci::type::PO_ComponentSettingsProductSettingsType::VideoOutput& getVideoOutput() const = 0;

  /** Returns a reference to the bounded list identified by VideoOutput.
    *
    * @return A reference to the bounded list identified by VideoOutput.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType::VideoOutput& getVideoOutput() = 0;

  /** Sets the bounded list identified by VideoOutput.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentSettingsProductSettingsType& setVideoOutput(const uci::type::PO_ComponentSettingsProductSettingsType::VideoOutput& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_ComponentSettingsProductSettingsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_ComponentSettingsProductSettingsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_ComponentSettingsProductSettingsType to copy from.
    */
  PO_ComponentSettingsProductSettingsType(const PO_ComponentSettingsProductSettingsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_ComponentSettingsProductSettingsType to the contents of the
    * PO_ComponentSettingsProductSettingsType on the right hand side (rhs) of the assignment operator [only available to
    * derived classes].
    *
    * @param rhs The PO_ComponentSettingsProductSettingsType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this PO_ComponentSettingsProductSettingsType.
    * @return A reference to this PO_ComponentSettingsProductSettingsType.
    */
  PO_ComponentSettingsProductSettingsType& operator=(const PO_ComponentSettingsProductSettingsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_COMPONENTSETTINGSPRODUCTSETTINGSTYPE_H

