/** @file ComponentType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMPONENTTYPE_H
#define UCI_TYPE_COMPONENTTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "BIT_ID_Type.h"
#include "ComponentDetailedStatusType.h"
#include "ComponentExtendedStatusPET.h"
#include "ComponentID_Type.h"
#include "ComponentStateEnum.h"
#include "DateTimeType.h"
#include "SubsystemMaintenanceID_Type.h"
#include "TemperatureStatusType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Contains component status information. See individual field annotations for more information. */
class ComponentType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ComponentType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ComponentType.
    */
  static UCI_EXPORT ComponentType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ComponentType initializing the data accessed by the new ComponentType using the data
    * accessed by the specified ComponentType (cloning).
    *
    * @param accessor The ComponentType that provides access to the data that is to be used to initialize the data accessed
    *      by the new created ComponentType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ComponentType.
    */
  static UCI_EXPORT ComponentType& create(const ComponentType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ComponentType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The ComponentType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ComponentType& accessor);

  /** Returns this accessor's type constant, i.e. componentType.
    *
    * @return This accessor's type constant, i.e. componentType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::componentType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ComponentType.
    *
    * @return The version that was initialized from the uci:version attribute of ComponentType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.001.003";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ComponentType& accessor) = 0;

  /** Indicates the temperature of the Subsystem Component corresponding to this message. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::TemperatureStatusType, uci::type::accessorType::temperatureStatusType> Temperature;

  /** This element is only applicable when the sibling ComponentState indicates a fault, in which case it specifies the BIT
    * or BITs in which failure was identified. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::BIT_ID_Type, uci::type::accessorType::bIT_ID_Type> BIT_ID;

  /** This element is only applicable when the sibling ComponentState indicates a fault, in which case it identifies the
    * additional diagnostic BIT or BITs that can be run to verify the fault has been repaired. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::BIT_ID_Type, uci::type::accessorType::bIT_ID_Type> DiagnosticTestID;

  /** This element provides a generic way of reporting specific or unique component status information. For example, it
    * could be used to report status for items in electrical equipment or hydraulic equipment that are documented outside
    * of UCI in an ICD or to report engine specific status information such as throttle. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ComponentDetailedStatusType, uci::type::accessorType::componentDetailedStatusType> SpecificStatus;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ComponentID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ComponentID.
    */
  virtual const uci::type::ComponentID_Type& getComponentID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ComponentID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ComponentID.
    */
  virtual uci::type::ComponentID_Type& getComponentID() = 0;

  /** Sets the complex content identified by ComponentID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ComponentID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentType& setComponentID(const uci::type::ComponentID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ComponentState.
    *
    * @return A const reference to the value of the enumeration identified by ComponentState.
    */
  virtual const uci::type::ComponentStateEnum& getComponentState() const = 0;

  /** Returns a reference to the value of the enumeration identified by ComponentState.
    *
    * @return A reference to the value of the enumeration identified by ComponentState.
    */
  virtual uci::type::ComponentStateEnum& getComponentState() = 0;

  /** Sets the value of the enumeration identified by ComponentState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentType& setComponentState(const uci::type::ComponentStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by ComponentState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentType& setComponentState(uci::type::ComponentStateEnum::EnumerationItem value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by DataTimestamp.
    *
    * @return The value of the simple primitive data type identified by DataTimestamp.
    */
  virtual uci::type::DateTimeTypeValue getDataTimestamp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DataTimestamp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentType& setDataTimestamp(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by DataTimestamp exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DataTimestamp is enabled or not.
    */
  virtual bool hasDataTimestamp() const = 0;

  /** Clears (disabled) the Element identified by DataTimestamp.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentType& clearDataTimestamp() = 0;

  /** Returns a const reference to the bounded list identified by Temperature.
    *
    * @return A const reference to the bounded list identified by Temperature.
    */
  virtual const uci::type::ComponentType::Temperature& getTemperature() const = 0;

  /** Returns a reference to the bounded list identified by Temperature.
    *
    * @return A reference to the bounded list identified by Temperature.
    */
  virtual uci::type::ComponentType::Temperature& getTemperature() = 0;

  /** Sets the bounded list identified by Temperature.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentType& setTemperature(const uci::type::ComponentType::Temperature& value) = 0;

  /** Returns a const reference to the bounded list identified by BIT_ID.
    *
    * @return A const reference to the bounded list identified by BIT_ID.
    */
  virtual const uci::type::ComponentType::BIT_ID& getBIT_ID() const = 0;

  /** Returns a reference to the bounded list identified by BIT_ID.
    *
    * @return A reference to the bounded list identified by BIT_ID.
    */
  virtual uci::type::ComponentType::BIT_ID& getBIT_ID() = 0;

  /** Sets the bounded list identified by BIT_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentType& setBIT_ID(const uci::type::ComponentType::BIT_ID& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by SubsystemCritical.
    *
    * @return The value of the simple primitive data type identified by SubsystemCritical.
    */
  virtual xs::Boolean getSubsystemCritical() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SubsystemCritical.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentType& setSubsystemCritical(xs::Boolean value) = 0;

  /** Returns whether the Element identified by SubsystemCritical exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SubsystemCritical is enabled or not.
    */
  virtual bool hasSubsystemCritical() const = 0;

  /** Clears (disabled) the Element identified by SubsystemCritical.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentType& clearSubsystemCritical() = 0;

  /** Returns a const reference to the bounded list identified by DiagnosticTestID.
    *
    * @return A const reference to the bounded list identified by DiagnosticTestID.
    */
  virtual const uci::type::ComponentType::DiagnosticTestID& getDiagnosticTestID() const = 0;

  /** Returns a reference to the bounded list identified by DiagnosticTestID.
    *
    * @return A reference to the bounded list identified by DiagnosticTestID.
    */
  virtual uci::type::ComponentType::DiagnosticTestID& getDiagnosticTestID() = 0;

  /** Sets the bounded list identified by DiagnosticTestID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentType& setDiagnosticTestID(const uci::type::ComponentType::DiagnosticTestID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ExtendedStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ExtendedStatus.
    */
  virtual const uci::type::ComponentExtendedStatusPET& getExtendedStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ExtendedStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ExtendedStatus.
    */
  virtual uci::type::ComponentExtendedStatusPET& getExtendedStatus() = 0;

  /** Sets the complex content identified by ExtendedStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ExtendedStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentType& setExtendedStatus(const uci::type::ComponentExtendedStatusPET& value) = 0;

  /** Returns whether the Element identified by ExtendedStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ExtendedStatus is enabled or not.
    */
  virtual bool hasExtendedStatus() const = 0;

  /** Enables the Element identified by ExtendedStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ExtendedStatus.
    */
  virtual uci::type::ComponentExtendedStatusPET& enableExtendedStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ExtendedStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentType& clearExtendedStatus() = 0;

  /** Returns a const reference to the bounded list identified by SpecificStatus.
    *
    * @return A const reference to the bounded list identified by SpecificStatus.
    */
  virtual const uci::type::ComponentType::SpecificStatus& getSpecificStatus() const = 0;

  /** Returns a reference to the bounded list identified by SpecificStatus.
    *
    * @return A reference to the bounded list identified by SpecificStatus.
    */
  virtual uci::type::ComponentType::SpecificStatus& getSpecificStatus() = 0;

  /** Sets the bounded list identified by SpecificStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentType& setSpecificStatus(const uci::type::ComponentType::SpecificStatus& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SubsystemMaintenanceTestID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SubsystemMaintenanceTestID.
    */
  virtual const uci::type::SubsystemMaintenanceID_Type& getSubsystemMaintenanceTestID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * SubsystemMaintenanceTestID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      SubsystemMaintenanceTestID.
    */
  virtual uci::type::SubsystemMaintenanceID_Type& getSubsystemMaintenanceTestID() = 0;

  /** Sets the complex content identified by SubsystemMaintenanceTestID to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SubsystemMaintenanceTestID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentType& setSubsystemMaintenanceTestID(const uci::type::SubsystemMaintenanceID_Type& value) = 0;

  /** Returns whether the Element identified by SubsystemMaintenanceTestID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SubsystemMaintenanceTestID is enabled or not.
    */
  virtual bool hasSubsystemMaintenanceTestID() const = 0;

  /** Enables the Element identified by SubsystemMaintenanceTestID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      SubsystemMaintenanceTestID.
    */
  virtual uci::type::SubsystemMaintenanceID_Type& enableSubsystemMaintenanceTestID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SubsystemMaintenanceTestID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ComponentType& clearSubsystemMaintenanceTestID() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ComponentType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ComponentType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ComponentType to copy from.
    */
  ComponentType(const ComponentType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ComponentType to the contents of the ComponentType on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ComponentType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this ComponentType.
    * @return A reference to this ComponentType.
    */
  ComponentType& operator=(const ComponentType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMPONENTTYPE_H

