/** @file IFF_ActivityCommandType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_IFF_ACTIVITYCOMMANDTYPE_H
#define UCI_TYPE_IFF_ACTIVITYCOMMANDTYPE_H

#include "uci/base/BoundedList.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/ActivityCommandBaseType.h"
#include "uci/type/AirTargetVolumeCommandType.h"
#include "uci/type/AirTargetVolumeType.h"
#include "uci/type/DependentActivityType.h"
#include "uci/type/IFF_CollectionConstraintsType.h"
#include "uci/type/IFF_InterrogatorTransponderModesType.h"
#include "uci/type/ProductOutputCommandBasicType.h"
#include "uci/type/RadarCollectionOptionsType.h"
#include "uci/type/RepetitionType.h"
#include "uci/type/ResourceSelectionType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class IFF_ActivityCommandType : public virtual ActivityCommandBaseType {
public:

  /** This method constructs a new IFF_ActivityCommandType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IFF_ActivityCommandType.
    */
  static UCI_EXPORT IFF_ActivityCommandType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new IFF_ActivityCommandType initializing the data accessed by the new
    * IFF_ActivityCommandType using the data accessed by the specified IFF_ActivityCommandType (cloning).
    *
    * @param accessor The IFF_ActivityCommandType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created IFF_ActivityCommandType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IFF_ActivityCommandType.
    */
  static UCI_EXPORT IFF_ActivityCommandType& create(const IFF_ActivityCommandType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified IFF_ActivityCommandType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The IFF_ActivityCommandType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(IFF_ActivityCommandType& accessor);

  /** Returns this accessor's type constant, i.e. iFF_ActivityCommandType.
    *
    * @return This accessor's type constant, i.e. iFF_ActivityCommandType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::iFF_ActivityCommandType;
  }

  /** Returns the version that was initialized from the uci:version attribute of IFF_ActivityCommandType.
    *
    * @return The version that was initialized from the uci:version attribute of IFF_ActivityCommandType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const IFF_ActivityCommandType& accessor) = 0;

  /** Indicates the unique ID of a Shared Antenna and/or AntennaResources to be used for the resulting Activity. This
    * allows Mission Processing to direct an specific antenna, antenna resource type, or antenna resource instance to be
    * used by the resulting Activity. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ResourceSelectionType, uci::type::accessorType::resourceSelectionType> ResourceSelection;

  /** Indicates the volume or specific Entity that defines the extents of the spatial region covered by the command.
    * [Occurrences: Minimum: 0; Maximum: 2]
    */
  typedef uci::base::BoundedList<uci::type::AirTargetVolumeCommandType, uci::type::accessorType::airTargetVolumeCommandType> TargetVolume;

  /** Indicates an air volume that should be "blanked"; the Capability should not generate outputs associated with the
    * volume because it is a known source of clutter or other interference for the Capability. For example, a blanking
    * volume could be created around a wind farm that interferes with IFF. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::AirTargetVolumeType, uci::type::accessorType::airTargetVolumeType> BlankingVolume;

  /** Indicates a required output Product of the Command. Only Products consistent with IFF and supported by the commanded
    * IFF Capability should be requested. If omitted, no output Product should be produced. See ProductTypeEnum for further
    * details. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductOutputCommandBasicType, uci::type::accessorType::productOutputCommandBasicType> ProductOutput;

  /** Returns the value of the SimplePrimitive data type identified by Attempt.
    *
    * @return The value of the simple primitive data type identified by Attempt.
    */
  virtual xs::UnsignedInt getAttempt() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Attempt.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ActivityCommandType& setAttempt(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by Attempt exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Attempt is enabled or not.
    */
  virtual bool hasAttempt() const = 0;

  /** Clears (disabled) the Element identified by Attempt.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ActivityCommandType& clearAttempt() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ChangeDependentActivity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ChangeDependentActivity.
    */
  virtual const uci::type::DependentActivityType& getChangeDependentActivity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ChangeDependentActivity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ChangeDependentActivity.
    */
  virtual uci::type::DependentActivityType& getChangeDependentActivity() = 0;

  /** Sets the complex content identified by ChangeDependentActivity to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ChangeDependentActivity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ActivityCommandType& setChangeDependentActivity(const uci::type::DependentActivityType& value) = 0;

  /** Returns whether the Element identified by ChangeDependentActivity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ChangeDependentActivity is enabled or not.
    */
  virtual bool hasChangeDependentActivity() const = 0;

  /** Enables the Element identified by ChangeDependentActivity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ChangeDependentActivity.
    */
  virtual uci::type::DependentActivityType& enableChangeDependentActivity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ChangeDependentActivity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ActivityCommandType& clearChangeDependentActivity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SubCapabilityDetails.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SubCapabilityDetails.
    */
  virtual const uci::type::IFF_InterrogatorTransponderModesType& getSubCapabilityDetails() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SubCapabilityDetails.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SubCapabilityDetails.
    */
  virtual uci::type::IFF_InterrogatorTransponderModesType& getSubCapabilityDetails() = 0;

  /** Sets the complex content identified by SubCapabilityDetails to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SubCapabilityDetails.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ActivityCommandType& setSubCapabilityDetails(const uci::type::IFF_InterrogatorTransponderModesType& value) = 0;

  /** Returns a const reference to the bounded list identified by ResourceSelection.
    *
    * @return A const reference to the bounded list identified by ResourceSelection.
    */
  virtual const uci::type::IFF_ActivityCommandType::ResourceSelection& getResourceSelection() const = 0;

  /** Returns a reference to the bounded list identified by ResourceSelection.
    *
    * @return A reference to the bounded list identified by ResourceSelection.
    */
  virtual uci::type::IFF_ActivityCommandType::ResourceSelection& getResourceSelection() = 0;

  /** Sets the bounded list identified by ResourceSelection.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ActivityCommandType& setResourceSelection(const uci::type::IFF_ActivityCommandType::ResourceSelection& value) = 0;

  /** Returns a const reference to the bounded list identified by TargetVolume.
    *
    * @return A const reference to the bounded list identified by TargetVolume.
    */
  virtual const uci::type::IFF_ActivityCommandType::TargetVolume& getTargetVolume() const = 0;

  /** Returns a reference to the bounded list identified by TargetVolume.
    *
    * @return A reference to the bounded list identified by TargetVolume.
    */
  virtual uci::type::IFF_ActivityCommandType::TargetVolume& getTargetVolume() = 0;

  /** Sets the bounded list identified by TargetVolume.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ActivityCommandType& setTargetVolume(const uci::type::IFF_ActivityCommandType::TargetVolume& value) = 0;

  /** Returns a const reference to the bounded list identified by BlankingVolume.
    *
    * @return A const reference to the bounded list identified by BlankingVolume.
    */
  virtual const uci::type::IFF_ActivityCommandType::BlankingVolume& getBlankingVolume() const = 0;

  /** Returns a reference to the bounded list identified by BlankingVolume.
    *
    * @return A reference to the bounded list identified by BlankingVolume.
    */
  virtual uci::type::IFF_ActivityCommandType::BlankingVolume& getBlankingVolume() = 0;

  /** Sets the bounded list identified by BlankingVolume.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ActivityCommandType& setBlankingVolume(const uci::type::IFF_ActivityCommandType::BlankingVolume& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CollectionOptions.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CollectionOptions.
    */
  virtual const uci::type::RadarCollectionOptionsType& getCollectionOptions() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CollectionOptions.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CollectionOptions.
    */
  virtual uci::type::RadarCollectionOptionsType& getCollectionOptions() = 0;

  /** Sets the complex content identified by CollectionOptions to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionOptions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ActivityCommandType& setCollectionOptions(const uci::type::RadarCollectionOptionsType& value) = 0;

  /** Enables the Element identified by CollectionOptions.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return A reference to the accessor that provides access to the complex content identified by CollectionOptions.
    */
  virtual uci::type::RadarCollectionOptionsType& enableCollectionOptions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CollectionConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CollectionConstraints.
    */
  virtual const uci::type::IFF_CollectionConstraintsType& getCollectionConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CollectionConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CollectionConstraints.
    */
  virtual uci::type::IFF_CollectionConstraintsType& getCollectionConstraints() = 0;

  /** Sets the complex content identified by CollectionConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ActivityCommandType& setCollectionConstraints(const uci::type::IFF_CollectionConstraintsType& value) = 0;

  /** Returns whether the Element identified by CollectionConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionConstraints is enabled or not.
    */
  virtual bool hasCollectionConstraints() const = 0;

  /** Enables the Element identified by CollectionConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CollectionConstraints.
    */
  virtual uci::type::IFF_CollectionConstraintsType& enableCollectionConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ActivityCommandType& clearCollectionConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual const uci::type::RepetitionType& getRepetition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& getRepetition() = 0;

  /** Sets the complex content identified by Repetition to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Repetition.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ActivityCommandType& setRepetition(const uci::type::RepetitionType& value) = 0;

  /** Returns whether the Element identified by Repetition exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Repetition is enabled or not.
    */
  virtual bool hasRepetition() const = 0;

  /** Enables the Element identified by Repetition.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& enableRepetition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Repetition.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ActivityCommandType& clearRepetition() = 0;

  /** Returns a const reference to the bounded list identified by ProductOutput.
    *
    * @return A const reference to the bounded list identified by ProductOutput.
    */
  virtual const uci::type::IFF_ActivityCommandType::ProductOutput& getProductOutput() const = 0;

  /** Returns a reference to the bounded list identified by ProductOutput.
    *
    * @return A reference to the bounded list identified by ProductOutput.
    */
  virtual uci::type::IFF_ActivityCommandType::ProductOutput& getProductOutput() = 0;

  /** Sets the bounded list identified by ProductOutput.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_ActivityCommandType& setProductOutput(const uci::type::IFF_ActivityCommandType::ProductOutput& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  IFF_ActivityCommandType() {
  }

  /** The destructor [only available to derived classes]. */
  ~IFF_ActivityCommandType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The IFF_ActivityCommandType to copy from.
    */
  IFF_ActivityCommandType(const IFF_ActivityCommandType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this IFF_ActivityCommandType to the contents of the
    * IFF_ActivityCommandType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The IFF_ActivityCommandType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this IFF_ActivityCommandType.
    * @return A reference to this IFF_ActivityCommandType.
    */
  IFF_ActivityCommandType& operator=(const IFF_ActivityCommandType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_IFF_ACTIVITYCOMMANDTYPE_H

