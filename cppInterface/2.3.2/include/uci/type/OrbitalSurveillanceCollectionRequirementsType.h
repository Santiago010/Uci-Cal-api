/** @file OrbitalSurveillanceCollectionRequirementsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_H
#define UCI_TYPE_ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "DeploymentDetectionType.h"
#include "ManeuverDetectionType.h"
#include "MetricCollectionType.h"
#include "MultiObjectType.h"
#include "OrbitAccuracyType.h"
#include "SensorCharacterizationChoiceType.h"
#include "SpeedRangeType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates orbital surveillance instructions and information to the sensor to enable appropriate sensor set-up and
  * data collection to meet the orbital surveillance collection need.
  */
class OrbitalSurveillanceCollectionRequirementsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OrbitalSurveillanceCollectionRequirementsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitalSurveillanceCollectionRequirementsType.
    */
  static UCI_EXPORT OrbitalSurveillanceCollectionRequirementsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OrbitalSurveillanceCollectionRequirementsType initializing the data accessed by the new
    * OrbitalSurveillanceCollectionRequirementsType using the data accessed by the specified
    * OrbitalSurveillanceCollectionRequirementsType (cloning).
    *
    * @param accessor The OrbitalSurveillanceCollectionRequirementsType that provides access to the data that is to be used
    *      to initialize the data accessed by the new created OrbitalSurveillanceCollectionRequirementsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitalSurveillanceCollectionRequirementsType.
    */
  static UCI_EXPORT OrbitalSurveillanceCollectionRequirementsType& create(const OrbitalSurveillanceCollectionRequirementsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OrbitalSurveillanceCollectionRequirementsType. Use of the specified accessor after
    * it has been destroyed will result in undefined behavior.
    *
    * @param accessor The OrbitalSurveillanceCollectionRequirementsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OrbitalSurveillanceCollectionRequirementsType& accessor);

  /** Returns this accessor's type constant, i.e. orbitalSurveillanceCollectionRequirementsType.
    *
    * @return This accessor's type constant, i.e. orbitalSurveillanceCollectionRequirementsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::orbitalSurveillanceCollectionRequirementsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of
    * OrbitalSurveillanceCollectionRequirementsType.
    *
    * @return The version that was initialized from the uci:version attribute of
    *      OrbitalSurveillanceCollectionRequirementsType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OrbitalSurveillanceCollectionRequirementsType& accessor) = 0;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum OrbitalSurveillanceCollectionRequirementsTypeChoice {
    ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_NONE,
    ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_METRICCOLLECTION,
    ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_SEARCH,
    ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_ORBITDETERMINATION,
    ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_CHARACTERIZATION,
    ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_MULTIOBJECT,
    ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_MANEUVERDETECTION,
    ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_CHOICE_DEPLOYMENTDETECTION
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual OrbitalSurveillanceCollectionRequirementsTypeChoice getOrbitalSurveillanceCollectionRequirementsTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getOrbitalSurveillanceCollectionRequirementsTypeChoiceOrdinal() will be the ordinal specified when this method was
    * invoked. In addition, the access methods associated with the chosen element will be enabled and will provide access
    * to the chosen element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceCollectionRequirementsType& setOrbitalSurveillanceCollectionRequirementsTypeChoiceOrdinal(OrbitalSurveillanceCollectionRequirementsTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by MetricCollection.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by MetricCollection.
    */
  virtual const uci::type::MetricCollectionType& getMetricCollection() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MetricCollection.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MetricCollection.
    */
  virtual uci::type::MetricCollectionType& getMetricCollection() = 0;

  /** Sets the complex content identified by MetricCollection to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MetricCollection.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceCollectionRequirementsType& setMetricCollection(const uci::type::MetricCollectionType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by MetricCollection.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by MetricCollection, false
    *      otherwise.
    */
  virtual bool isMetricCollection() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by MetricCollection.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by MetricCollection.
    */
  virtual uci::type::MetricCollectionType& chooseMetricCollection(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Search.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Search.
    */
  virtual const uci::type::SpeedRangeType& getSearch() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Search.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Search.
    */
  virtual uci::type::SpeedRangeType& getSearch() = 0;

  /** Sets the complex content identified by Search to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Search.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceCollectionRequirementsType& setSearch(const uci::type::SpeedRangeType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Search.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Search, false otherwise.
    */
  virtual bool isSearch() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Search.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Search.
    */
  virtual uci::type::SpeedRangeType& chooseSearch(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrbitDetermination.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrbitDetermination.
    */
  virtual const uci::type::OrbitAccuracyType& getOrbitDetermination() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitDetermination.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitDetermination.
    */
  virtual uci::type::OrbitAccuracyType& getOrbitDetermination() = 0;

  /** Sets the complex content identified by OrbitDetermination to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitDetermination.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceCollectionRequirementsType& setOrbitDetermination(const uci::type::OrbitAccuracyType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OrbitDetermination.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OrbitDetermination, false
    *      otherwise.
    */
  virtual bool isOrbitDetermination() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitDetermination.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitDetermination.
    */
  virtual uci::type::OrbitAccuracyType& chooseOrbitDetermination(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Characterization.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Characterization.
    */
  virtual const uci::type::SensorCharacterizationChoiceType& getCharacterization() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Characterization.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Characterization.
    */
  virtual uci::type::SensorCharacterizationChoiceType& getCharacterization() = 0;

  /** Sets the complex content identified by Characterization to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Characterization.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceCollectionRequirementsType& setCharacterization(const uci::type::SensorCharacterizationChoiceType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Characterization.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Characterization, false
    *      otherwise.
    */
  virtual bool isCharacterization() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Characterization.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Characterization.
    */
  virtual uci::type::SensorCharacterizationChoiceType& chooseCharacterization(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by MultiObject.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by MultiObject.
    */
  virtual const uci::type::MultiObjectType& getMultiObject() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MultiObject.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MultiObject.
    */
  virtual uci::type::MultiObjectType& getMultiObject() = 0;

  /** Sets the complex content identified by MultiObject to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MultiObject.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceCollectionRequirementsType& setMultiObject(const uci::type::MultiObjectType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by MultiObject.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by MultiObject, false otherwise.
    */
  virtual bool isMultiObject() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by MultiObject.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by MultiObject.
    */
  virtual uci::type::MultiObjectType& chooseMultiObject(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ManeuverDetection.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ManeuverDetection.
    */
  virtual const uci::type::ManeuverDetectionType& getManeuverDetection() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ManeuverDetection.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ManeuverDetection.
    */
  virtual uci::type::ManeuverDetectionType& getManeuverDetection() = 0;

  /** Sets the complex content identified by ManeuverDetection to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ManeuverDetection.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceCollectionRequirementsType& setManeuverDetection(const uci::type::ManeuverDetectionType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ManeuverDetection.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ManeuverDetection, false
    *      otherwise.
    */
  virtual bool isManeuverDetection() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ManeuverDetection.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ManeuverDetection.
    */
  virtual uci::type::ManeuverDetectionType& chooseManeuverDetection(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * DeploymentDetection.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      DeploymentDetection.
    */
  virtual const uci::type::DeploymentDetectionType& getDeploymentDetection() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DeploymentDetection.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DeploymentDetection.
    */
  virtual uci::type::DeploymentDetectionType& getDeploymentDetection() = 0;

  /** Sets the complex content identified by DeploymentDetection to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DeploymentDetection.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceCollectionRequirementsType& setDeploymentDetection(const uci::type::DeploymentDetectionType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by DeploymentDetection.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by DeploymentDetection, false
    *      otherwise.
    */
  virtual bool isDeploymentDetection() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by DeploymentDetection.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by DeploymentDetection.
    */
  virtual uci::type::DeploymentDetectionType& chooseDeploymentDetection(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OrbitalSurveillanceCollectionRequirementsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OrbitalSurveillanceCollectionRequirementsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OrbitalSurveillanceCollectionRequirementsType to copy from.
    */
  OrbitalSurveillanceCollectionRequirementsType(const OrbitalSurveillanceCollectionRequirementsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OrbitalSurveillanceCollectionRequirementsType to the contents of
    * the OrbitalSurveillanceCollectionRequirementsType on the right hand side (rhs) of the assignment operator [only
    * available to derived classes].
    *
    * @param rhs The OrbitalSurveillanceCollectionRequirementsType on the right hand side (rhs) of the assignment operator
    *      whose contents are used to set the contents of this OrbitalSurveillanceCollectionRequirementsType.
    * @return A reference to this OrbitalSurveillanceCollectionRequirementsType.
    */
  OrbitalSurveillanceCollectionRequirementsType& operator=(const OrbitalSurveillanceCollectionRequirementsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ORBITALSURVEILLANCECOLLECTIONREQUIREMENTSTYPE_H

