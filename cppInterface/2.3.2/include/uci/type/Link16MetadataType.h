/** @file Link16MetadataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_LINK16METADATATYPE_H
#define UCI_TYPE_LINK16METADATATYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CommCountermeasureSetEnum.h"
#include "ConnectionStatusEnum.h"
#include "DateTimeType.h"
#include "DefensiveJammerSystemInfoType.h"
#include "GenericUnitTypeEnum.h"
#include "JammerStationType.h"
#include "Link16ActiveRelayIndicatorsType.h"
#include "Link16TrackNumberType.h"
#include "Link16_ControlChannelType.h"
#include "Link16_MissileChannelType.h"
#include "Link16_RadarChannelType.h"
#include "NPSI_Enum.h"
#include "NetworkLinkID_Type.h"
#include "OperationalCapabilityEnum.h"
#include "PositionTimeQualityEnum.h"
#include "RadarChannelIndicatorEnum.h"
#include "ReconnaissanceStatusType.h"
#include "SiteEnum.h"
#include "SystemID_Type.h"
#include "TrackNumberOrEntityType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class Link16MetadataType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new Link16MetadataType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed Link16MetadataType.
    */
  static UCI_EXPORT Link16MetadataType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new Link16MetadataType initializing the data accessed by the new Link16MetadataType using
    * the data accessed by the specified Link16MetadataType (cloning).
    *
    * @param accessor The Link16MetadataType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created Link16MetadataType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed Link16MetadataType.
    */
  static UCI_EXPORT Link16MetadataType& create(const Link16MetadataType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified Link16MetadataType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The Link16MetadataType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(Link16MetadataType& accessor);

  /** Returns this accessor's type constant, i.e. link16MetadataType.
    *
    * @return This accessor's type constant, i.e. link16MetadataType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::link16MetadataType;
  }

  /** Returns the version that was initialized from the uci:version attribute of Link16MetadataType.
    *
    * @return The version that was initialized from the uci:version attribute of Link16MetadataType.
    */
  static std::string getUCITypeVersion() {
    return "000.001.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const Link16MetadataType& accessor) = 0;

  /** Indicates the type and status of a defensive jammer. [Occurrences: Minimum: 0; Maximum: 2] */
  typedef uci::base::BoundedList<uci::type::DefensiveJammerSystemInfoType, uci::type::accessorType::defensiveJammerSystemInfoType> DefensiveJammerSystemInfo;

  /** Indicates the type of an external offensive jammer. Multiplicity size of 10 based on MIL-STD-6016. [Occurrences:
    * Minimum: 0; Maximum: 10]
    */
  typedef uci::base::BoundedList<uci::type::JammerStationType, uci::type::accessorType::jammerStationType> JammerStation;

  /** Returns a const reference to the accessor that provides access to the complex content identified by NetworkLinkID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by NetworkLinkID.
    */
  virtual const uci::type::NetworkLinkID_Type& getNetworkLinkID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by NetworkLinkID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by NetworkLinkID.
    */
  virtual uci::type::NetworkLinkID_Type& getNetworkLinkID() = 0;

  /** Sets the complex content identified by NetworkLinkID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by NetworkLinkID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setNetworkLinkID(const uci::type::NetworkLinkID_Type& value) = 0;

  /** Returns whether the Element identified by NetworkLinkID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NetworkLinkID is enabled or not.
    */
  virtual bool hasNetworkLinkID() const = 0;

  /** Enables the Element identified by NetworkLinkID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by NetworkLinkID.
    */
  virtual uci::type::NetworkLinkID_Type& enableNetworkLinkID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by NetworkLinkID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearNetworkLinkID() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by SourceTrack.
    *
    * @return A const reference to the accessor that provides access to the string identified by SourceTrack.
    */
  virtual const uci::type::Link16TrackNumberType& getSourceTrack() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by SourceTrack.
    *
    * @return A reference to the accessor that provides access to the string identified by SourceTrack.
    */
  virtual uci::type::Link16TrackNumberType& getSourceTrack() = 0;

  /** Sets the string identified by SourceTrack to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by SourceTrack.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setSourceTrack(const uci::type::Link16TrackNumberType& value) = 0;

  /** Sets the string identified by SourceTrack to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setSourceTrack(const std::string& value) = 0;

  /** Sets the string identified by SourceTrack to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setSourceTrack(const char* value) = 0;

  /** Returns whether the Element identified by SourceTrack exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SourceTrack is enabled or not.
    */
  virtual bool hasSourceTrack() const = 0;

  /** Enables the Element identified by SourceTrack.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by SourceTrack.
    */
  virtual uci::type::Link16TrackNumberType& enableSourceTrack(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SourceTrack.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearSourceTrack() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ReportingSystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ReportingSystemID.
    */
  virtual const uci::type::SystemID_Type& getReportingSystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ReportingSystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ReportingSystemID.
    */
  virtual uci::type::SystemID_Type& getReportingSystemID() = 0;

  /** Sets the complex content identified by ReportingSystemID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ReportingSystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setReportingSystemID(const uci::type::SystemID_Type& value) = 0;

  /** Returns whether the Element identified by ReportingSystemID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReportingSystemID is enabled or not.
    */
  virtual bool hasReportingSystemID() const = 0;

  /** Enables the Element identified by ReportingSystemID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ReportingSystemID.
    */
  virtual uci::type::SystemID_Type& enableReportingSystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReportingSystemID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearReportingSystemID() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Airborne.
    *
    * @return The value of the simple primitive data type identified by Airborne.
    */
  virtual xs::Boolean getAirborne() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Airborne.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setAirborne(xs::Boolean value) = 0;

  /** Returns whether the Element identified by Airborne exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Airborne is enabled or not.
    */
  virtual bool hasAirborne() const = 0;

  /** Clears (disabled) the Element identified by Airborne.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearAirborne() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ControlChannel.
    *
    * @return The value of the simple primitive data type identified by ControlChannel.
    */
  virtual uci::type::Link16_ControlChannelTypeValue getControlChannel() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ControlChannel.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setControlChannel(uci::type::Link16_ControlChannelTypeValue value) = 0;

  /** Returns whether the Element identified by ControlChannel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ControlChannel is enabled or not.
    */
  virtual bool hasControlChannel() const = 0;

  /** Clears (disabled) the Element identified by ControlChannel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearControlChannel() = 0;

  /** Returns the value of the SimplePrimitive data type identified by FlightLeadIndicator.
    *
    * @return The value of the simple primitive data type identified by FlightLeadIndicator.
    */
  virtual xs::Boolean getFlightLeadIndicator() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FlightLeadIndicator.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setFlightLeadIndicator(xs::Boolean value) = 0;

  /** Returns whether the Element identified by FlightLeadIndicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FlightLeadIndicator is enabled or not.
    */
  virtual bool hasFlightLeadIndicator() const = 0;

  /** Clears (disabled) the Element identified by FlightLeadIndicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearFlightLeadIndicator() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FlightLead.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FlightLead.
    */
  virtual const uci::type::TrackNumberOrEntityType& getFlightLead() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FlightLead.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FlightLead.
    */
  virtual uci::type::TrackNumberOrEntityType& getFlightLead() = 0;

  /** Sets the complex content identified by FlightLead to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FlightLead.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setFlightLead(const uci::type::TrackNumberOrEntityType& value) = 0;

  /** Returns whether the Element identified by FlightLead exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FlightLead is enabled or not.
    */
  virtual bool hasFlightLead() const = 0;

  /** Enables the Element identified by FlightLead.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by FlightLead.
    */
  virtual uci::type::TrackNumberOrEntityType& enableFlightLead(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FlightLead.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearFlightLead() = 0;

  /** Returns a const reference to the value of the enumeration identified by GenericUnitType.
    *
    * @return A const reference to the value of the enumeration identified by GenericUnitType.
    */
  virtual const uci::type::GenericUnitTypeEnum& getGenericUnitType() const = 0;

  /** Returns a reference to the value of the enumeration identified by GenericUnitType.
    *
    * @return A reference to the value of the enumeration identified by GenericUnitType.
    */
  virtual uci::type::GenericUnitTypeEnum& getGenericUnitType() = 0;

  /** Sets the value of the enumeration identified by GenericUnitType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setGenericUnitType(const uci::type::GenericUnitTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by GenericUnitType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setGenericUnitType(uci::type::GenericUnitTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by GenericUnitType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by GenericUnitType is enabled or not.
    */
  virtual bool hasGenericUnitType() const = 0;

  /** Enables the Element identified by GenericUnitType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by GenericUnitType.
    */
  virtual uci::type::GenericUnitTypeEnum& enableGenericUnitType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by GenericUnitType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearGenericUnitType() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MissionCommanderIndicator.
    *
    * @return The value of the simple primitive data type identified by MissionCommanderIndicator.
    */
  virtual xs::Boolean getMissionCommanderIndicator() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MissionCommanderIndicator.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setMissionCommanderIndicator(xs::Boolean value) = 0;

  /** Returns whether the Element identified by MissionCommanderIndicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MissionCommanderIndicator is enabled or not.
    */
  virtual bool hasMissionCommanderIndicator() const = 0;

  /** Clears (disabled) the Element identified by MissionCommanderIndicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearMissionCommanderIndicator() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PrecisionTime.
    *
    * @return The value of the simple primitive data type identified by PrecisionTime.
    */
  virtual uci::type::DateTimeTypeValue getPrecisionTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PrecisionTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setPrecisionTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by PrecisionTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PrecisionTime is enabled or not.
    */
  virtual bool hasPrecisionTime() const = 0;

  /** Clears (disabled) the Element identified by PrecisionTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearPrecisionTime() = 0;

  /** Returns a const reference to the value of the enumeration identified by PositionTimeQuality.
    *
    * @return A const reference to the value of the enumeration identified by PositionTimeQuality.
    */
  virtual const uci::type::PositionTimeQualityEnum& getPositionTimeQuality() const = 0;

  /** Returns a reference to the value of the enumeration identified by PositionTimeQuality.
    *
    * @return A reference to the value of the enumeration identified by PositionTimeQuality.
    */
  virtual uci::type::PositionTimeQualityEnum& getPositionTimeQuality() = 0;

  /** Sets the value of the enumeration identified by PositionTimeQuality.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setPositionTimeQuality(const uci::type::PositionTimeQualityEnum& value) = 0;

  /** Sets the value of the enumeration identified by PositionTimeQuality.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setPositionTimeQuality(uci::type::PositionTimeQualityEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by PositionTimeQuality exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PositionTimeQuality is enabled or not.
    */
  virtual bool hasPositionTimeQuality() const = 0;

  /** Enables the Element identified by PositionTimeQuality.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by PositionTimeQuality.
    */
  virtual uci::type::PositionTimeQualityEnum& enablePositionTimeQuality(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PositionTimeQuality.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearPositionTimeQuality() = 0;

  /** Returns a const reference to the value of the enumeration identified by Site.
    *
    * @return A const reference to the value of the enumeration identified by Site.
    */
  virtual const uci::type::SiteEnum& getSite() const = 0;

  /** Returns a reference to the value of the enumeration identified by Site.
    *
    * @return A reference to the value of the enumeration identified by Site.
    */
  virtual uci::type::SiteEnum& getSite() = 0;

  /** Sets the value of the enumeration identified by Site.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setSite(const uci::type::SiteEnum& value) = 0;

  /** Sets the value of the enumeration identified by Site.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setSite(uci::type::SiteEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Site exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Site is enabled or not.
    */
  virtual bool hasSite() const = 0;

  /** Enables the Element identified by Site.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Site.
    */
  virtual uci::type::SiteEnum& enableSite(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Site.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearSite() = 0;

  /** Returns a const reference to the value of the enumeration identified by OperationalCapability.
    *
    * @return A const reference to the value of the enumeration identified by OperationalCapability.
    */
  virtual const uci::type::OperationalCapabilityEnum& getOperationalCapability() const = 0;

  /** Returns a reference to the value of the enumeration identified by OperationalCapability.
    *
    * @return A reference to the value of the enumeration identified by OperationalCapability.
    */
  virtual uci::type::OperationalCapabilityEnum& getOperationalCapability() = 0;

  /** Sets the value of the enumeration identified by OperationalCapability.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setOperationalCapability(const uci::type::OperationalCapabilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by OperationalCapability.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setOperationalCapability(uci::type::OperationalCapabilityEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by OperationalCapability exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OperationalCapability is enabled or not.
    */
  virtual bool hasOperationalCapability() const = 0;

  /** Enables the Element identified by OperationalCapability.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by OperationalCapability.
    */
  virtual uci::type::OperationalCapabilityEnum& enableOperationalCapability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OperationalCapability.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearOperationalCapability() = 0;

  /** Returns a const reference to the value of the enumeration identified by Link16_Status.
    *
    * @return A const reference to the value of the enumeration identified by Link16_Status.
    */
  virtual const uci::type::ConnectionStatusEnum& getLink16_Status() const = 0;

  /** Returns a reference to the value of the enumeration identified by Link16_Status.
    *
    * @return A reference to the value of the enumeration identified by Link16_Status.
    */
  virtual uci::type::ConnectionStatusEnum& getLink16_Status() = 0;

  /** Sets the value of the enumeration identified by Link16_Status.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setLink16_Status(const uci::type::ConnectionStatusEnum& value) = 0;

  /** Sets the value of the enumeration identified by Link16_Status.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setLink16_Status(uci::type::ConnectionStatusEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Link16_Status exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Link16_Status is enabled or not.
    */
  virtual bool hasLink16_Status() const = 0;

  /** Enables the Element identified by Link16_Status.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Link16_Status.
    */
  virtual uci::type::ConnectionStatusEnum& enableLink16_Status(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Link16_Status.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearLink16_Status() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ReconnaissanceStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ReconnaissanceStatus.
    */
  virtual const uci::type::ReconnaissanceStatusType& getReconnaissanceStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ReconnaissanceStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ReconnaissanceStatus.
    */
  virtual uci::type::ReconnaissanceStatusType& getReconnaissanceStatus() = 0;

  /** Sets the complex content identified by ReconnaissanceStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ReconnaissanceStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setReconnaissanceStatus(const uci::type::ReconnaissanceStatusType& value) = 0;

  /** Returns whether the Element identified by ReconnaissanceStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReconnaissanceStatus is enabled or not.
    */
  virtual bool hasReconnaissanceStatus() const = 0;

  /** Enables the Element identified by ReconnaissanceStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ReconnaissanceStatus.
    */
  virtual uci::type::ReconnaissanceStatusType& enableReconnaissanceStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReconnaissanceStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearReconnaissanceStatus() = 0;

  /** Returns a const reference to the value of the enumeration identified by NetworkParticipationStatusIndicator.
    *
    * @return A const reference to the value of the enumeration identified by NetworkParticipationStatusIndicator.
    */
  virtual const uci::type::NPSI_Enum& getNetworkParticipationStatusIndicator() const = 0;

  /** Returns a reference to the value of the enumeration identified by NetworkParticipationStatusIndicator.
    *
    * @return A reference to the value of the enumeration identified by NetworkParticipationStatusIndicator.
    */
  virtual uci::type::NPSI_Enum& getNetworkParticipationStatusIndicator() = 0;

  /** Sets the value of the enumeration identified by NetworkParticipationStatusIndicator.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setNetworkParticipationStatusIndicator(const uci::type::NPSI_Enum& value) = 0;

  /** Sets the value of the enumeration identified by NetworkParticipationStatusIndicator.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setNetworkParticipationStatusIndicator(uci::type::NPSI_Enum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by NetworkParticipationStatusIndicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NetworkParticipationStatusIndicator is enabled or not.
    */
  virtual bool hasNetworkParticipationStatusIndicator() const = 0;

  /** Enables the Element identified by NetworkParticipationStatusIndicator.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by NetworkParticipationStatusIndicator.
    */
  virtual uci::type::NPSI_Enum& enableNetworkParticipationStatusIndicator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by NetworkParticipationStatusIndicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearNetworkParticipationStatusIndicator() = 0;

  /** Returns a const reference to the value of the enumeration identified by RadarChannelIndicator.
    *
    * @return A const reference to the value of the enumeration identified by RadarChannelIndicator.
    */
  virtual const uci::type::RadarChannelIndicatorEnum& getRadarChannelIndicator() const = 0;

  /** Returns a reference to the value of the enumeration identified by RadarChannelIndicator.
    *
    * @return A reference to the value of the enumeration identified by RadarChannelIndicator.
    */
  virtual uci::type::RadarChannelIndicatorEnum& getRadarChannelIndicator() = 0;

  /** Sets the value of the enumeration identified by RadarChannelIndicator.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setRadarChannelIndicator(const uci::type::RadarChannelIndicatorEnum& value) = 0;

  /** Sets the value of the enumeration identified by RadarChannelIndicator.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setRadarChannelIndicator(uci::type::RadarChannelIndicatorEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by RadarChannelIndicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RadarChannelIndicator is enabled or not.
    */
  virtual bool hasRadarChannelIndicator() const = 0;

  /** Enables the Element identified by RadarChannelIndicator.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by RadarChannelIndicator.
    */
  virtual uci::type::RadarChannelIndicatorEnum& enableRadarChannelIndicator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RadarChannelIndicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearRadarChannelIndicator() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RadarChannel.
    *
    * @return The value of the simple primitive data type identified by RadarChannel.
    */
  virtual uci::type::Link16_RadarChannelTypeValue getRadarChannel() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RadarChannel.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setRadarChannel(uci::type::Link16_RadarChannelTypeValue value) = 0;

  /** Returns whether the Element identified by RadarChannel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RadarChannel is enabled or not.
    */
  virtual bool hasRadarChannel() const = 0;

  /** Clears (disabled) the Element identified by RadarChannel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearRadarChannel() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MissileChannel.
    *
    * @return The value of the simple primitive data type identified by MissileChannel.
    */
  virtual uci::type::Link16_MissileChannelTypeValue getMissileChannel() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MissileChannel.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setMissileChannel(uci::type::Link16_MissileChannelTypeValue value) = 0;

  /** Returns whether the Element identified by MissileChannel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MissileChannel is enabled or not.
    */
  virtual bool hasMissileChannel() const = 0;

  /** Clears (disabled) the Element identified by MissileChannel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearMissileChannel() = 0;

  /** Returns a const reference to the bounded list identified by DefensiveJammerSystemInfo.
    *
    * @return A const reference to the bounded list identified by DefensiveJammerSystemInfo.
    */
  virtual const uci::type::Link16MetadataType::DefensiveJammerSystemInfo& getDefensiveJammerSystemInfo() const = 0;

  /** Returns a reference to the bounded list identified by DefensiveJammerSystemInfo.
    *
    * @return A reference to the bounded list identified by DefensiveJammerSystemInfo.
    */
  virtual uci::type::Link16MetadataType::DefensiveJammerSystemInfo& getDefensiveJammerSystemInfo() = 0;

  /** Sets the bounded list identified by DefensiveJammerSystemInfo.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setDefensiveJammerSystemInfo(const uci::type::Link16MetadataType::DefensiveJammerSystemInfo& value) = 0;

  /** Returns a const reference to the bounded list identified by JammerStation.
    *
    * @return A const reference to the bounded list identified by JammerStation.
    */
  virtual const uci::type::Link16MetadataType::JammerStation& getJammerStation() const = 0;

  /** Returns a reference to the bounded list identified by JammerStation.
    *
    * @return A reference to the bounded list identified by JammerStation.
    */
  virtual uci::type::Link16MetadataType::JammerStation& getJammerStation() = 0;

  /** Sets the bounded list identified by JammerStation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setJammerStation(const uci::type::Link16MetadataType::JammerStation& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by CommCountermeasureSet.
    *
    * @return A const reference to the value of the enumeration identified by CommCountermeasureSet.
    */
  virtual const uci::type::CommCountermeasureSetEnum& getCommCountermeasureSet() const = 0;

  /** Returns a reference to the value of the enumeration identified by CommCountermeasureSet.
    *
    * @return A reference to the value of the enumeration identified by CommCountermeasureSet.
    */
  virtual uci::type::CommCountermeasureSetEnum& getCommCountermeasureSet() = 0;

  /** Sets the value of the enumeration identified by CommCountermeasureSet.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setCommCountermeasureSet(const uci::type::CommCountermeasureSetEnum& value) = 0;

  /** Sets the value of the enumeration identified by CommCountermeasureSet.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setCommCountermeasureSet(uci::type::CommCountermeasureSetEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by CommCountermeasureSet exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CommCountermeasureSet is enabled or not.
    */
  virtual bool hasCommCountermeasureSet() const = 0;

  /** Enables the Element identified by CommCountermeasureSet.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by CommCountermeasureSet.
    */
  virtual uci::type::CommCountermeasureSetEnum& enableCommCountermeasureSet(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CommCountermeasureSet.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearCommCountermeasureSet() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ActiveRelayIndicators.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ActiveRelayIndicators.
    */
  virtual const uci::type::Link16ActiveRelayIndicatorsType& getActiveRelayIndicators() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActiveRelayIndicators.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActiveRelayIndicators.
    */
  virtual uci::type::Link16ActiveRelayIndicatorsType& getActiveRelayIndicators() = 0;

  /** Sets the complex content identified by ActiveRelayIndicators to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActiveRelayIndicators.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setActiveRelayIndicators(const uci::type::Link16ActiveRelayIndicatorsType& value) = 0;

  /** Returns whether the Element identified by ActiveRelayIndicators exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActiveRelayIndicators is enabled or not.
    */
  virtual bool hasActiveRelayIndicators() const = 0;

  /** Enables the Element identified by ActiveRelayIndicators.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActiveRelayIndicators.
    */
  virtual uci::type::Link16ActiveRelayIndicatorsType& enableActiveRelayIndicators(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActiveRelayIndicators.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearActiveRelayIndicators() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by MissionCommander.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by MissionCommander.
    */
  virtual const uci::type::TrackNumberOrEntityType& getMissionCommander() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MissionCommander.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MissionCommander.
    */
  virtual uci::type::TrackNumberOrEntityType& getMissionCommander() = 0;

  /** Sets the complex content identified by MissionCommander to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MissionCommander.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& setMissionCommander(const uci::type::TrackNumberOrEntityType& value) = 0;

  /** Returns whether the Element identified by MissionCommander exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MissionCommander is enabled or not.
    */
  virtual bool hasMissionCommander() const = 0;

  /** Enables the Element identified by MissionCommander.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MissionCommander.
    */
  virtual uci::type::TrackNumberOrEntityType& enableMissionCommander(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MissionCommander.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16MetadataType& clearMissionCommander() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  Link16MetadataType() {
  }

  /** The destructor [only available to derived classes]. */
  ~Link16MetadataType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The Link16MetadataType to copy from.
    */
  Link16MetadataType(const Link16MetadataType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this Link16MetadataType to the contents of the Link16MetadataType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The Link16MetadataType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this Link16MetadataType.
    * @return A reference to this Link16MetadataType.
    */
  Link16MetadataType& operator=(const Link16MetadataType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_LINK16METADATATYPE_H

