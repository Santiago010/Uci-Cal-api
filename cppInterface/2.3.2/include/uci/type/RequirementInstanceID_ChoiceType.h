/** @file RequirementInstanceID_ChoiceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_REQUIREMENTINSTANCEID_CHOICETYPE_H
#define UCI_TYPE_REQUIREMENTINSTANCEID_CHOICETYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/ActionID_Type.h"
#include "uci/type/CommandID_Type.h"
#include "uci/type/EffectID_Type.h"
#include "uci/type/ResponseID_Type.h"
#include "uci/type/TaskID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class RequirementInstanceID_ChoiceType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RequirementInstanceID_ChoiceType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RequirementInstanceID_ChoiceType.
    */
  static UCI_EXPORT RequirementInstanceID_ChoiceType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RequirementInstanceID_ChoiceType initializing the data accessed by the new
    * RequirementInstanceID_ChoiceType using the data accessed by the specified RequirementInstanceID_ChoiceType (cloning).
    *
    * @param accessor The RequirementInstanceID_ChoiceType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created RequirementInstanceID_ChoiceType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RequirementInstanceID_ChoiceType.
    */
  static UCI_EXPORT RequirementInstanceID_ChoiceType& create(const RequirementInstanceID_ChoiceType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RequirementInstanceID_ChoiceType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The RequirementInstanceID_ChoiceType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RequirementInstanceID_ChoiceType& accessor);

  /** Returns this accessor's type constant, i.e. requirementInstanceID_ChoiceType.
    *
    * @return This accessor's type constant, i.e. requirementInstanceID_ChoiceType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::requirementInstanceID_ChoiceType;
  }

  /** Returns the version that was initialized from the uci:version attribute of RequirementInstanceID_ChoiceType.
    *
    * @return The version that was initialized from the uci:version attribute of RequirementInstanceID_ChoiceType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RequirementInstanceID_ChoiceType& accessor) = 0;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum RequirementInstanceID_ChoiceTypeChoice {
    REQUIREMENTINSTANCEID_CHOICETYPE_CHOICE_NONE,
    REQUIREMENTINSTANCEID_CHOICETYPE_CHOICE_EFFECTID,
    REQUIREMENTINSTANCEID_CHOICETYPE_CHOICE_ACTIONID,
    REQUIREMENTINSTANCEID_CHOICETYPE_CHOICE_TASKID,
    REQUIREMENTINSTANCEID_CHOICETYPE_CHOICE_CAPABILITYCOMMANDID,
    REQUIREMENTINSTANCEID_CHOICETYPE_CHOICE_RESPONSEID
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual RequirementInstanceID_ChoiceTypeChoice getRequirementInstanceID_ChoiceTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getRequirementInstanceID_ChoiceTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In
    * addition, the access methods associated with the chosen element will be enabled and will provide access to the chosen
    * element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementInstanceID_ChoiceType& setRequirementInstanceID_ChoiceTypeChoiceOrdinal(RequirementInstanceID_ChoiceTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EffectID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EffectID.
    */
  virtual const uci::type::EffectID_Type& getEffectID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EffectID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EffectID.
    */
  virtual uci::type::EffectID_Type& getEffectID() = 0;

  /** Sets the complex content identified by EffectID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EffectID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementInstanceID_ChoiceType& setEffectID(const uci::type::EffectID_Type& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by EffectID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by EffectID, false otherwise.
    */
  virtual bool isEffectID() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by EffectID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EffectID.
    */
  virtual uci::type::EffectID_Type& chooseEffectID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActionID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActionID.
    */
  virtual const uci::type::ActionID_Type& getActionID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActionID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActionID.
    */
  virtual uci::type::ActionID_Type& getActionID() = 0;

  /** Sets the complex content identified by ActionID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActionID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementInstanceID_ChoiceType& setActionID(const uci::type::ActionID_Type& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ActionID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ActionID, false otherwise.
    */
  virtual bool isActionID() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ActionID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ActionID.
    */
  virtual uci::type::ActionID_Type& chooseActionID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TaskID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual const uci::type::TaskID_Type& getTaskID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TaskID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual uci::type::TaskID_Type& getTaskID() = 0;

  /** Sets the complex content identified by TaskID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TaskID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementInstanceID_ChoiceType& setTaskID(const uci::type::TaskID_Type& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by TaskID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by TaskID, false otherwise.
    */
  virtual bool isTaskID() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by TaskID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by TaskID.
    */
  virtual uci::type::TaskID_Type& chooseTaskID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CapabilityCommandID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CapabilityCommandID.
    */
  virtual const uci::type::CommandID_Type& getCapabilityCommandID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CapabilityCommandID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityCommandID.
    */
  virtual uci::type::CommandID_Type& getCapabilityCommandID() = 0;

  /** Sets the complex content identified by CapabilityCommandID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CapabilityCommandID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementInstanceID_ChoiceType& setCapabilityCommandID(const uci::type::CommandID_Type& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CapabilityCommandID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CapabilityCommandID, false
    *      otherwise.
    */
  virtual bool isCapabilityCommandID() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by CapabilityCommandID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CapabilityCommandID.
    */
  virtual uci::type::CommandID_Type& chooseCapabilityCommandID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ResponseID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ResponseID.
    */
  virtual const uci::type::ResponseID_Type& getResponseID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ResponseID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ResponseID.
    */
  virtual uci::type::ResponseID_Type& getResponseID() = 0;

  /** Sets the complex content identified by ResponseID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ResponseID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementInstanceID_ChoiceType& setResponseID(const uci::type::ResponseID_Type& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ResponseID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ResponseID, false otherwise.
    */
  virtual bool isResponseID() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ResponseID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ResponseID.
    */
  virtual uci::type::ResponseID_Type& chooseResponseID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RequirementInstanceID_ChoiceType() {
  }

  /** The destructor [only available to derived classes]. */
  ~RequirementInstanceID_ChoiceType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RequirementInstanceID_ChoiceType to copy from.
    */
  RequirementInstanceID_ChoiceType(const RequirementInstanceID_ChoiceType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RequirementInstanceID_ChoiceType to the contents of the
    * RequirementInstanceID_ChoiceType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The RequirementInstanceID_ChoiceType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this RequirementInstanceID_ChoiceType.
    * @return A reference to this RequirementInstanceID_ChoiceType.
    */
  RequirementInstanceID_ChoiceType& operator=(const RequirementInstanceID_ChoiceType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_REQUIREMENTINSTANCEID_CHOICETYPE_H

