/** @file ObservationReportMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OBSERVATIONREPORTMDT_H
#define UCI_TYPE_OBSERVATIONREPORTMDT_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ActivityAgainstType.h"
#include "uci/type/ActivityByType.h"
#include "uci/type/AmplifyingInformationType.h"
#include "uci/type/EmptyType.h"
#include "uci/type/EntityIdentityType.h"
#include "uci/type/GeoLocatedObjectType.h"
#include "uci/type/ObservationReportID_Type.h"
#include "uci/type/RelationshipThreatType.h"
#include "uci/type/SystemMessageIdentifierType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ObservationReportMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ObservationReportMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ObservationReportMDT.
    */
  static UCI_EXPORT ObservationReportMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ObservationReportMDT initializing the data accessed by the new ObservationReportMDT
    * using the data accessed by the specified ObservationReportMDT (cloning).
    *
    * @param accessor The ObservationReportMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created ObservationReportMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ObservationReportMDT.
    */
  static UCI_EXPORT ObservationReportMDT& create(const ObservationReportMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ObservationReportMDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The ObservationReportMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ObservationReportMDT& accessor);

  /** Returns this accessor's type constant, i.e. observationReportMDT.
    *
    * @return This accessor's type constant, i.e. observationReportMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::observationReportMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of ObservationReportMDT.
    *
    * @return The version that was initialized from the uci:version attribute of ObservationReportMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ObservationReportMDT& accessor) = 0;

  /** This element indicates an activity, that is not otherwise represented by UCI Tasks, Capability commands, etc. being
    * performed on/against the Entity. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ActivityAgainstType, uci::type::accessorType::activityAgainstType> ActivityAgainst;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ObservationReportID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ObservationReportID.
    */
  virtual const uci::type::ObservationReportID_Type& getObservationReportID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ObservationReportID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ObservationReportID.
    */
  virtual uci::type::ObservationReportID_Type& getObservationReportID() = 0;

  /** Sets the complex content identified by ObservationReportID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ObservationReportID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& setObservationReportID(const uci::type::ObservationReportID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Reference.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Reference.
    */
  virtual const uci::type::GeoLocatedObjectType& getReference() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Reference.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Reference.
    */
  virtual uci::type::GeoLocatedObjectType& getReference() = 0;

  /** Sets the complex content identified by Reference to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Reference.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& setReference(const uci::type::GeoLocatedObjectType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Originator.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Originator.
    */
  virtual const uci::type::SystemMessageIdentifierType& getOriginator() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Originator.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Originator.
    */
  virtual uci::type::SystemMessageIdentifierType& getOriginator() = 0;

  /** Sets the complex content identified by Originator to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Originator.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& setOriginator(const uci::type::SystemMessageIdentifierType& value) = 0;

  /** Returns whether the Element identified by Originator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Originator is enabled or not.
    */
  virtual bool hasOriginator() const = 0;

  /** Enables the Element identified by Originator.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Originator.
    */
  virtual uci::type::SystemMessageIdentifierType& enableOriginator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Originator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& clearOriginator() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual const uci::type::EntityIdentityType& getIdentity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::EntityIdentityType& getIdentity() = 0;

  /** Sets the complex content identified by Identity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Identity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& setIdentity(const uci::type::EntityIdentityType& value) = 0;

  /** Returns whether the Element identified by Identity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Identity is enabled or not.
    */
  virtual bool hasIdentity() const = 0;

  /** Enables the Element identified by Identity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::EntityIdentityType& enableIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Identity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& clearIdentity() = 0;

  /** Returns a const reference to the bounded list identified by ActivityAgainst.
    *
    * @return A const reference to the bounded list identified by ActivityAgainst.
    */
  virtual const uci::type::ObservationReportMDT::ActivityAgainst& getActivityAgainst() const = 0;

  /** Returns a reference to the bounded list identified by ActivityAgainst.
    *
    * @return A reference to the bounded list identified by ActivityAgainst.
    */
  virtual uci::type::ObservationReportMDT::ActivityAgainst& getActivityAgainst() = 0;

  /** Sets the bounded list identified by ActivityAgainst.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& setActivityAgainst(const uci::type::ObservationReportMDT::ActivityAgainst& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActivityBy.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActivityBy.
    */
  virtual const uci::type::ActivityByType& getActivityBy() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActivityBy.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActivityBy.
    */
  virtual uci::type::ActivityByType& getActivityBy() = 0;

  /** Sets the complex content identified by ActivityBy to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivityBy.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& setActivityBy(const uci::type::ActivityByType& value) = 0;

  /** Returns whether the Element identified by ActivityBy exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActivityBy is enabled or not.
    */
  virtual bool hasActivityBy() const = 0;

  /** Enables the Element identified by ActivityBy.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActivityBy.
    */
  virtual uci::type::ActivityByType& enableActivityBy(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActivityBy.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& clearActivityBy() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ThreatData.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ThreatData.
    */
  virtual const uci::type::RelationshipThreatType& getThreatData() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ThreatData.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ThreatData.
    */
  virtual uci::type::RelationshipThreatType& getThreatData() = 0;

  /** Sets the complex content identified by ThreatData to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ThreatData.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& setThreatData(const uci::type::RelationshipThreatType& value) = 0;

  /** Returns whether the Element identified by ThreatData exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ThreatData is enabled or not.
    */
  virtual bool hasThreatData() const = 0;

  /** Enables the Element identified by ThreatData.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ThreatData.
    */
  virtual uci::type::RelationshipThreatType& enableThreatData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ThreatData.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& clearThreatData() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AmplifyingInfo.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AmplifyingInfo.
    */
  virtual const uci::type::AmplifyingInformationType& getAmplifyingInfo() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AmplifyingInfo.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AmplifyingInfo.
    */
  virtual uci::type::AmplifyingInformationType& getAmplifyingInfo() = 0;

  /** Sets the complex content identified by AmplifyingInfo to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AmplifyingInfo.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& setAmplifyingInfo(const uci::type::AmplifyingInformationType& value) = 0;

  /** Returns whether the Element identified by AmplifyingInfo exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AmplifyingInfo is enabled or not.
    */
  virtual bool hasAmplifyingInfo() const = 0;

  /** Enables the Element identified by AmplifyingInfo.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AmplifyingInfo.
    */
  virtual uci::type::AmplifyingInformationType& enableAmplifyingInfo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AmplifyingInfo.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& clearAmplifyingInfo() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by LocallyModified.
    *
    * @return A const reference to the accessor that provides access to the string identified by LocallyModified.
    */
  virtual const uci::type::EmptyType& getLocallyModified() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by LocallyModified.
    *
    * @return A reference to the accessor that provides access to the string identified by LocallyModified.
    */
  virtual uci::type::EmptyType& getLocallyModified() = 0;

  /** Sets the string identified by LocallyModified to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by LocallyModified.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& setLocallyModified(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by LocallyModified to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& setLocallyModified(const std::string& value) = 0;

  /** Sets the string identified by LocallyModified to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& setLocallyModified(const char* value) = 0;

  /** Returns whether the Element identified by LocallyModified exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LocallyModified is enabled or not.
    */
  virtual bool hasLocallyModified() const = 0;

  /** Enables the Element identified by LocallyModified.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by LocallyModified.
    */
  virtual uci::type::EmptyType& enableLocallyModified(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LocallyModified.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationReportMDT& clearLocallyModified() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ObservationReportMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~ObservationReportMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ObservationReportMDT to copy from.
    */
  ObservationReportMDT(const ObservationReportMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ObservationReportMDT to the contents of the ObservationReportMDT
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ObservationReportMDT on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this ObservationReportMDT.
    * @return A reference to this ObservationReportMDT.
    */
  ObservationReportMDT& operator=(const ObservationReportMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_OBSERVATIONREPORTMDT_H

