/** @file DataPlanTriggerType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_DATAPLANTRIGGERTYPE_H
#define UCI_TYPE_DATAPLANTRIGGERTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CommTerminalPlanID_Type.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/MissionID_Type.h"
#include "uci/type/OpVolumeID_Type.h"
#include "uci/type/OpZoneID_Type.h"
#include "uci/type/PlansReferenceType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Includes the Triggers to automatically apply a data plan. */
class DataPlanTriggerType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new DataPlanTriggerType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DataPlanTriggerType.
    */
  static UCI_EXPORT DataPlanTriggerType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new DataPlanTriggerType initializing the data accessed by the new DataPlanTriggerType using
    * the data accessed by the specified DataPlanTriggerType (cloning).
    *
    * @param accessor The DataPlanTriggerType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created DataPlanTriggerType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DataPlanTriggerType.
    */
  static UCI_EXPORT DataPlanTriggerType& create(const DataPlanTriggerType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified DataPlanTriggerType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The DataPlanTriggerType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(DataPlanTriggerType& accessor);

  /** Returns this accessor's type constant, i.e. dataPlanTriggerType.
    *
    * @return This accessor's type constant, i.e. dataPlanTriggerType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::dataPlanTriggerType;
  }

  /** Returns the version that was initialized from the uci:version attribute of DataPlanTriggerType.
    *
    * @return The version that was initialized from the uci:version attribute of DataPlanTriggerType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const DataPlanTriggerType& accessor) = 0;

  /** Indicates a unique ID assigned to a triggering Mission. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::MissionID_Type, uci::type::accessorType::missionID_Type> MissionID;

  /** Indicates a unique ID assigned to a CommTerminalPlan. When set indicates this data plan is triggered by the
    * activation of this communication plan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CommTerminalPlanID_Type, uci::type::accessorType::commTerminalPlanID_Type> CommTerminalPlanID;

  /** Indicates time windows for which this data plan should be active. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::DateTimeRangeType, uci::type::accessorType::dateTimeRangeType> EffectiveTimeSpans;

  /** This element represents a unique identifier of a zone for which this Data Plan should be active. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OpZoneID_Type, uci::type::accessorType::opZoneID_Type> OpZoneID;

  /** This element represents a unique identifier of a volume for which this Data Plan should be active. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OpVolumeID_Type, uci::type::accessorType::opVolumeID_Type> OpVolumeID;

  /** Returns a const reference to the bounded list identified by MissionID.
    *
    * @return A const reference to the bounded list identified by MissionID.
    */
  virtual const uci::type::DataPlanTriggerType::MissionID& getMissionID() const = 0;

  /** Returns a reference to the bounded list identified by MissionID.
    *
    * @return A reference to the bounded list identified by MissionID.
    */
  virtual uci::type::DataPlanTriggerType::MissionID& getMissionID() = 0;

  /** Sets the bounded list identified by MissionID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DataPlanTriggerType& setMissionID(const uci::type::DataPlanTriggerType::MissionID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PlanIdentifier.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PlanIdentifier.
    */
  virtual const uci::type::PlansReferenceType& getPlanIdentifier() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PlanIdentifier.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PlanIdentifier.
    */
  virtual uci::type::PlansReferenceType& getPlanIdentifier() = 0;

  /** Sets the complex content identified by PlanIdentifier to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PlanIdentifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DataPlanTriggerType& setPlanIdentifier(const uci::type::PlansReferenceType& value) = 0;

  /** Returns whether the Element identified by PlanIdentifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PlanIdentifier is enabled or not.
    */
  virtual bool hasPlanIdentifier() const = 0;

  /** Enables the Element identified by PlanIdentifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PlanIdentifier.
    */
  virtual uci::type::PlansReferenceType& enablePlanIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PlanIdentifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DataPlanTriggerType& clearPlanIdentifier() = 0;

  /** Returns a const reference to the bounded list identified by CommTerminalPlanID.
    *
    * @return A const reference to the bounded list identified by CommTerminalPlanID.
    */
  virtual const uci::type::DataPlanTriggerType::CommTerminalPlanID& getCommTerminalPlanID() const = 0;

  /** Returns a reference to the bounded list identified by CommTerminalPlanID.
    *
    * @return A reference to the bounded list identified by CommTerminalPlanID.
    */
  virtual uci::type::DataPlanTriggerType::CommTerminalPlanID& getCommTerminalPlanID() = 0;

  /** Sets the bounded list identified by CommTerminalPlanID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DataPlanTriggerType& setCommTerminalPlanID(const uci::type::DataPlanTriggerType::CommTerminalPlanID& value) = 0;

  /** Returns a const reference to the bounded list identified by EffectiveTimeSpans.
    *
    * @return A const reference to the bounded list identified by EffectiveTimeSpans.
    */
  virtual const uci::type::DataPlanTriggerType::EffectiveTimeSpans& getEffectiveTimeSpans() const = 0;

  /** Returns a reference to the bounded list identified by EffectiveTimeSpans.
    *
    * @return A reference to the bounded list identified by EffectiveTimeSpans.
    */
  virtual uci::type::DataPlanTriggerType::EffectiveTimeSpans& getEffectiveTimeSpans() = 0;

  /** Sets the bounded list identified by EffectiveTimeSpans.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DataPlanTriggerType& setEffectiveTimeSpans(const uci::type::DataPlanTriggerType::EffectiveTimeSpans& value) = 0;

  /** Returns a const reference to the bounded list identified by OpZoneID.
    *
    * @return A const reference to the bounded list identified by OpZoneID.
    */
  virtual const uci::type::DataPlanTriggerType::OpZoneID& getOpZoneID() const = 0;

  /** Returns a reference to the bounded list identified by OpZoneID.
    *
    * @return A reference to the bounded list identified by OpZoneID.
    */
  virtual uci::type::DataPlanTriggerType::OpZoneID& getOpZoneID() = 0;

  /** Sets the bounded list identified by OpZoneID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DataPlanTriggerType& setOpZoneID(const uci::type::DataPlanTriggerType::OpZoneID& value) = 0;

  /** Returns a const reference to the bounded list identified by OpVolumeID.
    *
    * @return A const reference to the bounded list identified by OpVolumeID.
    */
  virtual const uci::type::DataPlanTriggerType::OpVolumeID& getOpVolumeID() const = 0;

  /** Returns a reference to the bounded list identified by OpVolumeID.
    *
    * @return A reference to the bounded list identified by OpVolumeID.
    */
  virtual uci::type::DataPlanTriggerType::OpVolumeID& getOpVolumeID() = 0;

  /** Sets the bounded list identified by OpVolumeID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DataPlanTriggerType& setOpVolumeID(const uci::type::DataPlanTriggerType::OpVolumeID& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  DataPlanTriggerType() {
  }

  /** The destructor [only available to derived classes]. */
  ~DataPlanTriggerType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The DataPlanTriggerType to copy from.
    */
  DataPlanTriggerType(const DataPlanTriggerType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this DataPlanTriggerType to the contents of the DataPlanTriggerType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The DataPlanTriggerType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this DataPlanTriggerType.
    * @return A reference to this DataPlanTriggerType.
    */
  DataPlanTriggerType& operator=(const DataPlanTriggerType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_DATAPLANTRIGGERTYPE_H

