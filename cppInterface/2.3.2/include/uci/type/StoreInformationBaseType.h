/** @file StoreInformationBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_STOREINFORMATIONBASETYPE_H
#define UCI_TYPE_STOREINFORMATIONBASETYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/IntAccessor.h"
#include "../base/export.h"
#include "StoreJettisonOptionsEnum.h"
#include "VisibleString256Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates possible store settings that could be used to id the state or extra data related to the attached Mission or
  * Carriage Store.
  */
class StoreInformationBaseType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new StoreInformationBaseType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed StoreInformationBaseType.
    */
  static UCI_EXPORT StoreInformationBaseType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new StoreInformationBaseType initializing the data accessed by the new
    * StoreInformationBaseType using the data accessed by the specified StoreInformationBaseType (cloning).
    *
    * @param accessor The StoreInformationBaseType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created StoreInformationBaseType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed StoreInformationBaseType.
    */
  static UCI_EXPORT StoreInformationBaseType& create(const StoreInformationBaseType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified StoreInformationBaseType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The StoreInformationBaseType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(StoreInformationBaseType& accessor);

  /** Returns this accessor's type constant, i.e. storeInformationBaseType.
    *
    * @return This accessor's type constant, i.e. storeInformationBaseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::storeInformationBaseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of StoreInformationBaseType.
    *
    * @return The version that was initialized from the uci:version attribute of StoreInformationBaseType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const StoreInformationBaseType& accessor) = 0;

  /** Store location as defined by system related to int number of Store Point. [Occurrences: Minimum: 1; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::base::IntAccessor, uci::base::accessorType::intAccessor> StoreLocation;

  /** Indicates if and in which situations a store can be jettisoned. List size for this element is based on "Select All
    * That Apply" condition. [Occurrences: Minimum: 0; Maximum: 4]
    */
  typedef uci::base::BoundedList<uci::type::StoreJettisonOptionsEnum, uci::type::accessorType::storeJettisonOptionsEnum> JettisonableOption;

  /** Returns a const reference to the accessor that provides access to the string identified by Mnemonic.
    *
    * @return A const reference to the accessor that provides access to the string identified by Mnemonic.
    */
  virtual const uci::type::VisibleString256Type& getMnemonic() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Mnemonic.
    *
    * @return A reference to the accessor that provides access to the string identified by Mnemonic.
    */
  virtual uci::type::VisibleString256Type& getMnemonic() = 0;

  /** Sets the string identified by Mnemonic to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Mnemonic.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreInformationBaseType& setMnemonic(const uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by Mnemonic to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreInformationBaseType& setMnemonic(const std::string& value) = 0;

  /** Sets the string identified by Mnemonic to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreInformationBaseType& setMnemonic(const char* value) = 0;

  /** Returns whether the Element identified by Mnemonic exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mnemonic is enabled or not.
    */
  virtual bool hasMnemonic() const = 0;

  /** Enables the Element identified by Mnemonic.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Mnemonic.
    */
  virtual uci::type::VisibleString256Type& enableMnemonic(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Mnemonic.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreInformationBaseType& clearMnemonic() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Simulated.
    *
    * @return The value of the simple primitive data type identified by Simulated.
    */
  virtual xs::Boolean getSimulated() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Simulated.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreInformationBaseType& setSimulated(xs::Boolean value) = 0;

  /** Returns a const reference to the bounded list identified by StoreLocation.
    *
    * @return A const reference to the bounded list identified by StoreLocation.
    */
  virtual const uci::type::StoreInformationBaseType::StoreLocation& getStoreLocation() const = 0;

  /** Returns a reference to the bounded list identified by StoreLocation.
    *
    * @return A reference to the bounded list identified by StoreLocation.
    */
  virtual uci::type::StoreInformationBaseType::StoreLocation& getStoreLocation() = 0;

  /** Sets the bounded list identified by StoreLocation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreInformationBaseType& setStoreLocation(const uci::type::StoreInformationBaseType::StoreLocation& value) = 0;

  /** Returns a const reference to the bounded list identified by JettisonableOption.
    *
    * @return A const reference to the bounded list identified by JettisonableOption.
    */
  virtual const uci::type::StoreInformationBaseType::JettisonableOption& getJettisonableOption() const = 0;

  /** Returns a reference to the bounded list identified by JettisonableOption.
    *
    * @return A reference to the bounded list identified by JettisonableOption.
    */
  virtual uci::type::StoreInformationBaseType::JettisonableOption& getJettisonableOption() = 0;

  /** Sets the bounded list identified by JettisonableOption.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreInformationBaseType& setJettisonableOption(const uci::type::StoreInformationBaseType::JettisonableOption& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Powerable.
    *
    * @return The value of the simple primitive data type identified by Powerable.
    */
  virtual xs::Boolean getPowerable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Powerable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreInformationBaseType& setPowerable(xs::Boolean value) = 0;

  /** Returns whether the Element identified by Powerable exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Powerable is enabled or not.
    */
  virtual bool hasPowerable() const = 0;

  /** Clears (disabled) the Element identified by Powerable.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreInformationBaseType& clearPowerable() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  StoreInformationBaseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~StoreInformationBaseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The StoreInformationBaseType to copy from.
    */
  StoreInformationBaseType(const StoreInformationBaseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this StoreInformationBaseType to the contents of the
    * StoreInformationBaseType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The StoreInformationBaseType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this StoreInformationBaseType.
    * @return A reference to this StoreInformationBaseType.
    */
  StoreInformationBaseType& operator=(const StoreInformationBaseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_STOREINFORMATIONBASETYPE_H

