/** @file RoutePlanValidationMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ROUTEPLANVALIDATIONMDT_H
#define UCI_TYPE_ROUTEPLANVALIDATIONMDT_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ActionPlanID_Type.h"
#include "AnalysisRouteID_Type.h"
#include "CompletionStatusType.h"
#include "IncompleteProcessingType.h"
#include "LAR_MDT.h"
#include "PlanValidationStateEnum.h"
#include "RoutePlanID_Type.h"
#include "RoutePlanValidationID_Type.h"
#include "RouteValidationInvalidPathType.h"
#include "ValidatorType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class RoutePlanValidationMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RoutePlanValidationMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RoutePlanValidationMDT.
    */
  static UCI_EXPORT RoutePlanValidationMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RoutePlanValidationMDT initializing the data accessed by the new RoutePlanValidationMDT
    * using the data accessed by the specified RoutePlanValidationMDT (cloning).
    *
    * @param accessor The RoutePlanValidationMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created RoutePlanValidationMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RoutePlanValidationMDT.
    */
  static UCI_EXPORT RoutePlanValidationMDT& create(const RoutePlanValidationMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RoutePlanValidationMDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The RoutePlanValidationMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RoutePlanValidationMDT& accessor);

  /** Returns this accessor's type constant, i.e. routePlanValidationMDT.
    *
    * @return This accessor's type constant, i.e. routePlanValidationMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::routePlanValidationMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of RoutePlanValidationMDT.
    *
    * @return The version that was initialized from the uci:version attribute of RoutePlanValidationMDT.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RoutePlanValidationMDT& accessor) = 0;

  /** Indicates items associated with command processing that failed to complete. For example if a particular required
    * Capability wasn't available, it could be referenced here. This element/type is highly flexible. It can reference
    * almost any message/concept in UCI as a planning issue. The wide range of messages/concepts it can reference makes it
    * 1) difficult to use as a basis for software/services to resolve the issue but 2) an excellent general method for
    * processing algorithms to convey issues to operators. This element shouldn't be used to report processing
    * issues/results that are more directly indicated by other processing status elements. For example, for planning
    * processing, other elements focus specifically on per-Requirement allocation results therefore this element shouldn't
    * be used for per-Requirement allocation results. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::IncompleteProcessingType, uci::type::accessorType::incompleteProcessingType> IncompleteItem;

  /** If RoutePlan is invalid, indicates which paths have invalid segments in it. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RouteValidationInvalidPathType, uci::type::accessorType::routeValidationInvalidPathType> InvalidPath;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RoutePlanValidationID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RoutePlanValidationID.
    */
  virtual const uci::type::RoutePlanValidationID_Type& getRoutePlanValidationID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RoutePlanValidationID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RoutePlanValidationID.
    */
  virtual uci::type::RoutePlanValidationID_Type& getRoutePlanValidationID() = 0;

  /** Sets the complex content identified by RoutePlanValidationID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RoutePlanValidationID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePlanValidationMDT& setRoutePlanValidationID(const uci::type::RoutePlanValidationID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PlanID.
    */
  virtual const uci::type::ActionPlanID_Type& getPlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PlanID.
    */
  virtual uci::type::ActionPlanID_Type& getPlanID() = 0;

  /** Sets the complex content identified by PlanID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePlanValidationMDT& setPlanID(const uci::type::ActionPlanID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Validator.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Validator.
    */
  virtual const uci::type::ValidatorType& getValidator() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Validator.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Validator.
    */
  virtual uci::type::ValidatorType& getValidator() = 0;

  /** Sets the complex content identified by Validator to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Validator.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePlanValidationMDT& setValidator(const uci::type::ValidatorType& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ValidationState.
    *
    * @return A const reference to the value of the enumeration identified by ValidationState.
    */
  virtual const uci::type::PlanValidationStateEnum& getValidationState() const = 0;

  /** Returns a reference to the value of the enumeration identified by ValidationState.
    *
    * @return A reference to the value of the enumeration identified by ValidationState.
    */
  virtual uci::type::PlanValidationStateEnum& getValidationState() = 0;

  /** Sets the value of the enumeration identified by ValidationState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePlanValidationMDT& setValidationState(const uci::type::PlanValidationStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by ValidationState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePlanValidationMDT& setValidationState(uci::type::PlanValidationStateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CompletionStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CompletionStatus.
    */
  virtual const uci::type::CompletionStatusType& getCompletionStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CompletionStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CompletionStatus.
    */
  virtual uci::type::CompletionStatusType& getCompletionStatus() = 0;

  /** Sets the complex content identified by CompletionStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CompletionStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePlanValidationMDT& setCompletionStatus(const uci::type::CompletionStatusType& value) = 0;

  /** Returns whether the Element identified by CompletionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CompletionStatus is enabled or not.
    */
  virtual bool hasCompletionStatus() const = 0;

  /** Enables the Element identified by CompletionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CompletionStatus.
    */
  virtual uci::type::CompletionStatusType& enableCompletionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CompletionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePlanValidationMDT& clearCompletionStatus() = 0;

  /** Returns a const reference to the bounded list identified by IncompleteItem.
    *
    * @return A const reference to the bounded list identified by IncompleteItem.
    */
  virtual const uci::type::RoutePlanValidationMDT::IncompleteItem& getIncompleteItem() const = 0;

  /** Returns a reference to the bounded list identified by IncompleteItem.
    *
    * @return A reference to the bounded list identified by IncompleteItem.
    */
  virtual uci::type::RoutePlanValidationMDT::IncompleteItem& getIncompleteItem() = 0;

  /** Sets the bounded list identified by IncompleteItem.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePlanValidationMDT& setIncompleteItem(const uci::type::RoutePlanValidationMDT::IncompleteItem& value) = 0;

  /** Returns a const reference to the bounded list identified by InvalidPath.
    *
    * @return A const reference to the bounded list identified by InvalidPath.
    */
  virtual const uci::type::RoutePlanValidationMDT::InvalidPath& getInvalidPath() const = 0;

  /** Returns a reference to the bounded list identified by InvalidPath.
    *
    * @return A reference to the bounded list identified by InvalidPath.
    */
  virtual uci::type::RoutePlanValidationMDT::InvalidPath& getInvalidPath() = 0;

  /** Sets the bounded list identified by InvalidPath.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePlanValidationMDT& setInvalidPath(const uci::type::RoutePlanValidationMDT::InvalidPath& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ValidLAR.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ValidLAR.
    */
  virtual const uci::type::LAR_MDT& getValidLAR() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ValidLAR.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ValidLAR.
    */
  virtual uci::type::LAR_MDT& getValidLAR() = 0;

  /** Sets the complex content identified by ValidLAR to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ValidLAR.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePlanValidationMDT& setValidLAR(const uci::type::LAR_MDT& value) = 0;

  /** Returns whether the Element identified by ValidLAR exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ValidLAR is enabled or not.
    */
  virtual bool hasValidLAR() const = 0;

  /** Enables the Element identified by ValidLAR.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ValidLAR.
    */
  virtual uci::type::LAR_MDT& enableValidLAR(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ValidLAR.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePlanValidationMDT& clearValidLAR() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ModifiedPlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ModifiedPlanID.
    */
  virtual const uci::type::RoutePlanID_Type& getModifiedPlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ModifiedPlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ModifiedPlanID.
    */
  virtual uci::type::RoutePlanID_Type& getModifiedPlanID() = 0;

  /** Sets the complex content identified by ModifiedPlanID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ModifiedPlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePlanValidationMDT& setModifiedPlanID(const uci::type::RoutePlanID_Type& value) = 0;

  /** Returns whether the Element identified by ModifiedPlanID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ModifiedPlanID is enabled or not.
    */
  virtual bool hasModifiedPlanID() const = 0;

  /** Enables the Element identified by ModifiedPlanID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ModifiedPlanID.
    */
  virtual uci::type::RoutePlanID_Type& enableModifiedPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ModifiedPlanID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePlanValidationMDT& clearModifiedPlanID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AnalysisRouteID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AnalysisRouteID.
    */
  virtual const uci::type::AnalysisRouteID_Type& getAnalysisRouteID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AnalysisRouteID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AnalysisRouteID.
    */
  virtual uci::type::AnalysisRouteID_Type& getAnalysisRouteID() = 0;

  /** Sets the complex content identified by AnalysisRouteID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AnalysisRouteID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePlanValidationMDT& setAnalysisRouteID(const uci::type::AnalysisRouteID_Type& value) = 0;

  /** Returns whether the Element identified by AnalysisRouteID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AnalysisRouteID is enabled or not.
    */
  virtual bool hasAnalysisRouteID() const = 0;

  /** Enables the Element identified by AnalysisRouteID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AnalysisRouteID.
    */
  virtual uci::type::AnalysisRouteID_Type& enableAnalysisRouteID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AnalysisRouteID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePlanValidationMDT& clearAnalysisRouteID() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RoutePlanValidationMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~RoutePlanValidationMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RoutePlanValidationMDT to copy from.
    */
  RoutePlanValidationMDT(const RoutePlanValidationMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RoutePlanValidationMDT to the contents of the
    * RoutePlanValidationMDT on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The RoutePlanValidationMDT on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this RoutePlanValidationMDT.
    * @return A reference to this RoutePlanValidationMDT.
    */
  RoutePlanValidationMDT& operator=(const RoutePlanValidationMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ROUTEPLANVALIDATIONMDT_H

