/** @file PlanPartsBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLANPARTSBASETYPE_H
#define UCI_TYPE_PLANPARTSBASETYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "ActionPlanPartsType.h"
#include "EffectPlanPartsType.h"
#include "ResponsePlanPartsType.h"
#include "TaskPlanPartsType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PlanPartsBaseType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PlanPartsBaseType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanPartsBaseType.
    */
  static UCI_EXPORT PlanPartsBaseType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlanPartsBaseType initializing the data accessed by the new PlanPartsBaseType using the
    * data accessed by the specified PlanPartsBaseType (cloning).
    *
    * @param accessor The PlanPartsBaseType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PlanPartsBaseType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanPartsBaseType.
    */
  static UCI_EXPORT PlanPartsBaseType& create(const PlanPartsBaseType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlanPartsBaseType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The PlanPartsBaseType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlanPartsBaseType& accessor);

  /** Returns this accessor's type constant, i.e. planPartsBaseType.
    *
    * @return This accessor's type constant, i.e. planPartsBaseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::planPartsBaseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlanPartsBaseType.
    *
    * @return The version that was initialized from the uci:version attribute of PlanPartsBaseType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlanPartsBaseType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EffectPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EffectPlan.
    */
  virtual const uci::type::EffectPlanPartsType& getEffectPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EffectPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EffectPlan.
    */
  virtual uci::type::EffectPlanPartsType& getEffectPlan() = 0;

  /** Sets the complex content identified by EffectPlan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EffectPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsBaseType& setEffectPlan(const uci::type::EffectPlanPartsType& value) = 0;

  /** Returns whether the Element identified by EffectPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EffectPlan is enabled or not.
    */
  virtual bool hasEffectPlan() const = 0;

  /** Enables the Element identified by EffectPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EffectPlan.
    */
  virtual uci::type::EffectPlanPartsType& enableEffectPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EffectPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsBaseType& clearEffectPlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActionPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActionPlan.
    */
  virtual const uci::type::ActionPlanPartsType& getActionPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActionPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActionPlan.
    */
  virtual uci::type::ActionPlanPartsType& getActionPlan() = 0;

  /** Sets the complex content identified by ActionPlan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActionPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsBaseType& setActionPlan(const uci::type::ActionPlanPartsType& value) = 0;

  /** Returns whether the Element identified by ActionPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActionPlan is enabled or not.
    */
  virtual bool hasActionPlan() const = 0;

  /** Enables the Element identified by ActionPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActionPlan.
    */
  virtual uci::type::ActionPlanPartsType& enableActionPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActionPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsBaseType& clearActionPlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TaskPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TaskPlan.
    */
  virtual const uci::type::TaskPlanPartsType& getTaskPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TaskPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TaskPlan.
    */
  virtual uci::type::TaskPlanPartsType& getTaskPlan() = 0;

  /** Sets the complex content identified by TaskPlan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TaskPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsBaseType& setTaskPlan(const uci::type::TaskPlanPartsType& value) = 0;

  /** Returns whether the Element identified by TaskPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TaskPlan is enabled or not.
    */
  virtual bool hasTaskPlan() const = 0;

  /** Enables the Element identified by TaskPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TaskPlan.
    */
  virtual uci::type::TaskPlanPartsType& enableTaskPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TaskPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsBaseType& clearTaskPlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ResponsePlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ResponsePlan.
    */
  virtual const uci::type::ResponsePlanPartsType& getResponsePlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ResponsePlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ResponsePlan.
    */
  virtual uci::type::ResponsePlanPartsType& getResponsePlan() = 0;

  /** Sets the complex content identified by ResponsePlan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ResponsePlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsBaseType& setResponsePlan(const uci::type::ResponsePlanPartsType& value) = 0;

  /** Returns whether the Element identified by ResponsePlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ResponsePlan is enabled or not.
    */
  virtual bool hasResponsePlan() const = 0;

  /** Enables the Element identified by ResponsePlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ResponsePlan.
    */
  virtual uci::type::ResponsePlanPartsType& enableResponsePlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ResponsePlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsBaseType& clearResponsePlan() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlanPartsBaseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlanPartsBaseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlanPartsBaseType to copy from.
    */
  PlanPartsBaseType(const PlanPartsBaseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlanPartsBaseType to the contents of the PlanPartsBaseType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PlanPartsBaseType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this PlanPartsBaseType.
    * @return A reference to this PlanPartsBaseType.
    */
  PlanPartsBaseType& operator=(const PlanPartsBaseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLANPARTSBASETYPE_H

