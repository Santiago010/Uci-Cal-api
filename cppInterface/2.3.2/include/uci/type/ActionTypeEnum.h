/** @file ActionTypeEnum.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ACTIONTYPEENUM_H
#define UCI_TYPE_ACTIONTYPEENUM_H

#include <map>
#include <sstream>

#include "../base/Accessor.h"
#include "../base/export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the taxonomy of the Action form of C2 Requirement. The taxonomy is a combination of abstract commands,
  * verbs, tasks, etc. described in various Joint Publications, training documents for operational planning, etc.
  */
class ActionTypeEnum : public virtual uci::base::Accessor {
public:

  /** The following are the enumerated items that comprise this enumeration */
  enum EnumerationItem {

    /** Enumerated item that indicates that the enumeration has not been set */
    enumNotSet,

    /** Counsel and inform of the implications of adopting a certain pattern of behavior, beliefs or attitudes. */
    UCI_ADVISE,

    /** Conduct offensive operation designed to gain or re-establish contact with the enemy. */
    UCI_ADVANCE,

    /** Climax of an attack; closing with the enemy in hand-to-hand fighting. Short, violent attack, against local objective. */
    UCI_ASSAULT,

    /** Pose a judgment after comparing measured performances against a standard. */
    UCI_ASSESS,

    /** Destruction order; orders the destruction of an object. */
    UCI_ATTACK,

    /** Order the conduct of Aerial Reconnaissance in the vicinity of a specified objective, with the delivery of ordnance
      * when targets of opportunity are located.
      */
    UCI_ATTACK_ARMED_RECONNAISSANCE,

    /** Order to prepare to engage or attack an objective. Firing is not authorized until ordered or objective becomes
      * eligible for destruction under existing doctrine and/or Rules of Engagement (ROE).
      */
    UCI_ATTACK_ASSIGN,

    /** Destruction order; better known as "counter attack". Attack by a part or all of a defending force for such specific
      * purposes as regaining ground lost or cutting off or destroying adversaries' advance units, with the general objective
      * of denying to the adversary the attainment of their purpose in attacking.
      */
    UCI_ATTACK_COUNTER,

    /** Orders attack of an object using cyber means/weapons. */
    UCI_ATTACK_CYBER,

    /** Destruction of Enemy Air Defenses (SEAD). Order the neutralization of enemy air defenses, including radars and
      * launchers, in the vicinity of a specific objective through physical attack or electronic warfare.
      */
    UCI_ATTACK_DEAD,

    /** Destruction order; orders the destruction of an object using directed energy means/weapons. */
    UCI_ATTACK_DIRECTED_ENERGY,

    /** Also known as EA or Electronic Attack. Orders attack of an object using electronic warfare means/weapons. */
    UCI_ATTACK_ELECTRONIC,

    /** Destruction order; orders the destruction of an object using kinetic means/weapons. */
    UCI_ATTACK_KINETIC,

    /** Suppression of Enemy Air Defenses (SEAD). Order the neutralization of enemy air defenses, particularly radars, in the
      * vicinity of a specific objective using anti-radiation weapons or electronic warfare.
      */
    UCI_ATTACK_SEAD,

    /** Order to seek out and destroy enemy entities or other targets of opportunity in an allocated area of operations. */
    UCI_ATTACK_SWEEP,

    /** Deliberate or hasty: cross or create a lane through a minefield or IED belt or a clear route through a barrier or
      * fortification.
      */
    UCI_BREACH,

    /** Continuation of a crossing operation once the force has consolidated in the bridgehead; or offensive action by an
      * encircled force to link-up with a main force.
      */
    UCI_BREAK_OUT,

    /** Attain prescribed strength of units and prescribed levels of vehicles, equipment, stores and supplies. */
    UCI_BUILD_UP,

    /** Move around an obstacle, position or enemy force to maintain the momentum of advance. */
    UCI_BYPASS,

    /** Perform Command and Control (C2) over systems, entities, people, etc. Sibling enumerations include more specific
      * forms of C2; use them when applicable.
      */
    UCI_C2,

    /** Perform Command and Control (C2) over cyber functions of systems, entities, people, etc. */
    UCI_C2_CYBER,

    /** Perform operational level Command and Control (C2) over systems, entities, people, etc. */
    UCI_C2_OPERATIONAL,

    /** Perform strategic level Command and Control (C2) over systems, entities, people, etc. */
    UCI_C2_STRATEGIC,

    /** Perform tactical level Command and Control (C2) over systems, entities, people, etc. */
    UCI_C2_TACTICAL,

    /** Assemble, accumulate or acquire data or information. */
    UCI_COLLECT,

    /** Assemble, accumulate or acquire intelligence data or information. */
    UCI_COLLECT_INTEL,

    /** Provide current information of previous reporting within a specified degree of certainty and/or accuracy. */
    UCI_CONFIRM,

    /** Bring functions, systems or entities operating in the same environment in proper relation in order to avoid
      * counter-productive results such as duplication of effort or mutually negating actions.
      */
    UCI_COORDINATE,

    /** Deliberate or hasty: pass over or through an obstacle. */
    UCI_CROSS,

    /** Preplanned collaborative detection, recognition, identification, location or tracking; the deliberate handover of a
      * collection/find task to a nominated unit, system or person.
      */
    UCI_CROSS_CUE,

    /** Search for and find a unit, object, activity, situation, event or person or persons. */
    UCI_FIND_SEARCH,

    /** Determine the status (including friendly or hostile nature) of the detected unit, object, activity, situation, event
      * or person or persons.
      */
    UCI_IDENTIFY,

    /** Order the identification of a specified objective by visual means. */
    UCI_IDENTIFY_VISUAL,

    /** Impart information or knowledge. */
    UCI_INFORM,

    /** Deploy reconnaissance, stay-behind or raiding forces out of contact with the enemy. */
    UCI_INSERT_INFILTRATE,

    /** Divert, disrupt, delay or destroy an enemy's military potential before it can be used effectively against friendly
      * forces.
      */
    UCI_INTERDICT,

    /** Search for and listen to and/or record communications and/or electronic data. */
    UCI_INTERCEPT,

    /** Order to turn away a specified target from its intended direction of travel. */
    UCI_INTERVENE,

    /** Order the collection of additional information about a specified objective by sensor or visual means. */
    UCI_INVESTIGATE_INTERROGATE,

    /** Maintain contact or intercommunication between elements of military forces to ensure mutual understanding and unity
      * of purpose and action.
      */
    UCI_LIAISE,

    /** Establishment of contact, in enemy controlled territory, between one or more friendly units or formations which have
      * the same or differing missions.
      */
    UCI_LINK_UP,

    /** Establish a position of the detected unit, object, activity, situation, event or person or persons to a specified
      * accuracy.
      */
    UCI_LOCATE_FIX,

    /** Detailed coordination of a complex operation involving many people, facilities, or supplies. Sibling enumerations
      * include more specific forms of logistics; use them when applicable.
      */
    UCI_LOGISTICS,

    /** Logistics focused on loading and unloading of items including people and supplies. */
    UCI_LOGISTICS_LOADING,

    /** Logistics focused on replenishing items including people and systems. */
    UCI_LOGISTICS_REPLENISH,

    /** Logistics focused on resupplying consumable items. */
    UCI_LOGISTICS_RESUPPLY,

    /** Logistics focused on resupplying of consumable energy resources such as fuel. */
    UCI_LOGISTICS_REFUEL,

    /** Logistics focused on movement of items via towing. */
    UCI_LOGISTICS_TOWING,

    /** Logistics focused on movement of items via transport. */
    UCI_LOGISTICS_TRANSPORT,

    /** Logistics focused on movement of items. */
    UCI_LOGISTICS_TRANSITING,

    /** Logistics focused on supporting the needs of people, facilities or systems. */
    UCI_LOGISTICS_SUPPORT,

    /** Manage to advantage (person or situation). */
    UCI_MANIPULATE,

    /** Employ forces on the battlefield (using movement) in combination with fire or fire potential to achieve a position of
      * advantage in respect to the enemy.
      */
    UCI_MANEUVER,

    /** Call for fire on a specific location to orient the observer or spotter or to indicate targets. */
    UCI_MARK,

    /** Medical evacuation (MEDEVAC). Movement of people to facilitate medical assistance. */
    UCI_MEDEVAC,

    /** Develop capacity through example and/or advice through planning and preparation, execution and lessons capture/After
      * Action Review (AAR) phases.
      */
    UCI_MENTOR,

    /** Develop or maintain situational awareness, pattern of life or atmospherics of a geographical area, activity or
      * situation.
      */
    UCI_MONITOR_OBSERVE,

    /** Operations by people not associated with combat or military forces. */
    UCI_NONCOMBATANT_OPERATIONS,

    /** Move into and enable proper organization of an area to be used as a battle position. */
    UCI_OCCUPY,

    /** Give orderly structure to. */
    UCI_ORGANIZE,

    /** Indicates an other type of Action. Use of this enumerate should avoided or at least minimized. If used, it should
      * only be used temporarily while proposing the addition of new well named enumerate(s) to the standard.
      */
    UCI_OTHER,

    /** Remove forcibly from power. */
    UCI_OVERTHROW,

    /** Move tactically within an area of responsibility to deliver a clearly defined Effect. A patrol is conducted in an
      * area where an enemy threat precludes normal administrative movement.
      */
    UCI_PATROL,

    /** Process intelligence in support of operations. */
    UCI_PROCESS_INTEL,

    /** 1) To cover or shield from exposure, damage or destruction. 2) To keep from harm, attack, injury or exploitation. 3)
      * To maintain the status or integrity of. 4) Safeguard. 5) Protect by offense, defense or threat of either or both. 6)
      * Order to maintain a good posture relative to a specified target from which a successful engagement/attack can be
      * accomplished if needed. The standoff distance with respect to the target is established by standard operating
      * procedures. Also known as COVER.
      */
    UCI_PROTECT,

    /** Combat Air Patrol (CAP). Order to patrol in the vicinity of the objective for the purpose of defending against
      * hostile aircraft.
      */
    UCI_PROTECT_CAP,

    /** Close Air Support (CAS). Order the delivery of ordnance against hostile forces that are in close proximity to
      * friendly ground forces. Close coordination with an airborne or ground Forward Air Controller (FAC) is required.
      */
    UCI_PROTECT_CAS,

    /** Camouflage, concealment and decoys (CCD). Order to protect through the use of CCD. To mask or conceal from detection
      * or viewing.
      */
    UCI_PROTECT_CCD,

    /** Order to accompany and protect a specified objective. */
    UCI_PROTECT_ESCORT,

    /** Protect using kinetic means/weapons. */
    UCI_PROTECT_KINETIC,

    /** Protect using directed energy means/weapons. */
    UCI_PROTECT_DIRECTED_ENERGY,

    /** Protect using cyber means/weapons. */
    UCI_PROTECT_CYBER,

    /** Protect using electronic warfare means/weapons. */
    UCI_PROTECT_EW,

    /** Act as a warning or rescue unit at a point outside a formation or geographic area. */
    UCI_PROTECT_PICKET,

    /** Screen returning aircraft to prevent enemy aircraft from locating the force. */
    UCI_PROTECT_TOMCAT,

    /** Order to obtain intelligence information about the objective through the use of sensors or visual means. */
    UCI_RECONNAISSANCE,

    /** Order to search for and rescue personnel in distress in the vicinity of the objective. */
    UCI_SEARCH_AND_RESCUE,

    /** Order to search for and rescue personnel in distress in the vicinity of active combat. */
    UCI_SEARCH_AND_RESCUE_COMBAT,

    /** Order to keep a specified target under observation. The standoff distance with respect to the target is established
      * by standard operating procedures.
      */
    UCI_SHADOW,

    /** Determines the desired effect and targeting solution then obtain required approval to engage/attack. */
    UCI_TARGET,

    /** Maintain identification and location of a unit, activity, situation or person or persons. */
    UCI_TRACK,

    /** Train for military missions. */
    UCI_TRAINING,

    /** Preplanned provision of information to provide warning of a specified situation, event or activity. */
    UCI_WARN,

    /** Move away from the enemy (in or out of contact). */
    UCI_WITHDRAW,

    /** Enumerated item that indicates maximum enumerated item exclusive of this item */
    enumMaxExclusive
  };

  /** Returns this accessor's type constant, i.e. actionTypeEnum.
    *
    * @return This accessor's type constant, i.e. actionTypeEnum.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::actionTypeEnum;
  }

  /** The assignment operator. Sets the contents of this ActionTypeEnum to the contents of the ActionTypeEnum on the right
    * hand side (rhs) of the assignment operator.
    *
    * @param rhs The ActionTypeEnum on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this ActionTypeEnum.
    * @return A reference to this ActionTypeEnum.
    */
  ActionTypeEnum& operator=(const ActionTypeEnum& rhs) {
    setValue(rhs.getValue());
    return *this;
  }

  /** The assignment operator that sets the value of this ActionTypeEnum enumeration to the EnumerationItem on the right
    * hand side of the assignment operator.
    *
    * @param rhs The EnumerationItem whose value is to be assigned to this ActionTypeEnum enumeration.
    * @return A reference to this ActionTypeEnum enumeration.
    */
  ActionTypeEnum& operator=(EnumerationItem rhs) {
    setValue(rhs);
    return *this;
  }

  /** Sets the value of this ActionTypeEnum enumeration to the value of the specified enumeration item.
    *
    * @param item The EnumerationItem whose value is to be used to set the value of this ActionTypeEnum enumeration.
    */
  virtual void setValue(EnumerationItem item) = 0;

  /** Returns the value of this ActionTypeEnum enumeration.
    *
    * @param testForValidity=true Specifies whether this ActionTypeEnum enumeration should be validated (true) or not
    *      (false) as part of retrieving its value.
    * @return The value of this ActionTypeEnum enumeration.
    */
  virtual EnumerationItem getValue(bool testForValidity=true) const = 0;

  /** Returns the number of items in this ActionTypeEnum enumeration.
    *
    * @return The number of items in this ActionTypeEnum enumeration.
    */
  int getNumberOfItems() const noexception {
    return 84;
  }

  /** Returns whether this ActionTypeEnum enumeration is valid or not. A ActionTypeEnum enumeration is valid if its value
    * is one of the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @return A flag indicating whether this ActionTypeEnum enumeration is valid (true) or not (false).
    */
  virtual bool isValid() const noexception {
    return isValid(getValue(false));
  }

  /** Returns whether the specified enumeration item is valid or not. A enumeration item is valid if its value is one of
    * the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @param item The EnumerationItem to test.
    * @return A flag indicating whether the specified EnumerationItem is valid (true) or not (false).
    */
  static bool isValid(EnumerationItem item) noexception {
    return (item > enumNotSet) && (item < enumMaxExclusive);
  }

  /** Returns whether the specified name item is valid or not. A name is valid if it is the name of one of the enumeration
    * items other than enumNotSet and enumMaxExclusive.
    *
    * @param name The name to test.
    * @return A flag indicating whether the specified name is valid (true) or not (false).
    */
  static bool isValid(const std::string& name) noexception {
    FromNameTable::const_iterator iter = m_fromNameTable.find(name);
    return !(iter == m_fromNameTable.end());
  }

  /** Tests whether the value of the ActionTypeEnum enumeration on the right hand side of the == operator is equal to the
    * value as this ActionTypeEnum enumeration.
    *
    * @param rhs The ActionTypeEnum enumeration whose value is to be compared against the value of this ActionTypeEnum
    *      enumeration.
    * @return True if the value of the specified ActionTypeEnum enumeration (rhs) is equal to the value of this
    *      ActionTypeEnum enumeration, false otherwise.
    */
  bool operator==(const ActionTypeEnum& rhs) const {
    return getValue() == rhs.getValue();
  }

  /** Tests whether the value of the ActionTypeEnum enumeration on the right hand side of the != operator is not equal to
    * the value as this ActionTypeEnum enumeration.
    *
    * @param rhs The ActionTypeEnum enumeration whose value is to be compared against the value of this ActionTypeEnum
    *      enumeration.
    * @return True if the value of the specified ActionTypeEnum enumeration (rhs) is not equal to the value of this
    *      ActionTypeEnum enumeration, false otherwise.
    */
  bool operator!=(const ActionTypeEnum& rhs) const {
    return getValue() != rhs.getValue();
  }

  /** Tests whether the value of the ActionTypeEnum enumeration on the right hand side of the < operator is less than the
    * value as this ActionTypeEnum enumeration.
    *
    * @param rhs The ActionTypeEnum enumeration whose value is to be compared against the value of this ActionTypeEnum
    *      enumeration.
    * @return True if the value of the specified ActionTypeEnum enumeration (rhs) is less than the value of this
    *      ActionTypeEnum enumeration, false otherwise.
    */
  bool operator<(const ActionTypeEnum& rhs) const {
    return getValue() < rhs.getValue();
  }

  /** Tests whether the value of the ActionTypeEnum enumeration on the right hand side of the <= operator is less than or
    * equal to the value as this ActionTypeEnum enumeration.
    *
    * @param rhs The ActionTypeEnum enumeration whose value is to be compared against the value of this ActionTypeEnum
    *      enumeration.
    * @return True if the value of the specified ActionTypeEnum enumeration (rhs) is less than or equal to the value of
    *      this ActionTypeEnum enumeration, false otherwise.
    */
  bool operator<=(const ActionTypeEnum& rhs) const {
    return getValue() <= rhs.getValue();
  }

  /** Tests whether the value of the ActionTypeEnum enumeration on the right hand side of the > operator is greater than
    * the value as this ActionTypeEnum enumeration.
    *
    * @param rhs The ActionTypeEnum enumeration whose value is to be compared against the value of this ActionTypeEnum
    *      enumeration.
    * @return True if the value of the specified ActionTypeEnum enumeration (rhs) is greater than the value of this
    *      ActionTypeEnum enumeration, false otherwise.
    */
  bool operator>(const ActionTypeEnum& rhs) const {
    return getValue() > rhs.getValue();
  }

  /** Tests whether the value of the ActionTypeEnum enumeration on the right hand side of the >= operator is greater than
    * or equal to the value as this ActionTypeEnum enumeration.
    *
    * @param rhs The ActionTypeEnum enumeration whose value is to be compared against the value of this ActionTypeEnum
    *      enumeration.
    * @return True if the value of the specified ActionTypeEnum enumeration (rhs) is greater than or equal to the value of
    *      this ActionTypeEnum enumeration, false otherwise.
    */
  bool operator>=(const ActionTypeEnum& rhs) const {
    return getValue() >= rhs.getValue();
  }

  /** Tests whether the value of this ActionTypeEnum enumeration is equal to the value of the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ActionTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is equal to the value of this ActionTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator==(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() == rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is equal to the value of the specified ActionTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ActionTypeEnum
    *      enumeration.
    * @param rhs The ActionTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is equal to the value of the ActionTypeEnum enumeration (rhs),
    *      false otherwise.
    */
  friend bool operator==(EnumerationItem lhs, const ActionTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs == rhs.getValue();
  }

  /** Tests whether the value of this ActionTypeEnum enumeration is not equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ActionTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is not equal to the value of this ActionTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator!=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() != rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is not equal to the value of the specified ActionTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ActionTypeEnum
    *      enumeration.
    * @param rhs The ActionTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is not equal to the value of the ActionTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator!=(EnumerationItem lhs, const ActionTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs != rhs.getValue();
  }

  /** Tests whether the value of this ActionTypeEnum enumeration is less than the value of the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ActionTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than the value of this ActionTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator<(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() < rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than the value of the specified ActionTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ActionTypeEnum
    *      enumeration.
    * @param rhs The ActionTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than the value of the ActionTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator<(EnumerationItem lhs, const ActionTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs < rhs.getValue();
  }

  /** Tests whether the value of this ActionTypeEnum enumeration is less than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ActionTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than or equal to the value of this ActionTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator<=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() <= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than or equal to the value of the specified
    * ActionTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ActionTypeEnum
    *      enumeration.
    * @param rhs The ActionTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than or equal to the value of the ActionTypeEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator<=(EnumerationItem lhs, const ActionTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs <= rhs.getValue();
  }

  /** Tests whether the value of this ActionTypeEnum enumeration is greater than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ActionTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than the value of this ActionTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator>(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() > rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than the value of the specified ActionTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ActionTypeEnum
    *      enumeration.
    * @param rhs The ActionTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than the value of the ActionTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator>(EnumerationItem lhs, const ActionTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs > rhs.getValue();
  }

  /** Tests whether the value of this ActionTypeEnum enumeration is greater than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this ActionTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than or equal to the value of this ActionTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator>=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() >= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than or equal to the value of the specified
    * ActionTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified ActionTypeEnum
    *      enumeration.
    * @param rhs The ActionTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than or equal to the value of the ActionTypeEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator>=(EnumerationItem lhs, const ActionTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs >= rhs.getValue();
  }

  /** Returns the name of the specified enumeration item.
    *
    * @param item The enumeration item whose name is to be returned.
    * @return The enumeration item's name if valid.
    */
  static std::string toName(EnumerationItem item) {
    ToNameTable::const_iterator iter = m_toNameTable.find(item);
    if (iter == m_toNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to convert enumerated item to its name, item not found in mapping: " << item;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Returns the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item to be returned.
    * @return The enumeration item having the specified name.
    */
  static EnumerationItem fromName(const std::string& itemName) {
    FromNameTable::const_iterator iter = m_fromNameTable.find(itemName);
    if (iter == m_fromNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to return enumerated item having specified name, name not found in mapping: " << itemName;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Return the name of the enumeration item that the value of this ActionTypeEnum enumeration is set to.
    *
    * @return The name of the enumeration item.
    */
  virtual std::string toName() const {
    return toName(getValue());
  }

  /** Sets the value of this ActionTypeEnum enumeration to the value of the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item whose value is to be used to set this ActionTypeEnum enumeration to.
    */
  virtual void setValueFromName(const std::string& itemName) {
    setValue(fromName(itemName));
  }

protected:

  /** The default constructor. In addition to constructing a new ActionTypeEnum, this constructor also makes sure the
    * conversion tables are initialized.
    */
  ActionTypeEnum() {
  }

  /** The destructor [only available to derived classes]. */
  ~ActionTypeEnum() {
  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param additionalDescription An additional description to include in the error message should an exception be thrown.
    * @param item The enumeration item to test.
    */
  static void testForValidItem(const char* additionalDescription, EnumerationItem item) {
    if (!isValid(item)) {
      std::ostringstream oStream;
      oStream << additionalDescription << ": " << item << " (item must be between " << enumNotSet << " and "<< enumMaxExclusive << " exclusive)";
      throw uci::base::UCIException(oStream.str(), 0);
    }

  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param item The enumeration item to test.
    */
  static void testForValidItem(EnumerationItem item) {
    testForValidItem("Invalid enumerated item specified", item);
  }

private:

  /** The type of table that is used to lookup the name of a enumeration item given that enumeration item. */
  typedef std::map<EnumerationItem, const std::string> ToNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  typedef std::map<const std::string, EnumerationItem> FromNameTable;

  /** The table that is used to lookup the name of a enumeration item given that enumeration item. */
  static UCI_EXPORT ToNameTable m_toNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  static UCI_EXPORT FromNameTable m_fromNameTable;

protected:

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ActionTypeEnum to copy from.
    */
  ActionTypeEnum(const ActionTypeEnum& rhs) {
    (void)rhs;
  }

};

} // namespace type
} // namespace uci

template<typename charT, typename traits>
std::basic_ostream<charT, traits>&
operator<<(std::basic_ostream<charT, traits>& oStream, const uci::type::ActionTypeEnum& enumeration)
{
  oStream << enumeration.toName();
  return oStream;
}

#endif // UCI_TYPE_ACTIONTYPEENUM_H

