/** @file SourceCoverageType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SOURCECOVERAGETYPE_H
#define UCI_TYPE_SOURCECOVERAGETYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AngleHalfPairType.h"
#include "AnglePairType.h"
#include "AngleRateRangeType.h"
#include "CapabilityCoverageAreaID_Type.h"
#include "DoubleMinMaxType.h"
#include "LOS_MeasurementEnum.h"
#include "SlantRangeConstraintsType.h"
#include "SpeedRangeType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Characterizes the size of the sensor measurement extent. */
class SourceCoverageType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SourceCoverageType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SourceCoverageType.
    */
  static UCI_EXPORT SourceCoverageType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SourceCoverageType initializing the data accessed by the new SourceCoverageType using
    * the data accessed by the specified SourceCoverageType (cloning).
    *
    * @param accessor The SourceCoverageType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SourceCoverageType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SourceCoverageType.
    */
  static UCI_EXPORT SourceCoverageType& create(const SourceCoverageType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SourceCoverageType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The SourceCoverageType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SourceCoverageType& accessor);

  /** Returns this accessor's type constant, i.e. sourceCoverageType.
    *
    * @return This accessor's type constant, i.e. sourceCoverageType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sourceCoverageType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SourceCoverageType.
    *
    * @return The version that was initialized from the uci:version attribute of SourceCoverageType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SourceCoverageType& accessor) = 0;

  /** Identifies the unique ID of a Capability Coverage Area that is the source of an item. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CapabilityCoverageAreaID_Type, uci::type::accessorType::capabilityCoverageAreaID_Type> CapabilityCoverageAreaID;

  /** Returns a const reference to the value of the enumeration identified by FOV_ReferenceFrame.
    *
    * @return A const reference to the value of the enumeration identified by FOV_ReferenceFrame.
    */
  virtual const uci::type::LOS_MeasurementEnum& getFOV_ReferenceFrame() const = 0;

  /** Returns a reference to the value of the enumeration identified by FOV_ReferenceFrame.
    *
    * @return A reference to the value of the enumeration identified by FOV_ReferenceFrame.
    */
  virtual uci::type::LOS_MeasurementEnum& getFOV_ReferenceFrame() = 0;

  /** Sets the value of the enumeration identified by FOV_ReferenceFrame.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& setFOV_ReferenceFrame(const uci::type::LOS_MeasurementEnum& value) = 0;

  /** Sets the value of the enumeration identified by FOV_ReferenceFrame.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& setFOV_ReferenceFrame(uci::type::LOS_MeasurementEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by FOV_ReferenceFrame exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FOV_ReferenceFrame is enabled or not.
    */
  virtual bool hasFOV_ReferenceFrame() const = 0;

  /** Enables the Element identified by FOV_ReferenceFrame.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by FOV_ReferenceFrame.
    */
  virtual uci::type::LOS_MeasurementEnum& enableFOV_ReferenceFrame(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FOV_ReferenceFrame.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& clearFOV_ReferenceFrame() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RangeLimits.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RangeLimits.
    */
  virtual const uci::type::SlantRangeConstraintsType& getRangeLimits() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RangeLimits.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RangeLimits.
    */
  virtual uci::type::SlantRangeConstraintsType& getRangeLimits() = 0;

  /** Sets the complex content identified by RangeLimits to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RangeLimits.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& setRangeLimits(const uci::type::SlantRangeConstraintsType& value) = 0;

  /** Returns whether the Element identified by RangeLimits exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RangeLimits is enabled or not.
    */
  virtual bool hasRangeLimits() const = 0;

  /** Enables the Element identified by RangeLimits.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RangeLimits.
    */
  virtual uci::type::SlantRangeConstraintsType& enableRangeLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RangeLimits.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& clearRangeLimits() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RangeRateLimits.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RangeRateLimits.
    */
  virtual const uci::type::SpeedRangeType& getRangeRateLimits() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RangeRateLimits.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RangeRateLimits.
    */
  virtual uci::type::SpeedRangeType& getRangeRateLimits() = 0;

  /** Sets the complex content identified by RangeRateLimits to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RangeRateLimits.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& setRangeRateLimits(const uci::type::SpeedRangeType& value) = 0;

  /** Returns whether the Element identified by RangeRateLimits exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RangeRateLimits is enabled or not.
    */
  virtual bool hasRangeRateLimits() const = 0;

  /** Enables the Element identified by RangeRateLimits.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RangeRateLimits.
    */
  virtual uci::type::SpeedRangeType& enableRangeRateLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RangeRateLimits.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& clearRangeRateLimits() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AzimuthLimits.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AzimuthLimits.
    */
  virtual const uci::type::AnglePairType& getAzimuthLimits() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AzimuthLimits.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AzimuthLimits.
    */
  virtual uci::type::AnglePairType& getAzimuthLimits() = 0;

  /** Sets the complex content identified by AzimuthLimits to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AzimuthLimits.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& setAzimuthLimits(const uci::type::AnglePairType& value) = 0;

  /** Returns whether the Element identified by AzimuthLimits exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AzimuthLimits is enabled or not.
    */
  virtual bool hasAzimuthLimits() const = 0;

  /** Enables the Element identified by AzimuthLimits.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AzimuthLimits.
    */
  virtual uci::type::AnglePairType& enableAzimuthLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AzimuthLimits.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& clearAzimuthLimits() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ElevationLimits.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ElevationLimits.
    */
  virtual const uci::type::AngleHalfPairType& getElevationLimits() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ElevationLimits.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ElevationLimits.
    */
  virtual uci::type::AngleHalfPairType& getElevationLimits() = 0;

  /** Sets the complex content identified by ElevationLimits to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ElevationLimits.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& setElevationLimits(const uci::type::AngleHalfPairType& value) = 0;

  /** Returns whether the Element identified by ElevationLimits exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ElevationLimits is enabled or not.
    */
  virtual bool hasElevationLimits() const = 0;

  /** Enables the Element identified by ElevationLimits.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ElevationLimits.
    */
  virtual uci::type::AngleHalfPairType& enableElevationLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ElevationLimits.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& clearElevationLimits() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AzimuthAngleRateLimits.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AzimuthAngleRateLimits.
    */
  virtual const uci::type::AngleRateRangeType& getAzimuthAngleRateLimits() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AzimuthAngleRateLimits.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AzimuthAngleRateLimits.
    */
  virtual uci::type::AngleRateRangeType& getAzimuthAngleRateLimits() = 0;

  /** Sets the complex content identified by AzimuthAngleRateLimits to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AzimuthAngleRateLimits.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& setAzimuthAngleRateLimits(const uci::type::AngleRateRangeType& value) = 0;

  /** Returns whether the Element identified by AzimuthAngleRateLimits exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AzimuthAngleRateLimits is enabled or not.
    */
  virtual bool hasAzimuthAngleRateLimits() const = 0;

  /** Enables the Element identified by AzimuthAngleRateLimits.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AzimuthAngleRateLimits.
    */
  virtual uci::type::AngleRateRangeType& enableAzimuthAngleRateLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AzimuthAngleRateLimits.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& clearAzimuthAngleRateLimits() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ElevationAngleRateLimits.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ElevationAngleRateLimits.
    */
  virtual const uci::type::AngleRateRangeType& getElevationAngleRateLimits() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ElevationAngleRateLimits.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ElevationAngleRateLimits.
    */
  virtual uci::type::AngleRateRangeType& getElevationAngleRateLimits() = 0;

  /** Sets the complex content identified by ElevationAngleRateLimits to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ElevationAngleRateLimits.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& setElevationAngleRateLimits(const uci::type::AngleRateRangeType& value) = 0;

  /** Returns whether the Element identified by ElevationAngleRateLimits exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ElevationAngleRateLimits is enabled or not.
    */
  virtual bool hasElevationAngleRateLimits() const = 0;

  /** Enables the Element identified by ElevationAngleRateLimits.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ElevationAngleRateLimits.
    */
  virtual uci::type::AngleRateRangeType& enableElevationAngleRateLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ElevationAngleRateLimits.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& clearElevationAngleRateLimits() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CosconeY_RangeLimits.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CosconeY_RangeLimits.
    */
  virtual const uci::type::DoubleMinMaxType& getCosconeY_RangeLimits() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CosconeY_RangeLimits.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CosconeY_RangeLimits.
    */
  virtual uci::type::DoubleMinMaxType& getCosconeY_RangeLimits() = 0;

  /** Sets the complex content identified by CosconeY_RangeLimits to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CosconeY_RangeLimits.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& setCosconeY_RangeLimits(const uci::type::DoubleMinMaxType& value) = 0;

  /** Returns whether the Element identified by CosconeY_RangeLimits exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CosconeY_RangeLimits is enabled or not.
    */
  virtual bool hasCosconeY_RangeLimits() const = 0;

  /** Enables the Element identified by CosconeY_RangeLimits.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CosconeY_RangeLimits.
    */
  virtual uci::type::DoubleMinMaxType& enableCosconeY_RangeLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CosconeY_RangeLimits.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& clearCosconeY_RangeLimits() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CosconeZ_RangeLimits.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CosconeZ_RangeLimits.
    */
  virtual const uci::type::DoubleMinMaxType& getCosconeZ_RangeLimits() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CosconeZ_RangeLimits.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CosconeZ_RangeLimits.
    */
  virtual uci::type::DoubleMinMaxType& getCosconeZ_RangeLimits() = 0;

  /** Sets the complex content identified by CosconeZ_RangeLimits to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CosconeZ_RangeLimits.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& setCosconeZ_RangeLimits(const uci::type::DoubleMinMaxType& value) = 0;

  /** Returns whether the Element identified by CosconeZ_RangeLimits exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CosconeZ_RangeLimits is enabled or not.
    */
  virtual bool hasCosconeZ_RangeLimits() const = 0;

  /** Enables the Element identified by CosconeZ_RangeLimits.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CosconeZ_RangeLimits.
    */
  virtual uci::type::DoubleMinMaxType& enableCosconeZ_RangeLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CosconeZ_RangeLimits.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& clearCosconeZ_RangeLimits() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CosconeY_RateRangeLimits.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CosconeY_RateRangeLimits.
    */
  virtual const uci::type::DoubleMinMaxType& getCosconeY_RateRangeLimits() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * CosconeY_RateRangeLimits.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CosconeY_RateRangeLimits.
    */
  virtual uci::type::DoubleMinMaxType& getCosconeY_RateRangeLimits() = 0;

  /** Sets the complex content identified by CosconeY_RateRangeLimits to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CosconeY_RateRangeLimits.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& setCosconeY_RateRangeLimits(const uci::type::DoubleMinMaxType& value) = 0;

  /** Returns whether the Element identified by CosconeY_RateRangeLimits exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CosconeY_RateRangeLimits is enabled or not.
    */
  virtual bool hasCosconeY_RateRangeLimits() const = 0;

  /** Enables the Element identified by CosconeY_RateRangeLimits.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CosconeY_RateRangeLimits.
    */
  virtual uci::type::DoubleMinMaxType& enableCosconeY_RateRangeLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CosconeY_RateRangeLimits.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& clearCosconeY_RateRangeLimits() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CosconeZ_RateRangeLimits.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CosconeZ_RateRangeLimits.
    */
  virtual const uci::type::DoubleMinMaxType& getCosconeZ_RateRangeLimits() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * CosconeZ_RateRangeLimits.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CosconeZ_RateRangeLimits.
    */
  virtual uci::type::DoubleMinMaxType& getCosconeZ_RateRangeLimits() = 0;

  /** Sets the complex content identified by CosconeZ_RateRangeLimits to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CosconeZ_RateRangeLimits.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& setCosconeZ_RateRangeLimits(const uci::type::DoubleMinMaxType& value) = 0;

  /** Returns whether the Element identified by CosconeZ_RateRangeLimits exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CosconeZ_RateRangeLimits is enabled or not.
    */
  virtual bool hasCosconeZ_RateRangeLimits() const = 0;

  /** Enables the Element identified by CosconeZ_RateRangeLimits.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CosconeZ_RateRangeLimits.
    */
  virtual uci::type::DoubleMinMaxType& enableCosconeZ_RateRangeLimits(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CosconeZ_RateRangeLimits.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& clearCosconeZ_RateRangeLimits() = 0;

  /** Returns a const reference to the bounded list identified by CapabilityCoverageAreaID.
    *
    * @return A const reference to the bounded list identified by CapabilityCoverageAreaID.
    */
  virtual const uci::type::SourceCoverageType::CapabilityCoverageAreaID& getCapabilityCoverageAreaID() const = 0;

  /** Returns a reference to the bounded list identified by CapabilityCoverageAreaID.
    *
    * @return A reference to the bounded list identified by CapabilityCoverageAreaID.
    */
  virtual uci::type::SourceCoverageType::CapabilityCoverageAreaID& getCapabilityCoverageAreaID() = 0;

  /** Sets the bounded list identified by CapabilityCoverageAreaID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceCoverageType& setCapabilityCoverageAreaID(const uci::type::SourceCoverageType::CapabilityCoverageAreaID& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SourceCoverageType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SourceCoverageType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SourceCoverageType to copy from.
    */
  SourceCoverageType(const SourceCoverageType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SourceCoverageType to the contents of the SourceCoverageType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SourceCoverageType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this SourceCoverageType.
    * @return A reference to this SourceCoverageType.
    */
  SourceCoverageType& operator=(const SourceCoverageType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SOURCECOVERAGETYPE_H

