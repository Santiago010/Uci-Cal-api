/** @file TimeAndPolarDataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_TIMEANDPOLARDATATYPE_H
#define UCI_TYPE_TIMEANDPOLARDATATYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/DoubleAccessor.h"
#include "uci/base/IntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/PolarMotionType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Information on offsets between time systems and on polar motion, both of which are available from the Naval
  * Observatory International Earth Rotation Service.
  */
class TimeAndPolarDataType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new TimeAndPolarDataType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed TimeAndPolarDataType.
    */
  static UCI_EXPORT TimeAndPolarDataType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new TimeAndPolarDataType initializing the data accessed by the new TimeAndPolarDataType
    * using the data accessed by the specified TimeAndPolarDataType (cloning).
    *
    * @param accessor The TimeAndPolarDataType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created TimeAndPolarDataType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed TimeAndPolarDataType.
    */
  static UCI_EXPORT TimeAndPolarDataType& create(const TimeAndPolarDataType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified TimeAndPolarDataType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The TimeAndPolarDataType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(TimeAndPolarDataType& accessor);

  /** Returns this accessor's type constant, i.e. timeAndPolarDataType.
    *
    * @return This accessor's type constant, i.e. timeAndPolarDataType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::timeAndPolarDataType;
  }

  /** Returns the version that was initialized from the uci:version attribute of TimeAndPolarDataType.
    *
    * @return The version that was initialized from the uci:version attribute of TimeAndPolarDataType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const TimeAndPolarDataType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by TAI_UTC_Difference.
    *
    * @return The value of the simple primitive data type identified by TAI_UTC_Difference.
    */
  virtual xs::Int getTAI_UTC_Difference() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TAI_UTC_Difference.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TimeAndPolarDataType& setTAI_UTC_Difference(xs::Int value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by UT1_UTC_Difference.
    *
    * @return The value of the simple primitive data type identified by UT1_UTC_Difference.
    */
  virtual xs::Double getUT1_UTC_Difference() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by UT1_UTC_Difference.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TimeAndPolarDataType& setUT1_UTC_Difference(xs::Double value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by UT1_Rate.
    *
    * @return The value of the simple primitive data type identified by UT1_Rate.
    */
  virtual xs::Double getUT1_Rate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by UT1_Rate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TimeAndPolarDataType& setUT1_Rate(xs::Double value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PolarMotion.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PolarMotion.
    */
  virtual const uci::type::PolarMotionType& getPolarMotion() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PolarMotion.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PolarMotion.
    */
  virtual uci::type::PolarMotionType& getPolarMotion() = 0;

  /** Sets the complex content identified by PolarMotion to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PolarMotion.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TimeAndPolarDataType& setPolarMotion(const uci::type::PolarMotionType& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by NutationModelTerms.
    *
    * @return The value of the simple primitive data type identified by NutationModelTerms.
    */
  virtual xs::Int getNutationModelTerms() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by NutationModelTerms.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TimeAndPolarDataType& setNutationModelTerms(xs::Int value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by NextLeapSecond.
    *
    * @return The value of the simple primitive data type identified by NextLeapSecond.
    */
  virtual uci::type::DateTimeTypeValue getNextLeapSecond() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by NextLeapSecond.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TimeAndPolarDataType& setNextLeapSecond(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by NextLeapSecond exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NextLeapSecond is enabled or not.
    */
  virtual bool hasNextLeapSecond() const = 0;

  /** Clears (disabled) the Element identified by NextLeapSecond.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TimeAndPolarDataType& clearNextLeapSecond() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  TimeAndPolarDataType() {
  }

  /** The destructor [only available to derived classes]. */
  ~TimeAndPolarDataType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The TimeAndPolarDataType to copy from.
    */
  TimeAndPolarDataType(const TimeAndPolarDataType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this TimeAndPolarDataType to the contents of the TimeAndPolarDataType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The TimeAndPolarDataType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this TimeAndPolarDataType.
    * @return A reference to this TimeAndPolarDataType.
    */
  TimeAndPolarDataType& operator=(const TimeAndPolarDataType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_TIMEANDPOLARDATATYPE_H

