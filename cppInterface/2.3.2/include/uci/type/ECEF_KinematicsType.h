/** @file ECEF_KinematicsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ECEF_KINEMATICSTYPE_H
#define UCI_TYPE_ECEF_KINEMATICSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/ECEF_AccelerationType.h"
#include "uci/type/ECEF_PositionType.h"
#include "uci/type/ECEF_StateCovarianceType.h"
#include "uci/type/ECEF_VelocityType.h"
#include "uci/type/OrientationType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Provides kinematic information in the Earth-Centered-Earth-Fixed (ECEF) coordinate system. ECEF is a cartesian
  * coordinate system with an origin located at the center of mass of the Earth, a Z-axis aligned with the rotational
  * axis of the Earth (positive Z in the direction of the North pole), the X-Y plane passing through the equator
  * (positive X in the direction of the Prime meridian, and positive Y in a direction perpendicular to both X and Z to
  * form a right-handed coordinate system). See the WGS84C_3D world model for details and precise definitions.
  */
class ECEF_KinematicsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ECEF_KinematicsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ECEF_KinematicsType.
    */
  static UCI_EXPORT ECEF_KinematicsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ECEF_KinematicsType initializing the data accessed by the new ECEF_KinematicsType using
    * the data accessed by the specified ECEF_KinematicsType (cloning).
    *
    * @param accessor The ECEF_KinematicsType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created ECEF_KinematicsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ECEF_KinematicsType.
    */
  static UCI_EXPORT ECEF_KinematicsType& create(const ECEF_KinematicsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ECEF_KinematicsType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The ECEF_KinematicsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ECEF_KinematicsType& accessor);

  /** Returns this accessor's type constant, i.e. eCEF_KinematicsType.
    *
    * @return This accessor's type constant, i.e. eCEF_KinematicsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::eCEF_KinematicsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ECEF_KinematicsType.
    *
    * @return The version that was initialized from the uci:version attribute of ECEF_KinematicsType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ECEF_KinematicsType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by TimeValid.
    *
    * @return The value of the simple primitive data type identified by TimeValid.
    */
  virtual uci::type::DateTimeTypeValue getTimeValid() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TimeValid.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_KinematicsType& setTimeValid(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual const uci::type::ECEF_PositionType& getPosition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual uci::type::ECEF_PositionType& getPosition() = 0;

  /** Sets the complex content identified by Position to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Position.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_KinematicsType& setPosition(const uci::type::ECEF_PositionType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Velocity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Velocity.
    */
  virtual const uci::type::ECEF_VelocityType& getVelocity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Velocity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Velocity.
    */
  virtual uci::type::ECEF_VelocityType& getVelocity() = 0;

  /** Sets the complex content identified by Velocity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Velocity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_KinematicsType& setVelocity(const uci::type::ECEF_VelocityType& value) = 0;

  /** Returns whether the Element identified by Velocity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Velocity is enabled or not.
    */
  virtual bool hasVelocity() const = 0;

  /** Enables the Element identified by Velocity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Velocity.
    */
  virtual uci::type::ECEF_VelocityType& enableVelocity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Velocity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_KinematicsType& clearVelocity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Acceleration.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Acceleration.
    */
  virtual const uci::type::ECEF_AccelerationType& getAcceleration() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Acceleration.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Acceleration.
    */
  virtual uci::type::ECEF_AccelerationType& getAcceleration() = 0;

  /** Sets the complex content identified by Acceleration to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Acceleration.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_KinematicsType& setAcceleration(const uci::type::ECEF_AccelerationType& value) = 0;

  /** Returns whether the Element identified by Acceleration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Acceleration is enabled or not.
    */
  virtual bool hasAcceleration() const = 0;

  /** Enables the Element identified by Acceleration.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Acceleration.
    */
  virtual uci::type::ECEF_AccelerationType& enableAcceleration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Acceleration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_KinematicsType& clearAcceleration() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Orientation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Orientation.
    */
  virtual const uci::type::OrientationType& getOrientation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Orientation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Orientation.
    */
  virtual uci::type::OrientationType& getOrientation() = 0;

  /** Sets the complex content identified by Orientation to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Orientation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_KinematicsType& setOrientation(const uci::type::OrientationType& value) = 0;

  /** Returns whether the Element identified by Orientation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Orientation is enabled or not.
    */
  virtual bool hasOrientation() const = 0;

  /** Enables the Element identified by Orientation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Orientation.
    */
  virtual uci::type::OrientationType& enableOrientation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Orientation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_KinematicsType& clearOrientation() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by StateCovariance.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by StateCovariance.
    */
  virtual const uci::type::ECEF_StateCovarianceType& getStateCovariance() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by StateCovariance.
    *
    * @return A reference to the accessor that provides access to the complex content identified by StateCovariance.
    */
  virtual uci::type::ECEF_StateCovarianceType& getStateCovariance() = 0;

  /** Sets the complex content identified by StateCovariance to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by StateCovariance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_KinematicsType& setStateCovariance(const uci::type::ECEF_StateCovarianceType& value) = 0;

  /** Returns whether the Element identified by StateCovariance exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by StateCovariance is enabled or not.
    */
  virtual bool hasStateCovariance() const = 0;

  /** Enables the Element identified by StateCovariance.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by StateCovariance.
    */
  virtual uci::type::ECEF_StateCovarianceType& enableStateCovariance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by StateCovariance.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ECEF_KinematicsType& clearStateCovariance() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ECEF_KinematicsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ECEF_KinematicsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ECEF_KinematicsType to copy from.
    */
  ECEF_KinematicsType(const ECEF_KinematicsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ECEF_KinematicsType to the contents of the ECEF_KinematicsType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ECEF_KinematicsType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this ECEF_KinematicsType.
    * @return A reference to this ECEF_KinematicsType.
    */
  ECEF_KinematicsType& operator=(const ECEF_KinematicsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ECEF_KINEMATICSTYPE_H

