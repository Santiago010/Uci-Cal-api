/** @file OwnerProducerEnum.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OWNERPRODUCERENUM_H
#define UCI_TYPE_OWNERPRODUCERENUM_H

#include <map>
#include <sstream>

#include "../base/Accessor.h"
#include "../base/export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** CVEnumISMCATOwnerProducer Values */
class OwnerProducerEnum : public virtual uci::base::Accessor {
public:

  /** The following are the enumerated items that comprise this enumeration */
  enum EnumerationItem {

    /** Enumerated item that indicates that the enumeration has not been set */
    enumNotSet,

    /** Foreign Government Information */
    UCI_FGI,

    /** United States */
    UCI_USA,

    /** Aruba */
    UCI_ABW,

    /** Islamic Republic of Afghanistan */
    UCI_AFG,

    /** Republic of Angola */
    UCI_AGO,

    /** Anguilla */
    UCI_AIA,

    /** Republic of Albania */
    UCI_ALB,

    /** Principality of Andorra */
    UCI_AND,

    /** United Arab Emirates */
    UCI_ARE,

    /** Argentine Republic */
    UCI_ARG,

    /** Republic of Armenia */
    UCI_ARM,

    /** Territory of American Samoa */
    UCI_ASM,

    /** Antarctica */
    UCI_ATA,

    /** French Southern and Antarctic Lands */
    UCI_ATF,

    /** Antigua and Barbuda */
    UCI_ATG,

    /** Commonwealth of Australia */
    UCI_AUS,

    /** Republic of Austria */
    UCI_AUT,

    /** Guantanamo Bay Naval Base */
    UCI_AX2,

    /** Republic of Azerbaijan */
    UCI_AZE,

    /** Republic of Burundi */
    UCI_BDI,

    /** Kingdom of Belgium */
    UCI_BEL,

    /** Republic of Benin */
    UCI_BEN,

    /** Bonaire, Sint Eustatius, and Saba */
    UCI_BES,

    /** Burkina Faso */
    UCI_BFA,

    /** People's Republic of Bangladesh */
    UCI_BGD,

    /** Republic of Bulgaria */
    UCI_BGR,

    /** Kingdom of Bahrain */
    UCI_BHR,

    /** Commonwealth of The Bahamas */
    UCI_BHS,

    /** Bosnia and Herzegovina */
    UCI_BIH,

    /** Saint Barthelemy */
    UCI_BLM,

    /** Republic of Belarus */
    UCI_BLR,

    /** Belize */
    UCI_BLZ,

    /** Bermuda */
    UCI_BMU,

    /** Plurinational State of Bolivia */
    UCI_BOL,

    /** Federative Republic of Brazil */
    UCI_BRA,

    /** Barbados */
    UCI_BRB,

    /** Brunei Darussalam */
    UCI_BRN,

    /** Kingdom of Bhutan */
    UCI_BTN,

    /** Bouvet Island */
    UCI_BVT,

    /** Republic of Botswana */
    UCI_BWA,

    /** Central African Republic */
    UCI_CAF,

    /** Canada */
    UCI_CAN,

    /** Territory of Cocos (Keeling) Islands */
    UCI_CCK,

    /** Swiss Confederation */
    UCI_CHE,

    /** Republic of Chile */
    UCI_CHL,

    /** People's Republic of China */
    UCI_CHN,

    /** Republic of Côte d'Ivoire */
    UCI_CIV,

    /** Republic of Cameroon */
    UCI_CMR,

    /** Democratic Republic of the Congo */
    UCI_COD,

    /** Republic of the Congo */
    UCI_COG,

    /** Cook Islands */
    UCI_COK,

    /** Republic of Colombia */
    UCI_COL,

    /** Union of the Comoros */
    UCI_COM,

    /** Clipperton Island */
    UCI_CPT,

    /** Republic of Cape Verde */
    UCI_CPV,

    /** Republic of Costa Rica */
    UCI_CRI,

    /** Republic of Cuba */
    UCI_CUB,

    /** Curaçao */
    UCI_CUW,

    /** Territory of Christmas Island */
    UCI_CXR,

    /** Cayman Islands */
    UCI_CYM,

    /** Republic of Cyprus */
    UCI_CYP,

    /** Czech Republic */
    UCI_CZE,

    /** Federal Republic of Germany */
    UCI_DEU,

    /** Diego Garcia */
    UCI_DGA,

    /** Republic of Djibouti */
    UCI_DJI,

    /** Commonwealth of Dominica */
    UCI_DMA,

    /** Kingdom of Denmark */
    UCI_DNK,

    /** Dominican Republic */
    UCI_DOM,

    /** People's Democratic Republic of Algeria */
    UCI_DZA,

    /** Republic of Ecuador */
    UCI_ECU,

    /** Arab Republic of Egypt */
    UCI_EGY,

    /** State of Eritrea */
    UCI_ERI,

    /** Western Sahara */
    UCI_ESH,

    /** Kingdom of Spain */
    UCI_ESP,

    /** Republic of Estonia */
    UCI_EST,

    /** Federal Democratic Republic of Ethiopia */
    UCI_ETH,

    /** Republic of Finland */
    UCI_FIN,

    /** Republic of Fiji */
    UCI_FJI,

    /** Falkland Islands (Islas Malvinas) */
    UCI_FLK,

    /** French Republic */
    UCI_FRA,

    /** Faroe Islands */
    UCI_FRO,

    /** Federated States of Micronesia */
    UCI_FSM,

    /** Gabonese Republic */
    UCI_GAB,

    /** United Kingdom of Great Britain and Northern Ireland */
    UCI_GBR,

    /** Georgia */
    UCI_GEO,

    /** Bailiwick of Guernsey */
    UCI_GGY,

    /** Republic of Ghana */
    UCI_GHA,

    /** Gibraltar */
    UCI_GIB,

    /** Republic of Guinea */
    UCI_GIN,

    /** Department of Guadeloupe */
    UCI_GLP,

    /** Republic of The Gambia */
    UCI_GMB,

    /** Republic of Guinea-Bissau */
    UCI_GNB,

    /** Republic of Equatorial Guinea */
    UCI_GNQ,

    /** Hellenic Republic */
    UCI_GRC,

    /** Grenada */
    UCI_GRD,

    /** Greenland */
    UCI_GRL,

    /** Republic of Guatemala */
    UCI_GTM,

    /** Department of Guiana */
    UCI_GUF,

    /** Territory of Guam */
    UCI_GUM,

    /** Co-operative Republic of Guyana */
    UCI_GUY,

    /** Hong Kong Special Administrative Region */
    UCI_HKG,

    /** Territory of Heard Island and McDonald Islands */
    UCI_HMD,

    /** Republic of Honduras */
    UCI_HND,

    /** Republic of Croatia */
    UCI_HRV,

    /** Republic of Haiti */
    UCI_HTI,

    /** Hungary */
    UCI_HUN,

    /** Republic of Indonesia */
    UCI_IDN,

    /** Isle of Man */
    UCI_IMN,

    /** Republic of India */
    UCI_IND,

    /** British Indian Ocean Territory */
    UCI_IOT,

    /** Ireland */
    UCI_IRL,

    /** Islamic Republic of Iran */
    UCI_IRN,

    /** Republic of Iraq */
    UCI_IRQ,

    /** Republic of Iceland */
    UCI_ISL,

    /** State of Israel */
    UCI_ISR,

    /** Italian Republic */
    UCI_ITA,

    /** Jamaica */
    UCI_JAM,

    /** Bailiwick of Jersey */
    UCI_JEY,

    /** Hashemite Kingdom of Jordan */
    UCI_JOR,

    /** Japan */
    UCI_JPN,

    /** Republic of Kazakhstan */
    UCI_KAZ,

    /** Republic of Kenya */
    UCI_KEN,

    /** Kyrgyz Republic */
    UCI_KGZ,

    /** Kingdom of Cambodia */
    UCI_KHM,

    /** Republic of Kiribati */
    UCI_KIR,

    /** Federation of Saint Kitts and Nevis */
    UCI_KNA,

    /** Republic of Korea */
    UCI_KOR,

    /** State of Kuwait */
    UCI_KWT,

    /** Lao People's Democratic Republic */
    UCI_LAO,

    /** Lebanese Republic */
    UCI_LBN,

    /** Republic of Liberia */
    UCI_LBR,

    /** Libya */
    UCI_LBY,

    /** Saint Lucia */
    UCI_LCA,

    /** Principality of Liechtenstein */
    UCI_LIE,

    /** Democratic Socialist Republic of Sri Lanka */
    UCI_LKA,

    /** Kingdom of Lesotho */
    UCI_LSO,

    /** Republic of Lithuania */
    UCI_LTU,

    /** Grand Duchy of Luxembourg */
    UCI_LUX,

    /** Republic of Latvia */
    UCI_LVA,

    /** Macau Special Administrative Region */
    UCI_MAC,

    /** Saint Martin */
    UCI_MAF,

    /** Kingdom of Morocco */
    UCI_MAR,

    /** Principality of Monaco */
    UCI_MCO,

    /** Republic of Moldova */
    UCI_MDA,

    /** Republic of Madagascar */
    UCI_MDG,

    /** Republic of Maldives */
    UCI_MDV,

    /** United Mexican States */
    UCI_MEX,

    /** Republic of the Marshall Islands */
    UCI_MHL,

    /** Republic of Macedonia */
    UCI_MKD,

    /** Republic of Mali */
    UCI_MLI,

    /** Republic of Malta */
    UCI_MLT,

    /** Union of Burma */
    UCI_MMR,

    /** Montenegro */
    UCI_MNE,

    /** Mongolia */
    UCI_MNG,

    /** Commonwealth of the Northern Mariana Islands */
    UCI_MNP,

    /** Republic of Mozambique */
    UCI_MOZ,

    /** Islamic Republic of Mauritania */
    UCI_MRT,

    /** Montserrat */
    UCI_MSR,

    /** Department of Martinique */
    UCI_MTQ,

    /** Republic of Mauritius */
    UCI_MUS,

    /** Republic of Malawi */
    UCI_MWI,

    /** Malaysia */
    UCI_MYS,

    /** Department of Mayotte */
    UCI_MYT,

    /** Republic of Namibia */
    UCI_NAM,

    /** New Caledonia */
    UCI_NCL,

    /** Republic of the Niger */
    UCI_NER,

    /** Territory of Norfolk Island */
    UCI_NFK,

    /** Federal Republic of Nigeria */
    UCI_NGA,

    /** Republic of Nicaragua */
    UCI_NIC,

    /** Niue */
    UCI_NIU,

    /** Kingdom of the Netherlands */
    UCI_NLD,

    /** Kingdom of Norway */
    UCI_NOR,

    /** Federal Democratic Republic of Nepal */
    UCI_NPL,

    /** Republic of Nauru */
    UCI_NRU,

    /** New Zealand */
    UCI_NZL,

    /** Sultanate of Oman */
    UCI_OMN,

    /** Islamic Republic of Pakistan */
    UCI_PAK,

    /** Republic of Panama */
    UCI_PAN,

    /** Pitcairn, Henderson, Ducie, and Oeno Islands */
    UCI_PCN,

    /** Republic of Peru */
    UCI_PER,

    /** Republic of the Philippines */
    UCI_PHL,

    /** Republic of Palau */
    UCI_PLW,

    /** Independent State of Papua New Guinea */
    UCI_PNG,

    /** Republic of Poland */
    UCI_POL,

    /** Commonwealth of Puerto Rico */
    UCI_PRI,

    /** Democratic People's Republic of Korea */
    UCI_PRK,

    /** Portuguese Republic */
    UCI_PRT,

    /** Republic of Paraguay */
    UCI_PRY,

    /** Palestinian Territory */
    UCI_PSE,

    /** French Polynesia */
    UCI_PYF,

    /** State of Qatar */
    UCI_QAT,

    /** Department of Reunion */
    UCI_REU,

    /** Romania */
    UCI_ROU,

    /** Russian Federation */
    UCI_RUS,

    /** Republic of Rwanda */
    UCI_RWA,

    /** Kingdom of Saudi Arabia */
    UCI_SAU,

    /** Republic of the Sudan */
    UCI_SDN,

    /** Republic of Senegal */
    UCI_SEN,

    /** Republic of Singapore */
    UCI_SGP,

    /** South Georgia and South Sandwich Islands */
    UCI_SGS,

    /** Saint Helena, Ascension, and Tristan da Cunha */
    UCI_SHN,

    /** Solomon Islands */
    UCI_SLB,

    /** Republic of Sierra Leone */
    UCI_SLE,

    /** Republic of El Salvador */
    UCI_SLV,

    /** Republic of San Marino */
    UCI_SMR,

    /** Somalia, Federal Republic of */
    UCI_SOM,

    /** Territorial Collectivity of Saint Pierre and Miquelon */
    UCI_SPM,

    /** Republic of Serbia */
    UCI_SRB,

    /** Republic of South Sudan */
    UCI_SSD,

    /** Democratic Republic of Sao Tome and Principe */
    UCI_STP,

    /** Republic of Suriname */
    UCI_SUR,

    /** Slovak Republic */
    UCI_SVK,

    /** Republic of Slovenia */
    UCI_SVN,

    /** Kingdom of Sweden */
    UCI_SWE,

    /** Kingdom of Swaziland */
    UCI_SWZ,

    /** Sint Maarten */
    UCI_SXM,

    /** Republic of Seychelles */
    UCI_SYC,

    /** Syrian Arab Republic */
    UCI_SYR,

    /** Turks and Caicos Islands */
    UCI_TCA,

    /** Republic of Chad */
    UCI_TCD,

    /** Togolese Republic */
    UCI_TGO,

    /** Kingdom of Thailand */
    UCI_THA,

    /** Republic of Tajikistan */
    UCI_TJK,

    /** Tokelau */
    UCI_TKL,

    /** Turkmenistan */
    UCI_TKM,

    /** Democratic Republic of Timor-Leste */
    UCI_TLS,

    /** Kingdom of Tonga */
    UCI_TON,

    /** Republic of Trinidad and Tobago */
    UCI_TTO,

    /** Tunisian Republic */
    UCI_TUN,

    /** Republic of Turkey */
    UCI_TUR,

    /** Tuvalu */
    UCI_TUV,

    /** Taiwan */
    UCI_TWN,

    /** United Republic of Tanzania */
    UCI_TZA,

    /** Republic of Uganda */
    UCI_UGA,

    /** Ukraine */
    UCI_UKR,

    /** Oriental Republic of Uruguay */
    UCI_URY,

    /** Republic of Uzbekistan */
    UCI_UZB,

    /** State of the Vatican City */
    UCI_VAT,

    /** Saint Vincent and the Grenadines */
    UCI_VCT,

    /** Bolivarian Republic of Venezuela */
    UCI_VEN,

    /** Virgin Islands, British */
    UCI_VGB,

    /** United States Virgin Islands */
    UCI_VIR,

    /** Socialist Republic of Vietnam */
    UCI_VNM,

    /** Republic of Vanuatu */
    UCI_VUT,

    /** Wallis and Futuna */
    UCI_WLF,

    /** Independent State of Samoa */
    UCI_WSM,

    /** Territory of Ashmore and Cartier Islands */
    UCI_XAC,

    /** Entity 1 */
    UCI_XAZ,

    /** Bassas da India */
    UCI_XBI,

    /** Baker Island */
    UCI_XBK,

    /** Entity 2 */
    UCI_XCR,

    /** Coral Sea Islands Territory */
    UCI_XCS,

    /** Entity 3 */
    UCI_XCY,

    /** Europa Island */
    UCI_XEU,

    /** Glorioso Islands */
    UCI_XGL,

    /** Gaza Strip */
    UCI_XGZ,

    /** Howland Island */
    UCI_XHO,

    /** Johnston Atoll */
    UCI_XJA,

    /** Jan Mayen */
    UCI_XJM,

    /** Juan de Nova Island */
    UCI_XJN,

    /** Jarvis Island */
    UCI_XJV,

    /** Entity 4 */
    UCI_XKM,

    /** Entity 5 */
    UCI_XKN,

    /** Kingman Reef */
    UCI_XKR,

    /** Republic of Kosovo */
    UCI_XKS,

    /** Midway Islands */
    UCI_XMW,

    /** Navassa Island */
    UCI_XNV,

    /** Palmyra Atoll */
    UCI_XPL,

    /** Paracel Islands */
    UCI_XPR,

    /** Etorofu, Habomai, Kunashiri, and Shikotan Islands */
    UCI_XQP,

    /** Akrotiri */
    UCI_XQZ,

    /** Spratly Islands */
    UCI_XSP,

    /** Svalbard */
    UCI_XSV,

    /** Tromelin Island */
    UCI_XTR,

    /** West Bank */
    UCI_XWB,

    /** Wake Island */
    UCI_XWK,

    /** Dhekelia */
    UCI_XXD,

    /** No Man's Land */
    UCI_XXX,

    /** Republic of Yemen */
    UCI_YEM,

    /** Republic of South Africa */
    UCI_ZAF,

    /** Republic of Zambia */
    UCI_ZMB,

    /** Republic of Zimbabwe */
    UCI_ZWE,

    /** FOUR EYES */
    UCI_ACGU,

    /** Suppressed */
    UCI_APFS,

    /** Biological Weapons Convention States */
    UCI_BWCS,

    /** ROK/US Combined Forces Command, Korea */
    UCI_CFCK,

    /** Combined Maritime Forces Central */
    UCI_CMFC,

    /** Cooperative Maritime Forces Pacific */
    UCI_CMFP,

    /** Civilian Protection Monitoring Team for Sudan */
    UCI_CPMT,

    /** Countering Transnational Organized Crime */
    UCI_CTOC,

    /** Chemical Weapons Convention States */
    UCI_CWCS,

    /** FIVE EYES */
    UCI_FVEY,

    /** Global Counter-Terrorism Forces */
    UCI_GCTF,

    /** Global Maritime Interception Forces */
    UCI_GMIF,

    /** International Security Assistance Force for Afghanistan */
    UCI_ISAF,

    /** Stabilization Forces in Kosovo */
    UCI_KFOR,

    /** Multi-Lateral Enduring Contingency */
    UCI_MLEC,

    /** North African Counter-Terrorism Forces */
    UCI_NACT,

    /** North Atlantic Treaty Organization */
    UCI_NATO,

    /** NATO Convention Armed Forces in Europe */
    UCI_NCFE,

    /** Open Skies Treaty */
    UCI_OSTY,

    /** Suppressed */
    UCI_SPAA,

    /** THREE EYES */
    UCI_TEYE,

    /** United Nations Command, Korea */
    UCI_UNCK,

    /** Enumerated item that indicates maximum enumerated item exclusive of this item */
    enumMaxExclusive
  };

  /** Returns this accessor's type constant, i.e. ownerProducerEnum.
    *
    * @return This accessor's type constant, i.e. ownerProducerEnum.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::ownerProducerEnum;
  }

  /** The assignment operator. Sets the contents of this OwnerProducerEnum to the contents of the OwnerProducerEnum on the
    * right hand side (rhs) of the assignment operator.
    *
    * @param rhs The OwnerProducerEnum on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this OwnerProducerEnum.
    * @return A reference to this OwnerProducerEnum.
    */
  OwnerProducerEnum& operator=(const OwnerProducerEnum& rhs) {
    setValue(rhs.getValue());
    return *this;
  }

  /** The assignment operator that sets the value of this OwnerProducerEnum enumeration to the EnumerationItem on the right
    * hand side of the assignment operator.
    *
    * @param rhs The EnumerationItem whose value is to be assigned to this OwnerProducerEnum enumeration.
    * @return A reference to this OwnerProducerEnum enumeration.
    */
  OwnerProducerEnum& operator=(EnumerationItem rhs) {
    setValue(rhs);
    return *this;
  }

  /** Sets the value of this OwnerProducerEnum enumeration to the value of the specified enumeration item.
    *
    * @param item The EnumerationItem whose value is to be used to set the value of this OwnerProducerEnum enumeration.
    */
  virtual void setValue(EnumerationItem item) = 0;

  /** Returns the value of this OwnerProducerEnum enumeration.
    *
    * @param testForValidity=true Specifies whether this OwnerProducerEnum enumeration should be validated (true) or not
    *      (false) as part of retrieving its value.
    * @return The value of this OwnerProducerEnum enumeration.
    */
  virtual EnumerationItem getValue(bool testForValidity=true) const = 0;

  /** Returns the number of items in this OwnerProducerEnum enumeration.
    *
    * @return The number of items in this OwnerProducerEnum enumeration.
    */
  int getNumberOfItems() const noexception {
    return 304;
  }

  /** Returns whether this OwnerProducerEnum enumeration is valid or not. A OwnerProducerEnum enumeration is valid if its
    * value is one of the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @return A flag indicating whether this OwnerProducerEnum enumeration is valid (true) or not (false).
    */
  virtual bool isValid() const noexception {
    return isValid(getValue(false));
  }

  /** Returns whether the specified enumeration item is valid or not. A enumeration item is valid if its value is one of
    * the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @param item The EnumerationItem to test.
    * @return A flag indicating whether the specified EnumerationItem is valid (true) or not (false).
    */
  static bool isValid(EnumerationItem item) noexception {
    return (item > enumNotSet) && (item < enumMaxExclusive);
  }

  /** Returns whether the specified name item is valid or not. A name is valid if it is the name of one of the enumeration
    * items other than enumNotSet and enumMaxExclusive.
    *
    * @param name The name to test.
    * @return A flag indicating whether the specified name is valid (true) or not (false).
    */
  static bool isValid(const std::string& name) noexception {
    FromNameTable::const_iterator iter = m_fromNameTable.find(name);
    return !(iter == m_fromNameTable.end());
  }

  /** Tests whether the value of the OwnerProducerEnum enumeration on the right hand side of the == operator is equal to
    * the value as this OwnerProducerEnum enumeration.
    *
    * @param rhs The OwnerProducerEnum enumeration whose value is to be compared against the value of this
    *      OwnerProducerEnum enumeration.
    * @return True if the value of the specified OwnerProducerEnum enumeration (rhs) is equal to the value of this
    *      OwnerProducerEnum enumeration, false otherwise.
    */
  bool operator==(const OwnerProducerEnum& rhs) const {
    return getValue() == rhs.getValue();
  }

  /** Tests whether the value of the OwnerProducerEnum enumeration on the right hand side of the != operator is not equal
    * to the value as this OwnerProducerEnum enumeration.
    *
    * @param rhs The OwnerProducerEnum enumeration whose value is to be compared against the value of this
    *      OwnerProducerEnum enumeration.
    * @return True if the value of the specified OwnerProducerEnum enumeration (rhs) is not equal to the value of this
    *      OwnerProducerEnum enumeration, false otherwise.
    */
  bool operator!=(const OwnerProducerEnum& rhs) const {
    return getValue() != rhs.getValue();
  }

  /** Tests whether the value of the OwnerProducerEnum enumeration on the right hand side of the < operator is less than
    * the value as this OwnerProducerEnum enumeration.
    *
    * @param rhs The OwnerProducerEnum enumeration whose value is to be compared against the value of this
    *      OwnerProducerEnum enumeration.
    * @return True if the value of the specified OwnerProducerEnum enumeration (rhs) is less than the value of this
    *      OwnerProducerEnum enumeration, false otherwise.
    */
  bool operator<(const OwnerProducerEnum& rhs) const {
    return getValue() < rhs.getValue();
  }

  /** Tests whether the value of the OwnerProducerEnum enumeration on the right hand side of the <= operator is less than
    * or equal to the value as this OwnerProducerEnum enumeration.
    *
    * @param rhs The OwnerProducerEnum enumeration whose value is to be compared against the value of this
    *      OwnerProducerEnum enumeration.
    * @return True if the value of the specified OwnerProducerEnum enumeration (rhs) is less than or equal to the value of
    *      this OwnerProducerEnum enumeration, false otherwise.
    */
  bool operator<=(const OwnerProducerEnum& rhs) const {
    return getValue() <= rhs.getValue();
  }

  /** Tests whether the value of the OwnerProducerEnum enumeration on the right hand side of the > operator is greater than
    * the value as this OwnerProducerEnum enumeration.
    *
    * @param rhs The OwnerProducerEnum enumeration whose value is to be compared against the value of this
    *      OwnerProducerEnum enumeration.
    * @return True if the value of the specified OwnerProducerEnum enumeration (rhs) is greater than the value of this
    *      OwnerProducerEnum enumeration, false otherwise.
    */
  bool operator>(const OwnerProducerEnum& rhs) const {
    return getValue() > rhs.getValue();
  }

  /** Tests whether the value of the OwnerProducerEnum enumeration on the right hand side of the >= operator is greater
    * than or equal to the value as this OwnerProducerEnum enumeration.
    *
    * @param rhs The OwnerProducerEnum enumeration whose value is to be compared against the value of this
    *      OwnerProducerEnum enumeration.
    * @return True if the value of the specified OwnerProducerEnum enumeration (rhs) is greater than or equal to the value
    *      of this OwnerProducerEnum enumeration, false otherwise.
    */
  bool operator>=(const OwnerProducerEnum& rhs) const {
    return getValue() >= rhs.getValue();
  }

  /** Tests whether the value of this OwnerProducerEnum enumeration is equal to the value of the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this OwnerProducerEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is equal to the value of this OwnerProducerEnum enumeration,
    *      false otherwise.
    */
  bool operator==(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() == rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is equal to the value of the specified OwnerProducerEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified OwnerProducerEnum
    *      enumeration.
    * @param rhs The OwnerProducerEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is equal to the value of the OwnerProducerEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator==(EnumerationItem lhs, const OwnerProducerEnum& rhs) {
    testForValidItem(lhs);
    return lhs == rhs.getValue();
  }

  /** Tests whether the value of this OwnerProducerEnum enumeration is not equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this OwnerProducerEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is not equal to the value of this OwnerProducerEnum
    *      enumeration, false otherwise.
    */
  bool operator!=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() != rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is not equal to the value of the specified OwnerProducerEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified OwnerProducerEnum
    *      enumeration.
    * @param rhs The OwnerProducerEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is not equal to the value of the OwnerProducerEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator!=(EnumerationItem lhs, const OwnerProducerEnum& rhs) {
    testForValidItem(lhs);
    return lhs != rhs.getValue();
  }

  /** Tests whether the value of this OwnerProducerEnum enumeration is less than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this OwnerProducerEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than the value of this OwnerProducerEnum enumeration,
    *      false otherwise.
    */
  bool operator<(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() < rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than the value of the specified OwnerProducerEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified OwnerProducerEnum
    *      enumeration.
    * @param rhs The OwnerProducerEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than the value of the OwnerProducerEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator<(EnumerationItem lhs, const OwnerProducerEnum& rhs) {
    testForValidItem(lhs);
    return lhs < rhs.getValue();
  }

  /** Tests whether the value of this OwnerProducerEnum enumeration is less than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this OwnerProducerEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than or equal to the value of this OwnerProducerEnum
    *      enumeration, false otherwise.
    */
  bool operator<=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() <= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than or equal to the value of the specified
    * OwnerProducerEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified OwnerProducerEnum
    *      enumeration.
    * @param rhs The OwnerProducerEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than or equal to the value of the OwnerProducerEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator<=(EnumerationItem lhs, const OwnerProducerEnum& rhs) {
    testForValidItem(lhs);
    return lhs <= rhs.getValue();
  }

  /** Tests whether the value of this OwnerProducerEnum enumeration is greater than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this OwnerProducerEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than the value of this OwnerProducerEnum
    *      enumeration, false otherwise.
    */
  bool operator>(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() > rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than the value of the specified OwnerProducerEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified OwnerProducerEnum
    *      enumeration.
    * @param rhs The OwnerProducerEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than the value of the OwnerProducerEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator>(EnumerationItem lhs, const OwnerProducerEnum& rhs) {
    testForValidItem(lhs);
    return lhs > rhs.getValue();
  }

  /** Tests whether the value of this OwnerProducerEnum enumeration is greater than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this OwnerProducerEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than or equal to the value of this
    *      OwnerProducerEnum enumeration, false otherwise.
    */
  bool operator>=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() >= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than or equal to the value of the specified
    * OwnerProducerEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified OwnerProducerEnum
    *      enumeration.
    * @param rhs The OwnerProducerEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than or equal to the value of the OwnerProducerEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator>=(EnumerationItem lhs, const OwnerProducerEnum& rhs) {
    testForValidItem(lhs);
    return lhs >= rhs.getValue();
  }

  /** Returns the name of the specified enumeration item.
    *
    * @param item The enumeration item whose name is to be returned.
    * @return The enumeration item's name if valid.
    */
  static std::string toName(EnumerationItem item) {
    ToNameTable::const_iterator iter = m_toNameTable.find(item);
    if (iter == m_toNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to convert enumerated item to its name, item not found in mapping: " << item;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Returns the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item to be returned.
    * @return The enumeration item having the specified name.
    */
  static EnumerationItem fromName(const std::string& itemName) {
    FromNameTable::const_iterator iter = m_fromNameTable.find(itemName);
    if (iter == m_fromNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to return enumerated item having specified name, name not found in mapping: " << itemName;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Return the name of the enumeration item that the value of this OwnerProducerEnum enumeration is set to.
    *
    * @return The name of the enumeration item.
    */
  virtual std::string toName() const {
    return toName(getValue());
  }

  /** Sets the value of this OwnerProducerEnum enumeration to the value of the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item whose value is to be used to set this OwnerProducerEnum enumeration
    *      to.
    */
  virtual void setValueFromName(const std::string& itemName) {
    setValue(fromName(itemName));
  }

protected:

  /** The default constructor. In addition to constructing a new OwnerProducerEnum, this constructor also makes sure the
    * conversion tables are initialized.
    */
  OwnerProducerEnum() {
  }

  /** The destructor [only available to derived classes]. */
  ~OwnerProducerEnum() {
  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param additionalDescription An additional description to include in the error message should an exception be thrown.
    * @param item The enumeration item to test.
    */
  static void testForValidItem(const char* additionalDescription, EnumerationItem item) {
    if (!isValid(item)) {
      std::ostringstream oStream;
      oStream << additionalDescription << ": " << item << " (item must be between " << enumNotSet << " and "<< enumMaxExclusive << " exclusive)";
      throw uci::base::UCIException(oStream.str(), 0);
    }

  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param item The enumeration item to test.
    */
  static void testForValidItem(EnumerationItem item) {
    testForValidItem("Invalid enumerated item specified", item);
  }

private:

  /** The type of table that is used to lookup the name of a enumeration item given that enumeration item. */
  typedef std::map<EnumerationItem, const std::string> ToNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  typedef std::map<const std::string, EnumerationItem> FromNameTable;

  /** The table that is used to lookup the name of a enumeration item given that enumeration item. */
  static UCI_EXPORT ToNameTable m_toNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  static UCI_EXPORT FromNameTable m_fromNameTable;

protected:

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OwnerProducerEnum to copy from.
    */
  OwnerProducerEnum(const OwnerProducerEnum& rhs) {
    (void)rhs;
  }

};

} // namespace type
} // namespace uci

template<typename charT, typename traits>
std::basic_ostream<charT, traits>&
operator<<(std::basic_ostream<charT, traits>& oStream, const uci::type::OwnerProducerEnum& enumeration)
{
  oStream << enumeration.toName();
  return oStream;
}

#endif // UCI_TYPE_OWNERPRODUCERENUM_H

