/** @file ModeS_OptionsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_MODES_OPTIONSTYPE_H
#define UCI_TYPE_MODES_OPTIONSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/export.h"
#include "uci/type/IFF_ModeS_SupportEnum.h"
#include "uci/type/MaxPOR_Enum.h"
#include "uci/type/ModeS_InterrogatorAddressType.h"
#include "uci/type/SpecificBDS_RegistersType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ModeS_OptionsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ModeS_OptionsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ModeS_OptionsType.
    */
  static UCI_EXPORT ModeS_OptionsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ModeS_OptionsType initializing the data accessed by the new ModeS_OptionsType using the
    * data accessed by the specified ModeS_OptionsType (cloning).
    *
    * @param accessor The ModeS_OptionsType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created ModeS_OptionsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ModeS_OptionsType.
    */
  static UCI_EXPORT ModeS_OptionsType& create(const ModeS_OptionsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ModeS_OptionsType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The ModeS_OptionsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ModeS_OptionsType& accessor);

  /** Returns this accessor's type constant, i.e. modeS_OptionsType.
    *
    * @return This accessor's type constant, i.e. modeS_OptionsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::modeS_OptionsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ModeS_OptionsType.
    *
    * @return The version that was initialized from the uci:version attribute of ModeS_OptionsType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ModeS_OptionsType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ModeS_InterrogatorAddress.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ModeS_InterrogatorAddress.
    */
  virtual const uci::type::ModeS_InterrogatorAddressType& getModeS_InterrogatorAddress() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ModeS_InterrogatorAddress.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ModeS_InterrogatorAddress.
    */
  virtual uci::type::ModeS_InterrogatorAddressType& getModeS_InterrogatorAddress() = 0;

  /** Sets the complex content identified by ModeS_InterrogatorAddress to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ModeS_InterrogatorAddress.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ModeS_OptionsType& setModeS_InterrogatorAddress(const uci::type::ModeS_InterrogatorAddressType& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ShortP4Enable.
    *
    * @return The value of the simple primitive data type identified by ShortP4Enable.
    */
  virtual xs::Boolean getShortP4Enable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ShortP4Enable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ModeS_OptionsType& setShortP4Enable(xs::Boolean value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ModeS_Type.
    *
    * @return A const reference to the value of the enumeration identified by ModeS_Type.
    */
  virtual const uci::type::IFF_ModeS_SupportEnum& getModeS_Type() const = 0;

  /** Returns a reference to the value of the enumeration identified by ModeS_Type.
    *
    * @return A reference to the value of the enumeration identified by ModeS_Type.
    */
  virtual uci::type::IFF_ModeS_SupportEnum& getModeS_Type() = 0;

  /** Sets the value of the enumeration identified by ModeS_Type.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ModeS_OptionsType& setModeS_Type(const uci::type::IFF_ModeS_SupportEnum& value) = 0;

  /** Sets the value of the enumeration identified by ModeS_Type.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ModeS_OptionsType& setModeS_Type(uci::type::IFF_ModeS_SupportEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SpecificBDS_Registers.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SpecificBDS_Registers.
    */
  virtual const uci::type::SpecificBDS_RegistersType& getSpecificBDS_Registers() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SpecificBDS_Registers.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SpecificBDS_Registers.
    */
  virtual uci::type::SpecificBDS_RegistersType& getSpecificBDS_Registers() = 0;

  /** Sets the complex content identified by SpecificBDS_Registers to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SpecificBDS_Registers.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ModeS_OptionsType& setSpecificBDS_Registers(const uci::type::SpecificBDS_RegistersType& value) = 0;

  /** Returns whether the Element identified by SpecificBDS_Registers exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SpecificBDS_Registers is enabled or not.
    */
  virtual bool hasSpecificBDS_Registers() const = 0;

  /** Enables the Element identified by SpecificBDS_Registers.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SpecificBDS_Registers.
    */
  virtual uci::type::SpecificBDS_RegistersType& enableSpecificBDS_Registers(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SpecificBDS_Registers.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ModeS_OptionsType& clearSpecificBDS_Registers() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AllCallEnable.
    *
    * @return The value of the simple primitive data type identified by AllCallEnable.
    */
  virtual xs::Boolean getAllCallEnable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AllCallEnable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ModeS_OptionsType& setAllCallEnable(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by LockoutEnable.
    *
    * @return The value of the simple primitive data type identified by LockoutEnable.
    */
  virtual xs::Boolean getLockoutEnable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LockoutEnable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ModeS_OptionsType& setLockoutEnable(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by LockoutOverrideEnable.
    *
    * @return The value of the simple primitive data type identified by LockoutOverrideEnable.
    */
  virtual xs::Boolean getLockoutOverrideEnable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LockoutOverrideEnable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ModeS_OptionsType& setLockoutOverrideEnable(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by MixedModeLockoutEnable.
    *
    * @return The value of the simple primitive data type identified by MixedModeLockoutEnable.
    */
  virtual xs::Boolean getMixedModeLockoutEnable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MixedModeLockoutEnable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ModeS_OptionsType& setMixedModeLockoutEnable(xs::Boolean value) = 0;

  /** Returns a const reference to the value of the enumeration identified by MaxPOR.
    *
    * @return A const reference to the value of the enumeration identified by MaxPOR.
    */
  virtual const uci::type::MaxPOR_Enum& getMaxPOR() const = 0;

  /** Returns a reference to the value of the enumeration identified by MaxPOR.
    *
    * @return A reference to the value of the enumeration identified by MaxPOR.
    */
  virtual uci::type::MaxPOR_Enum& getMaxPOR() = 0;

  /** Sets the value of the enumeration identified by MaxPOR.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ModeS_OptionsType& setMaxPOR(const uci::type::MaxPOR_Enum& value) = 0;

  /** Sets the value of the enumeration identified by MaxPOR.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ModeS_OptionsType& setMaxPOR(uci::type::MaxPOR_Enum::EnumerationItem value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ModeS_OptionsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ModeS_OptionsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ModeS_OptionsType to copy from.
    */
  ModeS_OptionsType(const ModeS_OptionsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ModeS_OptionsType to the contents of the ModeS_OptionsType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ModeS_OptionsType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this ModeS_OptionsType.
    * @return A reference to this ModeS_OptionsType.
    */
  ModeS_OptionsType& operator=(const ModeS_OptionsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_MODES_OPTIONSTYPE_H

