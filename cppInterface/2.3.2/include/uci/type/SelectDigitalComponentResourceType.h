/** @file SelectDigitalComponentResourceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SELECTDIGITALCOMPONENTRESOURCETYPE_H
#define UCI_TYPE_SELECTDIGITALCOMPONENTRESOURCETYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "BeamBandWidthAndSampleRateType.h"
#include "MFA_AddressType.h"
#include "MFP_AddressType.h"
#include "NetworkDataRateRangeType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Used to select digital array (multi-function aperture) and digital payload (multi-function processor) resources. */
class SelectDigitalComponentResourceType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SelectDigitalComponentResourceType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SelectDigitalComponentResourceType.
    */
  static UCI_EXPORT SelectDigitalComponentResourceType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SelectDigitalComponentResourceType initializing the data accessed by the new
    * SelectDigitalComponentResourceType using the data accessed by the specified SelectDigitalComponentResourceType
    * (cloning).
    *
    * @param accessor The SelectDigitalComponentResourceType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created SelectDigitalComponentResourceType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SelectDigitalComponentResourceType.
    */
  static UCI_EXPORT SelectDigitalComponentResourceType& create(const SelectDigitalComponentResourceType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SelectDigitalComponentResourceType. Use of the specified accessor after it has
    * been destroyed will result in undefined behavior.
    *
    * @param accessor The SelectDigitalComponentResourceType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SelectDigitalComponentResourceType& accessor);

  /** Returns this accessor's type constant, i.e. selectDigitalComponentResourceType.
    *
    * @return This accessor's type constant, i.e. selectDigitalComponentResourceType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::selectDigitalComponentResourceType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SelectDigitalComponentResourceType.
    *
    * @return The version that was initialized from the uci:version attribute of SelectDigitalComponentResourceType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SelectDigitalComponentResourceType& accessor) = 0;

  /** For a "digital back end," the MFP_Address defines the processing, data path, and network port information used by the
    * Activity requesting resource access. The service allocating resources considers the other MFP_Addresses in use at the
    * same time and manages not only aperture resources but also back end and network resources, considering also the
    * overall throughput in use, defined by the sibling BeamBandWidthAndDataRate. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::MFP_AddressType, uci::type::accessorType::mFP_AddressType> MFP_Address;

  /** If present, the number of instances identifies how many beams will be set up simultaneously on the single allocated
    * AntennaResourceInstance (or Type). The BeamBandWidth provides the maximum Instantaneous Band Width of the beam, and
    * the SampleDataRate controls the max data rate the Digital Payload plans to accept in the aperture access times it is
    * allocated. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::BeamBandWidthAndSampleRateType, uci::type::accessorType::beamBandWidthAndSampleRateType> BeamBandWidthAndSampleRate;

  /** Returns a const reference to the accessor that provides access to the complex content identified by MFA_Address.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by MFA_Address.
    */
  virtual const uci::type::MFA_AddressType& getMFA_Address() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MFA_Address.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MFA_Address.
    */
  virtual uci::type::MFA_AddressType& getMFA_Address() = 0;

  /** Sets the complex content identified by MFA_Address to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MFA_Address.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SelectDigitalComponentResourceType& setMFA_Address(const uci::type::MFA_AddressType& value) = 0;

  /** Returns whether the Element identified by MFA_Address exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MFA_Address is enabled or not.
    */
  virtual bool hasMFA_Address() const = 0;

  /** Enables the Element identified by MFA_Address.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MFA_Address.
    */
  virtual uci::type::MFA_AddressType& enableMFA_Address(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MFA_Address.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SelectDigitalComponentResourceType& clearMFA_Address() = 0;

  /** Returns a const reference to the bounded list identified by MFP_Address.
    *
    * @return A const reference to the bounded list identified by MFP_Address.
    */
  virtual const uci::type::SelectDigitalComponentResourceType::MFP_Address& getMFP_Address() const = 0;

  /** Returns a reference to the bounded list identified by MFP_Address.
    *
    * @return A reference to the bounded list identified by MFP_Address.
    */
  virtual uci::type::SelectDigitalComponentResourceType::MFP_Address& getMFP_Address() = 0;

  /** Sets the bounded list identified by MFP_Address.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SelectDigitalComponentResourceType& setMFP_Address(const uci::type::SelectDigitalComponentResourceType::MFP_Address& value) = 0;

  /** Returns a const reference to the bounded list identified by BeamBandWidthAndSampleRate.
    *
    * @return A const reference to the bounded list identified by BeamBandWidthAndSampleRate.
    */
  virtual const uci::type::SelectDigitalComponentResourceType::BeamBandWidthAndSampleRate& getBeamBandWidthAndSampleRate() const = 0;

  /** Returns a reference to the bounded list identified by BeamBandWidthAndSampleRate.
    *
    * @return A reference to the bounded list identified by BeamBandWidthAndSampleRate.
    */
  virtual uci::type::SelectDigitalComponentResourceType::BeamBandWidthAndSampleRate& getBeamBandWidthAndSampleRate() = 0;

  /** Sets the bounded list identified by BeamBandWidthAndSampleRate.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SelectDigitalComponentResourceType& setBeamBandWidthAndSampleRate(const uci::type::SelectDigitalComponentResourceType::BeamBandWidthAndSampleRate& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by NetworkDataRate.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by NetworkDataRate.
    */
  virtual const uci::type::NetworkDataRateRangeType& getNetworkDataRate() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by NetworkDataRate.
    *
    * @return A reference to the accessor that provides access to the complex content identified by NetworkDataRate.
    */
  virtual uci::type::NetworkDataRateRangeType& getNetworkDataRate() = 0;

  /** Sets the complex content identified by NetworkDataRate to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by NetworkDataRate.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SelectDigitalComponentResourceType& setNetworkDataRate(const uci::type::NetworkDataRateRangeType& value) = 0;

  /** Returns whether the Element identified by NetworkDataRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NetworkDataRate is enabled or not.
    */
  virtual bool hasNetworkDataRate() const = 0;

  /** Enables the Element identified by NetworkDataRate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by NetworkDataRate.
    */
  virtual uci::type::NetworkDataRateRangeType& enableNetworkDataRate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by NetworkDataRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SelectDigitalComponentResourceType& clearNetworkDataRate() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SelectDigitalComponentResourceType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SelectDigitalComponentResourceType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SelectDigitalComponentResourceType to copy from.
    */
  SelectDigitalComponentResourceType(const SelectDigitalComponentResourceType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SelectDigitalComponentResourceType to the contents of the
    * SelectDigitalComponentResourceType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The SelectDigitalComponentResourceType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this SelectDigitalComponentResourceType.
    * @return A reference to this SelectDigitalComponentResourceType.
    */
  SelectDigitalComponentResourceType& operator=(const SelectDigitalComponentResourceType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SELECTDIGITALCOMPONENTRESOURCETYPE_H

