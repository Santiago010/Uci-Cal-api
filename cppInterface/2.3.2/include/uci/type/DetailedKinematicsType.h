/** @file DetailedKinematicsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_DETAILEDKINEMATICSTYPE_H
#define UCI_TYPE_DETAILEDKINEMATICSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/Acceleration3D_Type.h"
#include "uci/type/AirDataType.h"
#include "uci/type/AngleType.h"
#include "uci/type/OrientationAccelerationType.h"
#include "uci/type/OrientationRateType.h"
#include "uci/type/OrientationType.h"
#include "uci/type/PointChoice4D_Type.h"
#include "uci/type/Velocity3D_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class DetailedKinematicsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new DetailedKinematicsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DetailedKinematicsType.
    */
  static UCI_EXPORT DetailedKinematicsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new DetailedKinematicsType initializing the data accessed by the new DetailedKinematicsType
    * using the data accessed by the specified DetailedKinematicsType (cloning).
    *
    * @param accessor The DetailedKinematicsType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created DetailedKinematicsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DetailedKinematicsType.
    */
  static UCI_EXPORT DetailedKinematicsType& create(const DetailedKinematicsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified DetailedKinematicsType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The DetailedKinematicsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(DetailedKinematicsType& accessor);

  /** Returns this accessor's type constant, i.e. detailedKinematicsType.
    *
    * @return This accessor's type constant, i.e. detailedKinematicsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::detailedKinematicsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of DetailedKinematicsType.
    *
    * @return The version that was initialized from the uci:version attribute of DetailedKinematicsType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const DetailedKinematicsType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual const uci::type::PointChoice4D_Type& getPosition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual uci::type::PointChoice4D_Type& getPosition() = 0;

  /** Sets the complex content identified by Position to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Position.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& setPosition(const uci::type::PointChoice4D_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Velocity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Velocity.
    */
  virtual const uci::type::Velocity3D_Type& getVelocity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Velocity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Velocity.
    */
  virtual uci::type::Velocity3D_Type& getVelocity() = 0;

  /** Sets the complex content identified by Velocity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Velocity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& setVelocity(const uci::type::Velocity3D_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AirData.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AirData.
    */
  virtual const uci::type::AirDataType& getAirData() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AirData.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AirData.
    */
  virtual uci::type::AirDataType& getAirData() = 0;

  /** Sets the complex content identified by AirData to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AirData.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& setAirData(const uci::type::AirDataType& value) = 0;

  /** Returns whether the Element identified by AirData exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AirData is enabled or not.
    */
  virtual bool hasAirData() const = 0;

  /** Enables the Element identified by AirData.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AirData.
    */
  virtual uci::type::AirDataType& enableAirData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AirData.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& clearAirData() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Acceleration.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Acceleration.
    */
  virtual const uci::type::Acceleration3D_Type& getAcceleration() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Acceleration.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Acceleration.
    */
  virtual uci::type::Acceleration3D_Type& getAcceleration() = 0;

  /** Sets the complex content identified by Acceleration to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Acceleration.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& setAcceleration(const uci::type::Acceleration3D_Type& value) = 0;

  /** Returns whether the Element identified by Acceleration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Acceleration is enabled or not.
    */
  virtual bool hasAcceleration() const = 0;

  /** Enables the Element identified by Acceleration.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Acceleration.
    */
  virtual uci::type::Acceleration3D_Type& enableAcceleration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Acceleration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& clearAcceleration() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Orientation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Orientation.
    */
  virtual const uci::type::OrientationType& getOrientation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Orientation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Orientation.
    */
  virtual uci::type::OrientationType& getOrientation() = 0;

  /** Sets the complex content identified by Orientation to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Orientation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& setOrientation(const uci::type::OrientationType& value) = 0;

  /** Returns whether the Element identified by Orientation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Orientation is enabled or not.
    */
  virtual bool hasOrientation() const = 0;

  /** Enables the Element identified by Orientation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Orientation.
    */
  virtual uci::type::OrientationType& enableOrientation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Orientation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& clearOrientation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by WanderAngle.
    *
    * @return The value of the simple primitive data type identified by WanderAngle.
    */
  virtual uci::type::AngleTypeValue getWanderAngle() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by WanderAngle.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& setWanderAngle(uci::type::AngleTypeValue value) = 0;

  /** Returns whether the Element identified by WanderAngle exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WanderAngle is enabled or not.
    */
  virtual bool hasWanderAngle() const = 0;

  /** Clears (disabled) the Element identified by WanderAngle.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& clearWanderAngle() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MagneticHeading.
    *
    * @return The value of the simple primitive data type identified by MagneticHeading.
    */
  virtual uci::type::AngleTypeValue getMagneticHeading() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MagneticHeading.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& setMagneticHeading(uci::type::AngleTypeValue value) = 0;

  /** Returns whether the Element identified by MagneticHeading exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MagneticHeading is enabled or not.
    */
  virtual bool hasMagneticHeading() const = 0;

  /** Clears (disabled) the Element identified by MagneticHeading.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& clearMagneticHeading() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OrientationRate.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OrientationRate.
    */
  virtual const uci::type::OrientationRateType& getOrientationRate() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrientationRate.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrientationRate.
    */
  virtual uci::type::OrientationRateType& getOrientationRate() = 0;

  /** Sets the complex content identified by OrientationRate to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrientationRate.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& setOrientationRate(const uci::type::OrientationRateType& value) = 0;

  /** Returns whether the Element identified by OrientationRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrientationRate is enabled or not.
    */
  virtual bool hasOrientationRate() const = 0;

  /** Enables the Element identified by OrientationRate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrientationRate.
    */
  virtual uci::type::OrientationRateType& enableOrientationRate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrientationRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& clearOrientationRate() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrientationAcceleration.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrientationAcceleration.
    */
  virtual const uci::type::OrientationAccelerationType& getOrientationAcceleration() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * OrientationAcceleration.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OrientationAcceleration.
    */
  virtual uci::type::OrientationAccelerationType& getOrientationAcceleration() = 0;

  /** Sets the complex content identified by OrientationAcceleration to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrientationAcceleration.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& setOrientationAcceleration(const uci::type::OrientationAccelerationType& value) = 0;

  /** Returns whether the Element identified by OrientationAcceleration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrientationAcceleration is enabled or not.
    */
  virtual bool hasOrientationAcceleration() const = 0;

  /** Enables the Element identified by OrientationAcceleration.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OrientationAcceleration.
    */
  virtual uci::type::OrientationAccelerationType& enableOrientationAcceleration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrientationAcceleration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DetailedKinematicsType& clearOrientationAcceleration() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  DetailedKinematicsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~DetailedKinematicsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The DetailedKinematicsType to copy from.
    */
  DetailedKinematicsType(const DetailedKinematicsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this DetailedKinematicsType to the contents of the
    * DetailedKinematicsType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The DetailedKinematicsType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this DetailedKinematicsType.
    * @return A reference to this DetailedKinematicsType.
    */
  DetailedKinematicsType& operator=(const DetailedKinematicsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_DETAILEDKINEMATICSTYPE_H

