/** @file PlanPartsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLANPARTSTYPE_H
#define UCI_TYPE_PLANPARTSTYPE_H

#include "uci/base/export.h"
#include "uci/type/ActivityPlanPartsType.h"
#include "uci/type/OrbitPlanPartsType.h"
#include "uci/type/PlanPartsBaseType.h"
#include "uci/type/RoutePlanPartsType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PlanPartsType : public virtual PlanPartsBaseType {
public:

  /** This method constructs a new PlanPartsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanPartsType.
    */
  static UCI_EXPORT PlanPartsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlanPartsType initializing the data accessed by the new PlanPartsType using the data
    * accessed by the specified PlanPartsType (cloning).
    *
    * @param accessor The PlanPartsType that provides access to the data that is to be used to initialize the data accessed
    *      by the new created PlanPartsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanPartsType.
    */
  static UCI_EXPORT PlanPartsType& create(const PlanPartsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlanPartsType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The PlanPartsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlanPartsType& accessor);

  /** Returns this accessor's type constant, i.e. planPartsType.
    *
    * @return This accessor's type constant, i.e. planPartsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::planPartsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlanPartsType.
    *
    * @return The version that was initialized from the uci:version attribute of PlanPartsType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlanPartsType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActivityPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActivityPlan.
    */
  virtual const uci::type::ActivityPlanPartsType& getActivityPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActivityPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActivityPlan.
    */
  virtual uci::type::ActivityPlanPartsType& getActivityPlan() = 0;

  /** Sets the complex content identified by ActivityPlan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivityPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsType& setActivityPlan(const uci::type::ActivityPlanPartsType& value) = 0;

  /** Returns whether the Element identified by ActivityPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActivityPlan is enabled or not.
    */
  virtual bool hasActivityPlan() const = 0;

  /** Enables the Element identified by ActivityPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActivityPlan.
    */
  virtual uci::type::ActivityPlanPartsType& enableActivityPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActivityPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsType& clearActivityPlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RoutePlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RoutePlan.
    */
  virtual const uci::type::RoutePlanPartsType& getRoutePlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RoutePlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RoutePlan.
    */
  virtual uci::type::RoutePlanPartsType& getRoutePlan() = 0;

  /** Sets the complex content identified by RoutePlan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RoutePlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsType& setRoutePlan(const uci::type::RoutePlanPartsType& value) = 0;

  /** Returns whether the Element identified by RoutePlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RoutePlan is enabled or not.
    */
  virtual bool hasRoutePlan() const = 0;

  /** Enables the Element identified by RoutePlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RoutePlan.
    */
  virtual uci::type::RoutePlanPartsType& enableRoutePlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RoutePlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsType& clearRoutePlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RouteActivityPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RouteActivityPlan.
    */
  virtual const uci::type::ActivityPlanPartsType& getRouteActivityPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RouteActivityPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RouteActivityPlan.
    */
  virtual uci::type::ActivityPlanPartsType& getRouteActivityPlan() = 0;

  /** Sets the complex content identified by RouteActivityPlan to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RouteActivityPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsType& setRouteActivityPlan(const uci::type::ActivityPlanPartsType& value) = 0;

  /** Returns whether the Element identified by RouteActivityPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RouteActivityPlan is enabled or not.
    */
  virtual bool hasRouteActivityPlan() const = 0;

  /** Enables the Element identified by RouteActivityPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RouteActivityPlan.
    */
  virtual uci::type::ActivityPlanPartsType& enableRouteActivityPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RouteActivityPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsType& clearRouteActivityPlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OrbitPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OrbitPlan.
    */
  virtual const uci::type::OrbitPlanPartsType& getOrbitPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitPlan.
    */
  virtual uci::type::OrbitPlanPartsType& getOrbitPlan() = 0;

  /** Sets the complex content identified by OrbitPlan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsType& setOrbitPlan(const uci::type::OrbitPlanPartsType& value) = 0;

  /** Returns whether the Element identified by OrbitPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrbitPlan is enabled or not.
    */
  virtual bool hasOrbitPlan() const = 0;

  /** Enables the Element identified by OrbitPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrbitPlan.
    */
  virtual uci::type::OrbitPlanPartsType& enableOrbitPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrbitPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsType& clearOrbitPlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrbitActivityPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrbitActivityPlan.
    */
  virtual const uci::type::ActivityPlanPartsType& getOrbitActivityPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitActivityPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitActivityPlan.
    */
  virtual uci::type::ActivityPlanPartsType& getOrbitActivityPlan() = 0;

  /** Sets the complex content identified by OrbitActivityPlan to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitActivityPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsType& setOrbitActivityPlan(const uci::type::ActivityPlanPartsType& value) = 0;

  /** Returns whether the Element identified by OrbitActivityPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrbitActivityPlan is enabled or not.
    */
  virtual bool hasOrbitActivityPlan() const = 0;

  /** Enables the Element identified by OrbitActivityPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrbitActivityPlan.
    */
  virtual uci::type::ActivityPlanPartsType& enableOrbitActivityPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrbitActivityPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanPartsType& clearOrbitActivityPlan() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlanPartsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlanPartsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlanPartsType to copy from.
    */
  PlanPartsType(const PlanPartsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlanPartsType to the contents of the PlanPartsType on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PlanPartsType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this PlanPartsType.
    * @return A reference to this PlanPartsType.
    */
  PlanPartsType& operator=(const PlanPartsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLANPARTSTYPE_H

