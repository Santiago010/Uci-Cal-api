/** @file IPv4_DataLinkNativeInfoType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_IPV4_DATALINKNATIVEINFOTYPE_H
#define UCI_TYPE_IPV4_DATALINKNATIVEINFOTYPE_H

#include "../base/IntAccessor.h"
#include "../base/export.h"
#include "DataLinkNativeInfoPET.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This is a polymorphic extension which allows for the extension of the base DataLinkNativeInfoPET for IPV4. */
class IPv4_DataLinkNativeInfoType : public virtual DataLinkNativeInfoPET {
public:

  /** This method constructs a new IPv4_DataLinkNativeInfoType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IPv4_DataLinkNativeInfoType.
    */
  static UCI_EXPORT IPv4_DataLinkNativeInfoType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new IPv4_DataLinkNativeInfoType initializing the data accessed by the new
    * IPv4_DataLinkNativeInfoType using the data accessed by the specified IPv4_DataLinkNativeInfoType (cloning).
    *
    * @param accessor The IPv4_DataLinkNativeInfoType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created IPv4_DataLinkNativeInfoType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IPv4_DataLinkNativeInfoType.
    */
  static UCI_EXPORT IPv4_DataLinkNativeInfoType& create(const IPv4_DataLinkNativeInfoType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified IPv4_DataLinkNativeInfoType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The IPv4_DataLinkNativeInfoType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(IPv4_DataLinkNativeInfoType& accessor);

  /** Returns this accessor's type constant, i.e. iPv4_DataLinkNativeInfoType.
    *
    * @return This accessor's type constant, i.e. iPv4_DataLinkNativeInfoType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::iPv4_DataLinkNativeInfoType;
  }

  /** Returns the version that was initialized from the uci:version attribute of IPv4_DataLinkNativeInfoType.
    *
    * @return The version that was initialized from the uci:version attribute of IPv4_DataLinkNativeInfoType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const IPv4_DataLinkNativeInfoType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv4_SourceAddress.
    *
    * @return The value of the simple primitive data type identified by IPv4_SourceAddress.
    */
  virtual xs::Int getIPv4_SourceAddress() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv4_SourceAddress.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& setIPv4_SourceAddress(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv4_SourceAddress exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv4_SourceAddress is enabled or not.
    */
  virtual bool hasIPv4_SourceAddress() const = 0;

  /** Clears (disabled) the Element identified by IPv4_SourceAddress.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_SourceAddress() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv4_SourceCIDR_Mask.
    *
    * @return The value of the simple primitive data type identified by IPv4_SourceCIDR_Mask.
    */
  virtual xs::Int getIPv4_SourceCIDR_Mask() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv4_SourceCIDR_Mask.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& setIPv4_SourceCIDR_Mask(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv4_SourceCIDR_Mask exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv4_SourceCIDR_Mask is enabled or not.
    */
  virtual bool hasIPv4_SourceCIDR_Mask() const = 0;

  /** Clears (disabled) the Element identified by IPv4_SourceCIDR_Mask.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_SourceCIDR_Mask() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv4_DestinationAddress.
    *
    * @return The value of the simple primitive data type identified by IPv4_DestinationAddress.
    */
  virtual xs::Int getIPv4_DestinationAddress() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv4_DestinationAddress.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& setIPv4_DestinationAddress(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv4_DestinationAddress exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv4_DestinationAddress is enabled or not.
    */
  virtual bool hasIPv4_DestinationAddress() const = 0;

  /** Clears (disabled) the Element identified by IPv4_DestinationAddress.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_DestinationAddress() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv4_DestinationCIDR_Mask.
    *
    * @return The value of the simple primitive data type identified by IPv4_DestinationCIDR_Mask.
    */
  virtual xs::Int getIPv4_DestinationCIDR_Mask() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv4_DestinationCIDR_Mask.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& setIPv4_DestinationCIDR_Mask(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv4_DestinationCIDR_Mask exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv4_DestinationCIDR_Mask is enabled or not.
    */
  virtual bool hasIPv4_DestinationCIDR_Mask() const = 0;

  /** Clears (disabled) the Element identified by IPv4_DestinationCIDR_Mask.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_DestinationCIDR_Mask() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv4_ProtocolHeader.
    *
    * @return The value of the simple primitive data type identified by IPv4_ProtocolHeader.
    */
  virtual xs::Int getIPv4_ProtocolHeader() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv4_ProtocolHeader.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& setIPv4_ProtocolHeader(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv4_ProtocolHeader exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv4_ProtocolHeader is enabled or not.
    */
  virtual bool hasIPv4_ProtocolHeader() const = 0;

  /** Clears (disabled) the Element identified by IPv4_ProtocolHeader.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_ProtocolHeader() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv4_SourcePortRangeStart.
    *
    * @return The value of the simple primitive data type identified by IPv4_SourcePortRangeStart.
    */
  virtual xs::Int getIPv4_SourcePortRangeStart() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv4_SourcePortRangeStart.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& setIPv4_SourcePortRangeStart(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv4_SourcePortRangeStart exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv4_SourcePortRangeStart is enabled or not.
    */
  virtual bool hasIPv4_SourcePortRangeStart() const = 0;

  /** Clears (disabled) the Element identified by IPv4_SourcePortRangeStart.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_SourcePortRangeStart() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv4_SourcePortRangeEnd.
    *
    * @return The value of the simple primitive data type identified by IPv4_SourcePortRangeEnd.
    */
  virtual xs::Int getIPv4_SourcePortRangeEnd() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv4_SourcePortRangeEnd.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& setIPv4_SourcePortRangeEnd(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv4_SourcePortRangeEnd exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv4_SourcePortRangeEnd is enabled or not.
    */
  virtual bool hasIPv4_SourcePortRangeEnd() const = 0;

  /** Clears (disabled) the Element identified by IPv4_SourcePortRangeEnd.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_SourcePortRangeEnd() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv4_DestinationPortRangeStart.
    *
    * @return The value of the simple primitive data type identified by IPv4_DestinationPortRangeStart.
    */
  virtual xs::Int getIPv4_DestinationPortRangeStart() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv4_DestinationPortRangeStart.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& setIPv4_DestinationPortRangeStart(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv4_DestinationPortRangeStart exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv4_DestinationPortRangeStart is enabled or not.
    */
  virtual bool hasIPv4_DestinationPortRangeStart() const = 0;

  /** Clears (disabled) the Element identified by IPv4_DestinationPortRangeStart.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_DestinationPortRangeStart() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv4_DestinationPortRangeEnd.
    *
    * @return The value of the simple primitive data type identified by IPv4_DestinationPortRangeEnd.
    */
  virtual xs::Int getIPv4_DestinationPortRangeEnd() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv4_DestinationPortRangeEnd.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& setIPv4_DestinationPortRangeEnd(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv4_DestinationPortRangeEnd exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv4_DestinationPortRangeEnd is enabled or not.
    */
  virtual bool hasIPv4_DestinationPortRangeEnd() const = 0;

  /** Clears (disabled) the Element identified by IPv4_DestinationPortRangeEnd.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_DestinationPortRangeEnd() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv4_DS_Field.
    *
    * @return The value of the simple primitive data type identified by IPv4_DS_Field.
    */
  virtual xs::Int getIPv4_DS_Field() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv4_DS_Field.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& setIPv4_DS_Field(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv4_DS_Field exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv4_DS_Field is enabled or not.
    */
  virtual bool hasIPv4_DS_Field() const = 0;

  /** Clears (disabled) the Element identified by IPv4_DS_Field.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_DS_Field() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv4_MTU_Size.
    *
    * @return The value of the simple primitive data type identified by IPv4_MTU_Size.
    */
  virtual xs::Int getIPv4_MTU_Size() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv4_MTU_Size.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& setIPv4_MTU_Size(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv4_MTU_Size exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv4_MTU_Size is enabled or not.
    */
  virtual bool hasIPv4_MTU_Size() const = 0;

  /** Clears (disabled) the Element identified by IPv4_MTU_Size.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv4_DataLinkNativeInfoType& clearIPv4_MTU_Size() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  IPv4_DataLinkNativeInfoType() {
  }

  /** The destructor [only available to derived classes]. */
  ~IPv4_DataLinkNativeInfoType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The IPv4_DataLinkNativeInfoType to copy from.
    */
  IPv4_DataLinkNativeInfoType(const IPv4_DataLinkNativeInfoType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this IPv4_DataLinkNativeInfoType to the contents of the
    * IPv4_DataLinkNativeInfoType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The IPv4_DataLinkNativeInfoType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this IPv4_DataLinkNativeInfoType.
    * @return A reference to this IPv4_DataLinkNativeInfoType.
    */
  IPv4_DataLinkNativeInfoType& operator=(const IPv4_DataLinkNativeInfoType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_IPV4_DATALINKNATIVEINFOTYPE_H

