/** @file ResourceRequestOptionType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_RESOURCEREQUESTOPTIONTYPE_H
#define UCI_TYPE_RESOURCEREQUESTOPTIONTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/FrequencyRangeType.h"
#include "uci/type/PerformanceMetricSetType.h"
#include "uci/type/ResourceRequestType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ResourceRequestOptionType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ResourceRequestOptionType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ResourceRequestOptionType.
    */
  static UCI_EXPORT ResourceRequestOptionType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ResourceRequestOptionType initializing the data accessed by the new
    * ResourceRequestOptionType using the data accessed by the specified ResourceRequestOptionType (cloning).
    *
    * @param accessor The ResourceRequestOptionType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created ResourceRequestOptionType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ResourceRequestOptionType.
    */
  static UCI_EXPORT ResourceRequestOptionType& create(const ResourceRequestOptionType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ResourceRequestOptionType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The ResourceRequestOptionType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ResourceRequestOptionType& accessor);

  /** Returns this accessor's type constant, i.e. resourceRequestOptionType.
    *
    * @return This accessor's type constant, i.e. resourceRequestOptionType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::resourceRequestOptionType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ResourceRequestOptionType.
    *
    * @return The version that was initialized from the uci:version attribute of ResourceRequestOptionType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ResourceRequestOptionType& accessor) = 0;

  /** Each ResourceRequestOption contains up to two ResourceRequests, one for each RF_Mode if the operation has both
    * transmit and receive resources. Each ResourceRequest structure defines the RF_Mode applicable, the AccessPeriod
    * description of duty cycle and other utilization, the Select_Resources identification of the MFA and VA to be used in
    * the RF_Mode, and an optional MaxPercentInterruption. The two ResourceRequest fields are grouped together under each
    * ResourceRequestOption because a Service may provide multiple options on different arrays, and the grouping allows for
    * Tx/Rx to be allocated as a group rather than treated as logically independent requests and allocations. [Occurrences:
    * Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ResourceRequestType, uci::type::accessorType::resourceRequestType> ResourceRequest;

  /** Requested Frequency Range of the RF path for the activity to be performed. Optional if RequestState is CANCEL.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FrequencyRangeType, uci::type::accessorType::frequencyRangeType> RequestedFrequencyRange;

  /** Returns the value of the SimplePrimitive data type identified by ResourceRequestOptionIndex.
    *
    * @return The value of the simple primitive data type identified by ResourceRequestOptionIndex.
    */
  virtual xs::UnsignedInt getResourceRequestOptionIndex() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ResourceRequestOptionIndex.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceRequestOptionType& setResourceRequestOptionIndex(xs::UnsignedInt value) = 0;

  /** Returns a const reference to the bounded list identified by ResourceRequest.
    *
    * @return A const reference to the bounded list identified by ResourceRequest.
    */
  virtual const uci::type::ResourceRequestOptionType::ResourceRequest& getResourceRequest() const = 0;

  /** Returns a reference to the bounded list identified by ResourceRequest.
    *
    * @return A reference to the bounded list identified by ResourceRequest.
    */
  virtual uci::type::ResourceRequestOptionType::ResourceRequest& getResourceRequest() = 0;

  /** Sets the bounded list identified by ResourceRequest.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceRequestOptionType& setResourceRequest(const uci::type::ResourceRequestOptionType::ResourceRequest& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DurationRange.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DurationRange.
    */
  virtual const uci::type::DateTimeRangeType& getDurationRange() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DurationRange.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DurationRange.
    */
  virtual uci::type::DateTimeRangeType& getDurationRange() = 0;

  /** Sets the complex content identified by DurationRange to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DurationRange.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceRequestOptionType& setDurationRange(const uci::type::DateTimeRangeType& value) = 0;

  /** Returns whether the Element identified by DurationRange exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DurationRange is enabled or not.
    */
  virtual bool hasDurationRange() const = 0;

  /** Enables the Element identified by DurationRange.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DurationRange.
    */
  virtual uci::type::DateTimeRangeType& enableDurationRange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DurationRange.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceRequestOptionType& clearDurationRange() = 0;

  /** Returns a const reference to the bounded list identified by RequestedFrequencyRange.
    *
    * @return A const reference to the bounded list identified by RequestedFrequencyRange.
    */
  virtual const uci::type::ResourceRequestOptionType::RequestedFrequencyRange& getRequestedFrequencyRange() const = 0;

  /** Returns a reference to the bounded list identified by RequestedFrequencyRange.
    *
    * @return A reference to the bounded list identified by RequestedFrequencyRange.
    */
  virtual uci::type::ResourceRequestOptionType::RequestedFrequencyRange& getRequestedFrequencyRange() = 0;

  /** Sets the bounded list identified by RequestedFrequencyRange.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceRequestOptionType& setRequestedFrequencyRange(const uci::type::ResourceRequestOptionType::RequestedFrequencyRange& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Merit.
    *
    * @return The value of the simple primitive data type identified by Merit.
    */
  virtual xs::UnsignedInt getMerit() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Merit.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceRequestOptionType& setMerit(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by Merit exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Merit is enabled or not.
    */
  virtual bool hasMerit() const = 0;

  /** Clears (disabled) the Element identified by Merit.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceRequestOptionType& clearMerit() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * PerformanceMetric.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      PerformanceMetric.
    */
  virtual const uci::type::PerformanceMetricSetType& getPerformanceMetric() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PerformanceMetric.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PerformanceMetric.
    */
  virtual uci::type::PerformanceMetricSetType& getPerformanceMetric() = 0;

  /** Sets the complex content identified by PerformanceMetric to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PerformanceMetric.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceRequestOptionType& setPerformanceMetric(const uci::type::PerformanceMetricSetType& value) = 0;

  /** Returns whether the Element identified by PerformanceMetric exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PerformanceMetric is enabled or not.
    */
  virtual bool hasPerformanceMetric() const = 0;

  /** Enables the Element identified by PerformanceMetric.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PerformanceMetric.
    */
  virtual uci::type::PerformanceMetricSetType& enablePerformanceMetric(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PerformanceMetric.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceRequestOptionType& clearPerformanceMetric() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ResourceRequestOptionType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ResourceRequestOptionType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ResourceRequestOptionType to copy from.
    */
  ResourceRequestOptionType(const ResourceRequestOptionType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ResourceRequestOptionType to the contents of the
    * ResourceRequestOptionType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ResourceRequestOptionType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this ResourceRequestOptionType.
    * @return A reference to this ResourceRequestOptionType.
    */
  ResourceRequestOptionType& operator=(const ResourceRequestOptionType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_RESOURCEREQUESTOPTIONTYPE_H

