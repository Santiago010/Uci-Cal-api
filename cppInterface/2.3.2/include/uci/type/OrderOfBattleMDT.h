/** @file OrderOfBattleMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ORDEROFBATTLEMDT_H
#define UCI_TYPE_ORDEROFBATTLEMDT_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/DataRecordBaseType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/OpVolumeID_Type.h"
#include "uci/type/OpZoneID_Type.h"
#include "uci/type/OrderOfBattleID_Type.h"
#include "uci/type/UnitType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class OrderOfBattleMDT : public virtual DataRecordBaseType {
public:

  /** This method constructs a new OrderOfBattleMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrderOfBattleMDT.
    */
  static UCI_EXPORT OrderOfBattleMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OrderOfBattleMDT initializing the data accessed by the new OrderOfBattleMDT using the
    * data accessed by the specified OrderOfBattleMDT (cloning).
    *
    * @param accessor The OrderOfBattleMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created OrderOfBattleMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrderOfBattleMDT.
    */
  static UCI_EXPORT OrderOfBattleMDT& create(const OrderOfBattleMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OrderOfBattleMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The OrderOfBattleMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OrderOfBattleMDT& accessor);

  /** Returns this accessor's type constant, i.e. orderOfBattleMDT.
    *
    * @return This accessor's type constant, i.e. orderOfBattleMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::orderOfBattleMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of OrderOfBattleMDT.
    *
    * @return The version that was initialized from the uci:version attribute of OrderOfBattleMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OrderOfBattleMDT& accessor) = 0;

  /** The Order of Battle Unit records that were found within the OpZone associated with this Order of Battle.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::UnitType, uci::type::accessorType::unitType> Unit;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OrderOfBattleID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OrderOfBattleID.
    */
  virtual const uci::type::OrderOfBattleID_Type& getOrderOfBattleID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrderOfBattleID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrderOfBattleID.
    */
  virtual uci::type::OrderOfBattleID_Type& getOrderOfBattleID() = 0;

  /** Sets the complex content identified by OrderOfBattleID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrderOfBattleID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleMDT& setOrderOfBattleID(const uci::type::OrderOfBattleID_Type& value) = 0;

  /** Returns whether the Element identified by OrderOfBattleID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrderOfBattleID is enabled or not.
    */
  virtual bool hasOrderOfBattleID() const = 0;

  /** Enables the Element identified by OrderOfBattleID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrderOfBattleID.
    */
  virtual uci::type::OrderOfBattleID_Type& enableOrderOfBattleID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrderOfBattleID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleMDT& clearOrderOfBattleID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OpZoneID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OpZoneID.
    */
  virtual const uci::type::OpZoneID_Type& getOpZoneID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OpZoneID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OpZoneID.
    */
  virtual uci::type::OpZoneID_Type& getOpZoneID() = 0;

  /** Sets the complex content identified by OpZoneID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OpZoneID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleMDT& setOpZoneID(const uci::type::OpZoneID_Type& value) = 0;

  /** Returns whether the Element identified by OpZoneID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OpZoneID is enabled or not.
    */
  virtual bool hasOpZoneID() const = 0;

  /** Enables the Element identified by OpZoneID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OpZoneID.
    */
  virtual uci::type::OpZoneID_Type& enableOpZoneID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OpZoneID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleMDT& clearOpZoneID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OpVolumeID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OpVolumeID.
    */
  virtual const uci::type::OpVolumeID_Type& getOpVolumeID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OpVolumeID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OpVolumeID.
    */
  virtual uci::type::OpVolumeID_Type& getOpVolumeID() = 0;

  /** Sets the complex content identified by OpVolumeID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OpVolumeID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleMDT& setOpVolumeID(const uci::type::OpVolumeID_Type& value) = 0;

  /** Returns whether the Element identified by OpVolumeID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OpVolumeID is enabled or not.
    */
  virtual bool hasOpVolumeID() const = 0;

  /** Enables the Element identified by OpVolumeID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OpVolumeID.
    */
  virtual uci::type::OpVolumeID_Type& enableOpVolumeID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OpVolumeID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleMDT& clearOpVolumeID() = 0;

  /** Returns the value of the SimplePrimitive data type identified by InitialCreationTime.
    *
    * @return The value of the simple primitive data type identified by InitialCreationTime.
    */
  virtual uci::type::DateTimeTypeValue getInitialCreationTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InitialCreationTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleMDT& setInitialCreationTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by InitialCreationTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InitialCreationTime is enabled or not.
    */
  virtual bool hasInitialCreationTime() const = 0;

  /** Clears (disabled) the Element identified by InitialCreationTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleMDT& clearInitialCreationTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by LastUpdateTime.
    *
    * @return The value of the simple primitive data type identified by LastUpdateTime.
    */
  virtual uci::type::DateTimeTypeValue getLastUpdateTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LastUpdateTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleMDT& setLastUpdateTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by LastUpdateTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LastUpdateTime is enabled or not.
    */
  virtual bool hasLastUpdateTime() const = 0;

  /** Clears (disabled) the Element identified by LastUpdateTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleMDT& clearLastUpdateTime() = 0;

  /** Returns a const reference to the bounded list identified by Unit.
    *
    * @return A const reference to the bounded list identified by Unit.
    */
  virtual const uci::type::OrderOfBattleMDT::Unit& getUnit() const = 0;

  /** Returns a reference to the bounded list identified by Unit.
    *
    * @return A reference to the bounded list identified by Unit.
    */
  virtual uci::type::OrderOfBattleMDT::Unit& getUnit() = 0;

  /** Sets the bounded list identified by Unit.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrderOfBattleMDT& setUnit(const uci::type::OrderOfBattleMDT::Unit& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OrderOfBattleMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~OrderOfBattleMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OrderOfBattleMDT to copy from.
    */
  OrderOfBattleMDT(const OrderOfBattleMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OrderOfBattleMDT to the contents of the OrderOfBattleMDT on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OrderOfBattleMDT on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this OrderOfBattleMDT.
    * @return A reference to this OrderOfBattleMDT.
    */
  OrderOfBattleMDT& operator=(const OrderOfBattleMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ORDEROFBATTLEMDT_H

