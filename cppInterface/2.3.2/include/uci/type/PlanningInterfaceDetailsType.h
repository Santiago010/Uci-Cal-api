/** @file PlanningInterfaceDetailsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLANNINGINTERFACEDETAILSTYPE_H
#define UCI_TYPE_PLANNINGINTERFACEDETAILSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/ActionPlanProcessType.h"
#include "uci/type/ActivityPlanProcessType.h"
#include "uci/type/EffectPlanProcessType.h"
#include "uci/type/MissionPlanProcessType.h"
#include "uci/type/OrbitPlanProcessType.h"
#include "uci/type/ResponsePlanProcessType.h"
#include "uci/type/RoutePlanProcessType.h"
#include "uci/type/TaskPlanProcessType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PlanningInterfaceDetailsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PlanningInterfaceDetailsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanningInterfaceDetailsType.
    */
  static UCI_EXPORT PlanningInterfaceDetailsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlanningInterfaceDetailsType initializing the data accessed by the new
    * PlanningInterfaceDetailsType using the data accessed by the specified PlanningInterfaceDetailsType (cloning).
    *
    * @param accessor The PlanningInterfaceDetailsType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created PlanningInterfaceDetailsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanningInterfaceDetailsType.
    */
  static UCI_EXPORT PlanningInterfaceDetailsType& create(const PlanningInterfaceDetailsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlanningInterfaceDetailsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The PlanningInterfaceDetailsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlanningInterfaceDetailsType& accessor);

  /** Returns this accessor's type constant, i.e. planningInterfaceDetailsType.
    *
    * @return This accessor's type constant, i.e. planningInterfaceDetailsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::planningInterfaceDetailsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlanningInterfaceDetailsType.
    *
    * @return The version that was initialized from the uci:version attribute of PlanningInterfaceDetailsType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlanningInterfaceDetailsType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by MissionPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by MissionPlan.
    */
  virtual const uci::type::MissionPlanProcessType& getMissionPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MissionPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MissionPlan.
    */
  virtual uci::type::MissionPlanProcessType& getMissionPlan() = 0;

  /** Sets the complex content identified by MissionPlan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MissionPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& setMissionPlan(const uci::type::MissionPlanProcessType& value) = 0;

  /** Returns whether the Element identified by MissionPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MissionPlan is enabled or not.
    */
  virtual bool hasMissionPlan() const = 0;

  /** Enables the Element identified by MissionPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MissionPlan.
    */
  virtual uci::type::MissionPlanProcessType& enableMissionPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MissionPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& clearMissionPlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TaskPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TaskPlan.
    */
  virtual const uci::type::TaskPlanProcessType& getTaskPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TaskPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TaskPlan.
    */
  virtual uci::type::TaskPlanProcessType& getTaskPlan() = 0;

  /** Sets the complex content identified by TaskPlan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TaskPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& setTaskPlan(const uci::type::TaskPlanProcessType& value) = 0;

  /** Returns whether the Element identified by TaskPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TaskPlan is enabled or not.
    */
  virtual bool hasTaskPlan() const = 0;

  /** Enables the Element identified by TaskPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TaskPlan.
    */
  virtual uci::type::TaskPlanProcessType& enableTaskPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TaskPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& clearTaskPlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RoutePlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RoutePlan.
    */
  virtual const uci::type::RoutePlanProcessType& getRoutePlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RoutePlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RoutePlan.
    */
  virtual uci::type::RoutePlanProcessType& getRoutePlan() = 0;

  /** Sets the complex content identified by RoutePlan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RoutePlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& setRoutePlan(const uci::type::RoutePlanProcessType& value) = 0;

  /** Returns whether the Element identified by RoutePlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RoutePlan is enabled or not.
    */
  virtual bool hasRoutePlan() const = 0;

  /** Enables the Element identified by RoutePlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RoutePlan.
    */
  virtual uci::type::RoutePlanProcessType& enableRoutePlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RoutePlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& clearRoutePlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RouteActivityPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RouteActivityPlan.
    */
  virtual const uci::type::ActivityPlanProcessType& getRouteActivityPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RouteActivityPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RouteActivityPlan.
    */
  virtual uci::type::ActivityPlanProcessType& getRouteActivityPlan() = 0;

  /** Sets the complex content identified by RouteActivityPlan to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RouteActivityPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& setRouteActivityPlan(const uci::type::ActivityPlanProcessType& value) = 0;

  /** Returns whether the Element identified by RouteActivityPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RouteActivityPlan is enabled or not.
    */
  virtual bool hasRouteActivityPlan() const = 0;

  /** Enables the Element identified by RouteActivityPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RouteActivityPlan.
    */
  virtual uci::type::ActivityPlanProcessType& enableRouteActivityPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RouteActivityPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& clearRouteActivityPlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActivityPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActivityPlan.
    */
  virtual const uci::type::ActivityPlanProcessType& getActivityPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActivityPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActivityPlan.
    */
  virtual uci::type::ActivityPlanProcessType& getActivityPlan() = 0;

  /** Sets the complex content identified by ActivityPlan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivityPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& setActivityPlan(const uci::type::ActivityPlanProcessType& value) = 0;

  /** Returns whether the Element identified by ActivityPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActivityPlan is enabled or not.
    */
  virtual bool hasActivityPlan() const = 0;

  /** Enables the Element identified by ActivityPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActivityPlan.
    */
  virtual uci::type::ActivityPlanProcessType& enableActivityPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActivityPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& clearActivityPlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OrbitPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OrbitPlan.
    */
  virtual const uci::type::OrbitPlanProcessType& getOrbitPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitPlan.
    */
  virtual uci::type::OrbitPlanProcessType& getOrbitPlan() = 0;

  /** Sets the complex content identified by OrbitPlan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& setOrbitPlan(const uci::type::OrbitPlanProcessType& value) = 0;

  /** Returns whether the Element identified by OrbitPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrbitPlan is enabled or not.
    */
  virtual bool hasOrbitPlan() const = 0;

  /** Enables the Element identified by OrbitPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrbitPlan.
    */
  virtual uci::type::OrbitPlanProcessType& enableOrbitPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrbitPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& clearOrbitPlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrbitActivityPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrbitActivityPlan.
    */
  virtual const uci::type::ActivityPlanProcessType& getOrbitActivityPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitActivityPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitActivityPlan.
    */
  virtual uci::type::ActivityPlanProcessType& getOrbitActivityPlan() = 0;

  /** Sets the complex content identified by OrbitActivityPlan to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitActivityPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& setOrbitActivityPlan(const uci::type::ActivityPlanProcessType& value) = 0;

  /** Returns whether the Element identified by OrbitActivityPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrbitActivityPlan is enabled or not.
    */
  virtual bool hasOrbitActivityPlan() const = 0;

  /** Enables the Element identified by OrbitActivityPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrbitActivityPlan.
    */
  virtual uci::type::ActivityPlanProcessType& enableOrbitActivityPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrbitActivityPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& clearOrbitActivityPlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EffectPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EffectPlan.
    */
  virtual const uci::type::EffectPlanProcessType& getEffectPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EffectPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EffectPlan.
    */
  virtual uci::type::EffectPlanProcessType& getEffectPlan() = 0;

  /** Sets the complex content identified by EffectPlan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EffectPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& setEffectPlan(const uci::type::EffectPlanProcessType& value) = 0;

  /** Returns whether the Element identified by EffectPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EffectPlan is enabled or not.
    */
  virtual bool hasEffectPlan() const = 0;

  /** Enables the Element identified by EffectPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EffectPlan.
    */
  virtual uci::type::EffectPlanProcessType& enableEffectPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EffectPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& clearEffectPlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ActionPlanProcess.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ActionPlanProcess.
    */
  virtual const uci::type::ActionPlanProcessType& getActionPlanProcess() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActionPlanProcess.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActionPlanProcess.
    */
  virtual uci::type::ActionPlanProcessType& getActionPlanProcess() = 0;

  /** Sets the complex content identified by ActionPlanProcess to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActionPlanProcess.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& setActionPlanProcess(const uci::type::ActionPlanProcessType& value) = 0;

  /** Returns whether the Element identified by ActionPlanProcess exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActionPlanProcess is enabled or not.
    */
  virtual bool hasActionPlanProcess() const = 0;

  /** Enables the Element identified by ActionPlanProcess.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActionPlanProcess.
    */
  virtual uci::type::ActionPlanProcessType& enableActionPlanProcess(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActionPlanProcess.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& clearActionPlanProcess() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ResponsePlanProcess.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ResponsePlanProcess.
    */
  virtual const uci::type::ResponsePlanProcessType& getResponsePlanProcess() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ResponsePlanProcess.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ResponsePlanProcess.
    */
  virtual uci::type::ResponsePlanProcessType& getResponsePlanProcess() = 0;

  /** Sets the complex content identified by ResponsePlanProcess to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ResponsePlanProcess.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& setResponsePlanProcess(const uci::type::ResponsePlanProcessType& value) = 0;

  /** Returns whether the Element identified by ResponsePlanProcess exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ResponsePlanProcess is enabled or not.
    */
  virtual bool hasResponsePlanProcess() const = 0;

  /** Enables the Element identified by ResponsePlanProcess.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ResponsePlanProcess.
    */
  virtual uci::type::ResponsePlanProcessType& enableResponsePlanProcess(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ResponsePlanProcess.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceDetailsType& clearResponsePlanProcess() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlanningInterfaceDetailsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlanningInterfaceDetailsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlanningInterfaceDetailsType to copy from.
    */
  PlanningInterfaceDetailsType(const PlanningInterfaceDetailsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlanningInterfaceDetailsType to the contents of the
    * PlanningInterfaceDetailsType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The PlanningInterfaceDetailsType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this PlanningInterfaceDetailsType.
    * @return A reference to this PlanningInterfaceDetailsType.
    */
  PlanningInterfaceDetailsType& operator=(const PlanningInterfaceDetailsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLANNINGINTERFACEDETAILSTYPE_H

