/** @file SubsystemStatusMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SUBSYSTEMSTATUSMDT_H
#define UCI_TYPE_SUBSYSTEMSTATUSMDT_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/AboutType.h"
#include "uci/type/ComponentType.h"
#include "uci/type/ProcessingStatusEnum.h"
#include "uci/type/StateTransitionStatusEnum.h"
#include "uci/type/SubsystemEnabledSettingType.h"
#include "uci/type/SubsystemExtendedStatusPET.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/SubsystemStateEnum.h"
#include "uci/type/SubsystemSupportedSettingType.h"
#include "uci/type/VisibleString256Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SubsystemStatusMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SubsystemStatusMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SubsystemStatusMDT.
    */
  static UCI_EXPORT SubsystemStatusMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SubsystemStatusMDT initializing the data accessed by the new SubsystemStatusMDT using
    * the data accessed by the specified SubsystemStatusMDT (cloning).
    *
    * @param accessor The SubsystemStatusMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SubsystemStatusMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SubsystemStatusMDT.
    */
  static UCI_EXPORT SubsystemStatusMDT& create(const SubsystemStatusMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SubsystemStatusMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The SubsystemStatusMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SubsystemStatusMDT& accessor);

  /** Returns this accessor's type constant, i.e. subsystemStatusMDT.
    *
    * @return This accessor's type constant, i.e. subsystemStatusMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::subsystemStatusMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of SubsystemStatusMDT.
    *
    * @return The version that was initialized from the uci:version attribute of SubsystemStatusMDT.
    */
  static std::string getUCITypeVersion() {
    return "001.000.003.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SubsystemStatusMDT& accessor) = 0;

  /** Indicates a Subsystem setting that is currently enabled. Settings are enabled/disabled via the
    * SubsystemSettingsCommand. See SubsystemSettingEnum for further details. If multiple instances are given, each should
    * be of a different setting type as indicated by the child element. [Occurrences: Minimum: 0; Maximum: 8]
    */
  typedef uci::base::BoundedList<uci::type::SubsystemEnabledSettingType, uci::type::accessorType::subsystemEnabledSettingType> EnabledSetting;

  /** SettingParameters identified here indicate the SettingParameters specified in the SubsystemConfiguration message that
    * are commandable at this point in time. [Occurrences: Minimum: 0; Maximum: 8]
    */
  typedef uci::base::BoundedList<uci::type::SubsystemSupportedSettingType, uci::type::accessorType::subsystemSupportedSettingType> CommandableSubsystemSettingParameters;

  /** Indicates the possible state or states the Subsystem can be commanded to transition into from its current state. This
    * is not intended to replace the service contract but is intended to be used to advertise state transitions that change
    * depending on things such as the altitude an aircraft is at. For example, a subsystem on an aircraft is not able to
    * transition to state X until it reaches 30K ft., something that is difficult/impossible to do with a service contract.
    * List size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 14]
    */
  typedef uci::base::BoundedList<uci::type::SubsystemStateEnum, uci::type::accessorType::subsystemStateEnum> CommandableSubsystemState;

  /** Indicates an auxiliary or subordinate Component of this Subsystem. Components can be physical or functional. Any
    * Component that is relevant to the state, health and/or C2 of the Subsystem can be reported. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ComponentType, uci::type::accessorType::componentType> SubsystemComponent;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SubsystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SubsystemID.
    */
  virtual const uci::type::SubsystemID_Type& getSubsystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SubsystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SubsystemID.
    */
  virtual uci::type::SubsystemID_Type& getSubsystemID() = 0;

  /** Sets the complex content identified by SubsystemID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SubsystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setSubsystemID(const uci::type::SubsystemID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by SubsystemState.
    *
    * @return A const reference to the value of the enumeration identified by SubsystemState.
    */
  virtual const uci::type::SubsystemStateEnum& getSubsystemState() const = 0;

  /** Returns a reference to the value of the enumeration identified by SubsystemState.
    *
    * @return A reference to the value of the enumeration identified by SubsystemState.
    */
  virtual uci::type::SubsystemStateEnum& getSubsystemState() = 0;

  /** Sets the value of the enumeration identified by SubsystemState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setSubsystemState(const uci::type::SubsystemStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by SubsystemState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setSubsystemState(uci::type::SubsystemStateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by SubsystemStateDescription.
    *
    * @return A const reference to the accessor that provides access to the string identified by SubsystemStateDescription.
    */
  virtual const uci::type::VisibleString256Type& getSubsystemStateDescription() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by SubsystemStateDescription.
    *
    * @return A reference to the accessor that provides access to the string identified by SubsystemStateDescription.
    */
  virtual uci::type::VisibleString256Type& getSubsystemStateDescription() = 0;

  /** Sets the string identified by SubsystemStateDescription to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by SubsystemStateDescription.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setSubsystemStateDescription(const uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by SubsystemStateDescription to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setSubsystemStateDescription(const std::string& value) = 0;

  /** Sets the string identified by SubsystemStateDescription to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setSubsystemStateDescription(const char* value) = 0;

  /** Returns whether the Element identified by SubsystemStateDescription exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SubsystemStateDescription is enabled or not.
    */
  virtual bool hasSubsystemStateDescription() const = 0;

  /** Enables the Element identified by SubsystemStateDescription.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by SubsystemStateDescription.
    */
  virtual uci::type::VisibleString256Type& enableSubsystemStateDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SubsystemStateDescription.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& clearSubsystemStateDescription() = 0;

  /** Returns a const reference to the bounded list identified by EnabledSetting.
    *
    * @return A const reference to the bounded list identified by EnabledSetting.
    */
  virtual const uci::type::SubsystemStatusMDT::EnabledSetting& getEnabledSetting() const = 0;

  /** Returns a reference to the bounded list identified by EnabledSetting.
    *
    * @return A reference to the bounded list identified by EnabledSetting.
    */
  virtual uci::type::SubsystemStatusMDT::EnabledSetting& getEnabledSetting() = 0;

  /** Sets the bounded list identified by EnabledSetting.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setEnabledSetting(const uci::type::SubsystemStatusMDT::EnabledSetting& value) = 0;

  /** Returns a const reference to the bounded list identified by CommandableSubsystemSettingParameters.
    *
    * @return A const reference to the bounded list identified by CommandableSubsystemSettingParameters.
    */
  virtual const uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters& getCommandableSubsystemSettingParameters() const = 0;

  /** Returns a reference to the bounded list identified by CommandableSubsystemSettingParameters.
    *
    * @return A reference to the bounded list identified by CommandableSubsystemSettingParameters.
    */
  virtual uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters& getCommandableSubsystemSettingParameters() = 0;

  /** Sets the bounded list identified by CommandableSubsystemSettingParameters.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setCommandableSubsystemSettingParameters(const uci::type::SubsystemStatusMDT::CommandableSubsystemSettingParameters& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by EraseStatus.
    *
    * @return A const reference to the value of the enumeration identified by EraseStatus.
    */
  virtual const uci::type::ProcessingStatusEnum& getEraseStatus() const = 0;

  /** Returns a reference to the value of the enumeration identified by EraseStatus.
    *
    * @return A reference to the value of the enumeration identified by EraseStatus.
    */
  virtual uci::type::ProcessingStatusEnum& getEraseStatus() = 0;

  /** Sets the value of the enumeration identified by EraseStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setEraseStatus(const uci::type::ProcessingStatusEnum& value) = 0;

  /** Sets the value of the enumeration identified by EraseStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setEraseStatus(uci::type::ProcessingStatusEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by EraseStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EraseStatus is enabled or not.
    */
  virtual bool hasEraseStatus() const = 0;

  /** Enables the Element identified by EraseStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by EraseStatus.
    */
  virtual uci::type::ProcessingStatusEnum& enableEraseStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EraseStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& clearEraseStatus() = 0;

  /** Returns a const reference to the value of the enumeration identified by StateTransitionStatus.
    *
    * @return A const reference to the value of the enumeration identified by StateTransitionStatus.
    */
  virtual const uci::type::StateTransitionStatusEnum& getStateTransitionStatus() const = 0;

  /** Returns a reference to the value of the enumeration identified by StateTransitionStatus.
    *
    * @return A reference to the value of the enumeration identified by StateTransitionStatus.
    */
  virtual uci::type::StateTransitionStatusEnum& getStateTransitionStatus() = 0;

  /** Sets the value of the enumeration identified by StateTransitionStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setStateTransitionStatus(const uci::type::StateTransitionStatusEnum& value) = 0;

  /** Sets the value of the enumeration identified by StateTransitionStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setStateTransitionStatus(uci::type::StateTransitionStatusEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by StateTransitionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by StateTransitionStatus is enabled or not.
    */
  virtual bool hasStateTransitionStatus() const = 0;

  /** Enables the Element identified by StateTransitionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by StateTransitionStatus.
    */
  virtual uci::type::StateTransitionStatusEnum& enableStateTransitionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by StateTransitionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& clearStateTransitionStatus() = 0;

  /** Returns a const reference to the bounded list identified by CommandableSubsystemState.
    *
    * @return A const reference to the bounded list identified by CommandableSubsystemState.
    */
  virtual const uci::type::SubsystemStatusMDT::CommandableSubsystemState& getCommandableSubsystemState() const = 0;

  /** Returns a reference to the bounded list identified by CommandableSubsystemState.
    *
    * @return A reference to the bounded list identified by CommandableSubsystemState.
    */
  virtual uci::type::SubsystemStatusMDT::CommandableSubsystemState& getCommandableSubsystemState() = 0;

  /** Sets the bounded list identified by CommandableSubsystemState.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setCommandableSubsystemState(const uci::type::SubsystemStatusMDT::CommandableSubsystemState& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by About.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by About.
    */
  virtual const uci::type::AboutType& getAbout() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by About.
    *
    * @return A reference to the accessor that provides access to the complex content identified by About.
    */
  virtual uci::type::AboutType& getAbout() = 0;

  /** Sets the complex content identified by About to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by About.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setAbout(const uci::type::AboutType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ExtendedStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ExtendedStatus.
    */
  virtual const uci::type::SubsystemExtendedStatusPET& getExtendedStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ExtendedStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ExtendedStatus.
    */
  virtual uci::type::SubsystemExtendedStatusPET& getExtendedStatus() = 0;

  /** Sets the complex content identified by ExtendedStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ExtendedStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setExtendedStatus(const uci::type::SubsystemExtendedStatusPET& value) = 0;

  /** Returns whether the Element identified by ExtendedStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ExtendedStatus is enabled or not.
    */
  virtual bool hasExtendedStatus() const = 0;

  /** Enables the Element identified by ExtendedStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ExtendedStatus.
    */
  virtual uci::type::SubsystemExtendedStatusPET& enableExtendedStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ExtendedStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& clearExtendedStatus() = 0;

  /** Returns a const reference to the bounded list identified by SubsystemComponent.
    *
    * @return A const reference to the bounded list identified by SubsystemComponent.
    */
  virtual const uci::type::SubsystemStatusMDT::SubsystemComponent& getSubsystemComponent() const = 0;

  /** Returns a reference to the bounded list identified by SubsystemComponent.
    *
    * @return A reference to the bounded list identified by SubsystemComponent.
    */
  virtual uci::type::SubsystemStatusMDT::SubsystemComponent& getSubsystemComponent() = 0;

  /** Sets the bounded list identified by SubsystemComponent.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemStatusMDT& setSubsystemComponent(const uci::type::SubsystemStatusMDT::SubsystemComponent& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SubsystemStatusMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~SubsystemStatusMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SubsystemStatusMDT to copy from.
    */
  SubsystemStatusMDT(const SubsystemStatusMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SubsystemStatusMDT to the contents of the SubsystemStatusMDT on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SubsystemStatusMDT on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this SubsystemStatusMDT.
    * @return A reference to this SubsystemStatusMDT.
    */
  SubsystemStatusMDT& operator=(const SubsystemStatusMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SUBSYSTEMSTATUSMDT_H

