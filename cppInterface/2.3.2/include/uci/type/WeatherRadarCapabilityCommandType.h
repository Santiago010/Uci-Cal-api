/** @file WeatherRadarCapabilityCommandType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_WEATHERRADARCAPABILITYCOMMANDTYPE_H
#define UCI_TYPE_WEATHERRADARCAPABILITYCOMMANDTYPE_H

#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AirVolumeSensorReferencedType.h"
#include "CapabilityCommandBaseType.h"
#include "CapabilityCommandFrequencyType.h"
#include "CollectionPolicyEnum.h"
#include "ElectronicProtectionOptionsEnableType.h"
#include "EmconConstraintType.h"
#include "ProductOutputCommandBasicType.h"
#include "RepetitionType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class WeatherRadarCapabilityCommandType : public virtual CapabilityCommandBaseType {
public:

  /** This method constructs a new WeatherRadarCapabilityCommandType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed WeatherRadarCapabilityCommandType.
    */
  static UCI_EXPORT WeatherRadarCapabilityCommandType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new WeatherRadarCapabilityCommandType initializing the data accessed by the new
    * WeatherRadarCapabilityCommandType using the data accessed by the specified WeatherRadarCapabilityCommandType
    * (cloning).
    *
    * @param accessor The WeatherRadarCapabilityCommandType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created WeatherRadarCapabilityCommandType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed WeatherRadarCapabilityCommandType.
    */
  static UCI_EXPORT WeatherRadarCapabilityCommandType& create(const WeatherRadarCapabilityCommandType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified WeatherRadarCapabilityCommandType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The WeatherRadarCapabilityCommandType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(WeatherRadarCapabilityCommandType& accessor);

  /** Returns this accessor's type constant, i.e. weatherRadarCapabilityCommandType.
    *
    * @return This accessor's type constant, i.e. weatherRadarCapabilityCommandType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::weatherRadarCapabilityCommandType;
  }

  /** Returns the version that was initialized from the uci:version attribute of WeatherRadarCapabilityCommandType.
    *
    * @return The version that was initialized from the uci:version attribute of WeatherRadarCapabilityCommandType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const WeatherRadarCapabilityCommandType& accessor) = 0;

  /** Indicates a required output Product of the Command. Only Products consistent with WeatherRadar and supported by the
    * commanded WeatherRadar Capability should be requested. If omitted, no output Product should be produced. See
    * ProductTypeEnum for further details. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductOutputCommandBasicType, uci::type::accessorType::productOutputCommandBasicType> ProductOutput;

  /** Indicates the list of externally controllable EP options that should be applied to this command instead of the EP
    * options currently enabled for this Capability. If this list is a subset of the EP options that are available for this
    * capability, then no other EP options should be employed for this command. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ElectronicProtectionOptionsEnableType, uci::type::accessorType::electronicProtectionOptionsEnableType> ElectronicProtectionOptionsOverride;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AirVolume.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AirVolume.
    */
  virtual const uci::type::AirVolumeSensorReferencedType& getAirVolume() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AirVolume.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AirVolume.
    */
  virtual uci::type::AirVolumeSensorReferencedType& getAirVolume() = 0;

  /** Sets the complex content identified by AirVolume to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AirVolume.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarCapabilityCommandType& setAirVolume(const uci::type::AirVolumeSensorReferencedType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Frequency.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual const uci::type::CapabilityCommandFrequencyType& getFrequency() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Frequency.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual uci::type::CapabilityCommandFrequencyType& getFrequency() = 0;

  /** Sets the complex content identified by Frequency to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Frequency.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarCapabilityCommandType& setFrequency(const uci::type::CapabilityCommandFrequencyType& value) = 0;

  /** Returns whether the Element identified by Frequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Frequency is enabled or not.
    */
  virtual bool hasFrequency() const = 0;

  /** Enables the Element identified by Frequency.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual uci::type::CapabilityCommandFrequencyType& enableFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Frequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarCapabilityCommandType& clearFrequency() = 0;

  /** Returns a const reference to the value of the enumeration identified by CollectionPolicy.
    *
    * @return A const reference to the value of the enumeration identified by CollectionPolicy.
    */
  virtual const uci::type::CollectionPolicyEnum& getCollectionPolicy() const = 0;

  /** Returns a reference to the value of the enumeration identified by CollectionPolicy.
    *
    * @return A reference to the value of the enumeration identified by CollectionPolicy.
    */
  virtual uci::type::CollectionPolicyEnum& getCollectionPolicy() = 0;

  /** Sets the value of the enumeration identified by CollectionPolicy.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarCapabilityCommandType& setCollectionPolicy(const uci::type::CollectionPolicyEnum& value) = 0;

  /** Sets the value of the enumeration identified by CollectionPolicy.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarCapabilityCommandType& setCollectionPolicy(uci::type::CollectionPolicyEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by CollectionPolicy exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionPolicy is enabled or not.
    */
  virtual bool hasCollectionPolicy() const = 0;

  /** Enables the Element identified by CollectionPolicy.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by CollectionPolicy.
    */
  virtual uci::type::CollectionPolicyEnum& enableCollectionPolicy(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionPolicy.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarCapabilityCommandType& clearCollectionPolicy() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual const uci::type::RepetitionType& getRepetition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& getRepetition() = 0;

  /** Sets the complex content identified by Repetition to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Repetition.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarCapabilityCommandType& setRepetition(const uci::type::RepetitionType& value) = 0;

  /** Returns whether the Element identified by Repetition exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Repetition is enabled or not.
    */
  virtual bool hasRepetition() const = 0;

  /** Enables the Element identified by Repetition.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& enableRepetition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Repetition.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarCapabilityCommandType& clearRepetition() = 0;

  /** Returns a const reference to the bounded list identified by ProductOutput.
    *
    * @return A const reference to the bounded list identified by ProductOutput.
    */
  virtual const uci::type::WeatherRadarCapabilityCommandType::ProductOutput& getProductOutput() const = 0;

  /** Returns a reference to the bounded list identified by ProductOutput.
    *
    * @return A reference to the bounded list identified by ProductOutput.
    */
  virtual uci::type::WeatherRadarCapabilityCommandType::ProductOutput& getProductOutput() = 0;

  /** Sets the bounded list identified by ProductOutput.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarCapabilityCommandType& setProductOutput(const uci::type::WeatherRadarCapabilityCommandType::ProductOutput& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Emcon.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Emcon.
    */
  virtual const uci::type::EmconConstraintType& getEmcon() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Emcon.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Emcon.
    */
  virtual uci::type::EmconConstraintType& getEmcon() = 0;

  /** Sets the complex content identified by Emcon to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Emcon.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarCapabilityCommandType& setEmcon(const uci::type::EmconConstraintType& value) = 0;

  /** Returns whether the Element identified by Emcon exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Emcon is enabled or not.
    */
  virtual bool hasEmcon() const = 0;

  /** Enables the Element identified by Emcon.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Emcon.
    */
  virtual uci::type::EmconConstraintType& enableEmcon(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Emcon.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarCapabilityCommandType& clearEmcon() = 0;

  /** Returns a const reference to the bounded list identified by ElectronicProtectionOptionsOverride.
    *
    * @return A const reference to the bounded list identified by ElectronicProtectionOptionsOverride.
    */
  virtual const uci::type::WeatherRadarCapabilityCommandType::ElectronicProtectionOptionsOverride& getElectronicProtectionOptionsOverride() const = 0;

  /** Returns a reference to the bounded list identified by ElectronicProtectionOptionsOverride.
    *
    * @return A reference to the bounded list identified by ElectronicProtectionOptionsOverride.
    */
  virtual uci::type::WeatherRadarCapabilityCommandType::ElectronicProtectionOptionsOverride& getElectronicProtectionOptionsOverride() = 0;

  /** Sets the bounded list identified by ElectronicProtectionOptionsOverride.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarCapabilityCommandType& setElectronicProtectionOptionsOverride(const uci::type::WeatherRadarCapabilityCommandType::ElectronicProtectionOptionsOverride& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  WeatherRadarCapabilityCommandType() {
  }

  /** The destructor [only available to derived classes]. */
  ~WeatherRadarCapabilityCommandType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The WeatherRadarCapabilityCommandType to copy from.
    */
  WeatherRadarCapabilityCommandType(const WeatherRadarCapabilityCommandType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this WeatherRadarCapabilityCommandType to the contents of the
    * WeatherRadarCapabilityCommandType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The WeatherRadarCapabilityCommandType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this WeatherRadarCapabilityCommandType.
    * @return A reference to this WeatherRadarCapabilityCommandType.
    */
  WeatherRadarCapabilityCommandType& operator=(const WeatherRadarCapabilityCommandType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_WEATHERRADARCAPABILITYCOMMANDTYPE_H

