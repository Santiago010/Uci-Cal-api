/** @file IPv6_ConnectionType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_IPV6_CONNECTIONTYPE_H
#define UCI_TYPE_IPV6_CONNECTIONTYPE_H

#include "../base/Accessor.h"
#include "../base/IntAccessor.h"
#include "../base/export.h"
#include "IPv6_AddressType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** IPv6 connection endpoint details. */
class IPv6_ConnectionType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new IPv6_ConnectionType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IPv6_ConnectionType.
    */
  static UCI_EXPORT IPv6_ConnectionType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new IPv6_ConnectionType initializing the data accessed by the new IPv6_ConnectionType using
    * the data accessed by the specified IPv6_ConnectionType (cloning).
    *
    * @param accessor The IPv6_ConnectionType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created IPv6_ConnectionType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IPv6_ConnectionType.
    */
  static UCI_EXPORT IPv6_ConnectionType& create(const IPv6_ConnectionType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified IPv6_ConnectionType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The IPv6_ConnectionType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(IPv6_ConnectionType& accessor);

  /** Returns this accessor's type constant, i.e. iPv6_ConnectionType.
    *
    * @return This accessor's type constant, i.e. iPv6_ConnectionType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::iPv6_ConnectionType;
  }

  /** Returns the version that was initialized from the uci:version attribute of IPv6_ConnectionType.
    *
    * @return The version that was initialized from the uci:version attribute of IPv6_ConnectionType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const IPv6_ConnectionType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by IPv6_Address.
    *
    * @return A const reference to the accessor that provides access to the string identified by IPv6_Address.
    */
  virtual const uci::type::IPv6_AddressType& getIPv6_Address() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by IPv6_Address.
    *
    * @return A reference to the accessor that provides access to the string identified by IPv6_Address.
    */
  virtual uci::type::IPv6_AddressType& getIPv6_Address() = 0;

  /** Sets the string identified by IPv6_Address to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by IPv6_Address.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& setIPv6_Address(const uci::type::IPv6_AddressType& value) = 0;

  /** Sets the string identified by IPv6_Address to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& setIPv6_Address(const std::string& value) = 0;

  /** Sets the string identified by IPv6_Address to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& setIPv6_Address(const char* value) = 0;

  /** Returns whether the Element identified by IPv6_Address exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv6_Address is enabled or not.
    */
  virtual bool hasIPv6_Address() const = 0;

  /** Enables the Element identified by IPv6_Address.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by IPv6_Address.
    */
  virtual uci::type::IPv6_AddressType& enableIPv6_Address(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by IPv6_Address.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& clearIPv6_Address() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv6_CIDR_Mask.
    *
    * @return The value of the simple primitive data type identified by IPv6_CIDR_Mask.
    */
  virtual xs::Int getIPv6_CIDR_Mask() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv6_CIDR_Mask.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& setIPv6_CIDR_Mask(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv6_CIDR_Mask exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv6_CIDR_Mask is enabled or not.
    */
  virtual bool hasIPv6_CIDR_Mask() const = 0;

  /** Clears (disabled) the Element identified by IPv6_CIDR_Mask.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& clearIPv6_CIDR_Mask() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv6_ProtocolHeader.
    *
    * @return The value of the simple primitive data type identified by IPv6_ProtocolHeader.
    */
  virtual xs::Int getIPv6_ProtocolHeader() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv6_ProtocolHeader.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& setIPv6_ProtocolHeader(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv6_ProtocolHeader exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv6_ProtocolHeader is enabled or not.
    */
  virtual bool hasIPv6_ProtocolHeader() const = 0;

  /** Clears (disabled) the Element identified by IPv6_ProtocolHeader.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& clearIPv6_ProtocolHeader() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv6_PortRangeStart.
    *
    * @return The value of the simple primitive data type identified by IPv6_PortRangeStart.
    */
  virtual xs::Int getIPv6_PortRangeStart() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv6_PortRangeStart.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& setIPv6_PortRangeStart(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv6_PortRangeStart exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv6_PortRangeStart is enabled or not.
    */
  virtual bool hasIPv6_PortRangeStart() const = 0;

  /** Clears (disabled) the Element identified by IPv6_PortRangeStart.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& clearIPv6_PortRangeStart() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv6_PortRangeEnd.
    *
    * @return The value of the simple primitive data type identified by IPv6_PortRangeEnd.
    */
  virtual xs::Int getIPv6_PortRangeEnd() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv6_PortRangeEnd.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& setIPv6_PortRangeEnd(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv6_PortRangeEnd exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv6_PortRangeEnd is enabled or not.
    */
  virtual bool hasIPv6_PortRangeEnd() const = 0;

  /** Clears (disabled) the Element identified by IPv6_PortRangeEnd.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& clearIPv6_PortRangeEnd() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv6_DS_Field.
    *
    * @return The value of the simple primitive data type identified by IPv6_DS_Field.
    */
  virtual xs::Int getIPv6_DS_Field() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv6_DS_Field.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& setIPv6_DS_Field(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv6_DS_Field exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv6_DS_Field is enabled or not.
    */
  virtual bool hasIPv6_DS_Field() const = 0;

  /** Clears (disabled) the Element identified by IPv6_DS_Field.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& clearIPv6_DS_Field() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPv6_MTU_Size.
    *
    * @return The value of the simple primitive data type identified by IPv6_MTU_Size.
    */
  virtual xs::Int getIPv6_MTU_Size() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPv6_MTU_Size.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& setIPv6_MTU_Size(xs::Int value) = 0;

  /** Returns whether the Element identified by IPv6_MTU_Size exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPv6_MTU_Size is enabled or not.
    */
  virtual bool hasIPv6_MTU_Size() const = 0;

  /** Clears (disabled) the Element identified by IPv6_MTU_Size.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IPv6_ConnectionType& clearIPv6_MTU_Size() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  IPv6_ConnectionType() {
  }

  /** The destructor [only available to derived classes]. */
  ~IPv6_ConnectionType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The IPv6_ConnectionType to copy from.
    */
  IPv6_ConnectionType(const IPv6_ConnectionType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this IPv6_ConnectionType to the contents of the IPv6_ConnectionType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The IPv6_ConnectionType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this IPv6_ConnectionType.
    * @return A reference to this IPv6_ConnectionType.
    */
  IPv6_ConnectionType& operator=(const IPv6_ConnectionType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_IPV6_CONNECTIONTYPE_H

