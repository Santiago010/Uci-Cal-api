/** @file DamageEstimateRequestMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_DAMAGEESTIMATEREQUESTMDT_H
#define UCI_TYPE_DAMAGEESTIMATEREQUESTMDT_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/DMPI_BlastPairingType.h"
#include "uci/type/DMPI_DamageEstimateType.h"
#include "uci/type/DamageCategoryEnum.h"
#include "uci/type/DamageEstimateContentsEnum.h"
#include "uci/type/DamageEstimateTargetType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/PercentType.h"
#include "uci/type/Point3D_Type.h"
#include "uci/type/ProductMetadataID_Type.h"
#include "uci/type/RequestBaseType.h"
#include "uci/type/TaskID_Type.h"
#include "uci/type/VisibleString64Type.h"
#include "uci/type/ZoneType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class DamageEstimateRequestMDT : public virtual RequestBaseType {
public:

  /** This method constructs a new DamageEstimateRequestMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DamageEstimateRequestMDT.
    */
  static UCI_EXPORT DamageEstimateRequestMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new DamageEstimateRequestMDT initializing the data accessed by the new
    * DamageEstimateRequestMDT using the data accessed by the specified DamageEstimateRequestMDT (cloning).
    *
    * @param accessor The DamageEstimateRequestMDT that provides access to the data that is to be used to initialize the
    *      data accessed by the new created DamageEstimateRequestMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DamageEstimateRequestMDT.
    */
  static UCI_EXPORT DamageEstimateRequestMDT& create(const DamageEstimateRequestMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified DamageEstimateRequestMDT. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The DamageEstimateRequestMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(DamageEstimateRequestMDT& accessor);

  /** Returns this accessor's type constant, i.e. damageEstimateRequestMDT.
    *
    * @return This accessor's type constant, i.e. damageEstimateRequestMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::damageEstimateRequestMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of DamageEstimateRequestMDT.
    *
    * @return The version that was initialized from the uci:version attribute of DamageEstimateRequestMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const DamageEstimateRequestMDT& accessor) = 0;

  /** Indicates a DMPI associated with this attack. If omitted, DMPI information should be retrieved via the sibling Target
    * element's Task reference. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::DMPI_DamageEstimateType, uci::type::accessorType::dMPI_DamageEstimateType> DMPI_Data;

  /** Indicates the ID of a data product from which this damage request should be derived. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductMetadataID_Type, uci::type::accessorType::productMetadataID_Type> ProductMetadataID;

  /** Optional DMPI-to-BlastRadius pairings to be used for fratricide and collateral damage checks. If left unspecified,
    * DMPI will be looked up via TaskID, and blast radius (a.k.a. minimum safe distance) will be a lookup value based on
    * the weapon. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::DMPI_BlastPairingType, uci::type::accessorType::dMPI_BlastPairingType> DMPI_BlastPairing;

  /** Returns a const reference to the value of the enumeration identified by EstimateType.
    *
    * @return A const reference to the value of the enumeration identified by EstimateType.
    */
  virtual const uci::type::DamageCategoryEnum& getEstimateType() const = 0;

  /** Returns a reference to the value of the enumeration identified by EstimateType.
    *
    * @return A reference to the value of the enumeration identified by EstimateType.
    */
  virtual uci::type::DamageCategoryEnum& getEstimateType() = 0;

  /** Sets the value of the enumeration identified by EstimateType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setEstimateType(const uci::type::DamageCategoryEnum& value) = 0;

  /** Sets the value of the enumeration identified by EstimateType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setEstimateType(uci::type::DamageCategoryEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by EstimateContents.
    *
    * @return A const reference to the value of the enumeration identified by EstimateContents.
    */
  virtual const uci::type::DamageEstimateContentsEnum& getEstimateContents() const = 0;

  /** Returns a reference to the value of the enumeration identified by EstimateContents.
    *
    * @return A reference to the value of the enumeration identified by EstimateContents.
    */
  virtual uci::type::DamageEstimateContentsEnum& getEstimateContents() = 0;

  /** Sets the value of the enumeration identified by EstimateContents.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setEstimateContents(const uci::type::DamageEstimateContentsEnum& value) = 0;

  /** Sets the value of the enumeration identified by EstimateContents.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setEstimateContents(uci::type::DamageEstimateContentsEnum::EnumerationItem value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ReportingThreshold.
    *
    * @return The value of the simple primitive data type identified by ReportingThreshold.
    */
  virtual uci::type::PercentTypeValue getReportingThreshold() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ReportingThreshold.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setReportingThreshold(uci::type::PercentTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TargetData.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TargetData.
    */
  virtual const uci::type::DamageEstimateTargetType& getTargetData() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TargetData.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TargetData.
    */
  virtual uci::type::DamageEstimateTargetType& getTargetData() = 0;

  /** Sets the complex content identified by TargetData to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TargetData.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setTargetData(const uci::type::DamageEstimateTargetType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by TargetName.
    *
    * @return A const reference to the accessor that provides access to the string identified by TargetName.
    */
  virtual const uci::type::VisibleString64Type& getTargetName() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by TargetName.
    *
    * @return A reference to the accessor that provides access to the string identified by TargetName.
    */
  virtual uci::type::VisibleString64Type& getTargetName() = 0;

  /** Sets the string identified by TargetName to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by TargetName.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setTargetName(const uci::type::VisibleString64Type& value) = 0;

  /** Sets the string identified by TargetName to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setTargetName(const std::string& value) = 0;

  /** Sets the string identified by TargetName to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setTargetName(const char* value) = 0;

  /** Returns whether the Element identified by TargetName exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TargetName is enabled or not.
    */
  virtual bool hasTargetName() const = 0;

  /** Enables the Element identified by TargetName.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by TargetName.
    */
  virtual uci::type::VisibleString64Type& enableTargetName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TargetName.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& clearTargetName() = 0;

  /** Returns a const reference to the bounded list identified by DMPI_Data.
    *
    * @return A const reference to the bounded list identified by DMPI_Data.
    */
  virtual const uci::type::DamageEstimateRequestMDT::DMPI_Data& getDMPI_Data() const = 0;

  /** Returns a reference to the bounded list identified by DMPI_Data.
    *
    * @return A reference to the bounded list identified by DMPI_Data.
    */
  virtual uci::type::DamageEstimateRequestMDT::DMPI_Data& getDMPI_Data() = 0;

  /** Sets the bounded list identified by DMPI_Data.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setDMPI_Data(const uci::type::DamageEstimateRequestMDT::DMPI_Data& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TaskID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual const uci::type::TaskID_Type& getTaskID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TaskID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual uci::type::TaskID_Type& getTaskID() = 0;

  /** Sets the complex content identified by TaskID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TaskID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setTaskID(const uci::type::TaskID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ReleasePoint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ReleasePoint.
    */
  virtual const uci::type::Point3D_Type& getReleasePoint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ReleasePoint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ReleasePoint.
    */
  virtual uci::type::Point3D_Type& getReleasePoint() = 0;

  /** Sets the complex content identified by ReleasePoint to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ReleasePoint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setReleasePoint(const uci::type::Point3D_Type& value) = 0;

  /** Returns whether the Element identified by ReleasePoint exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReleasePoint is enabled or not.
    */
  virtual bool hasReleasePoint() const = 0;

  /** Enables the Element identified by ReleasePoint.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ReleasePoint.
    */
  virtual uci::type::Point3D_Type& enableReleasePoint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReleasePoint.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& clearReleasePoint() = 0;

  /** Returns a const reference to the bounded list identified by ProductMetadataID.
    *
    * @return A const reference to the bounded list identified by ProductMetadataID.
    */
  virtual const uci::type::DamageEstimateRequestMDT::ProductMetadataID& getProductMetadataID() const = 0;

  /** Returns a reference to the bounded list identified by ProductMetadataID.
    *
    * @return A reference to the bounded list identified by ProductMetadataID.
    */
  virtual uci::type::DamageEstimateRequestMDT::ProductMetadataID& getProductMetadataID() = 0;

  /** Sets the bounded list identified by ProductMetadataID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setProductMetadataID(const uci::type::DamageEstimateRequestMDT::ProductMetadataID& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by RespondBy.
    *
    * @return The value of the simple primitive data type identified by RespondBy.
    */
  virtual uci::type::DateTimeTypeValue getRespondBy() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RespondBy.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setRespondBy(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by RespondBy exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RespondBy is enabled or not.
    */
  virtual bool hasRespondBy() const = 0;

  /** Clears (disabled) the Element identified by RespondBy.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& clearRespondBy() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EstimateZone.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EstimateZone.
    */
  virtual const uci::type::ZoneType& getEstimateZone() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EstimateZone.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EstimateZone.
    */
  virtual uci::type::ZoneType& getEstimateZone() = 0;

  /** Sets the complex content identified by EstimateZone to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EstimateZone.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setEstimateZone(const uci::type::ZoneType& value) = 0;

  /** Returns whether the Element identified by EstimateZone exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimateZone is enabled or not.
    */
  virtual bool hasEstimateZone() const = 0;

  /** Enables the Element identified by EstimateZone.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EstimateZone.
    */
  virtual uci::type::ZoneType& enableEstimateZone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EstimateZone.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& clearEstimateZone() = 0;

  /** Returns a const reference to the bounded list identified by DMPI_BlastPairing.
    *
    * @return A const reference to the bounded list identified by DMPI_BlastPairing.
    */
  virtual const uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing& getDMPI_BlastPairing() const = 0;

  /** Returns a reference to the bounded list identified by DMPI_BlastPairing.
    *
    * @return A reference to the bounded list identified by DMPI_BlastPairing.
    */
  virtual uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing& getDMPI_BlastPairing() = 0;

  /** Sets the bounded list identified by DMPI_BlastPairing.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DamageEstimateRequestMDT& setDMPI_BlastPairing(const uci::type::DamageEstimateRequestMDT::DMPI_BlastPairing& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  DamageEstimateRequestMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~DamageEstimateRequestMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The DamageEstimateRequestMDT to copy from.
    */
  DamageEstimateRequestMDT(const DamageEstimateRequestMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this DamageEstimateRequestMDT to the contents of the
    * DamageEstimateRequestMDT on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The DamageEstimateRequestMDT on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this DamageEstimateRequestMDT.
    * @return A reference to this DamageEstimateRequestMDT.
    */
  DamageEstimateRequestMDT& operator=(const DamageEstimateRequestMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_DAMAGEESTIMATEREQUESTMDT_H

