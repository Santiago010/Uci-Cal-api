/** @file WeatherDatasetMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_WEATHERDATASETMDT_H
#define UCI_TYPE_WEATHERDATASETMDT_H

#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AltitudeType.h"
#include "AnglePositiveType.h"
#include "DataRecordBaseType.h"
#include "DateTimeType.h"
#include "ScheduleType.h"
#include "SystemID_Type.h"
#include "WeatherDataType.h"
#include "WeatherDatasetID_Type.h"
#include "ZoneType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class WeatherDatasetMDT : public virtual DataRecordBaseType {
public:

  /** This method constructs a new WeatherDatasetMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed WeatherDatasetMDT.
    */
  static UCI_EXPORT WeatherDatasetMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new WeatherDatasetMDT initializing the data accessed by the new WeatherDatasetMDT using the
    * data accessed by the specified WeatherDatasetMDT (cloning).
    *
    * @param accessor The WeatherDatasetMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created WeatherDatasetMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed WeatherDatasetMDT.
    */
  static UCI_EXPORT WeatherDatasetMDT& create(const WeatherDatasetMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified WeatherDatasetMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The WeatherDatasetMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(WeatherDatasetMDT& accessor);

  /** Returns this accessor's type constant, i.e. weatherDatasetMDT.
    *
    * @return This accessor's type constant, i.e. weatherDatasetMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::weatherDatasetMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of WeatherDatasetMDT.
    *
    * @return The version that was initialized from the uci:version attribute of WeatherDatasetMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const WeatherDatasetMDT& accessor) = 0;

  /** This element contains weather data for the dataset that should be used for planning purposes. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::WeatherDataType, uci::type::accessorType::weatherDataType> WeatherData;

  /** One or more Systems to which the weather dataset apply. If omitted, the dataset applies to all Systems. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SystemID_Type, uci::type::accessorType::systemID_Type> SystemID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by WeatherDatasetID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by WeatherDatasetID.
    */
  virtual const uci::type::WeatherDatasetID_Type& getWeatherDatasetID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by WeatherDatasetID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by WeatherDatasetID.
    */
  virtual uci::type::WeatherDatasetID_Type& getWeatherDatasetID() = 0;

  /** Sets the complex content identified by WeatherDatasetID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by WeatherDatasetID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherDatasetMDT& setWeatherDatasetID(const uci::type::WeatherDatasetID_Type& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Created.
    *
    * @return The value of the simple primitive data type identified by Created.
    */
  virtual uci::type::DateTimeTypeValue getCreated() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Created.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherDatasetMDT& setCreated(uci::type::DateTimeTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Updated.
    *
    * @return The value of the simple primitive data type identified by Updated.
    */
  virtual uci::type::DateTimeTypeValue getUpdated() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Updated.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherDatasetMDT& setUpdated(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DatasetArea.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DatasetArea.
    */
  virtual const uci::type::ZoneType& getDatasetArea() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DatasetArea.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DatasetArea.
    */
  virtual uci::type::ZoneType& getDatasetArea() = 0;

  /** Sets the complex content identified by DatasetArea to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DatasetArea.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherDatasetMDT& setDatasetArea(const uci::type::ZoneType& value) = 0;

  /** Enables the Element identified by DatasetArea.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return A reference to the accessor that provides access to the complex content identified by DatasetArea.
    */
  virtual uci::type::ZoneType& enableDatasetArea(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns the value of the SimplePrimitive data type identified by DegreeStep.
    *
    * @return The value of the simple primitive data type identified by DegreeStep.
    */
  virtual uci::type::AnglePositiveTypeValue getDegreeStep() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DegreeStep.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherDatasetMDT& setDegreeStep(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by DegreeStep exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DegreeStep is enabled or not.
    */
  virtual bool hasDegreeStep() const = 0;

  /** Clears (disabled) the Element identified by DegreeStep.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherDatasetMDT& clearDegreeStep() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AltitudeStep.
    *
    * @return The value of the simple primitive data type identified by AltitudeStep.
    */
  virtual uci::type::AltitudeTypeValue getAltitudeStep() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AltitudeStep.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherDatasetMDT& setAltitudeStep(uci::type::AltitudeTypeValue value) = 0;

  /** Returns whether the Element identified by AltitudeStep exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AltitudeStep is enabled or not.
    */
  virtual bool hasAltitudeStep() const = 0;

  /** Clears (disabled) the Element identified by AltitudeStep.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherDatasetMDT& clearAltitudeStep() = 0;

  /** Returns a const reference to the bounded list identified by WeatherData.
    *
    * @return A const reference to the bounded list identified by WeatherData.
    */
  virtual const uci::type::WeatherDatasetMDT::WeatherData& getWeatherData() const = 0;

  /** Returns a reference to the bounded list identified by WeatherData.
    *
    * @return A reference to the bounded list identified by WeatherData.
    */
  virtual uci::type::WeatherDatasetMDT::WeatherData& getWeatherData() = 0;

  /** Sets the bounded list identified by WeatherData.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherDatasetMDT& setWeatherData(const uci::type::WeatherDatasetMDT::WeatherData& value) = 0;

  /** Returns a const reference to the bounded list identified by SystemID.
    *
    * @return A const reference to the bounded list identified by SystemID.
    */
  virtual const uci::type::WeatherDatasetMDT::SystemID& getSystemID() const = 0;

  /** Returns a reference to the bounded list identified by SystemID.
    *
    * @return A reference to the bounded list identified by SystemID.
    */
  virtual uci::type::WeatherDatasetMDT::SystemID& getSystemID() = 0;

  /** Sets the bounded list identified by SystemID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherDatasetMDT& setSystemID(const uci::type::WeatherDatasetMDT::SystemID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Schedule.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Schedule.
    */
  virtual const uci::type::ScheduleType& getSchedule() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Schedule.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Schedule.
    */
  virtual uci::type::ScheduleType& getSchedule() = 0;

  /** Sets the complex content identified by Schedule to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Schedule.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherDatasetMDT& setSchedule(const uci::type::ScheduleType& value) = 0;

  /** Returns whether the Element identified by Schedule exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Schedule is enabled or not.
    */
  virtual bool hasSchedule() const = 0;

  /** Enables the Element identified by Schedule.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Schedule.
    */
  virtual uci::type::ScheduleType& enableSchedule(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Schedule.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherDatasetMDT& clearSchedule() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  WeatherDatasetMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~WeatherDatasetMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The WeatherDatasetMDT to copy from.
    */
  WeatherDatasetMDT(const WeatherDatasetMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this WeatherDatasetMDT to the contents of the WeatherDatasetMDT on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The WeatherDatasetMDT on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this WeatherDatasetMDT.
    * @return A reference to this WeatherDatasetMDT.
    */
  WeatherDatasetMDT& operator=(const WeatherDatasetMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_WEATHERDATASETMDT_H

