/** @file CoordinatedRequirementSetMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COORDINATEDREQUIREMENTSETMDT_H
#define UCI_TYPE_COORDINATEDREQUIREMENTSETMDT_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CallSignType.h"
#include "CoordinatedRequirementSetID_Type.h"
#include "FrequencyType.h"
#include "LinkedRequirementType.h"
#include "SecurityInformationType.h"
#include "TimingConstraintsType.h"
#include "VisibleString1024Type.h"
#include "VisibleString256Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class CoordinatedRequirementSetMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CoordinatedRequirementSetMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CoordinatedRequirementSetMDT.
    */
  static UCI_EXPORT CoordinatedRequirementSetMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CoordinatedRequirementSetMDT initializing the data accessed by the new
    * CoordinatedRequirementSetMDT using the data accessed by the specified CoordinatedRequirementSetMDT (cloning).
    *
    * @param accessor The CoordinatedRequirementSetMDT that provides access to the data that is to be used to initialize
    *      the data accessed by the new created CoordinatedRequirementSetMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CoordinatedRequirementSetMDT.
    */
  static UCI_EXPORT CoordinatedRequirementSetMDT& create(const CoordinatedRequirementSetMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CoordinatedRequirementSetMDT. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The CoordinatedRequirementSetMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CoordinatedRequirementSetMDT& accessor);

  /** Returns this accessor's type constant, i.e. coordinatedRequirementSetMDT.
    *
    * @return This accessor's type constant, i.e. coordinatedRequirementSetMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::coordinatedRequirementSetMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of CoordinatedRequirementSetMDT.
    *
    * @return The version that was initialized from the uci:version attribute of CoordinatedRequirementSetMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CoordinatedRequirementSetMDT& accessor) = 0;

  /** Identifies the individual Requirements which belong to the coordinated Requirement set. [Occurrences: Minimum: 1;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::LinkedRequirementType, uci::type::accessorType::linkedRequirementType> LinkedRequirement;

  /** Indicates call signs for the operators of Systems executing Requirements in the coordinated Requirement set. See type
    * annotations for further details. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CallSignType, uci::type::accessorType::callSignType> CallSign;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CoordinatedRequirementSetID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CoordinatedRequirementSetID.
    */
  virtual const uci::type::CoordinatedRequirementSetID_Type& getCoordinatedRequirementSetID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * CoordinatedRequirementSetID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CoordinatedRequirementSetID.
    */
  virtual uci::type::CoordinatedRequirementSetID_Type& getCoordinatedRequirementSetID() = 0;

  /** Sets the complex content identified by CoordinatedRequirementSetID to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CoordinatedRequirementSetID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setCoordinatedRequirementSetID(const uci::type::CoordinatedRequirementSetID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AcceptableClassificationLevel.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AcceptableClassificationLevel.
    */
  virtual const uci::type::SecurityInformationType& getAcceptableClassificationLevel() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * AcceptableClassificationLevel.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AcceptableClassificationLevel.
    */
  virtual uci::type::SecurityInformationType& getAcceptableClassificationLevel() = 0;

  /** Sets the complex content identified by AcceptableClassificationLevel to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AcceptableClassificationLevel.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setAcceptableClassificationLevel(const uci::type::SecurityInformationType& value) = 0;

  /** Returns whether the Element identified by AcceptableClassificationLevel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AcceptableClassificationLevel is enabled or not.
    */
  virtual bool hasAcceptableClassificationLevel() const = 0;

  /** Enables the Element identified by AcceptableClassificationLevel.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AcceptableClassificationLevel.
    */
  virtual uci::type::SecurityInformationType& enableAcceptableClassificationLevel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AcceptableClassificationLevel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& clearAcceptableClassificationLevel() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by SpecialInstructions.
    *
    * @return A const reference to the accessor that provides access to the string identified by SpecialInstructions.
    */
  virtual const uci::type::VisibleString1024Type& getSpecialInstructions() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by SpecialInstructions.
    *
    * @return A reference to the accessor that provides access to the string identified by SpecialInstructions.
    */
  virtual uci::type::VisibleString1024Type& getSpecialInstructions() = 0;

  /** Sets the string identified by SpecialInstructions to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by SpecialInstructions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setSpecialInstructions(const uci::type::VisibleString1024Type& value) = 0;

  /** Sets the string identified by SpecialInstructions to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setSpecialInstructions(const std::string& value) = 0;

  /** Sets the string identified by SpecialInstructions to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setSpecialInstructions(const char* value) = 0;

  /** Returns whether the Element identified by SpecialInstructions exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SpecialInstructions is enabled or not.
    */
  virtual bool hasSpecialInstructions() const = 0;

  /** Enables the Element identified by SpecialInstructions.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by SpecialInstructions.
    */
  virtual uci::type::VisibleString1024Type& enableSpecialInstructions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SpecialInstructions.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& clearSpecialInstructions() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * TimingConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      TimingConstraints.
    */
  virtual const uci::type::TimingConstraintsType& getTimingConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TimingConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TimingConstraints.
    */
  virtual uci::type::TimingConstraintsType& getTimingConstraints() = 0;

  /** Sets the complex content identified by TimingConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TimingConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setTimingConstraints(const uci::type::TimingConstraintsType& value) = 0;

  /** Returns whether the Element identified by TimingConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TimingConstraints is enabled or not.
    */
  virtual bool hasTimingConstraints() const = 0;

  /** Enables the Element identified by TimingConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TimingConstraints.
    */
  virtual uci::type::TimingConstraintsType& enableTimingConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TimingConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& clearTimingConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by CoordinationParameter.
    *
    * @return A const reference to the accessor that provides access to the string identified by CoordinationParameter.
    */
  virtual const uci::type::VisibleString256Type& getCoordinationParameter() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by CoordinationParameter.
    *
    * @return A reference to the accessor that provides access to the string identified by CoordinationParameter.
    */
  virtual uci::type::VisibleString256Type& getCoordinationParameter() = 0;

  /** Sets the string identified by CoordinationParameter to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by CoordinationParameter.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setCoordinationParameter(const uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by CoordinationParameter to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setCoordinationParameter(const std::string& value) = 0;

  /** Sets the string identified by CoordinationParameter to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setCoordinationParameter(const char* value) = 0;

  /** Returns whether the Element identified by CoordinationParameter exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CoordinationParameter is enabled or not.
    */
  virtual bool hasCoordinationParameter() const = 0;

  /** Enables the Element identified by CoordinationParameter.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by CoordinationParameter.
    */
  virtual uci::type::VisibleString256Type& enableCoordinationParameter(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CoordinationParameter.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& clearCoordinationParameter() = 0;

  /** Returns a const reference to the bounded list identified by LinkedRequirement.
    *
    * @return A const reference to the bounded list identified by LinkedRequirement.
    */
  virtual const uci::type::CoordinatedRequirementSetMDT::LinkedRequirement& getLinkedRequirement() const = 0;

  /** Returns a reference to the bounded list identified by LinkedRequirement.
    *
    * @return A reference to the bounded list identified by LinkedRequirement.
    */
  virtual uci::type::CoordinatedRequirementSetMDT::LinkedRequirement& getLinkedRequirement() = 0;

  /** Sets the bounded list identified by LinkedRequirement.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setLinkedRequirement(const uci::type::CoordinatedRequirementSetMDT::LinkedRequirement& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by VOIP_Number.
    *
    * @return A const reference to the accessor that provides access to the string identified by VOIP_Number.
    */
  virtual const uci::type::VisibleString256Type& getVOIP_Number() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by VOIP_Number.
    *
    * @return A reference to the accessor that provides access to the string identified by VOIP_Number.
    */
  virtual uci::type::VisibleString256Type& getVOIP_Number() = 0;

  /** Sets the string identified by VOIP_Number to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by VOIP_Number.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setVOIP_Number(const uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by VOIP_Number to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setVOIP_Number(const std::string& value) = 0;

  /** Sets the string identified by VOIP_Number to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setVOIP_Number(const char* value) = 0;

  /** Returns whether the Element identified by VOIP_Number exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VOIP_Number is enabled or not.
    */
  virtual bool hasVOIP_Number() const = 0;

  /** Enables the Element identified by VOIP_Number.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by VOIP_Number.
    */
  virtual uci::type::VisibleString256Type& enableVOIP_Number(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VOIP_Number.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& clearVOIP_Number() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ChatRoom.
    *
    * @return A const reference to the accessor that provides access to the string identified by ChatRoom.
    */
  virtual const uci::type::VisibleString256Type& getChatRoom() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ChatRoom.
    *
    * @return A reference to the accessor that provides access to the string identified by ChatRoom.
    */
  virtual uci::type::VisibleString256Type& getChatRoom() = 0;

  /** Sets the string identified by ChatRoom to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ChatRoom.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setChatRoom(const uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by ChatRoom to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setChatRoom(const std::string& value) = 0;

  /** Sets the string identified by ChatRoom to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setChatRoom(const char* value) = 0;

  /** Returns whether the Element identified by ChatRoom exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ChatRoom is enabled or not.
    */
  virtual bool hasChatRoom() const = 0;

  /** Enables the Element identified by ChatRoom.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ChatRoom.
    */
  virtual uci::type::VisibleString256Type& enableChatRoom(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ChatRoom.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& clearChatRoom() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Frequency.
    *
    * @return The value of the simple primitive data type identified by Frequency.
    */
  virtual uci::type::FrequencyTypeValue getFrequency() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Frequency.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setFrequency(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by Frequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Frequency is enabled or not.
    */
  virtual bool hasFrequency() const = 0;

  /** Clears (disabled) the Element identified by Frequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& clearFrequency() = 0;

  /** Returns a const reference to the bounded list identified by CallSign.
    *
    * @return A const reference to the bounded list identified by CallSign.
    */
  virtual const uci::type::CoordinatedRequirementSetMDT::CallSign& getCallSign() const = 0;

  /** Returns a reference to the bounded list identified by CallSign.
    *
    * @return A reference to the bounded list identified by CallSign.
    */
  virtual uci::type::CoordinatedRequirementSetMDT::CallSign& getCallSign() = 0;

  /** Sets the bounded list identified by CallSign.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CoordinatedRequirementSetMDT& setCallSign(const uci::type::CoordinatedRequirementSetMDT::CallSign& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CoordinatedRequirementSetMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~CoordinatedRequirementSetMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CoordinatedRequirementSetMDT to copy from.
    */
  CoordinatedRequirementSetMDT(const CoordinatedRequirementSetMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CoordinatedRequirementSetMDT to the contents of the
    * CoordinatedRequirementSetMDT on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The CoordinatedRequirementSetMDT on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this CoordinatedRequirementSetMDT.
    * @return A reference to this CoordinatedRequirementSetMDT.
    */
  CoordinatedRequirementSetMDT& operator=(const CoordinatedRequirementSetMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COORDINATEDREQUIREMENTSETMDT_H

