/** @file CommMADL_TopologyEntryType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMMADL_TOPOLOGYENTRYTYPE_H
#define UCI_TYPE_COMMMADL_TOPOLOGYENTRYTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CommMADL_DataRateTypeEnum.h"
#include "CommMADL_FlightGroupType.h"
#include "CommMADL_NodeDataValidityEnum.h"
#include "CommMADL_SecurityKeyType.h"
#include "CommMADL_TimeSourceEnum.h"
#include "MADL_NodeRangeType.h"
#include "Point4D_Type.h"
#include "ShortPositiveType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class CommMADL_TopologyEntryType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CommMADL_TopologyEntryType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommMADL_TopologyEntryType.
    */
  static UCI_EXPORT CommMADL_TopologyEntryType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CommMADL_TopologyEntryType initializing the data accessed by the new
    * CommMADL_TopologyEntryType using the data accessed by the specified CommMADL_TopologyEntryType (cloning).
    *
    * @param accessor The CommMADL_TopologyEntryType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created CommMADL_TopologyEntryType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommMADL_TopologyEntryType.
    */
  static UCI_EXPORT CommMADL_TopologyEntryType& create(const CommMADL_TopologyEntryType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CommMADL_TopologyEntryType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The CommMADL_TopologyEntryType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CommMADL_TopologyEntryType& accessor);

  /** Returns this accessor's type constant, i.e. commMADL_TopologyEntryType.
    *
    * @return This accessor's type constant, i.e. commMADL_TopologyEntryType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commMADL_TopologyEntryType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CommMADL_TopologyEntryType.
    *
    * @return The version that was initialized from the uci:version attribute of CommMADL_TopologyEntryType.
    */
  static std::string getUCITypeVersion() {
    return "001.002.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CommMADL_TopologyEntryType& accessor) = 0;

  /** Identifies the security categories and bandwidths associated with the member. [Occurrences: Minimum: 0; Maximum: 4] */
  typedef uci::base::BoundedList<uci::type::CommMADL_SecurityKeyType, uci::type::accessorType::commMADL_SecurityKeyType> SecurityKey;

  /** Returns the value of the SimplePrimitive data type identified by MemberNodeIdentifier.
    *
    * @return The value of the simple primitive data type identified by MemberNodeIdentifier.
    */
  virtual uci::type::MADL_NodeRangeTypeValue getMemberNodeIdentifier() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MemberNodeIdentifier.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setMemberNodeIdentifier(uci::type::MADL_NodeRangeTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by MemberMADL_UniqueIdentifier.
    *
    * @return The value of the simple primitive data type identified by MemberMADL_UniqueIdentifier.
    */
  virtual uci::type::ShortPositiveTypeValue getMemberMADL_UniqueIdentifier() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MemberMADL_UniqueIdentifier.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setMemberMADL_UniqueIdentifier(uci::type::ShortPositiveTypeValue value) = 0;

  /** Returns whether the Element identified by MemberMADL_UniqueIdentifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MemberMADL_UniqueIdentifier is enabled or not.
    */
  virtual bool hasMemberMADL_UniqueIdentifier() const = 0;

  /** Clears (disabled) the Element identified by MemberMADL_UniqueIdentifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& clearMemberMADL_UniqueIdentifier() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * MemberFlightGroupIdentifier.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      MemberFlightGroupIdentifier.
    */
  virtual const uci::type::CommMADL_FlightGroupType& getMemberFlightGroupIdentifier() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by MemberFlightGroupIdentifier.
    *
    * @return A reference to the accessor that provides access to the string identified by MemberFlightGroupIdentifier.
    */
  virtual uci::type::CommMADL_FlightGroupType& getMemberFlightGroupIdentifier() = 0;

  /** Sets the string identified by MemberFlightGroupIdentifier to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by MemberFlightGroupIdentifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setMemberFlightGroupIdentifier(const uci::type::CommMADL_FlightGroupType& value) = 0;

  /** Sets the string identified by MemberFlightGroupIdentifier to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setMemberFlightGroupIdentifier(const std::string& value) = 0;

  /** Sets the string identified by MemberFlightGroupIdentifier to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setMemberFlightGroupIdentifier(const char* value) = 0;

  /** Returns whether the Element identified by MemberFlightGroupIdentifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MemberFlightGroupIdentifier is enabled or not.
    */
  virtual bool hasMemberFlightGroupIdentifier() const = 0;

  /** Enables the Element identified by MemberFlightGroupIdentifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by MemberFlightGroupIdentifier.
    */
  virtual uci::type::CommMADL_FlightGroupType& enableMemberFlightGroupIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MemberFlightGroupIdentifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& clearMemberFlightGroupIdentifier() = 0;

  /** Returns the value of the SimplePrimitive data type identified by DataCapable.
    *
    * @return The value of the simple primitive data type identified by DataCapable.
    */
  virtual xs::Boolean getDataCapable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DataCapable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setDataCapable(xs::Boolean value) = 0;

  /** Returns whether the Element identified by DataCapable exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DataCapable is enabled or not.
    */
  virtual bool hasDataCapable() const = 0;

  /** Clears (disabled) the Element identified by DataCapable.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& clearDataCapable() = 0;

  /** Returns the value of the SimplePrimitive data type identified by VoiceCapable.
    *
    * @return The value of the simple primitive data type identified by VoiceCapable.
    */
  virtual xs::Boolean getVoiceCapable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by VoiceCapable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setVoiceCapable(xs::Boolean value) = 0;

  /** Returns whether the Element identified by VoiceCapable exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VoiceCapable is enabled or not.
    */
  virtual bool hasVoiceCapable() const = 0;

  /** Clears (disabled) the Element identified by VoiceCapable.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& clearVoiceCapable() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by MemberPosition.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by MemberPosition.
    */
  virtual const uci::type::Point4D_Type& getMemberPosition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MemberPosition.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MemberPosition.
    */
  virtual uci::type::Point4D_Type& getMemberPosition() = 0;

  /** Sets the complex content identified by MemberPosition to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MemberPosition.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setMemberPosition(const uci::type::Point4D_Type& value) = 0;

  /** Returns whether the Element identified by MemberPosition exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MemberPosition is enabled or not.
    */
  virtual bool hasMemberPosition() const = 0;

  /** Enables the Element identified by MemberPosition.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MemberPosition.
    */
  virtual uci::type::Point4D_Type& enableMemberPosition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MemberPosition.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& clearMemberPosition() = 0;

  /** Returns a const reference to the value of the enumeration identified by MemberTimeSource.
    *
    * @return A const reference to the value of the enumeration identified by MemberTimeSource.
    */
  virtual const uci::type::CommMADL_TimeSourceEnum& getMemberTimeSource() const = 0;

  /** Returns a reference to the value of the enumeration identified by MemberTimeSource.
    *
    * @return A reference to the value of the enumeration identified by MemberTimeSource.
    */
  virtual uci::type::CommMADL_TimeSourceEnum& getMemberTimeSource() = 0;

  /** Sets the value of the enumeration identified by MemberTimeSource.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setMemberTimeSource(const uci::type::CommMADL_TimeSourceEnum& value) = 0;

  /** Sets the value of the enumeration identified by MemberTimeSource.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setMemberTimeSource(uci::type::CommMADL_TimeSourceEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by MemberTimeSource exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MemberTimeSource is enabled or not.
    */
  virtual bool hasMemberTimeSource() const = 0;

  /** Enables the Element identified by MemberTimeSource.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by MemberTimeSource.
    */
  virtual uci::type::CommMADL_TimeSourceEnum& enableMemberTimeSource(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MemberTimeSource.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& clearMemberTimeSource() = 0;

  /** Returns the value of the SimplePrimitive data type identified by NetTimeFineSyncAchieved.
    *
    * @return The value of the simple primitive data type identified by NetTimeFineSyncAchieved.
    */
  virtual xs::Boolean getNetTimeFineSyncAchieved() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by NetTimeFineSyncAchieved.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setNetTimeFineSyncAchieved(xs::Boolean value) = 0;

  /** Returns whether the Element identified by NetTimeFineSyncAchieved exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NetTimeFineSyncAchieved is enabled or not.
    */
  virtual bool hasNetTimeFineSyncAchieved() const = 0;

  /** Clears (disabled) the Element identified by NetTimeFineSyncAchieved.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& clearNetTimeFineSyncAchieved() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PathLatencyRelay.
    *
    * @return The value of the simple primitive data type identified by PathLatencyRelay.
    */
  virtual uci::type::MADL_NodeRangeTypeValue getPathLatencyRelay() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PathLatencyRelay.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setPathLatencyRelay(uci::type::MADL_NodeRangeTypeValue value) = 0;

  /** Returns whether the Element identified by PathLatencyRelay exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PathLatencyRelay is enabled or not.
    */
  virtual bool hasPathLatencyRelay() const = 0;

  /** Clears (disabled) the Element identified by PathLatencyRelay.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& clearPathLatencyRelay() = 0;

  /** Returns a const reference to the value of the enumeration identified by ActualTxDataRate.
    *
    * @return A const reference to the value of the enumeration identified by ActualTxDataRate.
    */
  virtual const uci::type::CommMADL_DataRateTypeEnum& getActualTxDataRate() const = 0;

  /** Returns a reference to the value of the enumeration identified by ActualTxDataRate.
    *
    * @return A reference to the value of the enumeration identified by ActualTxDataRate.
    */
  virtual uci::type::CommMADL_DataRateTypeEnum& getActualTxDataRate() = 0;

  /** Sets the value of the enumeration identified by ActualTxDataRate.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setActualTxDataRate(const uci::type::CommMADL_DataRateTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by ActualTxDataRate.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setActualTxDataRate(uci::type::CommMADL_DataRateTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ActualTxDataRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActualTxDataRate is enabled or not.
    */
  virtual bool hasActualTxDataRate() const = 0;

  /** Enables the Element identified by ActualTxDataRate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ActualTxDataRate.
    */
  virtual uci::type::CommMADL_DataRateTypeEnum& enableActualTxDataRate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActualTxDataRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& clearActualTxDataRate() = 0;

  /** Returns the value of the SimplePrimitive data type identified by HigherDataRateCapable.
    *
    * @return The value of the simple primitive data type identified by HigherDataRateCapable.
    */
  virtual xs::Boolean getHigherDataRateCapable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by HigherDataRateCapable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setHigherDataRateCapable(xs::Boolean value) = 0;

  /** Returns whether the Element identified by HigherDataRateCapable exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by HigherDataRateCapable is enabled or not.
    */
  virtual bool hasHigherDataRateCapable() const = 0;

  /** Clears (disabled) the Element identified by HigherDataRateCapable.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& clearHigherDataRateCapable() = 0;

  /** Returns a const reference to the bounded list identified by SecurityKey.
    *
    * @return A const reference to the bounded list identified by SecurityKey.
    */
  virtual const uci::type::CommMADL_TopologyEntryType::SecurityKey& getSecurityKey() const = 0;

  /** Returns a reference to the bounded list identified by SecurityKey.
    *
    * @return A reference to the bounded list identified by SecurityKey.
    */
  virtual uci::type::CommMADL_TopologyEntryType::SecurityKey& getSecurityKey() = 0;

  /** Sets the bounded list identified by SecurityKey.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setSecurityKey(const uci::type::CommMADL_TopologyEntryType::SecurityKey& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by NodeDataValidity.
    *
    * @return A const reference to the value of the enumeration identified by NodeDataValidity.
    */
  virtual const uci::type::CommMADL_NodeDataValidityEnum& getNodeDataValidity() const = 0;

  /** Returns a reference to the value of the enumeration identified by NodeDataValidity.
    *
    * @return A reference to the value of the enumeration identified by NodeDataValidity.
    */
  virtual uci::type::CommMADL_NodeDataValidityEnum& getNodeDataValidity() = 0;

  /** Sets the value of the enumeration identified by NodeDataValidity.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setNodeDataValidity(const uci::type::CommMADL_NodeDataValidityEnum& value) = 0;

  /** Sets the value of the enumeration identified by NodeDataValidity.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_TopologyEntryType& setNodeDataValidity(uci::type::CommMADL_NodeDataValidityEnum::EnumerationItem value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CommMADL_TopologyEntryType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommMADL_TopologyEntryType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommMADL_TopologyEntryType to copy from.
    */
  CommMADL_TopologyEntryType(const CommMADL_TopologyEntryType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CommMADL_TopologyEntryType to the contents of the
    * CommMADL_TopologyEntryType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The CommMADL_TopologyEntryType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this CommMADL_TopologyEntryType.
    * @return A reference to this CommMADL_TopologyEntryType.
    */
  CommMADL_TopologyEntryType& operator=(const CommMADL_TopologyEntryType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMMMADL_TOPOLOGYENTRYTYPE_H

