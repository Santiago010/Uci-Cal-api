/** @file DMPI_DesignationMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_DMPI_DESIGNATIONMDT_H
#define UCI_TYPE_DMPI_DESIGNATIONMDT_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/DMPI_DesignationID_Type.h"
#include "uci/type/DMPI_DesignationParametersType.h"
#include "uci/type/DMPI_PatternID_Type.h"
#include "uci/type/DataRecordBaseType.h"
#include "uci/type/TaskID_Type.h"
#include "uci/type/VisibleString1024Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class DMPI_DesignationMDT : public virtual DataRecordBaseType {
public:

  /** This method constructs a new DMPI_DesignationMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DMPI_DesignationMDT.
    */
  static UCI_EXPORT DMPI_DesignationMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new DMPI_DesignationMDT initializing the data accessed by the new DMPI_DesignationMDT using
    * the data accessed by the specified DMPI_DesignationMDT (cloning).
    *
    * @param accessor The DMPI_DesignationMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created DMPI_DesignationMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DMPI_DesignationMDT.
    */
  static UCI_EXPORT DMPI_DesignationMDT& create(const DMPI_DesignationMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified DMPI_DesignationMDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The DMPI_DesignationMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(DMPI_DesignationMDT& accessor);

  /** Returns this accessor's type constant, i.e. dMPI_DesignationMDT.
    *
    * @return This accessor's type constant, i.e. dMPI_DesignationMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::dMPI_DesignationMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of DMPI_DesignationMDT.
    *
    * @return The version that was initialized from the uci:version attribute of DMPI_DesignationMDT.
    */
  static std::string getUCITypeVersion() {
    return "001.001.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const DMPI_DesignationMDT& accessor) = 0;

  /** Indicates the IDs and any execution-related information of the DMPI for this DMPI_Designation. [Occurrences: Minimum:
    * 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::DMPI_DesignationParametersType, uci::type::accessorType::dMPI_DesignationParametersType> DMPI_Details;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * DMPI_DesignationID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      DMPI_DesignationID.
    */
  virtual const uci::type::DMPI_DesignationID_Type& getDMPI_DesignationID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DMPI_DesignationID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DMPI_DesignationID.
    */
  virtual uci::type::DMPI_DesignationID_Type& getDMPI_DesignationID() = 0;

  /** Sets the complex content identified by DMPI_DesignationID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DMPI_DesignationID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationMDT& setDMPI_DesignationID(const uci::type::DMPI_DesignationID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TaskID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual const uci::type::TaskID_Type& getTaskID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TaskID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual uci::type::TaskID_Type& getTaskID() = 0;

  /** Sets the complex content identified by TaskID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TaskID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationMDT& setTaskID(const uci::type::TaskID_Type& value) = 0;

  /** Returns whether the Element identified by TaskID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TaskID is enabled or not.
    */
  virtual bool hasTaskID() const = 0;

  /** Enables the Element identified by TaskID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual uci::type::TaskID_Type& enableTaskID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TaskID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationMDT& clearTaskID() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Remarks.
    *
    * @return A const reference to the accessor that provides access to the string identified by Remarks.
    */
  virtual const uci::type::VisibleString1024Type& getRemarks() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Remarks.
    *
    * @return A reference to the accessor that provides access to the string identified by Remarks.
    */
  virtual uci::type::VisibleString1024Type& getRemarks() = 0;

  /** Sets the string identified by Remarks to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Remarks.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationMDT& setRemarks(const uci::type::VisibleString1024Type& value) = 0;

  /** Sets the string identified by Remarks to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationMDT& setRemarks(const std::string& value) = 0;

  /** Sets the string identified by Remarks to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationMDT& setRemarks(const char* value) = 0;

  /** Returns whether the Element identified by Remarks exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Remarks is enabled or not.
    */
  virtual bool hasRemarks() const = 0;

  /** Enables the Element identified by Remarks.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Remarks.
    */
  virtual uci::type::VisibleString1024Type& enableRemarks(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Remarks.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationMDT& clearRemarks() = 0;

  /** Returns a const reference to the bounded list identified by DMPI_Details.
    *
    * @return A const reference to the bounded list identified by DMPI_Details.
    */
  virtual const uci::type::DMPI_DesignationMDT::DMPI_Details& getDMPI_Details() const = 0;

  /** Returns a reference to the bounded list identified by DMPI_Details.
    *
    * @return A reference to the bounded list identified by DMPI_Details.
    */
  virtual uci::type::DMPI_DesignationMDT::DMPI_Details& getDMPI_Details() = 0;

  /** Sets the bounded list identified by DMPI_Details.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationMDT& setDMPI_Details(const uci::type::DMPI_DesignationMDT::DMPI_Details& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DMPI_PatternID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DMPI_PatternID.
    */
  virtual const uci::type::DMPI_PatternID_Type& getDMPI_PatternID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DMPI_PatternID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DMPI_PatternID.
    */
  virtual uci::type::DMPI_PatternID_Type& getDMPI_PatternID() = 0;

  /** Sets the complex content identified by DMPI_PatternID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DMPI_PatternID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationMDT& setDMPI_PatternID(const uci::type::DMPI_PatternID_Type& value) = 0;

  /** Returns whether the Element identified by DMPI_PatternID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DMPI_PatternID is enabled or not.
    */
  virtual bool hasDMPI_PatternID() const = 0;

  /** Enables the Element identified by DMPI_PatternID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DMPI_PatternID.
    */
  virtual uci::type::DMPI_PatternID_Type& enableDMPI_PatternID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DMPI_PatternID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_DesignationMDT& clearDMPI_PatternID() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  DMPI_DesignationMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~DMPI_DesignationMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The DMPI_DesignationMDT to copy from.
    */
  DMPI_DesignationMDT(const DMPI_DesignationMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this DMPI_DesignationMDT to the contents of the DMPI_DesignationMDT on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The DMPI_DesignationMDT on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this DMPI_DesignationMDT.
    * @return A reference to this DMPI_DesignationMDT.
    */
  DMPI_DesignationMDT& operator=(const DMPI_DesignationMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_DMPI_DESIGNATIONMDT_H

