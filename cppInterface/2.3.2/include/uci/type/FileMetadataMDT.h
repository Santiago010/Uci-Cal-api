/** @file FileMetadataMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_FILEMETADATAMDT_H
#define UCI_TYPE_FILEMETADATAMDT_H

#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CreationSourceEnum.h"
#include "DataRecordBaseType.h"
#include "DateTimeType.h"
#include "FileMetadataID_Type.h"
#include "FileNameType.h"
#include "FileOutputType.h"
#include "SHA_2_256_HashType.h"
#include "SecurityInformationType.h"
#include "SourceFiltersType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class FileMetadataMDT : public virtual DataRecordBaseType {
public:

  /** This method constructs a new FileMetadataMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed FileMetadataMDT.
    */
  static UCI_EXPORT FileMetadataMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new FileMetadataMDT initializing the data accessed by the new FileMetadataMDT using the data
    * accessed by the specified FileMetadataMDT (cloning).
    *
    * @param accessor The FileMetadataMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created FileMetadataMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed FileMetadataMDT.
    */
  static UCI_EXPORT FileMetadataMDT& create(const FileMetadataMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified FileMetadataMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The FileMetadataMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(FileMetadataMDT& accessor);

  /** Returns this accessor's type constant, i.e. fileMetadataMDT.
    *
    * @return This accessor's type constant, i.e. fileMetadataMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::fileMetadataMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of FileMetadataMDT.
    *
    * @return The version that was initialized from the uci:version attribute of FileMetadataMDT.
    */
  static std::string getUCITypeVersion() {
    return "000.000.001.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const FileMetadataMDT& accessor) = 0;

  /** Indicates the unique file metatdata ID of a file that is being associated with this file. The associated files may
    * have been created together or are used together. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> AssociatedID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FileMetadataID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FileMetadataID.
    */
  virtual const uci::type::FileMetadataID_Type& getFileMetadataID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FileMetadataID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FileMetadataID.
    */
  virtual uci::type::FileMetadataID_Type& getFileMetadataID() = 0;

  /** Sets the complex content identified by FileMetadataID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FileMetadataID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& setFileMetadataID(const uci::type::FileMetadataID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FileDescription.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FileDescription.
    */
  virtual const uci::type::FileOutputType& getFileDescription() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FileDescription.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FileDescription.
    */
  virtual uci::type::FileOutputType& getFileDescription() = 0;

  /** Sets the complex content identified by FileDescription to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FileDescription.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& setFileDescription(const uci::type::FileOutputType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FileName.
    *
    * @return A const reference to the accessor that provides access to the string identified by FileName.
    */
  virtual const uci::type::FileNameType& getFileName() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FileName.
    *
    * @return A reference to the accessor that provides access to the string identified by FileName.
    */
  virtual uci::type::FileNameType& getFileName() = 0;

  /** Sets the string identified by FileName to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FileName.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& setFileName(const uci::type::FileNameType& value) = 0;

  /** Sets the string identified by FileName to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& setFileName(const std::string& value) = 0;

  /** Sets the string identified by FileName to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& setFileName(const char* value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FileSource.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FileSource.
    */
  virtual const uci::type::SourceFiltersType& getFileSource() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FileSource.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FileSource.
    */
  virtual uci::type::SourceFiltersType& getFileSource() = 0;

  /** Sets the complex content identified by FileSource to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FileSource.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& setFileSource(const uci::type::SourceFiltersType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FileConsumer.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FileConsumer.
    */
  virtual const uci::type::SourceFiltersType& getFileConsumer() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FileConsumer.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FileConsumer.
    */
  virtual uci::type::SourceFiltersType& getFileConsumer() = 0;

  /** Sets the complex content identified by FileConsumer to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FileConsumer.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& setFileConsumer(const uci::type::SourceFiltersType& value) = 0;

  /** Returns whether the Element identified by FileConsumer exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileConsumer is enabled or not.
    */
  virtual bool hasFileConsumer() const = 0;

  /** Enables the Element identified by FileConsumer.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by FileConsumer.
    */
  virtual uci::type::SourceFiltersType& enableFileConsumer(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileConsumer.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& clearFileConsumer() = 0;

  /** Returns a const reference to the value of the enumeration identified by CreationSource.
    *
    * @return A const reference to the value of the enumeration identified by CreationSource.
    */
  virtual const uci::type::CreationSourceEnum& getCreationSource() const = 0;

  /** Returns a reference to the value of the enumeration identified by CreationSource.
    *
    * @return A reference to the value of the enumeration identified by CreationSource.
    */
  virtual uci::type::CreationSourceEnum& getCreationSource() = 0;

  /** Sets the value of the enumeration identified by CreationSource.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& setCreationSource(const uci::type::CreationSourceEnum& value) = 0;

  /** Sets the value of the enumeration identified by CreationSource.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& setCreationSource(uci::type::CreationSourceEnum::EnumerationItem value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by UntrustedModification.
    *
    * @return The value of the simple primitive data type identified by UntrustedModification.
    */
  virtual xs::Boolean getUntrustedModification() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by UntrustedModification.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& setUntrustedModification(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Timestamp.
    *
    * @return The value of the simple primitive data type identified by Timestamp.
    */
  virtual uci::type::DateTimeTypeValue getTimestamp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Timestamp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& setTimestamp(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SecurityInformation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SecurityInformation.
    */
  virtual const uci::type::SecurityInformationType& getSecurityInformation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SecurityInformation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SecurityInformation.
    */
  virtual uci::type::SecurityInformationType& getSecurityInformation() = 0;

  /** Sets the complex content identified by SecurityInformation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SecurityInformation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& setSecurityInformation(const uci::type::SecurityInformationType& value) = 0;

  /** Returns the accessor to the SHA_2_Hash field contained in this message fragment.
    *
    * @return The reference to the accessor to the SHA_2_Hash field.
    */
  virtual const uci::type::SHA_2_256_HashType& getSHA_2_Hash() const = 0;

  /** Returns the accessor to the SHA_2_Hash field contained in this message fragment.
    *
    * @return The reference to the accessor to the SHA_2_Hash field.
    */
  virtual uci::type::SHA_2_256_HashType& getSHA_2_Hash() = 0;

  /** Set the contents of the message fragment that this accesssor provides access to to the contents the specified
    * accessor provides access to. A deep copy will be used by this method in setting the contents.
    *
    * @param value The accessor to use to set the contents of the message fragment that this accessor provides access to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& setSHA_2_Hash(const uci::type::SHA_2_256_HashType& value) = 0;

  /** Returns whether this optionalfield SHA_2_Hashis available.
    *
    * @return Whether the optional field is available (true) or not (false).
    */
  virtual bool hasSHA_2_Hash() const = 0;

  /** Enables the optional field such that getSHA_2_Hash will return the optional field and not throw an exception when
    * invoked.
    *
    * @return The reference to the accessor to the SHA_2_Hash field.
    */
  virtual uci::type::SHA_2_256_HashType& enableSHA_2_Hash() = 0;

  /** Clears the optional item marking it as not being set.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& clearSHA_2_Hash() = 0;

  /** Returns a const reference to the bounded list identified by AssociatedID.
    *
    * @return A const reference to the bounded list identified by AssociatedID.
    */
  virtual const uci::type::FileMetadataMDT::AssociatedID& getAssociatedID() const = 0;

  /** Returns a reference to the bounded list identified by AssociatedID.
    *
    * @return A reference to the bounded list identified by AssociatedID.
    */
  virtual uci::type::FileMetadataMDT::AssociatedID& getAssociatedID() = 0;

  /** Sets the bounded list identified by AssociatedID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::FileMetadataMDT& setAssociatedID(const uci::type::FileMetadataMDT::AssociatedID& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  FileMetadataMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~FileMetadataMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The FileMetadataMDT to copy from.
    */
  FileMetadataMDT(const FileMetadataMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this FileMetadataMDT to the contents of the FileMetadataMDT on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The FileMetadataMDT on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this FileMetadataMDT.
    * @return A reference to this FileMetadataMDT.
    */
  FileMetadataMDT& operator=(const FileMetadataMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_FILEMETADATAMDT_H

