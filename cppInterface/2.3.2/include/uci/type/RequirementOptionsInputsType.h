/** @file RequirementOptionsInputsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_REQUIREMENTOPTIONSINPUTSTYPE_H
#define UCI_TYPE_REQUIREMENTOPTIONSINPUTSTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "DateTimeRangeType.h"
#include "MissionEnvironmentConstraintType.h"
#include "OpConstraintWeightingType.h"
#include "PlanningDataSourceEnum.h"
#include "RequirementAllocationCommandType.h"
#include "RequirementAssociationConstraintType.h"
#include "RequirementPlanConstraintType.h"
#include "RequirementPlanningCandidateType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class RequirementOptionsInputsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RequirementOptionsInputsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RequirementOptionsInputsType.
    */
  static UCI_EXPORT RequirementOptionsInputsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RequirementOptionsInputsType initializing the data accessed by the new
    * RequirementOptionsInputsType using the data accessed by the specified RequirementOptionsInputsType (cloning).
    *
    * @param accessor The RequirementOptionsInputsType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created RequirementOptionsInputsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RequirementOptionsInputsType.
    */
  static UCI_EXPORT RequirementOptionsInputsType& create(const RequirementOptionsInputsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RequirementOptionsInputsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The RequirementOptionsInputsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RequirementOptionsInputsType& accessor);

  /** Returns this accessor's type constant, i.e. requirementOptionsInputsType.
    *
    * @return This accessor's type constant, i.e. requirementOptionsInputsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::requirementOptionsInputsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of RequirementOptionsInputsType.
    *
    * @return The version that was initialized from the uci:version attribute of RequirementOptionsInputsType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RequirementOptionsInputsType& accessor) = 0;

  /** Indicates specific Systems to develop Requirement allocation options for along with System-specific planning
    * constraints. A System is a Requirement options "candidate" because it may or may not be suitable for allocation of a
    * Requirement. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RequirementPlanningCandidateType, uci::type::accessorType::requirementPlanningCandidateType> OptionsCandidate;

  /** Indicates a selective override of an item in the mission environment world state to use when developing the
    * Requirement options. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::MissionEnvironmentConstraintType, uci::type::accessorType::missionEnvironmentConstraintType> EnvironmentOverride;

  /** Indicates an operational constraint on Requirement options development. The multiplicity is based on the list of
    * available OpConstraintEnums. [Occurrences: Minimum: 0; Maximum: 15]
    */
  typedef uci::base::BoundedList<uci::type::OpConstraintWeightingType, uci::type::accessorType::opConstraintWeightingType> OpConstraint;

  /** Indicates an association between Requirements that is a constraint on allocation options. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RequirementAssociationConstraintType, uci::type::accessorType::requirementAssociationConstraintType> AssociationConstraint;

  /** Returns a const reference to the bounded list identified by OptionsCandidate.
    *
    * @return A const reference to the bounded list identified by OptionsCandidate.
    */
  virtual const uci::type::RequirementOptionsInputsType::OptionsCandidate& getOptionsCandidate() const = 0;

  /** Returns a reference to the bounded list identified by OptionsCandidate.
    *
    * @return A reference to the bounded list identified by OptionsCandidate.
    */
  virtual uci::type::RequirementOptionsInputsType::OptionsCandidate& getOptionsCandidate() = 0;

  /** Sets the bounded list identified by OptionsCandidate.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementOptionsInputsType& setOptionsCandidate(const uci::type::RequirementOptionsInputsType::OptionsCandidate& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by PlanningDataSource.
    *
    * @return A const reference to the value of the enumeration identified by PlanningDataSource.
    */
  virtual const uci::type::PlanningDataSourceEnum& getPlanningDataSource() const = 0;

  /** Returns a reference to the value of the enumeration identified by PlanningDataSource.
    *
    * @return A reference to the value of the enumeration identified by PlanningDataSource.
    */
  virtual uci::type::PlanningDataSourceEnum& getPlanningDataSource() = 0;

  /** Sets the value of the enumeration identified by PlanningDataSource.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementOptionsInputsType& setPlanningDataSource(const uci::type::PlanningDataSourceEnum& value) = 0;

  /** Sets the value of the enumeration identified by PlanningDataSource.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementOptionsInputsType& setPlanningDataSource(uci::type::PlanningDataSourceEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OptionsWindow.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OptionsWindow.
    */
  virtual const uci::type::DateTimeRangeType& getOptionsWindow() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OptionsWindow.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OptionsWindow.
    */
  virtual uci::type::DateTimeRangeType& getOptionsWindow() = 0;

  /** Sets the complex content identified by OptionsWindow to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OptionsWindow.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementOptionsInputsType& setOptionsWindow(const uci::type::DateTimeRangeType& value) = 0;

  /** Returns whether the Element identified by OptionsWindow exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OptionsWindow is enabled or not.
    */
  virtual bool hasOptionsWindow() const = 0;

  /** Enables the Element identified by OptionsWindow.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OptionsWindow.
    */
  virtual uci::type::DateTimeRangeType& enableOptionsWindow(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OptionsWindow.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementOptionsInputsType& clearOptionsWindow() = 0;

  /** Returns a const reference to the bounded list identified by EnvironmentOverride.
    *
    * @return A const reference to the bounded list identified by EnvironmentOverride.
    */
  virtual const uci::type::RequirementOptionsInputsType::EnvironmentOverride& getEnvironmentOverride() const = 0;

  /** Returns a reference to the bounded list identified by EnvironmentOverride.
    *
    * @return A reference to the bounded list identified by EnvironmentOverride.
    */
  virtual uci::type::RequirementOptionsInputsType::EnvironmentOverride& getEnvironmentOverride() = 0;

  /** Sets the bounded list identified by EnvironmentOverride.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementOptionsInputsType& setEnvironmentOverride(const uci::type::RequirementOptionsInputsType::EnvironmentOverride& value) = 0;

  /** Returns a const reference to the bounded list identified by OpConstraint.
    *
    * @return A const reference to the bounded list identified by OpConstraint.
    */
  virtual const uci::type::RequirementOptionsInputsType::OpConstraint& getOpConstraint() const = 0;

  /** Returns a reference to the bounded list identified by OpConstraint.
    *
    * @return A reference to the bounded list identified by OpConstraint.
    */
  virtual uci::type::RequirementOptionsInputsType::OpConstraint& getOpConstraint() = 0;

  /** Sets the bounded list identified by OpConstraint.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementOptionsInputsType& setOpConstraint(const uci::type::RequirementOptionsInputsType::OpConstraint& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ProposedRequirementPlans.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ProposedRequirementPlans.
    */
  virtual const uci::type::RequirementPlanConstraintType& getProposedRequirementPlans() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ProposedRequirementPlans.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ProposedRequirementPlans.
    */
  virtual uci::type::RequirementPlanConstraintType& getProposedRequirementPlans() = 0;

  /** Sets the complex content identified by ProposedRequirementPlans to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ProposedRequirementPlans.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementOptionsInputsType& setProposedRequirementPlans(const uci::type::RequirementPlanConstraintType& value) = 0;

  /** Returns whether the Element identified by ProposedRequirementPlans exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProposedRequirementPlans is enabled or not.
    */
  virtual bool hasProposedRequirementPlans() const = 0;

  /** Enables the Element identified by ProposedRequirementPlans.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ProposedRequirementPlans.
    */
  virtual uci::type::RequirementPlanConstraintType& enableProposedRequirementPlans(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ProposedRequirementPlans.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementOptionsInputsType& clearProposedRequirementPlans() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ProposedRequirements.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ProposedRequirements.
    */
  virtual const uci::type::RequirementAllocationCommandType& getProposedRequirements() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ProposedRequirements.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ProposedRequirements.
    */
  virtual uci::type::RequirementAllocationCommandType& getProposedRequirements() = 0;

  /** Sets the complex content identified by ProposedRequirements to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ProposedRequirements.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementOptionsInputsType& setProposedRequirements(const uci::type::RequirementAllocationCommandType& value) = 0;

  /** Returns whether the Element identified by ProposedRequirements exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProposedRequirements is enabled or not.
    */
  virtual bool hasProposedRequirements() const = 0;

  /** Enables the Element identified by ProposedRequirements.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ProposedRequirements.
    */
  virtual uci::type::RequirementAllocationCommandType& enableProposedRequirements(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ProposedRequirements.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementOptionsInputsType& clearProposedRequirements() = 0;

  /** Returns a const reference to the bounded list identified by AssociationConstraint.
    *
    * @return A const reference to the bounded list identified by AssociationConstraint.
    */
  virtual const uci::type::RequirementOptionsInputsType::AssociationConstraint& getAssociationConstraint() const = 0;

  /** Returns a reference to the bounded list identified by AssociationConstraint.
    *
    * @return A reference to the bounded list identified by AssociationConstraint.
    */
  virtual uci::type::RequirementOptionsInputsType::AssociationConstraint& getAssociationConstraint() = 0;

  /** Sets the bounded list identified by AssociationConstraint.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementOptionsInputsType& setAssociationConstraint(const uci::type::RequirementOptionsInputsType::AssociationConstraint& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RequirementOptionsInputsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~RequirementOptionsInputsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RequirementOptionsInputsType to copy from.
    */
  RequirementOptionsInputsType(const RequirementOptionsInputsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RequirementOptionsInputsType to the contents of the
    * RequirementOptionsInputsType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The RequirementOptionsInputsType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this RequirementOptionsInputsType.
    * @return A reference to this RequirementOptionsInputsType.
    */
  RequirementOptionsInputsType& operator=(const RequirementOptionsInputsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_REQUIREMENTOPTIONSINPUTSTYPE_H

