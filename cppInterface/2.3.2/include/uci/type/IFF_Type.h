/** @file IFF_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_IFF_TYPE_H
#define UCI_TYPE_IFF_TYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "IFF_Mode1Type.h"
#include "IFF_Mode4Type.h"
#include "IFF_Mode5Type.h"
#include "IFF_ModeS_Type.h"
#include "IFF_OctalModeType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class IFF_Type : public virtual uci::base::Accessor {
public:

  /** This method constructs a new IFF_Type.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IFF_Type.
    */
  static UCI_EXPORT IFF_Type& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new IFF_Type initializing the data accessed by the new IFF_Type using the data accessed by
    * the specified IFF_Type (cloning).
    *
    * @param accessor The IFF_Type that provides access to the data that is to be used to initialize the data accessed by
    *      the new created IFF_Type.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IFF_Type.
    */
  static UCI_EXPORT IFF_Type& create(const IFF_Type& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified IFF_Type. Use of the specified accessor after it has been destroyed will result in
    * undefined behavior.
    *
    * @param accessor The IFF_Type that is to be destroyed.
    */
  static UCI_EXPORT void destroy(IFF_Type& accessor);

  /** Returns this accessor's type constant, i.e. iFF_Type.
    *
    * @return This accessor's type constant, i.e. iFF_Type.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::iFF_Type;
  }

  /** Returns the version that was initialized from the uci:version attribute of IFF_Type.
    *
    * @return The version that was initialized from the uci:version attribute of IFF_Type.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const IFF_Type& accessor) = 0;

  /** This element represents Mode 3A beacon reply information. See MIL-STD-6016 for detailed definition. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::IFF_OctalModeType, uci::type::accessorType::iFF_OctalModeType> Mode3A;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Mode1.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Mode1.
    */
  virtual const uci::type::IFF_Mode1Type& getMode1() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Mode1.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Mode1.
    */
  virtual uci::type::IFF_Mode1Type& getMode1() = 0;

  /** Sets the complex content identified by Mode1 to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Mode1.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_Type& setMode1(const uci::type::IFF_Mode1Type& value) = 0;

  /** Returns whether the Element identified by Mode1 exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mode1 is enabled or not.
    */
  virtual bool hasMode1() const = 0;

  /** Enables the Element identified by Mode1.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Mode1.
    */
  virtual uci::type::IFF_Mode1Type& enableMode1(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Mode1.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_Type& clearMode1() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Mode2.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Mode2.
    */
  virtual const uci::type::IFF_OctalModeType& getMode2() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Mode2.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Mode2.
    */
  virtual uci::type::IFF_OctalModeType& getMode2() = 0;

  /** Sets the complex content identified by Mode2 to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Mode2.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_Type& setMode2(const uci::type::IFF_OctalModeType& value) = 0;

  /** Returns whether the Element identified by Mode2 exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mode2 is enabled or not.
    */
  virtual bool hasMode2() const = 0;

  /** Enables the Element identified by Mode2.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Mode2.
    */
  virtual uci::type::IFF_OctalModeType& enableMode2(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Mode2.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_Type& clearMode2() = 0;

  /** Returns a const reference to the bounded list identified by Mode3A.
    *
    * @return A const reference to the bounded list identified by Mode3A.
    */
  virtual const uci::type::IFF_Type::Mode3A& getMode3A() const = 0;

  /** Returns a reference to the bounded list identified by Mode3A.
    *
    * @return A reference to the bounded list identified by Mode3A.
    */
  virtual uci::type::IFF_Type::Mode3A& getMode3A() = 0;

  /** Sets the bounded list identified by Mode3A.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_Type& setMode3A(const uci::type::IFF_Type::Mode3A& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Mode3LC.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Mode3LC.
    */
  virtual const uci::type::IFF_OctalModeType& getMode3LC() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Mode3LC.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Mode3LC.
    */
  virtual uci::type::IFF_OctalModeType& getMode3LC() = 0;

  /** Sets the complex content identified by Mode3LC to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Mode3LC.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_Type& setMode3LC(const uci::type::IFF_OctalModeType& value) = 0;

  /** Returns whether the Element identified by Mode3LC exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mode3LC is enabled or not.
    */
  virtual bool hasMode3LC() const = 0;

  /** Enables the Element identified by Mode3LC.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Mode3LC.
    */
  virtual uci::type::IFF_OctalModeType& enableMode3LC(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Mode3LC.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_Type& clearMode3LC() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Mode4.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Mode4.
    */
  virtual const uci::type::IFF_Mode4Type& getMode4() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Mode4.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Mode4.
    */
  virtual uci::type::IFF_Mode4Type& getMode4() = 0;

  /** Sets the complex content identified by Mode4 to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Mode4.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_Type& setMode4(const uci::type::IFF_Mode4Type& value) = 0;

  /** Returns whether the Element identified by Mode4 exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mode4 is enabled or not.
    */
  virtual bool hasMode4() const = 0;

  /** Enables the Element identified by Mode4.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Mode4.
    */
  virtual uci::type::IFF_Mode4Type& enableMode4(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Mode4.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_Type& clearMode4() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Mode5.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Mode5.
    */
  virtual const uci::type::IFF_Mode5Type& getMode5() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Mode5.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Mode5.
    */
  virtual uci::type::IFF_Mode5Type& getMode5() = 0;

  /** Sets the complex content identified by Mode5 to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Mode5.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_Type& setMode5(const uci::type::IFF_Mode5Type& value) = 0;

  /** Returns whether the Element identified by Mode5 exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mode5 is enabled or not.
    */
  virtual bool hasMode5() const = 0;

  /** Enables the Element identified by Mode5.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Mode5.
    */
  virtual uci::type::IFF_Mode5Type& enableMode5(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Mode5.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_Type& clearMode5() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ModeS.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ModeS.
    */
  virtual const uci::type::IFF_ModeS_Type& getModeS() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ModeS.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ModeS.
    */
  virtual uci::type::IFF_ModeS_Type& getModeS() = 0;

  /** Sets the complex content identified by ModeS to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ModeS.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_Type& setModeS(const uci::type::IFF_ModeS_Type& value) = 0;

  /** Returns whether the Element identified by ModeS exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ModeS is enabled or not.
    */
  virtual bool hasModeS() const = 0;

  /** Enables the Element identified by ModeS.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ModeS.
    */
  virtual uci::type::IFF_ModeS_Type& enableModeS(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ModeS.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_Type& clearModeS() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ModeC.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ModeC.
    */
  virtual const uci::type::IFF_OctalModeType& getModeC() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ModeC.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ModeC.
    */
  virtual uci::type::IFF_OctalModeType& getModeC() = 0;

  /** Sets the complex content identified by ModeC to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ModeC.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_Type& setModeC(const uci::type::IFF_OctalModeType& value) = 0;

  /** Returns whether the Element identified by ModeC exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ModeC is enabled or not.
    */
  virtual bool hasModeC() const = 0;

  /** Enables the Element identified by ModeC.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ModeC.
    */
  virtual uci::type::IFF_OctalModeType& enableModeC(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ModeC.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_Type& clearModeC() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  IFF_Type() {
  }

  /** The destructor [only available to derived classes]. */
  ~IFF_Type() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The IFF_Type to copy from.
    */
  IFF_Type(const IFF_Type& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this IFF_Type to the contents of the IFF_Type on the right hand side
    * (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The IFF_Type on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this IFF_Type.
    * @return A reference to this IFF_Type.
    */
  IFF_Type& operator=(const IFF_Type& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_IFF_TYPE_H

