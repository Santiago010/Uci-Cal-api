/** @file ACFTB_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ACFTB_TYPE_H
#define UCI_TYPE_ACFTB_TYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "AlphanumericSpaceString11OnlyType.h"
#include "AlphanumericSpaceString7OnlyType.h"
#include "NumericSpaceString13OnlyType.h"
#include "NumericSpaceString2OnlyType.h"
#include "NumericSpaceString6OnlyType.h"
#include "NumericSpaceString7OnlyType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ACFTB_Type : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ACFTB_Type.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ACFTB_Type.
    */
  static UCI_EXPORT ACFTB_Type& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ACFTB_Type initializing the data accessed by the new ACFTB_Type using the data accessed
    * by the specified ACFTB_Type (cloning).
    *
    * @param accessor The ACFTB_Type that provides access to the data that is to be used to initialize the data accessed by
    *      the new created ACFTB_Type.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ACFTB_Type.
    */
  static UCI_EXPORT ACFTB_Type& create(const ACFTB_Type& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ACFTB_Type. Use of the specified accessor after it has been destroyed will result
    * in undefined behavior.
    *
    * @param accessor The ACFTB_Type that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ACFTB_Type& accessor);

  /** Returns this accessor's type constant, i.e. aCFTB_Type.
    *
    * @return This accessor's type constant, i.e. aCFTB_Type.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::aCFTB_Type;
  }

  /** Returns the version that was initialized from the uci:version attribute of ACFTB_Type.
    *
    * @return The version that was initialized from the uci:version attribute of ACFTB_Type.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ACFTB_Type& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by AC_MSN_Identifier.
    *
    * @return A const reference to the accessor that provides access to the string identified by AC_MSN_Identifier.
    */
  virtual const uci::type::AlphanumericSpaceString11OnlyType& getAC_MSN_Identifier() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by AC_MSN_Identifier.
    *
    * @return A reference to the accessor that provides access to the string identified by AC_MSN_Identifier.
    */
  virtual uci::type::AlphanumericSpaceString11OnlyType& getAC_MSN_Identifier() = 0;

  /** Sets the string identified by AC_MSN_Identifier to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by AC_MSN_Identifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setAC_MSN_Identifier(const uci::type::AlphanumericSpaceString11OnlyType& value) = 0;

  /** Sets the string identified by AC_MSN_Identifier to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setAC_MSN_Identifier(const std::string& value) = 0;

  /** Sets the string identified by AC_MSN_Identifier to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setAC_MSN_Identifier(const char* value) = 0;

  /** Returns whether the Element identified by AC_MSN_Identifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AC_MSN_Identifier is enabled or not.
    */
  virtual bool hasAC_MSN_Identifier() const = 0;

  /** Enables the Element identified by AC_MSN_Identifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by AC_MSN_Identifier.
    */
  virtual uci::type::AlphanumericSpaceString11OnlyType& enableAC_MSN_Identifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AC_MSN_Identifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& clearAC_MSN_Identifier() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by AC_TAIL_NO.
    *
    * @return A const reference to the accessor that provides access to the string identified by AC_TAIL_NO.
    */
  virtual const uci::type::AlphanumericSpaceString11OnlyType& getAC_TAIL_NO() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by AC_TAIL_NO.
    *
    * @return A reference to the accessor that provides access to the string identified by AC_TAIL_NO.
    */
  virtual uci::type::AlphanumericSpaceString11OnlyType& getAC_TAIL_NO() = 0;

  /** Sets the string identified by AC_TAIL_NO to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by AC_TAIL_NO.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setAC_TAIL_NO(const uci::type::AlphanumericSpaceString11OnlyType& value) = 0;

  /** Sets the string identified by AC_TAIL_NO to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setAC_TAIL_NO(const std::string& value) = 0;

  /** Sets the string identified by AC_TAIL_NO to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setAC_TAIL_NO(const char* value) = 0;

  /** Returns whether the Element identified by AC_TAIL_NO exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AC_TAIL_NO is enabled or not.
    */
  virtual bool hasAC_TAIL_NO() const = 0;

  /** Enables the Element identified by AC_TAIL_NO.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by AC_TAIL_NO.
    */
  virtual uci::type::AlphanumericSpaceString11OnlyType& enableAC_TAIL_NO(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AC_TAIL_NO.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& clearAC_TAIL_NO() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by AC_TO.
    *
    * @return A const reference to the accessor that provides access to the string identified by AC_TO.
    */
  virtual const uci::type::NumericSpaceString13OnlyType& getAC_TO() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by AC_TO.
    *
    * @return A reference to the accessor that provides access to the string identified by AC_TO.
    */
  virtual uci::type::NumericSpaceString13OnlyType& getAC_TO() = 0;

  /** Sets the string identified by AC_TO to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by AC_TO.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setAC_TO(const uci::type::NumericSpaceString13OnlyType& value) = 0;

  /** Sets the string identified by AC_TO to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setAC_TO(const std::string& value) = 0;

  /** Sets the string identified by AC_TO to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setAC_TO(const char* value) = 0;

  /** Returns whether the Element identified by AC_TO exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AC_TO is enabled or not.
    */
  virtual bool hasAC_TO() const = 0;

  /** Enables the Element identified by AC_TO.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by AC_TO.
    */
  virtual uci::type::NumericSpaceString13OnlyType& enableAC_TO(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AC_TO.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& clearAC_TO() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by SENSOR_Identifier.
    *
    * @return A const reference to the accessor that provides access to the string identified by SENSOR_Identifier.
    */
  virtual const uci::type::AlphanumericSpaceString7OnlyType& getSENSOR_Identifier() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by SENSOR_Identifier.
    *
    * @return A reference to the accessor that provides access to the string identified by SENSOR_Identifier.
    */
  virtual uci::type::AlphanumericSpaceString7OnlyType& getSENSOR_Identifier() = 0;

  /** Sets the string identified by SENSOR_Identifier to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by SENSOR_Identifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setSENSOR_Identifier(const uci::type::AlphanumericSpaceString7OnlyType& value) = 0;

  /** Sets the string identified by SENSOR_Identifier to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setSENSOR_Identifier(const std::string& value) = 0;

  /** Sets the string identified by SENSOR_Identifier to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setSENSOR_Identifier(const char* value) = 0;

  /** Returns whether the Element identified by SENSOR_Identifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SENSOR_Identifier is enabled or not.
    */
  virtual bool hasSENSOR_Identifier() const = 0;

  /** Enables the Element identified by SENSOR_Identifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by SENSOR_Identifier.
    */
  virtual uci::type::AlphanumericSpaceString7OnlyType& enableSENSOR_Identifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SENSOR_Identifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& clearSENSOR_Identifier() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by SCENE_SOURCE.
    *
    * @return A const reference to the accessor that provides access to the string identified by SCENE_SOURCE.
    */
  virtual const uci::type::NumericSpaceString2OnlyType& getSCENE_SOURCE() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by SCENE_SOURCE.
    *
    * @return A reference to the accessor that provides access to the string identified by SCENE_SOURCE.
    */
  virtual uci::type::NumericSpaceString2OnlyType& getSCENE_SOURCE() = 0;

  /** Sets the string identified by SCENE_SOURCE to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by SCENE_SOURCE.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setSCENE_SOURCE(const uci::type::NumericSpaceString2OnlyType& value) = 0;

  /** Sets the string identified by SCENE_SOURCE to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setSCENE_SOURCE(const std::string& value) = 0;

  /** Sets the string identified by SCENE_SOURCE to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setSCENE_SOURCE(const char* value) = 0;

  /** Returns whether the Element identified by SCENE_SOURCE exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SCENE_SOURCE is enabled or not.
    */
  virtual bool hasSCENE_SOURCE() const = 0;

  /** Enables the Element identified by SCENE_SOURCE.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by SCENE_SOURCE.
    */
  virtual uci::type::NumericSpaceString2OnlyType& enableSCENE_SOURCE(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SCENE_SOURCE.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& clearSCENE_SOURCE() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by SCNUM.
    *
    * @return A const reference to the accessor that provides access to the string identified by SCNUM.
    */
  virtual const uci::type::NumericSpaceString7OnlyType& getSCNUM() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by SCNUM.
    *
    * @return A reference to the accessor that provides access to the string identified by SCNUM.
    */
  virtual uci::type::NumericSpaceString7OnlyType& getSCNUM() = 0;

  /** Sets the string identified by SCNUM to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by SCNUM.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setSCNUM(const uci::type::NumericSpaceString7OnlyType& value) = 0;

  /** Sets the string identified by SCNUM to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setSCNUM(const std::string& value) = 0;

  /** Sets the string identified by SCNUM to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setSCNUM(const char* value) = 0;

  /** Returns whether the Element identified by SCNUM exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SCNUM is enabled or not.
    */
  virtual bool hasSCNUM() const = 0;

  /** Enables the Element identified by SCNUM.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by SCNUM.
    */
  virtual uci::type::NumericSpaceString7OnlyType& enableSCNUM(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SCNUM.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& clearSCNUM() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by IMHOSTNO.
    *
    * @return A const reference to the accessor that provides access to the string identified by IMHOSTNO.
    */
  virtual const uci::type::NumericSpaceString7OnlyType& getIMHOSTNO() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by IMHOSTNO.
    *
    * @return A reference to the accessor that provides access to the string identified by IMHOSTNO.
    */
  virtual uci::type::NumericSpaceString7OnlyType& getIMHOSTNO() = 0;

  /** Sets the string identified by IMHOSTNO to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by IMHOSTNO.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setIMHOSTNO(const uci::type::NumericSpaceString7OnlyType& value) = 0;

  /** Sets the string identified by IMHOSTNO to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setIMHOSTNO(const std::string& value) = 0;

  /** Sets the string identified by IMHOSTNO to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setIMHOSTNO(const char* value) = 0;

  /** Returns whether the Element identified by IMHOSTNO exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IMHOSTNO is enabled or not.
    */
  virtual bool hasIMHOSTNO() const = 0;

  /** Enables the Element identified by IMHOSTNO.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by IMHOSTNO.
    */
  virtual uci::type::NumericSpaceString7OnlyType& enableIMHOSTNO(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by IMHOSTNO.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& clearIMHOSTNO() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by IMREQ_Identifier.
    *
    * @return A const reference to the accessor that provides access to the string identified by IMREQ_Identifier.
    */
  virtual const uci::type::NumericSpaceString6OnlyType& getIMREQ_Identifier() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by IMREQ_Identifier.
    *
    * @return A reference to the accessor that provides access to the string identified by IMREQ_Identifier.
    */
  virtual uci::type::NumericSpaceString6OnlyType& getIMREQ_Identifier() = 0;

  /** Sets the string identified by IMREQ_Identifier to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by IMREQ_Identifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setIMREQ_Identifier(const uci::type::NumericSpaceString6OnlyType& value) = 0;

  /** Sets the string identified by IMREQ_Identifier to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setIMREQ_Identifier(const std::string& value) = 0;

  /** Sets the string identified by IMREQ_Identifier to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& setIMREQ_Identifier(const char* value) = 0;

  /** Returns whether the Element identified by IMREQ_Identifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IMREQ_Identifier is enabled or not.
    */
  virtual bool hasIMREQ_Identifier() const = 0;

  /** Enables the Element identified by IMREQ_Identifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by IMREQ_Identifier.
    */
  virtual uci::type::NumericSpaceString6OnlyType& enableIMREQ_Identifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by IMREQ_Identifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ACFTB_Type& clearIMREQ_Identifier() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ACFTB_Type() {
  }

  /** The destructor [only available to derived classes]. */
  ~ACFTB_Type() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ACFTB_Type to copy from.
    */
  ACFTB_Type(const ACFTB_Type& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ACFTB_Type to the contents of the ACFTB_Type on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ACFTB_Type on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this ACFTB_Type.
    * @return A reference to this ACFTB_Type.
    */
  ACFTB_Type& operator=(const ACFTB_Type& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ACFTB_TYPE_H

