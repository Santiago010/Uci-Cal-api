/** @file EstimationResultType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ESTIMATIONRESULTTYPE_H
#define UCI_TYPE_ESTIMATIONRESULTTYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "ActivityPlanExecutionStatusMDT.h"
#include "DateTimeType.h"
#include "EffectPlanExecutionStatusMDT.h"
#include "MissionPlanExecutionStatusMDT.h"
#include "NavigationReportMDT.h"
#include "OrbitActivityPlanExecutionStatusMDT.h"
#include "OrbitPlanExecutionStatusMDT.h"
#include "PackageStatusMDT.h"
#include "PositionReportMDT.h"
#include "RouteActivityPlanExecutionStatusMDT.h"
#include "RoutePlanExecutionStatusMDT.h"
#include "SystemOrbitReportMDT.h"
#include "SystemOrbitalPositionReportMDT.h"
#include "SystemStatusMDT.h"
#include "TaskPlanExecutionStatusMDT.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class EstimationResultType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new EstimationResultType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EstimationResultType.
    */
  static UCI_EXPORT EstimationResultType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new EstimationResultType initializing the data accessed by the new EstimationResultType
    * using the data accessed by the specified EstimationResultType (cloning).
    *
    * @param accessor The EstimationResultType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created EstimationResultType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EstimationResultType.
    */
  static UCI_EXPORT EstimationResultType& create(const EstimationResultType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified EstimationResultType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The EstimationResultType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(EstimationResultType& accessor);

  /** Returns this accessor's type constant, i.e. estimationResultType.
    *
    * @return This accessor's type constant, i.e. estimationResultType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::estimationResultType;
  }

  /** Returns the version that was initialized from the uci:version attribute of EstimationResultType.
    *
    * @return The version that was initialized from the uci:version attribute of EstimationResultType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const EstimationResultType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * MissionPlanExecutionStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      MissionPlanExecutionStatus.
    */
  virtual const uci::type::MissionPlanExecutionStatusMDT& getMissionPlanExecutionStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * MissionPlanExecutionStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      MissionPlanExecutionStatus.
    */
  virtual uci::type::MissionPlanExecutionStatusMDT& getMissionPlanExecutionStatus() = 0;

  /** Sets the complex content identified by MissionPlanExecutionStatus to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MissionPlanExecutionStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& setMissionPlanExecutionStatus(const uci::type::MissionPlanExecutionStatusMDT& value) = 0;

  /** Returns whether the Element identified by MissionPlanExecutionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MissionPlanExecutionStatus is enabled or not.
    */
  virtual bool hasMissionPlanExecutionStatus() const = 0;

  /** Enables the Element identified by MissionPlanExecutionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      MissionPlanExecutionStatus.
    */
  virtual uci::type::MissionPlanExecutionStatusMDT& enableMissionPlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MissionPlanExecutionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& clearMissionPlanExecutionStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * TaskPlanExecutionStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      TaskPlanExecutionStatus.
    */
  virtual const uci::type::TaskPlanExecutionStatusMDT& getTaskPlanExecutionStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * TaskPlanExecutionStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      TaskPlanExecutionStatus.
    */
  virtual uci::type::TaskPlanExecutionStatusMDT& getTaskPlanExecutionStatus() = 0;

  /** Sets the complex content identified by TaskPlanExecutionStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TaskPlanExecutionStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& setTaskPlanExecutionStatus(const uci::type::TaskPlanExecutionStatusMDT& value) = 0;

  /** Returns whether the Element identified by TaskPlanExecutionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TaskPlanExecutionStatus is enabled or not.
    */
  virtual bool hasTaskPlanExecutionStatus() const = 0;

  /** Enables the Element identified by TaskPlanExecutionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      TaskPlanExecutionStatus.
    */
  virtual uci::type::TaskPlanExecutionStatusMDT& enableTaskPlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TaskPlanExecutionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& clearTaskPlanExecutionStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RoutePlanExecutionStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RoutePlanExecutionStatus.
    */
  virtual const uci::type::RoutePlanExecutionStatusMDT& getRoutePlanExecutionStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * RoutePlanExecutionStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      RoutePlanExecutionStatus.
    */
  virtual uci::type::RoutePlanExecutionStatusMDT& getRoutePlanExecutionStatus() = 0;

  /** Sets the complex content identified by RoutePlanExecutionStatus to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RoutePlanExecutionStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& setRoutePlanExecutionStatus(const uci::type::RoutePlanExecutionStatusMDT& value) = 0;

  /** Returns whether the Element identified by RoutePlanExecutionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RoutePlanExecutionStatus is enabled or not.
    */
  virtual bool hasRoutePlanExecutionStatus() const = 0;

  /** Enables the Element identified by RoutePlanExecutionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      RoutePlanExecutionStatus.
    */
  virtual uci::type::RoutePlanExecutionStatusMDT& enableRoutePlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RoutePlanExecutionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& clearRoutePlanExecutionStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RouteActivityPlanExecutionStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RouteActivityPlanExecutionStatus.
    */
  virtual const uci::type::RouteActivityPlanExecutionStatusMDT& getRouteActivityPlanExecutionStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * RouteActivityPlanExecutionStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      RouteActivityPlanExecutionStatus.
    */
  virtual uci::type::RouteActivityPlanExecutionStatusMDT& getRouteActivityPlanExecutionStatus() = 0;

  /** Sets the complex content identified by RouteActivityPlanExecutionStatus to the contents of the complex content
    * accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RouteActivityPlanExecutionStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& setRouteActivityPlanExecutionStatus(const uci::type::RouteActivityPlanExecutionStatusMDT& value) = 0;

  /** Returns whether the Element identified by RouteActivityPlanExecutionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RouteActivityPlanExecutionStatus is enabled or not.
    */
  virtual bool hasRouteActivityPlanExecutionStatus() const = 0;

  /** Enables the Element identified by RouteActivityPlanExecutionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      RouteActivityPlanExecutionStatus.
    */
  virtual uci::type::RouteActivityPlanExecutionStatusMDT& enableRouteActivityPlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RouteActivityPlanExecutionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& clearRouteActivityPlanExecutionStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrbitPlanExecutionStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrbitPlanExecutionStatus.
    */
  virtual const uci::type::OrbitPlanExecutionStatusMDT& getOrbitPlanExecutionStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * OrbitPlanExecutionStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OrbitPlanExecutionStatus.
    */
  virtual uci::type::OrbitPlanExecutionStatusMDT& getOrbitPlanExecutionStatus() = 0;

  /** Sets the complex content identified by OrbitPlanExecutionStatus to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitPlanExecutionStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& setOrbitPlanExecutionStatus(const uci::type::OrbitPlanExecutionStatusMDT& value) = 0;

  /** Returns whether the Element identified by OrbitPlanExecutionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrbitPlanExecutionStatus is enabled or not.
    */
  virtual bool hasOrbitPlanExecutionStatus() const = 0;

  /** Enables the Element identified by OrbitPlanExecutionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OrbitPlanExecutionStatus.
    */
  virtual uci::type::OrbitPlanExecutionStatusMDT& enableOrbitPlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrbitPlanExecutionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& clearOrbitPlanExecutionStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrbitActivityPlanExecutionStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrbitActivityPlanExecutionStatus.
    */
  virtual const uci::type::OrbitActivityPlanExecutionStatusMDT& getOrbitActivityPlanExecutionStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * OrbitActivityPlanExecutionStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OrbitActivityPlanExecutionStatus.
    */
  virtual uci::type::OrbitActivityPlanExecutionStatusMDT& getOrbitActivityPlanExecutionStatus() = 0;

  /** Sets the complex content identified by OrbitActivityPlanExecutionStatus to the contents of the complex content
    * accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitActivityPlanExecutionStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& setOrbitActivityPlanExecutionStatus(const uci::type::OrbitActivityPlanExecutionStatusMDT& value) = 0;

  /** Returns whether the Element identified by OrbitActivityPlanExecutionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrbitActivityPlanExecutionStatus is enabled or not.
    */
  virtual bool hasOrbitActivityPlanExecutionStatus() const = 0;

  /** Enables the Element identified by OrbitActivityPlanExecutionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OrbitActivityPlanExecutionStatus.
    */
  virtual uci::type::OrbitActivityPlanExecutionStatusMDT& enableOrbitActivityPlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrbitActivityPlanExecutionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& clearOrbitActivityPlanExecutionStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ActivityPlanExecutionStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ActivityPlanExecutionStatus.
    */
  virtual const uci::type::ActivityPlanExecutionStatusMDT& getActivityPlanExecutionStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ActivityPlanExecutionStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ActivityPlanExecutionStatus.
    */
  virtual uci::type::ActivityPlanExecutionStatusMDT& getActivityPlanExecutionStatus() = 0;

  /** Sets the complex content identified by ActivityPlanExecutionStatus to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivityPlanExecutionStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& setActivityPlanExecutionStatus(const uci::type::ActivityPlanExecutionStatusMDT& value) = 0;

  /** Returns whether the Element identified by ActivityPlanExecutionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActivityPlanExecutionStatus is enabled or not.
    */
  virtual bool hasActivityPlanExecutionStatus() const = 0;

  /** Enables the Element identified by ActivityPlanExecutionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ActivityPlanExecutionStatus.
    */
  virtual uci::type::ActivityPlanExecutionStatusMDT& enableActivityPlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActivityPlanExecutionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& clearActivityPlanExecutionStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * EffectPlanExecutionStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      EffectPlanExecutionStatus.
    */
  virtual const uci::type::EffectPlanExecutionStatusMDT& getEffectPlanExecutionStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * EffectPlanExecutionStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      EffectPlanExecutionStatus.
    */
  virtual uci::type::EffectPlanExecutionStatusMDT& getEffectPlanExecutionStatus() = 0;

  /** Sets the complex content identified by EffectPlanExecutionStatus to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EffectPlanExecutionStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& setEffectPlanExecutionStatus(const uci::type::EffectPlanExecutionStatusMDT& value) = 0;

  /** Returns whether the Element identified by EffectPlanExecutionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EffectPlanExecutionStatus is enabled or not.
    */
  virtual bool hasEffectPlanExecutionStatus() const = 0;

  /** Enables the Element identified by EffectPlanExecutionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      EffectPlanExecutionStatus.
    */
  virtual uci::type::EffectPlanExecutionStatusMDT& enableEffectPlanExecutionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EffectPlanExecutionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& clearEffectPlanExecutionStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by NavigationReport.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by NavigationReport.
    */
  virtual const uci::type::NavigationReportMDT& getNavigationReport() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by NavigationReport.
    *
    * @return A reference to the accessor that provides access to the complex content identified by NavigationReport.
    */
  virtual uci::type::NavigationReportMDT& getNavigationReport() = 0;

  /** Sets the complex content identified by NavigationReport to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by NavigationReport.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& setNavigationReport(const uci::type::NavigationReportMDT& value) = 0;

  /** Returns whether the Element identified by NavigationReport exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NavigationReport is enabled or not.
    */
  virtual bool hasNavigationReport() const = 0;

  /** Enables the Element identified by NavigationReport.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by NavigationReport.
    */
  virtual uci::type::NavigationReportMDT& enableNavigationReport(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by NavigationReport.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& clearNavigationReport() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PositionReport.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PositionReport.
    */
  virtual const uci::type::PositionReportMDT& getPositionReport() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PositionReport.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PositionReport.
    */
  virtual uci::type::PositionReportMDT& getPositionReport() = 0;

  /** Sets the complex content identified by PositionReport to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PositionReport.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& setPositionReport(const uci::type::PositionReportMDT& value) = 0;

  /** Returns whether the Element identified by PositionReport exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PositionReport is enabled or not.
    */
  virtual bool hasPositionReport() const = 0;

  /** Enables the Element identified by PositionReport.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PositionReport.
    */
  virtual uci::type::PositionReportMDT& enablePositionReport(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PositionReport.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& clearPositionReport() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SystemOrbitReport.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SystemOrbitReport.
    */
  virtual const uci::type::SystemOrbitReportMDT& getSystemOrbitReport() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemOrbitReport.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemOrbitReport.
    */
  virtual uci::type::SystemOrbitReportMDT& getSystemOrbitReport() = 0;

  /** Sets the complex content identified by SystemOrbitReport to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemOrbitReport.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& setSystemOrbitReport(const uci::type::SystemOrbitReportMDT& value) = 0;

  /** Returns whether the Element identified by SystemOrbitReport exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SystemOrbitReport is enabled or not.
    */
  virtual bool hasSystemOrbitReport() const = 0;

  /** Enables the Element identified by SystemOrbitReport.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SystemOrbitReport.
    */
  virtual uci::type::SystemOrbitReportMDT& enableSystemOrbitReport(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SystemOrbitReport.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& clearSystemOrbitReport() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SystemOrbitalPositionReport.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SystemOrbitalPositionReport.
    */
  virtual const uci::type::SystemOrbitalPositionReportMDT& getSystemOrbitalPositionReport() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * SystemOrbitalPositionReport.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      SystemOrbitalPositionReport.
    */
  virtual uci::type::SystemOrbitalPositionReportMDT& getSystemOrbitalPositionReport() = 0;

  /** Sets the complex content identified by SystemOrbitalPositionReport to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemOrbitalPositionReport.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& setSystemOrbitalPositionReport(const uci::type::SystemOrbitalPositionReportMDT& value) = 0;

  /** Returns whether the Element identified by SystemOrbitalPositionReport exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SystemOrbitalPositionReport is enabled or not.
    */
  virtual bool hasSystemOrbitalPositionReport() const = 0;

  /** Enables the Element identified by SystemOrbitalPositionReport.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      SystemOrbitalPositionReport.
    */
  virtual uci::type::SystemOrbitalPositionReportMDT& enableSystemOrbitalPositionReport(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SystemOrbitalPositionReport.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& clearSystemOrbitalPositionReport() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SystemStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SystemStatus.
    */
  virtual const uci::type::SystemStatusMDT& getSystemStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemStatus.
    */
  virtual uci::type::SystemStatusMDT& getSystemStatus() = 0;

  /** Sets the complex content identified by SystemStatus to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& setSystemStatus(const uci::type::SystemStatusMDT& value) = 0;

  /** Returns whether the Element identified by SystemStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SystemStatus is enabled or not.
    */
  virtual bool hasSystemStatus() const = 0;

  /** Enables the Element identified by SystemStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SystemStatus.
    */
  virtual uci::type::SystemStatusMDT& enableSystemStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SystemStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& clearSystemStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PackageStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PackageStatus.
    */
  virtual const uci::type::PackageStatusMDT& getPackageStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PackageStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PackageStatus.
    */
  virtual uci::type::PackageStatusMDT& getPackageStatus() = 0;

  /** Sets the complex content identified by PackageStatus to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PackageStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& setPackageStatus(const uci::type::PackageStatusMDT& value) = 0;

  /** Returns whether the Element identified by PackageStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PackageStatus is enabled or not.
    */
  virtual bool hasPackageStatus() const = 0;

  /** Enables the Element identified by PackageStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PackageStatus.
    */
  virtual uci::type::PackageStatusMDT& enablePackageStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PackageStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& clearPackageStatus() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Timestamp.
    *
    * @return The value of the simple primitive data type identified by Timestamp.
    */
  virtual uci::type::DateTimeTypeValue getTimestamp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Timestamp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EstimationResultType& setTimestamp(uci::type::DateTimeTypeValue value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  EstimationResultType() {
  }

  /** The destructor [only available to derived classes]. */
  ~EstimationResultType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The EstimationResultType to copy from.
    */
  EstimationResultType(const EstimationResultType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this EstimationResultType to the contents of the EstimationResultType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The EstimationResultType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this EstimationResultType.
    * @return A reference to this EstimationResultType.
    */
  EstimationResultType& operator=(const EstimationResultType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ESTIMATIONRESULTTYPE_H

