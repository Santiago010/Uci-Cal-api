/** @file TaskType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_TASKTYPE_H
#define UCI_TYPE_TASKTYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "AMTI_TaskType.h"
#include "AO_TaskType.h"
#include "AirSampleTaskType.h"
#include "COMINT_TaskType.h"
#include "CargoDeliveryTaskType.h"
#include "CommRelayTaskType.h"
#include "CounterSpaceTaskType.h"
#include "EA_TaskType.h"
#include "ESM_TaskType.h"
#include "FlightTaskType.h"
#include "OrbitChangeTaskType.h"
#include "OrbitalSurveillanceSensorTaskType.h"
#include "OrbitalSurveillanceTaskType.h"
#include "PO_TaskType.h"
#include "RefuelTaskType.h"
#include "SAR_TaskType.h"
#include "SMTI_TaskType.h"
#include "StrikeTaskType.h"
#include "SystemDeploymentTaskType.h"
#include "TacticalOrderTaskType.h"
#include "WeatherRadarTaskType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Identifies the type of this Task instance. Note: When modifying this complexType (whether adding or removing
  * choices), there are equivalent complexTypes that require the same modifications. Changes to this type may necessitate
  * a modification to CapabilityTaxonomyType.
  */
class TaskType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new TaskType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed TaskType.
    */
  static UCI_EXPORT TaskType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new TaskType initializing the data accessed by the new TaskType using the data accessed by
    * the specified TaskType (cloning).
    *
    * @param accessor The TaskType that provides access to the data that is to be used to initialize the data accessed by
    *      the new created TaskType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed TaskType.
    */
  static UCI_EXPORT TaskType& create(const TaskType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified TaskType. Use of the specified accessor after it has been destroyed will result in
    * undefined behavior.
    *
    * @param accessor The TaskType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(TaskType& accessor);

  /** Returns this accessor's type constant, i.e. taskType.
    *
    * @return This accessor's type constant, i.e. taskType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::taskType;
  }

  /** Returns the version that was initialized from the uci:version attribute of TaskType.
    *
    * @return The version that was initialized from the uci:version attribute of TaskType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const TaskType& accessor) = 0;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum TaskTypeChoice {
    TASKTYPE_CHOICE_NONE,
    TASKTYPE_CHOICE_AIRSAMPLE,
    TASKTYPE_CHOICE_AMTI,
    TASKTYPE_CHOICE_AO,
    TASKTYPE_CHOICE_CARGODELIVERY,
    TASKTYPE_CHOICE_COMINT,
    TASKTYPE_CHOICE_COMMRELAY,
    TASKTYPE_CHOICE_COUNTERSPACE,
    TASKTYPE_CHOICE_EA,
    TASKTYPE_CHOICE_ESM,
    TASKTYPE_CHOICE_FLIGHT,
    TASKTYPE_CHOICE_ORBITCHANGE,
    TASKTYPE_CHOICE_ORBITALSURVEILLANCE,
    TASKTYPE_CHOICE_ORBITALSURVEILLANCESENSOR,
    TASKTYPE_CHOICE_PO,
    TASKTYPE_CHOICE_REFUEL,
    TASKTYPE_CHOICE_SAR,
    TASKTYPE_CHOICE_SMTI,
    TASKTYPE_CHOICE_STRIKE,
    TASKTYPE_CHOICE_SYSTEMDEPLOYMENT,
    TASKTYPE_CHOICE_TACTICALORDER,
    TASKTYPE_CHOICE_WEATHERRADAR
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual TaskTypeChoice getTaskTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getTaskTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the access
    * methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setTaskTypeChoiceOrdinal(TaskTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AirSample.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AirSample.
    */
  virtual const uci::type::AirSampleTaskType& getAirSample() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AirSample.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AirSample.
    */
  virtual uci::type::AirSampleTaskType& getAirSample() = 0;

  /** Sets the complex content identified by AirSample to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AirSample.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setAirSample(const uci::type::AirSampleTaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AirSample.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AirSample, false otherwise.
    */
  virtual bool isAirSample() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by AirSample.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AirSample.
    */
  virtual uci::type::AirSampleTaskType& chooseAirSample(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AMTI.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AMTI.
    */
  virtual const uci::type::AMTI_TaskType& getAMTI() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AMTI.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AMTI.
    */
  virtual uci::type::AMTI_TaskType& getAMTI() = 0;

  /** Sets the complex content identified by AMTI to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AMTI.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setAMTI(const uci::type::AMTI_TaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AMTI.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AMTI, false otherwise.
    */
  virtual bool isAMTI() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by AMTI.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AMTI.
    */
  virtual uci::type::AMTI_TaskType& chooseAMTI(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AO.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AO.
    */
  virtual const uci::type::AO_TaskType& getAO() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AO.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AO.
    */
  virtual uci::type::AO_TaskType& getAO() = 0;

  /** Sets the complex content identified by AO to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AO.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setAO(const uci::type::AO_TaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by AO.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by AO, false otherwise.
    */
  virtual bool isAO() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by AO.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by AO.
    */
  virtual uci::type::AO_TaskType& chooseAO(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CargoDelivery.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CargoDelivery.
    */
  virtual const uci::type::CargoDeliveryTaskType& getCargoDelivery() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CargoDelivery.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CargoDelivery.
    */
  virtual uci::type::CargoDeliveryTaskType& getCargoDelivery() = 0;

  /** Sets the complex content identified by CargoDelivery to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CargoDelivery.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setCargoDelivery(const uci::type::CargoDeliveryTaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CargoDelivery.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CargoDelivery, false otherwise.
    */
  virtual bool isCargoDelivery() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by CargoDelivery.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CargoDelivery.
    */
  virtual uci::type::CargoDeliveryTaskType& chooseCargoDelivery(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by COMINT.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by COMINT.
    */
  virtual const uci::type::COMINT_TaskType& getCOMINT() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by COMINT.
    *
    * @return A reference to the accessor that provides access to the complex content identified by COMINT.
    */
  virtual uci::type::COMINT_TaskType& getCOMINT() = 0;

  /** Sets the complex content identified by COMINT to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by COMINT.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setCOMINT(const uci::type::COMINT_TaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by COMINT.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by COMINT, false otherwise.
    */
  virtual bool isCOMINT() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by COMINT.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by COMINT.
    */
  virtual uci::type::COMINT_TaskType& chooseCOMINT(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CommRelay.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CommRelay.
    */
  virtual const uci::type::CommRelayTaskType& getCommRelay() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CommRelay.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CommRelay.
    */
  virtual uci::type::CommRelayTaskType& getCommRelay() = 0;

  /** Sets the complex content identified by CommRelay to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CommRelay.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setCommRelay(const uci::type::CommRelayTaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CommRelay.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CommRelay, false otherwise.
    */
  virtual bool isCommRelay() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by CommRelay.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CommRelay.
    */
  virtual uci::type::CommRelayTaskType& chooseCommRelay(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CounterSpace.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CounterSpace.
    */
  virtual const uci::type::CounterSpaceTaskType& getCounterSpace() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CounterSpace.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CounterSpace.
    */
  virtual uci::type::CounterSpaceTaskType& getCounterSpace() = 0;

  /** Sets the complex content identified by CounterSpace to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CounterSpace.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setCounterSpace(const uci::type::CounterSpaceTaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CounterSpace.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CounterSpace, false otherwise.
    */
  virtual bool isCounterSpace() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by CounterSpace.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CounterSpace.
    */
  virtual uci::type::CounterSpaceTaskType& chooseCounterSpace(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EA.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EA.
    */
  virtual const uci::type::EA_TaskType& getEA() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EA.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EA.
    */
  virtual uci::type::EA_TaskType& getEA() = 0;

  /** Sets the complex content identified by EA to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EA.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setEA(const uci::type::EA_TaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by EA.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by EA, false otherwise.
    */
  virtual bool isEA() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by EA.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EA.
    */
  virtual uci::type::EA_TaskType& chooseEA(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ESM.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ESM.
    */
  virtual const uci::type::ESM_TaskType& getESM() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ESM.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ESM.
    */
  virtual uci::type::ESM_TaskType& getESM() = 0;

  /** Sets the complex content identified by ESM to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ESM.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setESM(const uci::type::ESM_TaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ESM.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ESM, false otherwise.
    */
  virtual bool isESM() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ESM.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ESM.
    */
  virtual uci::type::ESM_TaskType& chooseESM(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Flight.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Flight.
    */
  virtual const uci::type::FlightTaskType& getFlight() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Flight.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Flight.
    */
  virtual uci::type::FlightTaskType& getFlight() = 0;

  /** Sets the complex content identified by Flight to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Flight.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setFlight(const uci::type::FlightTaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Flight.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Flight, false otherwise.
    */
  virtual bool isFlight() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Flight.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Flight.
    */
  virtual uci::type::FlightTaskType& chooseFlight(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OrbitChange.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OrbitChange.
    */
  virtual const uci::type::OrbitChangeTaskType& getOrbitChange() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitChange.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitChange.
    */
  virtual uci::type::OrbitChangeTaskType& getOrbitChange() = 0;

  /** Sets the complex content identified by OrbitChange to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitChange.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setOrbitChange(const uci::type::OrbitChangeTaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OrbitChange.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OrbitChange, false otherwise.
    */
  virtual bool isOrbitChange() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitChange.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitChange.
    */
  virtual uci::type::OrbitChangeTaskType& chooseOrbitChange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrbitalSurveillance.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrbitalSurveillance.
    */
  virtual const uci::type::OrbitalSurveillanceTaskType& getOrbitalSurveillance() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitalSurveillance.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitalSurveillance.
    */
  virtual uci::type::OrbitalSurveillanceTaskType& getOrbitalSurveillance() = 0;

  /** Sets the complex content identified by OrbitalSurveillance to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitalSurveillance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setOrbitalSurveillance(const uci::type::OrbitalSurveillanceTaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OrbitalSurveillance.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OrbitalSurveillance, false
    *      otherwise.
    */
  virtual bool isOrbitalSurveillance() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitalSurveillance.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitalSurveillance.
    */
  virtual uci::type::OrbitalSurveillanceTaskType& chooseOrbitalSurveillance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrbitalSurveillanceSensor.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrbitalSurveillanceSensor.
    */
  virtual const uci::type::OrbitalSurveillanceSensorTaskType& getOrbitalSurveillanceSensor() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * OrbitalSurveillanceSensor.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OrbitalSurveillanceSensor.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskType& getOrbitalSurveillanceSensor() = 0;

  /** Sets the complex content identified by OrbitalSurveillanceSensor to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitalSurveillanceSensor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setOrbitalSurveillanceSensor(const uci::type::OrbitalSurveillanceSensorTaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OrbitalSurveillanceSensor.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OrbitalSurveillanceSensor, false
    *      otherwise.
    */
  virtual bool isOrbitalSurveillanceSensor() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitalSurveillanceSensor.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OrbitalSurveillanceSensor.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskType& chooseOrbitalSurveillanceSensor(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PO.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PO.
    */
  virtual const uci::type::PO_TaskType& getPO() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PO.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PO.
    */
  virtual uci::type::PO_TaskType& getPO() = 0;

  /** Sets the complex content identified by PO to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PO.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setPO(const uci::type::PO_TaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by PO.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by PO, false otherwise.
    */
  virtual bool isPO() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by PO.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by PO.
    */
  virtual uci::type::PO_TaskType& choosePO(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Refuel.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Refuel.
    */
  virtual const uci::type::RefuelTaskType& getRefuel() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Refuel.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Refuel.
    */
  virtual uci::type::RefuelTaskType& getRefuel() = 0;

  /** Sets the complex content identified by Refuel to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Refuel.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setRefuel(const uci::type::RefuelTaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Refuel.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Refuel, false otherwise.
    */
  virtual bool isRefuel() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Refuel.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Refuel.
    */
  virtual uci::type::RefuelTaskType& chooseRefuel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SAR.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SAR.
    */
  virtual const uci::type::SAR_TaskType& getSAR() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SAR.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SAR.
    */
  virtual uci::type::SAR_TaskType& getSAR() = 0;

  /** Sets the complex content identified by SAR to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SAR.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setSAR(const uci::type::SAR_TaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SAR.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SAR, false otherwise.
    */
  virtual bool isSAR() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SAR.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SAR.
    */
  virtual uci::type::SAR_TaskType& chooseSAR(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SMTI.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SMTI.
    */
  virtual const uci::type::SMTI_TaskType& getSMTI() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SMTI.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SMTI.
    */
  virtual uci::type::SMTI_TaskType& getSMTI() = 0;

  /** Sets the complex content identified by SMTI to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SMTI.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setSMTI(const uci::type::SMTI_TaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SMTI.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SMTI, false otherwise.
    */
  virtual bool isSMTI() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SMTI.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SMTI.
    */
  virtual uci::type::SMTI_TaskType& chooseSMTI(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Strike.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Strike.
    */
  virtual const uci::type::StrikeTaskType& getStrike() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Strike.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Strike.
    */
  virtual uci::type::StrikeTaskType& getStrike() = 0;

  /** Sets the complex content identified by Strike to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Strike.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setStrike(const uci::type::StrikeTaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Strike.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Strike, false otherwise.
    */
  virtual bool isStrike() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Strike.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Strike.
    */
  virtual uci::type::StrikeTaskType& chooseStrike(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SystemDeployment.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SystemDeployment.
    */
  virtual const uci::type::SystemDeploymentTaskType& getSystemDeployment() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemDeployment.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemDeployment.
    */
  virtual uci::type::SystemDeploymentTaskType& getSystemDeployment() = 0;

  /** Sets the complex content identified by SystemDeployment to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemDeployment.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setSystemDeployment(const uci::type::SystemDeploymentTaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SystemDeployment.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SystemDeployment, false
    *      otherwise.
    */
  virtual bool isSystemDeployment() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SystemDeployment.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SystemDeployment.
    */
  virtual uci::type::SystemDeploymentTaskType& chooseSystemDeployment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TacticalOrder.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TacticalOrder.
    */
  virtual const uci::type::TacticalOrderTaskType& getTacticalOrder() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TacticalOrder.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TacticalOrder.
    */
  virtual uci::type::TacticalOrderTaskType& getTacticalOrder() = 0;

  /** Sets the complex content identified by TacticalOrder to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TacticalOrder.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setTacticalOrder(const uci::type::TacticalOrderTaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by TacticalOrder.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by TacticalOrder, false otherwise.
    */
  virtual bool isTacticalOrder() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by TacticalOrder.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by TacticalOrder.
    */
  virtual uci::type::TacticalOrderTaskType& chooseTacticalOrder(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by WeatherRadar.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by WeatherRadar.
    */
  virtual const uci::type::WeatherRadarTaskType& getWeatherRadar() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by WeatherRadar.
    *
    * @return A reference to the accessor that provides access to the complex content identified by WeatherRadar.
    */
  virtual uci::type::WeatherRadarTaskType& getWeatherRadar() = 0;

  /** Sets the complex content identified by WeatherRadar to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by WeatherRadar.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::TaskType& setWeatherRadar(const uci::type::WeatherRadarTaskType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by WeatherRadar.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by WeatherRadar, false otherwise.
    */
  virtual bool isWeatherRadar() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by WeatherRadar.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by WeatherRadar.
    */
  virtual uci::type::WeatherRadarTaskType& chooseWeatherRadar(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  TaskType() {
  }

  /** The destructor [only available to derived classes]. */
  ~TaskType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The TaskType to copy from.
    */
  TaskType(const TaskType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this TaskType to the contents of the TaskType on the right hand side
    * (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The TaskType on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this TaskType.
    * @return A reference to this TaskType.
    */
  TaskType& operator=(const TaskType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_TASKTYPE_H

