/** @file UnitType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_UNITTYPE_H
#define UCI_TYPE_UNITTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/UnsignedByteAccessor.h"
#include "../base/export.h"
#include "AirDefenseAreaType.h"
#include "BaseEOB_RecordType.h"
#include "CountryCodeType.h"
#include "EOB_EquipmentRecordType.h"
#include "EOB_FixedPositionType.h"
#include "ID_Type.h"
#include "OB_OperationalStatusEnum.h"
#include "OrderOfBattleTimestampsType.h"
#include "SecurityInformationType.h"
#include "StandardIdentityConfidenceType.h"
#include "String20Type.h"
#include "String4Type.h"
#include "UnitIdentityType.h"
#include "VisibleString256Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Represents a Unit in an OB. */
class UnitType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new UnitType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed UnitType.
    */
  static UCI_EXPORT UnitType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new UnitType initializing the data accessed by the new UnitType using the data accessed by
    * the specified UnitType (cloning).
    *
    * @param accessor The UnitType that provides access to the data that is to be used to initialize the data accessed by
    *      the new created UnitType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed UnitType.
    */
  static UCI_EXPORT UnitType& create(const UnitType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified UnitType. Use of the specified accessor after it has been destroyed will result in
    * undefined behavior.
    *
    * @param accessor The UnitType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(UnitType& accessor);

  /** Returns this accessor's type constant, i.e. unitType.
    *
    * @return This accessor's type constant, i.e. unitType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::unitType;
  }

  /** Returns the version that was initialized from the uci:version attribute of UnitType.
    *
    * @return The version that was initialized from the uci:version attribute of UnitType.
    */
  static std::string getUCITypeVersion() {
    return "003.002.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const UnitType& accessor) = 0;

  /** Specifies any sites contained within the unit. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::BaseEOB_RecordType, uci::type::accessorType::baseEOB_RecordType> Site;

  /** Specifies equipment not identified with a site and contained within the unit. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EOB_EquipmentRecordType, uci::type::accessorType::eOB_EquipmentRecordType> Equipment;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SecurityInformation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SecurityInformation.
    */
  virtual const uci::type::SecurityInformationType& getSecurityInformation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SecurityInformation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SecurityInformation.
    */
  virtual uci::type::SecurityInformationType& getSecurityInformation() = 0;

  /** Sets the complex content identified by SecurityInformation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SecurityInformation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setSecurityInformation(const uci::type::SecurityInformationType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual const uci::type::UnitIdentityType& getIdentity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::UnitIdentityType& getIdentity() = 0;

  /** Sets the complex content identified by Identity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Identity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setIdentity(const uci::type::UnitIdentityType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by StandardIdentity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by StandardIdentity.
    */
  virtual const uci::type::StandardIdentityConfidenceType& getStandardIdentity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by StandardIdentity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by StandardIdentity.
    */
  virtual uci::type::StandardIdentityConfidenceType& getStandardIdentity() = 0;

  /** Sets the complex content identified by StandardIdentity to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by StandardIdentity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setStandardIdentity(const uci::type::StandardIdentityConfidenceType& value) = 0;

  /** Returns whether the Element identified by StandardIdentity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by StandardIdentity is enabled or not.
    */
  virtual bool hasStandardIdentity() const = 0;

  /** Enables the Element identified by StandardIdentity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by StandardIdentity.
    */
  virtual uci::type::StandardIdentityConfidenceType& enableStandardIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by StandardIdentity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearStandardIdentity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CountryCode.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CountryCode.
    */
  virtual const uci::type::CountryCodeType& getCountryCode() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CountryCode.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CountryCode.
    */
  virtual uci::type::CountryCodeType& getCountryCode() = 0;

  /** Sets the complex content identified by CountryCode to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CountryCode.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setCountryCode(const uci::type::CountryCodeType& value) = 0;

  /** Returns whether the Element identified by CountryCode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CountryCode is enabled or not.
    */
  virtual bool hasCountryCode() const = 0;

  /** Enables the Element identified by CountryCode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CountryCode.
    */
  virtual uci::type::CountryCodeType& enableCountryCode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CountryCode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearCountryCode() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual const uci::type::EOB_FixedPositionType& getPosition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Position.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual uci::type::EOB_FixedPositionType& getPosition() = 0;

  /** Sets the complex content identified by Position to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Position.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setPosition(const uci::type::EOB_FixedPositionType& value) = 0;

  /** Returns whether the Element identified by Position exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Position is enabled or not.
    */
  virtual bool hasPosition() const = 0;

  /** Enables the Element identified by Position.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Position.
    */
  virtual uci::type::EOB_FixedPositionType& enablePosition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Position.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearPosition() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Timestamps.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Timestamps.
    */
  virtual const uci::type::OrderOfBattleTimestampsType& getTimestamps() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Timestamps.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Timestamps.
    */
  virtual uci::type::OrderOfBattleTimestampsType& getTimestamps() = 0;

  /** Sets the complex content identified by Timestamps to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Timestamps.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setTimestamps(const uci::type::OrderOfBattleTimestampsType& value) = 0;

  /** Returns whether the Element identified by Timestamps exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Timestamps is enabled or not.
    */
  virtual bool hasTimestamps() const = 0;

  /** Enables the Element identified by Timestamps.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Timestamps.
    */
  virtual uci::type::OrderOfBattleTimestampsType& enableTimestamps(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Timestamps.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearTimestamps() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Evaluation.
    *
    * @return The value of the simple primitive data type identified by Evaluation.
    */
  virtual xs::UnsignedByte getEvaluation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Evaluation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setEvaluation(xs::UnsignedByte value) = 0;

  /** Returns whether the Element identified by Evaluation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Evaluation is enabled or not.
    */
  virtual bool hasEvaluation() const = 0;

  /** Clears (disabled) the Element identified by Evaluation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearEvaluation() = 0;

  /** Returns a const reference to the value of the enumeration identified by OperationalStatus.
    *
    * @return A const reference to the value of the enumeration identified by OperationalStatus.
    */
  virtual const uci::type::OB_OperationalStatusEnum& getOperationalStatus() const = 0;

  /** Returns a reference to the value of the enumeration identified by OperationalStatus.
    *
    * @return A reference to the value of the enumeration identified by OperationalStatus.
    */
  virtual uci::type::OB_OperationalStatusEnum& getOperationalStatus() = 0;

  /** Sets the value of the enumeration identified by OperationalStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setOperationalStatus(const uci::type::OB_OperationalStatusEnum& value) = 0;

  /** Sets the value of the enumeration identified by OperationalStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setOperationalStatus(uci::type::OB_OperationalStatusEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by OperationalStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OperationalStatus is enabled or not.
    */
  virtual bool hasOperationalStatus() const = 0;

  /** Enables the Element identified by OperationalStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by OperationalStatus.
    */
  virtual uci::type::OB_OperationalStatusEnum& enableOperationalStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OperationalStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearOperationalStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by PoliticalSubdivision.
    *
    * @return A const reference to the accessor that provides access to the string identified by PoliticalSubdivision.
    */
  virtual const asb_uci::type::VisibleString256Type& getPoliticalSubdivision() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by PoliticalSubdivision.
    *
    * @return A reference to the accessor that provides access to the string identified by PoliticalSubdivision.
    */
  virtual asb_uci::type::VisibleString256Type& getPoliticalSubdivision() = 0;

  /** Sets the string identified by PoliticalSubdivision to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by PoliticalSubdivision.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setPoliticalSubdivision(const asb_uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by PoliticalSubdivision to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setPoliticalSubdivision(const std::string& value) = 0;

  /** Sets the string identified by PoliticalSubdivision to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setPoliticalSubdivision(const char* value) = 0;

  /** Returns whether the Element identified by PoliticalSubdivision exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PoliticalSubdivision is enabled or not.
    */
  virtual bool hasPoliticalSubdivision() const = 0;

  /** Enables the Element identified by PoliticalSubdivision.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by PoliticalSubdivision.
    */
  virtual asb_uci::type::VisibleString256Type& enablePoliticalSubdivision(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PoliticalSubdivision.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearPoliticalSubdivision() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AllegianceAlternate.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AllegianceAlternate.
    */
  virtual const uci::type::CountryCodeType& getAllegianceAlternate() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AllegianceAlternate.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AllegianceAlternate.
    */
  virtual uci::type::CountryCodeType& getAllegianceAlternate() = 0;

  /** Sets the complex content identified by AllegianceAlternate to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AllegianceAlternate.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setAllegianceAlternate(const uci::type::CountryCodeType& value) = 0;

  /** Returns whether the Element identified by AllegianceAlternate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AllegianceAlternate is enabled or not.
    */
  virtual bool hasAllegianceAlternate() const = 0;

  /** Enables the Element identified by AllegianceAlternate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AllegianceAlternate.
    */
  virtual uci::type::CountryCodeType& enableAllegianceAlternate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AllegianceAlternate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearAllegianceAlternate() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by DeploymentStatus.
    *
    * @return A const reference to the accessor that provides access to the string identified by DeploymentStatus.
    */
  virtual const uci::type::String20Type& getDeploymentStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by DeploymentStatus.
    *
    * @return A reference to the accessor that provides access to the string identified by DeploymentStatus.
    */
  virtual uci::type::String20Type& getDeploymentStatus() = 0;

  /** Sets the string identified by DeploymentStatus to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by DeploymentStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setDeploymentStatus(const uci::type::String20Type& value) = 0;

  /** Sets the string identified by DeploymentStatus to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setDeploymentStatus(const std::string& value) = 0;

  /** Sets the string identified by DeploymentStatus to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setDeploymentStatus(const char* value) = 0;

  /** Returns whether the Element identified by DeploymentStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DeploymentStatus is enabled or not.
    */
  virtual bool hasDeploymentStatus() const = 0;

  /** Enables the Element identified by DeploymentStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by DeploymentStatus.
    */
  virtual uci::type::String20Type& enableDeploymentStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DeploymentStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearDeploymentStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by DivisionCategory.
    *
    * @return A const reference to the accessor that provides access to the string identified by DivisionCategory.
    */
  virtual const asb_uci::type::VisibleString256Type& getDivisionCategory() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by DivisionCategory.
    *
    * @return A reference to the accessor that provides access to the string identified by DivisionCategory.
    */
  virtual asb_uci::type::VisibleString256Type& getDivisionCategory() = 0;

  /** Sets the string identified by DivisionCategory to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by DivisionCategory.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setDivisionCategory(const asb_uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by DivisionCategory to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setDivisionCategory(const std::string& value) = 0;

  /** Sets the string identified by DivisionCategory to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setDivisionCategory(const char* value) = 0;

  /** Returns whether the Element identified by DivisionCategory exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DivisionCategory is enabled or not.
    */
  virtual bool hasDivisionCategory() const = 0;

  /** Enables the Element identified by DivisionCategory.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by DivisionCategory.
    */
  virtual asb_uci::type::VisibleString256Type& enableDivisionCategory(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DivisionCategory.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearDivisionCategory() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Echelon.
    *
    * @return A const reference to the accessor that provides access to the string identified by Echelon.
    */
  virtual const uci::type::String20Type& getEchelon() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Echelon.
    *
    * @return A reference to the accessor that provides access to the string identified by Echelon.
    */
  virtual uci::type::String20Type& getEchelon() = 0;

  /** Sets the string identified by Echelon to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Echelon.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setEchelon(const uci::type::String20Type& value) = 0;

  /** Sets the string identified by Echelon to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setEchelon(const std::string& value) = 0;

  /** Sets the string identified by Echelon to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setEchelon(const char* value) = 0;

  /** Returns whether the Element identified by Echelon exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Echelon is enabled or not.
    */
  virtual bool hasEchelon() const = 0;

  /** Enables the Element identified by Echelon.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Echelon.
    */
  virtual uci::type::String20Type& enableEchelon(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Echelon.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearEchelon() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EchelonTier.
    *
    * @return The value of the simple primitive data type identified by EchelonTier.
    */
  virtual xs::UnsignedByte getEchelonTier() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EchelonTier.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setEchelonTier(xs::UnsignedByte value) = 0;

  /** Returns whether the Element identified by EchelonTier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EchelonTier is enabled or not.
    */
  virtual bool hasEchelonTier() const = 0;

  /** Clears (disabled) the Element identified by EchelonTier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearEchelonTier() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FlagFlown.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FlagFlown.
    */
  virtual const uci::type::CountryCodeType& getFlagFlown() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FlagFlown.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FlagFlown.
    */
  virtual uci::type::CountryCodeType& getFlagFlown() = 0;

  /** Sets the complex content identified by FlagFlown to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FlagFlown.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setFlagFlown(const uci::type::CountryCodeType& value) = 0;

  /** Returns whether the Element identified by FlagFlown exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FlagFlown is enabled or not.
    */
  virtual bool hasFlagFlown() const = 0;

  /** Enables the Element identified by FlagFlown.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by FlagFlown.
    */
  virtual uci::type::CountryCodeType& enableFlagFlown(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FlagFlown.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearFlagFlown() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FleetAssignment.
    *
    * @return A const reference to the accessor that provides access to the string identified by FleetAssignment.
    */
  virtual const uci::type::String4Type& getFleetAssignment() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FleetAssignment.
    *
    * @return A reference to the accessor that provides access to the string identified by FleetAssignment.
    */
  virtual uci::type::String4Type& getFleetAssignment() = 0;

  /** Sets the string identified by FleetAssignment to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FleetAssignment.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setFleetAssignment(const uci::type::String4Type& value) = 0;

  /** Sets the string identified by FleetAssignment to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setFleetAssignment(const std::string& value) = 0;

  /** Sets the string identified by FleetAssignment to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setFleetAssignment(const char* value) = 0;

  /** Returns whether the Element identified by FleetAssignment exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FleetAssignment is enabled or not.
    */
  virtual bool hasFleetAssignment() const = 0;

  /** Enables the Element identified by FleetAssignment.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FleetAssignment.
    */
  virtual uci::type::String4Type& enableFleetAssignment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FleetAssignment.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearFleetAssignment() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by AirDefenseArea.
    *
    * @return A const reference to the accessor that provides access to the string identified by AirDefenseArea.
    */
  virtual const uci::type::AirDefenseAreaType& getAirDefenseArea() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by AirDefenseArea.
    *
    * @return A reference to the accessor that provides access to the string identified by AirDefenseArea.
    */
  virtual uci::type::AirDefenseAreaType& getAirDefenseArea() = 0;

  /** Sets the string identified by AirDefenseArea to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by AirDefenseArea.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setAirDefenseArea(const uci::type::AirDefenseAreaType& value) = 0;

  /** Sets the string identified by AirDefenseArea to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setAirDefenseArea(const std::string& value) = 0;

  /** Sets the string identified by AirDefenseArea to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setAirDefenseArea(const char* value) = 0;

  /** Returns whether the Element identified by AirDefenseArea exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AirDefenseArea is enabled or not.
    */
  virtual bool hasAirDefenseArea() const = 0;

  /** Enables the Element identified by AirDefenseArea.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by AirDefenseArea.
    */
  virtual uci::type::AirDefenseAreaType& enableAirDefenseArea(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AirDefenseArea.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearAirDefenseArea() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ForceAssignment.
    *
    * @return A const reference to the accessor that provides access to the string identified by ForceAssignment.
    */
  virtual const asb_uci::type::VisibleString256Type& getForceAssignment() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ForceAssignment.
    *
    * @return A reference to the accessor that provides access to the string identified by ForceAssignment.
    */
  virtual asb_uci::type::VisibleString256Type& getForceAssignment() = 0;

  /** Sets the string identified by ForceAssignment to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ForceAssignment.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setForceAssignment(const asb_uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by ForceAssignment to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setForceAssignment(const std::string& value) = 0;

  /** Sets the string identified by ForceAssignment to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setForceAssignment(const char* value) = 0;

  /** Returns whether the Element identified by ForceAssignment exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ForceAssignment is enabled or not.
    */
  virtual bool hasForceAssignment() const = 0;

  /** Enables the Element identified by ForceAssignment.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ForceAssignment.
    */
  virtual asb_uci::type::VisibleString256Type& enableForceAssignment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ForceAssignment.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearForceAssignment() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ForceName.
    *
    * @return A const reference to the accessor that provides access to the string identified by ForceName.
    */
  virtual const asb_uci::type::VisibleString256Type& getForceName() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ForceName.
    *
    * @return A reference to the accessor that provides access to the string identified by ForceName.
    */
  virtual asb_uci::type::VisibleString256Type& getForceName() = 0;

  /** Sets the string identified by ForceName to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ForceName.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setForceName(const asb_uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by ForceName to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setForceName(const std::string& value) = 0;

  /** Sets the string identified by ForceName to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setForceName(const char* value) = 0;

  /** Returns whether the Element identified by ForceName exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ForceName is enabled or not.
    */
  virtual bool hasForceName() const = 0;

  /** Enables the Element identified by ForceName.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ForceName.
    */
  virtual asb_uci::type::VisibleString256Type& enableForceName(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ForceName.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearForceName() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by FunctionRole.
    *
    * @return A const reference to the accessor that provides access to the string identified by FunctionRole.
    */
  virtual const uci::type::String20Type& getFunctionRole() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by FunctionRole.
    *
    * @return A reference to the accessor that provides access to the string identified by FunctionRole.
    */
  virtual uci::type::String20Type& getFunctionRole() = 0;

  /** Sets the string identified by FunctionRole to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by FunctionRole.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setFunctionRole(const uci::type::String20Type& value) = 0;

  /** Sets the string identified by FunctionRole to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setFunctionRole(const std::string& value) = 0;

  /** Sets the string identified by FunctionRole to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setFunctionRole(const char* value) = 0;

  /** Returns whether the Element identified by FunctionRole exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FunctionRole is enabled or not.
    */
  virtual bool hasFunctionRole() const = 0;

  /** Enables the Element identified by FunctionRole.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by FunctionRole.
    */
  virtual uci::type::String20Type& enableFunctionRole(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FunctionRole.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearFunctionRole() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by MissionPrimary.
    *
    * @return A const reference to the accessor that provides access to the string identified by MissionPrimary.
    */
  virtual const uci::type::String4Type& getMissionPrimary() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by MissionPrimary.
    *
    * @return A reference to the accessor that provides access to the string identified by MissionPrimary.
    */
  virtual uci::type::String4Type& getMissionPrimary() = 0;

  /** Sets the string identified by MissionPrimary to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by MissionPrimary.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setMissionPrimary(const uci::type::String4Type& value) = 0;

  /** Sets the string identified by MissionPrimary to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setMissionPrimary(const std::string& value) = 0;

  /** Sets the string identified by MissionPrimary to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setMissionPrimary(const char* value) = 0;

  /** Returns whether the Element identified by MissionPrimary exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MissionPrimary is enabled or not.
    */
  virtual bool hasMissionPrimary() const = 0;

  /** Enables the Element identified by MissionPrimary.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by MissionPrimary.
    */
  virtual uci::type::String4Type& enableMissionPrimary(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MissionPrimary.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearMissionPrimary() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by MissionPrimarySpecialty.
    *
    * @return A const reference to the accessor that provides access to the string identified by MissionPrimarySpecialty.
    */
  virtual const uci::type::String4Type& getMissionPrimarySpecialty() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by MissionPrimarySpecialty.
    *
    * @return A reference to the accessor that provides access to the string identified by MissionPrimarySpecialty.
    */
  virtual uci::type::String4Type& getMissionPrimarySpecialty() = 0;

  /** Sets the string identified by MissionPrimarySpecialty to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by MissionPrimarySpecialty.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setMissionPrimarySpecialty(const uci::type::String4Type& value) = 0;

  /** Sets the string identified by MissionPrimarySpecialty to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setMissionPrimarySpecialty(const std::string& value) = 0;

  /** Sets the string identified by MissionPrimarySpecialty to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setMissionPrimarySpecialty(const char* value) = 0;

  /** Returns whether the Element identified by MissionPrimarySpecialty exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MissionPrimarySpecialty is enabled or not.
    */
  virtual bool hasMissionPrimarySpecialty() const = 0;

  /** Enables the Element identified by MissionPrimarySpecialty.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by MissionPrimarySpecialty.
    */
  virtual uci::type::String4Type& enableMissionPrimarySpecialty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MissionPrimarySpecialty.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearMissionPrimarySpecialty() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by MissionSecondary.
    *
    * @return A const reference to the accessor that provides access to the string identified by MissionSecondary.
    */
  virtual const uci::type::String4Type& getMissionSecondary() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by MissionSecondary.
    *
    * @return A reference to the accessor that provides access to the string identified by MissionSecondary.
    */
  virtual uci::type::String4Type& getMissionSecondary() = 0;

  /** Sets the string identified by MissionSecondary to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by MissionSecondary.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setMissionSecondary(const uci::type::String4Type& value) = 0;

  /** Sets the string identified by MissionSecondary to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setMissionSecondary(const std::string& value) = 0;

  /** Sets the string identified by MissionSecondary to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setMissionSecondary(const char* value) = 0;

  /** Returns whether the Element identified by MissionSecondary exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MissionSecondary is enabled or not.
    */
  virtual bool hasMissionSecondary() const = 0;

  /** Enables the Element identified by MissionSecondary.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by MissionSecondary.
    */
  virtual uci::type::String4Type& enableMissionSecondary(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MissionSecondary.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearMissionSecondary() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by MissionSecondarySpecialty.
    *
    * @return A const reference to the accessor that provides access to the string identified by MissionSecondarySpecialty.
    */
  virtual const uci::type::String4Type& getMissionSecondarySpecialty() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by MissionSecondarySpecialty.
    *
    * @return A reference to the accessor that provides access to the string identified by MissionSecondarySpecialty.
    */
  virtual uci::type::String4Type& getMissionSecondarySpecialty() = 0;

  /** Sets the string identified by MissionSecondarySpecialty to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by MissionSecondarySpecialty.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setMissionSecondarySpecialty(const uci::type::String4Type& value) = 0;

  /** Sets the string identified by MissionSecondarySpecialty to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setMissionSecondarySpecialty(const std::string& value) = 0;

  /** Sets the string identified by MissionSecondarySpecialty to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setMissionSecondarySpecialty(const char* value) = 0;

  /** Returns whether the Element identified by MissionSecondarySpecialty exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MissionSecondarySpecialty is enabled or not.
    */
  virtual bool hasMissionSecondarySpecialty() const = 0;

  /** Enables the Element identified by MissionSecondarySpecialty.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by MissionSecondarySpecialty.
    */
  virtual uci::type::String4Type& enableMissionSecondarySpecialty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MissionSecondarySpecialty.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearMissionSecondarySpecialty() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by NuclearCapacity.
    *
    * @return A const reference to the accessor that provides access to the string identified by NuclearCapacity.
    */
  virtual const uci::type::String20Type& getNuclearCapacity() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by NuclearCapacity.
    *
    * @return A reference to the accessor that provides access to the string identified by NuclearCapacity.
    */
  virtual uci::type::String20Type& getNuclearCapacity() = 0;

  /** Sets the string identified by NuclearCapacity to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by NuclearCapacity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setNuclearCapacity(const uci::type::String20Type& value) = 0;

  /** Sets the string identified by NuclearCapacity to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setNuclearCapacity(const std::string& value) = 0;

  /** Sets the string identified by NuclearCapacity to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setNuclearCapacity(const char* value) = 0;

  /** Returns whether the Element identified by NuclearCapacity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NuclearCapacity is enabled or not.
    */
  virtual bool hasNuclearCapacity() const = 0;

  /** Enables the Element identified by NuclearCapacity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by NuclearCapacity.
    */
  virtual uci::type::String20Type& enableNuclearCapacity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by NuclearCapacity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearNuclearCapacity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ParentUnitID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ParentUnitID.
    */
  virtual const uci::type::ID_Type& getParentUnitID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ParentUnitID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ParentUnitID.
    */
  virtual uci::type::ID_Type& getParentUnitID() = 0;

  /** Sets the complex content identified by ParentUnitID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ParentUnitID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setParentUnitID(const uci::type::ID_Type& value) = 0;

  /** Returns whether the Element identified by ParentUnitID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ParentUnitID is enabled or not.
    */
  virtual bool hasParentUnitID() const = 0;

  /** Enables the Element identified by ParentUnitID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ParentUnitID.
    */
  virtual uci::type::ID_Type& enableParentUnitID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ParentUnitID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& clearParentUnitID() = 0;

  /** Returns a const reference to the bounded list identified by Site.
    *
    * @return A const reference to the bounded list identified by Site.
    */
  virtual const uci::type::UnitType::Site& getSite() const = 0;

  /** Returns a reference to the bounded list identified by Site.
    *
    * @return A reference to the bounded list identified by Site.
    */
  virtual uci::type::UnitType::Site& getSite() = 0;

  /** Sets the bounded list identified by Site.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setSite(const uci::type::UnitType::Site& value) = 0;

  /** Returns a const reference to the bounded list identified by Equipment.
    *
    * @return A const reference to the bounded list identified by Equipment.
    */
  virtual const uci::type::UnitType::Equipment& getEquipment() const = 0;

  /** Returns a reference to the bounded list identified by Equipment.
    *
    * @return A reference to the bounded list identified by Equipment.
    */
  virtual uci::type::UnitType::Equipment& getEquipment() = 0;

  /** Sets the bounded list identified by Equipment.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::UnitType& setEquipment(const uci::type::UnitType::Equipment& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  UnitType() {
  }

  /** The destructor [only available to derived classes]. */
  ~UnitType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The UnitType to copy from.
    */
  UnitType(const UnitType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this UnitType to the contents of the UnitType on the right hand side
    * (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The UnitType on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this UnitType.
    * @return A reference to this UnitType.
    */
  UnitType& operator=(const UnitType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_UNITTYPE_H

