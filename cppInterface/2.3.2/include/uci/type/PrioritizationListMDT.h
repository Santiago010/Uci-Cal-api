/** @file PrioritizationListMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PRIORITIZATIONLISTMDT_H
#define UCI_TYPE_PRIORITIZATIONLISTMDT_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/DataRecordBaseType.h"
#include "uci/type/OpDescriptionType.h"
#include "uci/type/OrderTraceabilityType.h"
#include "uci/type/PrioritizationListEnum.h"
#include "uci/type/PrioritizationListID_Type.h"
#include "uci/type/PrioritizationListItemType.h"
#include "uci/type/ScheduleType.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/ZoneType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PrioritizationListMDT : public virtual DataRecordBaseType {
public:

  /** This method constructs a new PrioritizationListMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PrioritizationListMDT.
    */
  static UCI_EXPORT PrioritizationListMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PrioritizationListMDT initializing the data accessed by the new PrioritizationListMDT
    * using the data accessed by the specified PrioritizationListMDT (cloning).
    *
    * @param accessor The PrioritizationListMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PrioritizationListMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PrioritizationListMDT.
    */
  static UCI_EXPORT PrioritizationListMDT& create(const PrioritizationListMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PrioritizationListMDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The PrioritizationListMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PrioritizationListMDT& accessor);

  /** Returns this accessor's type constant, i.e. prioritizationListMDT.
    *
    * @return This accessor's type constant, i.e. prioritizationListMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::prioritizationListMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of PrioritizationListMDT.
    *
    * @return The version that was initialized from the uci:version attribute of PrioritizationListMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PrioritizationListMDT& accessor) = 0;

  /** Indicates an item in a prioritization list of the sibling ListType. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::PrioritizationListItemType, uci::type::accessorType::prioritizationListItemType> ListItem;

  /** Indicates an operational order which this PrioritizationList is traceable to. This does not mean ranking. This
    * element refers to a Planning Order, Commander's Intent, or other Order that came from a higher echelon. The higher
    * echelon is identified by the OrderSourceID. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OrderTraceabilityType, uci::type::accessorType::orderTraceabilityType> OpOrderTraceability;

  /** One or more Systems to which the prioritization applies. If omitted, the prioritization applies to all Systems.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SystemID_Type, uci::type::accessorType::systemID_Type> ApplicableSystemID;

  /** One or more Services to which the mission response list applies. If omitted, the settings apply to all Services of
    * the Systems given in the sibling ApplicableSystemID. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ServiceID_Type, uci::type::accessorType::serviceID_Type> ApplicableServiceID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * PrioritizationListID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      PrioritizationListID.
    */
  virtual const uci::type::PrioritizationListID_Type& getPrioritizationListID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PrioritizationListID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PrioritizationListID.
    */
  virtual uci::type::PrioritizationListID_Type& getPrioritizationListID() = 0;

  /** Sets the complex content identified by PrioritizationListID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PrioritizationListID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PrioritizationListMDT& setPrioritizationListID(const uci::type::PrioritizationListID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ListType.
    *
    * @return A const reference to the value of the enumeration identified by ListType.
    */
  virtual const uci::type::PrioritizationListEnum& getListType() const = 0;

  /** Returns a reference to the value of the enumeration identified by ListType.
    *
    * @return A reference to the value of the enumeration identified by ListType.
    */
  virtual uci::type::PrioritizationListEnum& getListType() = 0;

  /** Sets the value of the enumeration identified by ListType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PrioritizationListMDT& setListType(const uci::type::PrioritizationListEnum& value) = 0;

  /** Sets the value of the enumeration identified by ListType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PrioritizationListMDT& setListType(uci::type::PrioritizationListEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by ListItem.
    *
    * @return A const reference to the bounded list identified by ListItem.
    */
  virtual const uci::type::PrioritizationListMDT::ListItem& getListItem() const = 0;

  /** Returns a reference to the bounded list identified by ListItem.
    *
    * @return A reference to the bounded list identified by ListItem.
    */
  virtual uci::type::PrioritizationListMDT::ListItem& getListItem() = 0;

  /** Sets the bounded list identified by ListItem.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PrioritizationListMDT& setListItem(const uci::type::PrioritizationListMDT::ListItem& value) = 0;

  /** Returns a const reference to the bounded list identified by OpOrderTraceability.
    *
    * @return A const reference to the bounded list identified by OpOrderTraceability.
    */
  virtual const uci::type::PrioritizationListMDT::OpOrderTraceability& getOpOrderTraceability() const = 0;

  /** Returns a reference to the bounded list identified by OpOrderTraceability.
    *
    * @return A reference to the bounded list identified by OpOrderTraceability.
    */
  virtual uci::type::PrioritizationListMDT::OpOrderTraceability& getOpOrderTraceability() = 0;

  /** Sets the bounded list identified by OpOrderTraceability.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PrioritizationListMDT& setOpOrderTraceability(const uci::type::PrioritizationListMDT::OpOrderTraceability& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OpDescription.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OpDescription.
    */
  virtual const uci::type::OpDescriptionType& getOpDescription() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OpDescription.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OpDescription.
    */
  virtual uci::type::OpDescriptionType& getOpDescription() = 0;

  /** Sets the complex content identified by OpDescription to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OpDescription.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PrioritizationListMDT& setOpDescription(const uci::type::OpDescriptionType& value) = 0;

  /** Returns whether the Element identified by OpDescription exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OpDescription is enabled or not.
    */
  virtual bool hasOpDescription() const = 0;

  /** Enables the Element identified by OpDescription.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OpDescription.
    */
  virtual uci::type::OpDescriptionType& enableOpDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OpDescription.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PrioritizationListMDT& clearOpDescription() = 0;

  /** Returns a const reference to the bounded list identified by ApplicableSystemID.
    *
    * @return A const reference to the bounded list identified by ApplicableSystemID.
    */
  virtual const uci::type::PrioritizationListMDT::ApplicableSystemID& getApplicableSystemID() const = 0;

  /** Returns a reference to the bounded list identified by ApplicableSystemID.
    *
    * @return A reference to the bounded list identified by ApplicableSystemID.
    */
  virtual uci::type::PrioritizationListMDT::ApplicableSystemID& getApplicableSystemID() = 0;

  /** Sets the bounded list identified by ApplicableSystemID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PrioritizationListMDT& setApplicableSystemID(const uci::type::PrioritizationListMDT::ApplicableSystemID& value) = 0;

  /** Returns a const reference to the bounded list identified by ApplicableServiceID.
    *
    * @return A const reference to the bounded list identified by ApplicableServiceID.
    */
  virtual const uci::type::PrioritizationListMDT::ApplicableServiceID& getApplicableServiceID() const = 0;

  /** Returns a reference to the bounded list identified by ApplicableServiceID.
    *
    * @return A reference to the bounded list identified by ApplicableServiceID.
    */
  virtual uci::type::PrioritizationListMDT::ApplicableServiceID& getApplicableServiceID() = 0;

  /** Sets the bounded list identified by ApplicableServiceID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PrioritizationListMDT& setApplicableServiceID(const uci::type::PrioritizationListMDT::ApplicableServiceID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ApplicableZone.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ApplicableZone.
    */
  virtual const uci::type::ZoneType& getApplicableZone() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ApplicableZone.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ApplicableZone.
    */
  virtual uci::type::ZoneType& getApplicableZone() = 0;

  /** Sets the complex content identified by ApplicableZone to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ApplicableZone.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PrioritizationListMDT& setApplicableZone(const uci::type::ZoneType& value) = 0;

  /** Returns whether the Element identified by ApplicableZone exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ApplicableZone is enabled or not.
    */
  virtual bool hasApplicableZone() const = 0;

  /** Enables the Element identified by ApplicableZone.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ApplicableZone.
    */
  virtual uci::type::ZoneType& enableApplicableZone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ApplicableZone.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PrioritizationListMDT& clearApplicableZone() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Schedule.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Schedule.
    */
  virtual const uci::type::ScheduleType& getSchedule() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Schedule.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Schedule.
    */
  virtual uci::type::ScheduleType& getSchedule() = 0;

  /** Sets the complex content identified by Schedule to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Schedule.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PrioritizationListMDT& setSchedule(const uci::type::ScheduleType& value) = 0;

  /** Returns whether the Element identified by Schedule exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Schedule is enabled or not.
    */
  virtual bool hasSchedule() const = 0;

  /** Enables the Element identified by Schedule.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Schedule.
    */
  virtual uci::type::ScheduleType& enableSchedule(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Schedule.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PrioritizationListMDT& clearSchedule() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PrioritizationListMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~PrioritizationListMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PrioritizationListMDT to copy from.
    */
  PrioritizationListMDT(const PrioritizationListMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PrioritizationListMDT to the contents of the PrioritizationListMDT
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PrioritizationListMDT on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this PrioritizationListMDT.
    * @return A reference to this PrioritizationListMDT.
    */
  PrioritizationListMDT& operator=(const PrioritizationListMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PRIORITIZATIONLISTMDT_H

