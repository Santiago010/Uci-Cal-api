/** @file ThreatAssessmentRequestType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_THREATASSESSMENTREQUESTTYPE_H
#define UCI_TYPE_THREATASSESSMENTREQUESTTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/AssessmentSuppressionEnum.h"
#include "uci/type/DurationType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/SystemRoutePlanSpecificationType.h"
#include "uci/type/ThreatCapabilityEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The inputs used in generating and/or requesting a Route Threat Assessment. */
class ThreatAssessmentRequestType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ThreatAssessmentRequestType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ThreatAssessmentRequestType.
    */
  static UCI_EXPORT ThreatAssessmentRequestType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ThreatAssessmentRequestType initializing the data accessed by the new
    * ThreatAssessmentRequestType using the data accessed by the specified ThreatAssessmentRequestType (cloning).
    *
    * @param accessor The ThreatAssessmentRequestType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created ThreatAssessmentRequestType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ThreatAssessmentRequestType.
    */
  static UCI_EXPORT ThreatAssessmentRequestType& create(const ThreatAssessmentRequestType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ThreatAssessmentRequestType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The ThreatAssessmentRequestType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ThreatAssessmentRequestType& accessor);

  /** Returns this accessor's type constant, i.e. threatAssessmentRequestType.
    *
    * @return This accessor's type constant, i.e. threatAssessmentRequestType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::threatAssessmentRequestType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ThreatAssessmentRequestType.
    *
    * @return The version that was initialized from the uci:version attribute of ThreatAssessmentRequestType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ThreatAssessmentRequestType& accessor) = 0;

  /** This element indicates a specific threat Entity to assess. If omitted, all relevant threat Entities are assessed. If
    * any are given, only they are assessed. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EntityID_Type, uci::type::accessorType::entityID_Type> ThreatEntityID;

  /** Indicates a System or Systems to assess given their RoutePlan and available capabilities. [Occurrences: Minimum: 1;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SystemRoutePlanSpecificationType, uci::type::accessorType::systemRoutePlanSpecificationType> SystemToAssess;

  /** Indicates additional systems to be considered for the assessment, but are not assessed. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SystemRoutePlanSpecificationType, uci::type::accessorType::systemRoutePlanSpecificationType> SupportingSystem;

  /** Returns a const reference to the value of the enumeration identified by ThreatCapability.
    *
    * @return A const reference to the value of the enumeration identified by ThreatCapability.
    */
  virtual const uci::type::ThreatCapabilityEnum& getThreatCapability() const = 0;

  /** Returns a reference to the value of the enumeration identified by ThreatCapability.
    *
    * @return A reference to the value of the enumeration identified by ThreatCapability.
    */
  virtual uci::type::ThreatCapabilityEnum& getThreatCapability() = 0;

  /** Sets the value of the enumeration identified by ThreatCapability.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentRequestType& setThreatCapability(const uci::type::ThreatCapabilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by ThreatCapability.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentRequestType& setThreatCapability(uci::type::ThreatCapabilityEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ThreatSuppression.
    *
    * @return A const reference to the value of the enumeration identified by ThreatSuppression.
    */
  virtual const uci::type::AssessmentSuppressionEnum& getThreatSuppression() const = 0;

  /** Returns a reference to the value of the enumeration identified by ThreatSuppression.
    *
    * @return A reference to the value of the enumeration identified by ThreatSuppression.
    */
  virtual uci::type::AssessmentSuppressionEnum& getThreatSuppression() = 0;

  /** Sets the value of the enumeration identified by ThreatSuppression.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentRequestType& setThreatSuppression(const uci::type::AssessmentSuppressionEnum& value) = 0;

  /** Sets the value of the enumeration identified by ThreatSuppression.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentRequestType& setThreatSuppression(uci::type::AssessmentSuppressionEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by ThreatEntityID.
    *
    * @return A const reference to the bounded list identified by ThreatEntityID.
    */
  virtual const uci::type::ThreatAssessmentRequestType::ThreatEntityID& getThreatEntityID() const = 0;

  /** Returns a reference to the bounded list identified by ThreatEntityID.
    *
    * @return A reference to the bounded list identified by ThreatEntityID.
    */
  virtual uci::type::ThreatAssessmentRequestType::ThreatEntityID& getThreatEntityID() = 0;

  /** Sets the bounded list identified by ThreatEntityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentRequestType& setThreatEntityID(const uci::type::ThreatAssessmentRequestType::ThreatEntityID& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by AssessmentInterval.
    *
    * @return The value of the simple primitive data type identified by AssessmentInterval.
    */
  virtual uci::type::DurationTypeValue getAssessmentInterval() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AssessmentInterval.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentRequestType& setAssessmentInterval(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by AssessmentInterval exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AssessmentInterval is enabled or not.
    */
  virtual bool hasAssessmentInterval() const = 0;

  /** Clears (disabled) the Element identified by AssessmentInterval.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentRequestType& clearAssessmentInterval() = 0;

  /** Returns a const reference to the bounded list identified by SystemToAssess.
    *
    * @return A const reference to the bounded list identified by SystemToAssess.
    */
  virtual const uci::type::ThreatAssessmentRequestType::SystemToAssess& getSystemToAssess() const = 0;

  /** Returns a reference to the bounded list identified by SystemToAssess.
    *
    * @return A reference to the bounded list identified by SystemToAssess.
    */
  virtual uci::type::ThreatAssessmentRequestType::SystemToAssess& getSystemToAssess() = 0;

  /** Sets the bounded list identified by SystemToAssess.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentRequestType& setSystemToAssess(const uci::type::ThreatAssessmentRequestType::SystemToAssess& value) = 0;

  /** Returns a const reference to the bounded list identified by SupportingSystem.
    *
    * @return A const reference to the bounded list identified by SupportingSystem.
    */
  virtual const uci::type::ThreatAssessmentRequestType::SupportingSystem& getSupportingSystem() const = 0;

  /** Returns a reference to the bounded list identified by SupportingSystem.
    *
    * @return A reference to the bounded list identified by SupportingSystem.
    */
  virtual uci::type::ThreatAssessmentRequestType::SupportingSystem& getSupportingSystem() = 0;

  /** Sets the bounded list identified by SupportingSystem.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ThreatAssessmentRequestType& setSupportingSystem(const uci::type::ThreatAssessmentRequestType::SupportingSystem& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ThreatAssessmentRequestType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ThreatAssessmentRequestType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ThreatAssessmentRequestType to copy from.
    */
  ThreatAssessmentRequestType(const ThreatAssessmentRequestType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ThreatAssessmentRequestType to the contents of the
    * ThreatAssessmentRequestType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ThreatAssessmentRequestType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this ThreatAssessmentRequestType.
    * @return A reference to this ThreatAssessmentRequestType.
    */
  ThreatAssessmentRequestType& operator=(const ThreatAssessmentRequestType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_THREATASSESSMENTREQUESTTYPE_H

