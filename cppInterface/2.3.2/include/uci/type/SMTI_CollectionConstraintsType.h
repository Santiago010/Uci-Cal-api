/** @file SMTI_CollectionConstraintsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SMTI_COLLECTIONCONSTRAINTSTYPE_H
#define UCI_TYPE_SMTI_COLLECTIONCONSTRAINTSTYPE_H

#include "uci/base/export.h"
#include "uci/type/CollectionConstraintsType.h"
#include "uci/type/DecibelType.h"
#include "uci/type/EmconConstraintType.h"
#include "uci/type/FalseAlarmType.h"
#include "uci/type/PercentType.h"
#include "uci/type/PositionLocationUncertaintyType.h"
#include "uci/type/SMTI_CollectionConstraintsQualityType.h"
#include "uci/type/SpeedRangeType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates a set of bounding requirements for the particular collection associated with this command. The subsystem
  * should attempt to satisfy all specified constraints.
  */
class SMTI_CollectionConstraintsType : public virtual CollectionConstraintsType {
public:

  /** This method constructs a new SMTI_CollectionConstraintsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SMTI_CollectionConstraintsType.
    */
  static UCI_EXPORT SMTI_CollectionConstraintsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SMTI_CollectionConstraintsType initializing the data accessed by the new
    * SMTI_CollectionConstraintsType using the data accessed by the specified SMTI_CollectionConstraintsType (cloning).
    *
    * @param accessor The SMTI_CollectionConstraintsType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created SMTI_CollectionConstraintsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SMTI_CollectionConstraintsType.
    */
  static UCI_EXPORT SMTI_CollectionConstraintsType& create(const SMTI_CollectionConstraintsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SMTI_CollectionConstraintsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The SMTI_CollectionConstraintsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SMTI_CollectionConstraintsType& accessor);

  /** Returns this accessor's type constant, i.e. sMTI_CollectionConstraintsType.
    *
    * @return This accessor's type constant, i.e. sMTI_CollectionConstraintsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sMTI_CollectionConstraintsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SMTI_CollectionConstraintsType.
    *
    * @return The version that was initialized from the uci:version attribute of SMTI_CollectionConstraintsType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SMTI_CollectionConstraintsType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Quality.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Quality.
    */
  virtual const uci::type::SMTI_CollectionConstraintsQualityType& getQuality() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Quality.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Quality.
    */
  virtual uci::type::SMTI_CollectionConstraintsQualityType& getQuality() = 0;

  /** Sets the complex content identified by Quality to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Quality.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& setQuality(const uci::type::SMTI_CollectionConstraintsQualityType& value) = 0;

  /** Returns whether the Element identified by Quality exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Quality is enabled or not.
    */
  virtual bool hasQuality() const = 0;

  /** Enables the Element identified by Quality.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Quality.
    */
  virtual uci::type::SMTI_CollectionConstraintsQualityType& enableQuality(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Quality.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& clearQuality() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TargetSpeed.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TargetSpeed.
    */
  virtual const uci::type::SpeedRangeType& getTargetSpeed() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TargetSpeed.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TargetSpeed.
    */
  virtual uci::type::SpeedRangeType& getTargetSpeed() = 0;

  /** Sets the complex content identified by TargetSpeed to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TargetSpeed.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& setTargetSpeed(const uci::type::SpeedRangeType& value) = 0;

  /** Returns whether the Element identified by TargetSpeed exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TargetSpeed is enabled or not.
    */
  virtual bool hasTargetSpeed() const = 0;

  /** Enables the Element identified by TargetSpeed.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TargetSpeed.
    */
  virtual uci::type::SpeedRangeType& enableTargetSpeed(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TargetSpeed.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& clearTargetSpeed() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TargetRCS.
    *
    * @return The value of the simple primitive data type identified by TargetRCS.
    */
  virtual uci::type::DecibelTypeValue getTargetRCS() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TargetRCS.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& setTargetRCS(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by TargetRCS exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TargetRCS is enabled or not.
    */
  virtual bool hasTargetRCS() const = 0;

  /** Clears (disabled) the Element identified by TargetRCS.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& clearTargetRCS() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FalseAlarm.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FalseAlarm.
    */
  virtual const uci::type::FalseAlarmType& getFalseAlarm() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FalseAlarm.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FalseAlarm.
    */
  virtual uci::type::FalseAlarmType& getFalseAlarm() = 0;

  /** Sets the complex content identified by FalseAlarm to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FalseAlarm.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& setFalseAlarm(const uci::type::FalseAlarmType& value) = 0;

  /** Returns whether the Element identified by FalseAlarm exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FalseAlarm is enabled or not.
    */
  virtual bool hasFalseAlarm() const = 0;

  /** Enables the Element identified by FalseAlarm.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by FalseAlarm.
    */
  virtual uci::type::FalseAlarmType& enableFalseAlarm(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FalseAlarm.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& clearFalseAlarm() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ProbabilityOfDetection.
    *
    * @return The value of the simple primitive data type identified by ProbabilityOfDetection.
    */
  virtual uci::type::PercentTypeValue getProbabilityOfDetection() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ProbabilityOfDetection.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& setProbabilityOfDetection(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by ProbabilityOfDetection exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProbabilityOfDetection is enabled or not.
    */
  virtual bool hasProbabilityOfDetection() const = 0;

  /** Clears (disabled) the Element identified by ProbabilityOfDetection.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& clearProbabilityOfDetection() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Emcon.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Emcon.
    */
  virtual const uci::type::EmconConstraintType& getEmcon() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Emcon.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Emcon.
    */
  virtual uci::type::EmconConstraintType& getEmcon() = 0;

  /** Sets the complex content identified by Emcon to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Emcon.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& setEmcon(const uci::type::EmconConstraintType& value) = 0;

  /** Returns whether the Element identified by Emcon exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Emcon is enabled or not.
    */
  virtual bool hasEmcon() const = 0;

  /** Enables the Element identified by Emcon.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Emcon.
    */
  virtual uci::type::EmconConstraintType& enableEmcon(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Emcon.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& clearEmcon() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OwnshipLocationConstraint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OwnshipLocationConstraint.
    */
  virtual const uci::type::PositionLocationUncertaintyType& getOwnshipLocationConstraint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * OwnshipLocationConstraint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OwnshipLocationConstraint.
    */
  virtual uci::type::PositionLocationUncertaintyType& getOwnshipLocationConstraint() = 0;

  /** Sets the complex content identified by OwnshipLocationConstraint to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OwnshipLocationConstraint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& setOwnshipLocationConstraint(const uci::type::PositionLocationUncertaintyType& value) = 0;

  /** Returns whether the Element identified by OwnshipLocationConstraint exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OwnshipLocationConstraint is enabled or not.
    */
  virtual bool hasOwnshipLocationConstraint() const = 0;

  /** Enables the Element identified by OwnshipLocationConstraint.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OwnshipLocationConstraint.
    */
  virtual uci::type::PositionLocationUncertaintyType& enableOwnshipLocationConstraint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OwnshipLocationConstraint.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SMTI_CollectionConstraintsType& clearOwnshipLocationConstraint() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SMTI_CollectionConstraintsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SMTI_CollectionConstraintsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SMTI_CollectionConstraintsType to copy from.
    */
  SMTI_CollectionConstraintsType(const SMTI_CollectionConstraintsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SMTI_CollectionConstraintsType to the contents of the
    * SMTI_CollectionConstraintsType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The SMTI_CollectionConstraintsType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this SMTI_CollectionConstraintsType.
    * @return A reference to this SMTI_CollectionConstraintsType.
    */
  SMTI_CollectionConstraintsType& operator=(const SMTI_CollectionConstraintsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SMTI_COLLECTIONCONSTRAINTSTYPE_H

