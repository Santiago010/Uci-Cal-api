/** @file SAR_PredictedActivityDetailType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SAR_PREDICTEDACTIVITYDETAILTYPE_H
#define UCI_TYPE_SAR_PREDICTEDACTIVITYDETAILTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/DoubleAccessor.h"
#include "../base/FloatAccessor.h"
#include "../base/export.h"
#include "ActivityStateEnum.h"
#include "CannotComplyType.h"
#include "DateTimeType.h"
#include "DecibelType.h"
#include "PercentType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SAR_PredictedActivityDetailType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SAR_PredictedActivityDetailType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SAR_PredictedActivityDetailType.
    */
  static UCI_EXPORT SAR_PredictedActivityDetailType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SAR_PredictedActivityDetailType initializing the data accessed by the new
    * SAR_PredictedActivityDetailType using the data accessed by the specified SAR_PredictedActivityDetailType (cloning).
    *
    * @param accessor The SAR_PredictedActivityDetailType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created SAR_PredictedActivityDetailType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SAR_PredictedActivityDetailType.
    */
  static UCI_EXPORT SAR_PredictedActivityDetailType& create(const SAR_PredictedActivityDetailType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SAR_PredictedActivityDetailType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The SAR_PredictedActivityDetailType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SAR_PredictedActivityDetailType& accessor);

  /** Returns this accessor's type constant, i.e. sAR_PredictedActivityDetailType.
    *
    * @return This accessor's type constant, i.e. sAR_PredictedActivityDetailType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sAR_PredictedActivityDetailType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SAR_PredictedActivityDetailType.
    *
    * @return The version that was initialized from the uci:version attribute of SAR_PredictedActivityDetailType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SAR_PredictedActivityDetailType& accessor) = 0;

  /** Returns a const reference to the value of the enumeration identified by ActivityState.
    *
    * @return A const reference to the value of the enumeration identified by ActivityState.
    */
  virtual const uci::type::ActivityStateEnum& getActivityState() const = 0;

  /** Returns a reference to the value of the enumeration identified by ActivityState.
    *
    * @return A reference to the value of the enumeration identified by ActivityState.
    */
  virtual uci::type::ActivityStateEnum& getActivityState() = 0;

  /** Sets the value of the enumeration identified by ActivityState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& setActivityState(const uci::type::ActivityStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by ActivityState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& setActivityState(uci::type::ActivityStateEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ActivityState exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActivityState is enabled or not.
    */
  virtual bool hasActivityState() const = 0;

  /** Enables the Element identified by ActivityState.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ActivityState.
    */
  virtual uci::type::ActivityStateEnum& enableActivityState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActivityState.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& clearActivityState() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActivityReason.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActivityReason.
    */
  virtual const uci::type::CannotComplyType& getActivityReason() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActivityReason.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActivityReason.
    */
  virtual uci::type::CannotComplyType& getActivityReason() = 0;

  /** Sets the complex content identified by ActivityReason to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivityReason.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& setActivityReason(const uci::type::CannotComplyType& value) = 0;

  /** Returns whether the Element identified by ActivityReason exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActivityReason is enabled or not.
    */
  virtual bool hasActivityReason() const = 0;

  /** Enables the Element identified by ActivityReason.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActivityReason.
    */
  virtual uci::type::CannotComplyType& enableActivityReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActivityReason.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& clearActivityReason() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EstimatedStartTime.
    *
    * @return The value of the simple primitive data type identified by EstimatedStartTime.
    */
  virtual uci::type::DateTimeTypeValue getEstimatedStartTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EstimatedStartTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& setEstimatedStartTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by EstimatedStartTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedStartTime is enabled or not.
    */
  virtual bool hasEstimatedStartTime() const = 0;

  /** Clears (disabled) the Element identified by EstimatedStartTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& clearEstimatedStartTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EstimatedStopTime.
    *
    * @return The value of the simple primitive data type identified by EstimatedStopTime.
    */
  virtual uci::type::DateTimeTypeValue getEstimatedStopTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EstimatedStopTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& setEstimatedStopTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by EstimatedStopTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedStopTime is enabled or not.
    */
  virtual bool hasEstimatedStopTime() const = 0;

  /** Clears (disabled) the Element identified by EstimatedStopTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& clearEstimatedStopTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EstimatedERP.
    *
    * @return The value of the simple primitive data type identified by EstimatedERP.
    */
  virtual uci::type::DecibelTypeValue getEstimatedERP() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EstimatedERP.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& setEstimatedERP(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by EstimatedERP exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedERP is enabled or not.
    */
  virtual bool hasEstimatedERP() const = 0;

  /** Clears (disabled) the Element identified by EstimatedERP.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& clearEstimatedERP() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EstimatedMinimumCNR.
    *
    * @return The value of the simple primitive data type identified by EstimatedMinimumCNR.
    */
  virtual uci::type::DecibelTypeValue getEstimatedMinimumCNR() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EstimatedMinimumCNR.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& setEstimatedMinimumCNR(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by EstimatedMinimumCNR exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedMinimumCNR is enabled or not.
    */
  virtual bool hasEstimatedMinimumCNR() const = 0;

  /** Clears (disabled) the Element identified by EstimatedMinimumCNR.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& clearEstimatedMinimumCNR() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EstimatedAchievableEllipticity.
    *
    * @return The value of the simple primitive data type identified by EstimatedAchievableEllipticity.
    */
  virtual xs::Float getEstimatedAchievableEllipticity() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EstimatedAchievableEllipticity.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& setEstimatedAchievableEllipticity(xs::Float value) = 0;

  /** Returns whether the Element identified by EstimatedAchievableEllipticity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedAchievableEllipticity is enabled or not.
    */
  virtual bool hasEstimatedAchievableEllipticity() const = 0;

  /** Clears (disabled) the Element identified by EstimatedAchievableEllipticity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& clearEstimatedAchievableEllipticity() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EstimatedAchievableResolution.
    *
    * @return The value of the simple primitive data type identified by EstimatedAchievableResolution.
    */
  virtual xs::Double getEstimatedAchievableResolution() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EstimatedAchievableResolution.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& setEstimatedAchievableResolution(xs::Double value) = 0;

  /** Returns whether the Element identified by EstimatedAchievableResolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedAchievableResolution is enabled or not.
    */
  virtual bool hasEstimatedAchievableResolution() const = 0;

  /** Clears (disabled) the Element identified by EstimatedAchievableResolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& clearEstimatedAchievableResolution() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EstimatedPercentageInFOR.
    *
    * @return The value of the simple primitive data type identified by EstimatedPercentageInFOR.
    */
  virtual uci::type::PercentTypeValue getEstimatedPercentageInFOR() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EstimatedPercentageInFOR.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& setEstimatedPercentageInFOR(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by EstimatedPercentageInFOR exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedPercentageInFOR is enabled or not.
    */
  virtual bool hasEstimatedPercentageInFOR() const = 0;

  /** Clears (disabled) the Element identified by EstimatedPercentageInFOR.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& clearEstimatedPercentageInFOR() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EstimatedPercentageOccluded.
    *
    * @return The value of the simple primitive data type identified by EstimatedPercentageOccluded.
    */
  virtual uci::type::PercentTypeValue getEstimatedPercentageOccluded() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EstimatedPercentageOccluded.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& setEstimatedPercentageOccluded(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by EstimatedPercentageOccluded exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedPercentageOccluded is enabled or not.
    */
  virtual bool hasEstimatedPercentageOccluded() const = 0;

  /** Clears (disabled) the Element identified by EstimatedPercentageOccluded.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& clearEstimatedPercentageOccluded() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ConcurrentExecutionAssumed.
    *
    * @return The value of the simple primitive data type identified by ConcurrentExecutionAssumed.
    */
  virtual xs::Boolean getConcurrentExecutionAssumed() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ConcurrentExecutionAssumed.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_PredictedActivityDetailType& setConcurrentExecutionAssumed(xs::Boolean value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SAR_PredictedActivityDetailType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SAR_PredictedActivityDetailType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SAR_PredictedActivityDetailType to copy from.
    */
  SAR_PredictedActivityDetailType(const SAR_PredictedActivityDetailType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SAR_PredictedActivityDetailType to the contents of the
    * SAR_PredictedActivityDetailType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The SAR_PredictedActivityDetailType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this SAR_PredictedActivityDetailType.
    * @return A reference to this SAR_PredictedActivityDetailType.
    */
  SAR_PredictedActivityDetailType& operator=(const SAR_PredictedActivityDetailType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SAR_PREDICTEDACTIVITYDETAILTYPE_H

