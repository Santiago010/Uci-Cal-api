/** @file EOB_SignalType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_EOB_SIGNALTYPE_H
#define UCI_TYPE_EOB_SIGNALTYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "DateTimeType.h"
#include "EmitterFunctionType.h"
#include "FrequencyDataBaseType.h"
#include "ModulationOnPulseDataBaseType.h"
#include "PRI_DataBaseType.h"
#include "ScanDataBaseType.h"
#include "SignalAmplitudeType.h"
#include "SignalPulseWidthBaseType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class EOB_SignalType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new EOB_SignalType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EOB_SignalType.
    */
  static UCI_EXPORT EOB_SignalType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new EOB_SignalType initializing the data accessed by the new EOB_SignalType using the data
    * accessed by the specified EOB_SignalType (cloning).
    *
    * @param accessor The EOB_SignalType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created EOB_SignalType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EOB_SignalType.
    */
  static UCI_EXPORT EOB_SignalType& create(const EOB_SignalType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified EOB_SignalType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The EOB_SignalType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(EOB_SignalType& accessor);

  /** Returns this accessor's type constant, i.e. eOB_SignalType.
    *
    * @return This accessor's type constant, i.e. eOB_SignalType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::eOB_SignalType;
  }

  /** Returns the version that was initialized from the uci:version attribute of EOB_SignalType.
    *
    * @return The version that was initialized from the uci:version attribute of EOB_SignalType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const EOB_SignalType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by LastHeardTimestamp.
    *
    * @return The value of the simple primitive data type identified by LastHeardTimestamp.
    */
  virtual uci::type::DateTimeTypeValue getLastHeardTimestamp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LastHeardTimestamp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& setLastHeardTimestamp(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by LastHeardTimestamp exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LastHeardTimestamp is enabled or not.
    */
  virtual bool hasLastHeardTimestamp() const = 0;

  /** Clears (disabled) the Element identified by LastHeardTimestamp.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& clearLastHeardTimestamp() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Frequency.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual const uci::type::FrequencyDataBaseType& getFrequency() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Frequency.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual uci::type::FrequencyDataBaseType& getFrequency() = 0;

  /** Sets the complex content identified by Frequency to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Frequency.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& setFrequency(const uci::type::FrequencyDataBaseType& value) = 0;

  /** Returns whether the Element identified by Frequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Frequency is enabled or not.
    */
  virtual bool hasFrequency() const = 0;

  /** Enables the Element identified by Frequency.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Frequency.
    */
  virtual uci::type::FrequencyDataBaseType& enableFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Frequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& clearFrequency() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PilotFrequency.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PilotFrequency.
    */
  virtual const uci::type::FrequencyDataBaseType& getPilotFrequency() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PilotFrequency.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PilotFrequency.
    */
  virtual uci::type::FrequencyDataBaseType& getPilotFrequency() = 0;

  /** Sets the complex content identified by PilotFrequency to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PilotFrequency.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& setPilotFrequency(const uci::type::FrequencyDataBaseType& value) = 0;

  /** Returns whether the Element identified by PilotFrequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PilotFrequency is enabled or not.
    */
  virtual bool hasPilotFrequency() const = 0;

  /** Enables the Element identified by PilotFrequency.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PilotFrequency.
    */
  virtual uci::type::FrequencyDataBaseType& enablePilotFrequency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PilotFrequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& clearPilotFrequency() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PRI.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PRI.
    */
  virtual const uci::type::PRI_DataBaseType& getPRI() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PRI.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PRI.
    */
  virtual uci::type::PRI_DataBaseType& getPRI() = 0;

  /** Sets the complex content identified by PRI to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PRI.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& setPRI(const uci::type::PRI_DataBaseType& value) = 0;

  /** Returns whether the Element identified by PRI exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PRI is enabled or not.
    */
  virtual bool hasPRI() const = 0;

  /** Enables the Element identified by PRI.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PRI.
    */
  virtual uci::type::PRI_DataBaseType& enablePRI(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PRI.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& clearPRI() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PulseWidth.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PulseWidth.
    */
  virtual const uci::type::SignalPulseWidthBaseType& getPulseWidth() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PulseWidth.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PulseWidth.
    */
  virtual uci::type::SignalPulseWidthBaseType& getPulseWidth() = 0;

  /** Sets the complex content identified by PulseWidth to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PulseWidth.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& setPulseWidth(const uci::type::SignalPulseWidthBaseType& value) = 0;

  /** Returns whether the Element identified by PulseWidth exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PulseWidth is enabled or not.
    */
  virtual bool hasPulseWidth() const = 0;

  /** Enables the Element identified by PulseWidth.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PulseWidth.
    */
  virtual uci::type::SignalPulseWidthBaseType& enablePulseWidth(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PulseWidth.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& clearPulseWidth() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Scan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Scan.
    */
  virtual const uci::type::ScanDataBaseType& getScan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Scan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Scan.
    */
  virtual uci::type::ScanDataBaseType& getScan() = 0;

  /** Sets the complex content identified by Scan to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Scan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& setScan(const uci::type::ScanDataBaseType& value) = 0;

  /** Returns whether the Element identified by Scan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Scan is enabled or not.
    */
  virtual bool hasScan() const = 0;

  /** Enables the Element identified by Scan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Scan.
    */
  virtual uci::type::ScanDataBaseType& enableScan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Scan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& clearScan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ModulationOnPulse.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ModulationOnPulse.
    */
  virtual const uci::type::ModulationOnPulseDataBaseType& getModulationOnPulse() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ModulationOnPulse.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ModulationOnPulse.
    */
  virtual uci::type::ModulationOnPulseDataBaseType& getModulationOnPulse() = 0;

  /** Sets the complex content identified by ModulationOnPulse to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ModulationOnPulse.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& setModulationOnPulse(const uci::type::ModulationOnPulseDataBaseType& value) = 0;

  /** Returns whether the Element identified by ModulationOnPulse exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ModulationOnPulse is enabled or not.
    */
  virtual bool hasModulationOnPulse() const = 0;

  /** Enables the Element identified by ModulationOnPulse.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ModulationOnPulse.
    */
  virtual uci::type::ModulationOnPulseDataBaseType& enableModulationOnPulse(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ModulationOnPulse.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& clearModulationOnPulse() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Amplitude.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Amplitude.
    */
  virtual const uci::type::SignalAmplitudeType& getAmplitude() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Amplitude.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Amplitude.
    */
  virtual uci::type::SignalAmplitudeType& getAmplitude() = 0;

  /** Sets the complex content identified by Amplitude to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Amplitude.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& setAmplitude(const uci::type::SignalAmplitudeType& value) = 0;

  /** Returns whether the Element identified by Amplitude exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Amplitude is enabled or not.
    */
  virtual bool hasAmplitude() const = 0;

  /** Enables the Element identified by Amplitude.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Amplitude.
    */
  virtual uci::type::SignalAmplitudeType& enableAmplitude(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Amplitude.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& clearAmplitude() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EmitterFunction.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EmitterFunction.
    */
  virtual const uci::type::EmitterFunctionType& getEmitterFunction() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EmitterFunction.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EmitterFunction.
    */
  virtual uci::type::EmitterFunctionType& getEmitterFunction() = 0;

  /** Sets the complex content identified by EmitterFunction to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EmitterFunction.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& setEmitterFunction(const uci::type::EmitterFunctionType& value) = 0;

  /** Returns whether the Element identified by EmitterFunction exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EmitterFunction is enabled or not.
    */
  virtual bool hasEmitterFunction() const = 0;

  /** Enables the Element identified by EmitterFunction.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EmitterFunction.
    */
  virtual uci::type::EmitterFunctionType& enableEmitterFunction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EmitterFunction.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EOB_SignalType& clearEmitterFunction() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  EOB_SignalType() {
  }

  /** The destructor [only available to derived classes]. */
  ~EOB_SignalType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The EOB_SignalType to copy from.
    */
  EOB_SignalType(const EOB_SignalType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this EOB_SignalType to the contents of the EOB_SignalType on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The EOB_SignalType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this EOB_SignalType.
    * @return A reference to this EOB_SignalType.
    */
  EOB_SignalType& operator=(const EOB_SignalType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_EOB_SIGNALTYPE_H

