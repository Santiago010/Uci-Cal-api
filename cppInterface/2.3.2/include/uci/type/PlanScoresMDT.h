/** @file PlanScoresMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLANSCORESMDT_H
#define UCI_TYPE_PLANSCORESMDT_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "DateTimeType.h"
#include "OpConstraintScoreType.h"
#include "PlanScoresID_Type.h"
#include "PlansReferenceType.h"
#include "RequestID_Type.h"
#include "ScoringProcessID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Describes the results of the plan scores given as a result of certain operational constraint inputs. */
class PlanScoresMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PlanScoresMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanScoresMDT.
    */
  static UCI_EXPORT PlanScoresMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlanScoresMDT initializing the data accessed by the new PlanScoresMDT using the data
    * accessed by the specified PlanScoresMDT (cloning).
    *
    * @param accessor The PlanScoresMDT that provides access to the data that is to be used to initialize the data accessed
    *      by the new created PlanScoresMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanScoresMDT.
    */
  static UCI_EXPORT PlanScoresMDT& create(const PlanScoresMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlanScoresMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The PlanScoresMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlanScoresMDT& accessor);

  /** Returns this accessor's type constant, i.e. planScoresMDT.
    *
    * @return This accessor's type constant, i.e. planScoresMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::planScoresMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlanScoresMDT.
    *
    * @return The version that was initialized from the uci:version attribute of PlanScoresMDT.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlanScoresMDT& accessor) = 0;

  /** Indicates an operational constraint score for the sibling AssessedPlans. The multiplicity is based on the list of
    * available OpConstraintEnums. [Occurrences: Minimum: 1; Maximum: 15]
    */
  typedef uci::base::BoundedList<uci::type::OpConstraintScoreType, uci::type::accessorType::opConstraintScoreType> ScoredOpConstraint;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PlanScoresID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PlanScoresID.
    */
  virtual const uci::type::PlanScoresID_Type& getPlanScoresID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PlanScoresID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PlanScoresID.
    */
  virtual uci::type::PlanScoresID_Type& getPlanScoresID() = 0;

  /** Sets the complex content identified by PlanScoresID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PlanScoresID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanScoresMDT& setPlanScoresID(const uci::type::PlanScoresID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RequestID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RequestID.
    */
  virtual const uci::type::RequestID_Type& getRequestID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RequestID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RequestID.
    */
  virtual uci::type::RequestID_Type& getRequestID() = 0;

  /** Sets the complex content identified by RequestID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RequestID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanScoresMDT& setRequestID(const uci::type::RequestID_Type& value) = 0;

  /** Returns whether the Element identified by RequestID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RequestID is enabled or not.
    */
  virtual bool hasRequestID() const = 0;

  /** Enables the Element identified by RequestID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RequestID.
    */
  virtual uci::type::RequestID_Type& enableRequestID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RequestID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanScoresMDT& clearRequestID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AssessedPlans.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AssessedPlans.
    */
  virtual const uci::type::PlansReferenceType& getAssessedPlans() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AssessedPlans.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AssessedPlans.
    */
  virtual uci::type::PlansReferenceType& getAssessedPlans() = 0;

  /** Sets the complex content identified by AssessedPlans to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AssessedPlans.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanScoresMDT& setAssessedPlans(const uci::type::PlansReferenceType& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by AssessmentTime.
    *
    * @return The value of the simple primitive data type identified by AssessmentTime.
    */
  virtual uci::type::DateTimeTypeValue getAssessmentTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AssessmentTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanScoresMDT& setAssessmentTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ScoringProcessID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ScoringProcessID.
    */
  virtual const uci::type::ScoringProcessID_Type& getScoringProcessID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ScoringProcessID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ScoringProcessID.
    */
  virtual uci::type::ScoringProcessID_Type& getScoringProcessID() = 0;

  /** Sets the complex content identified by ScoringProcessID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ScoringProcessID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanScoresMDT& setScoringProcessID(const uci::type::ScoringProcessID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by ScoredOpConstraint.
    *
    * @return A const reference to the bounded list identified by ScoredOpConstraint.
    */
  virtual const uci::type::PlanScoresMDT::ScoredOpConstraint& getScoredOpConstraint() const = 0;

  /** Returns a reference to the bounded list identified by ScoredOpConstraint.
    *
    * @return A reference to the bounded list identified by ScoredOpConstraint.
    */
  virtual uci::type::PlanScoresMDT::ScoredOpConstraint& getScoredOpConstraint() = 0;

  /** Sets the bounded list identified by ScoredOpConstraint.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanScoresMDT& setScoredOpConstraint(const uci::type::PlanScoresMDT::ScoredOpConstraint& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlanScoresMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlanScoresMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlanScoresMDT to copy from.
    */
  PlanScoresMDT(const PlanScoresMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlanScoresMDT to the contents of the PlanScoresMDT on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PlanScoresMDT on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this PlanScoresMDT.
    * @return A reference to this PlanScoresMDT.
    */
  PlanScoresMDT& operator=(const PlanScoresMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLANSCORESMDT_H

