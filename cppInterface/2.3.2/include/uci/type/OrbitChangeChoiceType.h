/** @file OrbitChangeChoiceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ORBITCHANGECHOICETYPE_H
#define UCI_TYPE_ORBITCHANGECHOICETYPE_H

#include "../base/Accessor.h"
#include "../base/DoubleAccessor.h"
#include "../base/export.h"
#include "AngleHalfPositiveType.h"
#include "AngleType.h"
#include "COE_OrbitType.h"
#include "DistanceType.h"
#include "OrbitalVolumeType.h"
#include "ProximityOperationsType.h"
#include "RSO_ApproachType.h"
#include "RaceTrackOrbitType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates a number of specific maneuvers to reach a new orbit. */
class OrbitChangeChoiceType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OrbitChangeChoiceType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitChangeChoiceType.
    */
  static UCI_EXPORT OrbitChangeChoiceType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OrbitChangeChoiceType initializing the data accessed by the new OrbitChangeChoiceType
    * using the data accessed by the specified OrbitChangeChoiceType (cloning).
    *
    * @param accessor The OrbitChangeChoiceType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created OrbitChangeChoiceType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitChangeChoiceType.
    */
  static UCI_EXPORT OrbitChangeChoiceType& create(const OrbitChangeChoiceType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OrbitChangeChoiceType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The OrbitChangeChoiceType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OrbitChangeChoiceType& accessor);

  /** Returns this accessor's type constant, i.e. orbitChangeChoiceType.
    *
    * @return This accessor's type constant, i.e. orbitChangeChoiceType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::orbitChangeChoiceType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OrbitChangeChoiceType.
    *
    * @return The version that was initialized from the uci:version attribute of OrbitChangeChoiceType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.001.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OrbitChangeChoiceType& accessor) = 0;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum OrbitChangeChoiceTypeChoice {
    ORBITCHANGECHOICETYPE_CHOICE_NONE,
    ORBITCHANGECHOICETYPE_CHOICE_SPECIFICORBIT,
    ORBITCHANGECHOICETYPE_CHOICE_SPECIFICPOSITION,
    ORBITCHANGECHOICETYPE_CHOICE_RENDEZVOUS,
    ORBITCHANGECHOICETYPE_CHOICE_PROXIMITYOPERATIONS,
    ORBITCHANGECHOICETYPE_CHOICE_LONGITUDE,
    ORBITCHANGECHOICETYPE_CHOICE_SEMIMAJORAXIS,
    ORBITCHANGECHOICETYPE_CHOICE_INCLINATION,
    ORBITCHANGECHOICETYPE_CHOICE_ECCENTRICITY,
    ORBITCHANGECHOICETYPE_CHOICE_RACETRACK
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual OrbitChangeChoiceTypeChoice getOrbitChangeChoiceTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getOrbitChangeChoiceTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the
    * access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitChangeChoiceType& setOrbitChangeChoiceTypeChoiceOrdinal(OrbitChangeChoiceTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SpecificOrbit.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SpecificOrbit.
    */
  virtual const uci::type::COE_OrbitType& getSpecificOrbit() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SpecificOrbit.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SpecificOrbit.
    */
  virtual uci::type::COE_OrbitType& getSpecificOrbit() = 0;

  /** Sets the complex content identified by SpecificOrbit to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SpecificOrbit.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitChangeChoiceType& setSpecificOrbit(const uci::type::COE_OrbitType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SpecificOrbit.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SpecificOrbit, false otherwise.
    */
  virtual bool isSpecificOrbit() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SpecificOrbit.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpecificOrbit.
    */
  virtual uci::type::COE_OrbitType& chooseSpecificOrbit(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SpecificPosition.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SpecificPosition.
    */
  virtual const uci::type::OrbitalVolumeType& getSpecificPosition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SpecificPosition.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SpecificPosition.
    */
  virtual uci::type::OrbitalVolumeType& getSpecificPosition() = 0;

  /** Sets the complex content identified by SpecificPosition to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SpecificPosition.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitChangeChoiceType& setSpecificPosition(const uci::type::OrbitalVolumeType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SpecificPosition.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SpecificPosition, false
    *      otherwise.
    */
  virtual bool isSpecificPosition() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SpecificPosition.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpecificPosition.
    */
  virtual uci::type::OrbitalVolumeType& chooseSpecificPosition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Rendezvous.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Rendezvous.
    */
  virtual const uci::type::RSO_ApproachType& getRendezvous() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Rendezvous.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Rendezvous.
    */
  virtual uci::type::RSO_ApproachType& getRendezvous() = 0;

  /** Sets the complex content identified by Rendezvous to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Rendezvous.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitChangeChoiceType& setRendezvous(const uci::type::RSO_ApproachType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Rendezvous.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Rendezvous, false otherwise.
    */
  virtual bool isRendezvous() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Rendezvous.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Rendezvous.
    */
  virtual uci::type::RSO_ApproachType& chooseRendezvous(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ProximityOperations.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ProximityOperations.
    */
  virtual const uci::type::ProximityOperationsType& getProximityOperations() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ProximityOperations.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ProximityOperations.
    */
  virtual uci::type::ProximityOperationsType& getProximityOperations() = 0;

  /** Sets the complex content identified by ProximityOperations to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ProximityOperations.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitChangeChoiceType& setProximityOperations(const uci::type::ProximityOperationsType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ProximityOperations.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ProximityOperations, false
    *      otherwise.
    */
  virtual bool isProximityOperations() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ProximityOperations.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ProximityOperations.
    */
  virtual uci::type::ProximityOperationsType& chooseProximityOperations(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Longitude.
    *
    * @return The value of the simple primitive data type identified by Longitude.
    */
  virtual uci::type::AngleTypeValue getLongitude() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Longitude.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitChangeChoiceType& setLongitude(uci::type::AngleTypeValue value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Longitude.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Longitude, false otherwise.
    */
  virtual bool isLongitude() const = 0;

  /** Returns the value of the SimplePrimitive data type identified by SemimajorAxis.
    *
    * @return The value of the simple primitive data type identified by SemimajorAxis.
    */
  virtual uci::type::DistanceTypeValue getSemimajorAxis() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SemimajorAxis.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitChangeChoiceType& setSemimajorAxis(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SemimajorAxis.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SemimajorAxis, false otherwise.
    */
  virtual bool isSemimajorAxis() const = 0;

  /** Returns the value of the SimplePrimitive data type identified by Inclination.
    *
    * @return The value of the simple primitive data type identified by Inclination.
    */
  virtual uci::type::AngleHalfPositiveTypeValue getInclination() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Inclination.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitChangeChoiceType& setInclination(uci::type::AngleHalfPositiveTypeValue value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Inclination.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Inclination, false otherwise.
    */
  virtual bool isInclination() const = 0;

  /** Returns the value of the SimplePrimitive data type identified by Eccentricity.
    *
    * @return The value of the simple primitive data type identified by Eccentricity.
    */
  virtual xs::Double getEccentricity() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Eccentricity.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitChangeChoiceType& setEccentricity(xs::Double value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Eccentricity.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Eccentricity, false otherwise.
    */
  virtual bool isEccentricity() const = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RaceTrack.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RaceTrack.
    */
  virtual const uci::type::RaceTrackOrbitType& getRaceTrack() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RaceTrack.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RaceTrack.
    */
  virtual uci::type::RaceTrackOrbitType& getRaceTrack() = 0;

  /** Sets the complex content identified by RaceTrack to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RaceTrack.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitChangeChoiceType& setRaceTrack(const uci::type::RaceTrackOrbitType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RaceTrack.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RaceTrack, false otherwise.
    */
  virtual bool isRaceTrack() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by RaceTrack.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RaceTrack.
    */
  virtual uci::type::RaceTrackOrbitType& chooseRaceTrack(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OrbitChangeChoiceType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OrbitChangeChoiceType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OrbitChangeChoiceType to copy from.
    */
  OrbitChangeChoiceType(const OrbitChangeChoiceType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OrbitChangeChoiceType to the contents of the OrbitChangeChoiceType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OrbitChangeChoiceType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this OrbitChangeChoiceType.
    * @return A reference to this OrbitChangeChoiceType.
    */
  OrbitChangeChoiceType& operator=(const OrbitChangeChoiceType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ORBITCHANGECHOICETYPE_H

