/** @file CannotComplyEnum.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CANNOTCOMPLYENUM_H
#define UCI_TYPE_CANNOTCOMPLYENUM_H

#include <map>
#include <sstream>

#include "../base/Accessor.h"
#include "../base/export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The reason why an action (Task, Command, Activity, etc.) was rejected, interrupted, unallocated or failed. */
class CannotComplyEnum : public virtual uci::base::Accessor {
public:

  /** The following are the enumerated items that comprise this enumeration */
  enum EnumerationItem {

    /** Enumerated item that indicates that the enumeration has not been set */
    enumNotSet,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because the number of
      * attempts specified in the command was reached before the action achieved the desired result.
      */
    UCI_CONSTRAINT_ATTEMPTS,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because of insufficient
      * endurance. For example, fuel or battery limitations. This is a generalization of the former
      * INSUFFICIENT_FUEL_QUANTITY indication.
      */
    UCI_CONSTRAINT_ENDURANCE,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because the classification
      * of the action, actor, capability or associated elements is inconsistent.
      */
    UCI_CONSTRAINT_CLASSIFICATION,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because it exceeds field of
      * regard (FOR) or field of view (FOV) limitations.
      */
    UCI_CONSTRAINT_FOR_FOV_LIMIT,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because of a gating
      * constraint on the command. For example, the target of the action didn't meet velocity, range, power, etc.
      * gates/filters in the command.
      */
    UCI_CONSTRAINT_GATING,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because maneuvering exceeds
      * maneuver limits of the action.
      */
    UCI_CONSTRAINT_MANEUVER_LIMIT,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because of a constraint
      * imposed by an "Op" message (OpZone, OpLine, OpRouting, etc.). For example, a Strike Task in a NO_FIRE OpZone. This is
      * a generalization of the previous NO_FIRE or NO_IMAGE indications.
      */
    UCI_CONSTRAINT_OP,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because of line of sight
      * limitations due to terrain occlusion.
      */
    UCI_CONSTRAINT_OCCLUSION,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because of a range related
      * limitation of the associated Capability. This is a generalization of the former INSUFFICIENT_SENSOR_RANGE indication.
      */
    UCI_CAPABILITY_RANGE,

    /** Indicates that Resource Manager cannot allocate resources to the action (Task, [Capability]Command,
      * [SupportingCapability]Command, [Capability]Activity, etc.) such that the PerformanceConstraints in
      * PerformanceMetricSetType are met.
      */
    UCI_CAPABILITY_PERFORMANCE,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because of a conflict
      * between the needed/commanded RF parameters and the RF spectrum available. For example, the commanded RF band isn't
      * supported by the loaded MDF of a Capability or there is an active RF_Profile that doesn't allow transmission in the
      * commanded band. This is a generalization of the former INVALID_RF_BAND, RF_SPECTRUM_LIMITED, RF_UNAVAILABLE and
      * RF_PROFILE_RESTRICTION.
      */
    UCI_CONSTRAINT_RF,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because it isn't achievable
      * given the currently planned route. Alternatively, a route to achieve the action couldn't be generated.
      */
    UCI_CONSTRAINT_ROUTE,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because of a safety related
      * constraint.
      */
    UCI_CONSTRAINT_SAFETY,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because of command
      * constraints on the angle between the actor and the target of the action.
      */
    UCI_CONSTRAINT_TARGET_ANGLE,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because it has temporal
      * requirements that can't be achieved or were reached before the action achieved the desired result.
      */
    UCI_CONSTRAINT_TIME,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because it was constrained
      * for allocation to a specific System that cannot complete it. This is a generalization of the previous
      * INELIGIBLE_VEHICLE indication.
      */
    UCI_CONSTRAINT_SYSTEM,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because a route to achieve
      * the action couldn't be generated.
      */
    UCI_INFEASIBLE_ROUTE,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily due to a general mission
      * event (flight contingency, mission contingency, allocation change, etc.). This is generalization of the previous
      * MISSION_EVENT indication.
      */
    UCI_MISSION_EVENT,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because of current/future
      * state or settings of the corresponding Capability or Subsystem.
      */
    UCI_STATE_OR_SETTINGS,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because a change in the
      * state or settings of the corresponding Capability or Subsystem.
      */
    UCI_STATE_OR_SETTINGS_CHANGE,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because the associated
      * System wasn't available at the needed time.
      */
    UCI_SYSTEM_UNAVAILABLE,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because the associated
      * System is faulted.
      */
    UCI_SYSTEM_FAULT,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because the action results
      * in conflict with another System's route, sensor, weapon or other plans/actions.
      */
    UCI_SYSTEM_CONFLICT,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because the associated
      * Subsystem wasn't available at the needed time.
      */
    UCI_SUBSYSTEM_UNAVAILABLE,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because the associated
      * Subsystem is faulted.
      */
    UCI_SUBSYSTEM_FAULT,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because the associated
      * Capability is faulted.
      */
    UCI_CAPABILITY_FAULT,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because the precedence of
      * its associated Capability within the associated Subsystem wasn't high enough for the action to proceed.
      */
    UCI_CAPABILITY_PRECEDENCE,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because the associated
      * Capability wasn't available at the needed time.
      */
    UCI_CAPABILITY_UNAVAILABLE,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because of insufficient
      * resources (e.g. signal processors, memory or other items generally subordinate to Subsystems and Capabilities). In
      * this condition, the associated Capability, Subsystem and System should be otherwise able to perform the action.
      */
    UCI_INSUFFICIENT_RESOURCES,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because its ranking wasn't
      * high enough to gain or maintain access to the required capability.
      */
    UCI_RANKING,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because of weather effects.
      */
    UCI_WEATHER,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because the source of the
      * action isn't eligible and/or hasn't been granted permission to control (mission control, primary capability control,
      * secondary capability control, automated capability management) the associated System or Capability. This is a
      * generalization of the former SYSTEM_NOT_IN_CONTROL and SERVICE_NOT_IN_CONTROL.
      */
    UCI_INELIGIBLE_CONTROL_SOURCE,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because a required
      * predecessor action wasn't allocated, unallocated, failed, etc. This is a generalization of the former
      * UNASSIGNABLE_DEPENDENT_TASK.
      */
    UCI_DEPENDENCY_PREDECESSOR,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because it has an "all or
      * nothing" association with another action that wasn't allocated, unallocated, failed, etc. This is a generalization of
      * the former ALL_OR_NOTHING_TASK_CONSTRAINT.
      */
    UCI_DEPENDENCY_ALL_OR_NOTHING,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because it has an "either
      * or" association with another action that wasn't allocated, unallocated, failed, etc. This is a generalization of the
      * former EITHER_OR_TASK_CONSTRAINT.
      */
    UCI_DEPENDENCY_EITHER_OR,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because the initialization
      * conditions were not met.
      */
    UCI_INIT_CRITERIA_NOT_MET,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because the object
      * corresponding to an ID in the command could not be found.
      */
    UCI_UNKNOWN_ID,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because a parameter in the
      * action or other associated input was invalid.
      */
    UCI_INVALID_INPUT_PARAMETER,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because of another
      * unspecified input problem.
      */
    UCI_INPUT_OTHER,

    /** Indicates the action to activate an MDF ([Capability]SettingsCommand was rejected because the commanded MDF_ID and/or
      * SubCategory FileID is invalid or represents a file set that is not compliant with the Capability.
      */
    UCI_MDF_ACTIVATION_ERROR,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because of multiple sibling
      * enumeration reasons but a specific single reason isn't known.
      */
    UCI_MULTIPLE,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * canceled, generally by the originating source. This is a generalization of the previous USER_CANCELED indication.
      */
    UCI_CANCELED,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because of another reason
      * which hasn't yet been incorporated into the enumeration.
      */
    UCI_OTHER,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because of an unknown
      * reason.
      */
    UCI_UNKNOWN,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * aborted due to constraints and/or priorities of the mission or system. This is different from an action that was
      * canceled, rejected, or failed.
      */
    UCI_ABORTED,

    /** Indicates the action (Task, [Capability]Command, [SupportingCapability]Command, [Capability]Activity, etc.) was
      * rejected, interrupted, unallocated, failed or generally can't be completed satisfactorily because the store reports
      * conditions which indicate that their inertial navigation system platform quality is poor and the platform should
      * perform a maneuver to allow system to align itself.
      */
    UCI_ALIGNMENT_MANEUVER,

    /** Enumerated item that indicates maximum enumerated item exclusive of this item */
    enumMaxExclusive
  };

  /** Returns this accessor's type constant, i.e. cannotComplyEnum.
    *
    * @return This accessor's type constant, i.e. cannotComplyEnum.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::cannotComplyEnum;
  }

  /** The assignment operator. Sets the contents of this CannotComplyEnum to the contents of the CannotComplyEnum on the
    * right hand side (rhs) of the assignment operator.
    *
    * @param rhs The CannotComplyEnum on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this CannotComplyEnum.
    * @return A reference to this CannotComplyEnum.
    */
  CannotComplyEnum& operator=(const CannotComplyEnum& rhs) {
    setValue(rhs.getValue());
    return *this;
  }

  /** The assignment operator that sets the value of this CannotComplyEnum enumeration to the EnumerationItem on the right
    * hand side of the assignment operator.
    *
    * @param rhs The EnumerationItem whose value is to be assigned to this CannotComplyEnum enumeration.
    * @return A reference to this CannotComplyEnum enumeration.
    */
  CannotComplyEnum& operator=(EnumerationItem rhs) {
    setValue(rhs);
    return *this;
  }

  /** Sets the value of this CannotComplyEnum enumeration to the value of the specified enumeration item.
    *
    * @param item The EnumerationItem whose value is to be used to set the value of this CannotComplyEnum enumeration.
    */
  virtual void setValue(EnumerationItem item) = 0;

  /** Returns the value of this CannotComplyEnum enumeration.
    *
    * @param testForValidity=true Specifies whether this CannotComplyEnum enumeration should be validated (true) or not
    *      (false) as part of retrieving its value.
    * @return The value of this CannotComplyEnum enumeration.
    */
  virtual EnumerationItem getValue(bool testForValidity=true) const = 0;

  /** Returns the number of items in this CannotComplyEnum enumeration.
    *
    * @return The number of items in this CannotComplyEnum enumeration.
    */
  int getNumberOfItems() const noexception {
    return 46;
  }

  /** Returns whether this CannotComplyEnum enumeration is valid or not. A CannotComplyEnum enumeration is valid if its
    * value is one of the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @return A flag indicating whether this CannotComplyEnum enumeration is valid (true) or not (false).
    */
  virtual bool isValid() const noexception {
    return isValid(getValue(false));
  }

  /** Returns whether the specified enumeration item is valid or not. A enumeration item is valid if its value is one of
    * the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @param item The EnumerationItem to test.
    * @return A flag indicating whether the specified EnumerationItem is valid (true) or not (false).
    */
  static bool isValid(EnumerationItem item) noexception {
    return (item > enumNotSet) && (item < enumMaxExclusive);
  }

  /** Returns whether the specified name item is valid or not. A name is valid if it is the name of one of the enumeration
    * items other than enumNotSet and enumMaxExclusive.
    *
    * @param name The name to test.
    * @return A flag indicating whether the specified name is valid (true) or not (false).
    */
  static bool isValid(const std::string& name) noexception {
    FromNameTable::const_iterator iter = m_fromNameTable.find(name);
    return !(iter == m_fromNameTable.end());
  }

  /** Tests whether the value of the CannotComplyEnum enumeration on the right hand side of the == operator is equal to the
    * value as this CannotComplyEnum enumeration.
    *
    * @param rhs The CannotComplyEnum enumeration whose value is to be compared against the value of this CannotComplyEnum
    *      enumeration.
    * @return True if the value of the specified CannotComplyEnum enumeration (rhs) is equal to the value of this
    *      CannotComplyEnum enumeration, false otherwise.
    */
  bool operator==(const CannotComplyEnum& rhs) const {
    return getValue() == rhs.getValue();
  }

  /** Tests whether the value of the CannotComplyEnum enumeration on the right hand side of the != operator is not equal to
    * the value as this CannotComplyEnum enumeration.
    *
    * @param rhs The CannotComplyEnum enumeration whose value is to be compared against the value of this CannotComplyEnum
    *      enumeration.
    * @return True if the value of the specified CannotComplyEnum enumeration (rhs) is not equal to the value of this
    *      CannotComplyEnum enumeration, false otherwise.
    */
  bool operator!=(const CannotComplyEnum& rhs) const {
    return getValue() != rhs.getValue();
  }

  /** Tests whether the value of the CannotComplyEnum enumeration on the right hand side of the < operator is less than the
    * value as this CannotComplyEnum enumeration.
    *
    * @param rhs The CannotComplyEnum enumeration whose value is to be compared against the value of this CannotComplyEnum
    *      enumeration.
    * @return True if the value of the specified CannotComplyEnum enumeration (rhs) is less than the value of this
    *      CannotComplyEnum enumeration, false otherwise.
    */
  bool operator<(const CannotComplyEnum& rhs) const {
    return getValue() < rhs.getValue();
  }

  /** Tests whether the value of the CannotComplyEnum enumeration on the right hand side of the <= operator is less than or
    * equal to the value as this CannotComplyEnum enumeration.
    *
    * @param rhs The CannotComplyEnum enumeration whose value is to be compared against the value of this CannotComplyEnum
    *      enumeration.
    * @return True if the value of the specified CannotComplyEnum enumeration (rhs) is less than or equal to the value of
    *      this CannotComplyEnum enumeration, false otherwise.
    */
  bool operator<=(const CannotComplyEnum& rhs) const {
    return getValue() <= rhs.getValue();
  }

  /** Tests whether the value of the CannotComplyEnum enumeration on the right hand side of the > operator is greater than
    * the value as this CannotComplyEnum enumeration.
    *
    * @param rhs The CannotComplyEnum enumeration whose value is to be compared against the value of this CannotComplyEnum
    *      enumeration.
    * @return True if the value of the specified CannotComplyEnum enumeration (rhs) is greater than the value of this
    *      CannotComplyEnum enumeration, false otherwise.
    */
  bool operator>(const CannotComplyEnum& rhs) const {
    return getValue() > rhs.getValue();
  }

  /** Tests whether the value of the CannotComplyEnum enumeration on the right hand side of the >= operator is greater than
    * or equal to the value as this CannotComplyEnum enumeration.
    *
    * @param rhs The CannotComplyEnum enumeration whose value is to be compared against the value of this CannotComplyEnum
    *      enumeration.
    * @return True if the value of the specified CannotComplyEnum enumeration (rhs) is greater than or equal to the value
    *      of this CannotComplyEnum enumeration, false otherwise.
    */
  bool operator>=(const CannotComplyEnum& rhs) const {
    return getValue() >= rhs.getValue();
  }

  /** Tests whether the value of this CannotComplyEnum enumeration is equal to the value of the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this CannotComplyEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is equal to the value of this CannotComplyEnum enumeration,
    *      false otherwise.
    */
  bool operator==(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() == rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is equal to the value of the specified CannotComplyEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified CannotComplyEnum
    *      enumeration.
    * @param rhs The CannotComplyEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is equal to the value of the CannotComplyEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator==(EnumerationItem lhs, const CannotComplyEnum& rhs) {
    testForValidItem(lhs);
    return lhs == rhs.getValue();
  }

  /** Tests whether the value of this CannotComplyEnum enumeration is not equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this CannotComplyEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is not equal to the value of this CannotComplyEnum
    *      enumeration, false otherwise.
    */
  bool operator!=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() != rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is not equal to the value of the specified CannotComplyEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified CannotComplyEnum
    *      enumeration.
    * @param rhs The CannotComplyEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is not equal to the value of the CannotComplyEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator!=(EnumerationItem lhs, const CannotComplyEnum& rhs) {
    testForValidItem(lhs);
    return lhs != rhs.getValue();
  }

  /** Tests whether the value of this CannotComplyEnum enumeration is less than the value of the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this CannotComplyEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than the value of this CannotComplyEnum enumeration,
    *      false otherwise.
    */
  bool operator<(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() < rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than the value of the specified CannotComplyEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified CannotComplyEnum
    *      enumeration.
    * @param rhs The CannotComplyEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than the value of the CannotComplyEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator<(EnumerationItem lhs, const CannotComplyEnum& rhs) {
    testForValidItem(lhs);
    return lhs < rhs.getValue();
  }

  /** Tests whether the value of this CannotComplyEnum enumeration is less than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this CannotComplyEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than or equal to the value of this CannotComplyEnum
    *      enumeration, false otherwise.
    */
  bool operator<=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() <= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than or equal to the value of the specified
    * CannotComplyEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified CannotComplyEnum
    *      enumeration.
    * @param rhs The CannotComplyEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than or equal to the value of the CannotComplyEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator<=(EnumerationItem lhs, const CannotComplyEnum& rhs) {
    testForValidItem(lhs);
    return lhs <= rhs.getValue();
  }

  /** Tests whether the value of this CannotComplyEnum enumeration is greater than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this CannotComplyEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than the value of this CannotComplyEnum
    *      enumeration, false otherwise.
    */
  bool operator>(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() > rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than the value of the specified CannotComplyEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified CannotComplyEnum
    *      enumeration.
    * @param rhs The CannotComplyEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than the value of the CannotComplyEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator>(EnumerationItem lhs, const CannotComplyEnum& rhs) {
    testForValidItem(lhs);
    return lhs > rhs.getValue();
  }

  /** Tests whether the value of this CannotComplyEnum enumeration is greater than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this CannotComplyEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than or equal to the value of this CannotComplyEnum
    *      enumeration, false otherwise.
    */
  bool operator>=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() >= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than or equal to the value of the specified
    * CannotComplyEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified CannotComplyEnum
    *      enumeration.
    * @param rhs The CannotComplyEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than or equal to the value of the CannotComplyEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator>=(EnumerationItem lhs, const CannotComplyEnum& rhs) {
    testForValidItem(lhs);
    return lhs >= rhs.getValue();
  }

  /** Returns the name of the specified enumeration item.
    *
    * @param item The enumeration item whose name is to be returned.
    * @return The enumeration item's name if valid.
    */
  static std::string toName(EnumerationItem item) {
    ToNameTable::const_iterator iter = m_toNameTable.find(item);
    if (iter == m_toNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to convert enumerated item to its name, item not found in mapping: " << item;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Returns the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item to be returned.
    * @return The enumeration item having the specified name.
    */
  static EnumerationItem fromName(const std::string& itemName) {
    FromNameTable::const_iterator iter = m_fromNameTable.find(itemName);
    if (iter == m_fromNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to return enumerated item having specified name, name not found in mapping: " << itemName;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Return the name of the enumeration item that the value of this CannotComplyEnum enumeration is set to.
    *
    * @return The name of the enumeration item.
    */
  virtual std::string toName() const {
    return toName(getValue());
  }

  /** Sets the value of this CannotComplyEnum enumeration to the value of the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item whose value is to be used to set this CannotComplyEnum enumeration
    *      to.
    */
  virtual void setValueFromName(const std::string& itemName) {
    setValue(fromName(itemName));
  }

protected:

  /** The default constructor. In addition to constructing a new CannotComplyEnum, this constructor also makes sure the
    * conversion tables are initialized.
    */
  CannotComplyEnum() {
  }

  /** The destructor [only available to derived classes]. */
  ~CannotComplyEnum() {
  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param additionalDescription An additional description to include in the error message should an exception be thrown.
    * @param item The enumeration item to test.
    */
  static void testForValidItem(const char* additionalDescription, EnumerationItem item) {
    if (!isValid(item)) {
      std::ostringstream oStream;
      oStream << additionalDescription << ": " << item << " (item must be between " << enumNotSet << " and "<< enumMaxExclusive << " exclusive)";
      throw uci::base::UCIException(oStream.str(), 0);
    }

  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param item The enumeration item to test.
    */
  static void testForValidItem(EnumerationItem item) {
    testForValidItem("Invalid enumerated item specified", item);
  }

private:

  /** The type of table that is used to lookup the name of a enumeration item given that enumeration item. */
  typedef std::map<EnumerationItem, const std::string> ToNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  typedef std::map<const std::string, EnumerationItem> FromNameTable;

  /** The table that is used to lookup the name of a enumeration item given that enumeration item. */
  static UCI_EXPORT ToNameTable m_toNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  static UCI_EXPORT FromNameTable m_fromNameTable;

protected:

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CannotComplyEnum to copy from.
    */
  CannotComplyEnum(const CannotComplyEnum& rhs) {
    (void)rhs;
  }

};

} // namespace type
} // namespace uci

template<typename charT, typename traits>
std::basic_ostream<charT, traits>&
operator<<(std::basic_ostream<charT, traits>& oStream, const uci::type::CannotComplyEnum& enumeration)
{
  oStream << enumeration.toName();
  return oStream;
}

#endif // UCI_TYPE_CANNOTCOMPLYENUM_H

