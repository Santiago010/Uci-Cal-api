/** @file SAR_ActivityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SAR_ACTIVITYTYPE_H
#define UCI_TYPE_SAR_ACTIVITYTYPE_H

#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/MultistaticModeOptionsEmployedType.h"
#include "uci/type/RadarPointingTargetType.h"
#include "uci/type/SAR_ActivityStatusDetailType.h"
#include "uci/type/SAR_PredictedCollectionsType.h"
#include "uci/type/SAR_SubCapabilityEnum.h"
#include "uci/type/SharedRF_ApertureActivityBaseType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SAR_ActivityType : public virtual SharedRF_ApertureActivityBaseType {
public:

  /** This method constructs a new SAR_ActivityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SAR_ActivityType.
    */
  static UCI_EXPORT SAR_ActivityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SAR_ActivityType initializing the data accessed by the new SAR_ActivityType using the
    * data accessed by the specified SAR_ActivityType (cloning).
    *
    * @param accessor The SAR_ActivityType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SAR_ActivityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SAR_ActivityType.
    */
  static UCI_EXPORT SAR_ActivityType& create(const SAR_ActivityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SAR_ActivityType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The SAR_ActivityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SAR_ActivityType& accessor);

  /** Returns this accessor's type constant, i.e. sAR_ActivityType.
    *
    * @return This accessor's type constant, i.e. sAR_ActivityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sAR_ActivityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SAR_ActivityType.
    *
    * @return The version that was initialized from the uci:version attribute of SAR_ActivityType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SAR_ActivityType& accessor) = 0;

  /** Indicates a specific SubCapability associated with the Activity. If omitted, all SubCapabilities of the associated
    * Capability are applicable for the Activity. This element is required whenever a subset of SubCapabilities of a
    * Capability are used by the Activity. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 2]
    */
  typedef uci::base::BoundedList<uci::type::SAR_SubCapabilityEnum, uci::type::accessorType::sAR_SubCapabilityEnum> SubCapability;

  /** Indicates actual performance metrics that provide the system insight regarding the progress of an activity,
    * description of the results of an activity and related stats. This is a list to provide reporting for all revisits
    * between activity messages. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SAR_ActivityStatusDetailType, uci::type::accessorType::sAR_ActivityStatusDetailType> Metrics;

  /** Supports interaction with a capability assessment function. This allows a subsystem or a model of a subsystem to
    * estimate future performance. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SAR_PredictedCollectionsType, uci::type::accessorType::sAR_PredictedCollectionsType> PredictedCollections;

  /** Indicates which electronic protection IDs are in use for this activity. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType> ElectronicProtectionOptionsEmployed;

  /** Returns a const reference to the bounded list identified by SubCapability.
    *
    * @return A const reference to the bounded list identified by SubCapability.
    */
  virtual const uci::type::SAR_ActivityType::SubCapability& getSubCapability() const = 0;

  /** Returns a reference to the bounded list identified by SubCapability.
    *
    * @return A reference to the bounded list identified by SubCapability.
    */
  virtual uci::type::SAR_ActivityType::SubCapability& getSubCapability() = 0;

  /** Sets the bounded list identified by SubCapability.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityType& setSubCapability(const uci::type::SAR_ActivityType::SubCapability& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Attempt.
    *
    * @return The value of the simple primitive data type identified by Attempt.
    */
  virtual xs::UnsignedInt getAttempt() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Attempt.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityType& setAttempt(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by Attempt exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Attempt is enabled or not.
    */
  virtual bool hasAttempt() const = 0;

  /** Clears (disabled) the Element identified by Attempt.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityType& clearAttempt() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RadarPointingTarget.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RadarPointingTarget.
    */
  virtual const uci::type::RadarPointingTargetType& getRadarPointingTarget() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RadarPointingTarget.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RadarPointingTarget.
    */
  virtual uci::type::RadarPointingTargetType& getRadarPointingTarget() = 0;

  /** Sets the complex content identified by RadarPointingTarget to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RadarPointingTarget.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityType& setRadarPointingTarget(const uci::type::RadarPointingTargetType& value) = 0;

  /** Returns a const reference to the bounded list identified by Metrics.
    *
    * @return A const reference to the bounded list identified by Metrics.
    */
  virtual const uci::type::SAR_ActivityType::Metrics& getMetrics() const = 0;

  /** Returns a reference to the bounded list identified by Metrics.
    *
    * @return A reference to the bounded list identified by Metrics.
    */
  virtual uci::type::SAR_ActivityType::Metrics& getMetrics() = 0;

  /** Sets the bounded list identified by Metrics.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityType& setMetrics(const uci::type::SAR_ActivityType::Metrics& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by PolicyApplied.
    *
    * @return The value of the simple primitive data type identified by PolicyApplied.
    */
  virtual xs::Boolean getPolicyApplied() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PolicyApplied.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityType& setPolicyApplied(xs::Boolean value) = 0;

  /** Returns whether the Element identified by PolicyApplied exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PolicyApplied is enabled or not.
    */
  virtual bool hasPolicyApplied() const = 0;

  /** Clears (disabled) the Element identified by PolicyApplied.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityType& clearPolicyApplied() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AllProductsAndMessagesProduced.
    *
    * @return The value of the simple primitive data type identified by AllProductsAndMessagesProduced.
    */
  virtual xs::Boolean getAllProductsAndMessagesProduced() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AllProductsAndMessagesProduced.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityType& setAllProductsAndMessagesProduced(xs::Boolean value) = 0;

  /** Returns a const reference to the bounded list identified by PredictedCollections.
    *
    * @return A const reference to the bounded list identified by PredictedCollections.
    */
  virtual const uci::type::SAR_ActivityType::PredictedCollections& getPredictedCollections() const = 0;

  /** Returns a reference to the bounded list identified by PredictedCollections.
    *
    * @return A reference to the bounded list identified by PredictedCollections.
    */
  virtual uci::type::SAR_ActivityType::PredictedCollections& getPredictedCollections() = 0;

  /** Sets the bounded list identified by PredictedCollections.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityType& setPredictedCollections(const uci::type::SAR_ActivityType::PredictedCollections& value) = 0;

  /** Returns a const reference to the bounded list identified by ElectronicProtectionOptionsEmployed.
    *
    * @return A const reference to the bounded list identified by ElectronicProtectionOptionsEmployed.
    */
  virtual const uci::type::SAR_ActivityType::ElectronicProtectionOptionsEmployed& getElectronicProtectionOptionsEmployed() const = 0;

  /** Returns a reference to the bounded list identified by ElectronicProtectionOptionsEmployed.
    *
    * @return A reference to the bounded list identified by ElectronicProtectionOptionsEmployed.
    */
  virtual uci::type::SAR_ActivityType::ElectronicProtectionOptionsEmployed& getElectronicProtectionOptionsEmployed() = 0;

  /** Sets the bounded list identified by ElectronicProtectionOptionsEmployed.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityType& setElectronicProtectionOptionsEmployed(const uci::type::SAR_ActivityType::ElectronicProtectionOptionsEmployed& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * MultistaticModeOptionsEmployed.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      MultistaticModeOptionsEmployed.
    */
  virtual const uci::type::MultistaticModeOptionsEmployedType& getMultistaticModeOptionsEmployed() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * MultistaticModeOptionsEmployed.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      MultistaticModeOptionsEmployed.
    */
  virtual uci::type::MultistaticModeOptionsEmployedType& getMultistaticModeOptionsEmployed() = 0;

  /** Sets the complex content identified by MultistaticModeOptionsEmployed to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MultistaticModeOptionsEmployed.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityType& setMultistaticModeOptionsEmployed(const uci::type::MultistaticModeOptionsEmployedType& value) = 0;

  /** Returns whether the Element identified by MultistaticModeOptionsEmployed exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MultistaticModeOptionsEmployed is enabled or not.
    */
  virtual bool hasMultistaticModeOptionsEmployed() const = 0;

  /** Enables the Element identified by MultistaticModeOptionsEmployed.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      MultistaticModeOptionsEmployed.
    */
  virtual uci::type::MultistaticModeOptionsEmployedType& enableMultistaticModeOptionsEmployed(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MultistaticModeOptionsEmployed.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ActivityType& clearMultistaticModeOptionsEmployed() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SAR_ActivityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SAR_ActivityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SAR_ActivityType to copy from.
    */
  SAR_ActivityType(const SAR_ActivityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SAR_ActivityType to the contents of the SAR_ActivityType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SAR_ActivityType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this SAR_ActivityType.
    * @return A reference to this SAR_ActivityType.
    */
  SAR_ActivityType& operator=(const SAR_ActivityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SAR_ACTIVITYTYPE_H

