/** @file CapabilityUtilizationRequestType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CAPABILITYUTILIZATIONREQUESTTYPE_H
#define UCI_TYPE_CAPABILITYUTILIZATIONREQUESTTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ActivityCommandBaseType.h"
#include "CapabilityCommandBaseType.h"
#include "EntityID_Type.h"
#include "SystemRoutePlanSpecificationType.h"
#include "TaskID_InclusionType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The inputs used in generating and/or requesting a Capability Utilization Assessment. */
class CapabilityUtilizationRequestType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CapabilityUtilizationRequestType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CapabilityUtilizationRequestType.
    */
  static UCI_EXPORT CapabilityUtilizationRequestType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CapabilityUtilizationRequestType initializing the data accessed by the new
    * CapabilityUtilizationRequestType using the data accessed by the specified CapabilityUtilizationRequestType (cloning).
    *
    * @param accessor The CapabilityUtilizationRequestType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created CapabilityUtilizationRequestType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CapabilityUtilizationRequestType.
    */
  static UCI_EXPORT CapabilityUtilizationRequestType& create(const CapabilityUtilizationRequestType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CapabilityUtilizationRequestType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The CapabilityUtilizationRequestType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CapabilityUtilizationRequestType& accessor);

  /** Returns this accessor's type constant, i.e. capabilityUtilizationRequestType.
    *
    * @return This accessor's type constant, i.e. capabilityUtilizationRequestType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::capabilityUtilizationRequestType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CapabilityUtilizationRequestType.
    *
    * @return The version that was initialized from the uci:version attribute of CapabilityUtilizationRequestType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CapabilityUtilizationRequestType& accessor) = 0;

  /** This element is used if the assessment should be generated in regards to only certain threats. If this element is not
    * specified then all entities are considered. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EntityID_Type, uci::type::accessorType::entityID_Type> EntityID;

  /** Represents a list of tasks (beyond those allocated to the constraint MissionPlan if defined) that should also be
    * assessed as ad hoc relative to the baseline Mission Plan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::TaskID_InclusionType, uci::type::accessorType::taskID_InclusionType> TaskIdentifier;

  /** Represents a list of capability commands (beyond those allocated to the constraint MissionPlan if defined) that
    * should also be assessed as ad hoc relative to the baseline Mission Plan. This is depicted by the
    * CapabilityCommandBaseType with the expectation that the user will populate with more specific {Capability}Command
    * types. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CapabilityCommandBaseType, uci::type::accessorType::capabilityCommandBaseType> CapabilityCommand;

  /** Represents a list of activity commands(beyond those allocated to the constraint MissionPlan if defined) that should
    * also be assessed as ad hoc relative to the baseline Mission Plan. This is depicted by the ActivityCommandBaseType
    * with the expectation that the user will populate with more specific {Capability}Command types. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ActivityCommandBaseType, uci::type::accessorType::activityCommandBaseType> ActivityCommand;

  /** Indicate which system or systems to assess. Optionally provide additional information about the position of each
    * system and any capabilities to consider in conjunction with a specified system. [Occurrences: Minimum: 1; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SystemRoutePlanSpecificationType, uci::type::accessorType::systemRoutePlanSpecificationType> SystemToAssess;

  /** Indicate additional systems for the assessment, that are not to be assessed. Optionally provide additional
    * information about the position of each system and any capabilities to consider in conjunction with a specified
    * system. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SystemRoutePlanSpecificationType, uci::type::accessorType::systemRoutePlanSpecificationType> SupportingSystem;

  /** Returns a const reference to the bounded list identified by EntityID.
    *
    * @return A const reference to the bounded list identified by EntityID.
    */
  virtual const uci::type::CapabilityUtilizationRequestType::EntityID& getEntityID() const = 0;

  /** Returns a reference to the bounded list identified by EntityID.
    *
    * @return A reference to the bounded list identified by EntityID.
    */
  virtual uci::type::CapabilityUtilizationRequestType::EntityID& getEntityID() = 0;

  /** Sets the bounded list identified by EntityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityUtilizationRequestType& setEntityID(const uci::type::CapabilityUtilizationRequestType::EntityID& value) = 0;

  /** Returns a const reference to the bounded list identified by TaskIdentifier.
    *
    * @return A const reference to the bounded list identified by TaskIdentifier.
    */
  virtual const uci::type::CapabilityUtilizationRequestType::TaskIdentifier& getTaskIdentifier() const = 0;

  /** Returns a reference to the bounded list identified by TaskIdentifier.
    *
    * @return A reference to the bounded list identified by TaskIdentifier.
    */
  virtual uci::type::CapabilityUtilizationRequestType::TaskIdentifier& getTaskIdentifier() = 0;

  /** Sets the bounded list identified by TaskIdentifier.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityUtilizationRequestType& setTaskIdentifier(const uci::type::CapabilityUtilizationRequestType::TaskIdentifier& value) = 0;

  /** Returns a const reference to the bounded list identified by CapabilityCommand.
    *
    * @return A const reference to the bounded list identified by CapabilityCommand.
    */
  virtual const uci::type::CapabilityUtilizationRequestType::CapabilityCommand& getCapabilityCommand() const = 0;

  /** Returns a reference to the bounded list identified by CapabilityCommand.
    *
    * @return A reference to the bounded list identified by CapabilityCommand.
    */
  virtual uci::type::CapabilityUtilizationRequestType::CapabilityCommand& getCapabilityCommand() = 0;

  /** Sets the bounded list identified by CapabilityCommand.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityUtilizationRequestType& setCapabilityCommand(const uci::type::CapabilityUtilizationRequestType::CapabilityCommand& value) = 0;

  /** Returns a const reference to the bounded list identified by ActivityCommand.
    *
    * @return A const reference to the bounded list identified by ActivityCommand.
    */
  virtual const uci::type::CapabilityUtilizationRequestType::ActivityCommand& getActivityCommand() const = 0;

  /** Returns a reference to the bounded list identified by ActivityCommand.
    *
    * @return A reference to the bounded list identified by ActivityCommand.
    */
  virtual uci::type::CapabilityUtilizationRequestType::ActivityCommand& getActivityCommand() = 0;

  /** Sets the bounded list identified by ActivityCommand.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityUtilizationRequestType& setActivityCommand(const uci::type::CapabilityUtilizationRequestType::ActivityCommand& value) = 0;

  /** Returns a const reference to the bounded list identified by SystemToAssess.
    *
    * @return A const reference to the bounded list identified by SystemToAssess.
    */
  virtual const uci::type::CapabilityUtilizationRequestType::SystemToAssess& getSystemToAssess() const = 0;

  /** Returns a reference to the bounded list identified by SystemToAssess.
    *
    * @return A reference to the bounded list identified by SystemToAssess.
    */
  virtual uci::type::CapabilityUtilizationRequestType::SystemToAssess& getSystemToAssess() = 0;

  /** Sets the bounded list identified by SystemToAssess.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityUtilizationRequestType& setSystemToAssess(const uci::type::CapabilityUtilizationRequestType::SystemToAssess& value) = 0;

  /** Returns a const reference to the bounded list identified by SupportingSystem.
    *
    * @return A const reference to the bounded list identified by SupportingSystem.
    */
  virtual const uci::type::CapabilityUtilizationRequestType::SupportingSystem& getSupportingSystem() const = 0;

  /** Returns a reference to the bounded list identified by SupportingSystem.
    *
    * @return A reference to the bounded list identified by SupportingSystem.
    */
  virtual uci::type::CapabilityUtilizationRequestType::SupportingSystem& getSupportingSystem() = 0;

  /** Sets the bounded list identified by SupportingSystem.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CapabilityUtilizationRequestType& setSupportingSystem(const uci::type::CapabilityUtilizationRequestType::SupportingSystem& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CapabilityUtilizationRequestType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CapabilityUtilizationRequestType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CapabilityUtilizationRequestType to copy from.
    */
  CapabilityUtilizationRequestType(const CapabilityUtilizationRequestType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CapabilityUtilizationRequestType to the contents of the
    * CapabilityUtilizationRequestType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The CapabilityUtilizationRequestType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this CapabilityUtilizationRequestType.
    * @return A reference to this CapabilityUtilizationRequestType.
    */
  CapabilityUtilizationRequestType& operator=(const CapabilityUtilizationRequestType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_CAPABILITYUTILIZATIONREQUESTTYPE_H

