/** @file SourceResolutionType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SOURCERESOLUTIONTYPE_H
#define UCI_TYPE_SOURCERESOLUTIONTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/DoubleAccessor.h"
#include "uci/base/export.h"
#include "uci/type/AnglePositiveType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/SpeedType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Characterizes the resolution of the sensor. */
class SourceResolutionType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SourceResolutionType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SourceResolutionType.
    */
  static UCI_EXPORT SourceResolutionType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SourceResolutionType initializing the data accessed by the new SourceResolutionType
    * using the data accessed by the specified SourceResolutionType (cloning).
    *
    * @param accessor The SourceResolutionType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SourceResolutionType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SourceResolutionType.
    */
  static UCI_EXPORT SourceResolutionType& create(const SourceResolutionType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SourceResolutionType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The SourceResolutionType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SourceResolutionType& accessor);

  /** Returns this accessor's type constant, i.e. sourceResolutionType.
    *
    * @return This accessor's type constant, i.e. sourceResolutionType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sourceResolutionType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SourceResolutionType.
    *
    * @return The version that was initialized from the uci:version attribute of SourceResolutionType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SourceResolutionType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by RangeResolution.
    *
    * @return The value of the simple primitive data type identified by RangeResolution.
    */
  virtual uci::type::DistanceTypeValue getRangeResolution() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RangeResolution.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& setRangeResolution(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by RangeResolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RangeResolution is enabled or not.
    */
  virtual bool hasRangeResolution() const = 0;

  /** Clears (disabled) the Element identified by RangeResolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& clearRangeResolution() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RangeRateResolution.
    *
    * @return The value of the simple primitive data type identified by RangeRateResolution.
    */
  virtual uci::type::SpeedTypeValue getRangeRateResolution() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RangeRateResolution.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& setRangeRateResolution(uci::type::SpeedTypeValue value) = 0;

  /** Returns whether the Element identified by RangeRateResolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RangeRateResolution is enabled or not.
    */
  virtual bool hasRangeRateResolution() const = 0;

  /** Clears (disabled) the Element identified by RangeRateResolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& clearRangeRateResolution() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AzimuthResolution.
    *
    * @return The value of the simple primitive data type identified by AzimuthResolution.
    */
  virtual uci::type::AnglePositiveTypeValue getAzimuthResolution() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AzimuthResolution.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& setAzimuthResolution(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by AzimuthResolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AzimuthResolution is enabled or not.
    */
  virtual bool hasAzimuthResolution() const = 0;

  /** Clears (disabled) the Element identified by AzimuthResolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& clearAzimuthResolution() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ElevationResolution.
    *
    * @return The value of the simple primitive data type identified by ElevationResolution.
    */
  virtual uci::type::AnglePositiveTypeValue getElevationResolution() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ElevationResolution.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& setElevationResolution(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by ElevationResolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ElevationResolution is enabled or not.
    */
  virtual bool hasElevationResolution() const = 0;

  /** Clears (disabled) the Element identified by ElevationResolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& clearElevationResolution() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AzimuthRateResolution.
    *
    * @return The value of the simple primitive data type identified by AzimuthRateResolution.
    */
  virtual uci::type::AnglePositiveTypeValue getAzimuthRateResolution() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AzimuthRateResolution.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& setAzimuthRateResolution(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by AzimuthRateResolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AzimuthRateResolution is enabled or not.
    */
  virtual bool hasAzimuthRateResolution() const = 0;

  /** Clears (disabled) the Element identified by AzimuthRateResolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& clearAzimuthRateResolution() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ElevationRateResolution.
    *
    * @return The value of the simple primitive data type identified by ElevationRateResolution.
    */
  virtual uci::type::AnglePositiveTypeValue getElevationRateResolution() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ElevationRateResolution.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& setElevationRateResolution(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by ElevationRateResolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ElevationRateResolution is enabled or not.
    */
  virtual bool hasElevationRateResolution() const = 0;

  /** Clears (disabled) the Element identified by ElevationRateResolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& clearElevationRateResolution() = 0;

  /** Returns the value of the SimplePrimitive data type identified by CosconeY_Resolution.
    *
    * @return The value of the simple primitive data type identified by CosconeY_Resolution.
    */
  virtual xs::Double getCosconeY_Resolution() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CosconeY_Resolution.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& setCosconeY_Resolution(xs::Double value) = 0;

  /** Returns whether the Element identified by CosconeY_Resolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CosconeY_Resolution is enabled or not.
    */
  virtual bool hasCosconeY_Resolution() const = 0;

  /** Clears (disabled) the Element identified by CosconeY_Resolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& clearCosconeY_Resolution() = 0;

  /** Returns the value of the SimplePrimitive data type identified by CosconeZ_Resolution.
    *
    * @return The value of the simple primitive data type identified by CosconeZ_Resolution.
    */
  virtual xs::Double getCosconeZ_Resolution() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CosconeZ_Resolution.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& setCosconeZ_Resolution(xs::Double value) = 0;

  /** Returns whether the Element identified by CosconeZ_Resolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CosconeZ_Resolution is enabled or not.
    */
  virtual bool hasCosconeZ_Resolution() const = 0;

  /** Clears (disabled) the Element identified by CosconeZ_Resolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& clearCosconeZ_Resolution() = 0;

  /** Returns the value of the SimplePrimitive data type identified by CosconeY_RateResolution.
    *
    * @return The value of the simple primitive data type identified by CosconeY_RateResolution.
    */
  virtual xs::Double getCosconeY_RateResolution() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CosconeY_RateResolution.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& setCosconeY_RateResolution(xs::Double value) = 0;

  /** Returns whether the Element identified by CosconeY_RateResolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CosconeY_RateResolution is enabled or not.
    */
  virtual bool hasCosconeY_RateResolution() const = 0;

  /** Clears (disabled) the Element identified by CosconeY_RateResolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& clearCosconeY_RateResolution() = 0;

  /** Returns the value of the SimplePrimitive data type identified by CosconeZ_RateResolution.
    *
    * @return The value of the simple primitive data type identified by CosconeZ_RateResolution.
    */
  virtual xs::Double getCosconeZ_RateResolution() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CosconeZ_RateResolution.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& setCosconeZ_RateResolution(xs::Double value) = 0;

  /** Returns whether the Element identified by CosconeZ_RateResolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CosconeZ_RateResolution is enabled or not.
    */
  virtual bool hasCosconeZ_RateResolution() const = 0;

  /** Clears (disabled) the Element identified by CosconeZ_RateResolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SourceResolutionType& clearCosconeZ_RateResolution() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SourceResolutionType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SourceResolutionType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SourceResolutionType to copy from.
    */
  SourceResolutionType(const SourceResolutionType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SourceResolutionType to the contents of the SourceResolutionType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SourceResolutionType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this SourceResolutionType.
    * @return A reference to this SourceResolutionType.
    */
  SourceResolutionType& operator=(const SourceResolutionType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SOURCERESOLUTIONTYPE_H

