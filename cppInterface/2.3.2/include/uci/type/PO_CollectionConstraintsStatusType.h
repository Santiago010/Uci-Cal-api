/** @file PO_CollectionConstraintsStatusType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_COLLECTIONCONSTRAINTSSTATUSTYPE_H
#define UCI_TYPE_PO_COLLECTIONCONSTRAINTSSTATUSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/PO_AngleConstraintControlsStatusType.h"
#include "uci/type/PO_ColorPatternConstraintControlsStatusType.h"
#include "uci/type/PO_GimbalOrientationConstraintControlsStatusType.h"
#include "uci/type/PO_SlantRangeConstraintControlsStatusType.h"
#include "uci/type/PO_SweepSpeedConstraintControlsStatusType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type is used to return the current settings of the set of constraints that constrain when a PO sensor can start
  * collecting the requested image data.
  */
class PO_CollectionConstraintsStatusType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PO_CollectionConstraintsStatusType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_CollectionConstraintsStatusType.
    */
  static UCI_EXPORT PO_CollectionConstraintsStatusType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_CollectionConstraintsStatusType initializing the data accessed by the new
    * PO_CollectionConstraintsStatusType using the data accessed by the specified PO_CollectionConstraintsStatusType
    * (cloning).
    *
    * @param accessor The PO_CollectionConstraintsStatusType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created PO_CollectionConstraintsStatusType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_CollectionConstraintsStatusType.
    */
  static UCI_EXPORT PO_CollectionConstraintsStatusType& create(const PO_CollectionConstraintsStatusType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_CollectionConstraintsStatusType. Use of the specified accessor after it has
    * been destroyed will result in undefined behavior.
    *
    * @param accessor The PO_CollectionConstraintsStatusType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_CollectionConstraintsStatusType& accessor);

  /** Returns this accessor's type constant, i.e. pO_CollectionConstraintsStatusType.
    *
    * @return This accessor's type constant, i.e. pO_CollectionConstraintsStatusType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_CollectionConstraintsStatusType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PO_CollectionConstraintsStatusType.
    *
    * @return The version that was initialized from the uci:version attribute of PO_CollectionConstraintsStatusType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_CollectionConstraintsStatusType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * MapAngleConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      MapAngleConstraints.
    */
  virtual const uci::type::PO_AngleConstraintControlsStatusType& getMapAngleConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MapAngleConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MapAngleConstraints.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& getMapAngleConstraints() = 0;

  /** Sets the complex content identified by MapAngleConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MapAngleConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& setMapAngleConstraints(const uci::type::PO_AngleConstraintControlsStatusType& value) = 0;

  /** Returns whether the Element identified by MapAngleConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MapAngleConstraints is enabled or not.
    */
  virtual bool hasMapAngleConstraints() const = 0;

  /** Enables the Element identified by MapAngleConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MapAngleConstraints.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& enableMapAngleConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MapAngleConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& clearMapAngleConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * GrazingAngleConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      GrazingAngleConstraints.
    */
  virtual const uci::type::PO_AngleConstraintControlsStatusType& getGrazingAngleConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * GrazingAngleConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      GrazingAngleConstraints.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& getGrazingAngleConstraints() = 0;

  /** Sets the complex content identified by GrazingAngleConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GrazingAngleConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& setGrazingAngleConstraints(const uci::type::PO_AngleConstraintControlsStatusType& value) = 0;

  /** Returns whether the Element identified by GrazingAngleConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by GrazingAngleConstraints is enabled or not.
    */
  virtual bool hasGrazingAngleConstraints() const = 0;

  /** Enables the Element identified by GrazingAngleConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      GrazingAngleConstraints.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& enableGrazingAngleConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by GrazingAngleConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& clearGrazingAngleConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * LookAngleConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      LookAngleConstraints.
    */
  virtual const uci::type::PO_AngleConstraintControlsStatusType& getLookAngleConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LookAngleConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LookAngleConstraints.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& getLookAngleConstraints() = 0;

  /** Sets the complex content identified by LookAngleConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LookAngleConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& setLookAngleConstraints(const uci::type::PO_AngleConstraintControlsStatusType& value) = 0;

  /** Returns whether the Element identified by LookAngleConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LookAngleConstraints is enabled or not.
    */
  virtual bool hasLookAngleConstraints() const = 0;

  /** Enables the Element identified by LookAngleConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by LookAngleConstraints.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& enableLookAngleConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LookAngleConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& clearLookAngleConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ElevationAngleConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ElevationAngleConstraints.
    */
  virtual const uci::type::PO_AngleConstraintControlsStatusType& getElevationAngleConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ElevationAngleConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ElevationAngleConstraints.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& getElevationAngleConstraints() = 0;

  /** Sets the complex content identified by ElevationAngleConstraints to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ElevationAngleConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& setElevationAngleConstraints(const uci::type::PO_AngleConstraintControlsStatusType& value) = 0;

  /** Returns whether the Element identified by ElevationAngleConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ElevationAngleConstraints is enabled or not.
    */
  virtual bool hasElevationAngleConstraints() const = 0;

  /** Enables the Element identified by ElevationAngleConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ElevationAngleConstraints.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& enableElevationAngleConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ElevationAngleConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& clearElevationAngleConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SlantRangeConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SlantRangeConstraints.
    */
  virtual const uci::type::PO_SlantRangeConstraintControlsStatusType& getSlantRangeConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SlantRangeConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SlantRangeConstraints.
    */
  virtual uci::type::PO_SlantRangeConstraintControlsStatusType& getSlantRangeConstraints() = 0;

  /** Sets the complex content identified by SlantRangeConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SlantRangeConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& setSlantRangeConstraints(const uci::type::PO_SlantRangeConstraintControlsStatusType& value) = 0;

  /** Returns whether the Element identified by SlantRangeConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SlantRangeConstraints is enabled or not.
    */
  virtual bool hasSlantRangeConstraints() const = 0;

  /** Enables the Element identified by SlantRangeConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SlantRangeConstraints.
    */
  virtual uci::type::PO_SlantRangeConstraintControlsStatusType& enableSlantRangeConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SlantRangeConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& clearSlantRangeConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CollectionPattern.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CollectionPattern.
    */
  virtual const uci::type::PO_ColorPatternConstraintControlsStatusType& getCollectionPattern() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CollectionPattern.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CollectionPattern.
    */
  virtual uci::type::PO_ColorPatternConstraintControlsStatusType& getCollectionPattern() = 0;

  /** Sets the complex content identified by CollectionPattern to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionPattern.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& setCollectionPattern(const uci::type::PO_ColorPatternConstraintControlsStatusType& value) = 0;

  /** Returns whether the Element identified by CollectionPattern exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionPattern is enabled or not.
    */
  virtual bool hasCollectionPattern() const = 0;

  /** Enables the Element identified by CollectionPattern.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CollectionPattern.
    */
  virtual uci::type::PO_ColorPatternConstraintControlsStatusType& enableCollectionPattern(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionPattern.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& clearCollectionPattern() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SunElevAngles.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SunElevAngles.
    */
  virtual const uci::type::PO_AngleConstraintControlsStatusType& getSunElevAngles() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SunElevAngles.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SunElevAngles.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& getSunElevAngles() = 0;

  /** Sets the complex content identified by SunElevAngles to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SunElevAngles.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& setSunElevAngles(const uci::type::PO_AngleConstraintControlsStatusType& value) = 0;

  /** Returns whether the Element identified by SunElevAngles exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SunElevAngles is enabled or not.
    */
  virtual bool hasSunElevAngles() const = 0;

  /** Enables the Element identified by SunElevAngles.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SunElevAngles.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& enableSunElevAngles(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SunElevAngles.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& clearSunElevAngles() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SunAzimuthAngles.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SunAzimuthAngles.
    */
  virtual const uci::type::PO_AngleConstraintControlsStatusType& getSunAzimuthAngles() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SunAzimuthAngles.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SunAzimuthAngles.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& getSunAzimuthAngles() = 0;

  /** Sets the complex content identified by SunAzimuthAngles to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SunAzimuthAngles.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& setSunAzimuthAngles(const uci::type::PO_AngleConstraintControlsStatusType& value) = 0;

  /** Returns whether the Element identified by SunAzimuthAngles exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SunAzimuthAngles is enabled or not.
    */
  virtual bool hasSunAzimuthAngles() const = 0;

  /** Enables the Element identified by SunAzimuthAngles.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SunAzimuthAngles.
    */
  virtual uci::type::PO_AngleConstraintControlsStatusType& enableSunAzimuthAngles(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SunAzimuthAngles.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& clearSunAzimuthAngles() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SweepSpeed.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SweepSpeed.
    */
  virtual const uci::type::PO_SweepSpeedConstraintControlsStatusType& getSweepSpeed() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SweepSpeed.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SweepSpeed.
    */
  virtual uci::type::PO_SweepSpeedConstraintControlsStatusType& getSweepSpeed() = 0;

  /** Sets the complex content identified by SweepSpeed to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SweepSpeed.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& setSweepSpeed(const uci::type::PO_SweepSpeedConstraintControlsStatusType& value) = 0;

  /** Returns whether the Element identified by SweepSpeed exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SweepSpeed is enabled or not.
    */
  virtual bool hasSweepSpeed() const = 0;

  /** Enables the Element identified by SweepSpeed.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SweepSpeed.
    */
  virtual uci::type::PO_SweepSpeedConstraintControlsStatusType& enableSweepSpeed(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SweepSpeed.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& clearSweepSpeed() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * GimbalOrientation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      GimbalOrientation.
    */
  virtual const uci::type::PO_GimbalOrientationConstraintControlsStatusType& getGimbalOrientation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by GimbalOrientation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by GimbalOrientation.
    */
  virtual uci::type::PO_GimbalOrientationConstraintControlsStatusType& getGimbalOrientation() = 0;

  /** Sets the complex content identified by GimbalOrientation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by GimbalOrientation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& setGimbalOrientation(const uci::type::PO_GimbalOrientationConstraintControlsStatusType& value) = 0;

  /** Returns whether the Element identified by GimbalOrientation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by GimbalOrientation is enabled or not.
    */
  virtual bool hasGimbalOrientation() const = 0;

  /** Enables the Element identified by GimbalOrientation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by GimbalOrientation.
    */
  virtual uci::type::PO_GimbalOrientationConstraintControlsStatusType& enableGimbalOrientation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by GimbalOrientation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_CollectionConstraintsStatusType& clearGimbalOrientation() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_CollectionConstraintsStatusType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_CollectionConstraintsStatusType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_CollectionConstraintsStatusType to copy from.
    */
  PO_CollectionConstraintsStatusType(const PO_CollectionConstraintsStatusType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_CollectionConstraintsStatusType to the contents of the
    * PO_CollectionConstraintsStatusType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The PO_CollectionConstraintsStatusType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this PO_CollectionConstraintsStatusType.
    * @return A reference to this PO_CollectionConstraintsStatusType.
    */
  PO_CollectionConstraintsStatusType& operator=(const PO_CollectionConstraintsStatusType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_COLLECTIONCONSTRAINTSSTATUSTYPE_H

