/** @file CommMADL_LinkStatusType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMMADL_LINKSTATUSTYPE_H
#define UCI_TYPE_COMMMADL_LINKSTATUSTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/UnsignedShortAccessor.h"
#include "../base/export.h"
#include "CommMADL_DataRateTypeEnum.h"
#include "CommMADL_LinkStateEnum.h"
#include "CommMADL_PeerNodeDataType.h"
#include "CommMADL_SearchTypeEnum.h"
#include "CommMADL_TimeSlotOE_PhaseTypeEnum.h"
#include "CommMADL_TimeSlotTxPhaseTypeEnum.h"
#include "CommMADL_TopologyEntryType.h"
#include "CommMADL_VoiceRxIndicatorTypeEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class CommMADL_LinkStatusType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CommMADL_LinkStatusType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommMADL_LinkStatusType.
    */
  static UCI_EXPORT CommMADL_LinkStatusType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CommMADL_LinkStatusType initializing the data accessed by the new
    * CommMADL_LinkStatusType using the data accessed by the specified CommMADL_LinkStatusType (cloning).
    *
    * @param accessor The CommMADL_LinkStatusType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created CommMADL_LinkStatusType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommMADL_LinkStatusType.
    */
  static UCI_EXPORT CommMADL_LinkStatusType& create(const CommMADL_LinkStatusType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CommMADL_LinkStatusType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The CommMADL_LinkStatusType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CommMADL_LinkStatusType& accessor);

  /** Returns this accessor's type constant, i.e. commMADL_LinkStatusType.
    *
    * @return This accessor's type constant, i.e. commMADL_LinkStatusType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commMADL_LinkStatusType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CommMADL_LinkStatusType.
    *
    * @return The version that was initialized from the uci:version attribute of CommMADL_LinkStatusType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CommMADL_LinkStatusType& accessor) = 0;

  /** If link connected, information on the network topology in this direction. This data is likely limited to verbose
    * Activity report. Size is based on allowed number of unique values for MemberNodeIdentifier. [Occurrences: Minimum: 0;
    * Maximum: 64]
    */
  typedef uci::base::BoundedList<uci::type::CommMADL_TopologyEntryType, uci::type::accessorType::commMADL_TopologyEntryType> MemberTopology;

  /** Returns a const reference to the value of the enumeration identified by LinkState.
    *
    * @return A const reference to the value of the enumeration identified by LinkState.
    */
  virtual const uci::type::CommMADL_LinkStateEnum& getLinkState() const = 0;

  /** Returns a reference to the value of the enumeration identified by LinkState.
    *
    * @return A reference to the value of the enumeration identified by LinkState.
    */
  virtual uci::type::CommMADL_LinkStateEnum& getLinkState() = 0;

  /** Sets the value of the enumeration identified by LinkState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setLinkState(const uci::type::CommMADL_LinkStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by LinkState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setLinkState(uci::type::CommMADL_LinkStateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ReceivedDataRate.
    *
    * @return A const reference to the value of the enumeration identified by ReceivedDataRate.
    */
  virtual const uci::type::CommMADL_DataRateTypeEnum& getReceivedDataRate() const = 0;

  /** Returns a reference to the value of the enumeration identified by ReceivedDataRate.
    *
    * @return A reference to the value of the enumeration identified by ReceivedDataRate.
    */
  virtual uci::type::CommMADL_DataRateTypeEnum& getReceivedDataRate() = 0;

  /** Sets the value of the enumeration identified by ReceivedDataRate.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setReceivedDataRate(const uci::type::CommMADL_DataRateTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by ReceivedDataRate.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setReceivedDataRate(uci::type::CommMADL_DataRateTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ReceivedDataRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReceivedDataRate is enabled or not.
    */
  virtual bool hasReceivedDataRate() const = 0;

  /** Enables the Element identified by ReceivedDataRate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ReceivedDataRate.
    */
  virtual uci::type::CommMADL_DataRateTypeEnum& enableReceivedDataRate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReceivedDataRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& clearReceivedDataRate() = 0;

  /** Returns a const reference to the value of the enumeration identified by ActualTxDataRate.
    *
    * @return A const reference to the value of the enumeration identified by ActualTxDataRate.
    */
  virtual const uci::type::CommMADL_DataRateTypeEnum& getActualTxDataRate() const = 0;

  /** Returns a reference to the value of the enumeration identified by ActualTxDataRate.
    *
    * @return A reference to the value of the enumeration identified by ActualTxDataRate.
    */
  virtual uci::type::CommMADL_DataRateTypeEnum& getActualTxDataRate() = 0;

  /** Sets the value of the enumeration identified by ActualTxDataRate.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setActualTxDataRate(const uci::type::CommMADL_DataRateTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by ActualTxDataRate.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setActualTxDataRate(uci::type::CommMADL_DataRateTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ActualTxDataRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActualTxDataRate is enabled or not.
    */
  virtual bool hasActualTxDataRate() const = 0;

  /** Enables the Element identified by ActualTxDataRate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ActualTxDataRate.
    */
  virtual uci::type::CommMADL_DataRateTypeEnum& enableActualTxDataRate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActualTxDataRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& clearActualTxDataRate() = 0;

  /** Returns the value of the SimplePrimitive data type identified by HigherDataRateCapable.
    *
    * @return The value of the simple primitive data type identified by HigherDataRateCapable.
    */
  virtual xs::Boolean getHigherDataRateCapable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by HigherDataRateCapable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setHigherDataRateCapable(xs::Boolean value) = 0;

  /** Returns whether the Element identified by HigherDataRateCapable exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by HigherDataRateCapable is enabled or not.
    */
  virtual bool hasHigherDataRateCapable() const = 0;

  /** Clears (disabled) the Element identified by HigherDataRateCapable.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& clearHigherDataRateCapable() = 0;

  /** Returns a const reference to the value of the enumeration identified by VoiceReceiptIndicator.
    *
    * @return A const reference to the value of the enumeration identified by VoiceReceiptIndicator.
    */
  virtual const uci::type::CommMADL_VoiceRxIndicatorTypeEnum& getVoiceReceiptIndicator() const = 0;

  /** Returns a reference to the value of the enumeration identified by VoiceReceiptIndicator.
    *
    * @return A reference to the value of the enumeration identified by VoiceReceiptIndicator.
    */
  virtual uci::type::CommMADL_VoiceRxIndicatorTypeEnum& getVoiceReceiptIndicator() = 0;

  /** Sets the value of the enumeration identified by VoiceReceiptIndicator.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setVoiceReceiptIndicator(const uci::type::CommMADL_VoiceRxIndicatorTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by VoiceReceiptIndicator.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setVoiceReceiptIndicator(uci::type::CommMADL_VoiceRxIndicatorTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by VoiceReceiptIndicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VoiceReceiptIndicator is enabled or not.
    */
  virtual bool hasVoiceReceiptIndicator() const = 0;

  /** Enables the Element identified by VoiceReceiptIndicator.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by VoiceReceiptIndicator.
    */
  virtual uci::type::CommMADL_VoiceRxIndicatorTypeEnum& enableVoiceReceiptIndicator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VoiceReceiptIndicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& clearVoiceReceiptIndicator() = 0;

  /** Returns the value of the SimplePrimitive data type identified by VoiceSource.
    *
    * @return The value of the simple primitive data type identified by VoiceSource.
    */
  virtual xs::UnsignedShort getVoiceSource() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by VoiceSource.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setVoiceSource(xs::UnsignedShort value) = 0;

  /** Returns whether the Element identified by VoiceSource exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VoiceSource is enabled or not.
    */
  virtual bool hasVoiceSource() const = 0;

  /** Clears (disabled) the Element identified by VoiceSource.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& clearVoiceSource() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PeerNodeData.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PeerNodeData.
    */
  virtual const uci::type::CommMADL_PeerNodeDataType& getPeerNodeData() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PeerNodeData.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PeerNodeData.
    */
  virtual uci::type::CommMADL_PeerNodeDataType& getPeerNodeData() = 0;

  /** Sets the complex content identified by PeerNodeData to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PeerNodeData.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setPeerNodeData(const uci::type::CommMADL_PeerNodeDataType& value) = 0;

  /** Returns whether the Element identified by PeerNodeData exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PeerNodeData is enabled or not.
    */
  virtual bool hasPeerNodeData() const = 0;

  /** Enables the Element identified by PeerNodeData.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PeerNodeData.
    */
  virtual uci::type::CommMADL_PeerNodeDataType& enablePeerNodeData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PeerNodeData.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& clearPeerNodeData() = 0;

  /** Returns a const reference to the bounded list identified by MemberTopology.
    *
    * @return A const reference to the bounded list identified by MemberTopology.
    */
  virtual const uci::type::CommMADL_LinkStatusType::MemberTopology& getMemberTopology() const = 0;

  /** Returns a reference to the bounded list identified by MemberTopology.
    *
    * @return A reference to the bounded list identified by MemberTopology.
    */
  virtual uci::type::CommMADL_LinkStatusType::MemberTopology& getMemberTopology() = 0;

  /** Sets the bounded list identified by MemberTopology.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setMemberTopology(const uci::type::CommMADL_LinkStatusType::MemberTopology& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by SearchPattern.
    *
    * @return A const reference to the value of the enumeration identified by SearchPattern.
    */
  virtual const uci::type::CommMADL_SearchTypeEnum& getSearchPattern() const = 0;

  /** Returns a reference to the value of the enumeration identified by SearchPattern.
    *
    * @return A reference to the value of the enumeration identified by SearchPattern.
    */
  virtual uci::type::CommMADL_SearchTypeEnum& getSearchPattern() = 0;

  /** Sets the value of the enumeration identified by SearchPattern.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setSearchPattern(const uci::type::CommMADL_SearchTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by SearchPattern.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setSearchPattern(uci::type::CommMADL_SearchTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by SearchPattern exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SearchPattern is enabled or not.
    */
  virtual bool hasSearchPattern() const = 0;

  /** Enables the Element identified by SearchPattern.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by SearchPattern.
    */
  virtual uci::type::CommMADL_SearchTypeEnum& enableSearchPattern(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SearchPattern.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& clearSearchPattern() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SearchVector.
    *
    * @return The value of the simple primitive data type identified by SearchVector.
    */
  virtual xs::Boolean getSearchVector() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SearchVector.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setSearchVector(xs::Boolean value) = 0;

  /** Returns whether the Element identified by SearchVector exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SearchVector is enabled or not.
    */
  virtual bool hasSearchVector() const = 0;

  /** Clears (disabled) the Element identified by SearchVector.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& clearSearchVector() = 0;

  /** Returns a const reference to the value of the enumeration identified by EvenOddPhase.
    *
    * @return A const reference to the value of the enumeration identified by EvenOddPhase.
    */
  virtual const uci::type::CommMADL_TimeSlotOE_PhaseTypeEnum& getEvenOddPhase() const = 0;

  /** Returns a reference to the value of the enumeration identified by EvenOddPhase.
    *
    * @return A reference to the value of the enumeration identified by EvenOddPhase.
    */
  virtual uci::type::CommMADL_TimeSlotOE_PhaseTypeEnum& getEvenOddPhase() = 0;

  /** Sets the value of the enumeration identified by EvenOddPhase.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setEvenOddPhase(const uci::type::CommMADL_TimeSlotOE_PhaseTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by EvenOddPhase.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setEvenOddPhase(uci::type::CommMADL_TimeSlotOE_PhaseTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by EvenOddPhase exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EvenOddPhase is enabled or not.
    */
  virtual bool hasEvenOddPhase() const = 0;

  /** Enables the Element identified by EvenOddPhase.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by EvenOddPhase.
    */
  virtual uci::type::CommMADL_TimeSlotOE_PhaseTypeEnum& enableEvenOddPhase(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EvenOddPhase.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& clearEvenOddPhase() = 0;

  /** Returns a const reference to the value of the enumeration identified by EarlyLatePhase.
    *
    * @return A const reference to the value of the enumeration identified by EarlyLatePhase.
    */
  virtual const uci::type::CommMADL_TimeSlotTxPhaseTypeEnum& getEarlyLatePhase() const = 0;

  /** Returns a reference to the value of the enumeration identified by EarlyLatePhase.
    *
    * @return A reference to the value of the enumeration identified by EarlyLatePhase.
    */
  virtual uci::type::CommMADL_TimeSlotTxPhaseTypeEnum& getEarlyLatePhase() = 0;

  /** Sets the value of the enumeration identified by EarlyLatePhase.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setEarlyLatePhase(const uci::type::CommMADL_TimeSlotTxPhaseTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by EarlyLatePhase.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setEarlyLatePhase(uci::type::CommMADL_TimeSlotTxPhaseTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by EarlyLatePhase exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EarlyLatePhase is enabled or not.
    */
  virtual bool hasEarlyLatePhase() const = 0;

  /** Enables the Element identified by EarlyLatePhase.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by EarlyLatePhase.
    */
  virtual uci::type::CommMADL_TimeSlotTxPhaseTypeEnum& enableEarlyLatePhase(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EarlyLatePhase.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& clearEarlyLatePhase() = 0;

  /** Returns the value of the SimplePrimitive data type identified by HopOffset.
    *
    * @return The value of the simple primitive data type identified by HopOffset.
    */
  virtual xs::UnsignedShort getHopOffset() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by HopOffset.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& setHopOffset(xs::UnsignedShort value) = 0;

  /** Returns whether the Element identified by HopOffset exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by HopOffset is enabled or not.
    */
  virtual bool hasHopOffset() const = 0;

  /** Clears (disabled) the Element identified by HopOffset.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommMADL_LinkStatusType& clearHopOffset() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CommMADL_LinkStatusType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommMADL_LinkStatusType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommMADL_LinkStatusType to copy from.
    */
  CommMADL_LinkStatusType(const CommMADL_LinkStatusType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CommMADL_LinkStatusType to the contents of the
    * CommMADL_LinkStatusType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CommMADL_LinkStatusType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this CommMADL_LinkStatusType.
    * @return A reference to this CommMADL_LinkStatusType.
    */
  CommMADL_LinkStatusType& operator=(const CommMADL_LinkStatusType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMMMADL_LINKSTATUSTYPE_H

