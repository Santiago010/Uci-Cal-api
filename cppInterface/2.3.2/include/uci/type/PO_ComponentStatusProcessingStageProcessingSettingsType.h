/** @file PO_ComponentStatusProcessingStageProcessingSettingsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_COMPONENTSTATUSPROCESSINGSTAGEPROCESSINGSETTINGSTYPE_H
#define UCI_TYPE_PO_COMPONENTSTATUSPROCESSINGSTAGEPROCESSINGSETTINGSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/DoubleAccessor.h"
#include "uci/base/export.h"
#include "uci/type/HSB_ColorControlType.h"
#include "uci/type/PO_ComponentStatusProcessingStagePixelScalingType.h"
#include "uci/type/PercentType.h"
#include "uci/type/RGB_ColorControlType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PO_ComponentStatusProcessingStageProcessingSettingsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PO_ComponentStatusProcessingStageProcessingSettingsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_ComponentStatusProcessingStageProcessingSettingsType.
    */
  static UCI_EXPORT PO_ComponentStatusProcessingStageProcessingSettingsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_ComponentStatusProcessingStageProcessingSettingsType initializing the data accessed
    * by the new PO_ComponentStatusProcessingStageProcessingSettingsType using the data accessed by the specified
    * PO_ComponentStatusProcessingStageProcessingSettingsType (cloning).
    *
    * @param accessor The PO_ComponentStatusProcessingStageProcessingSettingsType that provides access to the data that is
    *      to be used to initialize the data accessed by the new created
    *      PO_ComponentStatusProcessingStageProcessingSettingsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_ComponentStatusProcessingStageProcessingSettingsType.
    */
  static UCI_EXPORT PO_ComponentStatusProcessingStageProcessingSettingsType& create(const PO_ComponentStatusProcessingStageProcessingSettingsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_ComponentStatusProcessingStageProcessingSettingsType. Use of the specified
    * accessor after it has been destroyed will result in undefined behavior.
    *
    * @param accessor The PO_ComponentStatusProcessingStageProcessingSettingsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_ComponentStatusProcessingStageProcessingSettingsType& accessor);

  /** Returns this accessor's type constant, i.e. pO_ComponentStatusProcessingStageProcessingSettingsType.
    *
    * @return This accessor's type constant, i.e. pO_ComponentStatusProcessingStageProcessingSettingsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_ComponentStatusProcessingStageProcessingSettingsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of
    * PO_ComponentStatusProcessingStageProcessingSettingsType.
    *
    * @return The version that was initialized from the uci:version attribute of
    *      PO_ComponentStatusProcessingStageProcessingSettingsType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_ComponentStatusProcessingStageProcessingSettingsType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PixelScaling.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PixelScaling.
    */
  virtual const uci::type::PO_ComponentStatusProcessingStagePixelScalingType& getPixelScaling() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PixelScaling.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PixelScaling.
    */
  virtual uci::type::PO_ComponentStatusProcessingStagePixelScalingType& getPixelScaling() = 0;

  /** Sets the complex content identified by PixelScaling to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PixelScaling.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType& setPixelScaling(const uci::type::PO_ComponentStatusProcessingStagePixelScalingType& value) = 0;

  /** Returns whether the Element identified by PixelScaling exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PixelScaling is enabled or not.
    */
  virtual bool hasPixelScaling() const = 0;

  /** Enables the Element identified by PixelScaling.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PixelScaling.
    */
  virtual uci::type::PO_ComponentStatusProcessingStagePixelScalingType& enablePixelScaling(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PixelScaling.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType& clearPixelScaling() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * HSB_ColorControlStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      HSB_ColorControlStatus.
    */
  virtual const uci::type::HSB_ColorControlType& getHSB_ColorControlStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by HSB_ColorControlStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by HSB_ColorControlStatus.
    */
  virtual uci::type::HSB_ColorControlType& getHSB_ColorControlStatus() = 0;

  /** Sets the complex content identified by HSB_ColorControlStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by HSB_ColorControlStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType& setHSB_ColorControlStatus(const uci::type::HSB_ColorControlType& value) = 0;

  /** Returns whether the Element identified by HSB_ColorControlStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by HSB_ColorControlStatus is enabled or not.
    */
  virtual bool hasHSB_ColorControlStatus() const = 0;

  /** Enables the Element identified by HSB_ColorControlStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by HSB_ColorControlStatus.
    */
  virtual uci::type::HSB_ColorControlType& enableHSB_ColorControlStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by HSB_ColorControlStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType& clearHSB_ColorControlStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RGB_ColorControlStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RGB_ColorControlStatus.
    */
  virtual const uci::type::RGB_ColorControlType& getRGB_ColorControlStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RGB_ColorControlStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RGB_ColorControlStatus.
    */
  virtual uci::type::RGB_ColorControlType& getRGB_ColorControlStatus() = 0;

  /** Sets the complex content identified by RGB_ColorControlStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RGB_ColorControlStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType& setRGB_ColorControlStatus(const uci::type::RGB_ColorControlType& value) = 0;

  /** Returns whether the Element identified by RGB_ColorControlStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RGB_ColorControlStatus is enabled or not.
    */
  virtual bool hasRGB_ColorControlStatus() const = 0;

  /** Enables the Element identified by RGB_ColorControlStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RGB_ColorControlStatus.
    */
  virtual uci::type::RGB_ColorControlType& enableRGB_ColorControlStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RGB_ColorControlStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType& clearRGB_ColorControlStatus() = 0;

  /** Returns the value of the SimplePrimitive data type identified by GammaValue.
    *
    * @return The value of the simple primitive data type identified by GammaValue.
    */
  virtual xs::Double getGammaValue() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by GammaValue.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType& setGammaValue(xs::Double value) = 0;

  /** Returns whether the Element identified by GammaValue exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by GammaValue is enabled or not.
    */
  virtual bool hasGammaValue() const = 0;

  /** Clears (disabled) the Element identified by GammaValue.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType& clearGammaValue() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SharpnessValue.
    *
    * @return The value of the simple primitive data type identified by SharpnessValue.
    */
  virtual uci::type::PercentTypeValue getSharpnessValue() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SharpnessValue.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType& setSharpnessValue(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by SharpnessValue exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SharpnessValue is enabled or not.
    */
  virtual bool hasSharpnessValue() const = 0;

  /** Clears (disabled) the Element identified by SharpnessValue.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType& clearSharpnessValue() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EdgeEnhancement.
    *
    * @return The value of the simple primitive data type identified by EdgeEnhancement.
    */
  virtual uci::type::PercentTypeValue getEdgeEnhancement() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EdgeEnhancement.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType& setEdgeEnhancement(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by EdgeEnhancement exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EdgeEnhancement is enabled or not.
    */
  virtual bool hasEdgeEnhancement() const = 0;

  /** Clears (disabled) the Element identified by EdgeEnhancement.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType& clearEdgeEnhancement() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Zoom.
    *
    * @return The value of the simple primitive data type identified by Zoom.
    */
  virtual uci::type::PercentTypeValue getZoom() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Zoom.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType& setZoom(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by Zoom exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Zoom is enabled or not.
    */
  virtual bool hasZoom() const = 0;

  /** Clears (disabled) the Element identified by Zoom.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_ComponentStatusProcessingStageProcessingSettingsType& clearZoom() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_ComponentStatusProcessingStageProcessingSettingsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_ComponentStatusProcessingStageProcessingSettingsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_ComponentStatusProcessingStageProcessingSettingsType to copy from.
    */
  PO_ComponentStatusProcessingStageProcessingSettingsType(const PO_ComponentStatusProcessingStageProcessingSettingsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_ComponentStatusProcessingStageProcessingSettingsType to the
    * contents of the PO_ComponentStatusProcessingStageProcessingSettingsType on the right hand side (rhs) of the
    * assignment operator [only available to derived classes].
    *
    * @param rhs The PO_ComponentStatusProcessingStageProcessingSettingsType on the right hand side (rhs) of the assignment
    *      operator whose contents are used to set the contents of this
    *      PO_ComponentStatusProcessingStageProcessingSettingsType.
    * @return A reference to this PO_ComponentStatusProcessingStageProcessingSettingsType.
    */
  PO_ComponentStatusProcessingStageProcessingSettingsType& operator=(const PO_ComponentStatusProcessingStageProcessingSettingsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_COMPONENTSTATUSPROCESSINGSTAGEPROCESSINGSETTINGSTYPE_H

