/** @file RequirementConstraintsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_REQUIREMENTCONSTRAINTSTYPE_H
#define UCI_TYPE_REQUIREMENTCONSTRAINTSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/AnalyticConstraintsType.h"
#include "uci/type/ComparableRankingType.h"
#include "uci/type/DataProductClassificationLevelType.h"
#include "uci/type/EnvironmentPairingEnum.h"
#include "uci/type/RequirementAllocationParametersType.h"
#include "uci/type/RequirementDependencyType.h"
#include "uci/type/RequirementKinematicConstraintsType.h"
#include "uci/type/RequirementTaxonomyType.h"
#include "uci/type/RequirementTimingType.h"
#include "uci/type/SecurityInformationType.h"
#include "uci/type/VisibleString1024Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class RequirementConstraintsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RequirementConstraintsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RequirementConstraintsType.
    */
  static UCI_EXPORT RequirementConstraintsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RequirementConstraintsType initializing the data accessed by the new
    * RequirementConstraintsType using the data accessed by the specified RequirementConstraintsType (cloning).
    *
    * @param accessor The RequirementConstraintsType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created RequirementConstraintsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RequirementConstraintsType.
    */
  static UCI_EXPORT RequirementConstraintsType& create(const RequirementConstraintsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RequirementConstraintsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The RequirementConstraintsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RequirementConstraintsType& accessor);

  /** Returns this accessor's type constant, i.e. requirementConstraintsType.
    *
    * @return This accessor's type constant, i.e. requirementConstraintsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::requirementConstraintsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of RequirementConstraintsType.
    *
    * @return The version that was initialized from the uci:version attribute of RequirementConstraintsType.
    */
  static std::string getUCITypeVersion() {
    return "003.002.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RequirementConstraintsType& accessor) = 0;

  /** Indicates a temporal constraint on the Requirement. Allows for defining for each timing type (RequirementTimingEnum).
    * [Occurrences: Minimum: 0; Maximum: 4]
    */
  typedef uci::base::BoundedList<uci::type::RequirementTimingType, uci::type::accessorType::requirementTimingType> Timing;

  /** Indicates a constraint in the form of kinematic position of Requirement actor or actors. When more than one is given
    * they are logically ANDed. [Occurrences: Minimum: 0; Maximum: 4]
    */
  typedef uci::base::BoundedList<uci::type::RequirementKinematicConstraintsType, uci::type::accessorType::requirementKinematicConstraintsType> Kinematic;

  /** Indicates a constraint in the form of a temporal dependency between Requirements; between Effect, Action, Task,
    * [Capability]Command or Commands or Response. If more than one is given, they are logically ANDed. For example, a
    * pre-strike image collection (PO Task) might be required several minutes prior to a strike (Strike Task) to determine
    * combat ID and target coordinates. A post-strike image collection (PO Task) might be required several minutes after
    * the strike to inform battle damage assessment. The dependency between the three Tasks can be established with this
    * element. Assuming the Strike Task is the most difficult to plan/coordinate, the other two Tasks would likely each
    * have dependencies on the Strike Task in order to orchestrate the desired "look-shoot-look" sequence. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RequirementDependencyType, uci::type::accessorType::requirementDependencyType> Dependency;

  /** Indicates an allowed domain/environment which the Requirement can be employed from and and allowed "target"
    * domain/environment. See enumerated type annotations for further details. List size for this element is based on
    * "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 48]
    */
  typedef uci::base::BoundedList<uci::type::EnvironmentPairingEnum, uci::type::accessorType::environmentPairingEnum> AllowedDomainPairing;

  /** Indicates an excluded domain/environment which the Requirement can't be employed from an excluded "target"
    * domain/environment. See enumerated type annotations for further details. List size for this element is based on
    * "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 48]
    */
  typedef uci::base::BoundedList<uci::type::EnvironmentPairingEnum, uci::type::accessorType::environmentPairingEnum> ExcludedDomainPairing;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Rank.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Rank.
    */
  virtual const uci::type::ComparableRankingType& getRank() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Rank.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Rank.
    */
  virtual uci::type::ComparableRankingType& getRank() = 0;

  /** Sets the complex content identified by Rank to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Rank.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setRank(const uci::type::ComparableRankingType& value) = 0;

  /** Returns whether the Element identified by Rank exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Rank is enabled or not.
    */
  virtual bool hasRank() const = 0;

  /** Enables the Element identified by Rank.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Rank.
    */
  virtual uci::type::ComparableRankingType& enableRank(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Rank.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& clearRank() = 0;

  /** Returns the value of the SimplePrimitive data type identified by InterruptLowerRank.
    *
    * @return The value of the simple primitive data type identified by InterruptLowerRank.
    */
  virtual xs::Boolean getInterruptLowerRank() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InterruptLowerRank.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setInterruptLowerRank(xs::Boolean value) = 0;

  /** Returns whether the Element identified by InterruptLowerRank exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InterruptLowerRank is enabled or not.
    */
  virtual bool hasInterruptLowerRank() const = 0;

  /** Clears (disabled) the Element identified by InterruptLowerRank.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& clearInterruptLowerRank() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Allocation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Allocation.
    */
  virtual const uci::type::RequirementAllocationParametersType& getAllocation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Allocation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Allocation.
    */
  virtual uci::type::RequirementAllocationParametersType& getAllocation() = 0;

  /** Sets the complex content identified by Allocation to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Allocation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setAllocation(const uci::type::RequirementAllocationParametersType& value) = 0;

  /** Returns whether the Element identified by Allocation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Allocation is enabled or not.
    */
  virtual bool hasAllocation() const = 0;

  /** Enables the Element identified by Allocation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Allocation.
    */
  virtual uci::type::RequirementAllocationParametersType& enableAllocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Allocation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& clearAllocation() = 0;

  /** Returns a const reference to the bounded list identified by Timing.
    *
    * @return A const reference to the bounded list identified by Timing.
    */
  virtual const uci::type::RequirementConstraintsType::Timing& getTiming() const = 0;

  /** Returns a reference to the bounded list identified by Timing.
    *
    * @return A reference to the bounded list identified by Timing.
    */
  virtual uci::type::RequirementConstraintsType::Timing& getTiming() = 0;

  /** Sets the bounded list identified by Timing.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setTiming(const uci::type::RequirementConstraintsType::Timing& value) = 0;

  /** Returns a const reference to the bounded list identified by Kinematic.
    *
    * @return A const reference to the bounded list identified by Kinematic.
    */
  virtual const uci::type::RequirementConstraintsType::Kinematic& getKinematic() const = 0;

  /** Returns a reference to the bounded list identified by Kinematic.
    *
    * @return A reference to the bounded list identified by Kinematic.
    */
  virtual uci::type::RequirementConstraintsType::Kinematic& getKinematic() = 0;

  /** Sets the bounded list identified by Kinematic.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setKinematic(const uci::type::RequirementConstraintsType::Kinematic& value) = 0;

  /** Returns a const reference to the bounded list identified by Dependency.
    *
    * @return A const reference to the bounded list identified by Dependency.
    */
  virtual const uci::type::RequirementConstraintsType::Dependency& getDependency() const = 0;

  /** Returns a reference to the bounded list identified by Dependency.
    *
    * @return A reference to the bounded list identified by Dependency.
    */
  virtual uci::type::RequirementConstraintsType::Dependency& getDependency() = 0;

  /** Sets the bounded list identified by Dependency.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setDependency(const uci::type::RequirementConstraintsType::Dependency& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * MaxProductDisseminationClassificationLevel.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      MaxProductDisseminationClassificationLevel.
    */
  virtual const uci::type::DataProductClassificationLevelType& getMaxProductDisseminationClassificationLevel() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * MaxProductDisseminationClassificationLevel.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      MaxProductDisseminationClassificationLevel.
    */
  virtual uci::type::DataProductClassificationLevelType& getMaxProductDisseminationClassificationLevel() = 0;

  /** Sets the complex content identified by MaxProductDisseminationClassificationLevel to the contents of the complex
    * content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MaxProductDisseminationClassificationLevel.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setMaxProductDisseminationClassificationLevel(const uci::type::DataProductClassificationLevelType& value) = 0;

  /** Returns whether the Element identified by MaxProductDisseminationClassificationLevel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MaxProductDisseminationClassificationLevel is enabled
    *      or not.
    */
  virtual bool hasMaxProductDisseminationClassificationLevel() const = 0;

  /** Enables the Element identified by MaxProductDisseminationClassificationLevel.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      MaxProductDisseminationClassificationLevel.
    */
  virtual uci::type::DataProductClassificationLevelType& enableMaxProductDisseminationClassificationLevel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MaxProductDisseminationClassificationLevel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& clearMaxProductDisseminationClassificationLevel() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Analytic.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Analytic.
    */
  virtual const uci::type::AnalyticConstraintsType& getAnalytic() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Analytic.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Analytic.
    */
  virtual uci::type::AnalyticConstraintsType& getAnalytic() = 0;

  /** Sets the complex content identified by Analytic to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Analytic.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setAnalytic(const uci::type::AnalyticConstraintsType& value) = 0;

  /** Returns whether the Element identified by Analytic exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Analytic is enabled or not.
    */
  virtual bool hasAnalytic() const = 0;

  /** Enables the Element identified by Analytic.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Analytic.
    */
  virtual uci::type::AnalyticConstraintsType& enableAnalytic(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Analytic.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& clearAnalytic() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AcceptableClassificationLevel.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AcceptableClassificationLevel.
    */
  virtual const uci::type::SecurityInformationType& getAcceptableClassificationLevel() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * AcceptableClassificationLevel.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AcceptableClassificationLevel.
    */
  virtual uci::type::SecurityInformationType& getAcceptableClassificationLevel() = 0;

  /** Sets the complex content identified by AcceptableClassificationLevel to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AcceptableClassificationLevel.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setAcceptableClassificationLevel(const uci::type::SecurityInformationType& value) = 0;

  /** Returns whether the Element identified by AcceptableClassificationLevel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AcceptableClassificationLevel is enabled or not.
    */
  virtual bool hasAcceptableClassificationLevel() const = 0;

  /** Enables the Element identified by AcceptableClassificationLevel.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AcceptableClassificationLevel.
    */
  virtual uci::type::SecurityInformationType& enableAcceptableClassificationLevel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AcceptableClassificationLevel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& clearAcceptableClassificationLevel() = 0;

  /** Returns the value of the SimplePrimitive data type identified by CommsRequired.
    *
    * @return The value of the simple primitive data type identified by CommsRequired.
    */
  virtual xs::Boolean getCommsRequired() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CommsRequired.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setCommsRequired(xs::Boolean value) = 0;

  /** Returns whether the Element identified by CommsRequired exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CommsRequired is enabled or not.
    */
  virtual bool hasCommsRequired() const = 0;

  /** Clears (disabled) the Element identified by CommsRequired.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& clearCommsRequired() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AllowedRequirementTypes.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AllowedRequirementTypes.
    */
  virtual const uci::type::RequirementTaxonomyType& getAllowedRequirementTypes() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * AllowedRequirementTypes.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AllowedRequirementTypes.
    */
  virtual uci::type::RequirementTaxonomyType& getAllowedRequirementTypes() = 0;

  /** Sets the complex content identified by AllowedRequirementTypes to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AllowedRequirementTypes.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setAllowedRequirementTypes(const uci::type::RequirementTaxonomyType& value) = 0;

  /** Returns whether the Element identified by AllowedRequirementTypes exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AllowedRequirementTypes is enabled or not.
    */
  virtual bool hasAllowedRequirementTypes() const = 0;

  /** Enables the Element identified by AllowedRequirementTypes.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AllowedRequirementTypes.
    */
  virtual uci::type::RequirementTaxonomyType& enableAllowedRequirementTypes(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AllowedRequirementTypes.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& clearAllowedRequirementTypes() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ExcludedRequirementTypes.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ExcludedRequirementTypes.
    */
  virtual const uci::type::RequirementTaxonomyType& getExcludedRequirementTypes() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ExcludedRequirementTypes.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ExcludedRequirementTypes.
    */
  virtual uci::type::RequirementTaxonomyType& getExcludedRequirementTypes() = 0;

  /** Sets the complex content identified by ExcludedRequirementTypes to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ExcludedRequirementTypes.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setExcludedRequirementTypes(const uci::type::RequirementTaxonomyType& value) = 0;

  /** Returns whether the Element identified by ExcludedRequirementTypes exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ExcludedRequirementTypes is enabled or not.
    */
  virtual bool hasExcludedRequirementTypes() const = 0;

  /** Enables the Element identified by ExcludedRequirementTypes.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ExcludedRequirementTypes.
    */
  virtual uci::type::RequirementTaxonomyType& enableExcludedRequirementTypes(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ExcludedRequirementTypes.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& clearExcludedRequirementTypes() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ConstraintsNarrative.
    *
    * @return A const reference to the accessor that provides access to the string identified by ConstraintsNarrative.
    */
  virtual const uci::type::VisibleString1024Type& getConstraintsNarrative() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ConstraintsNarrative.
    *
    * @return A reference to the accessor that provides access to the string identified by ConstraintsNarrative.
    */
  virtual uci::type::VisibleString1024Type& getConstraintsNarrative() = 0;

  /** Sets the string identified by ConstraintsNarrative to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ConstraintsNarrative.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setConstraintsNarrative(const uci::type::VisibleString1024Type& value) = 0;

  /** Sets the string identified by ConstraintsNarrative to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setConstraintsNarrative(const std::string& value) = 0;

  /** Sets the string identified by ConstraintsNarrative to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setConstraintsNarrative(const char* value) = 0;

  /** Returns whether the Element identified by ConstraintsNarrative exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConstraintsNarrative is enabled or not.
    */
  virtual bool hasConstraintsNarrative() const = 0;

  /** Enables the Element identified by ConstraintsNarrative.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ConstraintsNarrative.
    */
  virtual uci::type::VisibleString1024Type& enableConstraintsNarrative(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ConstraintsNarrative.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& clearConstraintsNarrative() = 0;

  /** Returns a const reference to the bounded list identified by AllowedDomainPairing.
    *
    * @return A const reference to the bounded list identified by AllowedDomainPairing.
    */
  virtual const uci::type::RequirementConstraintsType::AllowedDomainPairing& getAllowedDomainPairing() const = 0;

  /** Returns a reference to the bounded list identified by AllowedDomainPairing.
    *
    * @return A reference to the bounded list identified by AllowedDomainPairing.
    */
  virtual uci::type::RequirementConstraintsType::AllowedDomainPairing& getAllowedDomainPairing() = 0;

  /** Sets the bounded list identified by AllowedDomainPairing.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setAllowedDomainPairing(const uci::type::RequirementConstraintsType::AllowedDomainPairing& value) = 0;

  /** Returns a const reference to the bounded list identified by ExcludedDomainPairing.
    *
    * @return A const reference to the bounded list identified by ExcludedDomainPairing.
    */
  virtual const uci::type::RequirementConstraintsType::ExcludedDomainPairing& getExcludedDomainPairing() const = 0;

  /** Returns a reference to the bounded list identified by ExcludedDomainPairing.
    *
    * @return A reference to the bounded list identified by ExcludedDomainPairing.
    */
  virtual uci::type::RequirementConstraintsType::ExcludedDomainPairing& getExcludedDomainPairing() = 0;

  /** Sets the bounded list identified by ExcludedDomainPairing.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementConstraintsType& setExcludedDomainPairing(const uci::type::RequirementConstraintsType::ExcludedDomainPairing& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RequirementConstraintsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~RequirementConstraintsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RequirementConstraintsType to copy from.
    */
  RequirementConstraintsType(const RequirementConstraintsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RequirementConstraintsType to the contents of the
    * RequirementConstraintsType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The RequirementConstraintsType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this RequirementConstraintsType.
    * @return A reference to this RequirementConstraintsType.
    */
  RequirementConstraintsType& operator=(const RequirementConstraintsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_REQUIREMENTCONSTRAINTSTYPE_H

