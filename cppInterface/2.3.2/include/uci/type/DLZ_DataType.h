/** @file DLZ_DataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_DLZ_DATATYPE_H
#define UCI_TYPE_DLZ_DATATYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/AnglePositiveType.h"
#include "uci/type/AngleType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/SteeringUnitVectorType.h"
#include "uci/type/TimeType.h"
#include "uci/type/Velocity2D_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type contains the data necessary for a DLZ. */
class DLZ_DataType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new DLZ_DataType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DLZ_DataType.
    */
  static UCI_EXPORT DLZ_DataType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new DLZ_DataType initializing the data accessed by the new DLZ_DataType using the data
    * accessed by the specified DLZ_DataType (cloning).
    *
    * @param accessor The DLZ_DataType that provides access to the data that is to be used to initialize the data accessed
    *      by the new created DLZ_DataType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DLZ_DataType.
    */
  static UCI_EXPORT DLZ_DataType& create(const DLZ_DataType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified DLZ_DataType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The DLZ_DataType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(DLZ_DataType& accessor);

  /** Returns this accessor's type constant, i.e. dLZ_DataType.
    *
    * @return This accessor's type constant, i.e. dLZ_DataType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::dLZ_DataType;
  }

  /** Returns the version that was initialized from the uci:version attribute of DLZ_DataType.
    *
    * @return The version that was initialized from the uci:version attribute of DLZ_DataType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const DLZ_DataType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by RangeTurnAndClose.
    *
    * @return The value of the simple primitive data type identified by RangeTurnAndClose.
    */
  virtual uci::type::DistanceTypeValue getRangeTurnAndClose() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RangeTurnAndClose.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setRangeTurnAndClose(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by RangeTurnAndClose exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RangeTurnAndClose is enabled or not.
    */
  virtual bool hasRangeTurnAndClose() const = 0;

  /** Clears (disabled) the Element identified by RangeTurnAndClose.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& clearRangeTurnAndClose() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RangeMinimum.
    *
    * @return The value of the simple primitive data type identified by RangeMinimum.
    */
  virtual uci::type::DistanceTypeValue getRangeMinimum() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RangeMinimum.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setRangeMinimum(uci::type::DistanceTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by RangeTurnAndRun.
    *
    * @return The value of the simple primitive data type identified by RangeTurnAndRun.
    */
  virtual uci::type::DistanceTypeValue getRangeTurnAndRun() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RangeTurnAndRun.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setRangeTurnAndRun(uci::type::DistanceTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by RangeProbabilityOfIntercept.
    *
    * @return The value of the simple primitive data type identified by RangeProbabilityOfIntercept.
    */
  virtual uci::type::DistanceTypeValue getRangeProbabilityOfIntercept() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RangeProbabilityOfIntercept.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setRangeProbabilityOfIntercept(uci::type::DistanceTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by RangeMaxGuidance.
    *
    * @return The value of the simple primitive data type identified by RangeMaxGuidance.
    */
  virtual uci::type::DistanceTypeValue getRangeMaxGuidance() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RangeMaxGuidance.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setRangeMaxGuidance(uci::type::DistanceTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by RangeOptimal.
    *
    * @return The value of the simple primitive data type identified by RangeOptimal.
    */
  virtual uci::type::DistanceTypeValue getRangeOptimal() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RangeOptimal.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setRangeOptimal(uci::type::DistanceTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by RangeMaxAero.
    *
    * @return The value of the simple primitive data type identified by RangeMaxAero.
    */
  virtual uci::type::DistanceTypeValue getRangeMaxAero() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RangeMaxAero.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setRangeMaxAero(uci::type::DistanceTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * TargetClosureRate.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      TargetClosureRate.
    */
  virtual const uci::type::Velocity2D_Type& getTargetClosureRate() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TargetClosureRate.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TargetClosureRate.
    */
  virtual uci::type::Velocity2D_Type& getTargetClosureRate() = 0;

  /** Sets the complex content identified by TargetClosureRate to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TargetClosureRate.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setTargetClosureRate(const uci::type::Velocity2D_Type& value) = 0;

  /** Enables the Element identified by TargetClosureRate.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return A reference to the accessor that provides access to the complex content identified by TargetClosureRate.
    */
  virtual uci::type::Velocity2D_Type& enableTargetClosureRate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns the value of the SimplePrimitive data type identified by TargetRange.
    *
    * @return The value of the simple primitive data type identified by TargetRange.
    */
  virtual uci::type::DistanceTypeValue getTargetRange() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TargetRange.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setTargetRange(uci::type::DistanceTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by WeaponToTargetSeekerActivationRange.
    *
    * @return The value of the simple primitive data type identified by WeaponToTargetSeekerActivationRange.
    */
  virtual uci::type::DistanceTypeValue getWeaponToTargetSeekerActivationRange() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by WeaponToTargetSeekerActivationRange.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setWeaponToTargetSeekerActivationRange(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by WeaponToTargetSeekerActivationRange exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WeaponToTargetSeekerActivationRange is enabled or not.
    */
  virtual bool hasWeaponToTargetSeekerActivationRange() const = 0;

  /** Clears (disabled) the Element identified by WeaponToTargetSeekerActivationRange.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& clearWeaponToTargetSeekerActivationRange() = 0;

  /** Returns the value of the SimplePrimitive data type identified by WeaponToTargetAutonomousRange.
    *
    * @return The value of the simple primitive data type identified by WeaponToTargetAutonomousRange.
    */
  virtual uci::type::DistanceTypeValue getWeaponToTargetAutonomousRange() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by WeaponToTargetAutonomousRange.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setWeaponToTargetAutonomousRange(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by WeaponToTargetAutonomousRange exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WeaponToTargetAutonomousRange is enabled or not.
    */
  virtual bool hasWeaponToTargetAutonomousRange() const = 0;

  /** Clears (disabled) the Element identified by WeaponToTargetAutonomousRange.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& clearWeaponToTargetAutonomousRange() = 0;

  /** Returns the value of the SimplePrimitive data type identified by WeaponToTargetMPRFRange.
    *
    * @return The value of the simple primitive data type identified by WeaponToTargetMPRFRange.
    */
  virtual uci::type::DistanceTypeValue getWeaponToTargetMPRFRange() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by WeaponToTargetMPRFRange.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setWeaponToTargetMPRFRange(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by WeaponToTargetMPRFRange exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WeaponToTargetMPRFRange is enabled or not.
    */
  virtual bool hasWeaponToTargetMPRFRange() const = 0;

  /** Clears (disabled) the Element identified by WeaponToTargetMPRFRange.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& clearWeaponToTargetMPRFRange() = 0;

  /** Returns the value of the SimplePrimitive data type identified by A_Pole.
    *
    * @return The value of the simple primitive data type identified by A_Pole.
    */
  virtual uci::type::DistanceTypeValue getA_Pole() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by A_Pole.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setA_Pole(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by A_Pole exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by A_Pole is enabled or not.
    */
  virtual bool hasA_Pole() const = 0;

  /** Clears (disabled) the Element identified by A_Pole.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& clearA_Pole() = 0;

  /** Returns the value of the SimplePrimitive data type identified by F_Pole.
    *
    * @return The value of the simple primitive data type identified by F_Pole.
    */
  virtual uci::type::DistanceTypeValue getF_Pole() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by F_Pole.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setF_Pole(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by F_Pole exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by F_Pole is enabled or not.
    */
  virtual bool hasF_Pole() const = 0;

  /** Clears (disabled) the Element identified by F_Pole.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& clearF_Pole() = 0;

  /** Returns the value of the SimplePrimitive data type identified by M_Pole.
    *
    * @return The value of the simple primitive data type identified by M_Pole.
    */
  virtual uci::type::DistanceTypeValue getM_Pole() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by M_Pole.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setM_Pole(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by M_Pole exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by M_Pole is enabled or not.
    */
  virtual bool hasM_Pole() const = 0;

  /** Clears (disabled) the Element identified by M_Pole.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& clearM_Pole() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AllowableSteeringError.
    *
    * @return The value of the simple primitive data type identified by AllowableSteeringError.
    */
  virtual uci::type::AnglePositiveTypeValue getAllowableSteeringError() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AllowableSteeringError.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setAllowableSteeringError(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by AllowableSteeringError exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AllowableSteeringError is enabled or not.
    */
  virtual bool hasAllowableSteeringError() const = 0;

  /** Clears (disabled) the Element identified by AllowableSteeringError.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& clearAllowableSteeringError() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SteeringUnitVector.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SteeringUnitVector.
    */
  virtual const uci::type::SteeringUnitVectorType& getSteeringUnitVector() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SteeringUnitVector.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SteeringUnitVector.
    */
  virtual uci::type::SteeringUnitVectorType& getSteeringUnitVector() = 0;

  /** Sets the complex content identified by SteeringUnitVector to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SteeringUnitVector.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setSteeringUnitVector(const uci::type::SteeringUnitVectorType& value) = 0;

  /** Returns whether the Element identified by SteeringUnitVector exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SteeringUnitVector is enabled or not.
    */
  virtual bool hasSteeringUnitVector() const = 0;

  /** Enables the Element identified by SteeringUnitVector.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SteeringUnitVector.
    */
  virtual uci::type::SteeringUnitVectorType& enableSteeringUnitVector(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SteeringUnitVector.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& clearSteeringUnitVector() = 0;

  /** Returns the value of the SimplePrimitive data type identified by LoftAngle.
    *
    * @return The value of the simple primitive data type identified by LoftAngle.
    */
  virtual uci::type::AngleTypeValue getLoftAngle() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LoftAngle.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setLoftAngle(uci::type::AngleTypeValue value) = 0;

  /** Returns whether the Element identified by LoftAngle exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LoftAngle is enabled or not.
    */
  virtual bool hasLoftAngle() const = 0;

  /** Clears (disabled) the Element identified by LoftAngle.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& clearLoftAngle() = 0;

  /** Returns the value of the SimplePrimitive data type identified by DigitalManuveringCueAngle.
    *
    * @return The value of the simple primitive data type identified by DigitalManuveringCueAngle.
    */
  virtual uci::type::AnglePositiveTypeValue getDigitalManuveringCueAngle() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DigitalManuveringCueAngle.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setDigitalManuveringCueAngle(uci::type::AnglePositiveTypeValue value) = 0;

  /** Returns whether the Element identified by DigitalManuveringCueAngle exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DigitalManuveringCueAngle is enabled or not.
    */
  virtual bool hasDigitalManuveringCueAngle() const = 0;

  /** Clears (disabled) the Element identified by DigitalManuveringCueAngle.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& clearDigitalManuveringCueAngle() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TimeOfIntercept.
    *
    * @return The value of the simple primitive data type identified by TimeOfIntercept.
    */
  virtual uci::type::TimeTypeValue getTimeOfIntercept() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TimeOfIntercept.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setTimeOfIntercept(uci::type::TimeTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by TimeToRelease.
    *
    * @return The value of the simple primitive data type identified by TimeToRelease.
    */
  virtual uci::type::TimeTypeValue getTimeToRelease() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TimeToRelease.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setTimeToRelease(uci::type::TimeTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by TimeOfActivation.
    *
    * @return The value of the simple primitive data type identified by TimeOfActivation.
    */
  virtual uci::type::TimeTypeValue getTimeOfActivation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TimeOfActivation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setTimeOfActivation(uci::type::TimeTypeValue value) = 0;

  /** Returns whether the Element identified by TimeOfActivation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TimeOfActivation is enabled or not.
    */
  virtual bool hasTimeOfActivation() const = 0;

  /** Clears (disabled) the Element identified by TimeOfActivation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& clearTimeOfActivation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TimeOfMPRF.
    *
    * @return The value of the simple primitive data type identified by TimeOfMPRF.
    */
  virtual uci::type::TimeTypeValue getTimeOfMPRF() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TimeOfMPRF.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setTimeOfMPRF(uci::type::TimeTypeValue value) = 0;

  /** Returns whether the Element identified by TimeOfMPRF exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TimeOfMPRF is enabled or not.
    */
  virtual bool hasTimeOfMPRF() const = 0;

  /** Clears (disabled) the Element identified by TimeOfMPRF.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& clearTimeOfMPRF() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TimeOfAutonomous.
    *
    * @return The value of the simple primitive data type identified by TimeOfAutonomous.
    */
  virtual uci::type::TimeTypeValue getTimeOfAutonomous() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TimeOfAutonomous.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& setTimeOfAutonomous(uci::type::TimeTypeValue value) = 0;

  /** Returns whether the Element identified by TimeOfAutonomous exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TimeOfAutonomous is enabled or not.
    */
  virtual bool hasTimeOfAutonomous() const = 0;

  /** Clears (disabled) the Element identified by TimeOfAutonomous.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DLZ_DataType& clearTimeOfAutonomous() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  DLZ_DataType() {
  }

  /** The destructor [only available to derived classes]. */
  ~DLZ_DataType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The DLZ_DataType to copy from.
    */
  DLZ_DataType(const DLZ_DataType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this DLZ_DataType to the contents of the DLZ_DataType on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The DLZ_DataType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this DLZ_DataType.
    * @return A reference to this DLZ_DataType.
    */
  DLZ_DataType& operator=(const DLZ_DataType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_DLZ_DATATYPE_H

