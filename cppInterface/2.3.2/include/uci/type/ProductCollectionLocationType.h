/** @file ProductCollectionLocationType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PRODUCTCOLLECTIONLOCATIONTYPE_H
#define UCI_TYPE_PRODUCTCOLLECTIONLOCATIONTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/InertialStateRelativeType.h"
#include "uci/type/ProductCollectionPathType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ProductCollectionLocationType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ProductCollectionLocationType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ProductCollectionLocationType.
    */
  static UCI_EXPORT ProductCollectionLocationType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ProductCollectionLocationType initializing the data accessed by the new
    * ProductCollectionLocationType using the data accessed by the specified ProductCollectionLocationType (cloning).
    *
    * @param accessor The ProductCollectionLocationType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created ProductCollectionLocationType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ProductCollectionLocationType.
    */
  static UCI_EXPORT ProductCollectionLocationType& create(const ProductCollectionLocationType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ProductCollectionLocationType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The ProductCollectionLocationType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ProductCollectionLocationType& accessor);

  /** Returns this accessor's type constant, i.e. productCollectionLocationType.
    *
    * @return This accessor's type constant, i.e. productCollectionLocationType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::productCollectionLocationType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ProductCollectionLocationType.
    *
    * @return The version that was initialized from the uci:version attribute of ProductCollectionLocationType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ProductCollectionLocationType& accessor) = 0;

  /** The collection path as traversed by the host platform. This allows the capture of an abbreviated time history of
    * platform motion. Position data may be specified as either a geospatial point or relative to a separately defined
    * reference frame. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ProductCollectionPathType, uci::type::accessorType::productCollectionPathType> CollectionPath;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CollectionPoint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CollectionPoint.
    */
  virtual const uci::type::InertialStateRelativeType& getCollectionPoint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CollectionPoint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CollectionPoint.
    */
  virtual uci::type::InertialStateRelativeType& getCollectionPoint() = 0;

  /** Sets the complex content identified by CollectionPoint to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionPoint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductCollectionLocationType& setCollectionPoint(const uci::type::InertialStateRelativeType& value) = 0;

  /** Enables the Element identified by CollectionPoint.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return A reference to the accessor that provides access to the complex content identified by CollectionPoint.
    */
  virtual uci::type::InertialStateRelativeType& enableCollectionPoint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the bounded list identified by CollectionPath.
    *
    * @return A const reference to the bounded list identified by CollectionPath.
    */
  virtual const uci::type::ProductCollectionLocationType::CollectionPath& getCollectionPath() const = 0;

  /** Returns a reference to the bounded list identified by CollectionPath.
    *
    * @return A reference to the bounded list identified by CollectionPath.
    */
  virtual uci::type::ProductCollectionLocationType::CollectionPath& getCollectionPath() = 0;

  /** Sets the bounded list identified by CollectionPath.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductCollectionLocationType& setCollectionPath(const uci::type::ProductCollectionLocationType::CollectionPath& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ProductCollectionLocationType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ProductCollectionLocationType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ProductCollectionLocationType to copy from.
    */
  ProductCollectionLocationType(const ProductCollectionLocationType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ProductCollectionLocationType to the contents of the
    * ProductCollectionLocationType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ProductCollectionLocationType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this ProductCollectionLocationType.
    * @return A reference to this ProductCollectionLocationType.
    */
  ProductCollectionLocationType& operator=(const ProductCollectionLocationType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PRODUCTCOLLECTIONLOCATIONTYPE_H

