/** @file MeasurementCharacteristicsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_MEASUREMENTCHARACTERISTICSTYPE_H
#define UCI_TYPE_MEASUREMENTCHARACTERISTICSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/AltitudeReferenceUncertaintyType.h"
#include "uci/type/DecibelType.h"
#include "uci/type/FOV_ExtentType.h"
#include "uci/type/FrequencyRangeType.h"
#include "uci/type/FrequencyType.h"
#include "uci/type/IrradianceType.h"
#include "uci/type/MeasurementDurationType.h"
#include "uci/type/NameValuePairType.h"
#include "uci/type/PassiveActiveEnum.h"
#include "uci/type/PathIdentificationEnum.h"
#include "uci/type/PercentType.h"
#include "uci/type/RCS_MedianType.h"
#include "uci/type/SourceCharacteristicsType.h"
#include "uci/type/SourceCoverageType.h"
#include "uci/type/SourceResolutionType.h"
#include "uci/type/SpaceObjectVisualDataType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class MeasurementCharacteristicsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new MeasurementCharacteristicsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MeasurementCharacteristicsType.
    */
  static UCI_EXPORT MeasurementCharacteristicsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new MeasurementCharacteristicsType initializing the data accessed by the new
    * MeasurementCharacteristicsType using the data accessed by the specified MeasurementCharacteristicsType (cloning).
    *
    * @param accessor The MeasurementCharacteristicsType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created MeasurementCharacteristicsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MeasurementCharacteristicsType.
    */
  static UCI_EXPORT MeasurementCharacteristicsType& create(const MeasurementCharacteristicsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified MeasurementCharacteristicsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The MeasurementCharacteristicsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(MeasurementCharacteristicsType& accessor);

  /** Returns this accessor's type constant, i.e. measurementCharacteristicsType.
    *
    * @return This accessor's type constant, i.e. measurementCharacteristicsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::measurementCharacteristicsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of MeasurementCharacteristicsType.
    *
    * @return The version that was initialized from the uci:version attribute of MeasurementCharacteristicsType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const MeasurementCharacteristicsType& accessor) = 0;

  /** Indicates the measured radar cross section of the object being observed which is the median of the RCS hits that
    * participated in the formation of the observation. If sensor supports dual polarizations, then collection can provide
    * output for two RCS median values, one per polarization. [Occurrences: Minimum: 0; Maximum: 2]
    */
  typedef uci::base::BoundedList<uci::type::RCS_MedianType, uci::type::accessorType::rCS_MedianType> RadarCrossSection;

  /** These supplemental characteristics are measurement specific and may not be relevant to all producers. Reference the
    * data provider's interface control document or service specification to determine if this data will be provided.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::NameValuePairType, uci::type::accessorType::nameValuePairType> CustomCharacteristics;

  /** Returns a const reference to the value of the enumeration identified by PassiveActiveIndicator.
    *
    * @return A const reference to the value of the enumeration identified by PassiveActiveIndicator.
    */
  virtual const uci::type::PassiveActiveEnum& getPassiveActiveIndicator() const = 0;

  /** Returns a reference to the value of the enumeration identified by PassiveActiveIndicator.
    *
    * @return A reference to the value of the enumeration identified by PassiveActiveIndicator.
    */
  virtual uci::type::PassiveActiveEnum& getPassiveActiveIndicator() = 0;

  /** Sets the value of the enumeration identified by PassiveActiveIndicator.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setPassiveActiveIndicator(const uci::type::PassiveActiveEnum& value) = 0;

  /** Sets the value of the enumeration identified by PassiveActiveIndicator.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setPassiveActiveIndicator(uci::type::PassiveActiveEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by PassiveActiveIndicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PassiveActiveIndicator is enabled or not.
    */
  virtual bool hasPassiveActiveIndicator() const = 0;

  /** Enables the Element identified by PassiveActiveIndicator.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by PassiveActiveIndicator.
    */
  virtual uci::type::PassiveActiveEnum& enablePassiveActiveIndicator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PassiveActiveIndicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearPassiveActiveIndicator() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * MeasurementDuration.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      MeasurementDuration.
    */
  virtual const uci::type::MeasurementDurationType& getMeasurementDuration() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MeasurementDuration.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MeasurementDuration.
    */
  virtual uci::type::MeasurementDurationType& getMeasurementDuration() = 0;

  /** Sets the complex content identified by MeasurementDuration to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MeasurementDuration.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setMeasurementDuration(const uci::type::MeasurementDurationType& value) = 0;

  /** Returns whether the Element identified by MeasurementDuration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MeasurementDuration is enabled or not.
    */
  virtual bool hasMeasurementDuration() const = 0;

  /** Enables the Element identified by MeasurementDuration.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MeasurementDuration.
    */
  virtual uci::type::MeasurementDurationType& enableMeasurementDuration(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MeasurementDuration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearMeasurementDuration() = 0;

  /** Returns a const reference to the value of the enumeration identified by PathIdentification.
    *
    * @return A const reference to the value of the enumeration identified by PathIdentification.
    */
  virtual const uci::type::PathIdentificationEnum& getPathIdentification() const = 0;

  /** Returns a reference to the value of the enumeration identified by PathIdentification.
    *
    * @return A reference to the value of the enumeration identified by PathIdentification.
    */
  virtual uci::type::PathIdentificationEnum& getPathIdentification() = 0;

  /** Sets the value of the enumeration identified by PathIdentification.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setPathIdentification(const uci::type::PathIdentificationEnum& value) = 0;

  /** Sets the value of the enumeration identified by PathIdentification.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setPathIdentification(uci::type::PathIdentificationEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by PathIdentification exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PathIdentification is enabled or not.
    */
  virtual bool hasPathIdentification() const = 0;

  /** Enables the Element identified by PathIdentification.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by PathIdentification.
    */
  virtual uci::type::PathIdentificationEnum& enablePathIdentification(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PathIdentification.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearPathIdentification() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SourceCoverage.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SourceCoverage.
    */
  virtual const uci::type::SourceCoverageType& getSourceCoverage() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SourceCoverage.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SourceCoverage.
    */
  virtual uci::type::SourceCoverageType& getSourceCoverage() = 0;

  /** Sets the complex content identified by SourceCoverage to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SourceCoverage.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setSourceCoverage(const uci::type::SourceCoverageType& value) = 0;

  /** Returns whether the Element identified by SourceCoverage exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SourceCoverage is enabled or not.
    */
  virtual bool hasSourceCoverage() const = 0;

  /** Enables the Element identified by SourceCoverage.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SourceCoverage.
    */
  virtual uci::type::SourceCoverageType& enableSourceCoverage(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SourceCoverage.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearSourceCoverage() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AltitudeReported.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AltitudeReported.
    */
  virtual const uci::type::AltitudeReferenceUncertaintyType& getAltitudeReported() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AltitudeReported.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AltitudeReported.
    */
  virtual uci::type::AltitudeReferenceUncertaintyType& getAltitudeReported() = 0;

  /** Sets the complex content identified by AltitudeReported to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AltitudeReported.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setAltitudeReported(const uci::type::AltitudeReferenceUncertaintyType& value) = 0;

  /** Returns whether the Element identified by AltitudeReported exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AltitudeReported is enabled or not.
    */
  virtual bool hasAltitudeReported() const = 0;

  /** Enables the Element identified by AltitudeReported.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AltitudeReported.
    */
  virtual uci::type::AltitudeReferenceUncertaintyType& enableAltitudeReported(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AltitudeReported.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearAltitudeReported() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SourceAngularExtent.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SourceAngularExtent.
    */
  virtual const uci::type::FOV_ExtentType& getSourceAngularExtent() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SourceAngularExtent.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SourceAngularExtent.
    */
  virtual uci::type::FOV_ExtentType& getSourceAngularExtent() = 0;

  /** Sets the complex content identified by SourceAngularExtent to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SourceAngularExtent.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setSourceAngularExtent(const uci::type::FOV_ExtentType& value) = 0;

  /** Returns whether the Element identified by SourceAngularExtent exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SourceAngularExtent is enabled or not.
    */
  virtual bool hasSourceAngularExtent() const = 0;

  /** Enables the Element identified by SourceAngularExtent.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SourceAngularExtent.
    */
  virtual uci::type::FOV_ExtentType& enableSourceAngularExtent(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SourceAngularExtent.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearSourceAngularExtent() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SourceResolution.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SourceResolution.
    */
  virtual const uci::type::SourceResolutionType& getSourceResolution() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SourceResolution.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SourceResolution.
    */
  virtual uci::type::SourceResolutionType& getSourceResolution() = 0;

  /** Sets the complex content identified by SourceResolution to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SourceResolution.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setSourceResolution(const uci::type::SourceResolutionType& value) = 0;

  /** Returns whether the Element identified by SourceResolution exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SourceResolution is enabled or not.
    */
  virtual bool hasSourceResolution() const = 0;

  /** Enables the Element identified by SourceResolution.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SourceResolution.
    */
  virtual uci::type::SourceResolutionType& enableSourceResolution(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SourceResolution.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearSourceResolution() = 0;

  /** Returns the value of the SimplePrimitive data type identified by CenterFrequency.
    *
    * @return The value of the simple primitive data type identified by CenterFrequency.
    */
  virtual uci::type::FrequencyTypeValue getCenterFrequency() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CenterFrequency.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setCenterFrequency(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by CenterFrequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CenterFrequency is enabled or not.
    */
  virtual bool hasCenterFrequency() const = 0;

  /** Clears (disabled) the Element identified by CenterFrequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearCenterFrequency() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Bandwidth.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Bandwidth.
    */
  virtual const uci::type::FrequencyRangeType& getBandwidth() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Bandwidth.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Bandwidth.
    */
  virtual uci::type::FrequencyRangeType& getBandwidth() = 0;

  /** Sets the complex content identified by Bandwidth to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Bandwidth.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setBandwidth(const uci::type::FrequencyRangeType& value) = 0;

  /** Returns whether the Element identified by Bandwidth exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Bandwidth is enabled or not.
    */
  virtual bool hasBandwidth() const = 0;

  /** Enables the Element identified by Bandwidth.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Bandwidth.
    */
  virtual uci::type::FrequencyRangeType& enableBandwidth(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Bandwidth.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearBandwidth() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SourceSpecifiedCharacteristics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SourceSpecifiedCharacteristics.
    */
  virtual const uci::type::SourceCharacteristicsType& getSourceSpecifiedCharacteristics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * SourceSpecifiedCharacteristics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      SourceSpecifiedCharacteristics.
    */
  virtual uci::type::SourceCharacteristicsType& getSourceSpecifiedCharacteristics() = 0;

  /** Sets the complex content identified by SourceSpecifiedCharacteristics to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SourceSpecifiedCharacteristics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setSourceSpecifiedCharacteristics(const uci::type::SourceCharacteristicsType& value) = 0;

  /** Returns whether the Element identified by SourceSpecifiedCharacteristics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SourceSpecifiedCharacteristics is enabled or not.
    */
  virtual bool hasSourceSpecifiedCharacteristics() const = 0;

  /** Enables the Element identified by SourceSpecifiedCharacteristics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      SourceSpecifiedCharacteristics.
    */
  virtual uci::type::SourceCharacteristicsType& enableSourceSpecifiedCharacteristics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SourceSpecifiedCharacteristics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearSourceSpecifiedCharacteristics() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TargetIrradiance.
    *
    * @return The value of the simple primitive data type identified by TargetIrradiance.
    */
  virtual uci::type::IrradianceTypeValue getTargetIrradiance() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TargetIrradiance.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setTargetIrradiance(uci::type::IrradianceTypeValue value) = 0;

  /** Returns whether the Element identified by TargetIrradiance exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TargetIrradiance is enabled or not.
    */
  virtual bool hasTargetIrradiance() const = 0;

  /** Clears (disabled) the Element identified by TargetIrradiance.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearTargetIrradiance() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ProbabilityOfDetection.
    *
    * @return The value of the simple primitive data type identified by ProbabilityOfDetection.
    */
  virtual uci::type::PercentTypeValue getProbabilityOfDetection() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ProbabilityOfDetection.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setProbabilityOfDetection(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by ProbabilityOfDetection exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProbabilityOfDetection is enabled or not.
    */
  virtual bool hasProbabilityOfDetection() const = 0;

  /** Clears (disabled) the Element identified by ProbabilityOfDetection.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearProbabilityOfDetection() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ProbabilityOfFalseAlarm.
    *
    * @return The value of the simple primitive data type identified by ProbabilityOfFalseAlarm.
    */
  virtual uci::type::PercentTypeValue getProbabilityOfFalseAlarm() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ProbabilityOfFalseAlarm.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setProbabilityOfFalseAlarm(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by ProbabilityOfFalseAlarm exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProbabilityOfFalseAlarm is enabled or not.
    */
  virtual bool hasProbabilityOfFalseAlarm() const = 0;

  /** Clears (disabled) the Element identified by ProbabilityOfFalseAlarm.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearProbabilityOfFalseAlarm() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SNR.
    *
    * @return The value of the simple primitive data type identified by SNR.
    */
  virtual uci::type::DecibelTypeValue getSNR() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SNR.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setSNR(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by SNR exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SNR is enabled or not.
    */
  virtual bool hasSNR() const = 0;

  /** Clears (disabled) the Element identified by SNR.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearSNR() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SBR.
    *
    * @return The value of the simple primitive data type identified by SBR.
    */
  virtual uci::type::DecibelTypeValue getSBR() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SBR.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setSBR(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by SBR exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SBR is enabled or not.
    */
  virtual bool hasSBR() const = 0;

  /** Clears (disabled) the Element identified by SBR.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearSBR() = 0;

  /** Returns a const reference to the bounded list identified by RadarCrossSection.
    *
    * @return A const reference to the bounded list identified by RadarCrossSection.
    */
  virtual const uci::type::MeasurementCharacteristicsType::RadarCrossSection& getRadarCrossSection() const = 0;

  /** Returns a reference to the bounded list identified by RadarCrossSection.
    *
    * @return A reference to the bounded list identified by RadarCrossSection.
    */
  virtual uci::type::MeasurementCharacteristicsType::RadarCrossSection& getRadarCrossSection() = 0;

  /** Sets the bounded list identified by RadarCrossSection.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setRadarCrossSection(const uci::type::MeasurementCharacteristicsType::RadarCrossSection& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SpaceObjectVisualData.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SpaceObjectVisualData.
    */
  virtual const uci::type::SpaceObjectVisualDataType& getSpaceObjectVisualData() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SpaceObjectVisualData.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SpaceObjectVisualData.
    */
  virtual uci::type::SpaceObjectVisualDataType& getSpaceObjectVisualData() = 0;

  /** Sets the complex content identified by SpaceObjectVisualData to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SpaceObjectVisualData.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setSpaceObjectVisualData(const uci::type::SpaceObjectVisualDataType& value) = 0;

  /** Returns whether the Element identified by SpaceObjectVisualData exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SpaceObjectVisualData is enabled or not.
    */
  virtual bool hasSpaceObjectVisualData() const = 0;

  /** Enables the Element identified by SpaceObjectVisualData.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SpaceObjectVisualData.
    */
  virtual uci::type::SpaceObjectVisualDataType& enableSpaceObjectVisualData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SpaceObjectVisualData.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& clearSpaceObjectVisualData() = 0;

  /** Returns a const reference to the bounded list identified by CustomCharacteristics.
    *
    * @return A const reference to the bounded list identified by CustomCharacteristics.
    */
  virtual const uci::type::MeasurementCharacteristicsType::CustomCharacteristics& getCustomCharacteristics() const = 0;

  /** Returns a reference to the bounded list identified by CustomCharacteristics.
    *
    * @return A reference to the bounded list identified by CustomCharacteristics.
    */
  virtual uci::type::MeasurementCharacteristicsType::CustomCharacteristics& getCustomCharacteristics() = 0;

  /** Sets the bounded list identified by CustomCharacteristics.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementCharacteristicsType& setCustomCharacteristics(const uci::type::MeasurementCharacteristicsType::CustomCharacteristics& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  MeasurementCharacteristicsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~MeasurementCharacteristicsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The MeasurementCharacteristicsType to copy from.
    */
  MeasurementCharacteristicsType(const MeasurementCharacteristicsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this MeasurementCharacteristicsType to the contents of the
    * MeasurementCharacteristicsType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The MeasurementCharacteristicsType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this MeasurementCharacteristicsType.
    * @return A reference to this MeasurementCharacteristicsType.
    */
  MeasurementCharacteristicsType& operator=(const MeasurementCharacteristicsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_MEASUREMENTCHARACTERISTICSTYPE_H

