/** @file CS_DetailDataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CS_DETAILDATATYPE_H
#define UCI_TYPE_CS_DETAILDATATYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CS_SubDetailDataType.h"
#include "uci/type/FileLocationID_Type.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/FrequencyType.h"
#include "uci/type/ModulationEnum.h"
#include "uci/type/PolarizationEnum.h"
#include "uci/type/VisibleString32Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type represents lower level signal details for a CounterSpace task/engagement. */
class CS_DetailDataType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CS_DetailDataType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CS_DetailDataType.
    */
  static UCI_EXPORT CS_DetailDataType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CS_DetailDataType initializing the data accessed by the new CS_DetailDataType using the
    * data accessed by the specified CS_DetailDataType (cloning).
    *
    * @param accessor The CS_DetailDataType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created CS_DetailDataType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CS_DetailDataType.
    */
  static UCI_EXPORT CS_DetailDataType& create(const CS_DetailDataType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CS_DetailDataType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The CS_DetailDataType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CS_DetailDataType& accessor);

  /** Returns this accessor's type constant, i.e. cS_DetailDataType.
    *
    * @return This accessor's type constant, i.e. cS_DetailDataType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::cS_DetailDataType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CS_DetailDataType.
    *
    * @return The version that was initialized from the uci:version attribute of CS_DetailDataType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CS_DetailDataType& accessor) = 0;

  /** Signal data additional parameters. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::CS_SubDetailDataType, uci::type::accessorType::cS_SubDetailDataType> SubDetailData;

  /** Returns a const reference to the accessor that provides access to the string identified by Name.
    *
    * @return A const reference to the accessor that provides access to the string identified by Name.
    */
  virtual const uci::type::VisibleString32Type& getName() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Name.
    *
    * @return A reference to the accessor that provides access to the string identified by Name.
    */
  virtual uci::type::VisibleString32Type& getName() = 0;

  /** Sets the string identified by Name to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Name.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setName(const uci::type::VisibleString32Type& value) = 0;

  /** Sets the string identified by Name to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setName(const std::string& value) = 0;

  /** Sets the string identified by Name to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setName(const char* value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DetailsID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DetailsID.
    */
  virtual const uci::type::FileLocationID_Type& getDetailsID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DetailsID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DetailsID.
    */
  virtual uci::type::FileLocationID_Type& getDetailsID() = 0;

  /** Sets the complex content identified by DetailsID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DetailsID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setDetailsID(const uci::type::FileLocationID_Type& value) = 0;

  /** Returns whether the Element identified by DetailsID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DetailsID is enabled or not.
    */
  virtual bool hasDetailsID() const = 0;

  /** Enables the Element identified by DetailsID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DetailsID.
    */
  virtual uci::type::FileLocationID_Type& enableDetailsID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DetailsID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& clearDetailsID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Signal.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Signal.
    */
  virtual const uci::type::ForeignKeyType& getSignal() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Signal.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Signal.
    */
  virtual uci::type::ForeignKeyType& getSignal() = 0;

  /** Sets the complex content identified by Signal to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Signal.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setSignal(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by Signal exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Signal is enabled or not.
    */
  virtual bool hasSignal() const = 0;

  /** Enables the Element identified by Signal.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Signal.
    */
  virtual uci::type::ForeignKeyType& enableSignal(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Signal.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& clearSignal() = 0;

  /** Returns the value of the SimplePrimitive data type identified by UplinkFrequency.
    *
    * @return The value of the simple primitive data type identified by UplinkFrequency.
    */
  virtual uci::type::FrequencyTypeValue getUplinkFrequency() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by UplinkFrequency.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setUplinkFrequency(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by UplinkFrequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by UplinkFrequency is enabled or not.
    */
  virtual bool hasUplinkFrequency() const = 0;

  /** Clears (disabled) the Element identified by UplinkFrequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& clearUplinkFrequency() = 0;

  /** Returns a const reference to the value of the enumeration identified by UplinkPolarization.
    *
    * @return A const reference to the value of the enumeration identified by UplinkPolarization.
    */
  virtual const uci::type::PolarizationEnum& getUplinkPolarization() const = 0;

  /** Returns a reference to the value of the enumeration identified by UplinkPolarization.
    *
    * @return A reference to the value of the enumeration identified by UplinkPolarization.
    */
  virtual uci::type::PolarizationEnum& getUplinkPolarization() = 0;

  /** Sets the value of the enumeration identified by UplinkPolarization.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setUplinkPolarization(const uci::type::PolarizationEnum& value) = 0;

  /** Sets the value of the enumeration identified by UplinkPolarization.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setUplinkPolarization(uci::type::PolarizationEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by UplinkPolarization exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by UplinkPolarization is enabled or not.
    */
  virtual bool hasUplinkPolarization() const = 0;

  /** Enables the Element identified by UplinkPolarization.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by UplinkPolarization.
    */
  virtual uci::type::PolarizationEnum& enableUplinkPolarization(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by UplinkPolarization.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& clearUplinkPolarization() = 0;

  /** Returns the value of the SimplePrimitive data type identified by DownlinkFrequency.
    *
    * @return The value of the simple primitive data type identified by DownlinkFrequency.
    */
  virtual uci::type::FrequencyTypeValue getDownlinkFrequency() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DownlinkFrequency.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setDownlinkFrequency(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by DownlinkFrequency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DownlinkFrequency is enabled or not.
    */
  virtual bool hasDownlinkFrequency() const = 0;

  /** Clears (disabled) the Element identified by DownlinkFrequency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& clearDownlinkFrequency() = 0;

  /** Returns a const reference to the value of the enumeration identified by DownlinkPolarization.
    *
    * @return A const reference to the value of the enumeration identified by DownlinkPolarization.
    */
  virtual const uci::type::PolarizationEnum& getDownlinkPolarization() const = 0;

  /** Returns a reference to the value of the enumeration identified by DownlinkPolarization.
    *
    * @return A reference to the value of the enumeration identified by DownlinkPolarization.
    */
  virtual uci::type::PolarizationEnum& getDownlinkPolarization() = 0;

  /** Sets the value of the enumeration identified by DownlinkPolarization.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setDownlinkPolarization(const uci::type::PolarizationEnum& value) = 0;

  /** Sets the value of the enumeration identified by DownlinkPolarization.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setDownlinkPolarization(uci::type::PolarizationEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by DownlinkPolarization exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DownlinkPolarization is enabled or not.
    */
  virtual bool hasDownlinkPolarization() const = 0;

  /** Enables the Element identified by DownlinkPolarization.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by DownlinkPolarization.
    */
  virtual uci::type::PolarizationEnum& enableDownlinkPolarization(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DownlinkPolarization.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& clearDownlinkPolarization() = 0;

  /** Returns a const reference to the value of the enumeration identified by Modulation.
    *
    * @return A const reference to the value of the enumeration identified by Modulation.
    */
  virtual const uci::type::ModulationEnum& getModulation() const = 0;

  /** Returns a reference to the value of the enumeration identified by Modulation.
    *
    * @return A reference to the value of the enumeration identified by Modulation.
    */
  virtual uci::type::ModulationEnum& getModulation() = 0;

  /** Sets the value of the enumeration identified by Modulation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setModulation(const uci::type::ModulationEnum& value) = 0;

  /** Sets the value of the enumeration identified by Modulation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setModulation(uci::type::ModulationEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Modulation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Modulation is enabled or not.
    */
  virtual bool hasModulation() const = 0;

  /** Enables the Element identified by Modulation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Modulation.
    */
  virtual uci::type::ModulationEnum& enableModulation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Modulation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& clearModulation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Bandwidth.
    *
    * @return The value of the simple primitive data type identified by Bandwidth.
    */
  virtual uci::type::FrequencyTypeValue getBandwidth() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Bandwidth.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setBandwidth(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by Bandwidth exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Bandwidth is enabled or not.
    */
  virtual bool hasBandwidth() const = 0;

  /** Clears (disabled) the Element identified by Bandwidth.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& clearBandwidth() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AttributesID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AttributesID.
    */
  virtual const uci::type::FileLocationID_Type& getAttributesID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AttributesID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AttributesID.
    */
  virtual uci::type::FileLocationID_Type& getAttributesID() = 0;

  /** Sets the complex content identified by AttributesID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AttributesID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setAttributesID(const uci::type::FileLocationID_Type& value) = 0;

  /** Returns whether the Element identified by AttributesID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AttributesID is enabled or not.
    */
  virtual bool hasAttributesID() const = 0;

  /** Enables the Element identified by AttributesID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AttributesID.
    */
  virtual uci::type::FileLocationID_Type& enableAttributesID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AttributesID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& clearAttributesID() = 0;

  /** Returns a const reference to the bounded list identified by SubDetailData.
    *
    * @return A const reference to the bounded list identified by SubDetailData.
    */
  virtual const uci::type::CS_DetailDataType::SubDetailData& getSubDetailData() const = 0;

  /** Returns a reference to the bounded list identified by SubDetailData.
    *
    * @return A reference to the bounded list identified by SubDetailData.
    */
  virtual uci::type::CS_DetailDataType::SubDetailData& getSubDetailData() = 0;

  /** Sets the bounded list identified by SubDetailData.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_DetailDataType& setSubDetailData(const uci::type::CS_DetailDataType::SubDetailData& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CS_DetailDataType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CS_DetailDataType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CS_DetailDataType to copy from.
    */
  CS_DetailDataType(const CS_DetailDataType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CS_DetailDataType to the contents of the CS_DetailDataType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CS_DetailDataType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this CS_DetailDataType.
    * @return A reference to this CS_DetailDataType.
    */
  CS_DetailDataType& operator=(const CS_DetailDataType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_CS_DETAILDATATYPE_H

