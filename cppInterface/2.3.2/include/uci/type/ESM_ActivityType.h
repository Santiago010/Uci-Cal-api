/** @file ESM_ActivityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ESM_ACTIVITYTYPE_H
#define UCI_TYPE_ESM_ACTIVITYTYPE_H

#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ConsentEnum.h"
#include "DateTimeType.h"
#include "ESM_ReceiveDwellType.h"
#include "ESM_SubCapabilityEnum.h"
#include "SharedRF_ApertureActivityBaseType.h"
#include "SubCapabilityDetailsType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ESM_ActivityType : public virtual SharedRF_ApertureActivityBaseType {
public:

  /** This method constructs a new ESM_ActivityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ESM_ActivityType.
    */
  static UCI_EXPORT ESM_ActivityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ESM_ActivityType initializing the data accessed by the new ESM_ActivityType using the
    * data accessed by the specified ESM_ActivityType (cloning).
    *
    * @param accessor The ESM_ActivityType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created ESM_ActivityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ESM_ActivityType.
    */
  static UCI_EXPORT ESM_ActivityType& create(const ESM_ActivityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ESM_ActivityType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The ESM_ActivityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ESM_ActivityType& accessor);

  /** Returns this accessor's type constant, i.e. eSM_ActivityType.
    *
    * @return This accessor's type constant, i.e. eSM_ActivityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::eSM_ActivityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ESM_ActivityType.
    *
    * @return The version that was initialized from the uci:version attribute of ESM_ActivityType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ESM_ActivityType& accessor) = 0;

  /** Indicates a specific SubCapability that is included in the Activity. If omitted, all SubCapabilities of the
    * associated Capability or Capabilities (as indicated in the ESM_Capability message) will be included in the Activity.
    * This element is required whenever a subset of SubCapabilities of the associated Capability or Capabilities are
    * included in the Activity. List size for this element is based on "Select All That Apply" condition. [Occurrences:
    * Minimum: 0; Maximum: 12]
    */
  typedef uci::base::BoundedList<uci::type::ESM_SubCapabilityEnum, uci::type::accessorType::eSM_SubCapabilityEnum> SubCapability;

  /** Indicates select SubCapability-specific details regarding the originating command/source of the Activity (as
    * indicated by the sibling ActivitySource element). In other words, this element is an echo of select elements from the
    * ESM_Command, MDF, etc. that originated the Activity. Additionally, in the case of ESM_Commands whose results are
    * independent of typical ESM output messages such as Entity or SignalReport, discrete command results are given here
    * instead of in those messages. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SubCapabilityDetailsType, uci::type::accessorType::subCapabilityDetailsType> SubCapabilityDetails;

  /** Indicates an ESM receiver dwell that is applicable to the Activity. This element is optional in support of ESM
    * Capabilities whose detailed dwell configuration and scheduling is internally isolated. Though optional here, dwell
    * information is required for successful, higher level ESM Capability management across heterogeneous families Systems,
    * Services and Subsystems. dwell information is potentially useful even if the associated Activity and/or Capability
    * aren't manual and/or interactive. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ESM_ReceiveDwellType, uci::type::accessorType::eSM_ReceiveDwellType> ReceiveDwell;

  /** Returns a const reference to the bounded list identified by SubCapability.
    *
    * @return A const reference to the bounded list identified by SubCapability.
    */
  virtual const uci::type::ESM_ActivityType::SubCapability& getSubCapability() const = 0;

  /** Returns a reference to the bounded list identified by SubCapability.
    *
    * @return A reference to the bounded list identified by SubCapability.
    */
  virtual uci::type::ESM_ActivityType::SubCapability& getSubCapability() = 0;

  /** Sets the bounded list identified by SubCapability.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_ActivityType& setSubCapability(const uci::type::ESM_ActivityType::SubCapability& value) = 0;

  /** Returns a const reference to the bounded list identified by SubCapabilityDetails.
    *
    * @return A const reference to the bounded list identified by SubCapabilityDetails.
    */
  virtual const uci::type::ESM_ActivityType::SubCapabilityDetails& getSubCapabilityDetails() const = 0;

  /** Returns a reference to the bounded list identified by SubCapabilityDetails.
    *
    * @return A reference to the bounded list identified by SubCapabilityDetails.
    */
  virtual uci::type::ESM_ActivityType::SubCapabilityDetails& getSubCapabilityDetails() = 0;

  /** Sets the bounded list identified by SubCapabilityDetails.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_ActivityType& setSubCapabilityDetails(const uci::type::ESM_ActivityType::SubCapabilityDetails& value) = 0;

  /** Returns a const reference to the bounded list identified by ReceiveDwell.
    *
    * @return A const reference to the bounded list identified by ReceiveDwell.
    */
  virtual const uci::type::ESM_ActivityType::ReceiveDwell& getReceiveDwell() const = 0;

  /** Returns a reference to the bounded list identified by ReceiveDwell.
    *
    * @return A reference to the bounded list identified by ReceiveDwell.
    */
  virtual uci::type::ESM_ActivityType::ReceiveDwell& getReceiveDwell() = 0;

  /** Sets the bounded list identified by ReceiveDwell.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_ActivityType& setReceiveDwell(const uci::type::ESM_ActivityType::ReceiveDwell& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ConsentRequired.
    *
    * @return The value of the simple primitive data type identified by ConsentRequired.
    */
  virtual xs::Boolean getConsentRequired() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ConsentRequired.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_ActivityType& setConsentRequired(xs::Boolean value) = 0;

  /** Returns whether the Element identified by ConsentRequired exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConsentRequired is enabled or not.
    */
  virtual bool hasConsentRequired() const = 0;

  /** Clears (disabled) the Element identified by ConsentRequired.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_ActivityType& clearConsentRequired() = 0;

  /** Returns a const reference to the value of the enumeration identified by ConsentState.
    *
    * @return A const reference to the value of the enumeration identified by ConsentState.
    */
  virtual const uci::type::ConsentEnum& getConsentState() const = 0;

  /** Returns a reference to the value of the enumeration identified by ConsentState.
    *
    * @return A reference to the value of the enumeration identified by ConsentState.
    */
  virtual uci::type::ConsentEnum& getConsentState() = 0;

  /** Sets the value of the enumeration identified by ConsentState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_ActivityType& setConsentState(const uci::type::ConsentEnum& value) = 0;

  /** Sets the value of the enumeration identified by ConsentState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_ActivityType& setConsentState(uci::type::ConsentEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ConsentState exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConsentState is enabled or not.
    */
  virtual bool hasConsentState() const = 0;

  /** Enables the Element identified by ConsentState.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ConsentState.
    */
  virtual uci::type::ConsentEnum& enableConsentState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ConsentState.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_ActivityType& clearConsentState() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ActualStartTime.
    *
    * @return The value of the simple primitive data type identified by ActualStartTime.
    */
  virtual uci::type::DateTimeTypeValue getActualStartTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ActualStartTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_ActivityType& setActualStartTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by ActualStartTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActualStartTime is enabled or not.
    */
  virtual bool hasActualStartTime() const = 0;

  /** Clears (disabled) the Element identified by ActualStartTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_ActivityType& clearActualStartTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ActualEndTime.
    *
    * @return The value of the simple primitive data type identified by ActualEndTime.
    */
  virtual uci::type::DateTimeTypeValue getActualEndTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ActualEndTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_ActivityType& setActualEndTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by ActualEndTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActualEndTime is enabled or not.
    */
  virtual bool hasActualEndTime() const = 0;

  /** Clears (disabled) the Element identified by ActualEndTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_ActivityType& clearActualEndTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SpectralDensityReporting.
    *
    * @return The value of the simple primitive data type identified by SpectralDensityReporting.
    */
  virtual xs::Boolean getSpectralDensityReporting() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SpectralDensityReporting.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_ActivityType& setSpectralDensityReporting(xs::Boolean value) = 0;

  /** Returns whether the Element identified by SpectralDensityReporting exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SpectralDensityReporting is enabled or not.
    */
  virtual bool hasSpectralDensityReporting() const = 0;

  /** Clears (disabled) the Element identified by SpectralDensityReporting.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ESM_ActivityType& clearSpectralDensityReporting() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ESM_ActivityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ESM_ActivityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ESM_ActivityType to copy from.
    */
  ESM_ActivityType(const ESM_ActivityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ESM_ActivityType to the contents of the ESM_ActivityType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ESM_ActivityType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this ESM_ActivityType.
    * @return A reference to this ESM_ActivityType.
    */
  ESM_ActivityType& operator=(const ESM_ActivityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ESM_ACTIVITYTYPE_H

