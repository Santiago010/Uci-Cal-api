/** @file ResourceDefinitionRF_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_RESOURCEDEFINITIONRF_TYPE_H
#define UCI_TYPE_RESOURCEDEFINITIONRF_TYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/AntennaAllocationAndBeamConfigurationsType.h"
#include "uci/type/BlankingLimitType.h"
#include "uci/type/RF_TypeEnum.h"
#include "uci/type/ResourceAllocationPeriodRF_Type.h"
#include "uci/type/UnsignedIntegerMinMaxType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ResourceDefinitionRF_Type : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ResourceDefinitionRF_Type.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ResourceDefinitionRF_Type.
    */
  static UCI_EXPORT ResourceDefinitionRF_Type& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ResourceDefinitionRF_Type initializing the data accessed by the new
    * ResourceDefinitionRF_Type using the data accessed by the specified ResourceDefinitionRF_Type (cloning).
    *
    * @param accessor The ResourceDefinitionRF_Type that provides access to the data that is to be used to initialize the
    *      data accessed by the new created ResourceDefinitionRF_Type.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ResourceDefinitionRF_Type.
    */
  static UCI_EXPORT ResourceDefinitionRF_Type& create(const ResourceDefinitionRF_Type& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ResourceDefinitionRF_Type. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The ResourceDefinitionRF_Type that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ResourceDefinitionRF_Type& accessor);

  /** Returns this accessor's type constant, i.e. resourceDefinitionRF_Type.
    *
    * @return This accessor's type constant, i.e. resourceDefinitionRF_Type.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::resourceDefinitionRF_Type;
  }

  /** Returns the version that was initialized from the uci:version attribute of ResourceDefinitionRF_Type.
    *
    * @return The version that was initialized from the uci:version attribute of ResourceDefinitionRF_Type.
    */
  static std::string getUCITypeVersion() {
    return "002.001.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ResourceDefinitionRF_Type& accessor) = 0;

  /** This element contains the value of the RFTI Indices. If number of RFTI == 2, the value of RF_ThreadInstanceIndex[0]is
    * used to access resources with the sibling ResourceAccessPriority == Min; the value of the RF_ThreadInstanceIndex[1]
    * is used to access resources with the sibling ResourceAccessPriority == Max. ResourceAllocator generates the index in
    * a an incrementing fashion 1, 2, 3... at resource allocation time, assuring that identifiers are unique across
    * resource allocations. RF_ThreadInstanceIndices may be re-used after an allocation has been deallocated. [Occurrences:
    * Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::base::UnsignedIntAccessor, uci::base::accessorType::unsignedIntAccessor> RF_ThreadInstanceIndex;

  /** Indicates allocated Antenna ID and the associated Beam Configuration Indices. Specific AntennaResourceInstances are
    * also allocated. Shared Antennas are not taxonomically described in UCI. It is left to external actors to organize,
    * uniquely describe and identify them. AntennaID is the same as the Antenna SupportCapabilityID. [Occurrences: Minimum:
    * 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::AntennaAllocationAndBeamConfigurationsType, uci::type::accessorType::antennaAllocationAndBeamConfigurationsType> AntennaID_AndBeamConfigurations;

  /** Duty cycle allocations for each AccessPeriodIndex requested in the RF_ResourceAllocationRequest. [Occurrences:
    * Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ResourceAllocationPeriodRF_Type, uci::type::accessorType::resourceAllocationPeriodRF_Type> PeriodAccessAllocations;

  /** Required for allocations of Tx resources. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::BlankingLimitType, uci::type::accessorType::blankingLimitType> BlankingLimit;

  /** Returns the value of the SimplePrimitive data type identified by ResourceRequestOptionIndex.
    *
    * @return The value of the simple primitive data type identified by ResourceRequestOptionIndex.
    */
  virtual xs::UnsignedInt getResourceRequestOptionIndex() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ResourceRequestOptionIndex.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceDefinitionRF_Type& setResourceRequestOptionIndex(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by SystemThreadIndex.
    *
    * @return The value of the simple primitive data type identified by SystemThreadIndex.
    */
  virtual xs::UnsignedInt getSystemThreadIndex() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SystemThreadIndex.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceDefinitionRF_Type& setSystemThreadIndex(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by SystemThreadIndex exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SystemThreadIndex is enabled or not.
    */
  virtual bool hasSystemThreadIndex() const = 0;

  /** Clears (disabled) the Element identified by SystemThreadIndex.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceDefinitionRF_Type& clearSystemThreadIndex() = 0;

  /** Returns a const reference to the bounded list identified by RF_ThreadInstanceIndex.
    *
    * @return A const reference to the bounded list identified by RF_ThreadInstanceIndex.
    */
  virtual const uci::type::ResourceDefinitionRF_Type::RF_ThreadInstanceIndex& getRF_ThreadInstanceIndex() const = 0;

  /** Returns a reference to the bounded list identified by RF_ThreadInstanceIndex.
    *
    * @return A reference to the bounded list identified by RF_ThreadInstanceIndex.
    */
  virtual uci::type::ResourceDefinitionRF_Type::RF_ThreadInstanceIndex& getRF_ThreadInstanceIndex() = 0;

  /** Sets the bounded list identified by RF_ThreadInstanceIndex.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceDefinitionRF_Type& setRF_ThreadInstanceIndex(const uci::type::ResourceDefinitionRF_Type::RF_ThreadInstanceIndex& value) = 0;

  /** Returns a const reference to the bounded list identified by AntennaID_AndBeamConfigurations.
    *
    * @return A const reference to the bounded list identified by AntennaID_AndBeamConfigurations.
    */
  virtual const uci::type::ResourceDefinitionRF_Type::AntennaID_AndBeamConfigurations& getAntennaID_AndBeamConfigurations() const = 0;

  /** Returns a reference to the bounded list identified by AntennaID_AndBeamConfigurations.
    *
    * @return A reference to the bounded list identified by AntennaID_AndBeamConfigurations.
    */
  virtual uci::type::ResourceDefinitionRF_Type::AntennaID_AndBeamConfigurations& getAntennaID_AndBeamConfigurations() = 0;

  /** Sets the bounded list identified by AntennaID_AndBeamConfigurations.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceDefinitionRF_Type& setAntennaID_AndBeamConfigurations(const uci::type::ResourceDefinitionRF_Type::AntennaID_AndBeamConfigurations& value) = 0;

  /** Returns a const reference to the bounded list identified by PeriodAccessAllocations.
    *
    * @return A const reference to the bounded list identified by PeriodAccessAllocations.
    */
  virtual const uci::type::ResourceDefinitionRF_Type::PeriodAccessAllocations& getPeriodAccessAllocations() const = 0;

  /** Returns a reference to the bounded list identified by PeriodAccessAllocations.
    *
    * @return A reference to the bounded list identified by PeriodAccessAllocations.
    */
  virtual uci::type::ResourceDefinitionRF_Type::PeriodAccessAllocations& getPeriodAccessAllocations() = 0;

  /** Sets the bounded list identified by PeriodAccessAllocations.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceDefinitionRF_Type& setPeriodAccessAllocations(const uci::type::ResourceDefinitionRF_Type::PeriodAccessAllocations& value) = 0;

  /** Returns a const reference to the bounded list identified by BlankingLimit.
    *
    * @return A const reference to the bounded list identified by BlankingLimit.
    */
  virtual const uci::type::ResourceDefinitionRF_Type::BlankingLimit& getBlankingLimit() const = 0;

  /** Returns a reference to the bounded list identified by BlankingLimit.
    *
    * @return A reference to the bounded list identified by BlankingLimit.
    */
  virtual uci::type::ResourceDefinitionRF_Type::BlankingLimit& getBlankingLimit() = 0;

  /** Sets the bounded list identified by BlankingLimit.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceDefinitionRF_Type& setBlankingLimit(const uci::type::ResourceDefinitionRF_Type::BlankingLimit& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by RF_Mode.
    *
    * @return A const reference to the value of the enumeration identified by RF_Mode.
    */
  virtual const uci::type::RF_TypeEnum& getRF_Mode() const = 0;

  /** Returns a reference to the value of the enumeration identified by RF_Mode.
    *
    * @return A reference to the value of the enumeration identified by RF_Mode.
    */
  virtual uci::type::RF_TypeEnum& getRF_Mode() = 0;

  /** Sets the value of the enumeration identified by RF_Mode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceDefinitionRF_Type& setRF_Mode(const uci::type::RF_TypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by RF_Mode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceDefinitionRF_Type& setRF_Mode(uci::type::RF_TypeEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ResourceAccessPriority.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ResourceAccessPriority.
    */
  virtual const uci::type::UnsignedIntegerMinMaxType& getResourceAccessPriority() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ResourceAccessPriority.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ResourceAccessPriority.
    */
  virtual uci::type::UnsignedIntegerMinMaxType& getResourceAccessPriority() = 0;

  /** Sets the complex content identified by ResourceAccessPriority to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ResourceAccessPriority.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResourceDefinitionRF_Type& setResourceAccessPriority(const uci::type::UnsignedIntegerMinMaxType& value) = 0;

  /** Enables the Element identified by ResourceAccessPriority.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return A reference to the accessor that provides access to the complex content identified by ResourceAccessPriority.
    */
  virtual uci::type::UnsignedIntegerMinMaxType& enableResourceAccessPriority(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ResourceDefinitionRF_Type() {
  }

  /** The destructor [only available to derived classes]. */
  ~ResourceDefinitionRF_Type() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ResourceDefinitionRF_Type to copy from.
    */
  ResourceDefinitionRF_Type(const ResourceDefinitionRF_Type& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ResourceDefinitionRF_Type to the contents of the
    * ResourceDefinitionRF_Type on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ResourceDefinitionRF_Type on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this ResourceDefinitionRF_Type.
    * @return A reference to this ResourceDefinitionRF_Type.
    */
  ResourceDefinitionRF_Type& operator=(const ResourceDefinitionRF_Type& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_RESOURCEDEFINITIONRF_TYPE_H

