/** @file ActivityBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ACTIVITYBASETYPE_H
#define UCI_TYPE_ACTIVITYBASETYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ActivityBasisEnum.h"
#include "ActivityID_Type.h"
#include "ActivitySourceType.h"
#include "ActivityStateEnum.h"
#include "CannotComplyType.h"
#include "CapabilityID_Type.h"
#include "ComparableRankingType.h"
#include "DateTimeType.h"
#include "PercentType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ActivityBaseType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ActivityBaseType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ActivityBaseType.
    */
  static UCI_EXPORT ActivityBaseType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ActivityBaseType initializing the data accessed by the new ActivityBaseType using the
    * data accessed by the specified ActivityBaseType (cloning).
    *
    * @param accessor The ActivityBaseType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created ActivityBaseType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ActivityBaseType.
    */
  static UCI_EXPORT ActivityBaseType& create(const ActivityBaseType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ActivityBaseType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The ActivityBaseType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ActivityBaseType& accessor);

  /** Returns this accessor's type constant, i.e. activityBaseType.
    *
    * @return This accessor's type constant, i.e. activityBaseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::activityBaseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ActivityBaseType.
    *
    * @return The version that was initialized from the uci:version attribute of ActivityBaseType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ActivityBaseType& accessor) = 0;

  /** Indicates a Capability which the Activity is an instance of. Generally an Activity is an instance of a single
    * Capability. An Activity can be associated with multiple Capabilities when, for example, a Subsystem has distinct
    * Capabilities for automated and manual. In this case, if a manual command is issued while an automated Activity that
    * achieves the desired result already exists, a single Activity represents both Capabilities. [Occurrences: Minimum: 1;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CapabilityID_Type, uci::type::accessorType::capabilityID_Type> CapabilityID;

  /** Indicates an originating "source" of the Activity; the command or other item which invoked this specific Activity of
    * a Capability. A single Activity can fully or partially satisfy Activity sources. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ActivitySourceType, uci::type::accessorType::activitySourceType> Source;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActivityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActivityID.
    */
  virtual const uci::type::ActivityID_Type& getActivityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActivityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActivityID.
    */
  virtual uci::type::ActivityID_Type& getActivityID() = 0;

  /** Sets the complex content identified by ActivityID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& setActivityID(const uci::type::ActivityID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by CapabilityID.
    *
    * @return A const reference to the bounded list identified by CapabilityID.
    */
  virtual const uci::type::ActivityBaseType::CapabilityID& getCapabilityID() const = 0;

  /** Returns a reference to the bounded list identified by CapabilityID.
    *
    * @return A reference to the bounded list identified by CapabilityID.
    */
  virtual uci::type::ActivityBaseType::CapabilityID& getCapabilityID() = 0;

  /** Sets the bounded list identified by CapabilityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& setCapabilityID(const uci::type::ActivityBaseType::CapabilityID& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Interactive.
    *
    * @return The value of the simple primitive data type identified by Interactive.
    */
  virtual xs::Boolean getInteractive() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Interactive.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& setInteractive(xs::Boolean value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ActivityState.
    *
    * @return A const reference to the value of the enumeration identified by ActivityState.
    */
  virtual const uci::type::ActivityStateEnum& getActivityState() const = 0;

  /** Returns a reference to the value of the enumeration identified by ActivityState.
    *
    * @return A reference to the value of the enumeration identified by ActivityState.
    */
  virtual uci::type::ActivityStateEnum& getActivityState() = 0;

  /** Sets the value of the enumeration identified by ActivityState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& setActivityState(const uci::type::ActivityStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by ActivityState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& setActivityState(uci::type::ActivityStateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by Basis.
    *
    * @return A const reference to the value of the enumeration identified by Basis.
    */
  virtual const uci::type::ActivityBasisEnum& getBasis() const = 0;

  /** Returns a reference to the value of the enumeration identified by Basis.
    *
    * @return A reference to the value of the enumeration identified by Basis.
    */
  virtual uci::type::ActivityBasisEnum& getBasis() = 0;

  /** Sets the value of the enumeration identified by Basis.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& setBasis(const uci::type::ActivityBasisEnum& value) = 0;

  /** Sets the value of the enumeration identified by Basis.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& setBasis(uci::type::ActivityBasisEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Basis exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Basis is enabled or not.
    */
  virtual bool hasBasis() const = 0;

  /** Enables the Element identified by Basis.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Basis.
    */
  virtual uci::type::ActivityBasisEnum& enableBasis(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Basis.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& clearBasis() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActivityRank.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActivityRank.
    */
  virtual const uci::type::ComparableRankingType& getActivityRank() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActivityRank.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActivityRank.
    */
  virtual uci::type::ComparableRankingType& getActivityRank() = 0;

  /** Sets the complex content identified by ActivityRank to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivityRank.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& setActivityRank(const uci::type::ComparableRankingType& value) = 0;

  /** Returns whether the Element identified by ActivityRank exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActivityRank is enabled or not.
    */
  virtual bool hasActivityRank() const = 0;

  /** Enables the Element identified by ActivityRank.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActivityRank.
    */
  virtual uci::type::ComparableRankingType& enableActivityRank(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActivityRank.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& clearActivityRank() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActivityReason.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActivityReason.
    */
  virtual const uci::type::CannotComplyType& getActivityReason() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActivityReason.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActivityReason.
    */
  virtual uci::type::CannotComplyType& getActivityReason() = 0;

  /** Sets the complex content identified by ActivityReason to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivityReason.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& setActivityReason(const uci::type::CannotComplyType& value) = 0;

  /** Returns whether the Element identified by ActivityReason exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActivityReason is enabled or not.
    */
  virtual bool hasActivityReason() const = 0;

  /** Enables the Element identified by ActivityReason.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActivityReason.
    */
  virtual uci::type::CannotComplyType& enableActivityReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActivityReason.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& clearActivityReason() = 0;

  /** Returns a const reference to the bounded list identified by Source.
    *
    * @return A const reference to the bounded list identified by Source.
    */
  virtual const uci::type::ActivityBaseType::Source& getSource() const = 0;

  /** Returns a reference to the bounded list identified by Source.
    *
    * @return A reference to the bounded list identified by Source.
    */
  virtual uci::type::ActivityBaseType::Source& getSource() = 0;

  /** Sets the bounded list identified by Source.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& setSource(const uci::type::ActivityBaseType::Source& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by EstimatedStartTime.
    *
    * @return The value of the simple primitive data type identified by EstimatedStartTime.
    */
  virtual uci::type::DateTimeTypeValue getEstimatedStartTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EstimatedStartTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& setEstimatedStartTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by EstimatedStartTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedStartTime is enabled or not.
    */
  virtual bool hasEstimatedStartTime() const = 0;

  /** Clears (disabled) the Element identified by EstimatedStartTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& clearEstimatedStartTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EstimatedCompletionTime.
    *
    * @return The value of the simple primitive data type identified by EstimatedCompletionTime.
    */
  virtual uci::type::DateTimeTypeValue getEstimatedCompletionTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EstimatedCompletionTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& setEstimatedCompletionTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by EstimatedCompletionTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedCompletionTime is enabled or not.
    */
  virtual bool hasEstimatedCompletionTime() const = 0;

  /** Clears (disabled) the Element identified by EstimatedCompletionTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& clearEstimatedCompletionTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EstimatedPercentComplete.
    *
    * @return The value of the simple primitive data type identified by EstimatedPercentComplete.
    */
  virtual uci::type::PercentTypeValue getEstimatedPercentComplete() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EstimatedPercentComplete.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& setEstimatedPercentComplete(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by EstimatedPercentComplete exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedPercentComplete is enabled or not.
    */
  virtual bool hasEstimatedPercentComplete() const = 0;

  /** Clears (disabled) the Element identified by EstimatedPercentComplete.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActivityBaseType& clearEstimatedPercentComplete() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ActivityBaseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ActivityBaseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ActivityBaseType to copy from.
    */
  ActivityBaseType(const ActivityBaseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ActivityBaseType to the contents of the ActivityBaseType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ActivityBaseType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this ActivityBaseType.
    * @return A reference to this ActivityBaseType.
    */
  ActivityBaseType& operator=(const ActivityBaseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ACTIVITYBASETYPE_H

