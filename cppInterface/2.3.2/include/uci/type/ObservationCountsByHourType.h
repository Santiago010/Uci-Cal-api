/** @file ObservationCountsByHourType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OBSERVATIONCOUNTSBYHOURTYPE_H
#define UCI_TYPE_OBSERVATIONCOUNTSBYHOURTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the hour of day (00-23) and the number of observations during that hour. */
class ObservationCountsByHourType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ObservationCountsByHourType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ObservationCountsByHourType.
    */
  static UCI_EXPORT ObservationCountsByHourType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ObservationCountsByHourType initializing the data accessed by the new
    * ObservationCountsByHourType using the data accessed by the specified ObservationCountsByHourType (cloning).
    *
    * @param accessor The ObservationCountsByHourType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created ObservationCountsByHourType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ObservationCountsByHourType.
    */
  static UCI_EXPORT ObservationCountsByHourType& create(const ObservationCountsByHourType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ObservationCountsByHourType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The ObservationCountsByHourType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ObservationCountsByHourType& accessor);

  /** Returns this accessor's type constant, i.e. observationCountsByHourType.
    *
    * @return This accessor's type constant, i.e. observationCountsByHourType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::observationCountsByHourType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ObservationCountsByHourType.
    *
    * @return The version that was initialized from the uci:version attribute of ObservationCountsByHourType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ObservationCountsByHourType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour00Count.
    *
    * @return The value of the simple primitive data type identified by Hour00Count.
    */
  virtual xs::UnsignedInt getHour00Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour00Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour00Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour01Count.
    *
    * @return The value of the simple primitive data type identified by Hour01Count.
    */
  virtual xs::UnsignedInt getHour01Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour01Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour01Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour02Count.
    *
    * @return The value of the simple primitive data type identified by Hour02Count.
    */
  virtual xs::UnsignedInt getHour02Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour02Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour02Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour03Count.
    *
    * @return The value of the simple primitive data type identified by Hour03Count.
    */
  virtual xs::UnsignedInt getHour03Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour03Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour03Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour04Count.
    *
    * @return The value of the simple primitive data type identified by Hour04Count.
    */
  virtual xs::UnsignedInt getHour04Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour04Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour04Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour05Count.
    *
    * @return The value of the simple primitive data type identified by Hour05Count.
    */
  virtual xs::UnsignedInt getHour05Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour05Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour05Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour06Count.
    *
    * @return The value of the simple primitive data type identified by Hour06Count.
    */
  virtual xs::UnsignedInt getHour06Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour06Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour06Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour07Count.
    *
    * @return The value of the simple primitive data type identified by Hour07Count.
    */
  virtual xs::UnsignedInt getHour07Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour07Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour07Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour08Count.
    *
    * @return The value of the simple primitive data type identified by Hour08Count.
    */
  virtual xs::UnsignedInt getHour08Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour08Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour08Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour09Count.
    *
    * @return The value of the simple primitive data type identified by Hour09Count.
    */
  virtual xs::UnsignedInt getHour09Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour09Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour09Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour10Count.
    *
    * @return The value of the simple primitive data type identified by Hour10Count.
    */
  virtual xs::UnsignedInt getHour10Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour10Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour10Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour11Count.
    *
    * @return The value of the simple primitive data type identified by Hour11Count.
    */
  virtual xs::UnsignedInt getHour11Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour11Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour11Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour12Count.
    *
    * @return The value of the simple primitive data type identified by Hour12Count.
    */
  virtual xs::UnsignedInt getHour12Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour12Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour12Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour13Count.
    *
    * @return The value of the simple primitive data type identified by Hour13Count.
    */
  virtual xs::UnsignedInt getHour13Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour13Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour13Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour14Count.
    *
    * @return The value of the simple primitive data type identified by Hour14Count.
    */
  virtual xs::UnsignedInt getHour14Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour14Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour14Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour15Count.
    *
    * @return The value of the simple primitive data type identified by Hour15Count.
    */
  virtual xs::UnsignedInt getHour15Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour15Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour15Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour16Count.
    *
    * @return The value of the simple primitive data type identified by Hour16Count.
    */
  virtual xs::UnsignedInt getHour16Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour16Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour16Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour17Count.
    *
    * @return The value of the simple primitive data type identified by Hour17Count.
    */
  virtual xs::UnsignedInt getHour17Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour17Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour17Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour18Count.
    *
    * @return The value of the simple primitive data type identified by Hour18Count.
    */
  virtual xs::UnsignedInt getHour18Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour18Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour18Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour19Count.
    *
    * @return The value of the simple primitive data type identified by Hour19Count.
    */
  virtual xs::UnsignedInt getHour19Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour19Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour19Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour20Count.
    *
    * @return The value of the simple primitive data type identified by Hour20Count.
    */
  virtual xs::UnsignedInt getHour20Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour20Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour20Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour21Count.
    *
    * @return The value of the simple primitive data type identified by Hour21Count.
    */
  virtual xs::UnsignedInt getHour21Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour21Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour21Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour22Count.
    *
    * @return The value of the simple primitive data type identified by Hour22Count.
    */
  virtual xs::UnsignedInt getHour22Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour22Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour22Count(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Hour23Count.
    *
    * @return The value of the simple primitive data type identified by Hour23Count.
    */
  virtual xs::UnsignedInt getHour23Count() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Hour23Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ObservationCountsByHourType& setHour23Count(xs::UnsignedInt value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ObservationCountsByHourType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ObservationCountsByHourType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ObservationCountsByHourType to copy from.
    */
  ObservationCountsByHourType(const ObservationCountsByHourType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ObservationCountsByHourType to the contents of the
    * ObservationCountsByHourType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ObservationCountsByHourType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this ObservationCountsByHourType.
    * @return A reference to this ObservationCountsByHourType.
    */
  ObservationCountsByHourType& operator=(const ObservationCountsByHourType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_OBSERVATIONCOUNTSBYHOURTYPE_H

