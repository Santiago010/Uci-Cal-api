/** @file SubsystemMaintenanceTestResultPET.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SUBSYSTEMMAINTENANCETESTRESULTPET_H
#define UCI_TYPE_SUBSYSTEMMAINTENANCETESTRESULTPET_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/CommandID_Type.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/SubsystemMaintenanceID_Type.h"
#include "uci/type/SubsystemMaintenanceResultEventType.h"
#include "uci/type/SubsystemMaintenanceResultStatusType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Abstract extension type for subsystem maintenance test results. Available extension types include:
  * SubsystemMaintenanceTestResultType.
  */
class SubsystemMaintenanceTestResultPET : public virtual uci::base::Accessor {
public:

  /** Returns this accessor's type constant, i.e. subsystemMaintenanceTestResultPET.
    *
    * @return This accessor's type constant, i.e. subsystemMaintenanceTestResultPET.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::subsystemMaintenanceTestResultPET;
  }

  /** Returns the version that was initialized from the uci:version attribute of SubsystemMaintenanceTestResultPET.
    *
    * @return The version that was initialized from the uci:version attribute of SubsystemMaintenanceTestResultPET.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SubsystemMaintenanceTestResultPET& accessor) = 0;

  /** Indicates a list of unique ID(s) of the Subsystem component(s) whose maintenace test status is being reported.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SubsystemID_Type, uci::type::accessorType::subsystemID_Type> SubsystemComponentID;

  /** Indicates a list of Capabilities whose maintenance test status is being reported. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CapabilityID_Type, uci::type::accessorType::capabilityID_Type> CapabilityID;

  /** List of test events (i.e., test steps) associated with the sibling TestID. This may be a partial or full list. In the
    * CompletedTest, this element will provide list of completed or failed maintenance test unit results. In the
    * CurrentTest, this element will provide list of results for maintenance test units in process or in queue.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SubsystemMaintenanceResultEventType, uci::type::accessorType::subsystemMaintenanceResultEventType> EventResult;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CommandID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CommandID.
    */
  virtual const uci::type::CommandID_Type& getCommandID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CommandID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CommandID.
    */
  virtual uci::type::CommandID_Type& getCommandID() = 0;

  /** Sets the complex content identified by CommandID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CommandID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestResultPET& setCommandID(const uci::type::CommandID_Type& value) = 0;

  /** Returns whether the Element identified by CommandID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CommandID is enabled or not.
    */
  virtual bool hasCommandID() const = 0;

  /** Enables the Element identified by CommandID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CommandID.
    */
  virtual uci::type::CommandID_Type& enableCommandID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CommandID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestResultPET& clearCommandID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TestID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TestID.
    */
  virtual const uci::type::SubsystemMaintenanceID_Type& getTestID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TestID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TestID.
    */
  virtual uci::type::SubsystemMaintenanceID_Type& getTestID() = 0;

  /** Sets the complex content identified by TestID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TestID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestResultPET& setTestID(const uci::type::SubsystemMaintenanceID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by SubsystemComponentID.
    *
    * @return A const reference to the bounded list identified by SubsystemComponentID.
    */
  virtual const uci::type::SubsystemMaintenanceTestResultPET::SubsystemComponentID& getSubsystemComponentID() const = 0;

  /** Returns a reference to the bounded list identified by SubsystemComponentID.
    *
    * @return A reference to the bounded list identified by SubsystemComponentID.
    */
  virtual uci::type::SubsystemMaintenanceTestResultPET::SubsystemComponentID& getSubsystemComponentID() = 0;

  /** Sets the bounded list identified by SubsystemComponentID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestResultPET& setSubsystemComponentID(const uci::type::SubsystemMaintenanceTestResultPET::SubsystemComponentID& value) = 0;

  /** Returns a const reference to the bounded list identified by CapabilityID.
    *
    * @return A const reference to the bounded list identified by CapabilityID.
    */
  virtual const uci::type::SubsystemMaintenanceTestResultPET::CapabilityID& getCapabilityID() const = 0;

  /** Returns a reference to the bounded list identified by CapabilityID.
    *
    * @return A reference to the bounded list identified by CapabilityID.
    */
  virtual uci::type::SubsystemMaintenanceTestResultPET::CapabilityID& getCapabilityID() = 0;

  /** Sets the bounded list identified by CapabilityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestResultPET& setCapabilityID(const uci::type::SubsystemMaintenanceTestResultPET::CapabilityID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TestResultStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TestResultStatus.
    */
  virtual const uci::type::SubsystemMaintenanceResultStatusType& getTestResultStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TestResultStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TestResultStatus.
    */
  virtual uci::type::SubsystemMaintenanceResultStatusType& getTestResultStatus() = 0;

  /** Sets the complex content identified by TestResultStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TestResultStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestResultPET& setTestResultStatus(const uci::type::SubsystemMaintenanceResultStatusType& value) = 0;

  /** Returns a const reference to the bounded list identified by EventResult.
    *
    * @return A const reference to the bounded list identified by EventResult.
    */
  virtual const uci::type::SubsystemMaintenanceTestResultPET::EventResult& getEventResult() const = 0;

  /** Returns a reference to the bounded list identified by EventResult.
    *
    * @return A reference to the bounded list identified by EventResult.
    */
  virtual uci::type::SubsystemMaintenanceTestResultPET::EventResult& getEventResult() = 0;

  /** Sets the bounded list identified by EventResult.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SubsystemMaintenanceTestResultPET& setEventResult(const uci::type::SubsystemMaintenanceTestResultPET::EventResult& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SubsystemMaintenanceTestResultPET() {
  }

  /** The destructor [only available to derived classes]. */
  ~SubsystemMaintenanceTestResultPET() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SubsystemMaintenanceTestResultPET to copy from.
    */
  SubsystemMaintenanceTestResultPET(const SubsystemMaintenanceTestResultPET& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SubsystemMaintenanceTestResultPET to the contents of the
    * SubsystemMaintenanceTestResultPET on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The SubsystemMaintenanceTestResultPET on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this SubsystemMaintenanceTestResultPET.
    * @return A reference to this SubsystemMaintenanceTestResultPET.
    */
  SubsystemMaintenanceTestResultPET& operator=(const SubsystemMaintenanceTestResultPET& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SUBSYSTEMMAINTENANCETESTRESULTPET_H

