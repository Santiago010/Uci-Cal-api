/** @file SystemStatusMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SYSTEMSTATUSMDT_H
#define UCI_TYPE_SYSTEMSTATUSMDT_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ActivityByType.h"
#include "CapabilityID_Type.h"
#include "EntityFusionEligibilityEnum.h"
#include "OperatorID_Type.h"
#include "PlatformStatusType.h"
#include "ServiceID_Type.h"
#include "StrengthType.h"
#include "SubsystemID_Type.h"
#include "SystemCommunicationsType.h"
#include "SystemID_Type.h"
#include "SystemIdentityType.h"
#include "SystemSourceEnum.h"
#include "SystemStateEnum.h"
#include "VisibleString32Type.h"
#include "VoiceControlType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SystemStatusMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SystemStatusMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SystemStatusMDT.
    */
  static UCI_EXPORT SystemStatusMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SystemStatusMDT initializing the data accessed by the new SystemStatusMDT using the data
    * accessed by the specified SystemStatusMDT (cloning).
    *
    * @param accessor The SystemStatusMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SystemStatusMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SystemStatusMDT.
    */
  static UCI_EXPORT SystemStatusMDT& create(const SystemStatusMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SystemStatusMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The SystemStatusMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SystemStatusMDT& accessor);

  /** Returns this accessor's type constant, i.e. systemStatusMDT.
    *
    * @return This accessor's type constant, i.e. systemStatusMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::systemStatusMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of SystemStatusMDT.
    *
    * @return The version that was initialized from the uci:version attribute of SystemStatusMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SystemStatusMDT& accessor) = 0;

  /** The UUID of the operator associated with this system. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::OperatorID_Type, uci::type::accessorType::operatorID_Type> OperatorID;

  /** Indicates a C2 relevant Subsystem of the System. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::SubsystemID_Type, uci::type::accessorType::subsystemID_Type> SubsystemID;

  /** Indicates a C2 relevant Capability of the System. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::CapabilityID_Type, uci::type::accessorType::capabilityID_Type> CapabilityID;

  /** Indicates a Service that is implemented by the System. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::ServiceID_Type, uci::type::accessorType::serviceID_Type> ServiceID;

  /** This element indicates an activity, that isn't otherwise represented by UCI Tasks, Capability commands, etc. being
    * performed by the Entity. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ActivityByType, uci::type::accessorType::activityByType> ActivityBy;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual const uci::type::SystemID_Type& getSystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual uci::type::SystemID_Type& getSystemID() = 0;

  /** Sets the complex content identified by SystemID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setSystemID(const uci::type::SystemID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by SystemState.
    *
    * @return A const reference to the value of the enumeration identified by SystemState.
    */
  virtual const uci::type::SystemStateEnum& getSystemState() const = 0;

  /** Returns a reference to the value of the enumeration identified by SystemState.
    *
    * @return A reference to the value of the enumeration identified by SystemState.
    */
  virtual uci::type::SystemStateEnum& getSystemState() = 0;

  /** Sets the value of the enumeration identified by SystemState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setSystemState(const uci::type::SystemStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by SystemState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setSystemState(uci::type::SystemStateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by Source.
    *
    * @return A const reference to the value of the enumeration identified by Source.
    */
  virtual const uci::type::SystemSourceEnum& getSource() const = 0;

  /** Returns a reference to the value of the enumeration identified by Source.
    *
    * @return A reference to the value of the enumeration identified by Source.
    */
  virtual uci::type::SystemSourceEnum& getSource() = 0;

  /** Sets the value of the enumeration identified by Source.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setSource(const uci::type::SystemSourceEnum& value) = 0;

  /** Sets the value of the enumeration identified by Source.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setSource(uci::type::SystemSourceEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by FusionEligibility.
    *
    * @return A const reference to the value of the enumeration identified by FusionEligibility.
    */
  virtual const uci::type::EntityFusionEligibilityEnum& getFusionEligibility() const = 0;

  /** Returns a reference to the value of the enumeration identified by FusionEligibility.
    *
    * @return A reference to the value of the enumeration identified by FusionEligibility.
    */
  virtual uci::type::EntityFusionEligibilityEnum& getFusionEligibility() = 0;

  /** Sets the value of the enumeration identified by FusionEligibility.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setFusionEligibility(const uci::type::EntityFusionEligibilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by FusionEligibility.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setFusionEligibility(uci::type::EntityFusionEligibilityEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by FusionEligibility exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FusionEligibility is enabled or not.
    */
  virtual bool hasFusionEligibility() const = 0;

  /** Enables the Element identified by FusionEligibility.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by FusionEligibility.
    */
  virtual uci::type::EntityFusionEligibilityEnum& enableFusionEligibility(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FusionEligibility.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& clearFusionEligibility() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Model.
    *
    * @return A const reference to the accessor that provides access to the string identified by Model.
    */
  virtual const uci::type::VisibleString32Type& getModel() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Model.
    *
    * @return A reference to the accessor that provides access to the string identified by Model.
    */
  virtual uci::type::VisibleString32Type& getModel() = 0;

  /** Sets the string identified by Model to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Model.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setModel(const uci::type::VisibleString32Type& value) = 0;

  /** Sets the string identified by Model to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setModel(const std::string& value) = 0;

  /** Sets the string identified by Model to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setModel(const char* value) = 0;

  /** Returns whether the Element identified by Model exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Model is enabled or not.
    */
  virtual bool hasModel() const = 0;

  /** Enables the Element identified by Model.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Model.
    */
  virtual uci::type::VisibleString32Type& enableModel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Model.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& clearModel() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual const uci::type::SystemIdentityType& getIdentity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::SystemIdentityType& getIdentity() = 0;

  /** Sets the complex content identified by Identity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Identity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setIdentity(const uci::type::SystemIdentityType& value) = 0;

  /** Returns whether the Element identified by Identity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Identity is enabled or not.
    */
  virtual bool hasIdentity() const = 0;

  /** Enables the Element identified by Identity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::SystemIdentityType& enableIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Identity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& clearIdentity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Communications.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Communications.
    */
  virtual const uci::type::SystemCommunicationsType& getCommunications() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Communications.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Communications.
    */
  virtual uci::type::SystemCommunicationsType& getCommunications() = 0;

  /** Sets the complex content identified by Communications to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Communications.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setCommunications(const uci::type::SystemCommunicationsType& value) = 0;

  /** Returns a const reference to the bounded list identified by OperatorID.
    *
    * @return A const reference to the bounded list identified by OperatorID.
    */
  virtual const uci::type::SystemStatusMDT::OperatorID& getOperatorID() const = 0;

  /** Returns a reference to the bounded list identified by OperatorID.
    *
    * @return A reference to the bounded list identified by OperatorID.
    */
  virtual uci::type::SystemStatusMDT::OperatorID& getOperatorID() = 0;

  /** Sets the bounded list identified by OperatorID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setOperatorID(const uci::type::SystemStatusMDT::OperatorID& value) = 0;

  /** Returns a const reference to the bounded list identified by SubsystemID.
    *
    * @return A const reference to the bounded list identified by SubsystemID.
    */
  virtual const uci::type::SystemStatusMDT::SubsystemID& getSubsystemID() const = 0;

  /** Returns a reference to the bounded list identified by SubsystemID.
    *
    * @return A reference to the bounded list identified by SubsystemID.
    */
  virtual uci::type::SystemStatusMDT::SubsystemID& getSubsystemID() = 0;

  /** Sets the bounded list identified by SubsystemID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setSubsystemID(const uci::type::SystemStatusMDT::SubsystemID& value) = 0;

  /** Returns a const reference to the bounded list identified by CapabilityID.
    *
    * @return A const reference to the bounded list identified by CapabilityID.
    */
  virtual const uci::type::SystemStatusMDT::CapabilityID& getCapabilityID() const = 0;

  /** Returns a reference to the bounded list identified by CapabilityID.
    *
    * @return A reference to the bounded list identified by CapabilityID.
    */
  virtual uci::type::SystemStatusMDT::CapabilityID& getCapabilityID() = 0;

  /** Sets the bounded list identified by CapabilityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setCapabilityID(const uci::type::SystemStatusMDT::CapabilityID& value) = 0;

  /** Returns a const reference to the bounded list identified by ServiceID.
    *
    * @return A const reference to the bounded list identified by ServiceID.
    */
  virtual const uci::type::SystemStatusMDT::ServiceID& getServiceID() const = 0;

  /** Returns a reference to the bounded list identified by ServiceID.
    *
    * @return A reference to the bounded list identified by ServiceID.
    */
  virtual uci::type::SystemStatusMDT::ServiceID& getServiceID() = 0;

  /** Sets the bounded list identified by ServiceID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setServiceID(const uci::type::SystemStatusMDT::ServiceID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PlatformStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PlatformStatus.
    */
  virtual const uci::type::PlatformStatusType& getPlatformStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PlatformStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PlatformStatus.
    */
  virtual uci::type::PlatformStatusType& getPlatformStatus() = 0;

  /** Sets the complex content identified by PlatformStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PlatformStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setPlatformStatus(const uci::type::PlatformStatusType& value) = 0;

  /** Returns whether the Element identified by PlatformStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PlatformStatus is enabled or not.
    */
  virtual bool hasPlatformStatus() const = 0;

  /** Enables the Element identified by PlatformStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PlatformStatus.
    */
  virtual uci::type::PlatformStatusType& enablePlatformStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PlatformStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& clearPlatformStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by VoiceControl.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by VoiceControl.
    */
  virtual const uci::type::VoiceControlType& getVoiceControl() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by VoiceControl.
    *
    * @return A reference to the accessor that provides access to the complex content identified by VoiceControl.
    */
  virtual uci::type::VoiceControlType& getVoiceControl() = 0;

  /** Sets the complex content identified by VoiceControl to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by VoiceControl.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setVoiceControl(const uci::type::VoiceControlType& value) = 0;

  /** Returns whether the Element identified by VoiceControl exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VoiceControl is enabled or not.
    */
  virtual bool hasVoiceControl() const = 0;

  /** Enables the Element identified by VoiceControl.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by VoiceControl.
    */
  virtual uci::type::VoiceControlType& enableVoiceControl(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VoiceControl.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& clearVoiceControl() = 0;

  /** Returns a const reference to the bounded list identified by ActivityBy.
    *
    * @return A const reference to the bounded list identified by ActivityBy.
    */
  virtual const uci::type::SystemStatusMDT::ActivityBy& getActivityBy() const = 0;

  /** Returns a reference to the bounded list identified by ActivityBy.
    *
    * @return A reference to the bounded list identified by ActivityBy.
    */
  virtual uci::type::SystemStatusMDT::ActivityBy& getActivityBy() = 0;

  /** Sets the bounded list identified by ActivityBy.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setActivityBy(const uci::type::SystemStatusMDT::ActivityBy& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Strength.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Strength.
    */
  virtual const uci::type::StrengthType& getStrength() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Strength.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Strength.
    */
  virtual uci::type::StrengthType& getStrength() = 0;

  /** Sets the complex content identified by Strength to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Strength.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& setStrength(const uci::type::StrengthType& value) = 0;

  /** Returns whether the Element identified by Strength exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Strength is enabled or not.
    */
  virtual bool hasStrength() const = 0;

  /** Enables the Element identified by Strength.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Strength.
    */
  virtual uci::type::StrengthType& enableStrength(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Strength.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SystemStatusMDT& clearStrength() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SystemStatusMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~SystemStatusMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SystemStatusMDT to copy from.
    */
  SystemStatusMDT(const SystemStatusMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SystemStatusMDT to the contents of the SystemStatusMDT on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SystemStatusMDT on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this SystemStatusMDT.
    * @return A reference to this SystemStatusMDT.
    */
  SystemStatusMDT& operator=(const SystemStatusMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SYSTEMSTATUSMDT_H

