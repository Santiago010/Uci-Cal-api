/** @file OrbitalSurveillanceSensorTaskBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ORBITALSURVEILLANCESENSORTASKBASETYPE_H
#define UCI_TYPE_ORBITALSURVEILLANCESENSORTASKBASETYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/DurationType.h"
#include "uci/type/OrbitalSurveillanceCollectionRequirementsType.h"
#include "uci/type/OrbitalSurveillanceSensorCapabilityEnum.h"
#include "uci/type/OrbitalSurveillanceSensorReportingCategoriesType.h"
#include "uci/type/OrbitalSurveillanceSensorSensitivityConstraintType.h"
#include "uci/type/OrbitalSurveillanceSubCapabilityEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The base type for an Orbital Surveillance Sensor Task. */
class OrbitalSurveillanceSensorTaskBaseType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OrbitalSurveillanceSensorTaskBaseType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitalSurveillanceSensorTaskBaseType.
    */
  static UCI_EXPORT OrbitalSurveillanceSensorTaskBaseType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OrbitalSurveillanceSensorTaskBaseType initializing the data accessed by the new
    * OrbitalSurveillanceSensorTaskBaseType using the data accessed by the specified OrbitalSurveillanceSensorTaskBaseType
    * (cloning).
    *
    * @param accessor The OrbitalSurveillanceSensorTaskBaseType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created OrbitalSurveillanceSensorTaskBaseType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitalSurveillanceSensorTaskBaseType.
    */
  static UCI_EXPORT OrbitalSurveillanceSensorTaskBaseType& create(const OrbitalSurveillanceSensorTaskBaseType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OrbitalSurveillanceSensorTaskBaseType. Use of the specified accessor after it has
    * been destroyed will result in undefined behavior.
    *
    * @param accessor The OrbitalSurveillanceSensorTaskBaseType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OrbitalSurveillanceSensorTaskBaseType& accessor);

  /** Returns this accessor's type constant, i.e. orbitalSurveillanceSensorTaskBaseType.
    *
    * @return This accessor's type constant, i.e. orbitalSurveillanceSensorTaskBaseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::orbitalSurveillanceSensorTaskBaseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OrbitalSurveillanceSensorTaskBaseType.
    *
    * @return The version that was initialized from the uci:version attribute of OrbitalSurveillanceSensorTaskBaseType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.001.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OrbitalSurveillanceSensorTaskBaseType& accessor) = 0;

  /** Provides Capability-specific instructions and information to the sensor to enable appropriate sensor set-up and data
    * collection to meet the orbital surveillance collection need. Examples include minimum and maximum number of metric
    * observations per collection interval for a metric collection task, requirement for an imagery collection and desired
    * imagery resolution for a characterization task, and minimum separation distance for a multi-object task.
    * [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OrbitalSurveillanceCollectionRequirementsType, uci::type::accessorType::orbitalSurveillanceCollectionRequirementsType> CollectionRequirements;

  /** This provides additional context for the sensor units to inform the decisions on which sensors are appropriate and
    * how best to set up collections. This context can help to compensate for shortfalls in the fidelity of the sensor
    * models. List size for this element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum:
    * 20]
    */
  typedef uci::base::BoundedList<uci::type::OrbitalSurveillanceSubCapabilityEnum, uci::type::accessorType::orbitalSurveillanceSubCapabilityEnum> InformationObjective;

  /** Indicates the SDA special reporting requirements, to include the product, priority, need by date, and/or entity for
    * which the product or products are to be reported. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OrbitalSurveillanceSensorReportingCategoriesType, uci::type::accessorType::orbitalSurveillanceSensorReportingCategoriesType> ReportingRequirements;

  /** Returns a const reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A const reference to the value of the enumeration identified by CapabilityType.
    */
  virtual const uci::type::OrbitalSurveillanceSensorCapabilityEnum& getCapabilityType() const = 0;

  /** Returns a reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A reference to the value of the enumeration identified by CapabilityType.
    */
  virtual uci::type::OrbitalSurveillanceSensorCapabilityEnum& getCapabilityType() = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskBaseType& setCapabilityType(const uci::type::OrbitalSurveillanceSensorCapabilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskBaseType& setCapabilityType(uci::type::OrbitalSurveillanceSensorCapabilityEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by CollectionRequirements.
    *
    * @return A const reference to the bounded list identified by CollectionRequirements.
    */
  virtual const uci::type::OrbitalSurveillanceSensorTaskBaseType::CollectionRequirements& getCollectionRequirements() const = 0;

  /** Returns a reference to the bounded list identified by CollectionRequirements.
    *
    * @return A reference to the bounded list identified by CollectionRequirements.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskBaseType::CollectionRequirements& getCollectionRequirements() = 0;

  /** Sets the bounded list identified by CollectionRequirements.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskBaseType& setCollectionRequirements(const uci::type::OrbitalSurveillanceSensorTaskBaseType::CollectionRequirements& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ConfirmObjectAcquisition.
    *
    * @return The value of the simple primitive data type identified by ConfirmObjectAcquisition.
    */
  virtual xs::Boolean getConfirmObjectAcquisition() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ConfirmObjectAcquisition.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskBaseType& setConfirmObjectAcquisition(xs::Boolean value) = 0;

  /** Returns a const reference to the bounded list identified by InformationObjective.
    *
    * @return A const reference to the bounded list identified by InformationObjective.
    */
  virtual const uci::type::OrbitalSurveillanceSensorTaskBaseType::InformationObjective& getInformationObjective() const = 0;

  /** Returns a reference to the bounded list identified by InformationObjective.
    *
    * @return A reference to the bounded list identified by InformationObjective.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskBaseType::InformationObjective& getInformationObjective() = 0;

  /** Sets the bounded list identified by InformationObjective.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskBaseType& setInformationObjective(const uci::type::OrbitalSurveillanceSensorTaskBaseType::InformationObjective& value) = 0;

  /** Returns a const reference to the bounded list identified by ReportingRequirements.
    *
    * @return A const reference to the bounded list identified by ReportingRequirements.
    */
  virtual const uci::type::OrbitalSurveillanceSensorTaskBaseType::ReportingRequirements& getReportingRequirements() const = 0;

  /** Returns a reference to the bounded list identified by ReportingRequirements.
    *
    * @return A reference to the bounded list identified by ReportingRequirements.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskBaseType::ReportingRequirements& getReportingRequirements() = 0;

  /** Sets the bounded list identified by ReportingRequirements.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskBaseType& setReportingRequirements(const uci::type::OrbitalSurveillanceSensorTaskBaseType::ReportingRequirements& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by SetUpStartTime.
    *
    * @return The value of the simple primitive data type identified by SetUpStartTime.
    */
  virtual uci::type::DurationTypeValue getSetUpStartTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SetUpStartTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskBaseType& setSetUpStartTime(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by SetUpStartTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SetUpStartTime is enabled or not.
    */
  virtual bool hasSetUpStartTime() const = 0;

  /** Clears (disabled) the Element identified by SetUpStartTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskBaseType& clearSetUpStartTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PostCollectionWrapUp.
    *
    * @return The value of the simple primitive data type identified by PostCollectionWrapUp.
    */
  virtual uci::type::DurationTypeValue getPostCollectionWrapUp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PostCollectionWrapUp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskBaseType& setPostCollectionWrapUp(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by PostCollectionWrapUp exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PostCollectionWrapUp is enabled or not.
    */
  virtual bool hasPostCollectionWrapUp() const = 0;

  /** Clears (disabled) the Element identified by PostCollectionWrapUp.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskBaseType& clearPostCollectionWrapUp() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SensitivityConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SensitivityConstraints.
    */
  virtual const uci::type::OrbitalSurveillanceSensorSensitivityConstraintType& getSensitivityConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SensitivityConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SensitivityConstraints.
    */
  virtual uci::type::OrbitalSurveillanceSensorSensitivityConstraintType& getSensitivityConstraints() = 0;

  /** Sets the complex content identified by SensitivityConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SensitivityConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskBaseType& setSensitivityConstraints(const uci::type::OrbitalSurveillanceSensorSensitivityConstraintType& value) = 0;

  /** Returns whether the Element identified by SensitivityConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SensitivityConstraints is enabled or not.
    */
  virtual bool hasSensitivityConstraints() const = 0;

  /** Enables the Element identified by SensitivityConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SensitivityConstraints.
    */
  virtual uci::type::OrbitalSurveillanceSensorSensitivityConstraintType& enableSensitivityConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SensitivityConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalSurveillanceSensorTaskBaseType& clearSensitivityConstraints() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OrbitalSurveillanceSensorTaskBaseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OrbitalSurveillanceSensorTaskBaseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OrbitalSurveillanceSensorTaskBaseType to copy from.
    */
  OrbitalSurveillanceSensorTaskBaseType(const OrbitalSurveillanceSensorTaskBaseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OrbitalSurveillanceSensorTaskBaseType to the contents of the
    * OrbitalSurveillanceSensorTaskBaseType on the right hand side (rhs) of the assignment operator [only available to
    * derived classes].
    *
    * @param rhs The OrbitalSurveillanceSensorTaskBaseType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this OrbitalSurveillanceSensorTaskBaseType.
    * @return A reference to this OrbitalSurveillanceSensorTaskBaseType.
    */
  OrbitalSurveillanceSensorTaskBaseType& operator=(const OrbitalSurveillanceSensorTaskBaseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ORBITALSURVEILLANCESENSORTASKBASETYPE_H

