/** @file DMPI_StatusMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_DMPI_STATUSMDT_H
#define UCI_TYPE_DMPI_STATUSMDT_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ActivityPlanReferenceType.h"
#include "uci/type/DMPI_ID_Type.h"
#include "uci/type/DMPI_StateEnum.h"
#include "uci/type/DMPI_StoreStatusType.h"
#include "uci/type/RoutePlanReferencesType.h"
#include "uci/type/StrikeStateEnum.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/TaskID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class DMPI_StatusMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new DMPI_StatusMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DMPI_StatusMDT.
    */
  static UCI_EXPORT DMPI_StatusMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new DMPI_StatusMDT initializing the data accessed by the new DMPI_StatusMDT using the data
    * accessed by the specified DMPI_StatusMDT (cloning).
    *
    * @param accessor The DMPI_StatusMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created DMPI_StatusMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DMPI_StatusMDT.
    */
  static UCI_EXPORT DMPI_StatusMDT& create(const DMPI_StatusMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified DMPI_StatusMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The DMPI_StatusMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(DMPI_StatusMDT& accessor);

  /** Returns this accessor's type constant, i.e. dMPI_StatusMDT.
    *
    * @return This accessor's type constant, i.e. dMPI_StatusMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::dMPI_StatusMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of DMPI_StatusMDT.
    *
    * @return The version that was initialized from the uci:version attribute of DMPI_StatusMDT.
    */
  static std::string getUCITypeVersion() {
    return "002.001.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const DMPI_StatusMDT& accessor) = 0;

  /** Indicates the DMPI status in terms of its associated store or stores. The number of instances of this element varies
    * depending on the store quantity of the associated DMPI, how the associated Strike Task or Tasks are allocated, etc.
    * See the annotations for the DMPI_Status message for further insight. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::DMPI_StoreStatusType, uci::type::accessorType::dMPI_StoreStatusType> StoreStatus;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DMPI_ID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DMPI_ID.
    */
  virtual const uci::type::DMPI_ID_Type& getDMPI_ID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DMPI_ID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DMPI_ID.
    */
  virtual uci::type::DMPI_ID_Type& getDMPI_ID() = 0;

  /** Sets the complex content identified by DMPI_ID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DMPI_ID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_StatusMDT& setDMPI_ID(const uci::type::DMPI_ID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by DMPI_State.
    *
    * @return A const reference to the value of the enumeration identified by DMPI_State.
    */
  virtual const uci::type::DMPI_StateEnum& getDMPI_State() const = 0;

  /** Returns a reference to the value of the enumeration identified by DMPI_State.
    *
    * @return A reference to the value of the enumeration identified by DMPI_State.
    */
  virtual uci::type::DMPI_StateEnum& getDMPI_State() = 0;

  /** Sets the value of the enumeration identified by DMPI_State.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_StatusMDT& setDMPI_State(const uci::type::DMPI_StateEnum& value) = 0;

  /** Sets the value of the enumeration identified by DMPI_State.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_StatusMDT& setDMPI_State(uci::type::DMPI_StateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by DMPI_StrikeState.
    *
    * @return A const reference to the value of the enumeration identified by DMPI_StrikeState.
    */
  virtual const uci::type::StrikeStateEnum& getDMPI_StrikeState() const = 0;

  /** Returns a reference to the value of the enumeration identified by DMPI_StrikeState.
    *
    * @return A reference to the value of the enumeration identified by DMPI_StrikeState.
    */
  virtual uci::type::StrikeStateEnum& getDMPI_StrikeState() = 0;

  /** Sets the value of the enumeration identified by DMPI_StrikeState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_StatusMDT& setDMPI_StrikeState(const uci::type::StrikeStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by DMPI_StrikeState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_StatusMDT& setDMPI_StrikeState(uci::type::StrikeStateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual const uci::type::SystemID_Type& getSystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual uci::type::SystemID_Type& getSystemID() = 0;

  /** Sets the complex content identified by SystemID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_StatusMDT& setSystemID(const uci::type::SystemID_Type& value) = 0;

  /** Returns whether the Element identified by SystemID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SystemID is enabled or not.
    */
  virtual bool hasSystemID() const = 0;

  /** Enables the Element identified by SystemID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual uci::type::SystemID_Type& enableSystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SystemID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_StatusMDT& clearSystemID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AssociatedRoutePlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AssociatedRoutePlan.
    */
  virtual const uci::type::RoutePlanReferencesType& getAssociatedRoutePlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AssociatedRoutePlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AssociatedRoutePlan.
    */
  virtual uci::type::RoutePlanReferencesType& getAssociatedRoutePlan() = 0;

  /** Sets the complex content identified by AssociatedRoutePlan to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AssociatedRoutePlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_StatusMDT& setAssociatedRoutePlan(const uci::type::RoutePlanReferencesType& value) = 0;

  /** Returns whether the Element identified by AssociatedRoutePlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AssociatedRoutePlan is enabled or not.
    */
  virtual bool hasAssociatedRoutePlan() const = 0;

  /** Enables the Element identified by AssociatedRoutePlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AssociatedRoutePlan.
    */
  virtual uci::type::RoutePlanReferencesType& enableAssociatedRoutePlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AssociatedRoutePlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_StatusMDT& clearAssociatedRoutePlan() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AssociatedActivityPlan.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AssociatedActivityPlan.
    */
  virtual const uci::type::ActivityPlanReferenceType& getAssociatedActivityPlan() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AssociatedActivityPlan.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AssociatedActivityPlan.
    */
  virtual uci::type::ActivityPlanReferenceType& getAssociatedActivityPlan() = 0;

  /** Sets the complex content identified by AssociatedActivityPlan to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AssociatedActivityPlan.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_StatusMDT& setAssociatedActivityPlan(const uci::type::ActivityPlanReferenceType& value) = 0;

  /** Returns whether the Element identified by AssociatedActivityPlan exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AssociatedActivityPlan is enabled or not.
    */
  virtual bool hasAssociatedActivityPlan() const = 0;

  /** Enables the Element identified by AssociatedActivityPlan.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AssociatedActivityPlan.
    */
  virtual uci::type::ActivityPlanReferenceType& enableAssociatedActivityPlan(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AssociatedActivityPlan.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_StatusMDT& clearAssociatedActivityPlan() = 0;

  /** Returns a const reference to the bounded list identified by StoreStatus.
    *
    * @return A const reference to the bounded list identified by StoreStatus.
    */
  virtual const uci::type::DMPI_StatusMDT::StoreStatus& getStoreStatus() const = 0;

  /** Returns a reference to the bounded list identified by StoreStatus.
    *
    * @return A reference to the bounded list identified by StoreStatus.
    */
  virtual uci::type::DMPI_StatusMDT::StoreStatus& getStoreStatus() = 0;

  /** Sets the bounded list identified by StoreStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_StatusMDT& setStoreStatus(const uci::type::DMPI_StatusMDT::StoreStatus& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TaskID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual const uci::type::TaskID_Type& getTaskID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TaskID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual uci::type::TaskID_Type& getTaskID() = 0;

  /** Sets the complex content identified by TaskID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TaskID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_StatusMDT& setTaskID(const uci::type::TaskID_Type& value) = 0;

  /** Returns whether the Element identified by TaskID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TaskID is enabled or not.
    */
  virtual bool hasTaskID() const = 0;

  /** Enables the Element identified by TaskID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual uci::type::TaskID_Type& enableTaskID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TaskID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DMPI_StatusMDT& clearTaskID() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  DMPI_StatusMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~DMPI_StatusMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The DMPI_StatusMDT to copy from.
    */
  DMPI_StatusMDT(const DMPI_StatusMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this DMPI_StatusMDT to the contents of the DMPI_StatusMDT on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The DMPI_StatusMDT on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this DMPI_StatusMDT.
    * @return A reference to this DMPI_StatusMDT.
    */
  DMPI_StatusMDT& operator=(const DMPI_StatusMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_DMPI_STATUSMDT_H

