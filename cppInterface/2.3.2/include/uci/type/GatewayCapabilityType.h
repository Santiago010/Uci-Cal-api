/** @file GatewayCapabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_GATEWAYCAPABILITYTYPE_H
#define UCI_TYPE_GATEWAYCAPABILITYTYPE_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CommDataFormatEnum.h"
#include "uci/type/CommProfileID_Type.h"
#include "uci/type/CommandableCapabilityDeclarationType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/GatewayCapabilityOptionsType.h"
#include "uci/type/ProductTypeEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Utilized to describe a Gateway Capability which is synonymous with a Message Processor and-or a product disseminator. */
class GatewayCapabilityType : public virtual CommandableCapabilityDeclarationType {
public:

  /** This method constructs a new GatewayCapabilityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed GatewayCapabilityType.
    */
  static UCI_EXPORT GatewayCapabilityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new GatewayCapabilityType initializing the data accessed by the new GatewayCapabilityType
    * using the data accessed by the specified GatewayCapabilityType (cloning).
    *
    * @param accessor The GatewayCapabilityType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created GatewayCapabilityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed GatewayCapabilityType.
    */
  static UCI_EXPORT GatewayCapabilityType& create(const GatewayCapabilityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified GatewayCapabilityType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The GatewayCapabilityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(GatewayCapabilityType& accessor);

  /** Returns this accessor's type constant, i.e. gatewayCapabilityType.
    *
    * @return This accessor's type constant, i.e. gatewayCapabilityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::gatewayCapabilityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of GatewayCapabilityType.
    *
    * @return The version that was initialized from the uci:version attribute of GatewayCapabilityType.
    */
  static std::string getUCITypeVersion() {
    return "000.001.002.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const GatewayCapabilityType& accessor) = 0;

  /** Indicates a Profile (preset) that is applicable to this Capability. Only the profiles currently available and
    * applicable to this Capability should be listed. A Profile (or preset) is a logical collection of data, whose
    * implementation is not specified, that is used to tailor, configure or otherwise affect the behavior of a Capability.
    * Profiles can vary from mission to mission or even by phases of a single mission. They are generally developed in
    * pre-mission planning and are unique for each Subsystem model. Their content is not standardized by UCI, but the
    * mechanism for advertising their availability and activating them is. Their content is abstracted by the UCI concept
    * of Capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CommProfileID_Type, uci::type::accessorType::commProfileID_Type> AvailableProfileID;

  /** If specified in the capability that the type is Product then, SupportedProduct should be filled. The product type
    * that the ProductProcessingPlan applies to. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 81]
    */
  typedef uci::base::BoundedList<uci::type::ProductTypeEnum, uci::type::accessorType::productTypeEnum> SupportedProduct;

  /** Returns a const reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A const reference to the value of the enumeration identified by CapabilityType.
    */
  virtual const uci::type::CommDataFormatEnum& getCapabilityType() const = 0;

  /** Returns a reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A reference to the value of the enumeration identified by CapabilityType.
    */
  virtual uci::type::CommDataFormatEnum& getCapabilityType() = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::GatewayCapabilityType& setCapabilityType(const uci::type::CommDataFormatEnum& value) = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::GatewayCapabilityType& setCapabilityType(uci::type::CommDataFormatEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SubCapabilityType.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SubCapabilityType.
    */
  virtual const uci::type::ForeignKeyType& getSubCapabilityType() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SubCapabilityType.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SubCapabilityType.
    */
  virtual uci::type::ForeignKeyType& getSubCapabilityType() = 0;

  /** Sets the complex content identified by SubCapabilityType to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SubCapabilityType.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::GatewayCapabilityType& setSubCapabilityType(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by SubCapabilityType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SubCapabilityType is enabled or not.
    */
  virtual bool hasSubCapabilityType() const = 0;

  /** Enables the Element identified by SubCapabilityType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SubCapabilityType.
    */
  virtual uci::type::ForeignKeyType& enableSubCapabilityType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SubCapabilityType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::GatewayCapabilityType& clearSubCapabilityType() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CapabilityOptions.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CapabilityOptions.
    */
  virtual const uci::type::GatewayCapabilityOptionsType& getCapabilityOptions() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CapabilityOptions.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityOptions.
    */
  virtual uci::type::GatewayCapabilityOptionsType& getCapabilityOptions() = 0;

  /** Sets the complex content identified by CapabilityOptions to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CapabilityOptions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::GatewayCapabilityType& setCapabilityOptions(const uci::type::GatewayCapabilityOptionsType& value) = 0;

  /** Returns a const reference to the bounded list identified by AvailableProfileID.
    *
    * @return A const reference to the bounded list identified by AvailableProfileID.
    */
  virtual const uci::type::GatewayCapabilityType::AvailableProfileID& getAvailableProfileID() const = 0;

  /** Returns a reference to the bounded list identified by AvailableProfileID.
    *
    * @return A reference to the bounded list identified by AvailableProfileID.
    */
  virtual uci::type::GatewayCapabilityType::AvailableProfileID& getAvailableProfileID() = 0;

  /** Sets the bounded list identified by AvailableProfileID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::GatewayCapabilityType& setAvailableProfileID(const uci::type::GatewayCapabilityType::AvailableProfileID& value) = 0;

  /** Returns a const reference to the bounded list identified by SupportedProduct.
    *
    * @return A const reference to the bounded list identified by SupportedProduct.
    */
  virtual const uci::type::GatewayCapabilityType::SupportedProduct& getSupportedProduct() const = 0;

  /** Returns a reference to the bounded list identified by SupportedProduct.
    *
    * @return A reference to the bounded list identified by SupportedProduct.
    */
  virtual uci::type::GatewayCapabilityType::SupportedProduct& getSupportedProduct() = 0;

  /** Sets the bounded list identified by SupportedProduct.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::GatewayCapabilityType& setSupportedProduct(const uci::type::GatewayCapabilityType::SupportedProduct& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  GatewayCapabilityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~GatewayCapabilityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The GatewayCapabilityType to copy from.
    */
  GatewayCapabilityType(const GatewayCapabilityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this GatewayCapabilityType to the contents of the GatewayCapabilityType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The GatewayCapabilityType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this GatewayCapabilityType.
    * @return A reference to this GatewayCapabilityType.
    */
  GatewayCapabilityType& operator=(const GatewayCapabilityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_GATEWAYCAPABILITYTYPE_H

