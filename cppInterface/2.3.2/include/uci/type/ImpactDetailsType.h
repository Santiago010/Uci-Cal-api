/** @file ImpactDetailsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_IMPACTDETAILSTYPE_H
#define UCI_TYPE_IMPACTDETAILSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/export.h"
#include "uci/type/ApproachAngleType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/ImpactPointType.h"
#include "uci/type/SpeedType.h"
#include "uci/type/WeaponEffectIndicatorsType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the impact details of the munition or weapon. */
class ImpactDetailsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ImpactDetailsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ImpactDetailsType.
    */
  static UCI_EXPORT ImpactDetailsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ImpactDetailsType initializing the data accessed by the new ImpactDetailsType using the
    * data accessed by the specified ImpactDetailsType (cloning).
    *
    * @param accessor The ImpactDetailsType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created ImpactDetailsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ImpactDetailsType.
    */
  static UCI_EXPORT ImpactDetailsType& create(const ImpactDetailsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ImpactDetailsType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The ImpactDetailsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ImpactDetailsType& accessor);

  /** Returns this accessor's type constant, i.e. impactDetailsType.
    *
    * @return This accessor's type constant, i.e. impactDetailsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::impactDetailsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ImpactDetailsType.
    *
    * @return The version that was initialized from the uci:version attribute of ImpactDetailsType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ImpactDetailsType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ApproachAngle.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ApproachAngle.
    */
  virtual const uci::type::ApproachAngleType& getApproachAngle() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ApproachAngle.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ApproachAngle.
    */
  virtual uci::type::ApproachAngleType& getApproachAngle() = 0;

  /** Sets the complex content identified by ApproachAngle to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ApproachAngle.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImpactDetailsType& setApproachAngle(const uci::type::ApproachAngleType& value) = 0;

  /** Returns whether the Element identified by ApproachAngle exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ApproachAngle is enabled or not.
    */
  virtual bool hasApproachAngle() const = 0;

  /** Enables the Element identified by ApproachAngle.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ApproachAngle.
    */
  virtual uci::type::ApproachAngleType& enableApproachAngle(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ApproachAngle.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImpactDetailsType& clearApproachAngle() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ImpactPoint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ImpactPoint.
    */
  virtual const uci::type::ImpactPointType& getImpactPoint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ImpactPoint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ImpactPoint.
    */
  virtual uci::type::ImpactPointType& getImpactPoint() = 0;

  /** Sets the complex content identified by ImpactPoint to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ImpactPoint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImpactDetailsType& setImpactPoint(const uci::type::ImpactPointType& value) = 0;

  /** Returns whether the Element identified by ImpactPoint exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImpactPoint is enabled or not.
    */
  virtual bool hasImpactPoint() const = 0;

  /** Enables the Element identified by ImpactPoint.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ImpactPoint.
    */
  virtual uci::type::ImpactPointType& enableImpactPoint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImpactPoint.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImpactDetailsType& clearImpactPoint() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ImpactSpeed.
    *
    * @return The value of the simple primitive data type identified by ImpactSpeed.
    */
  virtual uci::type::SpeedTypeValue getImpactSpeed() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ImpactSpeed.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImpactDetailsType& setImpactSpeed(uci::type::SpeedTypeValue value) = 0;

  /** Returns whether the Element identified by ImpactSpeed exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImpactSpeed is enabled or not.
    */
  virtual bool hasImpactSpeed() const = 0;

  /** Clears (disabled) the Element identified by ImpactSpeed.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImpactDetailsType& clearImpactSpeed() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ImpactPointDistanceFromDMPI.
    *
    * @return The value of the simple primitive data type identified by ImpactPointDistanceFromDMPI.
    */
  virtual uci::type::DistanceTypeValue getImpactPointDistanceFromDMPI() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ImpactPointDistanceFromDMPI.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImpactDetailsType& setImpactPointDistanceFromDMPI(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by ImpactPointDistanceFromDMPI exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImpactPointDistanceFromDMPI is enabled or not.
    */
  virtual bool hasImpactPointDistanceFromDMPI() const = 0;

  /** Clears (disabled) the Element identified by ImpactPointDistanceFromDMPI.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImpactDetailsType& clearImpactPointDistanceFromDMPI() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AccelerometerRecordedImpact.
    *
    * @return The value of the simple primitive data type identified by AccelerometerRecordedImpact.
    */
  virtual xs::Boolean getAccelerometerRecordedImpact() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AccelerometerRecordedImpact.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImpactDetailsType& setAccelerometerRecordedImpact(xs::Boolean value) = 0;

  /** Returns whether the Element identified by AccelerometerRecordedImpact exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AccelerometerRecordedImpact is enabled or not.
    */
  virtual bool hasAccelerometerRecordedImpact() const = 0;

  /** Clears (disabled) the Element identified by AccelerometerRecordedImpact.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImpactDetailsType& clearAccelerometerRecordedImpact() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EffectIndicators.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EffectIndicators.
    */
  virtual const uci::type::WeaponEffectIndicatorsType& getEffectIndicators() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EffectIndicators.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EffectIndicators.
    */
  virtual uci::type::WeaponEffectIndicatorsType& getEffectIndicators() = 0;

  /** Sets the complex content identified by EffectIndicators to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EffectIndicators.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImpactDetailsType& setEffectIndicators(const uci::type::WeaponEffectIndicatorsType& value) = 0;

  /** Returns whether the Element identified by EffectIndicators exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EffectIndicators is enabled or not.
    */
  virtual bool hasEffectIndicators() const = 0;

  /** Enables the Element identified by EffectIndicators.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EffectIndicators.
    */
  virtual uci::type::WeaponEffectIndicatorsType& enableEffectIndicators(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EffectIndicators.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImpactDetailsType& clearEffectIndicators() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ImpactDetailsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ImpactDetailsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ImpactDetailsType to copy from.
    */
  ImpactDetailsType(const ImpactDetailsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ImpactDetailsType to the contents of the ImpactDetailsType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ImpactDetailsType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this ImpactDetailsType.
    * @return A reference to this ImpactDetailsType.
    */
  ImpactDetailsType& operator=(const ImpactDetailsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_IMPACTDETAILSTYPE_H

