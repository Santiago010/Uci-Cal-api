/** @file RF_ResourceAllocationRequestMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_RF_RESOURCEALLOCATIONREQUESTMDT_H
#define UCI_TYPE_RF_RESOURCEALLOCATIONREQUESTMDT_H

#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AperturePointingOptionsType.h"
#include "ComparableRankingType.h"
#include "RF_ResourceAllocationRequestRemovalType.h"
#include "RequestBaseType.h"
#include "RequestingFunctionID_ChoiceType.h"
#include "ResourceRequestOptionType.h"
#include "SupportCapabilityID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class RF_ResourceAllocationRequestMDT : public virtual RequestBaseType {
public:

  /** This method constructs a new RF_ResourceAllocationRequestMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RF_ResourceAllocationRequestMDT.
    */
  static UCI_EXPORT RF_ResourceAllocationRequestMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RF_ResourceAllocationRequestMDT initializing the data accessed by the new
    * RF_ResourceAllocationRequestMDT using the data accessed by the specified RF_ResourceAllocationRequestMDT (cloning).
    *
    * @param accessor The RF_ResourceAllocationRequestMDT that provides access to the data that is to be used to initialize
    *      the data accessed by the new created RF_ResourceAllocationRequestMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RF_ResourceAllocationRequestMDT.
    */
  static UCI_EXPORT RF_ResourceAllocationRequestMDT& create(const RF_ResourceAllocationRequestMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RF_ResourceAllocationRequestMDT. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The RF_ResourceAllocationRequestMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RF_ResourceAllocationRequestMDT& accessor);

  /** Returns this accessor's type constant, i.e. rF_ResourceAllocationRequestMDT.
    *
    * @return This accessor's type constant, i.e. rF_ResourceAllocationRequestMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::rF_ResourceAllocationRequestMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of RF_ResourceAllocationRequestMDT.
    *
    * @return The version that was initialized from the uci:version attribute of RF_ResourceAllocationRequestMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.002.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RF_ResourceAllocationRequestMDT& accessor) = 0;

  /** Included when the sibling RequestState is CANCEL and the requesting function is not in a terminal state (i.e.
    * function still requires other resources). [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RF_ResourceAllocationRequestRemovalType, uci::type::accessorType::rF_ResourceAllocationRequestRemovalType> TerminatedResources;

  /** The list of different coverage parameters based on bandwidth/service type. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::AperturePointingOptionsType, uci::type::accessorType::aperturePointingOptionsType> PointingVectorParameters;

  /** Each entry in this array represents an option that can be used to fill the resource request. Only one option will be
    * allocated. They are assumed to be in order of preference. Optional only in the case of REMOVE. If omitted for REMOVE,
    * all allocations to the Activity will be deallocated. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ResourceRequestOptionType, uci::type::accessorType::resourceRequestOptionType> ResourceRequestOptions;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ResourceAllocator_SupportCapabilityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ResourceAllocator_SupportCapabilityID.
    */
  virtual const uci::type::SupportCapabilityID_Type& getResourceAllocator_SupportCapabilityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ResourceAllocator_SupportCapabilityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ResourceAllocator_SupportCapabilityID.
    */
  virtual uci::type::SupportCapabilityID_Type& getResourceAllocator_SupportCapabilityID() = 0;

  /** Sets the complex content identified by ResourceAllocator_SupportCapabilityID to the contents of the complex content
    * accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ResourceAllocator_SupportCapabilityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_ResourceAllocationRequestMDT& setResourceAllocator_SupportCapabilityID(const uci::type::SupportCapabilityID_Type& value) = 0;

  /** Returns whether the Element identified by ResourceAllocator_SupportCapabilityID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ResourceAllocator_SupportCapabilityID is enabled or
    *      not.
    */
  virtual bool hasResourceAllocator_SupportCapabilityID() const = 0;

  /** Enables the Element identified by ResourceAllocator_SupportCapabilityID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ResourceAllocator_SupportCapabilityID.
    */
  virtual uci::type::SupportCapabilityID_Type& enableResourceAllocator_SupportCapabilityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ResourceAllocator_SupportCapabilityID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_ResourceAllocationRequestMDT& clearResourceAllocator_SupportCapabilityID() = 0;

  /** Returns a const reference to the bounded list identified by TerminatedResources.
    *
    * @return A const reference to the bounded list identified by TerminatedResources.
    */
  virtual const uci::type::RF_ResourceAllocationRequestMDT::TerminatedResources& getTerminatedResources() const = 0;

  /** Returns a reference to the bounded list identified by TerminatedResources.
    *
    * @return A reference to the bounded list identified by TerminatedResources.
    */
  virtual uci::type::RF_ResourceAllocationRequestMDT::TerminatedResources& getTerminatedResources() = 0;

  /** Sets the bounded list identified by TerminatedResources.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_ResourceAllocationRequestMDT& setTerminatedResources(const uci::type::RF_ResourceAllocationRequestMDT::TerminatedResources& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RequestingFunction.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RequestingFunction.
    */
  virtual const uci::type::RequestingFunctionID_ChoiceType& getRequestingFunction() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RequestingFunction.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RequestingFunction.
    */
  virtual uci::type::RequestingFunctionID_ChoiceType& getRequestingFunction() = 0;

  /** Sets the complex content identified by RequestingFunction to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RequestingFunction.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_ResourceAllocationRequestMDT& setRequestingFunction(const uci::type::RequestingFunctionID_ChoiceType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Ranking.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Ranking.
    */
  virtual const uci::type::ComparableRankingType& getRanking() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Ranking.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Ranking.
    */
  virtual uci::type::ComparableRankingType& getRanking() = 0;

  /** Sets the complex content identified by Ranking to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Ranking.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_ResourceAllocationRequestMDT& setRanking(const uci::type::ComparableRankingType& value) = 0;

  /** Returns a const reference to the bounded list identified by PointingVectorParameters.
    *
    * @return A const reference to the bounded list identified by PointingVectorParameters.
    */
  virtual const uci::type::RF_ResourceAllocationRequestMDT::PointingVectorParameters& getPointingVectorParameters() const = 0;

  /** Returns a reference to the bounded list identified by PointingVectorParameters.
    *
    * @return A reference to the bounded list identified by PointingVectorParameters.
    */
  virtual uci::type::RF_ResourceAllocationRequestMDT::PointingVectorParameters& getPointingVectorParameters() = 0;

  /** Sets the bounded list identified by PointingVectorParameters.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_ResourceAllocationRequestMDT& setPointingVectorParameters(const uci::type::RF_ResourceAllocationRequestMDT::PointingVectorParameters& value) = 0;

  /** Returns a const reference to the bounded list identified by ResourceRequestOptions.
    *
    * @return A const reference to the bounded list identified by ResourceRequestOptions.
    */
  virtual const uci::type::RF_ResourceAllocationRequestMDT::ResourceRequestOptions& getResourceRequestOptions() const = 0;

  /** Returns a reference to the bounded list identified by ResourceRequestOptions.
    *
    * @return A reference to the bounded list identified by ResourceRequestOptions.
    */
  virtual uci::type::RF_ResourceAllocationRequestMDT::ResourceRequestOptions& getResourceRequestOptions() = 0;

  /** Sets the bounded list identified by ResourceRequestOptions.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RF_ResourceAllocationRequestMDT& setResourceRequestOptions(const uci::type::RF_ResourceAllocationRequestMDT::ResourceRequestOptions& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RF_ResourceAllocationRequestMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~RF_ResourceAllocationRequestMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RF_ResourceAllocationRequestMDT to copy from.
    */
  RF_ResourceAllocationRequestMDT(const RF_ResourceAllocationRequestMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RF_ResourceAllocationRequestMDT to the contents of the
    * RF_ResourceAllocationRequestMDT on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The RF_ResourceAllocationRequestMDT on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this RF_ResourceAllocationRequestMDT.
    * @return A reference to this RF_ResourceAllocationRequestMDT.
    */
  RF_ResourceAllocationRequestMDT& operator=(const RF_ResourceAllocationRequestMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_RF_RESOURCEALLOCATIONREQUESTMDT_H

