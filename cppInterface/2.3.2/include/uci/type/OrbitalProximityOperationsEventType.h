/** @file OrbitalProximityOperationsEventType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ORBITALPROXIMITYOPERATIONSEVENTTYPE_H
#define UCI_TYPE_ORBITALPROXIMITYOPERATIONSEVENTTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/DurationAccessor.h"
#include "uci/base/export.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/RTN_PositionType.h"
#include "uci/type/RTN_VelocityType.h"
#include "uci/type/SpeedType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type specifies details for a Proximity Operations Operational Proximity Analysis Event. For canceled events,
  * only the AnalysisEpoch is provided.
  */
class OrbitalProximityOperationsEventType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OrbitalProximityOperationsEventType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitalProximityOperationsEventType.
    */
  static UCI_EXPORT OrbitalProximityOperationsEventType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OrbitalProximityOperationsEventType initializing the data accessed by the new
    * OrbitalProximityOperationsEventType using the data accessed by the specified OrbitalProximityOperationsEventType
    * (cloning).
    *
    * @param accessor The OrbitalProximityOperationsEventType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created OrbitalProximityOperationsEventType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitalProximityOperationsEventType.
    */
  static UCI_EXPORT OrbitalProximityOperationsEventType& create(const OrbitalProximityOperationsEventType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OrbitalProximityOperationsEventType. Use of the specified accessor after it has
    * been destroyed will result in undefined behavior.
    *
    * @param accessor The OrbitalProximityOperationsEventType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OrbitalProximityOperationsEventType& accessor);

  /** Returns this accessor's type constant, i.e. orbitalProximityOperationsEventType.
    *
    * @return This accessor's type constant, i.e. orbitalProximityOperationsEventType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::orbitalProximityOperationsEventType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OrbitalProximityOperationsEventType.
    *
    * @return The version that was initialized from the uci:version attribute of OrbitalProximityOperationsEventType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OrbitalProximityOperationsEventType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ActorStateEpoch.
    *
    * @return The value of the simple primitive data type identified by ActorStateEpoch.
    */
  virtual uci::type::DateTimeTypeValue getActorStateEpoch() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ActorStateEpoch.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& setActorStateEpoch(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by ActorStateEpoch exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActorStateEpoch is enabled or not.
    */
  virtual bool hasActorStateEpoch() const = 0;

  /** Clears (disabled) the Element identified by ActorStateEpoch.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& clearActorStateEpoch() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TargetStateEpoch.
    *
    * @return The value of the simple primitive data type identified by TargetStateEpoch.
    */
  virtual uci::type::DateTimeTypeValue getTargetStateEpoch() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TargetStateEpoch.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& setTargetStateEpoch(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by TargetStateEpoch exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TargetStateEpoch is enabled or not.
    */
  virtual bool hasTargetStateEpoch() const = 0;

  /** Clears (disabled) the Element identified by TargetStateEpoch.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& clearTargetStateEpoch() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AnalysisEpoch.
    *
    * @return The value of the simple primitive data type identified by AnalysisEpoch.
    */
  virtual uci::type::DateTimeTypeValue getAnalysisEpoch() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AnalysisEpoch.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& setAnalysisEpoch(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by AnalysisEpoch exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AnalysisEpoch is enabled or not.
    */
  virtual bool hasAnalysisEpoch() const = 0;

  /** Clears (disabled) the Element identified by AnalysisEpoch.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& clearAnalysisEpoch() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AnalysisDuration.
    *
    * @return The value of the simple primitive data type identified by AnalysisDuration.
    */
  virtual xs::Duration getAnalysisDuration() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AnalysisDuration.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& setAnalysisDuration(xs::Duration value) = 0;

  /** Returns whether the Element identified by AnalysisDuration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AnalysisDuration is enabled or not.
    */
  virtual bool hasAnalysisDuration() const = 0;

  /** Clears (disabled) the Element identified by AnalysisDuration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& clearAnalysisDuration() = 0;

  /** Returns the value of the SimplePrimitive data type identified by DurationThreshold.
    *
    * @return The value of the simple primitive data type identified by DurationThreshold.
    */
  virtual xs::Duration getDurationThreshold() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DurationThreshold.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& setDurationThreshold(xs::Duration value) = 0;

  /** Returns whether the Element identified by DurationThreshold exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DurationThreshold is enabled or not.
    */
  virtual bool hasDurationThreshold() const = 0;

  /** Clears (disabled) the Element identified by DurationThreshold.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& clearDurationThreshold() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RangeThreshold.
    *
    * @return The value of the simple primitive data type identified by RangeThreshold.
    */
  virtual uci::type::DistanceTypeValue getRangeThreshold() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RangeThreshold.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& setRangeThreshold(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by RangeThreshold exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RangeThreshold is enabled or not.
    */
  virtual bool hasRangeThreshold() const = 0;

  /** Clears (disabled) the Element identified by RangeThreshold.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& clearRangeThreshold() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MinimumRangeEpoch.
    *
    * @return The value of the simple primitive data type identified by MinimumRangeEpoch.
    */
  virtual uci::type::DateTimeTypeValue getMinimumRangeEpoch() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MinimumRangeEpoch.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& setMinimumRangeEpoch(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by MinimumRangeEpoch exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MinimumRangeEpoch is enabled or not.
    */
  virtual bool hasMinimumRangeEpoch() const = 0;

  /** Clears (disabled) the Element identified by MinimumRangeEpoch.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& clearMinimumRangeEpoch() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MinimumRange.
    *
    * @return The value of the simple primitive data type identified by MinimumRange.
    */
  virtual uci::type::DistanceTypeValue getMinimumRange() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MinimumRange.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& setMinimumRange(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by MinimumRange exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MinimumRange is enabled or not.
    */
  virtual bool hasMinimumRange() const = 0;

  /** Clears (disabled) the Element identified by MinimumRange.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& clearMinimumRange() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RelativeSpeed.
    *
    * @return The value of the simple primitive data type identified by RelativeSpeed.
    */
  virtual uci::type::SpeedTypeValue getRelativeSpeed() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RelativeSpeed.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& setRelativeSpeed(uci::type::SpeedTypeValue value) = 0;

  /** Returns whether the Element identified by RelativeSpeed exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RelativeSpeed is enabled or not.
    */
  virtual bool hasRelativeSpeed() const = 0;

  /** Clears (disabled) the Element identified by RelativeSpeed.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& clearRelativeSpeed() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RelativePosition.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RelativePosition.
    */
  virtual const uci::type::RTN_PositionType& getRelativePosition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RelativePosition.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RelativePosition.
    */
  virtual uci::type::RTN_PositionType& getRelativePosition() = 0;

  /** Sets the complex content identified by RelativePosition to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RelativePosition.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& setRelativePosition(const uci::type::RTN_PositionType& value) = 0;

  /** Returns whether the Element identified by RelativePosition exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RelativePosition is enabled or not.
    */
  virtual bool hasRelativePosition() const = 0;

  /** Enables the Element identified by RelativePosition.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RelativePosition.
    */
  virtual uci::type::RTN_PositionType& enableRelativePosition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RelativePosition.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& clearRelativePosition() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RelativeVelocity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RelativeVelocity.
    */
  virtual const uci::type::RTN_VelocityType& getRelativeVelocity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RelativeVelocity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RelativeVelocity.
    */
  virtual uci::type::RTN_VelocityType& getRelativeVelocity() = 0;

  /** Sets the complex content identified by RelativeVelocity to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RelativeVelocity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& setRelativeVelocity(const uci::type::RTN_VelocityType& value) = 0;

  /** Returns whether the Element identified by RelativeVelocity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RelativeVelocity is enabled or not.
    */
  virtual bool hasRelativeVelocity() const = 0;

  /** Enables the Element identified by RelativeVelocity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RelativeVelocity.
    */
  virtual uci::type::RTN_VelocityType& enableRelativeVelocity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RelativeVelocity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalProximityOperationsEventType& clearRelativeVelocity() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OrbitalProximityOperationsEventType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OrbitalProximityOperationsEventType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OrbitalProximityOperationsEventType to copy from.
    */
  OrbitalProximityOperationsEventType(const OrbitalProximityOperationsEventType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OrbitalProximityOperationsEventType to the contents of the
    * OrbitalProximityOperationsEventType on the right hand side (rhs) of the assignment operator [only available to
    * derived classes].
    *
    * @param rhs The OrbitalProximityOperationsEventType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this OrbitalProximityOperationsEventType.
    * @return A reference to this OrbitalProximityOperationsEventType.
    */
  OrbitalProximityOperationsEventType& operator=(const OrbitalProximityOperationsEventType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ORBITALPROXIMITYOPERATIONSEVENTTYPE_H

