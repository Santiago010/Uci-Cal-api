/** @file CommCapabilityEnum.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMCAPABILITYENUM_H
#define UCI_TYPE_COMMCAPABILITYENUM_H

#include <map>
#include <sstream>

#include "uci/base/Accessor.h"
#include "uci/base/export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the first tier in the taxonomy of the Waveform Capability. See enumeration annotation for additional
  * details. The enumerates aren't necessarily orthogonal. Some enumerates indicate a band while others indicate specific
  * communications systems operating within an enumerated band.
  */
class CommCapabilityEnum : public virtual uci::base::Accessor {
public:

  /** The following are the enumerated items that comprise this enumeration */
  enum EnumerationItem {

    /** Enumerated item that indicates that the enumeration has not been set */
    enumNotSet,

    /** No annotation will be provided. */
    UCI_FALCON,

    /** Indicates communications with the Fifth Generation (5G) of mobile technologies; supports high band (also called
      * millimeter wave, or MMW), which operates between around 24 and 300 gigahertz (GHz); mid band, which operates between
      * 1 GHz and 6 GHz; and low band, which operates below 1 GHz.
      */
    UCI_5G,

    /** No annotation will be provided. */
    UCI_MBITR,

    /** Indicates the Advanced Extremely High Frequency (AEHF) system operated by the United States Space Force, used to
      * relay secure communications.
      */
    UCI_AEHF,

    /** No annotation will be provided. */
    UCI_JTRS,

    /** Indicates the Bowman tactical communications system that operates in the HF/VHF/UHF frequency ranges. */
    UCI_BOWMAN,

    /** Indicates communication in the 4-8 GHz frequency range i.e. used for satellite communications, for full-time
      * satellite TV networks or raw satellite feeds.
      */
    UCI_C_BAND,

    /** Indicates the Common Data Link (CDL), a secure U.S. military communications protocol that operates in the KU Band and
      * is the primary link/protocol for imagery and signals intelligence.
      */
    UCI_CDL,

    /** No annotation will be provided. */
    UCI_CMF,

    /** Indicates the Defense Satellite Communication System, a US Space Force satellite constellation. DSCS is being
      * replaced by the Wideband Global SATCOM system.
      */
    UCI_DSCS,

    /** Indicates extremely high-frequency (EHF) bands (30-300 GHz) for broadband transmission over satellite links. */
    UCI_EHF_SATCOM,

    /** Indicates the Enhanced Position Locating Reporting System (EPLRS) which provides secure, jam-resistant, near
      * real-time data communications support for the five Battlefield Functional Areas of the Army Tactical Command and
      * Control System (ATCCS).
      */
    UCI_EPLRS,

    /** Indicates the HAVE QUICK radio system which is a ECM resistant, frequency-hopping system used to protect
      * military aeronautical mobile (OR) radio traffic.
      */
    UCI_HAVE_QUICK,

    /** Indicates High Frequency (HF) communications in the 3 to 30 MHz frequency range. */
    UCI_HF,

    /** Indicates communication with the Highband Networking Waveform (HNW) radio. */
    UCI_HNW,

    /** Indicates communications with the Intra-Flight Data Link (IFDL) which is a data link used within an F-22 aircraft
      * formation to transmit tactical information. A multiple access protocol for intra-flight data link called CSMA-BT
      * (Carrier Sense Multiple Access based on Busy Tone).
      */
    UCI_IFDL,

    /** Indicates communication with the International Maritime Satellite (INMARSAT) system which provides marine vessels
      * with reliable communications, primarily for enhancement of shipping safety.
      */
    UCI_INMARSAT,

    /** Indicates communications with the Internet Protocol (IP) which is the set of rules governing the format of data sent
      * via the internet or local network i.e. IPv4 or IPv6.
      */
    UCI_IP,

    /** Indicates communication using the Iridium constellation of 66 crosslinked Low Earth Orbiting (LEO) satellites. */
    UCI_IRIDIUM,

    /** Indicates satellite communications links operating in the 26-40 GHz frequency range. */
    UCI_KA_SATCOM,

    /** Indicates satellite communications links operating in the 12-18 GHz frequency range. */
    UCI_KU_SATCOM,

    /** Indicates communications in the 1-2 Ghz frequency range. Global Positioning System (GPS) carriers and also satellite
      * mobile phones operate in this range.
      */
    UCI_L_BAND,

    /** Indicates communications with the Link 4 system. Link 4 a non-secure military data link for providing vector commands
      * to USAF and other NATO fighter aircraft. Link4A provides digital surface-to-air, air-to-surface, and air-to-air
      * tactical communications. Link 4C is a fighter-to-fighter data link.
      */
    UCI_LINK4,

    /** Indicates communications with the Link 11 system. Link 11 is a secure military tactical data link used by NATO to
      * exchange digital data among airborne, land-based, and shipboard tactical data systems. Link 11 is also know as
      * TADIL-A and is compliant with MIL-STD-6011. It will be replaced by Link 22.
      */
    UCI_LINK11,

    /** Indicates communications with the Link 16 system including via the Joint Range Extension Application Protocol
      * (JREAP). Link 16 is a secure military tactical data link network use by NATO and other allowed nations. Operates in
      * the frequency band 960–1,215 MHz. Link 16 is also known as TADIL-J and is compliant with MIL-STD 6016 and STANAG
      * 5516.
      */
    UCI_LINK16,

    /** Indicates communications with the Link 22 system. Link 22 Is a secure digital Tactical Data Link (TDL) that operates
      * in the HF and UHF frequency bands. It was developed by NATO to securely exchange data between all allied forces (air,
      * ground, and sea) and replace Link 11. Link 22 supports both LOS and BLOS (Beyond Line of sight) communication links
      * in the HF band.
      */
    UCI_LINK22,

    /** Indicates communication with the Multifunction Advanced Data Link (MADL); a fast switching narrow directional
      * communications data link between F-35 aircraft.
      */
    UCI_MADL,

    /** Indicates Medium Frequency (MF) communications in the 300 kilohertz (kHz) to 3 megahertz (MHz) frequency range. */
    UCI_MF,

    /** Indicates communication with the Military Strategic and Tactical Relay (MILSTAR); a constellation of military
      * communications satellites in geosynchronous orbit.
      */
    UCI_MILSTAR,

    /** Indicates communications with the Mobile User Objective System (MUOS) constellation of satellites. Provides global
      * narrowband connectivity to terminals, platforms, tactical operators and operations centers.
      */
    UCI_MUOS,

    /** Indicates communications in the 2-4 Ghz frequency range i.e. WiFi. */
    UCI_S_BAND,

    /** Indicates communications via satellite in the 2-4 Ghz frequency range i.e. NASA communication with ISS. */
    UCI_S_BAND_SATCOM,

    /** Indicates communications with the Situation Awareness Data Link (SADL). */
    UCI_SADL,

    /** Indicates communications with the Second Generation Anti-Jam Tactical Ultra-High Frequency Radio (SATURN). SATURN
      * operates in the 225-400 MHZ frequency range and will be compliant with STANAG-4372 and JIEO-9120A. It will replace
      * the HAVE QUICK II system.
      */
    UCI_SATURN,

    /** Indicates communications with Single Channel Ground and Airborne Radio System (SINCGARS). SINCGARS operates in the
      * 30-88 MHz frequency band and will be compliant with MIL-STD-188-220 and 241-1/2.
      */
    UCI_SINCGARS,

    /** Indicates communications with the Joint Tactical Radio System (JTRS) Soldier Radio Waveform (SRW). */
    UCI_SRW,

    /** Indicates communications with the Tactical Common Data Link (TCDL) radio. */
    UCI_TCDL,

    /** Indicates communications with the Tactical Targeting Network Technology (TTNT) radio. */
    UCI_TTNT,

    /** Indicates communications in the 300 MHz - 3 GHz frequency band. */
    UCI_UHF,

    /** Indicates communications via satellite in the 240MHz and 270MHz frequency band. */
    UCI_UHF_SATCOM,

    /** Indicates communications with the VHF Data Link (VDL) or VHF Digital Link is a means of sending information between
      * aircraft and ground stations.
      */
    UCI_VDL,

    /** Indicates Very High Frequency (VHF) communications in the 30 to 300 MHz frequency range. */
    UCI_VHF,

    /** Indicates communications with the Variable Message Format (VMF) protocol. VMF is compliant MIL-STD-6017. It is
      * a communications protocol used in communicating tactical military information.
      */
    UCI_VMF,

    /** No annotation will be provided. */
    UCI_TDRSS,

    /** No annotation will be provided. */
    UCI_FLTSATCOM,

    /** No annotation will be provided. */
    UCI_NCCT,

    /** No annotation will be provided. */
    UCI_VORTEX,

    /** Indicates communications with the Wideband Global SATCOM system, a high capacity satellite communications system. */
    UCI_WGS,

    /** Indicates communications with the Wideband Networking Waveform (WNW). */
    UCI_WNW,

    /** Indicates communications via satellite in the 7.25 to 7.75 GHz and 7.9 to 8.4 GHz frequency range. Also known as
      * Super High Frequency (SHF) communications.
      */
    UCI_X_BAND,

    /** Indicates communications with the Protected Tactical Waveform (PTW). */
    UCI_PTW,

    /** Indicates communications with the Starlink Waveform. */
    UCI_STARLINK,

    /** Indicates another type of Comms. Use of this enumerate should be avoided or at least minimized. If used, it should
      * only be used temporarily while proposing the addition of new well named enumerate(s) to the standard.
      */
    UCI_OTHER,

    /** Enumerated item that indicates maximum enumerated item exclusive of this item */
    enumMaxExclusive
  };

  /** Returns this accessor's type constant, i.e. commCapabilityEnum.
    *
    * @return This accessor's type constant, i.e. commCapabilityEnum.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commCapabilityEnum;
  }

  /** The assignment operator. Sets the contents of this CommCapabilityEnum to the contents of the CommCapabilityEnum on
    * the right hand side (rhs) of the assignment operator.
    *
    * @param rhs The CommCapabilityEnum on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this CommCapabilityEnum.
    * @return A reference to this CommCapabilityEnum.
    */
  CommCapabilityEnum& operator=(const CommCapabilityEnum& rhs) {
    setValue(rhs.getValue());
    return *this;
  }

  /** The assignment operator that sets the value of this CommCapabilityEnum enumeration to the EnumerationItem on the
    * right hand side of the assignment operator.
    *
    * @param rhs The EnumerationItem whose value is to be assigned to this CommCapabilityEnum enumeration.
    * @return A reference to this CommCapabilityEnum enumeration.
    */
  CommCapabilityEnum& operator=(EnumerationItem rhs) {
    setValue(rhs);
    return *this;
  }

  /** Sets the value of this CommCapabilityEnum enumeration to the value of the specified enumeration item.
    *
    * @param item The EnumerationItem whose value is to be used to set the value of this CommCapabilityEnum enumeration.
    */
  virtual void setValue(EnumerationItem item) = 0;

  /** Returns the value of this CommCapabilityEnum enumeration.
    *
    * @param testForValidity=true Specifies whether this CommCapabilityEnum enumeration should be validated (true) or not
    *      (false) as part of retrieving its value.
    * @return The value of this CommCapabilityEnum enumeration.
    */
  virtual EnumerationItem getValue(bool testForValidity=true) const = 0;

  /** Returns the number of items in this CommCapabilityEnum enumeration.
    *
    * @return The number of items in this CommCapabilityEnum enumeration.
    */
  int getNumberOfItems() const noexception {
    return 53;
  }

  /** Returns whether this CommCapabilityEnum enumeration is valid or not. A CommCapabilityEnum enumeration is valid if its
    * value is one of the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @return A flag indicating whether this CommCapabilityEnum enumeration is valid (true) or not (false).
    */
  virtual bool isValid() const noexception {
    return isValid(getValue(false));
  }

  /** Returns whether the specified enumeration item is valid or not. A enumeration item is valid if its value is one of
    * the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @param item The EnumerationItem to test.
    * @return A flag indicating whether the specified EnumerationItem is valid (true) or not (false).
    */
  static bool isValid(EnumerationItem item) noexception {
    return (item > enumNotSet) && (item < enumMaxExclusive);
  }

  /** Returns whether the specified name item is valid or not. A name is valid if it is the name of one of the enumeration
    * items other than enumNotSet and enumMaxExclusive.
    *
    * @param name The name to test.
    * @return A flag indicating whether the specified name is valid (true) or not (false).
    */
  static bool isValid(const std::string& name) noexception {
    FromNameTable::const_iterator iter = m_fromNameTable.find(name);
    return !(iter == m_fromNameTable.end());
  }

  /** Tests whether the value of the CommCapabilityEnum enumeration on the right hand side of the == operator is equal to
    * the value as this CommCapabilityEnum enumeration.
    *
    * @param rhs The CommCapabilityEnum enumeration whose value is to be compared against the value of this
    *      CommCapabilityEnum enumeration.
    * @return True if the value of the specified CommCapabilityEnum enumeration (rhs) is equal to the value of this
    *      CommCapabilityEnum enumeration, false otherwise.
    */
  bool operator==(const CommCapabilityEnum& rhs) const {
    return getValue() == rhs.getValue();
  }

  /** Tests whether the value of the CommCapabilityEnum enumeration on the right hand side of the != operator is not equal
    * to the value as this CommCapabilityEnum enumeration.
    *
    * @param rhs The CommCapabilityEnum enumeration whose value is to be compared against the value of this
    *      CommCapabilityEnum enumeration.
    * @return True if the value of the specified CommCapabilityEnum enumeration (rhs) is not equal to the value of this
    *      CommCapabilityEnum enumeration, false otherwise.
    */
  bool operator!=(const CommCapabilityEnum& rhs) const {
    return getValue() != rhs.getValue();
  }

  /** Tests whether the value of the CommCapabilityEnum enumeration on the right hand side of the < operator is less than
    * the value as this CommCapabilityEnum enumeration.
    *
    * @param rhs The CommCapabilityEnum enumeration whose value is to be compared against the value of this
    *      CommCapabilityEnum enumeration.
    * @return True if the value of the specified CommCapabilityEnum enumeration (rhs) is less than the value of this
    *      CommCapabilityEnum enumeration, false otherwise.
    */
  bool operator<(const CommCapabilityEnum& rhs) const {
    return getValue() < rhs.getValue();
  }

  /** Tests whether the value of the CommCapabilityEnum enumeration on the right hand side of the <= operator is less than
    * or equal to the value as this CommCapabilityEnum enumeration.
    *
    * @param rhs The CommCapabilityEnum enumeration whose value is to be compared against the value of this
    *      CommCapabilityEnum enumeration.
    * @return True if the value of the specified CommCapabilityEnum enumeration (rhs) is less than or equal to the value of
    *      this CommCapabilityEnum enumeration, false otherwise.
    */
  bool operator<=(const CommCapabilityEnum& rhs) const {
    return getValue() <= rhs.getValue();
  }

  /** Tests whether the value of the CommCapabilityEnum enumeration on the right hand side of the > operator is greater
    * than the value as this CommCapabilityEnum enumeration.
    *
    * @param rhs The CommCapabilityEnum enumeration whose value is to be compared against the value of this
    *      CommCapabilityEnum enumeration.
    * @return True if the value of the specified CommCapabilityEnum enumeration (rhs) is greater than the value of this
    *      CommCapabilityEnum enumeration, false otherwise.
    */
  bool operator>(const CommCapabilityEnum& rhs) const {
    return getValue() > rhs.getValue();
  }

  /** Tests whether the value of the CommCapabilityEnum enumeration on the right hand side of the >= operator is greater
    * than or equal to the value as this CommCapabilityEnum enumeration.
    *
    * @param rhs The CommCapabilityEnum enumeration whose value is to be compared against the value of this
    *      CommCapabilityEnum enumeration.
    * @return True if the value of the specified CommCapabilityEnum enumeration (rhs) is greater than or equal to the value
    *      of this CommCapabilityEnum enumeration, false otherwise.
    */
  bool operator>=(const CommCapabilityEnum& rhs) const {
    return getValue() >= rhs.getValue();
  }

  /** Tests whether the value of this CommCapabilityEnum enumeration is equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this CommCapabilityEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is equal to the value of this CommCapabilityEnum enumeration,
    *      false otherwise.
    */
  bool operator==(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() == rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is equal to the value of the specified CommCapabilityEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified CommCapabilityEnum
    *      enumeration.
    * @param rhs The CommCapabilityEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is equal to the value of the CommCapabilityEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator==(EnumerationItem lhs, const CommCapabilityEnum& rhs) {
    testForValidItem(lhs);
    return lhs == rhs.getValue();
  }

  /** Tests whether the value of this CommCapabilityEnum enumeration is not equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this CommCapabilityEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is not equal to the value of this CommCapabilityEnum
    *      enumeration, false otherwise.
    */
  bool operator!=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() != rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is not equal to the value of the specified
    * CommCapabilityEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified CommCapabilityEnum
    *      enumeration.
    * @param rhs The CommCapabilityEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is not equal to the value of the CommCapabilityEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator!=(EnumerationItem lhs, const CommCapabilityEnum& rhs) {
    testForValidItem(lhs);
    return lhs != rhs.getValue();
  }

  /** Tests whether the value of this CommCapabilityEnum enumeration is less than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this CommCapabilityEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than the value of this CommCapabilityEnum enumeration,
    *      false otherwise.
    */
  bool operator<(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() < rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than the value of the specified CommCapabilityEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified CommCapabilityEnum
    *      enumeration.
    * @param rhs The CommCapabilityEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than the value of the CommCapabilityEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator<(EnumerationItem lhs, const CommCapabilityEnum& rhs) {
    testForValidItem(lhs);
    return lhs < rhs.getValue();
  }

  /** Tests whether the value of this CommCapabilityEnum enumeration is less than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this CommCapabilityEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than or equal to the value of this CommCapabilityEnum
    *      enumeration, false otherwise.
    */
  bool operator<=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() <= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than or equal to the value of the specified
    * CommCapabilityEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified CommCapabilityEnum
    *      enumeration.
    * @param rhs The CommCapabilityEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than or equal to the value of the CommCapabilityEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator<=(EnumerationItem lhs, const CommCapabilityEnum& rhs) {
    testForValidItem(lhs);
    return lhs <= rhs.getValue();
  }

  /** Tests whether the value of this CommCapabilityEnum enumeration is greater than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this CommCapabilityEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than the value of this CommCapabilityEnum
    *      enumeration, false otherwise.
    */
  bool operator>(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() > rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than the value of the specified
    * CommCapabilityEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified CommCapabilityEnum
    *      enumeration.
    * @param rhs The CommCapabilityEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than the value of the CommCapabilityEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator>(EnumerationItem lhs, const CommCapabilityEnum& rhs) {
    testForValidItem(lhs);
    return lhs > rhs.getValue();
  }

  /** Tests whether the value of this CommCapabilityEnum enumeration is greater than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this CommCapabilityEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than or equal to the value of this
    *      CommCapabilityEnum enumeration, false otherwise.
    */
  bool operator>=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() >= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than or equal to the value of the specified
    * CommCapabilityEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified CommCapabilityEnum
    *      enumeration.
    * @param rhs The CommCapabilityEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than or equal to the value of the
    *      CommCapabilityEnum enumeration (rhs), false otherwise.
    */
  friend bool operator>=(EnumerationItem lhs, const CommCapabilityEnum& rhs) {
    testForValidItem(lhs);
    return lhs >= rhs.getValue();
  }

  /** Returns the name of the specified enumeration item.
    *
    * @param item The enumeration item whose name is to be returned.
    * @return The enumeration item's name if valid.
    */
  static std::string toName(EnumerationItem item) {
    ToNameTable::const_iterator iter = m_toNameTable.find(item);
    if (iter == m_toNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to convert enumerated item to its name, item not found in mapping: " << item;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Returns the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item to be returned.
    * @return The enumeration item having the specified name.
    */
  static EnumerationItem fromName(const std::string& itemName) {
    FromNameTable::const_iterator iter = m_fromNameTable.find(itemName);
    if (iter == m_fromNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to return enumerated item having specified name, name not found in mapping: " << itemName;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Return the name of the enumeration item that the value of this CommCapabilityEnum enumeration is set to.
    *
    * @return The name of the enumeration item.
    */
  virtual std::string toName() const {
    return toName(getValue());
  }

  /** Sets the value of this CommCapabilityEnum enumeration to the value of the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item whose value is to be used to set this CommCapabilityEnum enumeration
    *      to.
    */
  virtual void setValueFromName(const std::string& itemName) {
    setValue(fromName(itemName));
  }

protected:

  /** The default constructor. In addition to constructing a new CommCapabilityEnum, this constructor also makes sure the
    * conversion tables are initialized.
    */
  CommCapabilityEnum() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommCapabilityEnum() {
  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param additionalDescription An additional description to include in the error message should an exception be thrown.
    * @param item The enumeration item to test.
    */
  static void testForValidItem(const char* additionalDescription, EnumerationItem item) {
    if (!isValid(item)) {
      std::ostringstream oStream;
      oStream << additionalDescription << ": " << item << " (item must be between " << enumNotSet << " and "<< enumMaxExclusive << " exclusive)";
      throw uci::base::UCIException(oStream.str(), 0);
    }

  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param item The enumeration item to test.
    */
  static void testForValidItem(EnumerationItem item) {
    testForValidItem("Invalid enumerated item specified", item);
  }

private:

  /** The type of table that is used to lookup the name of a enumeration item given that enumeration item. */
  typedef std::map<EnumerationItem, const std::string> ToNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  typedef std::map<const std::string, EnumerationItem> FromNameTable;

  /** The table that is used to lookup the name of a enumeration item given that enumeration item. */
  static UCI_EXPORT ToNameTable m_toNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  static UCI_EXPORT FromNameTable m_fromNameTable;

protected:

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommCapabilityEnum to copy from.
    */
  CommCapabilityEnum(const CommCapabilityEnum& rhs) {
    (void)rhs;
  }

};

} // namespace type
} // namespace uci

template<typename charT, typename traits>
std::basic_ostream<charT, traits>&
operator<<(std::basic_ostream<charT, traits>& oStream, const uci::type::CommCapabilityEnum& enumeration)
{
  oStream << enumeration.toName();
  return oStream;
}

#endif // UCI_TYPE_COMMCAPABILITYENUM_H

