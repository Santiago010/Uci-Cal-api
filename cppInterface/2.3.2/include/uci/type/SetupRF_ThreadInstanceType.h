/** @file SetupRF_ThreadInstanceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SETUPRF_THREADINSTANCETYPE_H
#define UCI_TYPE_SETUPRF_THREADINSTANCETYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/UnsignedIntAccessor.h"
#include "../base/export.h"
#include "RF_GainType.h"
#include "SetupBeamConfigurationInstanceType.h"
#include "ThreadConfigurationRF_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SetupRF_ThreadInstanceType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SetupRF_ThreadInstanceType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SetupRF_ThreadInstanceType.
    */
  static UCI_EXPORT SetupRF_ThreadInstanceType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SetupRF_ThreadInstanceType initializing the data accessed by the new
    * SetupRF_ThreadInstanceType using the data accessed by the specified SetupRF_ThreadInstanceType (cloning).
    *
    * @param accessor The SetupRF_ThreadInstanceType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created SetupRF_ThreadInstanceType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SetupRF_ThreadInstanceType.
    */
  static UCI_EXPORT SetupRF_ThreadInstanceType& create(const SetupRF_ThreadInstanceType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SetupRF_ThreadInstanceType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The SetupRF_ThreadInstanceType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SetupRF_ThreadInstanceType& accessor);

  /** Returns this accessor's type constant, i.e. setupRF_ThreadInstanceType.
    *
    * @return This accessor's type constant, i.e. setupRF_ThreadInstanceType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::setupRF_ThreadInstanceType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SetupRF_ThreadInstanceType.
    *
    * @return The version that was initialized from the uci:version attribute of SetupRF_ThreadInstanceType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SetupRF_ThreadInstanceType& accessor) = 0;

  /** This must match the resource definition in the resource allocation. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::ThreadConfigurationRF_Type, uci::type::accessorType::threadConfigurationRF_Type> BeamConfiguration;

  /** Gain of the RF path associated with the sibling System Thread. Multiplicity of 2 is to allow the transmit path to be
    * different than the receive path gain. [Occurrences: Minimum: 0; Maximum: 2]
    */
  typedef uci::base::BoundedList<uci::type::RF_GainType, uci::type::accessorType::rF_GainType> RF_Gain;

  /** Maps BeamConfiguration buffer numbers to Beam Instance Indices. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::SetupBeamConfigurationInstanceType, uci::type::accessorType::setupBeamConfigurationInstanceType> BeamInstance;

  /** Returns the value of the SimplePrimitive data type identified by RF_ThreadInstanceIndex.
    *
    * @return The value of the simple primitive data type identified by RF_ThreadInstanceIndex.
    */
  virtual xs::UnsignedInt getRF_ThreadInstanceIndex() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RF_ThreadInstanceIndex.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SetupRF_ThreadInstanceType& setRF_ThreadInstanceIndex(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by SystemThreadIndex.
    *
    * @return The value of the simple primitive data type identified by SystemThreadIndex.
    */
  virtual xs::UnsignedInt getSystemThreadIndex() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SystemThreadIndex.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SetupRF_ThreadInstanceType& setSystemThreadIndex(xs::UnsignedInt value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ResourceAccessPriority.
    *
    * @return The value of the simple primitive data type identified by ResourceAccessPriority.
    */
  virtual xs::UnsignedInt getResourceAccessPriority() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ResourceAccessPriority.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SetupRF_ThreadInstanceType& setResourceAccessPriority(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by ResourceAccessPriority exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ResourceAccessPriority is enabled or not.
    */
  virtual bool hasResourceAccessPriority() const = 0;

  /** Clears (disabled) the Element identified by ResourceAccessPriority.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SetupRF_ThreadInstanceType& clearResourceAccessPriority() = 0;

  /** Returns a const reference to the bounded list identified by BeamConfiguration.
    *
    * @return A const reference to the bounded list identified by BeamConfiguration.
    */
  virtual const uci::type::SetupRF_ThreadInstanceType::BeamConfiguration& getBeamConfiguration() const = 0;

  /** Returns a reference to the bounded list identified by BeamConfiguration.
    *
    * @return A reference to the bounded list identified by BeamConfiguration.
    */
  virtual uci::type::SetupRF_ThreadInstanceType::BeamConfiguration& getBeamConfiguration() = 0;

  /** Sets the bounded list identified by BeamConfiguration.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SetupRF_ThreadInstanceType& setBeamConfiguration(const uci::type::SetupRF_ThreadInstanceType::BeamConfiguration& value) = 0;

  /** Returns a const reference to the bounded list identified by RF_Gain.
    *
    * @return A const reference to the bounded list identified by RF_Gain.
    */
  virtual const uci::type::SetupRF_ThreadInstanceType::RF_Gain& getRF_Gain() const = 0;

  /** Returns a reference to the bounded list identified by RF_Gain.
    *
    * @return A reference to the bounded list identified by RF_Gain.
    */
  virtual uci::type::SetupRF_ThreadInstanceType::RF_Gain& getRF_Gain() = 0;

  /** Sets the bounded list identified by RF_Gain.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SetupRF_ThreadInstanceType& setRF_Gain(const uci::type::SetupRF_ThreadInstanceType::RF_Gain& value) = 0;

  /** Returns a const reference to the bounded list identified by BeamInstance.
    *
    * @return A const reference to the bounded list identified by BeamInstance.
    */
  virtual const uci::type::SetupRF_ThreadInstanceType::BeamInstance& getBeamInstance() const = 0;

  /** Returns a reference to the bounded list identified by BeamInstance.
    *
    * @return A reference to the bounded list identified by BeamInstance.
    */
  virtual uci::type::SetupRF_ThreadInstanceType::BeamInstance& getBeamInstance() = 0;

  /** Sets the bounded list identified by BeamInstance.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SetupRF_ThreadInstanceType& setBeamInstance(const uci::type::SetupRF_ThreadInstanceType::BeamInstance& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ActiveBeamInstanceIndex.
    *
    * @return The value of the simple primitive data type identified by ActiveBeamInstanceIndex.
    */
  virtual xs::UnsignedInt getActiveBeamInstanceIndex() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ActiveBeamInstanceIndex.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SetupRF_ThreadInstanceType& setActiveBeamInstanceIndex(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by ActiveBeamInstanceIndex exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActiveBeamInstanceIndex is enabled or not.
    */
  virtual bool hasActiveBeamInstanceIndex() const = 0;

  /** Clears (disabled) the Element identified by ActiveBeamInstanceIndex.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SetupRF_ThreadInstanceType& clearActiveBeamInstanceIndex() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SetupRF_ThreadInstanceType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SetupRF_ThreadInstanceType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SetupRF_ThreadInstanceType to copy from.
    */
  SetupRF_ThreadInstanceType(const SetupRF_ThreadInstanceType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SetupRF_ThreadInstanceType to the contents of the
    * SetupRF_ThreadInstanceType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The SetupRF_ThreadInstanceType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this SetupRF_ThreadInstanceType.
    * @return A reference to this SetupRF_ThreadInstanceType.
    */
  SetupRF_ThreadInstanceType& operator=(const SetupRF_ThreadInstanceType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SETUPRF_THREADINSTANCETYPE_H

