/** @file EntityConfirmationRequestMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ENTITYCONFIRMATIONREQUESTMDT_H
#define UCI_TYPE_ENTITYCONFIRMATIONREQUESTMDT_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/EntityDimensionEstimateType.h"
#include "uci/type/EntityDimensionEstimateUncertaintyType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/EntityOrbitalEphemerisID_Type.h"
#include "uci/type/FileMetadataID_Type.h"
#include "uci/type/MeasurementKinematicsChoiceType.h"
#include "uci/type/ProductMetadataID_Type.h"
#include "uci/type/QuaternionAttitudeType.h"
#include "uci/type/RequestBaseType.h"
#include "uci/type/RequirementInstanceID_ChoiceType.h"
#include "uci/type/SensorKinematicsChoiceType.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/SystemOrbitalEphemerisID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class EntityConfirmationRequestMDT : public virtual RequestBaseType {
public:

  /** This method constructs a new EntityConfirmationRequestMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EntityConfirmationRequestMDT.
    */
  static UCI_EXPORT EntityConfirmationRequestMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new EntityConfirmationRequestMDT initializing the data accessed by the new
    * EntityConfirmationRequestMDT using the data accessed by the specified EntityConfirmationRequestMDT (cloning).
    *
    * @param accessor The EntityConfirmationRequestMDT that provides access to the data that is to be used to initialize
    *      the data accessed by the new created EntityConfirmationRequestMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EntityConfirmationRequestMDT.
    */
  static UCI_EXPORT EntityConfirmationRequestMDT& create(const EntityConfirmationRequestMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified EntityConfirmationRequestMDT. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The EntityConfirmationRequestMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(EntityConfirmationRequestMDT& accessor);

  /** Returns this accessor's type constant, i.e. entityConfirmationRequestMDT.
    *
    * @return This accessor's type constant, i.e. entityConfirmationRequestMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::entityConfirmationRequestMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of EntityConfirmationRequestMDT.
    *
    * @return The version that was initialized from the uci:version attribute of EntityConfirmationRequestMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const EntityConfirmationRequestMDT& accessor) = 0;

  /** Provides references to files related to the Entity that supports this confirmation. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FileMetadataID_Type, uci::type::accessorType::fileMetadataID_Type> FileMetadataID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual const uci::type::SystemID_Type& getSystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual uci::type::SystemID_Type& getSystemID() = 0;

  /** Sets the complex content identified by SystemID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& setSystemID(const uci::type::SystemID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RequirementID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RequirementID.
    */
  virtual const uci::type::RequirementInstanceID_ChoiceType& getRequirementID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RequirementID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RequirementID.
    */
  virtual uci::type::RequirementInstanceID_ChoiceType& getRequirementID() = 0;

  /** Sets the complex content identified by RequirementID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RequirementID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& setRequirementID(const uci::type::RequirementInstanceID_ChoiceType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EntityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EntityID.
    */
  virtual const uci::type::EntityID_Type& getEntityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EntityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EntityID.
    */
  virtual uci::type::EntityID_Type& getEntityID() = 0;

  /** Sets the complex content identified by EntityID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EntityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& setEntityID(const uci::type::EntityID_Type& value) = 0;

  /** Enables the Element identified by EntityID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return A reference to the accessor that provides access to the complex content identified by EntityID.
    */
  virtual uci::type::EntityID_Type& enableEntityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns the value of the SimplePrimitive data type identified by TimeStamp.
    *
    * @return The value of the simple primitive data type identified by TimeStamp.
    */
  virtual uci::type::DateTimeTypeValue getTimeStamp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TimeStamp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& setTimeStamp(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * EntityDimension_EstimateUncertainty.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      EntityDimension_EstimateUncertainty.
    */
  virtual const uci::type::EntityDimensionEstimateUncertaintyType& getEntityDimension_EstimateUncertainty() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * EntityDimension_EstimateUncertainty.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      EntityDimension_EstimateUncertainty.
    */
  virtual uci::type::EntityDimensionEstimateUncertaintyType& getEntityDimension_EstimateUncertainty() = 0;

  /** Sets the complex content identified by EntityDimension_EstimateUncertainty to the contents of the complex content
    * accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EntityDimension_EstimateUncertainty.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& setEntityDimension_EstimateUncertainty(const uci::type::EntityDimensionEstimateUncertaintyType& value) = 0;

  /** Returns whether the Element identified by EntityDimension_EstimateUncertainty exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EntityDimension_EstimateUncertainty is enabled or not.
    */
  virtual bool hasEntityDimension_EstimateUncertainty() const = 0;

  /** Enables the Element identified by EntityDimension_EstimateUncertainty.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      EntityDimension_EstimateUncertainty.
    */
  virtual uci::type::EntityDimensionEstimateUncertaintyType& enableEntityDimension_EstimateUncertainty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EntityDimension_EstimateUncertainty.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& clearEntityDimension_EstimateUncertainty() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * EntityDimension_Estimate.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      EntityDimension_Estimate.
    */
  virtual const uci::type::EntityDimensionEstimateType& getEntityDimension_Estimate() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * EntityDimension_Estimate.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      EntityDimension_Estimate.
    */
  virtual uci::type::EntityDimensionEstimateType& getEntityDimension_Estimate() = 0;

  /** Sets the complex content identified by EntityDimension_Estimate to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EntityDimension_Estimate.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& setEntityDimension_Estimate(const uci::type::EntityDimensionEstimateType& value) = 0;

  /** Returns whether the Element identified by EntityDimension_Estimate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EntityDimension_Estimate is enabled or not.
    */
  virtual bool hasEntityDimension_Estimate() const = 0;

  /** Enables the Element identified by EntityDimension_Estimate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      EntityDimension_Estimate.
    */
  virtual uci::type::EntityDimensionEstimateType& enableEntityDimension_Estimate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EntityDimension_Estimate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& clearEntityDimension_Estimate() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AttitudeEstimates.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AttitudeEstimates.
    */
  virtual const uci::type::QuaternionAttitudeType& getAttitudeEstimates() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AttitudeEstimates.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AttitudeEstimates.
    */
  virtual uci::type::QuaternionAttitudeType& getAttitudeEstimates() = 0;

  /** Sets the complex content identified by AttitudeEstimates to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AttitudeEstimates.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& setAttitudeEstimates(const uci::type::QuaternionAttitudeType& value) = 0;

  /** Returns whether the Element identified by AttitudeEstimates exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AttitudeEstimates is enabled or not.
    */
  virtual bool hasAttitudeEstimates() const = 0;

  /** Enables the Element identified by AttitudeEstimates.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AttitudeEstimates.
    */
  virtual uci::type::QuaternionAttitudeType& enableAttitudeEstimates(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AttitudeEstimates.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& clearAttitudeEstimates() = 0;

  /** Returns a const reference to the bounded list identified by FileMetadataID.
    *
    * @return A const reference to the bounded list identified by FileMetadataID.
    */
  virtual const uci::type::EntityConfirmationRequestMDT::FileMetadataID& getFileMetadataID() const = 0;

  /** Returns a reference to the bounded list identified by FileMetadataID.
    *
    * @return A reference to the bounded list identified by FileMetadataID.
    */
  virtual uci::type::EntityConfirmationRequestMDT::FileMetadataID& getFileMetadataID() = 0;

  /** Sets the bounded list identified by FileMetadataID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& setFileMetadataID(const uci::type::EntityConfirmationRequestMDT::FileMetadataID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ProductMetadataID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ProductMetadataID.
    */
  virtual const uci::type::ProductMetadataID_Type& getProductMetadataID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ProductMetadataID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ProductMetadataID.
    */
  virtual uci::type::ProductMetadataID_Type& getProductMetadataID() = 0;

  /** Sets the complex content identified by ProductMetadataID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ProductMetadataID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& setProductMetadataID(const uci::type::ProductMetadataID_Type& value) = 0;

  /** Returns whether the Element identified by ProductMetadataID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProductMetadataID is enabled or not.
    */
  virtual bool hasProductMetadataID() const = 0;

  /** Enables the Element identified by ProductMetadataID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ProductMetadataID.
    */
  virtual uci::type::ProductMetadataID_Type& enableProductMetadataID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ProductMetadataID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& clearProductMetadataID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * MeasurementKinematics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      MeasurementKinematics.
    */
  virtual const uci::type::MeasurementKinematicsChoiceType& getMeasurementKinematics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MeasurementKinematics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MeasurementKinematics.
    */
  virtual uci::type::MeasurementKinematicsChoiceType& getMeasurementKinematics() = 0;

  /** Sets the complex content identified by MeasurementKinematics to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MeasurementKinematics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& setMeasurementKinematics(const uci::type::MeasurementKinematicsChoiceType& value) = 0;

  /** Returns whether the Element identified by MeasurementKinematics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MeasurementKinematics is enabled or not.
    */
  virtual bool hasMeasurementKinematics() const = 0;

  /** Enables the Element identified by MeasurementKinematics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MeasurementKinematics.
    */
  virtual uci::type::MeasurementKinematicsChoiceType& enableMeasurementKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MeasurementKinematics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& clearMeasurementKinematics() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ReferenceKinematics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ReferenceKinematics.
    */
  virtual const uci::type::SensorKinematicsChoiceType& getReferenceKinematics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ReferenceKinematics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ReferenceKinematics.
    */
  virtual uci::type::SensorKinematicsChoiceType& getReferenceKinematics() = 0;

  /** Sets the complex content identified by ReferenceKinematics to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ReferenceKinematics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& setReferenceKinematics(const uci::type::SensorKinematicsChoiceType& value) = 0;

  /** Returns whether the Element identified by ReferenceKinematics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReferenceKinematics is enabled or not.
    */
  virtual bool hasReferenceKinematics() const = 0;

  /** Enables the Element identified by ReferenceKinematics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ReferenceKinematics.
    */
  virtual uci::type::SensorKinematicsChoiceType& enableReferenceKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReferenceKinematics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& clearReferenceKinematics() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SystemEphemerisID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SystemEphemerisID.
    */
  virtual const uci::type::SystemOrbitalEphemerisID_Type& getSystemEphemerisID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemEphemerisID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemEphemerisID.
    */
  virtual uci::type::SystemOrbitalEphemerisID_Type& getSystemEphemerisID() = 0;

  /** Sets the complex content identified by SystemEphemerisID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemEphemerisID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& setSystemEphemerisID(const uci::type::SystemOrbitalEphemerisID_Type& value) = 0;

  /** Returns whether the Element identified by SystemEphemerisID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SystemEphemerisID is enabled or not.
    */
  virtual bool hasSystemEphemerisID() const = 0;

  /** Enables the Element identified by SystemEphemerisID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SystemEphemerisID.
    */
  virtual uci::type::SystemOrbitalEphemerisID_Type& enableSystemEphemerisID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SystemEphemerisID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& clearSystemEphemerisID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * EntityEphemerisID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      EntityEphemerisID.
    */
  virtual const uci::type::EntityOrbitalEphemerisID_Type& getEntityEphemerisID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EntityEphemerisID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EntityEphemerisID.
    */
  virtual uci::type::EntityOrbitalEphemerisID_Type& getEntityEphemerisID() = 0;

  /** Sets the complex content identified by EntityEphemerisID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EntityEphemerisID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& setEntityEphemerisID(const uci::type::EntityOrbitalEphemerisID_Type& value) = 0;

  /** Returns whether the Element identified by EntityEphemerisID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EntityEphemerisID is enabled or not.
    */
  virtual bool hasEntityEphemerisID() const = 0;

  /** Enables the Element identified by EntityEphemerisID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EntityEphemerisID.
    */
  virtual uci::type::EntityOrbitalEphemerisID_Type& enableEntityEphemerisID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EntityEphemerisID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityConfirmationRequestMDT& clearEntityEphemerisID() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  EntityConfirmationRequestMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~EntityConfirmationRequestMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The EntityConfirmationRequestMDT to copy from.
    */
  EntityConfirmationRequestMDT(const EntityConfirmationRequestMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this EntityConfirmationRequestMDT to the contents of the
    * EntityConfirmationRequestMDT on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The EntityConfirmationRequestMDT on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this EntityConfirmationRequestMDT.
    * @return A reference to this EntityConfirmationRequestMDT.
    */
  EntityConfirmationRequestMDT& operator=(const EntityConfirmationRequestMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ENTITYCONFIRMATIONREQUESTMDT_H

