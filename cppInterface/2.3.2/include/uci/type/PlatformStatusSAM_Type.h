/** @file PlatformStatusSAM_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLATFORMSTATUSSAM_TYPE_H
#define UCI_TYPE_PLATFORMSTATUSSAM_TYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/CommunicationsImpairmentEnum.h"
#include "uci/type/OperationalImpairmentEnum.h"
#include "uci/type/RadiationModeEnum.h"
#include "uci/type/SAM_ModeEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Platform status details for SAM launch sites. */
class PlatformStatusSAM_Type : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PlatformStatusSAM_Type.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlatformStatusSAM_Type.
    */
  static UCI_EXPORT PlatformStatusSAM_Type& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlatformStatusSAM_Type initializing the data accessed by the new PlatformStatusSAM_Type
    * using the data accessed by the specified PlatformStatusSAM_Type (cloning).
    *
    * @param accessor The PlatformStatusSAM_Type that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PlatformStatusSAM_Type.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlatformStatusSAM_Type.
    */
  static UCI_EXPORT PlatformStatusSAM_Type& create(const PlatformStatusSAM_Type& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlatformStatusSAM_Type. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The PlatformStatusSAM_Type that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlatformStatusSAM_Type& accessor);

  /** Returns this accessor's type constant, i.e. platformStatusSAM_Type.
    *
    * @return This accessor's type constant, i.e. platformStatusSAM_Type.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::platformStatusSAM_Type;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlatformStatusSAM_Type.
    *
    * @return The version that was initialized from the uci:version attribute of PlatformStatusSAM_Type.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlatformStatusSAM_Type& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by HotInventory.
    *
    * @return The value of the simple primitive data type identified by HotInventory.
    */
  virtual xs::UnsignedInt getHotInventory() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by HotInventory.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& setHotInventory(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by HotInventory exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by HotInventory is enabled or not.
    */
  virtual bool hasHotInventory() const = 0;

  /** Clears (disabled) the Element identified by HotInventory.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& clearHotInventory() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ColdInventory.
    *
    * @return The value of the simple primitive data type identified by ColdInventory.
    */
  virtual xs::UnsignedInt getColdInventory() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ColdInventory.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& setColdInventory(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by ColdInventory exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ColdInventory is enabled or not.
    */
  virtual bool hasColdInventory() const = 0;

  /** Clears (disabled) the Element identified by ColdInventory.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& clearColdInventory() = 0;

  /** Returns a const reference to the value of the enumeration identified by SAM_Mode.
    *
    * @return A const reference to the value of the enumeration identified by SAM_Mode.
    */
  virtual const uci::type::SAM_ModeEnum& getSAM_Mode() const = 0;

  /** Returns a reference to the value of the enumeration identified by SAM_Mode.
    *
    * @return A reference to the value of the enumeration identified by SAM_Mode.
    */
  virtual uci::type::SAM_ModeEnum& getSAM_Mode() = 0;

  /** Sets the value of the enumeration identified by SAM_Mode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& setSAM_Mode(const uci::type::SAM_ModeEnum& value) = 0;

  /** Sets the value of the enumeration identified by SAM_Mode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& setSAM_Mode(uci::type::SAM_ModeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by SAM_Mode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SAM_Mode is enabled or not.
    */
  virtual bool hasSAM_Mode() const = 0;

  /** Enables the Element identified by SAM_Mode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by SAM_Mode.
    */
  virtual uci::type::SAM_ModeEnum& enableSAM_Mode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SAM_Mode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& clearSAM_Mode() = 0;

  /** Returns a const reference to the value of the enumeration identified by OperationalImpairment.
    *
    * @return A const reference to the value of the enumeration identified by OperationalImpairment.
    */
  virtual const uci::type::OperationalImpairmentEnum& getOperationalImpairment() const = 0;

  /** Returns a reference to the value of the enumeration identified by OperationalImpairment.
    *
    * @return A reference to the value of the enumeration identified by OperationalImpairment.
    */
  virtual uci::type::OperationalImpairmentEnum& getOperationalImpairment() = 0;

  /** Sets the value of the enumeration identified by OperationalImpairment.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& setOperationalImpairment(const uci::type::OperationalImpairmentEnum& value) = 0;

  /** Sets the value of the enumeration identified by OperationalImpairment.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& setOperationalImpairment(uci::type::OperationalImpairmentEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by OperationalImpairment exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OperationalImpairment is enabled or not.
    */
  virtual bool hasOperationalImpairment() const = 0;

  /** Enables the Element identified by OperationalImpairment.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by OperationalImpairment.
    */
  virtual uci::type::OperationalImpairmentEnum& enableOperationalImpairment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OperationalImpairment.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& clearOperationalImpairment() = 0;

  /** Returns a const reference to the value of the enumeration identified by CommunicationsImpairment.
    *
    * @return A const reference to the value of the enumeration identified by CommunicationsImpairment.
    */
  virtual const uci::type::CommunicationsImpairmentEnum& getCommunicationsImpairment() const = 0;

  /** Returns a reference to the value of the enumeration identified by CommunicationsImpairment.
    *
    * @return A reference to the value of the enumeration identified by CommunicationsImpairment.
    */
  virtual uci::type::CommunicationsImpairmentEnum& getCommunicationsImpairment() = 0;

  /** Sets the value of the enumeration identified by CommunicationsImpairment.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& setCommunicationsImpairment(const uci::type::CommunicationsImpairmentEnum& value) = 0;

  /** Sets the value of the enumeration identified by CommunicationsImpairment.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& setCommunicationsImpairment(uci::type::CommunicationsImpairmentEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by CommunicationsImpairment exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CommunicationsImpairment is enabled or not.
    */
  virtual bool hasCommunicationsImpairment() const = 0;

  /** Enables the Element identified by CommunicationsImpairment.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by CommunicationsImpairment.
    */
  virtual uci::type::CommunicationsImpairmentEnum& enableCommunicationsImpairment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CommunicationsImpairment.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& clearCommunicationsImpairment() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ControlPositions.
    *
    * @return The value of the simple primitive data type identified by ControlPositions.
    */
  virtual xs::UnsignedInt getControlPositions() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ControlPositions.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& setControlPositions(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by ControlPositions exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ControlPositions is enabled or not.
    */
  virtual bool hasControlPositions() const = 0;

  /** Clears (disabled) the Element identified by ControlPositions.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& clearControlPositions() = 0;

  /** Returns a const reference to the value of the enumeration identified by RadiationMode.
    *
    * @return A const reference to the value of the enumeration identified by RadiationMode.
    */
  virtual const uci::type::RadiationModeEnum& getRadiationMode() const = 0;

  /** Returns a reference to the value of the enumeration identified by RadiationMode.
    *
    * @return A reference to the value of the enumeration identified by RadiationMode.
    */
  virtual uci::type::RadiationModeEnum& getRadiationMode() = 0;

  /** Sets the value of the enumeration identified by RadiationMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& setRadiationMode(const uci::type::RadiationModeEnum& value) = 0;

  /** Sets the value of the enumeration identified by RadiationMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& setRadiationMode(uci::type::RadiationModeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by RadiationMode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RadiationMode is enabled or not.
    */
  virtual bool hasRadiationMode() const = 0;

  /** Enables the Element identified by RadiationMode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by RadiationMode.
    */
  virtual uci::type::RadiationModeEnum& enableRadiationMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RadiationMode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlatformStatusSAM_Type& clearRadiationMode() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlatformStatusSAM_Type() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlatformStatusSAM_Type() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlatformStatusSAM_Type to copy from.
    */
  PlatformStatusSAM_Type(const PlatformStatusSAM_Type& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlatformStatusSAM_Type to the contents of the
    * PlatformStatusSAM_Type on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PlatformStatusSAM_Type on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this PlatformStatusSAM_Type.
    * @return A reference to this PlatformStatusSAM_Type.
    */
  PlatformStatusSAM_Type& operator=(const PlatformStatusSAM_Type& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLATFORMSTATUSSAM_TYPE_H

