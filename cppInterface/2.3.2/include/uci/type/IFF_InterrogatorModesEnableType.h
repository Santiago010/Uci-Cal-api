/** @file IFF_InterrogatorModesEnableType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_IFF_INTERROGATORMODESENABLETYPE_H
#define UCI_TYPE_IFF_INTERROGATORMODESENABLETYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/IFF_ActivePassiveEnum.h"
#include "uci/type/IFF_CivilMilitaryEnum.h"
#include "uci/type/IFF_LethalNonLethalEnum.h"
#include "uci/type/IFF_ModeControlType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class IFF_InterrogatorModesEnableType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new IFF_InterrogatorModesEnableType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IFF_InterrogatorModesEnableType.
    */
  static UCI_EXPORT IFF_InterrogatorModesEnableType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new IFF_InterrogatorModesEnableType initializing the data accessed by the new
    * IFF_InterrogatorModesEnableType using the data accessed by the specified IFF_InterrogatorModesEnableType (cloning).
    *
    * @param accessor The IFF_InterrogatorModesEnableType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created IFF_InterrogatorModesEnableType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IFF_InterrogatorModesEnableType.
    */
  static UCI_EXPORT IFF_InterrogatorModesEnableType& create(const IFF_InterrogatorModesEnableType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified IFF_InterrogatorModesEnableType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The IFF_InterrogatorModesEnableType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(IFF_InterrogatorModesEnableType& accessor);

  /** Returns this accessor's type constant, i.e. iFF_InterrogatorModesEnableType.
    *
    * @return This accessor's type constant, i.e. iFF_InterrogatorModesEnableType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::iFF_InterrogatorModesEnableType;
  }

  /** Returns the version that was initialized from the uci:version attribute of IFF_InterrogatorModesEnableType.
    *
    * @return The version that was initialized from the uci:version attribute of IFF_InterrogatorModesEnableType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const IFF_InterrogatorModesEnableType& accessor) = 0;

  /** Indicates civilian and / or military Interrogator modes. Either or both are selectable. List size for this element is
    * based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 2]
    */
  typedef uci::base::BoundedList<uci::type::IFF_CivilMilitaryEnum, uci::type::accessorType::iFF_CivilMilitaryEnum> CivilMilitary;

  /** High-level indication of which IFF Interrogator modes to use or not use. List size for this element is based on
    * "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 2]
    */
  typedef uci::base::BoundedList<uci::type::IFF_LethalNonLethalEnum, uci::type::accessorType::iFF_LethalNonLethalEnum> LethalNonLethal;

  /** Returns a const reference to the value of the enumeration identified by ActivePassive.
    *
    * @return A const reference to the value of the enumeration identified by ActivePassive.
    */
  virtual const uci::type::IFF_ActivePassiveEnum& getActivePassive() const = 0;

  /** Returns a reference to the value of the enumeration identified by ActivePassive.
    *
    * @return A reference to the value of the enumeration identified by ActivePassive.
    */
  virtual uci::type::IFF_ActivePassiveEnum& getActivePassive() = 0;

  /** Sets the value of the enumeration identified by ActivePassive.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_InterrogatorModesEnableType& setActivePassive(const uci::type::IFF_ActivePassiveEnum& value) = 0;

  /** Sets the value of the enumeration identified by ActivePassive.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_InterrogatorModesEnableType& setActivePassive(uci::type::IFF_ActivePassiveEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by CivilMilitary.
    *
    * @return A const reference to the bounded list identified by CivilMilitary.
    */
  virtual const uci::type::IFF_InterrogatorModesEnableType::CivilMilitary& getCivilMilitary() const = 0;

  /** Returns a reference to the bounded list identified by CivilMilitary.
    *
    * @return A reference to the bounded list identified by CivilMilitary.
    */
  virtual uci::type::IFF_InterrogatorModesEnableType::CivilMilitary& getCivilMilitary() = 0;

  /** Sets the bounded list identified by CivilMilitary.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_InterrogatorModesEnableType& setCivilMilitary(const uci::type::IFF_InterrogatorModesEnableType::CivilMilitary& value) = 0;

  /** Returns a const reference to the bounded list identified by LethalNonLethal.
    *
    * @return A const reference to the bounded list identified by LethalNonLethal.
    */
  virtual const uci::type::IFF_InterrogatorModesEnableType::LethalNonLethal& getLethalNonLethal() const = 0;

  /** Returns a reference to the bounded list identified by LethalNonLethal.
    *
    * @return A reference to the bounded list identified by LethalNonLethal.
    */
  virtual uci::type::IFF_InterrogatorModesEnableType::LethalNonLethal& getLethalNonLethal() = 0;

  /** Sets the bounded list identified by LethalNonLethal.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_InterrogatorModesEnableType& setLethalNonLethal(const uci::type::IFF_InterrogatorModesEnableType::LethalNonLethal& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * DirectedModeEnableAndSequencing.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      DirectedModeEnableAndSequencing.
    */
  virtual const uci::type::IFF_ModeControlType& getDirectedModeEnableAndSequencing() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * DirectedModeEnableAndSequencing.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      DirectedModeEnableAndSequencing.
    */
  virtual uci::type::IFF_ModeControlType& getDirectedModeEnableAndSequencing() = 0;

  /** Sets the complex content identified by DirectedModeEnableAndSequencing to the contents of the complex content
    * accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DirectedModeEnableAndSequencing.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_InterrogatorModesEnableType& setDirectedModeEnableAndSequencing(const uci::type::IFF_ModeControlType& value) = 0;

  /** Returns whether the Element identified by DirectedModeEnableAndSequencing exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DirectedModeEnableAndSequencing is enabled or not.
    */
  virtual bool hasDirectedModeEnableAndSequencing() const = 0;

  /** Enables the Element identified by DirectedModeEnableAndSequencing.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      DirectedModeEnableAndSequencing.
    */
  virtual uci::type::IFF_ModeControlType& enableDirectedModeEnableAndSequencing(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DirectedModeEnableAndSequencing.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_InterrogatorModesEnableType& clearDirectedModeEnableAndSequencing() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  IFF_InterrogatorModesEnableType() {
  }

  /** The destructor [only available to derived classes]. */
  ~IFF_InterrogatorModesEnableType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The IFF_InterrogatorModesEnableType to copy from.
    */
  IFF_InterrogatorModesEnableType(const IFF_InterrogatorModesEnableType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this IFF_InterrogatorModesEnableType to the contents of the
    * IFF_InterrogatorModesEnableType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The IFF_InterrogatorModesEnableType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this IFF_InterrogatorModesEnableType.
    * @return A reference to this IFF_InterrogatorModesEnableType.
    */
  IFF_InterrogatorModesEnableType& operator=(const IFF_InterrogatorModesEnableType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_IFF_INTERROGATORMODESENABLETYPE_H

