/** @file CommLink16ControlType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMLINK16CONTROLTYPE_H
#define UCI_TYPE_COMMLINK16CONTROLTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/IntAccessor.h"
#include "../base/UnsignedByteAccessor.h"
#include "../base/export.h"
#include "CommLink16AdvancedSlotNotificationType.h"
#include "CommLink16DelayReductionType.h"
#include "CommLink16EnhancedThroughputCodeRateEnum.h"
#include "CommLink16InitialEntryGroupEnum.h"
#include "CommLink16InitialEntryMessageType.h"
#include "CommLink16InterferenceProtModeEnum.h"
#include "CommLink16MissionInfoWordsType.h"
#include "CommLink16NetSelectionType.h"
#include "CommLink16RangeModeEnum.h"
#include "CommLink16ReceiptComplianceWordsType.h"
#include "CommLink16TransmitAntennaEnum.h"
#include "CommLink16TransmitModeEnum.h"
#include "CommLink16TxPG_Type.h"
#include "CommLink16TxPowerSelectionEnum.h"
#include "CommLink16_PPLI_PoolEnum.h"
#include "FrequencyType.h"
#include "Link16_ParticipationGroupIndexType.h"
#include "Link16_PlatformStrengthType.h"
#include "Link16_TrackNumberType.h"
#include "VisibleString20Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Utilized to perform Link 16 Specific tuning of a communications capability. */
class CommLink16ControlType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CommLink16ControlType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommLink16ControlType.
    */
  static UCI_EXPORT CommLink16ControlType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CommLink16ControlType initializing the data accessed by the new CommLink16ControlType
    * using the data accessed by the specified CommLink16ControlType (cloning).
    *
    * @param accessor The CommLink16ControlType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created CommLink16ControlType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommLink16ControlType.
    */
  static UCI_EXPORT CommLink16ControlType& create(const CommLink16ControlType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CommLink16ControlType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The CommLink16ControlType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CommLink16ControlType& accessor);

  /** Returns this accessor's type constant, i.e. commLink16ControlType.
    *
    * @return This accessor's type constant, i.e. commLink16ControlType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commLink16ControlType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CommLink16ControlType.
    *
    * @return The version that was initialized from the uci:version attribute of CommLink16ControlType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.000.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CommLink16ControlType& accessor) = 0;

  /** Contains the Advanced Slot Notification for both modes. Indicates Advanced Slot Notification (ASN) Mode Selection
    * (MS) of Mode A (1) or Mode B (0), ASN Enabled (1) or Disabled (0) and the ASN Slot Selection (0..31, the default is
    * 7). [Occurrences: Minimum: 0; Maximum: 2]
    */
  typedef uci::base::BoundedList<uci::type::CommLink16AdvancedSlotNotificationType, uci::type::accessorType::commLink16AdvancedSlotNotificationType> AdvancedSlotNotificationMode;

  /** The Delay Reduction Participation Group (PG) Index Number specifies which message or messages are subject to Delay
    * Reduction. List sizing based on MIDS Network Terminal Standardization. [Occurrences: Minimum: 0; Maximum: 3]
    */
  typedef uci::base::BoundedList<uci::type::CommLink16DelayReductionType, uci::type::accessorType::commLink16DelayReductionType> DelayReduction;

  /** The Initial Entry Message send 10 words in Bit Words 580-589. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::base::IntAccessor, uci::base::accessorType::intAccessor> InitialEntryWords;

  /** Used to set / identify the net selection per PG Index. List sizing based on MIDS Network Terminal Standardization.
    * [Occurrences: Minimum: 0; Maximum: 8]
    */
  typedef uci::base::BoundedList<uci::type::CommLink16NetSelectionType, uci::type::accessorType::commLink16NetSelectionType> NetSelectionStatus;

  /** Up to 15 Secondary TNs used for forwarding. One location is reserved for the Net Manager Indicator. List sizing based
    * on MIDS Network Terminal Standardization. [Occurrences: Minimum: 0; Maximum: 16]
    */
  typedef uci::base::BoundedList<uci::type::Link16_TrackNumberType, uci::type::accessorType::link16_TrackNumberType> SecondarySourceTrackNumber;

  /** Allows the host to set a specific power level, packing limit, antenna configuration, staleness, and storage limit for
    * a specific PG. List sizing based on MIDS Network Terminal Standardization. [Occurrences: Minimum: 0; Maximum: 10]
    */
  typedef uci::base::BoundedList<uci::type::CommLink16TxPG_Type, uci::type::accessorType::commLink16TxPG_Type> TransmitPG_Slots;

  /** Used to indicate whether the terminal will perform receipt compliance (R/C) processing on an original message
    * provided by the Host. List sizing based on MIDS Network Terminal Standardization. [Occurrences: Minimum: 0; Maximum:
    * 3]
    */
  typedef uci::base::BoundedList<uci::type::CommLink16ReceiptComplianceWordsType, uci::type::accessorType::commLink16ReceiptComplianceWordsType> ReceiptComplianceProcessingWords;

  /** Returns a const reference to the bounded list identified by AdvancedSlotNotificationMode.
    *
    * @return A const reference to the bounded list identified by AdvancedSlotNotificationMode.
    */
  virtual const uci::type::CommLink16ControlType::AdvancedSlotNotificationMode& getAdvancedSlotNotificationMode() const = 0;

  /** Returns a reference to the bounded list identified by AdvancedSlotNotificationMode.
    *
    * @return A reference to the bounded list identified by AdvancedSlotNotificationMode.
    */
  virtual uci::type::CommLink16ControlType::AdvancedSlotNotificationMode& getAdvancedSlotNotificationMode() = 0;

  /** Sets the bounded list identified by AdvancedSlotNotificationMode.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setAdvancedSlotNotificationMode(const uci::type::CommLink16ControlType::AdvancedSlotNotificationMode& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by DataReductionPG_Index.
    *
    * @return The value of the simple primitive data type identified by DataReductionPG_Index.
    */
  virtual uci::type::Link16_ParticipationGroupIndexTypeValue getDataReductionPG_Index() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DataReductionPG_Index.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setDataReductionPG_Index(uci::type::Link16_ParticipationGroupIndexTypeValue value) = 0;

  /** Returns whether the Element identified by DataReductionPG_Index exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DataReductionPG_Index is enabled or not.
    */
  virtual bool hasDataReductionPG_Index() const = 0;

  /** Clears (disabled) the Element identified by DataReductionPG_Index.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearDataReductionPG_Index() = 0;

  /** Returns a const reference to the bounded list identified by DelayReduction.
    *
    * @return A const reference to the bounded list identified by DelayReduction.
    */
  virtual const uci::type::CommLink16ControlType::DelayReduction& getDelayReduction() const = 0;

  /** Returns a reference to the bounded list identified by DelayReduction.
    *
    * @return A reference to the bounded list identified by DelayReduction.
    */
  virtual uci::type::CommLink16ControlType::DelayReduction& getDelayReduction() = 0;

  /** Sets the bounded list identified by DelayReduction.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setDelayReduction(const uci::type::CommLink16ControlType::DelayReduction& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by EnhancedThroughputCodeRate.
    *
    * @return A const reference to the value of the enumeration identified by EnhancedThroughputCodeRate.
    */
  virtual const uci::type::CommLink16EnhancedThroughputCodeRateEnum& getEnhancedThroughputCodeRate() const = 0;

  /** Returns a reference to the value of the enumeration identified by EnhancedThroughputCodeRate.
    *
    * @return A reference to the value of the enumeration identified by EnhancedThroughputCodeRate.
    */
  virtual uci::type::CommLink16EnhancedThroughputCodeRateEnum& getEnhancedThroughputCodeRate() = 0;

  /** Sets the value of the enumeration identified by EnhancedThroughputCodeRate.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setEnhancedThroughputCodeRate(const uci::type::CommLink16EnhancedThroughputCodeRateEnum& value) = 0;

  /** Sets the value of the enumeration identified by EnhancedThroughputCodeRate.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setEnhancedThroughputCodeRate(uci::type::CommLink16EnhancedThroughputCodeRateEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by EnhancedThroughputCodeRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EnhancedThroughputCodeRate is enabled or not.
    */
  virtual bool hasEnhancedThroughputCodeRate() const = 0;

  /** Enables the Element identified by EnhancedThroughputCodeRate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by EnhancedThroughputCodeRate.
    */
  virtual uci::type::CommLink16EnhancedThroughputCodeRateEnum& enableEnhancedThroughputCodeRate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EnhancedThroughputCodeRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearEnhancedThroughputCodeRate() = 0;

  /** Returns a const reference to the value of the enumeration identified by InitialEntryGroup.
    *
    * @return A const reference to the value of the enumeration identified by InitialEntryGroup.
    */
  virtual const uci::type::CommLink16InitialEntryGroupEnum& getInitialEntryGroup() const = 0;

  /** Returns a reference to the value of the enumeration identified by InitialEntryGroup.
    *
    * @return A reference to the value of the enumeration identified by InitialEntryGroup.
    */
  virtual uci::type::CommLink16InitialEntryGroupEnum& getInitialEntryGroup() = 0;

  /** Sets the value of the enumeration identified by InitialEntryGroup.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setInitialEntryGroup(const uci::type::CommLink16InitialEntryGroupEnum& value) = 0;

  /** Sets the value of the enumeration identified by InitialEntryGroup.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setInitialEntryGroup(uci::type::CommLink16InitialEntryGroupEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by InitialEntryGroup exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InitialEntryGroup is enabled or not.
    */
  virtual bool hasInitialEntryGroup() const = 0;

  /** Enables the Element identified by InitialEntryGroup.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by InitialEntryGroup.
    */
  virtual uci::type::CommLink16InitialEntryGroupEnum& enableInitialEntryGroup(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by InitialEntryGroup.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearInitialEntryGroup() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * InitialEntryMessageAssignment.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      InitialEntryMessageAssignment.
    */
  virtual const uci::type::CommLink16InitialEntryMessageType& getInitialEntryMessageAssignment() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * InitialEntryMessageAssignment.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      InitialEntryMessageAssignment.
    */
  virtual uci::type::CommLink16InitialEntryMessageType& getInitialEntryMessageAssignment() = 0;

  /** Sets the complex content identified by InitialEntryMessageAssignment to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by InitialEntryMessageAssignment.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setInitialEntryMessageAssignment(const uci::type::CommLink16InitialEntryMessageType& value) = 0;

  /** Returns whether the Element identified by InitialEntryMessageAssignment exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InitialEntryMessageAssignment is enabled or not.
    */
  virtual bool hasInitialEntryMessageAssignment() const = 0;

  /** Enables the Element identified by InitialEntryMessageAssignment.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      InitialEntryMessageAssignment.
    */
  virtual uci::type::CommLink16InitialEntryMessageType& enableInitialEntryMessageAssignment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by InitialEntryMessageAssignment.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearInitialEntryMessageAssignment() = 0;

  /** Returns a const reference to the bounded list identified by InitialEntryWords.
    *
    * @return A const reference to the bounded list identified by InitialEntryWords.
    */
  virtual const uci::type::CommLink16ControlType::InitialEntryWords& getInitialEntryWords() const = 0;

  /** Returns a reference to the bounded list identified by InitialEntryWords.
    *
    * @return A reference to the bounded list identified by InitialEntryWords.
    */
  virtual uci::type::CommLink16ControlType::InitialEntryWords& getInitialEntryWords() = 0;

  /** Sets the bounded list identified by InitialEntryWords.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setInitialEntryWords(const uci::type::CommLink16ControlType::InitialEntryWords& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by InitializationActivityIndicator.
    *
    * @return The value of the simple primitive data type identified by InitializationActivityIndicator.
    */
  virtual xs::Boolean getInitializationActivityIndicator() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InitializationActivityIndicator.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setInitializationActivityIndicator(xs::Boolean value) = 0;

  /** Returns whether the Element identified by InitializationActivityIndicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InitializationActivityIndicator is enabled or not.
    */
  virtual bool hasInitializationActivityIndicator() const = 0;

  /** Clears (disabled) the Element identified by InitializationActivityIndicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearInitializationActivityIndicator() = 0;

  /** Returns the value of the SimplePrimitive data type identified by InitializationIndexNumber.
    *
    * @return The value of the simple primitive data type identified by InitializationIndexNumber.
    */
  virtual xs::UnsignedByte getInitializationIndexNumber() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InitializationIndexNumber.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setInitializationIndexNumber(xs::UnsignedByte value) = 0;

  /** Returns whether the Element identified by InitializationIndexNumber exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InitializationIndexNumber is enabled or not.
    */
  virtual bool hasInitializationIndexNumber() const = 0;

  /** Clears (disabled) the Element identified by InitializationIndexNumber.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearInitializationIndexNumber() = 0;

  /** Returns a const reference to the value of the enumeration identified by InterferenceProtectionMode.
    *
    * @return A const reference to the value of the enumeration identified by InterferenceProtectionMode.
    */
  virtual const uci::type::CommLink16InterferenceProtModeEnum& getInterferenceProtectionMode() const = 0;

  /** Returns a reference to the value of the enumeration identified by InterferenceProtectionMode.
    *
    * @return A reference to the value of the enumeration identified by InterferenceProtectionMode.
    */
  virtual uci::type::CommLink16InterferenceProtModeEnum& getInterferenceProtectionMode() = 0;

  /** Sets the value of the enumeration identified by InterferenceProtectionMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setInterferenceProtectionMode(const uci::type::CommLink16InterferenceProtModeEnum& value) = 0;

  /** Sets the value of the enumeration identified by InterferenceProtectionMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setInterferenceProtectionMode(uci::type::CommLink16InterferenceProtModeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by InterferenceProtectionMode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InterferenceProtectionMode is enabled or not.
    */
  virtual bool hasInterferenceProtectionMode() const = 0;

  /** Enables the Element identified by InterferenceProtectionMode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by InterferenceProtectionMode.
    */
  virtual uci::type::CommLink16InterferenceProtModeEnum& enableInterferenceProtectionMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by InterferenceProtectionMode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearInterferenceProtectionMode() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * MissionInformationWords.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      MissionInformationWords.
    */
  virtual const uci::type::CommLink16MissionInfoWordsType& getMissionInformationWords() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * MissionInformationWords.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      MissionInformationWords.
    */
  virtual uci::type::CommLink16MissionInfoWordsType& getMissionInformationWords() = 0;

  /** Sets the complex content identified by MissionInformationWords to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MissionInformationWords.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setMissionInformationWords(const uci::type::CommLink16MissionInfoWordsType& value) = 0;

  /** Returns whether the Element identified by MissionInformationWords exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MissionInformationWords is enabled or not.
    */
  virtual bool hasMissionInformationWords() const = 0;

  /** Enables the Element identified by MissionInformationWords.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      MissionInformationWords.
    */
  virtual uci::type::CommLink16MissionInfoWordsType& enableMissionInformationWords(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MissionInformationWords.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearMissionInformationWords() = 0;

  /** Returns a const reference to the bounded list identified by NetSelectionStatus.
    *
    * @return A const reference to the bounded list identified by NetSelectionStatus.
    */
  virtual const uci::type::CommLink16ControlType::NetSelectionStatus& getNetSelectionStatus() const = 0;

  /** Returns a reference to the bounded list identified by NetSelectionStatus.
    *
    * @return A reference to the bounded list identified by NetSelectionStatus.
    */
  virtual uci::type::CommLink16ControlType::NetSelectionStatus& getNetSelectionStatus() = 0;

  /** Sets the bounded list identified by NetSelectionStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setNetSelectionStatus(const uci::type::CommLink16ControlType::NetSelectionStatus& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by NetEntryTxEnable.
    *
    * @return The value of the simple primitive data type identified by NetEntryTxEnable.
    */
  virtual xs::Boolean getNetEntryTxEnable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by NetEntryTxEnable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setNetEntryTxEnable(xs::Boolean value) = 0;

  /** Returns whether the Element identified by NetEntryTxEnable exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NetEntryTxEnable is enabled or not.
    */
  virtual bool hasNetEntryTxEnable() const = 0;

  /** Clears (disabled) the Element identified by NetEntryTxEnable.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearNetEntryTxEnable() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PlatformStrength.
    *
    * @return The value of the simple primitive data type identified by PlatformStrength.
    */
  virtual uci::type::Link16_PlatformStrengthTypeValue getPlatformStrength() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PlatformStrength.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setPlatformStrength(uci::type::Link16_PlatformStrengthTypeValue value) = 0;

  /** Returns whether the Element identified by PlatformStrength exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PlatformStrength is enabled or not.
    */
  virtual bool hasPlatformStrength() const = 0;

  /** Clears (disabled) the Element identified by PlatformStrength.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearPlatformStrength() = 0;

  /** Returns a const reference to the value of the enumeration identified by PPLI_Pool.
    *
    * @return A const reference to the value of the enumeration identified by PPLI_Pool.
    */
  virtual const uci::type::CommLink16_PPLI_PoolEnum& getPPLI_Pool() const = 0;

  /** Returns a reference to the value of the enumeration identified by PPLI_Pool.
    *
    * @return A reference to the value of the enumeration identified by PPLI_Pool.
    */
  virtual uci::type::CommLink16_PPLI_PoolEnum& getPPLI_Pool() = 0;

  /** Sets the value of the enumeration identified by PPLI_Pool.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setPPLI_Pool(const uci::type::CommLink16_PPLI_PoolEnum& value) = 0;

  /** Sets the value of the enumeration identified by PPLI_Pool.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setPPLI_Pool(uci::type::CommLink16_PPLI_PoolEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by PPLI_Pool exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PPLI_Pool is enabled or not.
    */
  virtual bool hasPPLI_Pool() const = 0;

  /** Enables the Element identified by PPLI_Pool.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by PPLI_Pool.
    */
  virtual uci::type::CommLink16_PPLI_PoolEnum& enablePPLI_Pool(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PPLI_Pool.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearPPLI_Pool() = 0;

  /** Returns a const reference to the value of the enumeration identified by RangeMode.
    *
    * @return A const reference to the value of the enumeration identified by RangeMode.
    */
  virtual const uci::type::CommLink16RangeModeEnum& getRangeMode() const = 0;

  /** Returns a reference to the value of the enumeration identified by RangeMode.
    *
    * @return A reference to the value of the enumeration identified by RangeMode.
    */
  virtual uci::type::CommLink16RangeModeEnum& getRangeMode() = 0;

  /** Sets the value of the enumeration identified by RangeMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setRangeMode(const uci::type::CommLink16RangeModeEnum& value) = 0;

  /** Sets the value of the enumeration identified by RangeMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setRangeMode(uci::type::CommLink16RangeModeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by RangeMode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RangeMode is enabled or not.
    */
  virtual bool hasRangeMode() const = 0;

  /** Enables the Element identified by RangeMode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by RangeMode.
    */
  virtual uci::type::CommLink16RangeModeEnum& enableRangeMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RangeMode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearRangeMode() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RouteEstPG_Index.
    *
    * @return The value of the simple primitive data type identified by RouteEstPG_Index.
    */
  virtual uci::type::Link16_ParticipationGroupIndexTypeValue getRouteEstPG_Index() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RouteEstPG_Index.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setRouteEstPG_Index(uci::type::Link16_ParticipationGroupIndexTypeValue value) = 0;

  /** Returns whether the Element identified by RouteEstPG_Index exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RouteEstPG_Index is enabled or not.
    */
  virtual bool hasRouteEstPG_Index() const = 0;

  /** Clears (disabled) the Element identified by RouteEstPG_Index.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearRouteEstPG_Index() = 0;

  /** Returns a const reference to the bounded list identified by SecondarySourceTrackNumber.
    *
    * @return A const reference to the bounded list identified by SecondarySourceTrackNumber.
    */
  virtual const uci::type::CommLink16ControlType::SecondarySourceTrackNumber& getSecondarySourceTrackNumber() const = 0;

  /** Returns a reference to the bounded list identified by SecondarySourceTrackNumber.
    *
    * @return A reference to the bounded list identified by SecondarySourceTrackNumber.
    */
  virtual uci::type::CommLink16ControlType::SecondarySourceTrackNumber& getSecondarySourceTrackNumber() = 0;

  /** Sets the bounded list identified by SecondarySourceTrackNumber.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setSecondarySourceTrackNumber(const uci::type::CommLink16ControlType::SecondarySourceTrackNumber& value) = 0;

  /** Returns a const reference to the bounded list identified by TransmitPG_Slots.
    *
    * @return A const reference to the bounded list identified by TransmitPG_Slots.
    */
  virtual const uci::type::CommLink16ControlType::TransmitPG_Slots& getTransmitPG_Slots() const = 0;

  /** Returns a reference to the bounded list identified by TransmitPG_Slots.
    *
    * @return A reference to the bounded list identified by TransmitPG_Slots.
    */
  virtual uci::type::CommLink16ControlType::TransmitPG_Slots& getTransmitPG_Slots() = 0;

  /** Sets the bounded list identified by TransmitPG_Slots.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setTransmitPG_Slots(const uci::type::CommLink16ControlType::TransmitPG_Slots& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by TransmitAntenna.
    *
    * @return A const reference to the value of the enumeration identified by TransmitAntenna.
    */
  virtual const uci::type::CommLink16TransmitAntennaEnum& getTransmitAntenna() const = 0;

  /** Returns a reference to the value of the enumeration identified by TransmitAntenna.
    *
    * @return A reference to the value of the enumeration identified by TransmitAntenna.
    */
  virtual uci::type::CommLink16TransmitAntennaEnum& getTransmitAntenna() = 0;

  /** Sets the value of the enumeration identified by TransmitAntenna.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setTransmitAntenna(const uci::type::CommLink16TransmitAntennaEnum& value) = 0;

  /** Sets the value of the enumeration identified by TransmitAntenna.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setTransmitAntenna(uci::type::CommLink16TransmitAntennaEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by TransmitAntenna exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TransmitAntenna is enabled or not.
    */
  virtual bool hasTransmitAntenna() const = 0;

  /** Enables the Element identified by TransmitAntenna.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by TransmitAntenna.
    */
  virtual uci::type::CommLink16TransmitAntennaEnum& enableTransmitAntenna(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TransmitAntenna.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearTransmitAntenna() = 0;

  /** Returns a const reference to the bounded list identified by ReceiptComplianceProcessingWords.
    *
    * @return A const reference to the bounded list identified by ReceiptComplianceProcessingWords.
    */
  virtual const uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords& getReceiptComplianceProcessingWords() const = 0;

  /** Returns a reference to the bounded list identified by ReceiptComplianceProcessingWords.
    *
    * @return A reference to the bounded list identified by ReceiptComplianceProcessingWords.
    */
  virtual uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords& getReceiptComplianceProcessingWords() = 0;

  /** Sets the bounded list identified by ReceiptComplianceProcessingWords.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setReceiptComplianceProcessingWords(const uci::type::CommLink16ControlType::ReceiptComplianceProcessingWords& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ReceiveAntenna.
    *
    * @return A const reference to the value of the enumeration identified by ReceiveAntenna.
    */
  virtual const uci::type::CommLink16TransmitAntennaEnum& getReceiveAntenna() const = 0;

  /** Returns a reference to the value of the enumeration identified by ReceiveAntenna.
    *
    * @return A reference to the value of the enumeration identified by ReceiveAntenna.
    */
  virtual uci::type::CommLink16TransmitAntennaEnum& getReceiveAntenna() = 0;

  /** Sets the value of the enumeration identified by ReceiveAntenna.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setReceiveAntenna(const uci::type::CommLink16TransmitAntennaEnum& value) = 0;

  /** Sets the value of the enumeration identified by ReceiveAntenna.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setReceiveAntenna(uci::type::CommLink16TransmitAntennaEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ReceiveAntenna exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ReceiveAntenna is enabled or not.
    */
  virtual bool hasReceiveAntenna() const = 0;

  /** Enables the Element identified by ReceiveAntenna.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ReceiveAntenna.
    */
  virtual uci::type::CommLink16TransmitAntennaEnum& enableReceiveAntenna(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ReceiveAntenna.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearReceiveAntenna() = 0;

  /** Returns a const reference to the value of the enumeration identified by TransmitPowerSelection.
    *
    * @return A const reference to the value of the enumeration identified by TransmitPowerSelection.
    */
  virtual const uci::type::CommLink16TxPowerSelectionEnum& getTransmitPowerSelection() const = 0;

  /** Returns a reference to the value of the enumeration identified by TransmitPowerSelection.
    *
    * @return A reference to the value of the enumeration identified by TransmitPowerSelection.
    */
  virtual uci::type::CommLink16TxPowerSelectionEnum& getTransmitPowerSelection() = 0;

  /** Sets the value of the enumeration identified by TransmitPowerSelection.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setTransmitPowerSelection(const uci::type::CommLink16TxPowerSelectionEnum& value) = 0;

  /** Sets the value of the enumeration identified by TransmitPowerSelection.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setTransmitPowerSelection(uci::type::CommLink16TxPowerSelectionEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by TransmitPowerSelection exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TransmitPowerSelection is enabled or not.
    */
  virtual bool hasTransmitPowerSelection() const = 0;

  /** Enables the Element identified by TransmitPowerSelection.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by TransmitPowerSelection.
    */
  virtual uci::type::CommLink16TxPowerSelectionEnum& enableTransmitPowerSelection(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TransmitPowerSelection.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearTransmitPowerSelection() = 0;

  /** Returns a const reference to the value of the enumeration identified by TransmitMode.
    *
    * @return A const reference to the value of the enumeration identified by TransmitMode.
    */
  virtual const uci::type::CommLink16TransmitModeEnum& getTransmitMode() const = 0;

  /** Returns a reference to the value of the enumeration identified by TransmitMode.
    *
    * @return A reference to the value of the enumeration identified by TransmitMode.
    */
  virtual uci::type::CommLink16TransmitModeEnum& getTransmitMode() = 0;

  /** Sets the value of the enumeration identified by TransmitMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setTransmitMode(const uci::type::CommLink16TransmitModeEnum& value) = 0;

  /** Sets the value of the enumeration identified by TransmitMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setTransmitMode(uci::type::CommLink16TransmitModeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by TransmitMode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TransmitMode is enabled or not.
    */
  virtual bool hasTransmitMode() const = 0;

  /** Enables the Element identified by TransmitMode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by TransmitMode.
    */
  virtual uci::type::CommLink16TransmitModeEnum& enableTransmitMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TransmitMode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearTransmitMode() = 0;

  /** Returns the value of the SimplePrimitive data type identified by VoiceGroupRate.
    *
    * @return The value of the simple primitive data type identified by VoiceGroupRate.
    */
  virtual uci::type::FrequencyTypeValue getVoiceGroupRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by VoiceGroupRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setVoiceGroupRate(uci::type::FrequencyTypeValue value) = 0;

  /** Returns whether the Element identified by VoiceGroupRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VoiceGroupRate is enabled or not.
    */
  virtual bool hasVoiceGroupRate() const = 0;

  /** Clears (disabled) the Element identified by VoiceGroupRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearVoiceGroupRate() = 0;

  /** Returns the value of the SimplePrimitive data type identified by VoiceGroupCoding.
    *
    * @return The value of the simple primitive data type identified by VoiceGroupCoding.
    */
  virtual xs::Boolean getVoiceGroupCoding() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by VoiceGroupCoding.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setVoiceGroupCoding(xs::Boolean value) = 0;

  /** Returns whether the Element identified by VoiceGroupCoding exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VoiceGroupCoding is enabled or not.
    */
  virtual bool hasVoiceGroupCoding() const = 0;

  /** Clears (disabled) the Element identified by VoiceGroupCoding.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearVoiceGroupCoding() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ForceTellIndicator.
    *
    * @return The value of the simple primitive data type identified by ForceTellIndicator.
    */
  virtual xs::Boolean getForceTellIndicator() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ForceTellIndicator.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setForceTellIndicator(xs::Boolean value) = 0;

  /** Returns whether the Element identified by ForceTellIndicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ForceTellIndicator is enabled or not.
    */
  virtual bool hasForceTellIndicator() const = 0;

  /** Clears (disabled) the Element identified by ForceTellIndicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearForceTellIndicator() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ResetNavKalmanFilter.
    *
    * @return The value of the simple primitive data type identified by ResetNavKalmanFilter.
    */
  virtual xs::Boolean getResetNavKalmanFilter() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ResetNavKalmanFilter.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setResetNavKalmanFilter(xs::Boolean value) = 0;

  /** Returns whether the Element identified by ResetNavKalmanFilter exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ResetNavKalmanFilter is enabled or not.
    */
  virtual bool hasResetNavKalmanFilter() const = 0;

  /** Clears (disabled) the Element identified by ResetNavKalmanFilter.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearResetNavKalmanFilter() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IPF_Reset.
    *
    * @return The value of the simple primitive data type identified by IPF_Reset.
    */
  virtual xs::Boolean getIPF_Reset() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IPF_Reset.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setIPF_Reset(xs::Boolean value) = 0;

  /** Returns whether the Element identified by IPF_Reset exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IPF_Reset is enabled or not.
    */
  virtual bool hasIPF_Reset() const = 0;

  /** Clears (disabled) the Element identified by IPF_Reset.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearIPF_Reset() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by VoiceCallSign.
    *
    * @return A const reference to the accessor that provides access to the string identified by VoiceCallSign.
    */
  virtual const uci::type::VisibleString20Type& getVoiceCallSign() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by VoiceCallSign.
    *
    * @return A reference to the accessor that provides access to the string identified by VoiceCallSign.
    */
  virtual uci::type::VisibleString20Type& getVoiceCallSign() = 0;

  /** Sets the string identified by VoiceCallSign to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by VoiceCallSign.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setVoiceCallSign(const uci::type::VisibleString20Type& value) = 0;

  /** Sets the string identified by VoiceCallSign to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setVoiceCallSign(const std::string& value) = 0;

  /** Sets the string identified by VoiceCallSign to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& setVoiceCallSign(const char* value) = 0;

  /** Returns whether the Element identified by VoiceCallSign exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VoiceCallSign is enabled or not.
    */
  virtual bool hasVoiceCallSign() const = 0;

  /** Enables the Element identified by VoiceCallSign.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by VoiceCallSign.
    */
  virtual uci::type::VisibleString20Type& enableVoiceCallSign(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VoiceCallSign.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommLink16ControlType& clearVoiceCallSign() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CommLink16ControlType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommLink16ControlType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommLink16ControlType to copy from.
    */
  CommLink16ControlType(const CommLink16ControlType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CommLink16ControlType to the contents of the CommLink16ControlType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CommLink16ControlType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this CommLink16ControlType.
    * @return A reference to this CommLink16ControlType.
    */
  CommLink16ControlType& operator=(const CommLink16ControlType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMMLINK16CONTROLTYPE_H

