/** @file FileTypeEnum.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_FILETYPEENUM_H
#define UCI_TYPE_FILETYPEENUM_H

#include <map>
#include <sstream>

#include "uci/base/Accessor.h"
#include "uci/base/export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the content of the file. */
class FileTypeEnum : public virtual uci::base::Accessor {
public:

  /** The following are the enumerated items that comprise this enumeration */
  enum EnumerationItem {

    /** Enumerated item that indicates that the enumeration has not been set */
    enumNotSet,

    /** Indicates the product is Airspace Control Order – MIL-STD-6040 – US Message Text Format (MTF). */
    UCI_ACO,

    /** Indicates the product is Airspace Collection Tasking Data Format. */
    UCI_ACTDF,

    /** Indicates a product containing Airspace Tasking Order – MIL-STD-6040 – US Message Text Format (MTF). */
    UCI_ATO,

    /** Air Tasking Order - Reconnaissance, Surveillance, and Target Acquisition. */
    UCI_RSTA,

    /** Indicates a file that is an output of a built-in-test (BIT). */
    UCI_BIT_REPORT,

    /** Indicates a file that is an output of a calibration. */
    UCI_CALIBRATION_REPORT,

    /** Indicates a file that contains fault records. */
    UCI_FAULT_LOG,

    /** Indicates a file that contains a log of test instrumentation resulting from the TEST_INSTRUMENTATION Subsystem
      * setting. See SubsystemSettingsCommand message for further details.
      */
    UCI_TEST_INSTRUMENTATION_LOG,

    /** Indicates a file that contains a log of data recording resulting from the DATA_RECORDING Subsystem setting. See
      * SubsystemSettingsCommand message for further details.
      */
    UCI_DATA_RECORDING_LOG,

    /** Indicates a file that contains a log of debug data resulting from the DEBUG_REPORTING Subsystem setting. See
      * SubsystemSettingsCommand message for further details.
      */
    UCI_DEBUG_REPORTING_LOG,

    /** Indicates a file that contains a log of SubsystemStream message data resulting from a Subsystem setting. See
      * SubsystemSettingsCommand and SubsystemStream messages for further details.
      */
    UCI_SUBSYSTEM_STREAM_LOG,

    /** Indicates a file that contains data required for a Service, Subsystem, Capability, Component, etc. to learn its
      * identity as a UCI network node. UCI node configuration data is one of several categories of data that may be needed
      * for a given Service, Subsystem, Capability, Component, etc. to reach an operational/available state. Other categories
      * are INITIALIZATION_DATA, MDF and SUBSYSTEM_OFP.
      */
    UCI_UCI_NODE_CONFIGURATION_FILE,

    /** Indicates a file that contains initialization data for a Service, Subsystem, Capability, Component, etc.
      * Initialization data is one of several categories of data that may be needed for a given Service, Subsystem,
      * Capability, Component, etc. to reach an operational/available state. Other categories are
      * UCI_NODE_CONFIGURATION_FILE, MDF and SUBSYSTEM_OFP.
      */
    UCI_INITIALIZATION_DATA,

    /** Indicates a Mission Data File (MDF) for a Service, Subsystem, Capability and/or Component. MDF data is one of several
      * categories of data that may be needed for a given Service, Subsystem, Capability, Component, etc. to reach an
      * operational/available state. Other categories are UCI_NODE_CONFIGURATION_FILE, INITIALIZATION_DATA and SUBSYSTEM_OFP.
      * This can include items such as Common Route Definition (CRD) and Electronic Order of Battle (EOB) files.
      */
    UCI_MDF,

    /** Indicates a file containing a Subsystem Operational Flight Program (OFP). SUBSYSTEM_OFP data is one of several
      * categories of data that may be needed for a given Service, Subsystem, Capability, Component, etc. to reach an
      * operational/available state. Other categories are UCI_NODE_CONFIGURATION_FILE, INITIALIZATION_DATA and MDF.
      */
    UCI_SUBSYSTEM_OFP,

    /** Indicates a file that contains checkpoint data. */
    UCI_CHECKPOINT_FILE,

    /** Indicates a file that contains maintenance log data. */
    UCI_MAINTENANCE_LOG,

    /** Space Operations Directive captures Joint Force Space Component Commander's (JFSCC) guidance and intent. Conveys
      * prioritization and apportionment guidance focused on the applicable execution period.
      */
    UCI_SOD,

    /** Master Space Plan. Allocates resources to each desired effect and serves as the source to generate unit tasking and
      * coordination within the Joint Space Tasking Order (JSTO) and Special Instructions (SPINS).
      */
    UCI_MSP,

    /** Joint Integrated Prioritized Target List. Highest prioritized targets of each component. */
    UCI_JIPTL,

    /** Joint Space Tasking Order. Transmits JFSCC's guidance and priorities for a short-duration time frame, assigns tasks
      * to meet operational objectives, and, when required, synchronizes and integrates JFSCC activities with other Combatant
      * Command (CCMD) operations.
      */
    UCI_JSTO,

    /** Planning Order. Planning directive providing essential planning guidance and directs the initiation of plan
      * development before the directing authority approves a military Course of Action (COA).
      */
    UCI_PLAN_ORD,

    /** Operation Order. Directive issued by a commander to subordinate commanders for the purpose of effecting the
      * coordinated execution of an operation.
      */
    UCI_OP_ORD,

    /** Warning Order. Issued by the Chairman of the Joint Chiefs of Staff (CJCS), is a planning directive that initiates the
      * development and evaluation of military COAs by a supported commander.
      */
    UCI_WARN_ORD,

    /** Deployment Order. Planning directive from SecDef, issued by the CJCS, that authorizes and directs the transfer of
      * forces between CCMDs by reassignment or attachment. A deployment / redeployment order normally specifies the
      * authority that the gaining Combatant Commander (CCDR) will exercise over the transferred forces.
      */
    UCI_DEPLOYMENT_ORD,

    /** Alert Order. Planning directive providing essential planning guidance and directs the initiation of plan development
      * after the directing authority approves a military COA.
      */
    UCI_ALERT_ORD,

    /** Fragmentary Order. Address specific changes to the Operation Order (OPORD) without restating complete OP_ORD. */
    UCI_FRAG_ORD,

    /** Execute Order. Directive to implement an approved military CONOPS. */
    UCI_EX_ORD,

    /** Special Instructions. Provide operational and tactical direction and approved operational procedures. This can
      * include items such as Crew Member Mission Planning Products (CMMPP).
      */
    UCI_SPINS,

    /** Commanders Intent. Succinctly describes what constitutes success for the operation. Includes the operation's purpose,
      * key tasks, and the conditions that define the end state. Links the mission, concept of operations, and tasks to
      * subordinate units.
      */
    UCI_COMMANDERS_INTENT,

    /** Indicates a file that contains orbital debris estimation data. */
    UCI_ORBITAL_DEBRIS,

    /** Computer Aided Design. CAD file is a digital file format of an object generated and used by a CAD software. Each CAD
      * system has its own method of describing geometry, both mathematically and structurally. CAD files hold information
      * for these processes, as well as drafting information.
      */
    UCI_CAD,

    /** Indicates a file that contains constraint scoring data. */
    UCI_CONSTRAINT_SCORE_REPORT,

    /** Indicates a file that contains Shared Aperture Information. */
    UCI_SAIF,

    /** Indicates the content of the file does not fall into any of the other categories. Recommended for restricted use for
      * pending change package proposals or debug purposes.
      */
    UCI_OTHER,

    /** Enumerated item that indicates maximum enumerated item exclusive of this item */
    enumMaxExclusive
  };

  /** Returns this accessor's type constant, i.e. fileTypeEnum.
    *
    * @return This accessor's type constant, i.e. fileTypeEnum.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::fileTypeEnum;
  }

  /** The assignment operator. Sets the contents of this FileTypeEnum to the contents of the FileTypeEnum on the right hand
    * side (rhs) of the assignment operator.
    *
    * @param rhs The FileTypeEnum on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this FileTypeEnum.
    * @return A reference to this FileTypeEnum.
    */
  FileTypeEnum& operator=(const FileTypeEnum& rhs) {
    setValue(rhs.getValue());
    return *this;
  }

  /** The assignment operator that sets the value of this FileTypeEnum enumeration to the EnumerationItem on the right hand
    * side of the assignment operator.
    *
    * @param rhs The EnumerationItem whose value is to be assigned to this FileTypeEnum enumeration.
    * @return A reference to this FileTypeEnum enumeration.
    */
  FileTypeEnum& operator=(EnumerationItem rhs) {
    setValue(rhs);
    return *this;
  }

  /** Sets the value of this FileTypeEnum enumeration to the value of the specified enumeration item.
    *
    * @param item The EnumerationItem whose value is to be used to set the value of this FileTypeEnum enumeration.
    */
  virtual void setValue(EnumerationItem item) = 0;

  /** Returns the value of this FileTypeEnum enumeration.
    *
    * @param testForValidity=true Specifies whether this FileTypeEnum enumeration should be validated (true) or not (false)
    *      as part of retrieving its value.
    * @return The value of this FileTypeEnum enumeration.
    */
  virtual EnumerationItem getValue(bool testForValidity=true) const = 0;

  /** Returns the number of items in this FileTypeEnum enumeration.
    *
    * @return The number of items in this FileTypeEnum enumeration.
    */
  int getNumberOfItems() const noexception {
    return 35;
  }

  /** Returns whether this FileTypeEnum enumeration is valid or not. A FileTypeEnum enumeration is valid if its value is
    * one of the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @return A flag indicating whether this FileTypeEnum enumeration is valid (true) or not (false).
    */
  virtual bool isValid() const noexception {
    return isValid(getValue(false));
  }

  /** Returns whether the specified enumeration item is valid or not. A enumeration item is valid if its value is one of
    * the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @param item The EnumerationItem to test.
    * @return A flag indicating whether the specified EnumerationItem is valid (true) or not (false).
    */
  static bool isValid(EnumerationItem item) noexception {
    return (item > enumNotSet) && (item < enumMaxExclusive);
  }

  /** Returns whether the specified name item is valid or not. A name is valid if it is the name of one of the enumeration
    * items other than enumNotSet and enumMaxExclusive.
    *
    * @param name The name to test.
    * @return A flag indicating whether the specified name is valid (true) or not (false).
    */
  static bool isValid(const std::string& name) noexception {
    FromNameTable::const_iterator iter = m_fromNameTable.find(name);
    return !(iter == m_fromNameTable.end());
  }

  /** Tests whether the value of the FileTypeEnum enumeration on the right hand side of the == operator is equal to the
    * value as this FileTypeEnum enumeration.
    *
    * @param rhs The FileTypeEnum enumeration whose value is to be compared against the value of this FileTypeEnum
    *      enumeration.
    * @return True if the value of the specified FileTypeEnum enumeration (rhs) is equal to the value of this FileTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator==(const FileTypeEnum& rhs) const {
    return getValue() == rhs.getValue();
  }

  /** Tests whether the value of the FileTypeEnum enumeration on the right hand side of the != operator is not equal to the
    * value as this FileTypeEnum enumeration.
    *
    * @param rhs The FileTypeEnum enumeration whose value is to be compared against the value of this FileTypeEnum
    *      enumeration.
    * @return True if the value of the specified FileTypeEnum enumeration (rhs) is not equal to the value of this
    *      FileTypeEnum enumeration, false otherwise.
    */
  bool operator!=(const FileTypeEnum& rhs) const {
    return getValue() != rhs.getValue();
  }

  /** Tests whether the value of the FileTypeEnum enumeration on the right hand side of the < operator is less than the
    * value as this FileTypeEnum enumeration.
    *
    * @param rhs The FileTypeEnum enumeration whose value is to be compared against the value of this FileTypeEnum
    *      enumeration.
    * @return True if the value of the specified FileTypeEnum enumeration (rhs) is less than the value of this FileTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator<(const FileTypeEnum& rhs) const {
    return getValue() < rhs.getValue();
  }

  /** Tests whether the value of the FileTypeEnum enumeration on the right hand side of the <= operator is less than or
    * equal to the value as this FileTypeEnum enumeration.
    *
    * @param rhs The FileTypeEnum enumeration whose value is to be compared against the value of this FileTypeEnum
    *      enumeration.
    * @return True if the value of the specified FileTypeEnum enumeration (rhs) is less than or equal to the value of this
    *      FileTypeEnum enumeration, false otherwise.
    */
  bool operator<=(const FileTypeEnum& rhs) const {
    return getValue() <= rhs.getValue();
  }

  /** Tests whether the value of the FileTypeEnum enumeration on the right hand side of the > operator is greater than the
    * value as this FileTypeEnum enumeration.
    *
    * @param rhs The FileTypeEnum enumeration whose value is to be compared against the value of this FileTypeEnum
    *      enumeration.
    * @return True if the value of the specified FileTypeEnum enumeration (rhs) is greater than the value of this
    *      FileTypeEnum enumeration, false otherwise.
    */
  bool operator>(const FileTypeEnum& rhs) const {
    return getValue() > rhs.getValue();
  }

  /** Tests whether the value of the FileTypeEnum enumeration on the right hand side of the >= operator is greater than or
    * equal to the value as this FileTypeEnum enumeration.
    *
    * @param rhs The FileTypeEnum enumeration whose value is to be compared against the value of this FileTypeEnum
    *      enumeration.
    * @return True if the value of the specified FileTypeEnum enumeration (rhs) is greater than or equal to the value of
    *      this FileTypeEnum enumeration, false otherwise.
    */
  bool operator>=(const FileTypeEnum& rhs) const {
    return getValue() >= rhs.getValue();
  }

  /** Tests whether the value of this FileTypeEnum enumeration is equal to the value of the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this FileTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is equal to the value of this FileTypeEnum enumeration, false
    *      otherwise.
    */
  bool operator==(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() == rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is equal to the value of the specified FileTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified FileTypeEnum
    *      enumeration.
    * @param rhs The FileTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is equal to the value of the FileTypeEnum enumeration (rhs),
    *      false otherwise.
    */
  friend bool operator==(EnumerationItem lhs, const FileTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs == rhs.getValue();
  }

  /** Tests whether the value of this FileTypeEnum enumeration is not equal to the value of the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this FileTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is not equal to the value of this FileTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator!=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() != rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is not equal to the value of the specified FileTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified FileTypeEnum
    *      enumeration.
    * @param rhs The FileTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is not equal to the value of the FileTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator!=(EnumerationItem lhs, const FileTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs != rhs.getValue();
  }

  /** Tests whether the value of this FileTypeEnum enumeration is less than the value of the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this FileTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than the value of this FileTypeEnum enumeration, false
    *      otherwise.
    */
  bool operator<(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() < rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than the value of the specified FileTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified FileTypeEnum
    *      enumeration.
    * @param rhs The FileTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than the value of the FileTypeEnum enumeration (rhs),
    *      false otherwise.
    */
  friend bool operator<(EnumerationItem lhs, const FileTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs < rhs.getValue();
  }

  /** Tests whether the value of this FileTypeEnum enumeration is less than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this FileTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than or equal to the value of this FileTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator<=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() <= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than or equal to the value of the specified
    * FileTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified FileTypeEnum
    *      enumeration.
    * @param rhs The FileTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than or equal to the value of the FileTypeEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator<=(EnumerationItem lhs, const FileTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs <= rhs.getValue();
  }

  /** Tests whether the value of this FileTypeEnum enumeration is greater than the value of the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this FileTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than the value of this FileTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator>(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() > rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than the value of the specified FileTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified FileTypeEnum
    *      enumeration.
    * @param rhs The FileTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than the value of the FileTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator>(EnumerationItem lhs, const FileTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs > rhs.getValue();
  }

  /** Tests whether the value of this FileTypeEnum enumeration is greater than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this FileTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than or equal to the value of this FileTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator>=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() >= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than or equal to the value of the specified
    * FileTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified FileTypeEnum
    *      enumeration.
    * @param rhs The FileTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than or equal to the value of the FileTypeEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator>=(EnumerationItem lhs, const FileTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs >= rhs.getValue();
  }

  /** Returns the name of the specified enumeration item.
    *
    * @param item The enumeration item whose name is to be returned.
    * @return The enumeration item's name if valid.
    */
  static std::string toName(EnumerationItem item) {
    ToNameTable::const_iterator iter = m_toNameTable.find(item);
    if (iter == m_toNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to convert enumerated item to its name, item not found in mapping: " << item;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Returns the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item to be returned.
    * @return The enumeration item having the specified name.
    */
  static EnumerationItem fromName(const std::string& itemName) {
    FromNameTable::const_iterator iter = m_fromNameTable.find(itemName);
    if (iter == m_fromNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to return enumerated item having specified name, name not found in mapping: " << itemName;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Return the name of the enumeration item that the value of this FileTypeEnum enumeration is set to.
    *
    * @return The name of the enumeration item.
    */
  virtual std::string toName() const {
    return toName(getValue());
  }

  /** Sets the value of this FileTypeEnum enumeration to the value of the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item whose value is to be used to set this FileTypeEnum enumeration to.
    */
  virtual void setValueFromName(const std::string& itemName) {
    setValue(fromName(itemName));
  }

protected:

  /** The default constructor. In addition to constructing a new FileTypeEnum, this constructor also makes sure the
    * conversion tables are initialized.
    */
  FileTypeEnum() {
  }

  /** The destructor [only available to derived classes]. */
  ~FileTypeEnum() {
  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param additionalDescription An additional description to include in the error message should an exception be thrown.
    * @param item The enumeration item to test.
    */
  static void testForValidItem(const char* additionalDescription, EnumerationItem item) {
    if (!isValid(item)) {
      std::ostringstream oStream;
      oStream << additionalDescription << ": " << item << " (item must be between " << enumNotSet << " and "<< enumMaxExclusive << " exclusive)";
      throw uci::base::UCIException(oStream.str(), 0);
    }

  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param item The enumeration item to test.
    */
  static void testForValidItem(EnumerationItem item) {
    testForValidItem("Invalid enumerated item specified", item);
  }

private:

  /** The type of table that is used to lookup the name of a enumeration item given that enumeration item. */
  typedef std::map<EnumerationItem, const std::string> ToNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  typedef std::map<const std::string, EnumerationItem> FromNameTable;

  /** The table that is used to lookup the name of a enumeration item given that enumeration item. */
  static UCI_EXPORT ToNameTable m_toNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  static UCI_EXPORT FromNameTable m_fromNameTable;

protected:

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The FileTypeEnum to copy from.
    */
  FileTypeEnum(const FileTypeEnum& rhs) {
    (void)rhs;
  }

};

} // namespace type
} // namespace uci

template<typename charT, typename traits>
std::basic_ostream<charT, traits>&
operator<<(std::basic_ostream<charT, traits>& oStream, const uci::type::FileTypeEnum& enumeration)
{
  oStream << enumeration.toName();
  return oStream;
}

#endif // UCI_TYPE_FILETYPEENUM_H

