/** @file MissionContingencyConditionType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_MISSIONCONTINGENCYCONDITIONTYPE_H
#define UCI_TYPE_MISSIONCONTINGENCYCONDITIONTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AutonomousActionStatusChoiceType.h"
#include "ConflictStateEnum.h"
#include "ConflictType.h"
#include "OperatorRecommendationType.h"
#include "PlanningTriggerType.h"
#include "SystemID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class MissionContingencyConditionType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new MissionContingencyConditionType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MissionContingencyConditionType.
    */
  static UCI_EXPORT MissionContingencyConditionType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new MissionContingencyConditionType initializing the data accessed by the new
    * MissionContingencyConditionType using the data accessed by the specified MissionContingencyConditionType (cloning).
    *
    * @param accessor The MissionContingencyConditionType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created MissionContingencyConditionType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MissionContingencyConditionType.
    */
  static UCI_EXPORT MissionContingencyConditionType& create(const MissionContingencyConditionType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified MissionContingencyConditionType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The MissionContingencyConditionType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(MissionContingencyConditionType& accessor);

  /** Returns this accessor's type constant, i.e. missionContingencyConditionType.
    *
    * @return This accessor's type constant, i.e. missionContingencyConditionType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::missionContingencyConditionType;
  }

  /** Returns the version that was initialized from the uci:version attribute of MissionContingencyConditionType.
    *
    * @return The version that was initialized from the uci:version attribute of MissionContingencyConditionType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const MissionContingencyConditionType& accessor) = 0;

  /** This element provides details of the contingency condition. Most elements within are optional because of the many
    * different cases that this element is intended to represent. However, the requirements for describing a conflict are
    * the following: 1. ConflictingObject is required if known. 2. AffectedRequirements are required if and only if it is
    * known that a task can no longer be performed. 3. ConflictLocation primarily applies to route conflicts. This data is
    * primarily for operator SA. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ConflictType, uci::type::accessorType::conflictType> Conflict;

  /** This element can be provided when autonomy settings dictate that autonomous correction of a problem is not allowed or
    * when a system does not have autonomous contingency correction capability. Multiple instances allow a series of
    * actions to be specified to address the contingency condition. Order is implied by the order in which elements are
    * included in the message. For example, to resolve a contingency associated with a failed Capability, the series of
    * actions might be: 0. Drop Tasks 1. Reallocate Dropped Tasks. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OperatorRecommendationType, uci::type::accessorType::operatorRecommendationType> OperatorRecommendation;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ConflictedSystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ConflictedSystemID.
    */
  virtual const uci::type::SystemID_Type& getConflictedSystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ConflictedSystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ConflictedSystemID.
    */
  virtual uci::type::SystemID_Type& getConflictedSystemID() = 0;

  /** Sets the complex content identified by ConflictedSystemID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ConflictedSystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionContingencyConditionType& setConflictedSystemID(const uci::type::SystemID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ConflictState.
    *
    * @return A const reference to the value of the enumeration identified by ConflictState.
    */
  virtual const uci::type::ConflictStateEnum& getConflictState() const = 0;

  /** Returns a reference to the value of the enumeration identified by ConflictState.
    *
    * @return A reference to the value of the enumeration identified by ConflictState.
    */
  virtual uci::type::ConflictStateEnum& getConflictState() = 0;

  /** Sets the value of the enumeration identified by ConflictState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionContingencyConditionType& setConflictState(const uci::type::ConflictStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by ConflictState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionContingencyConditionType& setConflictState(uci::type::ConflictStateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by Conflict.
    *
    * @return A const reference to the bounded list identified by Conflict.
    */
  virtual const uci::type::MissionContingencyConditionType::Conflict& getConflict() const = 0;

  /** Returns a reference to the bounded list identified by Conflict.
    *
    * @return A reference to the bounded list identified by Conflict.
    */
  virtual uci::type::MissionContingencyConditionType::Conflict& getConflict() = 0;

  /** Sets the bounded list identified by Conflict.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionContingencyConditionType& setConflict(const uci::type::MissionContingencyConditionType::Conflict& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Trigger.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Trigger.
    */
  virtual const uci::type::PlanningTriggerType& getTrigger() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Trigger.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Trigger.
    */
  virtual uci::type::PlanningTriggerType& getTrigger() = 0;

  /** Sets the complex content identified by Trigger to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Trigger.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionContingencyConditionType& setTrigger(const uci::type::PlanningTriggerType& value) = 0;

  /** Returns whether the Element identified by Trigger exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Trigger is enabled or not.
    */
  virtual bool hasTrigger() const = 0;

  /** Enables the Element identified by Trigger.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Trigger.
    */
  virtual uci::type::PlanningTriggerType& enableTrigger(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Trigger.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionContingencyConditionType& clearTrigger() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AutonomousActionStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AutonomousActionStatus.
    */
  virtual const uci::type::AutonomousActionStatusChoiceType& getAutonomousActionStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AutonomousActionStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AutonomousActionStatus.
    */
  virtual uci::type::AutonomousActionStatusChoiceType& getAutonomousActionStatus() = 0;

  /** Sets the complex content identified by AutonomousActionStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AutonomousActionStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionContingencyConditionType& setAutonomousActionStatus(const uci::type::AutonomousActionStatusChoiceType& value) = 0;

  /** Returns whether the Element identified by AutonomousActionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AutonomousActionStatus is enabled or not.
    */
  virtual bool hasAutonomousActionStatus() const = 0;

  /** Enables the Element identified by AutonomousActionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AutonomousActionStatus.
    */
  virtual uci::type::AutonomousActionStatusChoiceType& enableAutonomousActionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AutonomousActionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionContingencyConditionType& clearAutonomousActionStatus() = 0;

  /** Returns a const reference to the bounded list identified by OperatorRecommendation.
    *
    * @return A const reference to the bounded list identified by OperatorRecommendation.
    */
  virtual const uci::type::MissionContingencyConditionType::OperatorRecommendation& getOperatorRecommendation() const = 0;

  /** Returns a reference to the bounded list identified by OperatorRecommendation.
    *
    * @return A reference to the bounded list identified by OperatorRecommendation.
    */
  virtual uci::type::MissionContingencyConditionType::OperatorRecommendation& getOperatorRecommendation() = 0;

  /** Sets the bounded list identified by OperatorRecommendation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionContingencyConditionType& setOperatorRecommendation(const uci::type::MissionContingencyConditionType::OperatorRecommendation& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  MissionContingencyConditionType() {
  }

  /** The destructor [only available to derived classes]. */
  ~MissionContingencyConditionType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The MissionContingencyConditionType to copy from.
    */
  MissionContingencyConditionType(const MissionContingencyConditionType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this MissionContingencyConditionType to the contents of the
    * MissionContingencyConditionType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The MissionContingencyConditionType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this MissionContingencyConditionType.
    * @return A reference to this MissionContingencyConditionType.
    */
  MissionContingencyConditionType& operator=(const MissionContingencyConditionType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_MISSIONCONTINGENCYCONDITIONTYPE_H

