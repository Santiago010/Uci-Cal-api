/** @file COMINT_CapabilityOptionsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMINT_CAPABILITYOPTIONSTYPE_H
#define UCI_TYPE_COMINT_CAPABILITYOPTIONSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/IntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/MIME_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class COMINT_CapabilityOptionsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new COMINT_CapabilityOptionsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed COMINT_CapabilityOptionsType.
    */
  static UCI_EXPORT COMINT_CapabilityOptionsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new COMINT_CapabilityOptionsType initializing the data accessed by the new
    * COMINT_CapabilityOptionsType using the data accessed by the specified COMINT_CapabilityOptionsType (cloning).
    *
    * @param accessor The COMINT_CapabilityOptionsType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created COMINT_CapabilityOptionsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed COMINT_CapabilityOptionsType.
    */
  static UCI_EXPORT COMINT_CapabilityOptionsType& create(const COMINT_CapabilityOptionsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified COMINT_CapabilityOptionsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The COMINT_CapabilityOptionsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(COMINT_CapabilityOptionsType& accessor);

  /** Returns this accessor's type constant, i.e. cOMINT_CapabilityOptionsType.
    *
    * @return This accessor's type constant, i.e. cOMINT_CapabilityOptionsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::cOMINT_CapabilityOptionsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of COMINT_CapabilityOptionsType.
    *
    * @return The version that was initialized from the uci:version attribute of COMINT_CapabilityOptionsType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const COMINT_CapabilityOptionsType& accessor) = 0;

  /** This indicates what formats are used by the subsystem when outputting audio data. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::MIME_Type, uci::type::accessorType::mIME_Type> AudioFormats;

  /** This indicates what data compression types are used by the subsystem when outputting audio data. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType> CompressionType;

  /** Returns the value of the SimplePrimitive data type identified by InterruptOtherActivities.
    *
    * @return The value of the simple primitive data type identified by InterruptOtherActivities.
    */
  virtual xs::Boolean getInterruptOtherActivities() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InterruptOtherActivities.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_CapabilityOptionsType& setInterruptOtherActivities(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by NumberOfChannels.
    *
    * @return The value of the simple primitive data type identified by NumberOfChannels.
    */
  virtual xs::Int getNumberOfChannels() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by NumberOfChannels.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_CapabilityOptionsType& setNumberOfChannels(xs::Int value) = 0;

  /** Returns whether the Element identified by NumberOfChannels exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NumberOfChannels is enabled or not.
    */
  virtual bool hasNumberOfChannels() const = 0;

  /** Clears (disabled) the Element identified by NumberOfChannels.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_CapabilityOptionsType& clearNumberOfChannels() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AGC_Supported.
    *
    * @return The value of the simple primitive data type identified by AGC_Supported.
    */
  virtual xs::Boolean getAGC_Supported() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AGC_Supported.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_CapabilityOptionsType& setAGC_Supported(xs::Boolean value) = 0;

  /** Returns whether the Element identified by AGC_Supported exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AGC_Supported is enabled or not.
    */
  virtual bool hasAGC_Supported() const = 0;

  /** Clears (disabled) the Element identified by AGC_Supported.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_CapabilityOptionsType& clearAGC_Supported() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ArchiveAvailable.
    *
    * @return The value of the simple primitive data type identified by ArchiveAvailable.
    */
  virtual xs::Boolean getArchiveAvailable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ArchiveAvailable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_CapabilityOptionsType& setArchiveAvailable(xs::Boolean value) = 0;

  /** Returns whether the Element identified by ArchiveAvailable exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ArchiveAvailable is enabled or not.
    */
  virtual bool hasArchiveAvailable() const = 0;

  /** Clears (disabled) the Element identified by ArchiveAvailable.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_CapabilityOptionsType& clearArchiveAvailable() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CapabilityDependencyID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CapabilityDependencyID.
    */
  virtual const uci::type::CapabilityID_Type& getCapabilityDependencyID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CapabilityDependencyID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityDependencyID.
    */
  virtual uci::type::CapabilityID_Type& getCapabilityDependencyID() = 0;

  /** Sets the complex content identified by CapabilityDependencyID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CapabilityDependencyID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_CapabilityOptionsType& setCapabilityDependencyID(const uci::type::CapabilityID_Type& value) = 0;

  /** Returns whether the Element identified by CapabilityDependencyID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CapabilityDependencyID is enabled or not.
    */
  virtual bool hasCapabilityDependencyID() const = 0;

  /** Enables the Element identified by CapabilityDependencyID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityDependencyID.
    */
  virtual uci::type::CapabilityID_Type& enableCapabilityDependencyID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CapabilityDependencyID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_CapabilityOptionsType& clearCapabilityDependencyID() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ScanSupport.
    *
    * @return The value of the simple primitive data type identified by ScanSupport.
    */
  virtual xs::Boolean getScanSupport() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ScanSupport.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_CapabilityOptionsType& setScanSupport(xs::Boolean value) = 0;

  /** Returns whether the Element identified by ScanSupport exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ScanSupport is enabled or not.
    */
  virtual bool hasScanSupport() const = 0;

  /** Clears (disabled) the Element identified by ScanSupport.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_CapabilityOptionsType& clearScanSupport() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SupportedModes.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SupportedModes.
    */
  virtual const uci::type::ForeignKeyType& getSupportedModes() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SupportedModes.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SupportedModes.
    */
  virtual uci::type::ForeignKeyType& getSupportedModes() = 0;

  /** Sets the complex content identified by SupportedModes to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SupportedModes.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_CapabilityOptionsType& setSupportedModes(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by SupportedModes exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SupportedModes is enabled or not.
    */
  virtual bool hasSupportedModes() const = 0;

  /** Enables the Element identified by SupportedModes.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SupportedModes.
    */
  virtual uci::type::ForeignKeyType& enableSupportedModes(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SupportedModes.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_CapabilityOptionsType& clearSupportedModes() = 0;

  /** Returns a const reference to the bounded list identified by AudioFormats.
    *
    * @return A const reference to the bounded list identified by AudioFormats.
    */
  virtual const uci::type::COMINT_CapabilityOptionsType::AudioFormats& getAudioFormats() const = 0;

  /** Returns a reference to the bounded list identified by AudioFormats.
    *
    * @return A reference to the bounded list identified by AudioFormats.
    */
  virtual uci::type::COMINT_CapabilityOptionsType::AudioFormats& getAudioFormats() = 0;

  /** Sets the bounded list identified by AudioFormats.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_CapabilityOptionsType& setAudioFormats(const uci::type::COMINT_CapabilityOptionsType::AudioFormats& value) = 0;

  /** Returns a const reference to the bounded list identified by CompressionType.
    *
    * @return A const reference to the bounded list identified by CompressionType.
    */
  virtual const uci::type::COMINT_CapabilityOptionsType::CompressionType& getCompressionType() const = 0;

  /** Returns a reference to the bounded list identified by CompressionType.
    *
    * @return A reference to the bounded list identified by CompressionType.
    */
  virtual uci::type::COMINT_CapabilityOptionsType::CompressionType& getCompressionType() = 0;

  /** Sets the bounded list identified by CompressionType.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_CapabilityOptionsType& setCompressionType(const uci::type::COMINT_CapabilityOptionsType::CompressionType& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  COMINT_CapabilityOptionsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~COMINT_CapabilityOptionsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The COMINT_CapabilityOptionsType to copy from.
    */
  COMINT_CapabilityOptionsType(const COMINT_CapabilityOptionsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this COMINT_CapabilityOptionsType to the contents of the
    * COMINT_CapabilityOptionsType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The COMINT_CapabilityOptionsType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this COMINT_CapabilityOptionsType.
    * @return A reference to this COMINT_CapabilityOptionsType.
    */
  COMINT_CapabilityOptionsType& operator=(const COMINT_CapabilityOptionsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMINT_CAPABILITYOPTIONSTYPE_H

