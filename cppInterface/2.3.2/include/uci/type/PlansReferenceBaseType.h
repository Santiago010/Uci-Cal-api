/** @file PlansReferenceBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLANSREFERENCEBASETYPE_H
#define UCI_TYPE_PLANSREFERENCEBASETYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ActionPlanID_Type.h"
#include "ActivityPlanID_Type.h"
#include "EffectPlanID_Type.h"
#include "OrbitActivityPlanID_Type.h"
#include "OrbitPlanID_Type.h"
#include "ResponsePlanID_Type.h"
#include "RouteActivityPlanID_Type.h"
#include "RoutePlanID_Type.h"
#include "TaskPlanID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PlansReferenceBaseType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PlansReferenceBaseType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlansReferenceBaseType.
    */
  static UCI_EXPORT PlansReferenceBaseType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlansReferenceBaseType initializing the data accessed by the new PlansReferenceBaseType
    * using the data accessed by the specified PlansReferenceBaseType (cloning).
    *
    * @param accessor The PlansReferenceBaseType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PlansReferenceBaseType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlansReferenceBaseType.
    */
  static UCI_EXPORT PlansReferenceBaseType& create(const PlansReferenceBaseType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlansReferenceBaseType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The PlansReferenceBaseType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlansReferenceBaseType& accessor);

  /** Returns this accessor's type constant, i.e. plansReferenceBaseType.
    *
    * @return This accessor's type constant, i.e. plansReferenceBaseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::plansReferenceBaseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlansReferenceBaseType.
    *
    * @return The version that was initialized from the uci:version attribute of PlansReferenceBaseType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlansReferenceBaseType& accessor) = 0;

  /** Indicates a reference to a TaskPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::TaskPlanID_Type, uci::type::accessorType::taskPlanID_Type> TaskPlanID;

  /** Indicates a reference to an OrbitPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::OrbitPlanID_Type, uci::type::accessorType::orbitPlanID_Type> OrbitPlanID;

  /** Indicates a reference to an OrbitActivityPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::OrbitActivityPlanID_Type, uci::type::accessorType::orbitActivityPlanID_Type> OrbitActivityPlanID;

  /** Indicates a reference to a RoutePlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::RoutePlanID_Type, uci::type::accessorType::routePlanID_Type> RoutePlanID;

  /** Indicates a reference to a RouteActivityPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::RouteActivityPlanID_Type, uci::type::accessorType::routeActivityPlanID_Type> RouteActivityPlanID;

  /** Indicates a reference to an ActivityPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::ActivityPlanID_Type, uci::type::accessorType::activityPlanID_Type> ActivityPlanID;

  /** Indicates a reference to an EffectPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::EffectPlanID_Type, uci::type::accessorType::effectPlanID_Type> EffectPlanID;

  /** Indicates a reference to an ActionPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::ActionPlanID_Type, uci::type::accessorType::actionPlanID_Type> ActionPlanID;

  /** Indicates a reference to an ResponsePlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::ResponsePlanID_Type, uci::type::accessorType::responsePlanID_Type> ResponsePlanID;

  /** Returns a const reference to the bounded list identified by TaskPlanID.
    *
    * @return A const reference to the bounded list identified by TaskPlanID.
    */
  virtual const uci::type::PlansReferenceBaseType::TaskPlanID& getTaskPlanID() const = 0;

  /** Returns a reference to the bounded list identified by TaskPlanID.
    *
    * @return A reference to the bounded list identified by TaskPlanID.
    */
  virtual uci::type::PlansReferenceBaseType::TaskPlanID& getTaskPlanID() = 0;

  /** Sets the bounded list identified by TaskPlanID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlansReferenceBaseType& setTaskPlanID(const uci::type::PlansReferenceBaseType::TaskPlanID& value) = 0;

  /** Returns a const reference to the bounded list identified by OrbitPlanID.
    *
    * @return A const reference to the bounded list identified by OrbitPlanID.
    */
  virtual const uci::type::PlansReferenceBaseType::OrbitPlanID& getOrbitPlanID() const = 0;

  /** Returns a reference to the bounded list identified by OrbitPlanID.
    *
    * @return A reference to the bounded list identified by OrbitPlanID.
    */
  virtual uci::type::PlansReferenceBaseType::OrbitPlanID& getOrbitPlanID() = 0;

  /** Sets the bounded list identified by OrbitPlanID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlansReferenceBaseType& setOrbitPlanID(const uci::type::PlansReferenceBaseType::OrbitPlanID& value) = 0;

  /** Returns a const reference to the bounded list identified by OrbitActivityPlanID.
    *
    * @return A const reference to the bounded list identified by OrbitActivityPlanID.
    */
  virtual const uci::type::PlansReferenceBaseType::OrbitActivityPlanID& getOrbitActivityPlanID() const = 0;

  /** Returns a reference to the bounded list identified by OrbitActivityPlanID.
    *
    * @return A reference to the bounded list identified by OrbitActivityPlanID.
    */
  virtual uci::type::PlansReferenceBaseType::OrbitActivityPlanID& getOrbitActivityPlanID() = 0;

  /** Sets the bounded list identified by OrbitActivityPlanID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlansReferenceBaseType& setOrbitActivityPlanID(const uci::type::PlansReferenceBaseType::OrbitActivityPlanID& value) = 0;

  /** Returns a const reference to the bounded list identified by RoutePlanID.
    *
    * @return A const reference to the bounded list identified by RoutePlanID.
    */
  virtual const uci::type::PlansReferenceBaseType::RoutePlanID& getRoutePlanID() const = 0;

  /** Returns a reference to the bounded list identified by RoutePlanID.
    *
    * @return A reference to the bounded list identified by RoutePlanID.
    */
  virtual uci::type::PlansReferenceBaseType::RoutePlanID& getRoutePlanID() = 0;

  /** Sets the bounded list identified by RoutePlanID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlansReferenceBaseType& setRoutePlanID(const uci::type::PlansReferenceBaseType::RoutePlanID& value) = 0;

  /** Returns a const reference to the bounded list identified by RouteActivityPlanID.
    *
    * @return A const reference to the bounded list identified by RouteActivityPlanID.
    */
  virtual const uci::type::PlansReferenceBaseType::RouteActivityPlanID& getRouteActivityPlanID() const = 0;

  /** Returns a reference to the bounded list identified by RouteActivityPlanID.
    *
    * @return A reference to the bounded list identified by RouteActivityPlanID.
    */
  virtual uci::type::PlansReferenceBaseType::RouteActivityPlanID& getRouteActivityPlanID() = 0;

  /** Sets the bounded list identified by RouteActivityPlanID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlansReferenceBaseType& setRouteActivityPlanID(const uci::type::PlansReferenceBaseType::RouteActivityPlanID& value) = 0;

  /** Returns a const reference to the bounded list identified by ActivityPlanID.
    *
    * @return A const reference to the bounded list identified by ActivityPlanID.
    */
  virtual const uci::type::PlansReferenceBaseType::ActivityPlanID& getActivityPlanID() const = 0;

  /** Returns a reference to the bounded list identified by ActivityPlanID.
    *
    * @return A reference to the bounded list identified by ActivityPlanID.
    */
  virtual uci::type::PlansReferenceBaseType::ActivityPlanID& getActivityPlanID() = 0;

  /** Sets the bounded list identified by ActivityPlanID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlansReferenceBaseType& setActivityPlanID(const uci::type::PlansReferenceBaseType::ActivityPlanID& value) = 0;

  /** Returns a const reference to the bounded list identified by EffectPlanID.
    *
    * @return A const reference to the bounded list identified by EffectPlanID.
    */
  virtual const uci::type::PlansReferenceBaseType::EffectPlanID& getEffectPlanID() const = 0;

  /** Returns a reference to the bounded list identified by EffectPlanID.
    *
    * @return A reference to the bounded list identified by EffectPlanID.
    */
  virtual uci::type::PlansReferenceBaseType::EffectPlanID& getEffectPlanID() = 0;

  /** Sets the bounded list identified by EffectPlanID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlansReferenceBaseType& setEffectPlanID(const uci::type::PlansReferenceBaseType::EffectPlanID& value) = 0;

  /** Returns a const reference to the bounded list identified by ActionPlanID.
    *
    * @return A const reference to the bounded list identified by ActionPlanID.
    */
  virtual const uci::type::PlansReferenceBaseType::ActionPlanID& getActionPlanID() const = 0;

  /** Returns a reference to the bounded list identified by ActionPlanID.
    *
    * @return A reference to the bounded list identified by ActionPlanID.
    */
  virtual uci::type::PlansReferenceBaseType::ActionPlanID& getActionPlanID() = 0;

  /** Sets the bounded list identified by ActionPlanID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlansReferenceBaseType& setActionPlanID(const uci::type::PlansReferenceBaseType::ActionPlanID& value) = 0;

  /** Returns a const reference to the bounded list identified by ResponsePlanID.
    *
    * @return A const reference to the bounded list identified by ResponsePlanID.
    */
  virtual const uci::type::PlansReferenceBaseType::ResponsePlanID& getResponsePlanID() const = 0;

  /** Returns a reference to the bounded list identified by ResponsePlanID.
    *
    * @return A reference to the bounded list identified by ResponsePlanID.
    */
  virtual uci::type::PlansReferenceBaseType::ResponsePlanID& getResponsePlanID() = 0;

  /** Sets the bounded list identified by ResponsePlanID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlansReferenceBaseType& setResponsePlanID(const uci::type::PlansReferenceBaseType::ResponsePlanID& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlansReferenceBaseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlansReferenceBaseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlansReferenceBaseType to copy from.
    */
  PlansReferenceBaseType(const PlansReferenceBaseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlansReferenceBaseType to the contents of the
    * PlansReferenceBaseType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PlansReferenceBaseType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this PlansReferenceBaseType.
    * @return A reference to this PlansReferenceBaseType.
    */
  PlansReferenceBaseType& operator=(const PlansReferenceBaseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLANSREFERENCEBASETYPE_H

