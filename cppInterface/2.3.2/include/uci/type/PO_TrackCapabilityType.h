/** @file PO_TrackCapabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_TRACKCAPABILITYTYPE_H
#define UCI_TYPE_PO_TRACKCAPABILITYTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/DoubleMinMaxType.h"
#include "uci/type/DurationRangeType.h"
#include "uci/type/IdentityBasicType.h"
#include "uci/type/PO_CoastSettingOptionsType.h"
#include "uci/type/PO_OffsetTrackSettingsType.h"
#include "uci/type/PO_TrackCapabilityTypeEnum.h"
#include "uci/type/TrackOptionsID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Allowable range of values for track parameters that can be used to customize target detections. */
class PO_TrackCapabilityType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PO_TrackCapabilityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_TrackCapabilityType.
    */
  static UCI_EXPORT PO_TrackCapabilityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_TrackCapabilityType initializing the data accessed by the new PO_TrackCapabilityType
    * using the data accessed by the specified PO_TrackCapabilityType (cloning).
    *
    * @param accessor The PO_TrackCapabilityType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PO_TrackCapabilityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_TrackCapabilityType.
    */
  static UCI_EXPORT PO_TrackCapabilityType& create(const PO_TrackCapabilityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_TrackCapabilityType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The PO_TrackCapabilityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_TrackCapabilityType& accessor);

  /** Returns this accessor's type constant, i.e. pO_TrackCapabilityType.
    *
    * @return This accessor's type constant, i.e. pO_TrackCapabilityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_TrackCapabilityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PO_TrackCapabilityType.
    *
    * @return The version that was initialized from the uci:version attribute of PO_TrackCapabilityType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_TrackCapabilityType& accessor) = 0;

  /** These are the additional features that the PO_Command can support and are not specifically settable (i.e., not
    * available in PO_SettingsCommand). List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 3]
    */
  typedef uci::base::BoundedList<uci::type::PO_TrackCapabilityTypeEnum, uci::type::accessorType::pO_TrackCapabilityTypeEnum> TrackControlOptions;

  /** This is the allowed range of coast time settings associated with an environment setting for coasting a track before
    * dropping it. List size is based on allowing one per environment option available. [Occurrences: Minimum: 0; Maximum:
    * 6]
    */
  typedef uci::base::BoundedList<uci::type::PO_CoastSettingOptionsType, uci::type::accessorType::pO_CoastSettingOptionsType> CoastSettingOptions;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TrackOptionID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TrackOptionID.
    */
  virtual const uci::type::TrackOptionsID_Type& getTrackOptionID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TrackOptionID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TrackOptionID.
    */
  virtual uci::type::TrackOptionsID_Type& getTrackOptionID() = 0;

  /** Sets the complex content identified by TrackOptionID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TrackOptionID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackCapabilityType& setTrackOptionID(const uci::type::TrackOptionsID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by TrackControlOptions.
    *
    * @return A const reference to the bounded list identified by TrackControlOptions.
    */
  virtual const uci::type::PO_TrackCapabilityType::TrackControlOptions& getTrackControlOptions() const = 0;

  /** Returns a reference to the bounded list identified by TrackControlOptions.
    *
    * @return A reference to the bounded list identified by TrackControlOptions.
    */
  virtual uci::type::PO_TrackCapabilityType::TrackControlOptions& getTrackControlOptions() = 0;

  /** Sets the bounded list identified by TrackControlOptions.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackCapabilityType& setTrackControlOptions(const uci::type::PO_TrackCapabilityType::TrackControlOptions& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ATR_Filter.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ATR_Filter.
    */
  virtual const uci::type::IdentityBasicType& getATR_Filter() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ATR_Filter.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ATR_Filter.
    */
  virtual uci::type::IdentityBasicType& getATR_Filter() = 0;

  /** Sets the complex content identified by ATR_Filter to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ATR_Filter.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackCapabilityType& setATR_Filter(const uci::type::IdentityBasicType& value) = 0;

  /** Returns whether the Element identified by ATR_Filter exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ATR_Filter is enabled or not.
    */
  virtual bool hasATR_Filter() const = 0;

  /** Enables the Element identified by ATR_Filter.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ATR_Filter.
    */
  virtual uci::type::IdentityBasicType& enableATR_Filter(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ATR_Filter.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackCapabilityType& clearATR_Filter() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OffsetTrackSettings.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OffsetTrackSettings.
    */
  virtual const uci::type::PO_OffsetTrackSettingsType& getOffsetTrackSettings() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OffsetTrackSettings.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OffsetTrackSettings.
    */
  virtual uci::type::PO_OffsetTrackSettingsType& getOffsetTrackSettings() = 0;

  /** Sets the complex content identified by OffsetTrackSettings to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OffsetTrackSettings.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackCapabilityType& setOffsetTrackSettings(const uci::type::PO_OffsetTrackSettingsType& value) = 0;

  /** Returns whether the Element identified by OffsetTrackSettings exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OffsetTrackSettings is enabled or not.
    */
  virtual bool hasOffsetTrackSettings() const = 0;

  /** Enables the Element identified by OffsetTrackSettings.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OffsetTrackSettings.
    */
  virtual uci::type::PO_OffsetTrackSettingsType& enableOffsetTrackSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OffsetTrackSettings.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackCapabilityType& clearOffsetTrackSettings() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ObservedEntityThresholdSettings.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ObservedEntityThresholdSettings.
    */
  virtual const uci::type::DurationRangeType& getObservedEntityThresholdSettings() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ObservedEntityThresholdSettings.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ObservedEntityThresholdSettings.
    */
  virtual uci::type::DurationRangeType& getObservedEntityThresholdSettings() = 0;

  /** Sets the complex content identified by ObservedEntityThresholdSettings to the contents of the complex content
    * accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ObservedEntityThresholdSettings.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackCapabilityType& setObservedEntityThresholdSettings(const uci::type::DurationRangeType& value) = 0;

  /** Returns whether the Element identified by ObservedEntityThresholdSettings exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ObservedEntityThresholdSettings is enabled or not.
    */
  virtual bool hasObservedEntityThresholdSettings() const = 0;

  /** Enables the Element identified by ObservedEntityThresholdSettings.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ObservedEntityThresholdSettings.
    */
  virtual uci::type::DurationRangeType& enableObservedEntityThresholdSettings(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ObservedEntityThresholdSettings.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackCapabilityType& clearObservedEntityThresholdSettings() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TrackingRange.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TrackingRange.
    */
  virtual const uci::type::DoubleMinMaxType& getTrackingRange() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TrackingRange.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TrackingRange.
    */
  virtual uci::type::DoubleMinMaxType& getTrackingRange() = 0;

  /** Sets the complex content identified by TrackingRange to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TrackingRange.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackCapabilityType& setTrackingRange(const uci::type::DoubleMinMaxType& value) = 0;

  /** Returns whether the Element identified by TrackingRange exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TrackingRange is enabled or not.
    */
  virtual bool hasTrackingRange() const = 0;

  /** Enables the Element identified by TrackingRange.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TrackingRange.
    */
  virtual uci::type::DoubleMinMaxType& enableTrackingRange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TrackingRange.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackCapabilityType& clearTrackingRange() = 0;

  /** Returns a const reference to the bounded list identified by CoastSettingOptions.
    *
    * @return A const reference to the bounded list identified by CoastSettingOptions.
    */
  virtual const uci::type::PO_TrackCapabilityType::CoastSettingOptions& getCoastSettingOptions() const = 0;

  /** Returns a reference to the bounded list identified by CoastSettingOptions.
    *
    * @return A reference to the bounded list identified by CoastSettingOptions.
    */
  virtual uci::type::PO_TrackCapabilityType::CoastSettingOptions& getCoastSettingOptions() = 0;

  /** Sets the bounded list identified by CoastSettingOptions.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackCapabilityType& setCoastSettingOptions(const uci::type::PO_TrackCapabilityType::CoastSettingOptions& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by BlankingVolumeSupported.
    *
    * @return The value of the simple primitive data type identified by BlankingVolumeSupported.
    */
  virtual xs::Boolean getBlankingVolumeSupported() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by BlankingVolumeSupported.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackCapabilityType& setBlankingVolumeSupported(xs::Boolean value) = 0;

  /** Returns whether the Element identified by BlankingVolumeSupported exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by BlankingVolumeSupported is enabled or not.
    */
  virtual bool hasBlankingVolumeSupported() const = 0;

  /** Clears (disabled) the Element identified by BlankingVolumeSupported.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_TrackCapabilityType& clearBlankingVolumeSupported() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_TrackCapabilityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_TrackCapabilityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_TrackCapabilityType to copy from.
    */
  PO_TrackCapabilityType(const PO_TrackCapabilityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_TrackCapabilityType to the contents of the
    * PO_TrackCapabilityType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PO_TrackCapabilityType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this PO_TrackCapabilityType.
    * @return A reference to this PO_TrackCapabilityType.
    */
  PO_TrackCapabilityType& operator=(const PO_TrackCapabilityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_TRACKCAPABILITYTYPE_H

