/** @file PO_SubCapabilitySettingsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PO_SUBCAPABILITYSETTINGSTYPE_H
#define UCI_TYPE_PO_SUBCAPABILITYSETTINGSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/PO_TechniqueSettingType.h"
#include "uci/type/SubCapabilityID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates an installed PO high-level SubCapability which adds an additional level of granularity to complete the
  * mission using PO commands and tasks.
  */
class PO_SubCapabilitySettingsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PO_SubCapabilitySettingsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_SubCapabilitySettingsType.
    */
  static UCI_EXPORT PO_SubCapabilitySettingsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PO_SubCapabilitySettingsType initializing the data accessed by the new
    * PO_SubCapabilitySettingsType using the data accessed by the specified PO_SubCapabilitySettingsType (cloning).
    *
    * @param accessor The PO_SubCapabilitySettingsType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created PO_SubCapabilitySettingsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PO_SubCapabilitySettingsType.
    */
  static UCI_EXPORT PO_SubCapabilitySettingsType& create(const PO_SubCapabilitySettingsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PO_SubCapabilitySettingsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The PO_SubCapabilitySettingsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PO_SubCapabilitySettingsType& accessor);

  /** Returns this accessor's type constant, i.e. pO_SubCapabilitySettingsType.
    *
    * @return This accessor's type constant, i.e. pO_SubCapabilitySettingsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::pO_SubCapabilitySettingsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PO_SubCapabilitySettingsType.
    *
    * @return The version that was initialized from the uci:version attribute of PO_SubCapabilitySettingsType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PO_SubCapabilitySettingsType& accessor) = 0;

  /** Indicates the passive optical technique for tracking and search algorithm purposes. The technique setting is used to
    * identify the technique type with the enumeration and any possible setting value associated with it with the optional
    * fields. [Occurrences: Minimum: 0; Maximum: 17]
    */
  typedef uci::base::BoundedList<uci::type::PO_TechniqueSettingType, uci::type::accessorType::pO_TechniqueSettingType> TechniqueSettings;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SubCapabilityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SubCapabilityID.
    */
  virtual const uci::type::SubCapabilityID_Type& getSubCapabilityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SubCapabilityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SubCapabilityID.
    */
  virtual uci::type::SubCapabilityID_Type& getSubCapabilityID() = 0;

  /** Sets the complex content identified by SubCapabilityID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SubCapabilityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_SubCapabilitySettingsType& setSubCapabilityID(const uci::type::SubCapabilityID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by TechniqueSettings.
    *
    * @return A const reference to the bounded list identified by TechniqueSettings.
    */
  virtual const uci::type::PO_SubCapabilitySettingsType::TechniqueSettings& getTechniqueSettings() const = 0;

  /** Returns a reference to the bounded list identified by TechniqueSettings.
    *
    * @return A reference to the bounded list identified by TechniqueSettings.
    */
  virtual uci::type::PO_SubCapabilitySettingsType::TechniqueSettings& getTechniqueSettings() = 0;

  /** Sets the bounded list identified by TechniqueSettings.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PO_SubCapabilitySettingsType& setTechniqueSettings(const uci::type::PO_SubCapabilitySettingsType::TechniqueSettings& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PO_SubCapabilitySettingsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PO_SubCapabilitySettingsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PO_SubCapabilitySettingsType to copy from.
    */
  PO_SubCapabilitySettingsType(const PO_SubCapabilitySettingsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PO_SubCapabilitySettingsType to the contents of the
    * PO_SubCapabilitySettingsType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The PO_SubCapabilitySettingsType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this PO_SubCapabilitySettingsType.
    * @return A reference to this PO_SubCapabilitySettingsType.
    */
  PO_SubCapabilitySettingsType& operator=(const PO_SubCapabilitySettingsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PO_SUBCAPABILITYSETTINGSTYPE_H

