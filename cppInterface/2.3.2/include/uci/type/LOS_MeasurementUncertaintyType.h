/** @file LOS_MeasurementUncertaintyType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_LOS_MEASUREMENTUNCERTAINTYTYPE_H
#define UCI_TYPE_LOS_MEASUREMENTUNCERTAINTYTYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "ArrivalDataUncertaintyType.h"
#include "ConeAngleSlantRangeUncertaintyType.h"
#include "ConeAngleUncertaintyType.h"
#include "LOS_SlantRangeUncertaintyType.h"
#include "LOS_VarianceAndCovarianceType.h"
#include "SlantRangeUncertaintyType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The uncertainty in the Line of Sight (LOS) measurements. See annotations in child elements and messages/elements for
  * more details.
  */
class LOS_MeasurementUncertaintyType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new LOS_MeasurementUncertaintyType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed LOS_MeasurementUncertaintyType.
    */
  static UCI_EXPORT LOS_MeasurementUncertaintyType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new LOS_MeasurementUncertaintyType initializing the data accessed by the new
    * LOS_MeasurementUncertaintyType using the data accessed by the specified LOS_MeasurementUncertaintyType (cloning).
    *
    * @param accessor The LOS_MeasurementUncertaintyType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created LOS_MeasurementUncertaintyType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed LOS_MeasurementUncertaintyType.
    */
  static UCI_EXPORT LOS_MeasurementUncertaintyType& create(const LOS_MeasurementUncertaintyType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified LOS_MeasurementUncertaintyType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The LOS_MeasurementUncertaintyType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(LOS_MeasurementUncertaintyType& accessor);

  /** Returns this accessor's type constant, i.e. lOS_MeasurementUncertaintyType.
    *
    * @return This accessor's type constant, i.e. lOS_MeasurementUncertaintyType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::lOS_MeasurementUncertaintyType;
  }

  /** Returns the version that was initialized from the uci:version attribute of LOS_MeasurementUncertaintyType.
    *
    * @return The version that was initialized from the uci:version attribute of LOS_MeasurementUncertaintyType.
    */
  static std::string getUCITypeVersion() {
    return "000.002.000.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const LOS_MeasurementUncertaintyType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by LOS_Uncertainty.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by LOS_Uncertainty.
    */
  virtual const uci::type::LOS_VarianceAndCovarianceType& getLOS_Uncertainty() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LOS_Uncertainty.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LOS_Uncertainty.
    */
  virtual uci::type::LOS_VarianceAndCovarianceType& getLOS_Uncertainty() = 0;

  /** Sets the complex content identified by LOS_Uncertainty to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LOS_Uncertainty.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LOS_MeasurementUncertaintyType& setLOS_Uncertainty(const uci::type::LOS_VarianceAndCovarianceType& value) = 0;

  /** Returns whether the Element identified by LOS_Uncertainty exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LOS_Uncertainty is enabled or not.
    */
  virtual bool hasLOS_Uncertainty() const = 0;

  /** Enables the Element identified by LOS_Uncertainty.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by LOS_Uncertainty.
    */
  virtual uci::type::LOS_VarianceAndCovarianceType& enableLOS_Uncertainty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LOS_Uncertainty.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LOS_MeasurementUncertaintyType& clearLOS_Uncertainty() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ConeAngleUncertainty.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ConeAngleUncertainty.
    */
  virtual const uci::type::ConeAngleUncertaintyType& getConeAngleUncertainty() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ConeAngleUncertainty.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ConeAngleUncertainty.
    */
  virtual uci::type::ConeAngleUncertaintyType& getConeAngleUncertainty() = 0;

  /** Sets the complex content identified by ConeAngleUncertainty to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ConeAngleUncertainty.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LOS_MeasurementUncertaintyType& setConeAngleUncertainty(const uci::type::ConeAngleUncertaintyType& value) = 0;

  /** Returns whether the Element identified by ConeAngleUncertainty exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConeAngleUncertainty is enabled or not.
    */
  virtual bool hasConeAngleUncertainty() const = 0;

  /** Enables the Element identified by ConeAngleUncertainty.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ConeAngleUncertainty.
    */
  virtual uci::type::ConeAngleUncertaintyType& enableConeAngleUncertainty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ConeAngleUncertainty.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LOS_MeasurementUncertaintyType& clearConeAngleUncertainty() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ArrivalDataUncertainty.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ArrivalDataUncertainty.
    */
  virtual const uci::type::ArrivalDataUncertaintyType& getArrivalDataUncertainty() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ArrivalDataUncertainty.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ArrivalDataUncertainty.
    */
  virtual uci::type::ArrivalDataUncertaintyType& getArrivalDataUncertainty() = 0;

  /** Sets the complex content identified by ArrivalDataUncertainty to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ArrivalDataUncertainty.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LOS_MeasurementUncertaintyType& setArrivalDataUncertainty(const uci::type::ArrivalDataUncertaintyType& value) = 0;

  /** Returns whether the Element identified by ArrivalDataUncertainty exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ArrivalDataUncertainty is enabled or not.
    */
  virtual bool hasArrivalDataUncertainty() const = 0;

  /** Enables the Element identified by ArrivalDataUncertainty.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ArrivalDataUncertainty.
    */
  virtual uci::type::ArrivalDataUncertaintyType& enableArrivalDataUncertainty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ArrivalDataUncertainty.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LOS_MeasurementUncertaintyType& clearArrivalDataUncertainty() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SlantRangeUncertainty.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SlantRangeUncertainty.
    */
  virtual const uci::type::SlantRangeUncertaintyType& getSlantRangeUncertainty() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SlantRangeUncertainty.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SlantRangeUncertainty.
    */
  virtual uci::type::SlantRangeUncertaintyType& getSlantRangeUncertainty() = 0;

  /** Sets the complex content identified by SlantRangeUncertainty to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SlantRangeUncertainty.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LOS_MeasurementUncertaintyType& setSlantRangeUncertainty(const uci::type::SlantRangeUncertaintyType& value) = 0;

  /** Returns whether the Element identified by SlantRangeUncertainty exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SlantRangeUncertainty is enabled or not.
    */
  virtual bool hasSlantRangeUncertainty() const = 0;

  /** Enables the Element identified by SlantRangeUncertainty.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SlantRangeUncertainty.
    */
  virtual uci::type::SlantRangeUncertaintyType& enableSlantRangeUncertainty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SlantRangeUncertainty.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LOS_MeasurementUncertaintyType& clearSlantRangeUncertainty() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ConeAngleSlantRangeUncertainty.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ConeAngleSlantRangeUncertainty.
    */
  virtual const uci::type::ConeAngleSlantRangeUncertaintyType& getConeAngleSlantRangeUncertainty() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ConeAngleSlantRangeUncertainty.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ConeAngleSlantRangeUncertainty.
    */
  virtual uci::type::ConeAngleSlantRangeUncertaintyType& getConeAngleSlantRangeUncertainty() = 0;

  /** Sets the complex content identified by ConeAngleSlantRangeUncertainty to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ConeAngleSlantRangeUncertainty.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LOS_MeasurementUncertaintyType& setConeAngleSlantRangeUncertainty(const uci::type::ConeAngleSlantRangeUncertaintyType& value) = 0;

  /** Returns whether the Element identified by ConeAngleSlantRangeUncertainty exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConeAngleSlantRangeUncertainty is enabled or not.
    */
  virtual bool hasConeAngleSlantRangeUncertainty() const = 0;

  /** Enables the Element identified by ConeAngleSlantRangeUncertainty.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ConeAngleSlantRangeUncertainty.
    */
  virtual uci::type::ConeAngleSlantRangeUncertaintyType& enableConeAngleSlantRangeUncertainty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ConeAngleSlantRangeUncertainty.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LOS_MeasurementUncertaintyType& clearConeAngleSlantRangeUncertainty() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * LOS_SlantRangeUncertainty.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      LOS_SlantRangeUncertainty.
    */
  virtual const uci::type::LOS_SlantRangeUncertaintyType& getLOS_SlantRangeUncertainty() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * LOS_SlantRangeUncertainty.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      LOS_SlantRangeUncertainty.
    */
  virtual uci::type::LOS_SlantRangeUncertaintyType& getLOS_SlantRangeUncertainty() = 0;

  /** Sets the complex content identified by LOS_SlantRangeUncertainty to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LOS_SlantRangeUncertainty.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LOS_MeasurementUncertaintyType& setLOS_SlantRangeUncertainty(const uci::type::LOS_SlantRangeUncertaintyType& value) = 0;

  /** Returns whether the Element identified by LOS_SlantRangeUncertainty exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LOS_SlantRangeUncertainty is enabled or not.
    */
  virtual bool hasLOS_SlantRangeUncertainty() const = 0;

  /** Enables the Element identified by LOS_SlantRangeUncertainty.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      LOS_SlantRangeUncertainty.
    */
  virtual uci::type::LOS_SlantRangeUncertaintyType& enableLOS_SlantRangeUncertainty(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LOS_SlantRangeUncertainty.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LOS_MeasurementUncertaintyType& clearLOS_SlantRangeUncertainty() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  LOS_MeasurementUncertaintyType() {
  }

  /** The destructor [only available to derived classes]. */
  ~LOS_MeasurementUncertaintyType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The LOS_MeasurementUncertaintyType to copy from.
    */
  LOS_MeasurementUncertaintyType(const LOS_MeasurementUncertaintyType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this LOS_MeasurementUncertaintyType to the contents of the
    * LOS_MeasurementUncertaintyType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The LOS_MeasurementUncertaintyType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this LOS_MeasurementUncertaintyType.
    * @return A reference to this LOS_MeasurementUncertaintyType.
    */
  LOS_MeasurementUncertaintyType& operator=(const LOS_MeasurementUncertaintyType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_LOS_MEASUREMENTUNCERTAINTYTYPE_H

