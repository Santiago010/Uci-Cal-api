/** @file LineDataStatusType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_LINEDATASTATUSTYPE_H
#define UCI_TYPE_LINEDATASTATUSTYPE_H

#include "../base/DoubleAccessor.h"
#include "../base/export.h"
#include "ComponentDetailedStatusType.h"
#include "ComponentPressureType.h"
#include "ComponentTemperatureType.h"
#include "EmptyType.h"
#include "VisibleString64Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the state of the line data within the pump by providing pressure, temperature, flow rate, and/or flow
  * direction.
  */
class LineDataStatusType : public virtual ComponentDetailedStatusType {
public:

  /** This method constructs a new LineDataStatusType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed LineDataStatusType.
    */
  static UCI_EXPORT LineDataStatusType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new LineDataStatusType initializing the data accessed by the new LineDataStatusType using
    * the data accessed by the specified LineDataStatusType (cloning).
    *
    * @param accessor The LineDataStatusType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created LineDataStatusType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed LineDataStatusType.
    */
  static UCI_EXPORT LineDataStatusType& create(const LineDataStatusType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified LineDataStatusType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The LineDataStatusType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(LineDataStatusType& accessor);

  /** Returns this accessor's type constant, i.e. lineDataStatusType.
    *
    * @return This accessor's type constant, i.e. lineDataStatusType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::lineDataStatusType;
  }

  /** Returns the version that was initialized from the uci:version attribute of LineDataStatusType.
    *
    * @return The version that was initialized from the uci:version attribute of LineDataStatusType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const LineDataStatusType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PressureData.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PressureData.
    */
  virtual const uci::type::ComponentPressureType& getPressureData() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PressureData.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PressureData.
    */
  virtual uci::type::ComponentPressureType& getPressureData() = 0;

  /** Sets the complex content identified by PressureData to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PressureData.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LineDataStatusType& setPressureData(const uci::type::ComponentPressureType& value) = 0;

  /** Returns whether the Element identified by PressureData exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PressureData is enabled or not.
    */
  virtual bool hasPressureData() const = 0;

  /** Enables the Element identified by PressureData.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PressureData.
    */
  virtual uci::type::ComponentPressureType& enablePressureData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PressureData.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LineDataStatusType& clearPressureData() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TemperatureData.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TemperatureData.
    */
  virtual const uci::type::ComponentTemperatureType& getTemperatureData() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TemperatureData.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TemperatureData.
    */
  virtual uci::type::ComponentTemperatureType& getTemperatureData() = 0;

  /** Sets the complex content identified by TemperatureData to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TemperatureData.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LineDataStatusType& setTemperatureData(const uci::type::ComponentTemperatureType& value) = 0;

  /** Returns whether the Element identified by TemperatureData exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TemperatureData is enabled or not.
    */
  virtual bool hasTemperatureData() const = 0;

  /** Enables the Element identified by TemperatureData.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TemperatureData.
    */
  virtual uci::type::ComponentTemperatureType& enableTemperatureData(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TemperatureData.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LineDataStatusType& clearTemperatureData() = 0;

  /** Returns the value of the SimplePrimitive data type identified by FlowRate.
    *
    * @return The value of the simple primitive data type identified by FlowRate.
    */
  virtual xs::Double getFlowRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FlowRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LineDataStatusType& setFlowRate(xs::Double value) = 0;

  /** Returns whether the Element identified by FlowRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FlowRate is enabled or not.
    */
  virtual bool hasFlowRate() const = 0;

  /** Clears (disabled) the Element identified by FlowRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LineDataStatusType& clearFlowRate() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Direction.
    *
    * @return A const reference to the accessor that provides access to the string identified by Direction.
    */
  virtual const uci::type::VisibleString64Type& getDirection() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Direction.
    *
    * @return A reference to the accessor that provides access to the string identified by Direction.
    */
  virtual uci::type::VisibleString64Type& getDirection() = 0;

  /** Sets the string identified by Direction to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Direction.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LineDataStatusType& setDirection(const uci::type::VisibleString64Type& value) = 0;

  /** Sets the string identified by Direction to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LineDataStatusType& setDirection(const std::string& value) = 0;

  /** Sets the string identified by Direction to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LineDataStatusType& setDirection(const char* value) = 0;

  /** Returns whether the Element identified by Direction exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Direction is enabled or not.
    */
  virtual bool hasDirection() const = 0;

  /** Enables the Element identified by Direction.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Direction.
    */
  virtual uci::type::VisibleString64Type& enableDirection(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Direction.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LineDataStatusType& clearDirection() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by IsGravityFeed.
    *
    * @return A const reference to the accessor that provides access to the string identified by IsGravityFeed.
    */
  virtual const uci::type::EmptyType& getIsGravityFeed() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by IsGravityFeed.
    *
    * @return A reference to the accessor that provides access to the string identified by IsGravityFeed.
    */
  virtual uci::type::EmptyType& getIsGravityFeed() = 0;

  /** Sets the string identified by IsGravityFeed to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by IsGravityFeed.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LineDataStatusType& setIsGravityFeed(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by IsGravityFeed to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LineDataStatusType& setIsGravityFeed(const std::string& value) = 0;

  /** Sets the string identified by IsGravityFeed to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LineDataStatusType& setIsGravityFeed(const char* value) = 0;

  /** Returns whether the Element identified by IsGravityFeed exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IsGravityFeed is enabled or not.
    */
  virtual bool hasIsGravityFeed() const = 0;

  /** Enables the Element identified by IsGravityFeed.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by IsGravityFeed.
    */
  virtual uci::type::EmptyType& enableIsGravityFeed(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by IsGravityFeed.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::LineDataStatusType& clearIsGravityFeed() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  LineDataStatusType() {
  }

  /** The destructor [only available to derived classes]. */
  ~LineDataStatusType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The LineDataStatusType to copy from.
    */
  LineDataStatusType(const LineDataStatusType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this LineDataStatusType to the contents of the LineDataStatusType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The LineDataStatusType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this LineDataStatusType.
    * @return A reference to this LineDataStatusType.
    */
  LineDataStatusType& operator=(const LineDataStatusType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_LINEDATASTATUSTYPE_H

