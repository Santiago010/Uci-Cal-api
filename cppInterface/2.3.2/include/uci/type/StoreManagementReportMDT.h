/** @file StoreManagementReportMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_STOREMANAGEMENTREPORTMDT_H
#define UCI_TYPE_STOREMANAGEMENTREPORTMDT_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/export.h"
#include "ForeignKeyType.h"
#include "LAR_CalculationWindType.h"
#include "StoreManagementReportID_Type.h"
#include "StoreType.h"
#include "SupportCapabilityID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This element specifies the dynamic status of the store management supporting Capability of a System. A stores
  * management supporting Capability is associated with other primary Capabilities that it controls such as Strike
  * Capabilities.
  */
class StoreManagementReportMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new StoreManagementReportMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed StoreManagementReportMDT.
    */
  static UCI_EXPORT StoreManagementReportMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new StoreManagementReportMDT initializing the data accessed by the new
    * StoreManagementReportMDT using the data accessed by the specified StoreManagementReportMDT (cloning).
    *
    * @param accessor The StoreManagementReportMDT that provides access to the data that is to be used to initialize the
    *      data accessed by the new created StoreManagementReportMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed StoreManagementReportMDT.
    */
  static UCI_EXPORT StoreManagementReportMDT& create(const StoreManagementReportMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified StoreManagementReportMDT. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The StoreManagementReportMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(StoreManagementReportMDT& accessor);

  /** Returns this accessor's type constant, i.e. storeManagementReportMDT.
    *
    * @return This accessor's type constant, i.e. storeManagementReportMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::storeManagementReportMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of StoreManagementReportMDT.
    *
    * @return The version that was initialized from the uci:version attribute of StoreManagementReportMDT.
    */
  static std::string getUCITypeVersion() {
    return "000.001.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const StoreManagementReportMDT& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * StoreManagementReportID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      StoreManagementReportID.
    */
  virtual const uci::type::StoreManagementReportID_Type& getStoreManagementReportID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * StoreManagementReportID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      StoreManagementReportID.
    */
  virtual uci::type::StoreManagementReportID_Type& getStoreManagementReportID() = 0;

  /** Sets the complex content identified by StoreManagementReportID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by StoreManagementReportID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreManagementReportMDT& setStoreManagementReportID(const uci::type::StoreManagementReportID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SupportCapabilityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SupportCapabilityID.
    */
  virtual const uci::type::SupportCapabilityID_Type& getSupportCapabilityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SupportCapabilityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SupportCapabilityID.
    */
  virtual uci::type::SupportCapabilityID_Type& getSupportCapabilityID() = 0;

  /** Sets the complex content identified by SupportCapabilityID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SupportCapabilityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreManagementReportMDT& setSupportCapabilityID(const uci::type::SupportCapabilityID_Type& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by MasterArm.
    *
    * @return The value of the simple primitive data type identified by MasterArm.
    */
  virtual xs::Boolean getMasterArm() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MasterArm.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreManagementReportMDT& setMasterArm(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ReleaseConsent.
    *
    * @return The value of the simple primitive data type identified by ReleaseConsent.
    */
  virtual xs::Boolean getReleaseConsent() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ReleaseConsent.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreManagementReportMDT& setReleaseConsent(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by LAR_ConstraintsEnforced.
    *
    * @return The value of the simple primitive data type identified by LAR_ConstraintsEnforced.
    */
  virtual xs::Boolean getLAR_ConstraintsEnforced() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LAR_ConstraintsEnforced.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreManagementReportMDT& setLAR_ConstraintsEnforced(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by AttitudeConstraintsEnforced.
    *
    * @return The value of the simple primitive data type identified by AttitudeConstraintsEnforced.
    */
  virtual xs::Boolean getAttitudeConstraintsEnforced() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AttitudeConstraintsEnforced.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreManagementReportMDT& setAttitudeConstraintsEnforced(xs::Boolean value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CurrentStoreStation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CurrentStoreStation.
    */
  virtual const uci::type::ForeignKeyType& getCurrentStoreStation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CurrentStoreStation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CurrentStoreStation.
    */
  virtual uci::type::ForeignKeyType& getCurrentStoreStation() = 0;

  /** Sets the complex content identified by CurrentStoreStation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CurrentStoreStation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreManagementReportMDT& setCurrentStoreStation(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by CurrentStoreStation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CurrentStoreStation is enabled or not.
    */
  virtual bool hasCurrentStoreStation() const = 0;

  /** Enables the Element identified by CurrentStoreStation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CurrentStoreStation.
    */
  virtual uci::type::ForeignKeyType& enableCurrentStoreStation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CurrentStoreStation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreManagementReportMDT& clearCurrentStoreStation() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SelectedStoreType.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SelectedStoreType.
    */
  virtual const uci::type::StoreType& getSelectedStoreType() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SelectedStoreType.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SelectedStoreType.
    */
  virtual uci::type::StoreType& getSelectedStoreType() = 0;

  /** Sets the complex content identified by SelectedStoreType to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SelectedStoreType.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreManagementReportMDT& setSelectedStoreType(const uci::type::StoreType& value) = 0;

  /** Returns whether the Element identified by SelectedStoreType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SelectedStoreType is enabled or not.
    */
  virtual bool hasSelectedStoreType() const = 0;

  /** Enables the Element identified by SelectedStoreType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SelectedStoreType.
    */
  virtual uci::type::StoreType& enableSelectedStoreType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SelectedStoreType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreManagementReportMDT& clearSelectedStoreType() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * LAR_CalculationWind.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      LAR_CalculationWind.
    */
  virtual const uci::type::LAR_CalculationWindType& getLAR_CalculationWind() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LAR_CalculationWind.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LAR_CalculationWind.
    */
  virtual uci::type::LAR_CalculationWindType& getLAR_CalculationWind() = 0;

  /** Sets the complex content identified by LAR_CalculationWind to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LAR_CalculationWind.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreManagementReportMDT& setLAR_CalculationWind(const uci::type::LAR_CalculationWindType& value) = 0;

  /** Returns whether the Element identified by LAR_CalculationWind exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LAR_CalculationWind is enabled or not.
    */
  virtual bool hasLAR_CalculationWind() const = 0;

  /** Enables the Element identified by LAR_CalculationWind.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by LAR_CalculationWind.
    */
  virtual uci::type::LAR_CalculationWindType& enableLAR_CalculationWind(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LAR_CalculationWind.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::StoreManagementReportMDT& clearLAR_CalculationWind() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  StoreManagementReportMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~StoreManagementReportMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The StoreManagementReportMDT to copy from.
    */
  StoreManagementReportMDT(const StoreManagementReportMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this StoreManagementReportMDT to the contents of the
    * StoreManagementReportMDT on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The StoreManagementReportMDT on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this StoreManagementReportMDT.
    * @return A reference to this StoreManagementReportMDT.
    */
  StoreManagementReportMDT& operator=(const StoreManagementReportMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_STOREMANAGEMENTREPORTMDT_H

