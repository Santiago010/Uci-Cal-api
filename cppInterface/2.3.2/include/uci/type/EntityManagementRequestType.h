/** @file EntityManagementRequestType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ENTITYMANAGEMENTREQUESTTYPE_H
#define UCI_TYPE_ENTITYMANAGEMENTREQUESTTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/EntityManagementClearIdentityType.h"
#include "uci/type/EntityManagementDownType.h"
#include "uci/type/EntityManagementDropRestrictType.h"
#include "uci/type/EntityManagementDropType.h"
#include "uci/type/EntityManagementKinematicsType.h"
#include "uci/type/EntityManagementMergeType.h"
#include "uci/type/EntityManagementProposeCorrelationType.h"
#include "uci/type/EntityManagementSetActivityByType.h"
#include "uci/type/EntityManagementSetCapabilityType.h"
#include "uci/type/EntityManagementSetEnduranceType.h"
#include "uci/type/EntityManagementSetFusionEligibilityType.h"
#include "uci/type/EntityManagementSetIdentityType.h"
#include "uci/type/EntityManagementSetLink16MetadataType.h"
#include "uci/type/EntityManagementSetModeType.h"
#include "uci/type/EntityManagementSetPlatformStatusType.h"
#include "uci/type/EntityManagementSetSignalSummaryType.h"
#include "uci/type/EntityManagementSetStrengthType.h"
#include "uci/type/EntityManagementSetVoiceControlType.h"
#include "uci/type/EntityManagementSplitType.h"
#include "uci/type/EntityManagementSwapType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class EntityManagementRequestType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new EntityManagementRequestType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EntityManagementRequestType.
    */
  static UCI_EXPORT EntityManagementRequestType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new EntityManagementRequestType initializing the data accessed by the new
    * EntityManagementRequestType using the data accessed by the specified EntityManagementRequestType (cloning).
    *
    * @param accessor The EntityManagementRequestType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created EntityManagementRequestType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EntityManagementRequestType.
    */
  static UCI_EXPORT EntityManagementRequestType& create(const EntityManagementRequestType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified EntityManagementRequestType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The EntityManagementRequestType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(EntityManagementRequestType& accessor);

  /** Returns this accessor's type constant, i.e. entityManagementRequestType.
    *
    * @return This accessor's type constant, i.e. entityManagementRequestType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::entityManagementRequestType;
  }

  /** Returns the version that was initialized from the uci:version attribute of EntityManagementRequestType.
    *
    * @return The version that was initialized from the uci:version attribute of EntityManagementRequestType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const EntityManagementRequestType& accessor) = 0;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum EntityManagementRequestTypeChoice {
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_NONE,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SPLIT,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_MERGE,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_DROP,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SETDROPRESTRICTION,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_CLEARDROPRESTRICTION,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SWAP,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SETFUSIONELIGIBILITY,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SETIDENTITY,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_CLEARIFF,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SETDOWNLOCATION,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SETKINEMATICS,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SETMODE,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SETACTIVITYBY,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SETSTRENGTH,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SETPLATFORMSTATUS,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SETENDURANCE,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SETLINK16METADATA,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_PROPOSECORRELATION,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SETVOICECONTROL,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SETCAPABILITY,
    ENTITYMANAGEMENTREQUESTTYPE_CHOICE_SETSIGNALSUMMARY
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual EntityManagementRequestTypeChoice getEntityManagementRequestTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getEntityManagementRequestTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In
    * addition, the access methods associated with the chosen element will be enabled and will provide access to the chosen
    * element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setEntityManagementRequestTypeChoiceOrdinal(EntityManagementRequestTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Split.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Split.
    */
  virtual const uci::type::EntityManagementSplitType& getSplit() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Split.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Split.
    */
  virtual uci::type::EntityManagementSplitType& getSplit() = 0;

  /** Sets the complex content identified by Split to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Split.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSplit(const uci::type::EntityManagementSplitType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Split.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Split, false otherwise.
    */
  virtual bool isSplit() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Split.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Split.
    */
  virtual uci::type::EntityManagementSplitType& chooseSplit(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Merge.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Merge.
    */
  virtual const uci::type::EntityManagementMergeType& getMerge() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Merge.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Merge.
    */
  virtual uci::type::EntityManagementMergeType& getMerge() = 0;

  /** Sets the complex content identified by Merge to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Merge.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setMerge(const uci::type::EntityManagementMergeType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Merge.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Merge, false otherwise.
    */
  virtual bool isMerge() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Merge.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Merge.
    */
  virtual uci::type::EntityManagementMergeType& chooseMerge(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Drop.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Drop.
    */
  virtual const uci::type::EntityManagementDropType& getDrop() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Drop.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Drop.
    */
  virtual uci::type::EntityManagementDropType& getDrop() = 0;

  /** Sets the complex content identified by Drop to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Drop.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setDrop(const uci::type::EntityManagementDropType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Drop.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Drop, false otherwise.
    */
  virtual bool isDrop() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Drop.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Drop.
    */
  virtual uci::type::EntityManagementDropType& chooseDrop(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SetDropRestriction.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SetDropRestriction.
    */
  virtual const uci::type::EntityManagementDropRestrictType& getSetDropRestriction() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SetDropRestriction.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SetDropRestriction.
    */
  virtual uci::type::EntityManagementDropRestrictType& getSetDropRestriction() = 0;

  /** Sets the complex content identified by SetDropRestriction to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SetDropRestriction.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSetDropRestriction(const uci::type::EntityManagementDropRestrictType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetDropRestriction.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetDropRestriction, false
    *      otherwise.
    */
  virtual bool isSetDropRestriction() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SetDropRestriction.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetDropRestriction.
    */
  virtual uci::type::EntityManagementDropRestrictType& chooseSetDropRestriction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ClearDropRestriction.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ClearDropRestriction.
    */
  virtual const uci::type::EntityManagementDropRestrictType& getClearDropRestriction() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ClearDropRestriction.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ClearDropRestriction.
    */
  virtual uci::type::EntityManagementDropRestrictType& getClearDropRestriction() = 0;

  /** Sets the complex content identified by ClearDropRestriction to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ClearDropRestriction.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setClearDropRestriction(const uci::type::EntityManagementDropRestrictType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ClearDropRestriction.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ClearDropRestriction, false
    *      otherwise.
    */
  virtual bool isClearDropRestriction() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ClearDropRestriction.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ClearDropRestriction.
    */
  virtual uci::type::EntityManagementDropRestrictType& chooseClearDropRestriction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Swap.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Swap.
    */
  virtual const uci::type::EntityManagementSwapType& getSwap() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Swap.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Swap.
    */
  virtual uci::type::EntityManagementSwapType& getSwap() = 0;

  /** Sets the complex content identified by Swap to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Swap.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSwap(const uci::type::EntityManagementSwapType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Swap.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Swap, false otherwise.
    */
  virtual bool isSwap() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Swap.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Swap.
    */
  virtual uci::type::EntityManagementSwapType& chooseSwap(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SetFusionEligibility.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SetFusionEligibility.
    */
  virtual const uci::type::EntityManagementSetFusionEligibilityType& getSetFusionEligibility() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SetFusionEligibility.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SetFusionEligibility.
    */
  virtual uci::type::EntityManagementSetFusionEligibilityType& getSetFusionEligibility() = 0;

  /** Sets the complex content identified by SetFusionEligibility to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SetFusionEligibility.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSetFusionEligibility(const uci::type::EntityManagementSetFusionEligibilityType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetFusionEligibility.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetFusionEligibility, false
    *      otherwise.
    */
  virtual bool isSetFusionEligibility() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SetFusionEligibility.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetFusionEligibility.
    */
  virtual uci::type::EntityManagementSetFusionEligibilityType& chooseSetFusionEligibility(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SetIdentity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SetIdentity.
    */
  virtual const uci::type::EntityManagementSetIdentityType& getSetIdentity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SetIdentity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SetIdentity.
    */
  virtual uci::type::EntityManagementSetIdentityType& getSetIdentity() = 0;

  /** Sets the complex content identified by SetIdentity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SetIdentity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSetIdentity(const uci::type::EntityManagementSetIdentityType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetIdentity.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetIdentity, false otherwise.
    */
  virtual bool isSetIdentity() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SetIdentity.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetIdentity.
    */
  virtual uci::type::EntityManagementSetIdentityType& chooseSetIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ClearIFF.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ClearIFF.
    */
  virtual const uci::type::EntityManagementClearIdentityType& getClearIFF() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ClearIFF.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ClearIFF.
    */
  virtual uci::type::EntityManagementClearIdentityType& getClearIFF() = 0;

  /** Sets the complex content identified by ClearIFF to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ClearIFF.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setClearIFF(const uci::type::EntityManagementClearIdentityType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ClearIFF.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ClearIFF, false otherwise.
    */
  virtual bool isClearIFF() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ClearIFF.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ClearIFF.
    */
  virtual uci::type::EntityManagementClearIdentityType& chooseClearIFF(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SetDownLocation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SetDownLocation.
    */
  virtual const uci::type::EntityManagementDownType& getSetDownLocation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SetDownLocation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SetDownLocation.
    */
  virtual uci::type::EntityManagementDownType& getSetDownLocation() = 0;

  /** Sets the complex content identified by SetDownLocation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SetDownLocation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSetDownLocation(const uci::type::EntityManagementDownType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetDownLocation.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetDownLocation, false
    *      otherwise.
    */
  virtual bool isSetDownLocation() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SetDownLocation.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetDownLocation.
    */
  virtual uci::type::EntityManagementDownType& chooseSetDownLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SetKinematics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SetKinematics.
    */
  virtual const uci::type::EntityManagementKinematicsType& getSetKinematics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SetKinematics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SetKinematics.
    */
  virtual uci::type::EntityManagementKinematicsType& getSetKinematics() = 0;

  /** Sets the complex content identified by SetKinematics to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SetKinematics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSetKinematics(const uci::type::EntityManagementKinematicsType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetKinematics.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetKinematics, false otherwise.
    */
  virtual bool isSetKinematics() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SetKinematics.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetKinematics.
    */
  virtual uci::type::EntityManagementKinematicsType& chooseSetKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SetMode.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SetMode.
    */
  virtual const uci::type::EntityManagementSetModeType& getSetMode() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SetMode.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SetMode.
    */
  virtual uci::type::EntityManagementSetModeType& getSetMode() = 0;

  /** Sets the complex content identified by SetMode to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SetMode.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSetMode(const uci::type::EntityManagementSetModeType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetMode.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetMode, false otherwise.
    */
  virtual bool isSetMode() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SetMode.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetMode.
    */
  virtual uci::type::EntityManagementSetModeType& chooseSetMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SetActivityBy.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SetActivityBy.
    */
  virtual const uci::type::EntityManagementSetActivityByType& getSetActivityBy() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SetActivityBy.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SetActivityBy.
    */
  virtual uci::type::EntityManagementSetActivityByType& getSetActivityBy() = 0;

  /** Sets the complex content identified by SetActivityBy to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SetActivityBy.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSetActivityBy(const uci::type::EntityManagementSetActivityByType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetActivityBy.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetActivityBy, false otherwise.
    */
  virtual bool isSetActivityBy() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SetActivityBy.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetActivityBy.
    */
  virtual uci::type::EntityManagementSetActivityByType& chooseSetActivityBy(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SetStrength.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SetStrength.
    */
  virtual const uci::type::EntityManagementSetStrengthType& getSetStrength() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SetStrength.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SetStrength.
    */
  virtual uci::type::EntityManagementSetStrengthType& getSetStrength() = 0;

  /** Sets the complex content identified by SetStrength to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SetStrength.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSetStrength(const uci::type::EntityManagementSetStrengthType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetStrength.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetStrength, false otherwise.
    */
  virtual bool isSetStrength() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SetStrength.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetStrength.
    */
  virtual uci::type::EntityManagementSetStrengthType& chooseSetStrength(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SetPlatformStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SetPlatformStatus.
    */
  virtual const uci::type::EntityManagementSetPlatformStatusType& getSetPlatformStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SetPlatformStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SetPlatformStatus.
    */
  virtual uci::type::EntityManagementSetPlatformStatusType& getSetPlatformStatus() = 0;

  /** Sets the complex content identified by SetPlatformStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SetPlatformStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSetPlatformStatus(const uci::type::EntityManagementSetPlatformStatusType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetPlatformStatus.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetPlatformStatus, false
    *      otherwise.
    */
  virtual bool isSetPlatformStatus() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SetPlatformStatus.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetPlatformStatus.
    */
  virtual uci::type::EntityManagementSetPlatformStatusType& chooseSetPlatformStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SetEndurance.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SetEndurance.
    */
  virtual const uci::type::EntityManagementSetEnduranceType& getSetEndurance() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SetEndurance.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SetEndurance.
    */
  virtual uci::type::EntityManagementSetEnduranceType& getSetEndurance() = 0;

  /** Sets the complex content identified by SetEndurance to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SetEndurance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSetEndurance(const uci::type::EntityManagementSetEnduranceType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetEndurance.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetEndurance, false otherwise.
    */
  virtual bool isSetEndurance() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SetEndurance.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetEndurance.
    */
  virtual uci::type::EntityManagementSetEnduranceType& chooseSetEndurance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SetLink16Metadata.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SetLink16Metadata.
    */
  virtual const uci::type::EntityManagementSetLink16MetadataType& getSetLink16Metadata() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SetLink16Metadata.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SetLink16Metadata.
    */
  virtual uci::type::EntityManagementSetLink16MetadataType& getSetLink16Metadata() = 0;

  /** Sets the complex content identified by SetLink16Metadata to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SetLink16Metadata.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSetLink16Metadata(const uci::type::EntityManagementSetLink16MetadataType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetLink16Metadata.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetLink16Metadata, false
    *      otherwise.
    */
  virtual bool isSetLink16Metadata() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SetLink16Metadata.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetLink16Metadata.
    */
  virtual uci::type::EntityManagementSetLink16MetadataType& chooseSetLink16Metadata(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ProposeCorrelation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ProposeCorrelation.
    */
  virtual const uci::type::EntityManagementProposeCorrelationType& getProposeCorrelation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ProposeCorrelation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ProposeCorrelation.
    */
  virtual uci::type::EntityManagementProposeCorrelationType& getProposeCorrelation() = 0;

  /** Sets the complex content identified by ProposeCorrelation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ProposeCorrelation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setProposeCorrelation(const uci::type::EntityManagementProposeCorrelationType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ProposeCorrelation.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ProposeCorrelation, false
    *      otherwise.
    */
  virtual bool isProposeCorrelation() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ProposeCorrelation.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ProposeCorrelation.
    */
  virtual uci::type::EntityManagementProposeCorrelationType& chooseProposeCorrelation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SetVoiceControl.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SetVoiceControl.
    */
  virtual const uci::type::EntityManagementSetVoiceControlType& getSetVoiceControl() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SetVoiceControl.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SetVoiceControl.
    */
  virtual uci::type::EntityManagementSetVoiceControlType& getSetVoiceControl() = 0;

  /** Sets the complex content identified by SetVoiceControl to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SetVoiceControl.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSetVoiceControl(const uci::type::EntityManagementSetVoiceControlType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetVoiceControl.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetVoiceControl, false
    *      otherwise.
    */
  virtual bool isSetVoiceControl() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SetVoiceControl.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetVoiceControl.
    */
  virtual uci::type::EntityManagementSetVoiceControlType& chooseSetVoiceControl(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SetCapability.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SetCapability.
    */
  virtual const uci::type::EntityManagementSetCapabilityType& getSetCapability() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SetCapability.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SetCapability.
    */
  virtual uci::type::EntityManagementSetCapabilityType& getSetCapability() = 0;

  /** Sets the complex content identified by SetCapability to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SetCapability.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSetCapability(const uci::type::EntityManagementSetCapabilityType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetCapability.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetCapability, false otherwise.
    */
  virtual bool isSetCapability() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SetCapability.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetCapability.
    */
  virtual uci::type::EntityManagementSetCapabilityType& chooseSetCapability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SetSignalSummary.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SetSignalSummary.
    */
  virtual const uci::type::EntityManagementSetSignalSummaryType& getSetSignalSummary() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SetSignalSummary.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SetSignalSummary.
    */
  virtual uci::type::EntityManagementSetSignalSummaryType& getSetSignalSummary() = 0;

  /** Sets the complex content identified by SetSignalSummary to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SetSignalSummary.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityManagementRequestType& setSetSignalSummary(const uci::type::EntityManagementSetSignalSummaryType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SetSignalSummary.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SetSignalSummary, false
    *      otherwise.
    */
  virtual bool isSetSignalSummary() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SetSignalSummary.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SetSignalSummary.
    */
  virtual uci::type::EntityManagementSetSignalSummaryType& chooseSetSignalSummary(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  EntityManagementRequestType() {
  }

  /** The destructor [only available to derived classes]. */
  ~EntityManagementRequestType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The EntityManagementRequestType to copy from.
    */
  EntityManagementRequestType(const EntityManagementRequestType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this EntityManagementRequestType to the contents of the
    * EntityManagementRequestType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The EntityManagementRequestType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this EntityManagementRequestType.
    * @return A reference to this EntityManagementRequestType.
    */
  EntityManagementRequestType& operator=(const EntityManagementRequestType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ENTITYMANAGEMENTREQUESTTYPE_H

