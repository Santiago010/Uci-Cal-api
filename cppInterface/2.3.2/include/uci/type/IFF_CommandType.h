/** @file IFF_CommandType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_IFF_COMMANDTYPE_H
#define UCI_TYPE_IFF_COMMANDTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/IFF_ActivityCommandType.h"
#include "uci/type/IFF_CapabilityCommandType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class IFF_CommandType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new IFF_CommandType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IFF_CommandType.
    */
  static UCI_EXPORT IFF_CommandType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new IFF_CommandType initializing the data accessed by the new IFF_CommandType using the data
    * accessed by the specified IFF_CommandType (cloning).
    *
    * @param accessor The IFF_CommandType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created IFF_CommandType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IFF_CommandType.
    */
  static UCI_EXPORT IFF_CommandType& create(const IFF_CommandType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified IFF_CommandType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The IFF_CommandType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(IFF_CommandType& accessor);

  /** Returns this accessor's type constant, i.e. iFF_CommandType.
    *
    * @return This accessor's type constant, i.e. iFF_CommandType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::iFF_CommandType;
  }

  /** Returns the version that was initialized from the uci:version attribute of IFF_CommandType.
    *
    * @return The version that was initialized from the uci:version attribute of IFF_CommandType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const IFF_CommandType& accessor) = 0;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum IFF_CommandTypeChoice {
    IFF_COMMANDTYPE_CHOICE_NONE,
    IFF_COMMANDTYPE_CHOICE_CAPABILITY,
    IFF_COMMANDTYPE_CHOICE_ACTIVITY
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual IFF_CommandTypeChoice getIFF_CommandTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getIFF_CommandTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition, the access
    * methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_CommandType& setIFF_CommandTypeChoiceOrdinal(IFF_CommandTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Capability.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Capability.
    */
  virtual const uci::type::IFF_CapabilityCommandType& getCapability() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Capability.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Capability.
    */
  virtual uci::type::IFF_CapabilityCommandType& getCapability() = 0;

  /** Sets the complex content identified by Capability to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Capability.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_CommandType& setCapability(const uci::type::IFF_CapabilityCommandType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Capability.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Capability, false otherwise.
    */
  virtual bool isCapability() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Capability.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Capability.
    */
  virtual uci::type::IFF_CapabilityCommandType& chooseCapability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Activity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Activity.
    */
  virtual const uci::type::IFF_ActivityCommandType& getActivity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Activity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Activity.
    */
  virtual uci::type::IFF_ActivityCommandType& getActivity() = 0;

  /** Sets the complex content identified by Activity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Activity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IFF_CommandType& setActivity(const uci::type::IFF_ActivityCommandType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by Activity.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by Activity, false otherwise.
    */
  virtual bool isActivity() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by Activity.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by Activity.
    */
  virtual uci::type::IFF_ActivityCommandType& chooseActivity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  IFF_CommandType() {
  }

  /** The destructor [only available to derived classes]. */
  ~IFF_CommandType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The IFF_CommandType to copy from.
    */
  IFF_CommandType(const IFF_CommandType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this IFF_CommandType to the contents of the IFF_CommandType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The IFF_CommandType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this IFF_CommandType.
    * @return A reference to this IFF_CommandType.
    */
  IFF_CommandType& operator=(const IFF_CommandType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_IFF_COMMANDTYPE_H

