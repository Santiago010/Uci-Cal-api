/** @file RouteModificationRequestMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ROUTEMODIFICATIONREQUESTMDT_H
#define UCI_TYPE_ROUTEMODIFICATIONREQUESTMDT_H

#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "LineProjectionEnum.h"
#include "PathID_Type.h"
#include "PathSegmentModificationType.h"
#include "PlanInitiationSourceEnum.h"
#include "RequestBaseType.h"
#include "RoutePathModificationType.h"
#include "RoutePlanID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Route modification message data. This allows for atomic changes to a route in path or segment outside of normal
  * Mission/Route planning, where transmission of whole route could be an issue. The result of the message is a new Route
  * message that incorporates the changes here into the Route, incrementing the RouteVersionID.
  */
class RouteModificationRequestMDT : public virtual RequestBaseType {
public:

  /** This method constructs a new RouteModificationRequestMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RouteModificationRequestMDT.
    */
  static UCI_EXPORT RouteModificationRequestMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RouteModificationRequestMDT initializing the data accessed by the new
    * RouteModificationRequestMDT using the data accessed by the specified RouteModificationRequestMDT (cloning).
    *
    * @param accessor The RouteModificationRequestMDT that provides access to the data that is to be used to initialize the
    *      data accessed by the new created RouteModificationRequestMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RouteModificationRequestMDT.
    */
  static UCI_EXPORT RouteModificationRequestMDT& create(const RouteModificationRequestMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RouteModificationRequestMDT. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The RouteModificationRequestMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RouteModificationRequestMDT& accessor);

  /** Returns this accessor's type constant, i.e. routeModificationRequestMDT.
    *
    * @return This accessor's type constant, i.e. routeModificationRequestMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::routeModificationRequestMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of RouteModificationRequestMDT.
    *
    * @return The version that was initialized from the uci:version attribute of RouteModificationRequestMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RouteModificationRequestMDT& accessor) = 0;

  /** PathSegment modification request data. Order should not matter within a single request (like an atomic transaction).
    * If you want to control order, you should send subsequent requests and wait for status after each. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PathSegmentModificationType, uci::type::accessorType::pathSegmentModificationType> PathSegment;

  /** Returns a const reference to the value of the enumeration identified by Source.
    *
    * @return A const reference to the value of the enumeration identified by Source.
    */
  virtual const uci::type::PlanInitiationSourceEnum& getSource() const = 0;

  /** Returns a reference to the value of the enumeration identified by Source.
    *
    * @return A reference to the value of the enumeration identified by Source.
    */
  virtual uci::type::PlanInitiationSourceEnum& getSource() = 0;

  /** Sets the value of the enumeration identified by Source.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteModificationRequestMDT& setSource(const uci::type::PlanInitiationSourceEnum& value) = 0;

  /** Sets the value of the enumeration identified by Source.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteModificationRequestMDT& setSource(uci::type::PlanInitiationSourceEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RoutePlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RoutePlanID.
    */
  virtual const uci::type::RoutePlanID_Type& getRoutePlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RoutePlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RoutePlanID.
    */
  virtual uci::type::RoutePlanID_Type& getRoutePlanID() = 0;

  /** Sets the complex content identified by RoutePlanID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RoutePlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteModificationRequestMDT& setRoutePlanID(const uci::type::RoutePlanID_Type& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Detailed.
    *
    * @return The value of the simple primitive data type identified by Detailed.
    */
  virtual xs::Boolean getDetailed() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Detailed.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteModificationRequestMDT& setDetailed(xs::Boolean value) = 0;

  /** Returns whether the Element identified by Detailed exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Detailed is enabled or not.
    */
  virtual bool hasDetailed() const = 0;

  /** Clears (disabled) the Element identified by Detailed.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteModificationRequestMDT& clearDetailed() = 0;

  /** Returns a const reference to the value of the enumeration identified by RouteProjection.
    *
    * @return A const reference to the value of the enumeration identified by RouteProjection.
    */
  virtual const uci::type::LineProjectionEnum& getRouteProjection() const = 0;

  /** Returns a reference to the value of the enumeration identified by RouteProjection.
    *
    * @return A reference to the value of the enumeration identified by RouteProjection.
    */
  virtual uci::type::LineProjectionEnum& getRouteProjection() = 0;

  /** Sets the value of the enumeration identified by RouteProjection.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteModificationRequestMDT& setRouteProjection(const uci::type::LineProjectionEnum& value) = 0;

  /** Sets the value of the enumeration identified by RouteProjection.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteModificationRequestMDT& setRouteProjection(uci::type::LineProjectionEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by RouteProjection exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RouteProjection is enabled or not.
    */
  virtual bool hasRouteProjection() const = 0;

  /** Enables the Element identified by RouteProjection.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by RouteProjection.
    */
  virtual uci::type::LineProjectionEnum& enableRouteProjection(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RouteProjection.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteModificationRequestMDT& clearRouteProjection() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * FirstInRoutePathID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      FirstInRoutePathID.
    */
  virtual const uci::type::PathID_Type& getFirstInRoutePathID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FirstInRoutePathID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FirstInRoutePathID.
    */
  virtual uci::type::PathID_Type& getFirstInRoutePathID() = 0;

  /** Sets the complex content identified by FirstInRoutePathID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FirstInRoutePathID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteModificationRequestMDT& setFirstInRoutePathID(const uci::type::PathID_Type& value) = 0;

  /** Returns whether the Element identified by FirstInRoutePathID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FirstInRoutePathID is enabled or not.
    */
  virtual bool hasFirstInRoutePathID() const = 0;

  /** Enables the Element identified by FirstInRoutePathID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by FirstInRoutePathID.
    */
  virtual uci::type::PathID_Type& enableFirstInRoutePathID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FirstInRoutePathID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteModificationRequestMDT& clearFirstInRoutePathID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Path.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Path.
    */
  virtual const uci::type::RoutePathModificationType& getPath() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Path.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Path.
    */
  virtual uci::type::RoutePathModificationType& getPath() = 0;

  /** Sets the complex content identified by Path to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Path.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteModificationRequestMDT& setPath(const uci::type::RoutePathModificationType& value) = 0;

  /** Returns whether the Element identified by Path exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Path is enabled or not.
    */
  virtual bool hasPath() const = 0;

  /** Enables the Element identified by Path.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Path.
    */
  virtual uci::type::RoutePathModificationType& enablePath(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Path.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteModificationRequestMDT& clearPath() = 0;

  /** Returns a const reference to the bounded list identified by PathSegment.
    *
    * @return A const reference to the bounded list identified by PathSegment.
    */
  virtual const uci::type::RouteModificationRequestMDT::PathSegment& getPathSegment() const = 0;

  /** Returns a reference to the bounded list identified by PathSegment.
    *
    * @return A reference to the bounded list identified by PathSegment.
    */
  virtual uci::type::RouteModificationRequestMDT::PathSegment& getPathSegment() = 0;

  /** Sets the bounded list identified by PathSegment.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteModificationRequestMDT& setPathSegment(const uci::type::RouteModificationRequestMDT::PathSegment& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RouteModificationRequestMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~RouteModificationRequestMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RouteModificationRequestMDT to copy from.
    */
  RouteModificationRequestMDT(const RouteModificationRequestMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RouteModificationRequestMDT to the contents of the
    * RouteModificationRequestMDT on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The RouteModificationRequestMDT on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this RouteModificationRequestMDT.
    * @return A reference to this RouteModificationRequestMDT.
    */
  RouteModificationRequestMDT& operator=(const RouteModificationRequestMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ROUTEMODIFICATIONREQUESTMDT_H

