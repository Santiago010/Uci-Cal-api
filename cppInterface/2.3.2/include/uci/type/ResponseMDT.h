/** @file ResponseMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_RESPONSEMDT_H
#define UCI_TYPE_RESPONSEMDT_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "RequirementConstraintsType.h"
#include "RequirementGuidanceType.h"
#include "RequirementMetadataType.h"
#include "RequirementsTemplateType.h"
#include "ResponseID_Type.h"
#include "ResponseOptionDetailsType.h"
#include "ResponseTypeEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ResponseMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ResponseMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ResponseMDT.
    */
  static UCI_EXPORT ResponseMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ResponseMDT initializing the data accessed by the new ResponseMDT using the data
    * accessed by the specified ResponseMDT (cloning).
    *
    * @param accessor The ResponseMDT that provides access to the data that is to be used to initialize the data accessed
    *      by the new created ResponseMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ResponseMDT.
    */
  static UCI_EXPORT ResponseMDT& create(const ResponseMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ResponseMDT. Use of the specified accessor after it has been destroyed will result
    * in undefined behavior.
    *
    * @param accessor The ResponseMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ResponseMDT& accessor);

  /** Returns this accessor's type constant, i.e. responseMDT.
    *
    * @return This accessor's type constant, i.e. responseMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::responseMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of ResponseMDT.
    *
    * @return The version that was initialized from the uci:version attribute of ResponseMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ResponseMDT& accessor) = 0;

  /** Indicates the types of Response options included in the message. List size for this element is based on "Select All
    * That Apply" condition. [Occurrences: Minimum: 1; Maximum: 4]
    */
  typedef uci::base::BoundedList<uci::type::ResponseTypeEnum, uci::type::accessorType::responseTypeEnum> ResponseType;

  /** Indicates an Option of the Response. Responses are designed to be flexible. A Response is a set of prioritized
    * Options to address an anticipated triggering event, events or event sequence in the battlespace. Responses are
    * allocated to Systems via a ResponsePlan. When a ResponsePlan is activated, monitoring for the triggering events in
    * the Options begins. When a triggering event happens, the applicable Option(s) are evaluated. For example, a Response
    * for "airborne fighter threat" might include a series of prioritized Options corresponding to different events from
    * initial detection to full escalation of the threat. One Option might be to track far away unknown Entities by
    * creating (via a Requirements template) and dynamically planning an AMTI Task. Another Option might be to activate a
    * retreat contingency RoutePlan for vulnerable Systems near the maximum kinetic weapons range of the threat. Another
    * Option might be to aggressively intervene by creating and planning an Attack Action as Systems approach a state of
    * unacceptable vulnerability. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ResponseOptionDetailsType, uci::type::accessorType::responseOptionDetailsType> Option;

  /** The sibling Option element associates triggering events with a desired Response one of which is to use this element,
    * a Requirements template, to generate or change one or more Requirements messages/objects (Effect, Action, Task,
    * [Capability]Command). An instance of this element is a RequirementsTemplate; it indicates the types of Requirements
    * to generate or update and their details. Each RequirementsTemplate has a unique ID and therefore can be used for
    * multiple Options. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RequirementsTemplateType, uci::type::accessorType::requirementsTemplateType> RequirementsTemplate;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ResponseID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ResponseID.
    */
  virtual const uci::type::ResponseID_Type& getResponseID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ResponseID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ResponseID.
    */
  virtual uci::type::ResponseID_Type& getResponseID() = 0;

  /** Sets the complex content identified by ResponseID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ResponseID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponseMDT& setResponseID(const uci::type::ResponseID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by ResponseType.
    *
    * @return A const reference to the bounded list identified by ResponseType.
    */
  virtual const uci::type::ResponseMDT::ResponseType& getResponseType() const = 0;

  /** Returns a reference to the bounded list identified by ResponseType.
    *
    * @return A reference to the bounded list identified by ResponseType.
    */
  virtual uci::type::ResponseMDT::ResponseType& getResponseType() = 0;

  /** Sets the bounded list identified by ResponseType.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponseMDT& setResponseType(const uci::type::ResponseMDT::ResponseType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ResponseManagementConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ResponseManagementConstraints.
    */
  virtual const uci::type::RequirementConstraintsType& getResponseManagementConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ResponseManagementConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ResponseManagementConstraints.
    */
  virtual uci::type::RequirementConstraintsType& getResponseManagementConstraints() = 0;

  /** Sets the complex content identified by ResponseManagementConstraints to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ResponseManagementConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponseMDT& setResponseManagementConstraints(const uci::type::RequirementConstraintsType& value) = 0;

  /** Returns whether the Element identified by ResponseManagementConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ResponseManagementConstraints is enabled or not.
    */
  virtual bool hasResponseManagementConstraints() const = 0;

  /** Enables the Element identified by ResponseManagementConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ResponseManagementConstraints.
    */
  virtual uci::type::RequirementConstraintsType& enableResponseManagementConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ResponseManagementConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponseMDT& clearResponseManagementConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ResponseManagementGuidance.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ResponseManagementGuidance.
    */
  virtual const uci::type::RequirementGuidanceType& getResponseManagementGuidance() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ResponseManagementGuidance.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ResponseManagementGuidance.
    */
  virtual uci::type::RequirementGuidanceType& getResponseManagementGuidance() = 0;

  /** Sets the complex content identified by ResponseManagementGuidance to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ResponseManagementGuidance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponseMDT& setResponseManagementGuidance(const uci::type::RequirementGuidanceType& value) = 0;

  /** Returns whether the Element identified by ResponseManagementGuidance exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ResponseManagementGuidance is enabled or not.
    */
  virtual bool hasResponseManagementGuidance() const = 0;

  /** Enables the Element identified by ResponseManagementGuidance.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ResponseManagementGuidance.
    */
  virtual uci::type::RequirementGuidanceType& enableResponseManagementGuidance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ResponseManagementGuidance.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponseMDT& clearResponseManagementGuidance() = 0;

  /** Returns a const reference to the bounded list identified by Option.
    *
    * @return A const reference to the bounded list identified by Option.
    */
  virtual const uci::type::ResponseMDT::Option& getOption() const = 0;

  /** Returns a reference to the bounded list identified by Option.
    *
    * @return A reference to the bounded list identified by Option.
    */
  virtual uci::type::ResponseMDT::Option& getOption() = 0;

  /** Sets the bounded list identified by Option.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponseMDT& setOption(const uci::type::ResponseMDT::Option& value) = 0;

  /** Returns a const reference to the bounded list identified by RequirementsTemplate.
    *
    * @return A const reference to the bounded list identified by RequirementsTemplate.
    */
  virtual const uci::type::ResponseMDT::RequirementsTemplate& getRequirementsTemplate() const = 0;

  /** Returns a reference to the bounded list identified by RequirementsTemplate.
    *
    * @return A reference to the bounded list identified by RequirementsTemplate.
    */
  virtual uci::type::ResponseMDT::RequirementsTemplate& getRequirementsTemplate() = 0;

  /** Sets the bounded list identified by RequirementsTemplate.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponseMDT& setRequirementsTemplate(const uci::type::ResponseMDT::RequirementsTemplate& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Metadata.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Metadata.
    */
  virtual const uci::type::RequirementMetadataType& getMetadata() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Metadata.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Metadata.
    */
  virtual uci::type::RequirementMetadataType& getMetadata() = 0;

  /** Sets the complex content identified by Metadata to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Metadata.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponseMDT& setMetadata(const uci::type::RequirementMetadataType& value) = 0;

  /** Returns whether the Element identified by Metadata exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Metadata is enabled or not.
    */
  virtual bool hasMetadata() const = 0;

  /** Enables the Element identified by Metadata.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Metadata.
    */
  virtual uci::type::RequirementMetadataType& enableMetadata(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Metadata.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ResponseMDT& clearMetadata() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ResponseMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~ResponseMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ResponseMDT to copy from.
    */
  ResponseMDT(const ResponseMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ResponseMDT to the contents of the ResponseMDT on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ResponseMDT on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this ResponseMDT.
    * @return A reference to this ResponseMDT.
    */
  ResponseMDT& operator=(const ResponseMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_RESPONSEMDT_H

