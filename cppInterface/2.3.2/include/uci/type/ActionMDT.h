/** @file ActionMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ACTIONMDT_H
#define UCI_TYPE_ACTIONMDT_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ActionID_Type.h"
#include "uci/type/ActionTypeEnum.h"
#include "uci/type/IdentityKindInstanceType.h"
#include "uci/type/RequirementConstraintsType.h"
#include "uci/type/RequirementGuidanceType.h"
#include "uci/type/RequirementMetadataType.h"
#include "uci/type/RequirementTargetConstraintsType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ActionMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ActionMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ActionMDT.
    */
  static UCI_EXPORT ActionMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ActionMDT initializing the data accessed by the new ActionMDT using the data accessed by
    * the specified ActionMDT (cloning).
    *
    * @param accessor The ActionMDT that provides access to the data that is to be used to initialize the data accessed by
    *      the new created ActionMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ActionMDT.
    */
  static UCI_EXPORT ActionMDT& create(const ActionMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ActionMDT. Use of the specified accessor after it has been destroyed will result
    * in undefined behavior.
    *
    * @param accessor The ActionMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ActionMDT& accessor);

  /** Returns this accessor's type constant, i.e. actionMDT.
    *
    * @return This accessor's type constant, i.e. actionMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::actionMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of ActionMDT.
    *
    * @return The version that was initialized from the uci:version attribute of ActionMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ActionMDT& accessor) = 0;

  /** Indicates the target of the Action; the object the Action will be done to or for. If omitted, the Action places no
    * explicit limitation on which TargetObject it can be done to. See sibling ActionType element annotation for an overall
    * description of Action structure. Note that the term "target" is used in a general sense. For some Requirement types,
    * a more suitable term might be "subject", "point", "location", etc. For example, the "target" of a COVER Action could
    * be a blue/friendly System. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::IdentityKindInstanceType, uci::type::accessorType::identityKindInstanceType> TargetObject;

  /** Indicates a thing the sibling TargetObject must act on/against/toward to make the Action applicable. See sibling
    * ActionType element annotation for an overall description of Action structure. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::IdentityKindInstanceType, uci::type::accessorType::identityKindInstanceType> SecondaryObject;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActionID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActionID.
    */
  virtual const uci::type::ActionID_Type& getActionID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActionID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActionID.
    */
  virtual uci::type::ActionID_Type& getActionID() = 0;

  /** Sets the complex content identified by ActionID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActionID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActionMDT& setActionID(const uci::type::ActionID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ActionType.
    *
    * @return A const reference to the value of the enumeration identified by ActionType.
    */
  virtual const uci::type::ActionTypeEnum& getActionType() const = 0;

  /** Returns a reference to the value of the enumeration identified by ActionType.
    *
    * @return A reference to the value of the enumeration identified by ActionType.
    */
  virtual uci::type::ActionTypeEnum& getActionType() = 0;

  /** Sets the value of the enumeration identified by ActionType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActionMDT& setActionType(const uci::type::ActionTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by ActionType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActionMDT& setActionType(uci::type::ActionTypeEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ActionConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ActionConstraints.
    */
  virtual const uci::type::RequirementConstraintsType& getActionConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActionConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActionConstraints.
    */
  virtual uci::type::RequirementConstraintsType& getActionConstraints() = 0;

  /** Sets the complex content identified by ActionConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActionConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActionMDT& setActionConstraints(const uci::type::RequirementConstraintsType& value) = 0;

  /** Returns whether the Element identified by ActionConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActionConstraints is enabled or not.
    */
  virtual bool hasActionConstraints() const = 0;

  /** Enables the Element identified by ActionConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActionConstraints.
    */
  virtual uci::type::RequirementConstraintsType& enableActionConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActionConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActionMDT& clearActionConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActionGuidance.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActionGuidance.
    */
  virtual const uci::type::RequirementGuidanceType& getActionGuidance() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActionGuidance.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActionGuidance.
    */
  virtual uci::type::RequirementGuidanceType& getActionGuidance() = 0;

  /** Sets the complex content identified by ActionGuidance to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActionGuidance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActionMDT& setActionGuidance(const uci::type::RequirementGuidanceType& value) = 0;

  /** Returns whether the Element identified by ActionGuidance exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActionGuidance is enabled or not.
    */
  virtual bool hasActionGuidance() const = 0;

  /** Enables the Element identified by ActionGuidance.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActionGuidance.
    */
  virtual uci::type::RequirementGuidanceType& enableActionGuidance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActionGuidance.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActionMDT& clearActionGuidance() = 0;

  /** Returns a const reference to the bounded list identified by TargetObject.
    *
    * @return A const reference to the bounded list identified by TargetObject.
    */
  virtual const uci::type::ActionMDT::TargetObject& getTargetObject() const = 0;

  /** Returns a reference to the bounded list identified by TargetObject.
    *
    * @return A reference to the bounded list identified by TargetObject.
    */
  virtual uci::type::ActionMDT::TargetObject& getTargetObject() = 0;

  /** Sets the bounded list identified by TargetObject.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActionMDT& setTargetObject(const uci::type::ActionMDT::TargetObject& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * TargetObjectConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      TargetObjectConstraints.
    */
  virtual const uci::type::RequirementTargetConstraintsType& getTargetObjectConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * TargetObjectConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      TargetObjectConstraints.
    */
  virtual uci::type::RequirementTargetConstraintsType& getTargetObjectConstraints() = 0;

  /** Sets the complex content identified by TargetObjectConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TargetObjectConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActionMDT& setTargetObjectConstraints(const uci::type::RequirementTargetConstraintsType& value) = 0;

  /** Returns whether the Element identified by TargetObjectConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TargetObjectConstraints is enabled or not.
    */
  virtual bool hasTargetObjectConstraints() const = 0;

  /** Enables the Element identified by TargetObjectConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      TargetObjectConstraints.
    */
  virtual uci::type::RequirementTargetConstraintsType& enableTargetObjectConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TargetObjectConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActionMDT& clearTargetObjectConstraints() = 0;

  /** Returns a const reference to the bounded list identified by SecondaryObject.
    *
    * @return A const reference to the bounded list identified by SecondaryObject.
    */
  virtual const uci::type::ActionMDT::SecondaryObject& getSecondaryObject() const = 0;

  /** Returns a reference to the bounded list identified by SecondaryObject.
    *
    * @return A reference to the bounded list identified by SecondaryObject.
    */
  virtual uci::type::ActionMDT::SecondaryObject& getSecondaryObject() = 0;

  /** Sets the bounded list identified by SecondaryObject.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActionMDT& setSecondaryObject(const uci::type::ActionMDT::SecondaryObject& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Metadata.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Metadata.
    */
  virtual const uci::type::RequirementMetadataType& getMetadata() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Metadata.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Metadata.
    */
  virtual uci::type::RequirementMetadataType& getMetadata() = 0;

  /** Sets the complex content identified by Metadata to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Metadata.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActionMDT& setMetadata(const uci::type::RequirementMetadataType& value) = 0;

  /** Returns whether the Element identified by Metadata exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Metadata is enabled or not.
    */
  virtual bool hasMetadata() const = 0;

  /** Enables the Element identified by Metadata.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Metadata.
    */
  virtual uci::type::RequirementMetadataType& enableMetadata(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Metadata.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ActionMDT& clearMetadata() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ActionMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~ActionMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ActionMDT to copy from.
    */
  ActionMDT(const ActionMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ActionMDT to the contents of the ActionMDT on the right hand side
    * (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ActionMDT on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this ActionMDT.
    * @return A reference to this ActionMDT.
    */
  ActionMDT& operator=(const ActionMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ACTIONMDT_H

