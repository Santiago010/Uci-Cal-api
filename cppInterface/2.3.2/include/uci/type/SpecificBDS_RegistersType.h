/** @file SpecificBDS_RegistersType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SPECIFICBDS_REGISTERSTYPE_H
#define UCI_TYPE_SPECIFICBDS_REGISTERSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/AA_CodeType.h"
#include "uci/type/BDS_AddressType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SpecificBDS_RegistersType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SpecificBDS_RegistersType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SpecificBDS_RegistersType.
    */
  static UCI_EXPORT SpecificBDS_RegistersType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SpecificBDS_RegistersType initializing the data accessed by the new
    * SpecificBDS_RegistersType using the data accessed by the specified SpecificBDS_RegistersType (cloning).
    *
    * @param accessor The SpecificBDS_RegistersType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created SpecificBDS_RegistersType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SpecificBDS_RegistersType.
    */
  static UCI_EXPORT SpecificBDS_RegistersType& create(const SpecificBDS_RegistersType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SpecificBDS_RegistersType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The SpecificBDS_RegistersType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SpecificBDS_RegistersType& accessor);

  /** Returns this accessor's type constant, i.e. specificBDS_RegistersType.
    *
    * @return This accessor's type constant, i.e. specificBDS_RegistersType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::specificBDS_RegistersType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SpecificBDS_RegistersType.
    *
    * @return The version that was initialized from the uci:version attribute of SpecificBDS_RegistersType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SpecificBDS_RegistersType& accessor) = 0;

  /** Specifies which AA Codes will be interrogated for the BDS Registers in the next field. If omitted, implies all
    * targets. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::AA_CodeType, uci::type::accessorType::aA_CodeType> AA_Code;

  /** Used to acquire non-typical BDS Registers, such as 51, 52 or 53. Interrogator will determine if requested information
    * is available in transponder and may reject the request or exclude the information. [Occurrences: Minimum: 1; Maximum:
    * 6]
    */
  typedef uci::base::BoundedList<uci::type::BDS_AddressType, uci::type::accessorType::bDS_AddressType> BDS_Address;

  /** Returns a const reference to the bounded list identified by AA_Code.
    *
    * @return A const reference to the bounded list identified by AA_Code.
    */
  virtual const uci::type::SpecificBDS_RegistersType::AA_Code& getAA_Code() const = 0;

  /** Returns a reference to the bounded list identified by AA_Code.
    *
    * @return A reference to the bounded list identified by AA_Code.
    */
  virtual uci::type::SpecificBDS_RegistersType::AA_Code& getAA_Code() = 0;

  /** Sets the bounded list identified by AA_Code.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SpecificBDS_RegistersType& setAA_Code(const uci::type::SpecificBDS_RegistersType::AA_Code& value) = 0;

  /** Returns a const reference to the bounded list identified by BDS_Address.
    *
    * @return A const reference to the bounded list identified by BDS_Address.
    */
  virtual const uci::type::SpecificBDS_RegistersType::BDS_Address& getBDS_Address() const = 0;

  /** Returns a reference to the bounded list identified by BDS_Address.
    *
    * @return A reference to the bounded list identified by BDS_Address.
    */
  virtual uci::type::SpecificBDS_RegistersType::BDS_Address& getBDS_Address() = 0;

  /** Sets the bounded list identified by BDS_Address.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SpecificBDS_RegistersType& setBDS_Address(const uci::type::SpecificBDS_RegistersType::BDS_Address& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SpecificBDS_RegistersType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SpecificBDS_RegistersType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SpecificBDS_RegistersType to copy from.
    */
  SpecificBDS_RegistersType(const SpecificBDS_RegistersType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SpecificBDS_RegistersType to the contents of the
    * SpecificBDS_RegistersType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The SpecificBDS_RegistersType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this SpecificBDS_RegistersType.
    * @return A reference to this SpecificBDS_RegistersType.
    */
  SpecificBDS_RegistersType& operator=(const SpecificBDS_RegistersType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SPECIFICBDS_REGISTERSTYPE_H

