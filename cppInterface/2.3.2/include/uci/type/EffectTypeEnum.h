/** @file EffectTypeEnum.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_EFFECTTYPEENUM_H
#define UCI_TYPE_EFFECTTYPEENUM_H

#include <map>
#include <sstream>

#include "uci/base/Accessor.h"
#include "uci/base/export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the taxonomy of the Effect form of C2 Requirement. The taxonomy is a combination of effects described in
  * various Joint Publications, training documents for operational planning, etc.
  */
class EffectTypeEnum : public virtual uci::base::Accessor {
public:

  /** The following are the enumerated items that comprise this enumeration */
  enum EnumerationItem {

    /** Enumerated item that indicates that the enumeration has not been set */
    enumNotSet,

    /** To destroy or kill (troops, for example) by use of firepower. */
    UCI_ATTRIT,

    /** Deny enemy access to an area or prevent advance in a particular direction. */
    UCI_BLOCK,

    /** Force an enemy to take a desired direction in its actions to gain an advantage. To orient the perception of a
      * situation or event toward a desired outcome.
      */
    UCI_CANALIZE,

    /** Remove all enemy, and their infrastructure or capability, from an assigned area and prevent their return. */
    UCI_CLEAR,

    /** Use force, the threat of force or other potentially prejudicial means to persuade an individual or group or groups to
      * adopt a certain pattern of behavior against their wishes.
      */
    UCI_COERCE,

    /** 1) Force, through kinetic or non-kinetic action, a group or individual to undertake a desired course of action. 2) To
      * force, drive or constrain. 3) To make necessary.
      */
    UCI_COMPEL,

    /** Stop, hold or surround an enemy or cause them to center their activity on a front and prevent their withdrawing any
      * part of their forces for use elsewhere including preventing them from leaving a given area.
      */
    UCI_CONTAIN,

    /** 1) Bring to belief, consent or a course of action. 2) To overcome by argument. */
    UCI_CONVINCE,

    /** To reduce the soundness, effectiveness or perfection of. */
    UCI_DAMAGE,

    /** Cause an individual or group or groups to believe what is not true by manipulation, distortion or falsification of
      * information to induce them to react in a manner prejudicial to their interests.
      */
    UCI_DECEIVE,

    /** Diminish the effectiveness of the enemy to the extent that they are unable or unwilling to participate further in the
      * battle or at least cannot fulfill their mission.
      */
    UCI_DEFEAT,

    /** 1) To damage the condition of the target so that it cannot function as intended nor be restored in a usable
      * condition. 2) Damage done to the function is permanent and all aspects of the function have been affected. 3) A
      * function's operation is permanently impaired and the damage extends to all facets of the function's operation. 4) To
      * identify the most effective way to eliminate enemy capabilities; it may be attained by sequentially applying combat
      * power over time or with a single, decisive attack.
      */
    UCI_DEFEAT_DESTROY,

    /** To compel the enemy to expose forces by reacting to a specific action; it requires enemy commanders to either accept
      * neutralization of part of their force or risk its destruction while repositioning.
      */
    UCI_DEFEAT_DISLOCATE,

    /** To exploit the effects of dislocation and destruction to shatter the enemy's coherence; it typically follows
      * destruction and dislocation, coupled with the loss of capabilities that enemy commanders use to develop and maintain
      * situational understanding.
      */
    UCI_DEFEAT_DISINTEGRATE,

    /** To limit the enemy's ability to conduct operations effectively by marginalizing critical capabilities or limiting the
      * enemy's ability to influence events; it exposes the enemy to continued degradation through the massed effects of
      * other defeat mechanisms.
      */
    UCI_DEFEAT_ISOLATE,

    /** To keep from harm, attack, injury or exploitation. Activities undertaken to neutralize or reduce the effectiveness of
      * hostile action against US, allied, and partner systems.
      */
    UCI_DEFEND,

    /** 1) Damage done to the function is permanent, but only portions of the function were affected; that is, the function
      * still operates, but not fully. 2) A function's operation is permanently impaired, but the damage does not extend to
      * all facets of the function's operation.
      */
    UCI_DEGRADE,

    /** Operation in which a force under pressure trades space for time by slowing down the enemy's momentum and inflicting
      * maximum damage without, in principle, becoming decisively engaged.
      */
    UCI_DELAY,

    /** 1) Prevent access or use by blocking, disruption, dislocation and/or fire. Can be achieved either by holding or
      * covering the area by direct or indirect fire. To deny without holding requires surveillance. 2) To hinder the enemy
      * the use of space, personnel or facilities. It may include destruction, removal, contamination or erection of
      * obstructions. 3) Damage done to the function is only temporary but all aspects of the function were affected. 4) A
      * function's operation is impaired over the short term but the damage extends to all facets of the function's
      * operation.
      */
    UCI_DENY,

    /** Render an individual or group or groups unstable or create the conditions for collapse. */
    UCI_DESTABILIZE,

    /** Discourage an individual or group or groups from carrying out a certain action by convincing them that the
      * consequences of their actions outweigh the potential gains.
      */
    UCI_DETER,

    /** 1) To make less or cause to appear less. 2) To reduce the effectiveness of an activity. This is similar to degrade
      * without the kinetic overtones.
      */
    UCI_DIMINISH,

    /** 1) To break apart, disturb or interrupt a function. 2) Damage done to the function is temporary and only portions of
      * the function were affected. 3) A function's operation is impaired over the short term and the damage does not extend
      * to all facets of the function's operations.
      */
    UCI_DISRUPT,

    /** To restrict the enemy's capabilities to pursue a particular COA. */
    UCI_DIVERT,

    /** To increase or make greater the capabilities of a force or a people. */
    UCI_ENHANCE,

    /** To gather information that will enable opposition ability to conduct operations to induce other effects. */
    UCI_EXPLOIT,

    /** 1) To make known or cause to be visible to public view. 2) To make visible; to reveal something undesirable or
      * injurious.
      */
    UCI_EXPOSE,

    /** To disturb the rest of the troops, curtail their movement and lower morale by threat of loss. */
    UCI_HARASS,

    /** 1) Selected projection or distortion of the truth to persuade the opposition to act in a manner detrimental to
      * mission accomplishment while benefiting accomplishment of friendly objectives. 2) To cause a change in the character,
      * thought or action of a particular entity.
      */
    UCI_INFLUENCE,

    /** To reduce the options or COAs available to the enemy commander. */
    UCI_LIMIT,

    /** To create a false perception that leads the opposition to act in a manner detrimental to mission accomplishment while
      * benefiting accomplishment of friendly objectives.
      */
    UCI_MISLEAD,

    /** 1) To render an enemy weapon system and maneuver units ineffective or unusable for a specific period of time. 2) To
      * render ineffective, invalid or unable to perform a particular task or function. 3) To counteract the activity or
      * effect of.
      */
    UCI_NEGATE_NEUTRALIZE,

    /** Indicates an other type of Effect. Use of this enumerate should avoided or at least minimized. If used, it should
      * only be used temporarily while proposing the addition of new well named enumerate(s) to the standard.
      */
    UCI_OTHER,

    /** 1) To deprive of hope or power of acting or succeeding. 2) To keep from happening to avert. */
    UCI_PREVENT,

    /** Gain possession by direct or indirect means and seek to retain. This may be protecting an individual or group or
      * groups from danger or threat.
      */
    UCI_SECURE,

    /** Gain possession of an area or person, with or without the use of force. */
    UCI_SEIZE,

    /** 1) To determine or direct the course of events. 2) To modify behavior by rewarding changes that tend toward a desired
      * response. 3) To cause to conform to a particular form or pattern.
      */
    UCI_SHAPE,

    /** Impose security and control over an area while employing military capabilities to restore services and support
      * civilian agencies. The primary method through which friendly forces affect civilians in order to attain conditions
      * that support establishing a lasting, stable peace.
      */
    UCI_STABILIZE,

    /** To maintain the threat—or actual use—of lethal or nonlethal force to establish control and dominance; effect
      * behavioral change; or enforce cessation of hostilities, peace agreements, or other arrangements.
      */
    UCI_STABILIZE_COMPEL,

    /** To establish public order and safety; secure borders, routes, sensitive sites, population centers, and individuals;
      * and physically occupy key terrain and facilities.
      */
    UCI_STABILIZE_CONTROL,

    /** To alter the opinions and attitudes of the host nation population through IRCs, presence, and conduct. */
    UCI_STABILIZE_INFLUENCE,

    /** To establish, reinforce, or set the conditions necessary for the other instruments of national power to function
      * effectively, coordinating and cooperating closely with host nation civilian agencies and assisting aid organizations
      * as necessary to secure humanitarian access to vulnerable populations.
      */
    UCI_STABILIZE_SUPPORT,

    /** Aid, complement or sustain another force, individual or group or groups. */
    UCI_SUPPORT,

    /** 1) Involves temporary or transient degradation of an actual or suspected enemy weapon system for the purpose of
      * degrading its performance below the level needed to fulfill its mission objectives at a specific time for a specific
      * duration. 2) Temporary or transient degradation by an opposing force of the performance of a weapons system below the
      * level needed to fulfill its mission objectives.
      */
    UCI_SUPPRESS,

    /** Maintain the necessary levels of combat power for the duration required to achieve objectives. */
    UCI_SUSTAIN,

    /** Force an enemy to adopt an axis of advance/approach which the enemy otherwise might not select. */
    UCI_TURN,

    /** 1) To seize and hold, as the power, position or rights of another, by force and without right or authority. 2) To
      * take over or occupy physically as territory or possessions.
      */
    UCI_USURP,

    /** Enumerated item that indicates maximum enumerated item exclusive of this item */
    enumMaxExclusive
  };

  /** Returns this accessor's type constant, i.e. effectTypeEnum.
    *
    * @return This accessor's type constant, i.e. effectTypeEnum.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::effectTypeEnum;
  }

  /** The assignment operator. Sets the contents of this EffectTypeEnum to the contents of the EffectTypeEnum on the right
    * hand side (rhs) of the assignment operator.
    *
    * @param rhs The EffectTypeEnum on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this EffectTypeEnum.
    * @return A reference to this EffectTypeEnum.
    */
  EffectTypeEnum& operator=(const EffectTypeEnum& rhs) {
    setValue(rhs.getValue());
    return *this;
  }

  /** The assignment operator that sets the value of this EffectTypeEnum enumeration to the EnumerationItem on the right
    * hand side of the assignment operator.
    *
    * @param rhs The EnumerationItem whose value is to be assigned to this EffectTypeEnum enumeration.
    * @return A reference to this EffectTypeEnum enumeration.
    */
  EffectTypeEnum& operator=(EnumerationItem rhs) {
    setValue(rhs);
    return *this;
  }

  /** Sets the value of this EffectTypeEnum enumeration to the value of the specified enumeration item.
    *
    * @param item The EnumerationItem whose value is to be used to set the value of this EffectTypeEnum enumeration.
    */
  virtual void setValue(EnumerationItem item) = 0;

  /** Returns the value of this EffectTypeEnum enumeration.
    *
    * @param testForValidity=true Specifies whether this EffectTypeEnum enumeration should be validated (true) or not
    *      (false) as part of retrieving its value.
    * @return The value of this EffectTypeEnum enumeration.
    */
  virtual EnumerationItem getValue(bool testForValidity=true) const = 0;

  /** Returns the number of items in this EffectTypeEnum enumeration.
    *
    * @return The number of items in this EffectTypeEnum enumeration.
    */
  int getNumberOfItems() const noexception {
    return 47;
  }

  /** Returns whether this EffectTypeEnum enumeration is valid or not. A EffectTypeEnum enumeration is valid if its value
    * is one of the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @return A flag indicating whether this EffectTypeEnum enumeration is valid (true) or not (false).
    */
  virtual bool isValid() const noexception {
    return isValid(getValue(false));
  }

  /** Returns whether the specified enumeration item is valid or not. A enumeration item is valid if its value is one of
    * the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @param item The EnumerationItem to test.
    * @return A flag indicating whether the specified EnumerationItem is valid (true) or not (false).
    */
  static bool isValid(EnumerationItem item) noexception {
    return (item > enumNotSet) && (item < enumMaxExclusive);
  }

  /** Returns whether the specified name item is valid or not. A name is valid if it is the name of one of the enumeration
    * items other than enumNotSet and enumMaxExclusive.
    *
    * @param name The name to test.
    * @return A flag indicating whether the specified name is valid (true) or not (false).
    */
  static bool isValid(const std::string& name) noexception {
    FromNameTable::const_iterator iter = m_fromNameTable.find(name);
    return !(iter == m_fromNameTable.end());
  }

  /** Tests whether the value of the EffectTypeEnum enumeration on the right hand side of the == operator is equal to the
    * value as this EffectTypeEnum enumeration.
    *
    * @param rhs The EffectTypeEnum enumeration whose value is to be compared against the value of this EffectTypeEnum
    *      enumeration.
    * @return True if the value of the specified EffectTypeEnum enumeration (rhs) is equal to the value of this
    *      EffectTypeEnum enumeration, false otherwise.
    */
  bool operator==(const EffectTypeEnum& rhs) const {
    return getValue() == rhs.getValue();
  }

  /** Tests whether the value of the EffectTypeEnum enumeration on the right hand side of the != operator is not equal to
    * the value as this EffectTypeEnum enumeration.
    *
    * @param rhs The EffectTypeEnum enumeration whose value is to be compared against the value of this EffectTypeEnum
    *      enumeration.
    * @return True if the value of the specified EffectTypeEnum enumeration (rhs) is not equal to the value of this
    *      EffectTypeEnum enumeration, false otherwise.
    */
  bool operator!=(const EffectTypeEnum& rhs) const {
    return getValue() != rhs.getValue();
  }

  /** Tests whether the value of the EffectTypeEnum enumeration on the right hand side of the < operator is less than the
    * value as this EffectTypeEnum enumeration.
    *
    * @param rhs The EffectTypeEnum enumeration whose value is to be compared against the value of this EffectTypeEnum
    *      enumeration.
    * @return True if the value of the specified EffectTypeEnum enumeration (rhs) is less than the value of this
    *      EffectTypeEnum enumeration, false otherwise.
    */
  bool operator<(const EffectTypeEnum& rhs) const {
    return getValue() < rhs.getValue();
  }

  /** Tests whether the value of the EffectTypeEnum enumeration on the right hand side of the <= operator is less than or
    * equal to the value as this EffectTypeEnum enumeration.
    *
    * @param rhs The EffectTypeEnum enumeration whose value is to be compared against the value of this EffectTypeEnum
    *      enumeration.
    * @return True if the value of the specified EffectTypeEnum enumeration (rhs) is less than or equal to the value of
    *      this EffectTypeEnum enumeration, false otherwise.
    */
  bool operator<=(const EffectTypeEnum& rhs) const {
    return getValue() <= rhs.getValue();
  }

  /** Tests whether the value of the EffectTypeEnum enumeration on the right hand side of the > operator is greater than
    * the value as this EffectTypeEnum enumeration.
    *
    * @param rhs The EffectTypeEnum enumeration whose value is to be compared against the value of this EffectTypeEnum
    *      enumeration.
    * @return True if the value of the specified EffectTypeEnum enumeration (rhs) is greater than the value of this
    *      EffectTypeEnum enumeration, false otherwise.
    */
  bool operator>(const EffectTypeEnum& rhs) const {
    return getValue() > rhs.getValue();
  }

  /** Tests whether the value of the EffectTypeEnum enumeration on the right hand side of the >= operator is greater than
    * or equal to the value as this EffectTypeEnum enumeration.
    *
    * @param rhs The EffectTypeEnum enumeration whose value is to be compared against the value of this EffectTypeEnum
    *      enumeration.
    * @return True if the value of the specified EffectTypeEnum enumeration (rhs) is greater than or equal to the value of
    *      this EffectTypeEnum enumeration, false otherwise.
    */
  bool operator>=(const EffectTypeEnum& rhs) const {
    return getValue() >= rhs.getValue();
  }

  /** Tests whether the value of this EffectTypeEnum enumeration is equal to the value of the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this EffectTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is equal to the value of this EffectTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator==(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() == rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is equal to the value of the specified EffectTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified EffectTypeEnum
    *      enumeration.
    * @param rhs The EffectTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is equal to the value of the EffectTypeEnum enumeration (rhs),
    *      false otherwise.
    */
  friend bool operator==(EnumerationItem lhs, const EffectTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs == rhs.getValue();
  }

  /** Tests whether the value of this EffectTypeEnum enumeration is not equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this EffectTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is not equal to the value of this EffectTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator!=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() != rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is not equal to the value of the specified EffectTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified EffectTypeEnum
    *      enumeration.
    * @param rhs The EffectTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is not equal to the value of the EffectTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator!=(EnumerationItem lhs, const EffectTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs != rhs.getValue();
  }

  /** Tests whether the value of this EffectTypeEnum enumeration is less than the value of the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this EffectTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than the value of this EffectTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator<(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() < rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than the value of the specified EffectTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified EffectTypeEnum
    *      enumeration.
    * @param rhs The EffectTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than the value of the EffectTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator<(EnumerationItem lhs, const EffectTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs < rhs.getValue();
  }

  /** Tests whether the value of this EffectTypeEnum enumeration is less than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this EffectTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than or equal to the value of this EffectTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator<=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() <= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than or equal to the value of the specified
    * EffectTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified EffectTypeEnum
    *      enumeration.
    * @param rhs The EffectTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than or equal to the value of the EffectTypeEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator<=(EnumerationItem lhs, const EffectTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs <= rhs.getValue();
  }

  /** Tests whether the value of this EffectTypeEnum enumeration is greater than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this EffectTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than the value of this EffectTypeEnum enumeration,
    *      false otherwise.
    */
  bool operator>(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() > rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than the value of the specified EffectTypeEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified EffectTypeEnum
    *      enumeration.
    * @param rhs The EffectTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than the value of the EffectTypeEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator>(EnumerationItem lhs, const EffectTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs > rhs.getValue();
  }

  /** Tests whether the value of this EffectTypeEnum enumeration is greater than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this EffectTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than or equal to the value of this EffectTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator>=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() >= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than or equal to the value of the specified
    * EffectTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified EffectTypeEnum
    *      enumeration.
    * @param rhs The EffectTypeEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than or equal to the value of the EffectTypeEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator>=(EnumerationItem lhs, const EffectTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs >= rhs.getValue();
  }

  /** Returns the name of the specified enumeration item.
    *
    * @param item The enumeration item whose name is to be returned.
    * @return The enumeration item's name if valid.
    */
  static std::string toName(EnumerationItem item) {
    ToNameTable::const_iterator iter = m_toNameTable.find(item);
    if (iter == m_toNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to convert enumerated item to its name, item not found in mapping: " << item;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Returns the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item to be returned.
    * @return The enumeration item having the specified name.
    */
  static EnumerationItem fromName(const std::string& itemName) {
    FromNameTable::const_iterator iter = m_fromNameTable.find(itemName);
    if (iter == m_fromNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to return enumerated item having specified name, name not found in mapping: " << itemName;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Return the name of the enumeration item that the value of this EffectTypeEnum enumeration is set to.
    *
    * @return The name of the enumeration item.
    */
  virtual std::string toName() const {
    return toName(getValue());
  }

  /** Sets the value of this EffectTypeEnum enumeration to the value of the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item whose value is to be used to set this EffectTypeEnum enumeration to.
    */
  virtual void setValueFromName(const std::string& itemName) {
    setValue(fromName(itemName));
  }

protected:

  /** The default constructor. In addition to constructing a new EffectTypeEnum, this constructor also makes sure the
    * conversion tables are initialized.
    */
  EffectTypeEnum() {
  }

  /** The destructor [only available to derived classes]. */
  ~EffectTypeEnum() {
  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param additionalDescription An additional description to include in the error message should an exception be thrown.
    * @param item The enumeration item to test.
    */
  static void testForValidItem(const char* additionalDescription, EnumerationItem item) {
    if (!isValid(item)) {
      std::ostringstream oStream;
      oStream << additionalDescription << ": " << item << " (item must be between " << enumNotSet << " and "<< enumMaxExclusive << " exclusive)";
      throw uci::base::UCIException(oStream.str(), 0);
    }

  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param item The enumeration item to test.
    */
  static void testForValidItem(EnumerationItem item) {
    testForValidItem("Invalid enumerated item specified", item);
  }

private:

  /** The type of table that is used to lookup the name of a enumeration item given that enumeration item. */
  typedef std::map<EnumerationItem, const std::string> ToNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  typedef std::map<const std::string, EnumerationItem> FromNameTable;

  /** The table that is used to lookup the name of a enumeration item given that enumeration item. */
  static UCI_EXPORT ToNameTable m_toNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  static UCI_EXPORT FromNameTable m_fromNameTable;

protected:

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The EffectTypeEnum to copy from.
    */
  EffectTypeEnum(const EffectTypeEnum& rhs) {
    (void)rhs;
  }

};

} // namespace type
} // namespace uci

template<typename charT, typename traits>
std::basic_ostream<charT, traits>&
operator<<(std::basic_ostream<charT, traits>& oStream, const uci::type::EffectTypeEnum& enumeration)
{
  oStream << enumeration.toName();
  return oStream;
}

#endif // UCI_TYPE_EFFECTTYPEENUM_H

