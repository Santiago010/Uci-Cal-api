/** @file NITF_PackingPlanType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_NITF_PACKINGPLANTYPE_H
#define UCI_TYPE_NITF_PACKINGPLANTYPE_H

#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ACFTB_Type.h"
#include "AIMIDB_Type.h"
#include "EXPLTB_Type.h"
#include "EmptyType.h"
#include "FileHeaderType.h"
#include "ImageSubheaderType.h"
#include "MSTGTA_Type.h"
#include "NITF_PackingPlanPET.h"
#include "PATCHB_Type.h"
#include "SECTGA_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type is a tailored reproduction of data definitions included in NITF as described in MIL-STD-2500C and companion
  * Appendices. This data must flow from Task or Command source to recipient so that the recipient can populate the
  * resulting Products with this data to enable PED and other functions. Under most circumstances, UCI doesn't reproduce
  * other standards "in-band", in UCI messages. An exception is made in this case because to do otherwise would disrupt
  * C2 and PED. NOTE: This version of the NITF_PackingPlanType suffers from the following problems: Most elements are one
  * space longer than allowed by NITF; some elements' lengths are off by more, short or long; many TREs and elements are
  * extraneous (set by platform, not needed in UCI Task message), while other required tasking authority fields are
  * missing; and many fields are free text that could be restricted by regular expressions to meet NITF standards. The
  * new variants of the PackingPlanPET resolve these problems for MIL-STD-2500A, B, C.
  */
class NITF_PackingPlanType : public virtual NITF_PackingPlanPET {
public:

  /** This method constructs a new NITF_PackingPlanType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed NITF_PackingPlanType.
    */
  static UCI_EXPORT NITF_PackingPlanType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new NITF_PackingPlanType initializing the data accessed by the new NITF_PackingPlanType
    * using the data accessed by the specified NITF_PackingPlanType (cloning).
    *
    * @param accessor The NITF_PackingPlanType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created NITF_PackingPlanType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed NITF_PackingPlanType.
    */
  static UCI_EXPORT NITF_PackingPlanType& create(const NITF_PackingPlanType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified NITF_PackingPlanType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The NITF_PackingPlanType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(NITF_PackingPlanType& accessor);

  /** Returns this accessor's type constant, i.e. nITF_PackingPlanType.
    *
    * @return This accessor's type constant, i.e. nITF_PackingPlanType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::nITF_PackingPlanType;
  }

  /** Returns the version that was initialized from the uci:version attribute of NITF_PackingPlanType.
    *
    * @return The version that was initialized from the uci:version attribute of NITF_PackingPlanType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const NITF_PackingPlanType& accessor) = 0;

  /** Information to be used for populating the Secondary Target Revision A (SECTGA) tagged record extension (TRE) as
    * defined by the Compendium of Controlled Extensions (CE). Size of list is based on the number of allowed SECTGA
    * extensions that can exist in a single NITF file. [Occurrences: Minimum: 0; Maximum: 250]
    */
  typedef uci::base::BoundedList<uci::type::SECTGA_Type, uci::type::accessorType::sECTGA_Type> SECTGA;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FileHeader.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FileHeader.
    */
  virtual const uci::type::FileHeaderType& getFileHeader() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FileHeader.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FileHeader.
    */
  virtual uci::type::FileHeaderType& getFileHeader() = 0;

  /** Sets the complex content identified by FileHeader to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FileHeader.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& setFileHeader(const uci::type::FileHeaderType& value) = 0;

  /** Returns whether the Element identified by FileHeader exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FileHeader is enabled or not.
    */
  virtual bool hasFileHeader() const = 0;

  /** Enables the Element identified by FileHeader.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by FileHeader.
    */
  virtual uci::type::FileHeaderType& enableFileHeader(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by FileHeader.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& clearFileHeader() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ImageSubheader.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ImageSubheader.
    */
  virtual const uci::type::ImageSubheaderType& getImageSubheader() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ImageSubheader.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ImageSubheader.
    */
  virtual uci::type::ImageSubheaderType& getImageSubheader() = 0;

  /** Sets the complex content identified by ImageSubheader to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ImageSubheader.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& setImageSubheader(const uci::type::ImageSubheaderType& value) = 0;

  /** Returns whether the Element identified by ImageSubheader exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageSubheader is enabled or not.
    */
  virtual bool hasImageSubheader() const = 0;

  /** Enables the Element identified by ImageSubheader.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ImageSubheader.
    */
  virtual uci::type::ImageSubheaderType& enableImageSubheader(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageSubheader.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& clearImageSubheader() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ACFTB.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ACFTB.
    */
  virtual const uci::type::ACFTB_Type& getACFTB() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ACFTB.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ACFTB.
    */
  virtual uci::type::ACFTB_Type& getACFTB() = 0;

  /** Sets the complex content identified by ACFTB to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ACFTB.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& setACFTB(const uci::type::ACFTB_Type& value) = 0;

  /** Returns whether the Element identified by ACFTB exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ACFTB is enabled or not.
    */
  virtual bool hasACFTB() const = 0;

  /** Enables the Element identified by ACFTB.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ACFTB.
    */
  virtual uci::type::ACFTB_Type& enableACFTB(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ACFTB.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& clearACFTB() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AIMIDB.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AIMIDB.
    */
  virtual const uci::type::AIMIDB_Type& getAIMIDB() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AIMIDB.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AIMIDB.
    */
  virtual uci::type::AIMIDB_Type& getAIMIDB() = 0;

  /** Sets the complex content identified by AIMIDB to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AIMIDB.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& setAIMIDB(const uci::type::AIMIDB_Type& value) = 0;

  /** Returns whether the Element identified by AIMIDB exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AIMIDB is enabled or not.
    */
  virtual bool hasAIMIDB() const = 0;

  /** Enables the Element identified by AIMIDB.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AIMIDB.
    */
  virtual uci::type::AIMIDB_Type& enableAIMIDB(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AIMIDB.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& clearAIMIDB() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EXPLTB.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EXPLTB.
    */
  virtual const uci::type::EXPLTB_Type& getEXPLTB() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EXPLTB.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EXPLTB.
    */
  virtual uci::type::EXPLTB_Type& getEXPLTB() = 0;

  /** Sets the complex content identified by EXPLTB to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EXPLTB.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& setEXPLTB(const uci::type::EXPLTB_Type& value) = 0;

  /** Returns whether the Element identified by EXPLTB exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EXPLTB is enabled or not.
    */
  virtual bool hasEXPLTB() const = 0;

  /** Enables the Element identified by EXPLTB.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EXPLTB.
    */
  virtual uci::type::EXPLTB_Type& enableEXPLTB(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EXPLTB.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& clearEXPLTB() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by MPDSRA.
    *
    * @return A const reference to the accessor that provides access to the string identified by MPDSRA.
    */
  virtual const uci::type::EmptyType& getMPDSRA() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by MPDSRA.
    *
    * @return A reference to the accessor that provides access to the string identified by MPDSRA.
    */
  virtual uci::type::EmptyType& getMPDSRA() = 0;

  /** Sets the string identified by MPDSRA to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by MPDSRA.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& setMPDSRA(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by MPDSRA to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& setMPDSRA(const std::string& value) = 0;

  /** Sets the string identified by MPDSRA to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& setMPDSRA(const char* value) = 0;

  /** Returns whether the Element identified by MPDSRA exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MPDSRA is enabled or not.
    */
  virtual bool hasMPDSRA() const = 0;

  /** Enables the Element identified by MPDSRA.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by MPDSRA.
    */
  virtual uci::type::EmptyType& enableMPDSRA(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MPDSRA.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& clearMPDSRA() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PATCHB.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PATCHB.
    */
  virtual const uci::type::PATCHB_Type& getPATCHB() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PATCHB.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PATCHB.
    */
  virtual uci::type::PATCHB_Type& getPATCHB() = 0;

  /** Sets the complex content identified by PATCHB to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PATCHB.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& setPATCHB(const uci::type::PATCHB_Type& value) = 0;

  /** Returns whether the Element identified by PATCHB exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PATCHB is enabled or not.
    */
  virtual bool hasPATCHB() const = 0;

  /** Enables the Element identified by PATCHB.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PATCHB.
    */
  virtual uci::type::PATCHB_Type& enablePATCHB(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PATCHB.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& clearPATCHB() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by MSTGTA.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by MSTGTA.
    */
  virtual const uci::type::MSTGTA_Type& getMSTGTA() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MSTGTA.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MSTGTA.
    */
  virtual uci::type::MSTGTA_Type& getMSTGTA() = 0;

  /** Sets the complex content identified by MSTGTA to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MSTGTA.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& setMSTGTA(const uci::type::MSTGTA_Type& value) = 0;

  /** Returns whether the Element identified by MSTGTA exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MSTGTA is enabled or not.
    */
  virtual bool hasMSTGTA() const = 0;

  /** Enables the Element identified by MSTGTA.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MSTGTA.
    */
  virtual uci::type::MSTGTA_Type& enableMSTGTA(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MSTGTA.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& clearMSTGTA() = 0;

  /** Returns a const reference to the bounded list identified by SECTGA.
    *
    * @return A const reference to the bounded list identified by SECTGA.
    */
  virtual const uci::type::NITF_PackingPlanType::SECTGA& getSECTGA() const = 0;

  /** Returns a reference to the bounded list identified by SECTGA.
    *
    * @return A reference to the bounded list identified by SECTGA.
    */
  virtual uci::type::NITF_PackingPlanType::SECTGA& getSECTGA() = 0;

  /** Sets the bounded list identified by SECTGA.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::NITF_PackingPlanType& setSECTGA(const uci::type::NITF_PackingPlanType::SECTGA& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  NITF_PackingPlanType() {
  }

  /** The destructor [only available to derived classes]. */
  ~NITF_PackingPlanType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The NITF_PackingPlanType to copy from.
    */
  NITF_PackingPlanType(const NITF_PackingPlanType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this NITF_PackingPlanType to the contents of the NITF_PackingPlanType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The NITF_PackingPlanType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this NITF_PackingPlanType.
    * @return A reference to this NITF_PackingPlanType.
    */
  NITF_PackingPlanType& operator=(const NITF_PackingPlanType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_NITF_PACKINGPLANTYPE_H

