/** @file SensorConstraintsBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SENSORCONSTRAINTSBASETYPE_H
#define UCI_TYPE_SENSORCONSTRAINTSBASETYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/UnsignedShortAccessor.h"
#include "uci/base/export.h"
#include "uci/type/CountryCodeType.h"
#include "uci/type/EntityBasingEnum.h"
#include "uci/type/IEEE_FrequencyBandEnum.h"
#include "uci/type/SensorCategoryEnum.h"
#include "uci/type/SensorSpectrumEnum.h"
#include "uci/type/SensorTypeEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SensorConstraintsBaseType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SensorConstraintsBaseType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SensorConstraintsBaseType.
    */
  static UCI_EXPORT SensorConstraintsBaseType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SensorConstraintsBaseType initializing the data accessed by the new
    * SensorConstraintsBaseType using the data accessed by the specified SensorConstraintsBaseType (cloning).
    *
    * @param accessor The SensorConstraintsBaseType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created SensorConstraintsBaseType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SensorConstraintsBaseType.
    */
  static UCI_EXPORT SensorConstraintsBaseType& create(const SensorConstraintsBaseType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SensorConstraintsBaseType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The SensorConstraintsBaseType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SensorConstraintsBaseType& accessor);

  /** Returns this accessor's type constant, i.e. sensorConstraintsBaseType.
    *
    * @return This accessor's type constant, i.e. sensorConstraintsBaseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sensorConstraintsBaseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SensorConstraintsBaseType.
    *
    * @return The version that was initialized from the uci:version attribute of SensorConstraintsBaseType.
    */
  static std::string getUCITypeVersion() {
    return "000.002.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SensorConstraintsBaseType& accessor) = 0;

  /** Indicates a type of sensor. List size for this element is based on "Select All That Apply" condition. [Occurrences:
    * Minimum: 0; Maximum: 8]
    */
  typedef uci::base::BoundedList<uci::type::SensorTypeEnum, uci::type::accessorType::sensorTypeEnum> SensorType;

  /** Indicates an EOIR spectrum of a sensor. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 14]
    */
  typedef uci::base::BoundedList<uci::type::SensorSpectrumEnum, uci::type::accessorType::sensorSpectrumEnum> EOIR_Spectrum;

  /** Indicates the radio frequency of a sensor. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 12]
    */
  typedef uci::base::BoundedList<uci::type::IEEE_FrequencyBandEnum, uci::type::accessorType::iEEE_FrequencyBandEnum> RF_Spectrum;

  /** Indicates a logical grouping of sensors with certain owner/operator or sensor characteristics. List size for this
    * element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 10]
    */
  typedef uci::base::BoundedList<uci::type::SensorCategoryEnum, uci::type::accessorType::sensorCategoryEnum> SensorCategory;

  /** Indicates the Air Force Space Command ID of a sensor system. The unique identifier of a sensor or site as assigned by
    * Air Force Space Command's AFSPC/A3Z and 614th AOC personnel as the authoritative source for sensor numbers and site
    * identifiers. A common range is [0,999]. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::base::UnsignedShortAccessor, uci::base::accessorType::unsignedShortAccessor> SensorSystemIdentity;

  /** Indicates the geographic/orbital domain of operations of a sensor system. List size for this element is based on
    * "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 11]
    */
  typedef uci::base::BoundedList<uci::type::EntityBasingEnum, uci::type::accessorType::entityBasingEnum> SensorBasing;

  /** Returns a const reference to the bounded list identified by SensorType.
    *
    * @return A const reference to the bounded list identified by SensorType.
    */
  virtual const uci::type::SensorConstraintsBaseType::SensorType& getSensorType() const = 0;

  /** Returns a reference to the bounded list identified by SensorType.
    *
    * @return A reference to the bounded list identified by SensorType.
    */
  virtual uci::type::SensorConstraintsBaseType::SensorType& getSensorType() = 0;

  /** Sets the bounded list identified by SensorType.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SensorConstraintsBaseType& setSensorType(const uci::type::SensorConstraintsBaseType::SensorType& value) = 0;

  /** Returns a const reference to the bounded list identified by EOIR_Spectrum.
    *
    * @return A const reference to the bounded list identified by EOIR_Spectrum.
    */
  virtual const uci::type::SensorConstraintsBaseType::EOIR_Spectrum& getEOIR_Spectrum() const = 0;

  /** Returns a reference to the bounded list identified by EOIR_Spectrum.
    *
    * @return A reference to the bounded list identified by EOIR_Spectrum.
    */
  virtual uci::type::SensorConstraintsBaseType::EOIR_Spectrum& getEOIR_Spectrum() = 0;

  /** Sets the bounded list identified by EOIR_Spectrum.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SensorConstraintsBaseType& setEOIR_Spectrum(const uci::type::SensorConstraintsBaseType::EOIR_Spectrum& value) = 0;

  /** Returns a const reference to the bounded list identified by RF_Spectrum.
    *
    * @return A const reference to the bounded list identified by RF_Spectrum.
    */
  virtual const uci::type::SensorConstraintsBaseType::RF_Spectrum& getRF_Spectrum() const = 0;

  /** Returns a reference to the bounded list identified by RF_Spectrum.
    *
    * @return A reference to the bounded list identified by RF_Spectrum.
    */
  virtual uci::type::SensorConstraintsBaseType::RF_Spectrum& getRF_Spectrum() = 0;

  /** Sets the bounded list identified by RF_Spectrum.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SensorConstraintsBaseType& setRF_Spectrum(const uci::type::SensorConstraintsBaseType::RF_Spectrum& value) = 0;

  /** Returns a const reference to the bounded list identified by SensorCategory.
    *
    * @return A const reference to the bounded list identified by SensorCategory.
    */
  virtual const uci::type::SensorConstraintsBaseType::SensorCategory& getSensorCategory() const = 0;

  /** Returns a reference to the bounded list identified by SensorCategory.
    *
    * @return A reference to the bounded list identified by SensorCategory.
    */
  virtual uci::type::SensorConstraintsBaseType::SensorCategory& getSensorCategory() = 0;

  /** Sets the bounded list identified by SensorCategory.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SensorConstraintsBaseType& setSensorCategory(const uci::type::SensorConstraintsBaseType::SensorCategory& value) = 0;

  /** Returns a const reference to the bounded list identified by SensorSystemIdentity.
    *
    * @return A const reference to the bounded list identified by SensorSystemIdentity.
    */
  virtual const uci::type::SensorConstraintsBaseType::SensorSystemIdentity& getSensorSystemIdentity() const = 0;

  /** Returns a reference to the bounded list identified by SensorSystemIdentity.
    *
    * @return A reference to the bounded list identified by SensorSystemIdentity.
    */
  virtual uci::type::SensorConstraintsBaseType::SensorSystemIdentity& getSensorSystemIdentity() = 0;

  /** Sets the bounded list identified by SensorSystemIdentity.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SensorConstraintsBaseType& setSensorSystemIdentity(const uci::type::SensorConstraintsBaseType::SensorSystemIdentity& value) = 0;

  /** Returns a const reference to the bounded list identified by SensorBasing.
    *
    * @return A const reference to the bounded list identified by SensorBasing.
    */
  virtual const uci::type::SensorConstraintsBaseType::SensorBasing& getSensorBasing() const = 0;

  /** Returns a reference to the bounded list identified by SensorBasing.
    *
    * @return A reference to the bounded list identified by SensorBasing.
    */
  virtual uci::type::SensorConstraintsBaseType::SensorBasing& getSensorBasing() = 0;

  /** Sets the bounded list identified by SensorBasing.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SensorConstraintsBaseType& setSensorBasing(const uci::type::SensorConstraintsBaseType::SensorBasing& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OwnerOperatorCountry.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OwnerOperatorCountry.
    */
  virtual const uci::type::CountryCodeType& getOwnerOperatorCountry() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OwnerOperatorCountry.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OwnerOperatorCountry.
    */
  virtual uci::type::CountryCodeType& getOwnerOperatorCountry() = 0;

  /** Sets the complex content identified by OwnerOperatorCountry to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OwnerOperatorCountry.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SensorConstraintsBaseType& setOwnerOperatorCountry(const uci::type::CountryCodeType& value) = 0;

  /** Returns whether the Element identified by OwnerOperatorCountry exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OwnerOperatorCountry is enabled or not.
    */
  virtual bool hasOwnerOperatorCountry() const = 0;

  /** Enables the Element identified by OwnerOperatorCountry.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OwnerOperatorCountry.
    */
  virtual uci::type::CountryCodeType& enableOwnerOperatorCountry(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OwnerOperatorCountry.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SensorConstraintsBaseType& clearOwnerOperatorCountry() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SensorConstraintsBaseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SensorConstraintsBaseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SensorConstraintsBaseType to copy from.
    */
  SensorConstraintsBaseType(const SensorConstraintsBaseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SensorConstraintsBaseType to the contents of the
    * SensorConstraintsBaseType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The SensorConstraintsBaseType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this SensorConstraintsBaseType.
    * @return A reference to this SensorConstraintsBaseType.
    */
  SensorConstraintsBaseType& operator=(const SensorConstraintsBaseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SENSORCONSTRAINTSBASETYPE_H

