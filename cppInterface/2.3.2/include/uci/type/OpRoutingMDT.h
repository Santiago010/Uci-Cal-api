/** @file OpRoutingMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OPROUTINGMDT_H
#define UCI_TYPE_OPROUTINGMDT_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/MissionTraceabilityType.h"
#include "uci/type/OpDescriptionType.h"
#include "uci/type/OpRoutingID_Type.h"
#include "uci/type/ScheduleType.h"
#include "uci/type/SeparationParametersType.h"
#include "uci/type/SpecificBlueSeparationType.h"
#include "uci/type/SpecificRedSeparationType.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/ZoneType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class OpRoutingMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OpRoutingMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OpRoutingMDT.
    */
  static UCI_EXPORT OpRoutingMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OpRoutingMDT initializing the data accessed by the new OpRoutingMDT using the data
    * accessed by the specified OpRoutingMDT (cloning).
    *
    * @param accessor The OpRoutingMDT that provides access to the data that is to be used to initialize the data accessed
    *      by the new created OpRoutingMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OpRoutingMDT.
    */
  static UCI_EXPORT OpRoutingMDT& create(const OpRoutingMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OpRoutingMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The OpRoutingMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OpRoutingMDT& accessor);

  /** Returns this accessor's type constant, i.e. opRoutingMDT.
    *
    * @return This accessor's type constant, i.e. opRoutingMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::opRoutingMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of OpRoutingMDT.
    *
    * @return The version that was initialized from the uci:version attribute of OpRoutingMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OpRoutingMDT& accessor) = 0;

  /** Defines parameters to use when deconflicting blue player routes or generating routes to ensure proper separation from
    * other blue players. These parameters apply at the vehicle type level. For example, these parameters would be used to
    * define how close a mission planned vehicle could get to an F-16. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SpecificBlueSeparationType, uci::type::accessorType::specificBlueSeparationType> SpecificBlueSeparation;

  /** Defines parameters to use when deconflicting blue player routes or generating routes to ensure proper separation from
    * other red players. These parameters apply at the vehicle type level. For example, these parameters would be used to
    * define how close a mission planned vehicle could get to an F-16. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SpecificRedSeparationType, uci::type::accessorType::specificRedSeparationType> SpecificRedSeparation;

  /** One or more Systems to which the routing constraints apply. If omitted, the constraints apply to all Systems.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SystemID_Type, uci::type::accessorType::systemID_Type> SystemID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OpRoutingID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OpRoutingID.
    */
  virtual const uci::type::OpRoutingID_Type& getOpRoutingID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OpRoutingID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OpRoutingID.
    */
  virtual uci::type::OpRoutingID_Type& getOpRoutingID() = 0;

  /** Sets the complex content identified by OpRoutingID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OpRoutingID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& setOpRoutingID(const uci::type::OpRoutingID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * DefaultBlueSeparation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      DefaultBlueSeparation.
    */
  virtual const uci::type::SeparationParametersType& getDefaultBlueSeparation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DefaultBlueSeparation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DefaultBlueSeparation.
    */
  virtual uci::type::SeparationParametersType& getDefaultBlueSeparation() = 0;

  /** Sets the complex content identified by DefaultBlueSeparation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DefaultBlueSeparation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& setDefaultBlueSeparation(const uci::type::SeparationParametersType& value) = 0;

  /** Returns whether the Element identified by DefaultBlueSeparation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DefaultBlueSeparation is enabled or not.
    */
  virtual bool hasDefaultBlueSeparation() const = 0;

  /** Enables the Element identified by DefaultBlueSeparation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DefaultBlueSeparation.
    */
  virtual uci::type::SeparationParametersType& enableDefaultBlueSeparation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DefaultBlueSeparation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& clearDefaultBlueSeparation() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * DefaultRedSeparation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      DefaultRedSeparation.
    */
  virtual const uci::type::SeparationParametersType& getDefaultRedSeparation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DefaultRedSeparation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DefaultRedSeparation.
    */
  virtual uci::type::SeparationParametersType& getDefaultRedSeparation() = 0;

  /** Sets the complex content identified by DefaultRedSeparation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DefaultRedSeparation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& setDefaultRedSeparation(const uci::type::SeparationParametersType& value) = 0;

  /** Returns whether the Element identified by DefaultRedSeparation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DefaultRedSeparation is enabled or not.
    */
  virtual bool hasDefaultRedSeparation() const = 0;

  /** Enables the Element identified by DefaultRedSeparation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DefaultRedSeparation.
    */
  virtual uci::type::SeparationParametersType& enableDefaultRedSeparation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DefaultRedSeparation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& clearDefaultRedSeparation() = 0;

  /** Returns a const reference to the bounded list identified by SpecificBlueSeparation.
    *
    * @return A const reference to the bounded list identified by SpecificBlueSeparation.
    */
  virtual const uci::type::OpRoutingMDT::SpecificBlueSeparation& getSpecificBlueSeparation() const = 0;

  /** Returns a reference to the bounded list identified by SpecificBlueSeparation.
    *
    * @return A reference to the bounded list identified by SpecificBlueSeparation.
    */
  virtual uci::type::OpRoutingMDT::SpecificBlueSeparation& getSpecificBlueSeparation() = 0;

  /** Sets the bounded list identified by SpecificBlueSeparation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& setSpecificBlueSeparation(const uci::type::OpRoutingMDT::SpecificBlueSeparation& value) = 0;

  /** Returns a const reference to the bounded list identified by SpecificRedSeparation.
    *
    * @return A const reference to the bounded list identified by SpecificRedSeparation.
    */
  virtual const uci::type::OpRoutingMDT::SpecificRedSeparation& getSpecificRedSeparation() const = 0;

  /** Returns a reference to the bounded list identified by SpecificRedSeparation.
    *
    * @return A reference to the bounded list identified by SpecificRedSeparation.
    */
  virtual uci::type::OpRoutingMDT::SpecificRedSeparation& getSpecificRedSeparation() = 0;

  /** Sets the bounded list identified by SpecificRedSeparation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& setSpecificRedSeparation(const uci::type::OpRoutingMDT::SpecificRedSeparation& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OpDescription.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OpDescription.
    */
  virtual const uci::type::OpDescriptionType& getOpDescription() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OpDescription.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OpDescription.
    */
  virtual uci::type::OpDescriptionType& getOpDescription() = 0;

  /** Sets the complex content identified by OpDescription to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OpDescription.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& setOpDescription(const uci::type::OpDescriptionType& value) = 0;

  /** Returns whether the Element identified by OpDescription exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OpDescription is enabled or not.
    */
  virtual bool hasOpDescription() const = 0;

  /** Enables the Element identified by OpDescription.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OpDescription.
    */
  virtual uci::type::OpDescriptionType& enableOpDescription(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OpDescription.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& clearOpDescription() = 0;

  /** Returns a const reference to the bounded list identified by SystemID.
    *
    * @return A const reference to the bounded list identified by SystemID.
    */
  virtual const uci::type::OpRoutingMDT::SystemID& getSystemID() const = 0;

  /** Returns a reference to the bounded list identified by SystemID.
    *
    * @return A reference to the bounded list identified by SystemID.
    */
  virtual uci::type::OpRoutingMDT::SystemID& getSystemID() = 0;

  /** Sets the bounded list identified by SystemID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& setSystemID(const uci::type::OpRoutingMDT::SystemID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ApplicableZone.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ApplicableZone.
    */
  virtual const uci::type::ZoneType& getApplicableZone() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ApplicableZone.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ApplicableZone.
    */
  virtual uci::type::ZoneType& getApplicableZone() = 0;

  /** Sets the complex content identified by ApplicableZone to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ApplicableZone.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& setApplicableZone(const uci::type::ZoneType& value) = 0;

  /** Returns whether the Element identified by ApplicableZone exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ApplicableZone is enabled or not.
    */
  virtual bool hasApplicableZone() const = 0;

  /** Enables the Element identified by ApplicableZone.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ApplicableZone.
    */
  virtual uci::type::ZoneType& enableApplicableZone(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ApplicableZone.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& clearApplicableZone() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Schedule.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Schedule.
    */
  virtual const uci::type::ScheduleType& getSchedule() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Schedule.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Schedule.
    */
  virtual uci::type::ScheduleType& getSchedule() = 0;

  /** Sets the complex content identified by Schedule to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Schedule.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& setSchedule(const uci::type::ScheduleType& value) = 0;

  /** Returns whether the Element identified by Schedule exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Schedule is enabled or not.
    */
  virtual bool hasSchedule() const = 0;

  /** Enables the Element identified by Schedule.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Schedule.
    */
  virtual uci::type::ScheduleType& enableSchedule(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Schedule.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& clearSchedule() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * MissionTraceability.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      MissionTraceability.
    */
  virtual const uci::type::MissionTraceabilityType& getMissionTraceability() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MissionTraceability.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MissionTraceability.
    */
  virtual uci::type::MissionTraceabilityType& getMissionTraceability() = 0;

  /** Sets the complex content identified by MissionTraceability to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MissionTraceability.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& setMissionTraceability(const uci::type::MissionTraceabilityType& value) = 0;

  /** Returns whether the Element identified by MissionTraceability exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MissionTraceability is enabled or not.
    */
  virtual bool hasMissionTraceability() const = 0;

  /** Enables the Element identified by MissionTraceability.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MissionTraceability.
    */
  virtual uci::type::MissionTraceabilityType& enableMissionTraceability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MissionTraceability.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpRoutingMDT& clearMissionTraceability() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OpRoutingMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~OpRoutingMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OpRoutingMDT to copy from.
    */
  OpRoutingMDT(const OpRoutingMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OpRoutingMDT to the contents of the OpRoutingMDT on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OpRoutingMDT on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this OpRoutingMDT.
    * @return A reference to this OpRoutingMDT.
    */
  OpRoutingMDT& operator=(const OpRoutingMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_OPROUTINGMDT_H

