/** @file PlanReferenceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLANREFERENCETYPE_H
#define UCI_TYPE_PLANREFERENCETYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/ActionPlanID_Type.h"
#include "uci/type/ActivityPlanID_Type.h"
#include "uci/type/CommScheduleAllocationID_Type.h"
#include "uci/type/EffectPlanID_Type.h"
#include "uci/type/MissionPlanID_Type.h"
#include "uci/type/OrbitActivityPlanID_Type.h"
#include "uci/type/OrbitPlanID_Type.h"
#include "uci/type/ResponsePlanID_Type.h"
#include "uci/type/RouteActivityPlanID_Type.h"
#include "uci/type/RoutePlanID_Type.h"
#include "uci/type/TaskPlanID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PlanReferenceType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PlanReferenceType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanReferenceType.
    */
  static UCI_EXPORT PlanReferenceType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlanReferenceType initializing the data accessed by the new PlanReferenceType using the
    * data accessed by the specified PlanReferenceType (cloning).
    *
    * @param accessor The PlanReferenceType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PlanReferenceType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanReferenceType.
    */
  static UCI_EXPORT PlanReferenceType& create(const PlanReferenceType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlanReferenceType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The PlanReferenceType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlanReferenceType& accessor);

  /** Returns this accessor's type constant, i.e. planReferenceType.
    *
    * @return This accessor's type constant, i.e. planReferenceType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::planReferenceType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlanReferenceType.
    *
    * @return The version that was initialized from the uci:version attribute of PlanReferenceType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlanReferenceType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by MissionPlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by MissionPlanID.
    */
  virtual const uci::type::MissionPlanID_Type& getMissionPlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MissionPlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MissionPlanID.
    */
  virtual uci::type::MissionPlanID_Type& getMissionPlanID() = 0;

  /** Sets the complex content identified by MissionPlanID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MissionPlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& setMissionPlanID(const uci::type::MissionPlanID_Type& value) = 0;

  /** Returns whether the Element identified by MissionPlanID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MissionPlanID is enabled or not.
    */
  virtual bool hasMissionPlanID() const = 0;

  /** Enables the Element identified by MissionPlanID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MissionPlanID.
    */
  virtual uci::type::MissionPlanID_Type& enableMissionPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MissionPlanID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& clearMissionPlanID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TaskPlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TaskPlanID.
    */
  virtual const uci::type::TaskPlanID_Type& getTaskPlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TaskPlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TaskPlanID.
    */
  virtual uci::type::TaskPlanID_Type& getTaskPlanID() = 0;

  /** Sets the complex content identified by TaskPlanID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TaskPlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& setTaskPlanID(const uci::type::TaskPlanID_Type& value) = 0;

  /** Returns whether the Element identified by TaskPlanID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TaskPlanID is enabled or not.
    */
  virtual bool hasTaskPlanID() const = 0;

  /** Enables the Element identified by TaskPlanID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TaskPlanID.
    */
  virtual uci::type::TaskPlanID_Type& enableTaskPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TaskPlanID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& clearTaskPlanID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OrbitPlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OrbitPlanID.
    */
  virtual const uci::type::OrbitPlanID_Type& getOrbitPlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitPlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitPlanID.
    */
  virtual uci::type::OrbitPlanID_Type& getOrbitPlanID() = 0;

  /** Sets the complex content identified by OrbitPlanID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitPlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& setOrbitPlanID(const uci::type::OrbitPlanID_Type& value) = 0;

  /** Returns whether the Element identified by OrbitPlanID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrbitPlanID is enabled or not.
    */
  virtual bool hasOrbitPlanID() const = 0;

  /** Enables the Element identified by OrbitPlanID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrbitPlanID.
    */
  virtual uci::type::OrbitPlanID_Type& enableOrbitPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrbitPlanID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& clearOrbitPlanID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrbitActivityPlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrbitActivityPlanID.
    */
  virtual const uci::type::OrbitActivityPlanID_Type& getOrbitActivityPlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitActivityPlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitActivityPlanID.
    */
  virtual uci::type::OrbitActivityPlanID_Type& getOrbitActivityPlanID() = 0;

  /** Sets the complex content identified by OrbitActivityPlanID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitActivityPlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& setOrbitActivityPlanID(const uci::type::OrbitActivityPlanID_Type& value) = 0;

  /** Returns whether the Element identified by OrbitActivityPlanID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrbitActivityPlanID is enabled or not.
    */
  virtual bool hasOrbitActivityPlanID() const = 0;

  /** Enables the Element identified by OrbitActivityPlanID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrbitActivityPlanID.
    */
  virtual uci::type::OrbitActivityPlanID_Type& enableOrbitActivityPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrbitActivityPlanID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& clearOrbitActivityPlanID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RoutePlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RoutePlanID.
    */
  virtual const uci::type::RoutePlanID_Type& getRoutePlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RoutePlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RoutePlanID.
    */
  virtual uci::type::RoutePlanID_Type& getRoutePlanID() = 0;

  /** Sets the complex content identified by RoutePlanID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RoutePlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& setRoutePlanID(const uci::type::RoutePlanID_Type& value) = 0;

  /** Returns whether the Element identified by RoutePlanID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RoutePlanID is enabled or not.
    */
  virtual bool hasRoutePlanID() const = 0;

  /** Enables the Element identified by RoutePlanID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RoutePlanID.
    */
  virtual uci::type::RoutePlanID_Type& enableRoutePlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RoutePlanID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& clearRoutePlanID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RouteActivityPlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RouteActivityPlanID.
    */
  virtual const uci::type::RouteActivityPlanID_Type& getRouteActivityPlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RouteActivityPlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RouteActivityPlanID.
    */
  virtual uci::type::RouteActivityPlanID_Type& getRouteActivityPlanID() = 0;

  /** Sets the complex content identified by RouteActivityPlanID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RouteActivityPlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& setRouteActivityPlanID(const uci::type::RouteActivityPlanID_Type& value) = 0;

  /** Returns whether the Element identified by RouteActivityPlanID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RouteActivityPlanID is enabled or not.
    */
  virtual bool hasRouteActivityPlanID() const = 0;

  /** Enables the Element identified by RouteActivityPlanID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RouteActivityPlanID.
    */
  virtual uci::type::RouteActivityPlanID_Type& enableRouteActivityPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RouteActivityPlanID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& clearRouteActivityPlanID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CommScheduleAllocationID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CommScheduleAllocationID.
    */
  virtual const uci::type::CommScheduleAllocationID_Type& getCommScheduleAllocationID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * CommScheduleAllocationID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CommScheduleAllocationID.
    */
  virtual uci::type::CommScheduleAllocationID_Type& getCommScheduleAllocationID() = 0;

  /** Sets the complex content identified by CommScheduleAllocationID to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CommScheduleAllocationID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& setCommScheduleAllocationID(const uci::type::CommScheduleAllocationID_Type& value) = 0;

  /** Returns whether the Element identified by CommScheduleAllocationID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CommScheduleAllocationID is enabled or not.
    */
  virtual bool hasCommScheduleAllocationID() const = 0;

  /** Enables the Element identified by CommScheduleAllocationID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      CommScheduleAllocationID.
    */
  virtual uci::type::CommScheduleAllocationID_Type& enableCommScheduleAllocationID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CommScheduleAllocationID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& clearCommScheduleAllocationID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActivityPlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActivityPlanID.
    */
  virtual const uci::type::ActivityPlanID_Type& getActivityPlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActivityPlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActivityPlanID.
    */
  virtual uci::type::ActivityPlanID_Type& getActivityPlanID() = 0;

  /** Sets the complex content identified by ActivityPlanID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivityPlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& setActivityPlanID(const uci::type::ActivityPlanID_Type& value) = 0;

  /** Returns whether the Element identified by ActivityPlanID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActivityPlanID is enabled or not.
    */
  virtual bool hasActivityPlanID() const = 0;

  /** Enables the Element identified by ActivityPlanID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActivityPlanID.
    */
  virtual uci::type::ActivityPlanID_Type& enableActivityPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActivityPlanID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& clearActivityPlanID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EffectPlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EffectPlanID.
    */
  virtual const uci::type::EffectPlanID_Type& getEffectPlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EffectPlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EffectPlanID.
    */
  virtual uci::type::EffectPlanID_Type& getEffectPlanID() = 0;

  /** Sets the complex content identified by EffectPlanID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EffectPlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& setEffectPlanID(const uci::type::EffectPlanID_Type& value) = 0;

  /** Returns whether the Element identified by EffectPlanID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EffectPlanID is enabled or not.
    */
  virtual bool hasEffectPlanID() const = 0;

  /** Enables the Element identified by EffectPlanID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EffectPlanID.
    */
  virtual uci::type::EffectPlanID_Type& enableEffectPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EffectPlanID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& clearEffectPlanID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActionPlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActionPlanID.
    */
  virtual const uci::type::ActionPlanID_Type& getActionPlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActionPlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActionPlanID.
    */
  virtual uci::type::ActionPlanID_Type& getActionPlanID() = 0;

  /** Sets the complex content identified by ActionPlanID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActionPlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& setActionPlanID(const uci::type::ActionPlanID_Type& value) = 0;

  /** Returns whether the Element identified by ActionPlanID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActionPlanID is enabled or not.
    */
  virtual bool hasActionPlanID() const = 0;

  /** Enables the Element identified by ActionPlanID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActionPlanID.
    */
  virtual uci::type::ActionPlanID_Type& enableActionPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActionPlanID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& clearActionPlanID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ResponsePlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ResponsePlanID.
    */
  virtual const uci::type::ResponsePlanID_Type& getResponsePlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ResponsePlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ResponsePlanID.
    */
  virtual uci::type::ResponsePlanID_Type& getResponsePlanID() = 0;

  /** Sets the complex content identified by ResponsePlanID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ResponsePlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& setResponsePlanID(const uci::type::ResponsePlanID_Type& value) = 0;

  /** Returns whether the Element identified by ResponsePlanID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ResponsePlanID is enabled or not.
    */
  virtual bool hasResponsePlanID() const = 0;

  /** Enables the Element identified by ResponsePlanID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ResponsePlanID.
    */
  virtual uci::type::ResponsePlanID_Type& enableResponsePlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ResponsePlanID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanReferenceType& clearResponsePlanID() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlanReferenceType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlanReferenceType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlanReferenceType to copy from.
    */
  PlanReferenceType(const PlanReferenceType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlanReferenceType to the contents of the PlanReferenceType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PlanReferenceType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this PlanReferenceType.
    * @return A reference to this PlanReferenceType.
    */
  PlanReferenceType& operator=(const PlanReferenceType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLANREFERENCETYPE_H

