/** @file AperturePointingOptionsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_APERTUREPOINTINGOPTIONSTYPE_H
#define UCI_TYPE_APERTUREPOINTINGOPTIONSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/BeamPointingReferenceType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/FieldOfRegardType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Utilized by RF_ResourceAllocation and RF_ResourceAllocationRequest to indicate the spatial coverage needed for the
  * Activity requesting resources.
  */
class AperturePointingOptionsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new AperturePointingOptionsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AperturePointingOptionsType.
    */
  static UCI_EXPORT AperturePointingOptionsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new AperturePointingOptionsType initializing the data accessed by the new
    * AperturePointingOptionsType using the data accessed by the specified AperturePointingOptionsType (cloning).
    *
    * @param accessor The AperturePointingOptionsType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created AperturePointingOptionsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AperturePointingOptionsType.
    */
  static UCI_EXPORT AperturePointingOptionsType& create(const AperturePointingOptionsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified AperturePointingOptionsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The AperturePointingOptionsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(AperturePointingOptionsType& accessor);

  /** Returns this accessor's type constant, i.e. aperturePointingOptionsType.
    *
    * @return This accessor's type constant, i.e. aperturePointingOptionsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::aperturePointingOptionsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of AperturePointingOptionsType.
    *
    * @return The version that was initialized from the uci:version attribute of AperturePointingOptionsType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AperturePointingOptionsType& accessor) = 0;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum AperturePointingOptionsTypeChoice {
    APERTUREPOINTINGOPTIONSTYPE_CHOICE_NONE,
    APERTUREPOINTINGOPTIONSTYPE_CHOICE_FIELDOFREGARD,
    APERTUREPOINTINGOPTIONSTYPE_CHOICE_INSTALLATIONINDEX,
    APERTUREPOINTINGOPTIONSTYPE_CHOICE_REQUESTBEAMPOINTINGREFERENCE,
    APERTUREPOINTINGOPTIONSTYPE_CHOICE_REQUESTENTITYREFERENCEID
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual AperturePointingOptionsTypeChoice getAperturePointingOptionsTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getAperturePointingOptionsTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In
    * addition, the access methods associated with the chosen element will be enabled and will provide access to the chosen
    * element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AperturePointingOptionsType& setAperturePointingOptionsTypeChoiceOrdinal(AperturePointingOptionsTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FieldOfRegard.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FieldOfRegard.
    */
  virtual const uci::type::FieldOfRegardType& getFieldOfRegard() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FieldOfRegard.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FieldOfRegard.
    */
  virtual uci::type::FieldOfRegardType& getFieldOfRegard() = 0;

  /** Sets the complex content identified by FieldOfRegard to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FieldOfRegard.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AperturePointingOptionsType& setFieldOfRegard(const uci::type::FieldOfRegardType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by FieldOfRegard.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by FieldOfRegard, false otherwise.
    */
  virtual bool isFieldOfRegard() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by FieldOfRegard.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by FieldOfRegard.
    */
  virtual uci::type::FieldOfRegardType& chooseFieldOfRegard(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns the value of the SimplePrimitive data type identified by InstallationIndex.
    *
    * @return The value of the simple primitive data type identified by InstallationIndex.
    */
  virtual xs::UnsignedInt getInstallationIndex() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InstallationIndex.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AperturePointingOptionsType& setInstallationIndex(xs::UnsignedInt value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by InstallationIndex.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by InstallationIndex, false
    *      otherwise.
    */
  virtual bool isInstallationIndex() const = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RequestBeamPointingReference.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RequestBeamPointingReference.
    */
  virtual const uci::type::BeamPointingReferenceType& getRequestBeamPointingReference() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * RequestBeamPointingReference.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      RequestBeamPointingReference.
    */
  virtual uci::type::BeamPointingReferenceType& getRequestBeamPointingReference() = 0;

  /** Sets the complex content identified by RequestBeamPointingReference to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RequestBeamPointingReference.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AperturePointingOptionsType& setRequestBeamPointingReference(const uci::type::BeamPointingReferenceType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequestBeamPointingReference.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequestBeamPointingReference,
    *      false otherwise.
    */
  virtual bool isRequestBeamPointingReference() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by RequestBeamPointingReference.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequestBeamPointingReference.
    */
  virtual uci::type::BeamPointingReferenceType& chooseRequestBeamPointingReference(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RequestEntityReferenceID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RequestEntityReferenceID.
    */
  virtual const uci::type::EntityID_Type& getRequestEntityReferenceID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * RequestEntityReferenceID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      RequestEntityReferenceID.
    */
  virtual uci::type::EntityID_Type& getRequestEntityReferenceID() = 0;

  /** Sets the complex content identified by RequestEntityReferenceID to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RequestEntityReferenceID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AperturePointingOptionsType& setRequestEntityReferenceID(const uci::type::EntityID_Type& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequestEntityReferenceID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequestEntityReferenceID, false
    *      otherwise.
    */
  virtual bool isRequestEntityReferenceID() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by RequestEntityReferenceID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequestEntityReferenceID.
    */
  virtual uci::type::EntityID_Type& chooseRequestEntityReferenceID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AperturePointingOptionsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~AperturePointingOptionsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AperturePointingOptionsType to copy from.
    */
  AperturePointingOptionsType(const AperturePointingOptionsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AperturePointingOptionsType to the contents of the
    * AperturePointingOptionsType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The AperturePointingOptionsType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this AperturePointingOptionsType.
    * @return A reference to this AperturePointingOptionsType.
    */
  AperturePointingOptionsType& operator=(const AperturePointingOptionsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_APERTUREPOINTINGOPTIONSTYPE_H

