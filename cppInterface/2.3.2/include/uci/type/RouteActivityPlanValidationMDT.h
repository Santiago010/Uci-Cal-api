/** @file RouteActivityPlanValidationMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ROUTEACTIVITYPLANVALIDATIONMDT_H
#define UCI_TYPE_ROUTEACTIVITYPLANVALIDATIONMDT_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CompletionStatusType.h"
#include "uci/type/IncompleteProcessingType.h"
#include "uci/type/InvalidActivityType.h"
#include "uci/type/PlanValidationStateEnum.h"
#include "uci/type/RequirementPlanningResultType.h"
#include "uci/type/RouteActivityPlanID_Type.h"
#include "uci/type/RouteActivityPlanValidationID_Type.h"
#include "uci/type/ValidatorType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class RouteActivityPlanValidationMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RouteActivityPlanValidationMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RouteActivityPlanValidationMDT.
    */
  static UCI_EXPORT RouteActivityPlanValidationMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RouteActivityPlanValidationMDT initializing the data accessed by the new
    * RouteActivityPlanValidationMDT using the data accessed by the specified RouteActivityPlanValidationMDT (cloning).
    *
    * @param accessor The RouteActivityPlanValidationMDT that provides access to the data that is to be used to initialize
    *      the data accessed by the new created RouteActivityPlanValidationMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RouteActivityPlanValidationMDT.
    */
  static UCI_EXPORT RouteActivityPlanValidationMDT& create(const RouteActivityPlanValidationMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RouteActivityPlanValidationMDT. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The RouteActivityPlanValidationMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RouteActivityPlanValidationMDT& accessor);

  /** Returns this accessor's type constant, i.e. routeActivityPlanValidationMDT.
    *
    * @return This accessor's type constant, i.e. routeActivityPlanValidationMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::routeActivityPlanValidationMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of RouteActivityPlanValidationMDT.
    *
    * @return The version that was initialized from the uci:version attribute of RouteActivityPlanValidationMDT.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RouteActivityPlanValidationMDT& accessor) = 0;

  /** Indicates items associated with command processing that failed to complete. For example if a particular required
    * Capability wasn't available, it could be referenced here. This element/type is highly flexible. It can reference
    * almost any message/concept in UCI as a planning issue. The wide range of messages/concepts it can reference makes it
    * 1) difficult to use as a basis for software/services to resolve the issue but 2) an excellent general method for
    * processing algorithms to convey issues to operators. This element shouldn't be used to report processing
    * issues/results that are more directly indicated by other processing status elements. For example, for planning
    * processing, other elements focus specifically on per-Requirement allocation results therefore this element shouldn't
    * be used for per-Requirement allocation results. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::IncompleteProcessingType, uci::type::accessorType::incompleteProcessingType> IncompleteItem;

  /** If the ActivityPlan is invalid, indicates which actions are invalid. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::InvalidActivityType, uci::type::accessorType::invalidActivityType> InvalidActivity;

  /** Indicates planning results per Requirement. This element is only expected when the RouteActivityPlan was found to be
    * invalid and the associated RouteActivityPlanValidationCommand indicated "modify to validate" was allowed.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RequirementPlanningResultType, uci::type::accessorType::requirementPlanningResultType> ActivityPlanningResult;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RouteActivityPlanValidationID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RouteActivityPlanValidationID.
    */
  virtual const uci::type::RouteActivityPlanValidationID_Type& getRouteActivityPlanValidationID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * RouteActivityPlanValidationID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      RouteActivityPlanValidationID.
    */
  virtual uci::type::RouteActivityPlanValidationID_Type& getRouteActivityPlanValidationID() = 0;

  /** Sets the complex content identified by RouteActivityPlanValidationID to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RouteActivityPlanValidationID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteActivityPlanValidationMDT& setRouteActivityPlanValidationID(const uci::type::RouteActivityPlanValidationID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PlanID.
    */
  virtual const uci::type::RouteActivityPlanID_Type& getPlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PlanID.
    */
  virtual uci::type::RouteActivityPlanID_Type& getPlanID() = 0;

  /** Sets the complex content identified by PlanID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteActivityPlanValidationMDT& setPlanID(const uci::type::RouteActivityPlanID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Validator.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Validator.
    */
  virtual const uci::type::ValidatorType& getValidator() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Validator.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Validator.
    */
  virtual uci::type::ValidatorType& getValidator() = 0;

  /** Sets the complex content identified by Validator to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Validator.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteActivityPlanValidationMDT& setValidator(const uci::type::ValidatorType& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ValidationState.
    *
    * @return A const reference to the value of the enumeration identified by ValidationState.
    */
  virtual const uci::type::PlanValidationStateEnum& getValidationState() const = 0;

  /** Returns a reference to the value of the enumeration identified by ValidationState.
    *
    * @return A reference to the value of the enumeration identified by ValidationState.
    */
  virtual uci::type::PlanValidationStateEnum& getValidationState() = 0;

  /** Sets the value of the enumeration identified by ValidationState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteActivityPlanValidationMDT& setValidationState(const uci::type::PlanValidationStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by ValidationState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteActivityPlanValidationMDT& setValidationState(uci::type::PlanValidationStateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CompletionStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CompletionStatus.
    */
  virtual const uci::type::CompletionStatusType& getCompletionStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CompletionStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CompletionStatus.
    */
  virtual uci::type::CompletionStatusType& getCompletionStatus() = 0;

  /** Sets the complex content identified by CompletionStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CompletionStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteActivityPlanValidationMDT& setCompletionStatus(const uci::type::CompletionStatusType& value) = 0;

  /** Returns whether the Element identified by CompletionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CompletionStatus is enabled or not.
    */
  virtual bool hasCompletionStatus() const = 0;

  /** Enables the Element identified by CompletionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CompletionStatus.
    */
  virtual uci::type::CompletionStatusType& enableCompletionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CompletionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteActivityPlanValidationMDT& clearCompletionStatus() = 0;

  /** Returns a const reference to the bounded list identified by IncompleteItem.
    *
    * @return A const reference to the bounded list identified by IncompleteItem.
    */
  virtual const uci::type::RouteActivityPlanValidationMDT::IncompleteItem& getIncompleteItem() const = 0;

  /** Returns a reference to the bounded list identified by IncompleteItem.
    *
    * @return A reference to the bounded list identified by IncompleteItem.
    */
  virtual uci::type::RouteActivityPlanValidationMDT::IncompleteItem& getIncompleteItem() = 0;

  /** Sets the bounded list identified by IncompleteItem.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteActivityPlanValidationMDT& setIncompleteItem(const uci::type::RouteActivityPlanValidationMDT::IncompleteItem& value) = 0;

  /** Returns a const reference to the bounded list identified by InvalidActivity.
    *
    * @return A const reference to the bounded list identified by InvalidActivity.
    */
  virtual const uci::type::RouteActivityPlanValidationMDT::InvalidActivity& getInvalidActivity() const = 0;

  /** Returns a reference to the bounded list identified by InvalidActivity.
    *
    * @return A reference to the bounded list identified by InvalidActivity.
    */
  virtual uci::type::RouteActivityPlanValidationMDT::InvalidActivity& getInvalidActivity() = 0;

  /** Sets the bounded list identified by InvalidActivity.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteActivityPlanValidationMDT& setInvalidActivity(const uci::type::RouteActivityPlanValidationMDT::InvalidActivity& value) = 0;

  /** Returns a const reference to the bounded list identified by ActivityPlanningResult.
    *
    * @return A const reference to the bounded list identified by ActivityPlanningResult.
    */
  virtual const uci::type::RouteActivityPlanValidationMDT::ActivityPlanningResult& getActivityPlanningResult() const = 0;

  /** Returns a reference to the bounded list identified by ActivityPlanningResult.
    *
    * @return A reference to the bounded list identified by ActivityPlanningResult.
    */
  virtual uci::type::RouteActivityPlanValidationMDT::ActivityPlanningResult& getActivityPlanningResult() = 0;

  /** Sets the bounded list identified by ActivityPlanningResult.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteActivityPlanValidationMDT& setActivityPlanningResult(const uci::type::RouteActivityPlanValidationMDT::ActivityPlanningResult& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ModifiedPlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ModifiedPlanID.
    */
  virtual const uci::type::RouteActivityPlanID_Type& getModifiedPlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ModifiedPlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ModifiedPlanID.
    */
  virtual uci::type::RouteActivityPlanID_Type& getModifiedPlanID() = 0;

  /** Sets the complex content identified by ModifiedPlanID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ModifiedPlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteActivityPlanValidationMDT& setModifiedPlanID(const uci::type::RouteActivityPlanID_Type& value) = 0;

  /** Returns whether the Element identified by ModifiedPlanID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ModifiedPlanID is enabled or not.
    */
  virtual bool hasModifiedPlanID() const = 0;

  /** Enables the Element identified by ModifiedPlanID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ModifiedPlanID.
    */
  virtual uci::type::RouteActivityPlanID_Type& enableModifiedPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ModifiedPlanID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RouteActivityPlanValidationMDT& clearModifiedPlanID() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RouteActivityPlanValidationMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~RouteActivityPlanValidationMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RouteActivityPlanValidationMDT to copy from.
    */
  RouteActivityPlanValidationMDT(const RouteActivityPlanValidationMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RouteActivityPlanValidationMDT to the contents of the
    * RouteActivityPlanValidationMDT on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The RouteActivityPlanValidationMDT on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this RouteActivityPlanValidationMDT.
    * @return A reference to this RouteActivityPlanValidationMDT.
    */
  RouteActivityPlanValidationMDT& operator=(const RouteActivityPlanValidationMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ROUTEACTIVITYPLANVALIDATIONMDT_H

