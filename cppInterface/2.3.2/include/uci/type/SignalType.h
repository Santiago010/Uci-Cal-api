/** @file SignalType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SIGNALTYPE_H
#define UCI_TYPE_SIGNALTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ActivityByType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/EmitterFunctionType.h"
#include "uci/type/EmitterUrgencyEnum.h"
#include "uci/type/EmptyType.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/LockIndicatorEnum.h"
#include "uci/type/MeasurementQualityEnum.h"
#include "uci/type/MobilityEnum.h"
#include "uci/type/ModulationEnum.h"
#include "uci/type/ModulationParameterType.h"
#include "uci/type/PulseDataID_Type.h"
#include "uci/type/SignalEmitterKinematicsType.h"
#include "uci/type/SignalID_Type.h"
#include "uci/type/SignalIdentityType.h"
#include "uci/type/SignalNavDataType.h"
#include "uci/type/SignalParametricsType.h"
#include "uci/type/SignalRemoveInfoType.h"
#include "uci/type/SignalReportStateEnum.h"
#include "uci/type/SignalSourceType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SignalType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SignalType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SignalType.
    */
  static UCI_EXPORT SignalType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SignalType initializing the data accessed by the new SignalType using the data accessed
    * by the specified SignalType (cloning).
    *
    * @param accessor The SignalType that provides access to the data that is to be used to initialize the data accessed by
    *      the new created SignalType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SignalType.
    */
  static UCI_EXPORT SignalType& create(const SignalType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SignalType. Use of the specified accessor after it has been destroyed will result
    * in undefined behavior.
    *
    * @param accessor The SignalType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SignalType& accessor);

  /** Returns this accessor's type constant, i.e. signalType.
    *
    * @return This accessor's type constant, i.e. signalType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::signalType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SignalType.
    *
    * @return The version that was initialized from the uci:version attribute of SignalType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.003";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SignalType& accessor) = 0;

  /** Indicates the unique ID of a PulseData collection associated with the Signal. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PulseDataID_Type, uci::type::accessorType::pulseDataID_Type> AssociatedPulseDataID;

  /** Indicates the kinematic state of the collecting system and antenna at the time of collection of the Signal.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SignalNavDataType, uci::type::accessorType::signalNavDataType> CollectorKinematics;

  /** Indicates the modulation of the signal. List size for this element is based on "Select All That Apply" condition.
    * [Occurrences: Minimum: 0; Maximum: 62]
    */
  typedef uci::base::BoundedList<uci::type::ModulationEnum, uci::type::accessorType::modulationEnum> Modulation;

  /** Indicates a custom modulation parameter that is not covered by other elements in the Signal data structure. This will
    * typically be used to fully cover the fields defined in other interoperability standards such as the JICD.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ModulationParameterType, uci::type::accessorType::modulationParameterType> ModulationParameter;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SignalID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SignalID.
    */
  virtual const uci::type::SignalID_Type& getSignalID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SignalID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SignalID.
    */
  virtual uci::type::SignalID_Type& getSignalID() = 0;

  /** Sets the complex content identified by SignalID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SignalID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setSignalID(const uci::type::SignalID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by SignalState.
    *
    * @return A const reference to the value of the enumeration identified by SignalState.
    */
  virtual const uci::type::SignalReportStateEnum& getSignalState() const = 0;

  /** Returns a reference to the value of the enumeration identified by SignalState.
    *
    * @return A reference to the value of the enumeration identified by SignalState.
    */
  virtual uci::type::SignalReportStateEnum& getSignalState() = 0;

  /** Sets the value of the enumeration identified by SignalState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setSignalState(const uci::type::SignalReportStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by SignalState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setSignalState(uci::type::SignalReportStateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Source.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Source.
    */
  virtual const uci::type::SignalSourceType& getSource() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Source.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Source.
    */
  virtual uci::type::SignalSourceType& getSource() = 0;

  /** Sets the complex content identified by Source to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Source.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setSource(const uci::type::SignalSourceType& value) = 0;

  /** Returns whether the Element identified by Source exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Source is enabled or not.
    */
  virtual bool hasSource() const = 0;

  /** Enables the Element identified by Source.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Source.
    */
  virtual uci::type::SignalSourceType& enableSource(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Source.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& clearSource() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * LocalTrackIdentifier.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      LocalTrackIdentifier.
    */
  virtual const uci::type::ForeignKeyType& getLocalTrackIdentifier() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LocalTrackIdentifier.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LocalTrackIdentifier.
    */
  virtual uci::type::ForeignKeyType& getLocalTrackIdentifier() = 0;

  /** Sets the complex content identified by LocalTrackIdentifier to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LocalTrackIdentifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setLocalTrackIdentifier(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by LocalTrackIdentifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LocalTrackIdentifier is enabled or not.
    */
  virtual bool hasLocalTrackIdentifier() const = 0;

  /** Enables the Element identified by LocalTrackIdentifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by LocalTrackIdentifier.
    */
  virtual uci::type::ForeignKeyType& enableLocalTrackIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LocalTrackIdentifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& clearLocalTrackIdentifier() = 0;

  /** Returns a const reference to the bounded list identified by AssociatedPulseDataID.
    *
    * @return A const reference to the bounded list identified by AssociatedPulseDataID.
    */
  virtual const uci::type::SignalType::AssociatedPulseDataID& getAssociatedPulseDataID() const = 0;

  /** Returns a reference to the bounded list identified by AssociatedPulseDataID.
    *
    * @return A reference to the bounded list identified by AssociatedPulseDataID.
    */
  virtual uci::type::SignalType::AssociatedPulseDataID& getAssociatedPulseDataID() = 0;

  /** Sets the bounded list identified by AssociatedPulseDataID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setAssociatedPulseDataID(const uci::type::SignalType::AssociatedPulseDataID& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by InitialDetectionTimestamp.
    *
    * @return The value of the simple primitive data type identified by InitialDetectionTimestamp.
    */
  virtual uci::type::DateTimeTypeValue getInitialDetectionTimestamp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by InitialDetectionTimestamp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setInitialDetectionTimestamp(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by InitialDetectionTimestamp exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InitialDetectionTimestamp is enabled or not.
    */
  virtual bool hasInitialDetectionTimestamp() const = 0;

  /** Clears (disabled) the Element identified by InitialDetectionTimestamp.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& clearInitialDetectionTimestamp() = 0;

  /** Returns the value of the SimplePrimitive data type identified by LatestDetectionTimestamp.
    *
    * @return The value of the simple primitive data type identified by LatestDetectionTimestamp.
    */
  virtual uci::type::DateTimeTypeValue getLatestDetectionTimestamp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by LatestDetectionTimestamp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setLatestDetectionTimestamp(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by LatestDetectionTimestamp exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LatestDetectionTimestamp is enabled or not.
    */
  virtual bool hasLatestDetectionTimestamp() const = 0;

  /** Clears (disabled) the Element identified by LatestDetectionTimestamp.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& clearLatestDetectionTimestamp() = 0;

  /** Returns a const reference to the value of the enumeration identified by TimestampQuality.
    *
    * @return A const reference to the value of the enumeration identified by TimestampQuality.
    */
  virtual const uci::type::MeasurementQualityEnum& getTimestampQuality() const = 0;

  /** Returns a reference to the value of the enumeration identified by TimestampQuality.
    *
    * @return A reference to the value of the enumeration identified by TimestampQuality.
    */
  virtual uci::type::MeasurementQualityEnum& getTimestampQuality() = 0;

  /** Sets the value of the enumeration identified by TimestampQuality.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setTimestampQuality(const uci::type::MeasurementQualityEnum& value) = 0;

  /** Sets the value of the enumeration identified by TimestampQuality.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setTimestampQuality(uci::type::MeasurementQualityEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by TimestampQuality exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TimestampQuality is enabled or not.
    */
  virtual bool hasTimestampQuality() const = 0;

  /** Enables the Element identified by TimestampQuality.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by TimestampQuality.
    */
  virtual uci::type::MeasurementQualityEnum& enableTimestampQuality(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TimestampQuality.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& clearTimestampQuality() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Parametrics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Parametrics.
    */
  virtual const uci::type::SignalParametricsType& getParametrics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Parametrics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Parametrics.
    */
  virtual uci::type::SignalParametricsType& getParametrics() = 0;

  /** Sets the complex content identified by Parametrics to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Parametrics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setParametrics(const uci::type::SignalParametricsType& value) = 0;

  /** Returns whether the Element identified by Parametrics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Parametrics is enabled or not.
    */
  virtual bool hasParametrics() const = 0;

  /** Enables the Element identified by Parametrics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Parametrics.
    */
  virtual uci::type::SignalParametricsType& enableParametrics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Parametrics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& clearParametrics() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EmitterFunction.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EmitterFunction.
    */
  virtual const uci::type::EmitterFunctionType& getEmitterFunction() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EmitterFunction.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EmitterFunction.
    */
  virtual uci::type::EmitterFunctionType& getEmitterFunction() = 0;

  /** Sets the complex content identified by EmitterFunction to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EmitterFunction.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setEmitterFunction(const uci::type::EmitterFunctionType& value) = 0;

  /** Returns whether the Element identified by EmitterFunction exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EmitterFunction is enabled or not.
    */
  virtual bool hasEmitterFunction() const = 0;

  /** Enables the Element identified by EmitterFunction.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EmitterFunction.
    */
  virtual uci::type::EmitterFunctionType& enableEmitterFunction(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EmitterFunction.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& clearEmitterFunction() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EmitterIdentity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EmitterIdentity.
    */
  virtual const uci::type::SignalIdentityType& getEmitterIdentity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EmitterIdentity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EmitterIdentity.
    */
  virtual uci::type::SignalIdentityType& getEmitterIdentity() = 0;

  /** Sets the complex content identified by EmitterIdentity to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EmitterIdentity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setEmitterIdentity(const uci::type::SignalIdentityType& value) = 0;

  /** Returns whether the Element identified by EmitterIdentity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EmitterIdentity is enabled or not.
    */
  virtual bool hasEmitterIdentity() const = 0;

  /** Enables the Element identified by EmitterIdentity.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EmitterIdentity.
    */
  virtual uci::type::SignalIdentityType& enableEmitterIdentity(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EmitterIdentity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& clearEmitterIdentity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * EmitterKinematics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      EmitterKinematics.
    */
  virtual const uci::type::SignalEmitterKinematicsType& getEmitterKinematics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EmitterKinematics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EmitterKinematics.
    */
  virtual uci::type::SignalEmitterKinematicsType& getEmitterKinematics() = 0;

  /** Sets the complex content identified by EmitterKinematics to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EmitterKinematics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setEmitterKinematics(const uci::type::SignalEmitterKinematicsType& value) = 0;

  /** Returns whether the Element identified by EmitterKinematics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EmitterKinematics is enabled or not.
    */
  virtual bool hasEmitterKinematics() const = 0;

  /** Enables the Element identified by EmitterKinematics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EmitterKinematics.
    */
  virtual uci::type::SignalEmitterKinematicsType& enableEmitterKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EmitterKinematics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& clearEmitterKinematics() = 0;

  /** Returns a const reference to the bounded list identified by CollectorKinematics.
    *
    * @return A const reference to the bounded list identified by CollectorKinematics.
    */
  virtual const uci::type::SignalType::CollectorKinematics& getCollectorKinematics() const = 0;

  /** Returns a reference to the bounded list identified by CollectorKinematics.
    *
    * @return A reference to the bounded list identified by CollectorKinematics.
    */
  virtual uci::type::SignalType::CollectorKinematics& getCollectorKinematics() = 0;

  /** Sets the bounded list identified by CollectorKinematics.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setCollectorKinematics(const uci::type::SignalType::CollectorKinematics& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by WartimeReserveMode.
    *
    * @return A const reference to the accessor that provides access to the string identified by WartimeReserveMode.
    */
  virtual const uci::type::EmptyType& getWartimeReserveMode() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by WartimeReserveMode.
    *
    * @return A reference to the accessor that provides access to the string identified by WartimeReserveMode.
    */
  virtual uci::type::EmptyType& getWartimeReserveMode() = 0;

  /** Sets the string identified by WartimeReserveMode to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by WartimeReserveMode.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setWartimeReserveMode(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by WartimeReserveMode to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setWartimeReserveMode(const std::string& value) = 0;

  /** Sets the string identified by WartimeReserveMode to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setWartimeReserveMode(const char* value) = 0;

  /** Returns whether the Element identified by WartimeReserveMode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by WartimeReserveMode is enabled or not.
    */
  virtual bool hasWartimeReserveMode() const = 0;

  /** Enables the Element identified by WartimeReserveMode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by WartimeReserveMode.
    */
  virtual uci::type::EmptyType& enableWartimeReserveMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by WartimeReserveMode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& clearWartimeReserveMode() = 0;

  /** Returns a const reference to the value of the enumeration identified by LockIndicator.
    *
    * @return A const reference to the value of the enumeration identified by LockIndicator.
    */
  virtual const uci::type::LockIndicatorEnum& getLockIndicator() const = 0;

  /** Returns a reference to the value of the enumeration identified by LockIndicator.
    *
    * @return A reference to the value of the enumeration identified by LockIndicator.
    */
  virtual uci::type::LockIndicatorEnum& getLockIndicator() = 0;

  /** Sets the value of the enumeration identified by LockIndicator.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setLockIndicator(const uci::type::LockIndicatorEnum& value) = 0;

  /** Sets the value of the enumeration identified by LockIndicator.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setLockIndicator(uci::type::LockIndicatorEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by LockIndicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LockIndicator is enabled or not.
    */
  virtual bool hasLockIndicator() const = 0;

  /** Enables the Element identified by LockIndicator.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by LockIndicator.
    */
  virtual uci::type::LockIndicatorEnum& enableLockIndicator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LockIndicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& clearLockIndicator() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActivityBy.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActivityBy.
    */
  virtual const uci::type::ActivityByType& getActivityBy() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActivityBy.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActivityBy.
    */
  virtual uci::type::ActivityByType& getActivityBy() = 0;

  /** Sets the complex content identified by ActivityBy to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivityBy.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setActivityBy(const uci::type::ActivityByType& value) = 0;

  /** Returns whether the Element identified by ActivityBy exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActivityBy is enabled or not.
    */
  virtual bool hasActivityBy() const = 0;

  /** Enables the Element identified by ActivityBy.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActivityBy.
    */
  virtual uci::type::ActivityByType& enableActivityBy(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActivityBy.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& clearActivityBy() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RemoveInfo.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RemoveInfo.
    */
  virtual const uci::type::SignalRemoveInfoType& getRemoveInfo() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RemoveInfo.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RemoveInfo.
    */
  virtual uci::type::SignalRemoveInfoType& getRemoveInfo() = 0;

  /** Sets the complex content identified by RemoveInfo to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RemoveInfo.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setRemoveInfo(const uci::type::SignalRemoveInfoType& value) = 0;

  /** Returns whether the Element identified by RemoveInfo exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RemoveInfo is enabled or not.
    */
  virtual bool hasRemoveInfo() const = 0;

  /** Enables the Element identified by RemoveInfo.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RemoveInfo.
    */
  virtual uci::type::SignalRemoveInfoType& enableRemoveInfo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RemoveInfo.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& clearRemoveInfo() = 0;

  /** Returns a const reference to the bounded list identified by Modulation.
    *
    * @return A const reference to the bounded list identified by Modulation.
    */
  virtual const uci::type::SignalType::Modulation& getModulation() const = 0;

  /** Returns a reference to the bounded list identified by Modulation.
    *
    * @return A reference to the bounded list identified by Modulation.
    */
  virtual uci::type::SignalType::Modulation& getModulation() = 0;

  /** Sets the bounded list identified by Modulation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setModulation(const uci::type::SignalType::Modulation& value) = 0;

  /** Returns a const reference to the bounded list identified by ModulationParameter.
    *
    * @return A const reference to the bounded list identified by ModulationParameter.
    */
  virtual const uci::type::SignalType::ModulationParameter& getModulationParameter() const = 0;

  /** Returns a reference to the bounded list identified by ModulationParameter.
    *
    * @return A reference to the bounded list identified by ModulationParameter.
    */
  virtual uci::type::SignalType::ModulationParameter& getModulationParameter() = 0;

  /** Sets the bounded list identified by ModulationParameter.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setModulationParameter(const uci::type::SignalType::ModulationParameter& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by Urgency.
    *
    * @return A const reference to the value of the enumeration identified by Urgency.
    */
  virtual const uci::type::EmitterUrgencyEnum& getUrgency() const = 0;

  /** Returns a reference to the value of the enumeration identified by Urgency.
    *
    * @return A reference to the value of the enumeration identified by Urgency.
    */
  virtual uci::type::EmitterUrgencyEnum& getUrgency() = 0;

  /** Sets the value of the enumeration identified by Urgency.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setUrgency(const uci::type::EmitterUrgencyEnum& value) = 0;

  /** Sets the value of the enumeration identified by Urgency.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setUrgency(uci::type::EmitterUrgencyEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Urgency exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Urgency is enabled or not.
    */
  virtual bool hasUrgency() const = 0;

  /** Enables the Element identified by Urgency.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Urgency.
    */
  virtual uci::type::EmitterUrgencyEnum& enableUrgency(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Urgency.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& clearUrgency() = 0;

  /** Returns a const reference to the value of the enumeration identified by Mobility.
    *
    * @return A const reference to the value of the enumeration identified by Mobility.
    */
  virtual const uci::type::MobilityEnum& getMobility() const = 0;

  /** Returns a reference to the value of the enumeration identified by Mobility.
    *
    * @return A reference to the value of the enumeration identified by Mobility.
    */
  virtual uci::type::MobilityEnum& getMobility() = 0;

  /** Sets the value of the enumeration identified by Mobility.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setMobility(const uci::type::MobilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by Mobility.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& setMobility(uci::type::MobilityEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Mobility exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mobility is enabled or not.
    */
  virtual bool hasMobility() const = 0;

  /** Enables the Element identified by Mobility.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Mobility.
    */
  virtual uci::type::MobilityEnum& enableMobility(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Mobility.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SignalType& clearMobility() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SignalType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SignalType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SignalType to copy from.
    */
  SignalType(const SignalType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SignalType to the contents of the SignalType on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SignalType on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this SignalType.
    * @return A reference to this SignalType.
    */
  SignalType& operator=(const SignalType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SIGNALTYPE_H

