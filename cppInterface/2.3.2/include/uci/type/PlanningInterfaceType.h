/** @file PlanningInterfaceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLANNINGINTERFACETYPE_H
#define UCI_TYPE_PLANNINGINTERFACETYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "InterfacePlanTypeEnum.h"
#include "PlanningInterfaceEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PlanningInterfaceType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PlanningInterfaceType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanningInterfaceType.
    */
  static UCI_EXPORT PlanningInterfaceType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlanningInterfaceType initializing the data accessed by the new PlanningInterfaceType
    * using the data accessed by the specified PlanningInterfaceType (cloning).
    *
    * @param accessor The PlanningInterfaceType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created PlanningInterfaceType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanningInterfaceType.
    */
  static UCI_EXPORT PlanningInterfaceType& create(const PlanningInterfaceType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlanningInterfaceType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The PlanningInterfaceType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlanningInterfaceType& accessor);

  /** Returns this accessor's type constant, i.e. planningInterfaceType.
    *
    * @return This accessor's type constant, i.e. planningInterfaceType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::planningInterfaceType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlanningInterfaceType.
    *
    * @return The version that was initialized from the uci:version attribute of PlanningInterfaceType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlanningInterfaceType& accessor) = 0;

  /** Indicates the specific messages/interface for the *Plan type indicated by the sibling element. If multiple instances
    * of this element are given, each should be of a different enumerate value. List size for this element is based on
    * "Select All That Apply" condition. [Occurrences: Minimum: 1; Maximum: 7]
    */
  typedef uci::base::BoundedList<uci::type::PlanningInterfaceEnum, uci::type::accessorType::planningInterfaceEnum> PlanInterface;

  /** Returns a const reference to the value of the enumeration identified by PlanType.
    *
    * @return A const reference to the value of the enumeration identified by PlanType.
    */
  virtual const uci::type::InterfacePlanTypeEnum& getPlanType() const = 0;

  /** Returns a reference to the value of the enumeration identified by PlanType.
    *
    * @return A reference to the value of the enumeration identified by PlanType.
    */
  virtual uci::type::InterfacePlanTypeEnum& getPlanType() = 0;

  /** Sets the value of the enumeration identified by PlanType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceType& setPlanType(const uci::type::InterfacePlanTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by PlanType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceType& setPlanType(uci::type::InterfacePlanTypeEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by PlanInterface.
    *
    * @return A const reference to the bounded list identified by PlanInterface.
    */
  virtual const uci::type::PlanningInterfaceType::PlanInterface& getPlanInterface() const = 0;

  /** Returns a reference to the bounded list identified by PlanInterface.
    *
    * @return A reference to the bounded list identified by PlanInterface.
    */
  virtual uci::type::PlanningInterfaceType::PlanInterface& getPlanInterface() = 0;

  /** Sets the bounded list identified by PlanInterface.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningInterfaceType& setPlanInterface(const uci::type::PlanningInterfaceType::PlanInterface& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlanningInterfaceType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlanningInterfaceType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlanningInterfaceType to copy from.
    */
  PlanningInterfaceType(const PlanningInterfaceType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlanningInterfaceType to the contents of the PlanningInterfaceType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The PlanningInterfaceType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this PlanningInterfaceType.
    * @return A reference to this PlanningInterfaceType.
    */
  PlanningInterfaceType& operator=(const PlanningInterfaceType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLANNINGINTERFACETYPE_H

