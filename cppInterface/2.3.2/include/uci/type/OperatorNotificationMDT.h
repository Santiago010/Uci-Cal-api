/** @file OperatorNotificationMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OPERATORNOTIFICATIONMDT_H
#define UCI_TYPE_OPERATORNOTIFICATIONMDT_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/UnsignedByteAccessor.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/AssociatedMessageType.h"
#include "uci/type/AuralAlertType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/ID_Type.h"
#include "uci/type/NotificationCategoryEnum.h"
#include "uci/type/NotificationSeverityEnum.h"
#include "uci/type/NotificationSourceType.h"
#include "uci/type/OperatorNotificationActionType.h"
#include "uci/type/OperatorNotificationID_Type.h"
#include "uci/type/OperatorRoleType.h"
#include "uci/type/Point2D_Type.h"
#include "uci/type/VisibleString1024Type.h"
#include "uci/type/VisibleString256Type.h"
#include "uci/type/VisibleString32Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class OperatorNotificationMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OperatorNotificationMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OperatorNotificationMDT.
    */
  static UCI_EXPORT OperatorNotificationMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OperatorNotificationMDT initializing the data accessed by the new
    * OperatorNotificationMDT using the data accessed by the specified OperatorNotificationMDT (cloning).
    *
    * @param accessor The OperatorNotificationMDT that provides access to the data that is to be used to initialize the
    *      data accessed by the new created OperatorNotificationMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OperatorNotificationMDT.
    */
  static UCI_EXPORT OperatorNotificationMDT& create(const OperatorNotificationMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OperatorNotificationMDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The OperatorNotificationMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OperatorNotificationMDT& accessor);

  /** Returns this accessor's type constant, i.e. operatorNotificationMDT.
    *
    * @return This accessor's type constant, i.e. operatorNotificationMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::operatorNotificationMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of OperatorNotificationMDT.
    *
    * @return The version that was initialized from the uci:version attribute of OperatorNotificationMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.001.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OperatorNotificationMDT& accessor) = 0;

  /** List of parameters used as substitution arguments when applying notification templates. If a notification template
    * syntax defined a substitution token (e.g. $#) in the Title, the template parameters would be used to replace those
    * tokens. For example, given a template Title of "System $1 violated zone $2" an OperatorNotification that applies that
    * template would replace the $1 token with the first template parameter and the $2 with the second template parameter.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::VisibleString32Type, uci::type::accessorType::visibleString32Type> OperatorNotificationTemplateParameters;

  /** Destinations for this notification. This field defines which Operator consoles are responsible for displaying or
    * processing the alert. The Operator consoles can be specified as an Operator console role or by a non-Operator role.
    * If this element is absent, the notification should be handled by all Operator consoles. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OperatorRoleType, uci::type::accessorType::operatorRoleType> Destinations;

  /** Indicates a message that is associated with or the cause of the operator notification. This element should be omitted
    * if an input message was not the cause of the notification. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::AssociatedMessageType, uci::type::accessorType::associatedMessageType> AssociatedMessage;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OperatorNotificationID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OperatorNotificationID.
    */
  virtual const uci::type::OperatorNotificationID_Type& getOperatorNotificationID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OperatorNotificationID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OperatorNotificationID.
    */
  virtual uci::type::OperatorNotificationID_Type& getOperatorNotificationID() = 0;

  /** Sets the complex content identified by OperatorNotificationID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OperatorNotificationID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setOperatorNotificationID(const uci::type::OperatorNotificationID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OperatorNotificationTemplateID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OperatorNotificationTemplateID.
    */
  virtual const uci::type::ID_Type& getOperatorNotificationTemplateID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * OperatorNotificationTemplateID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OperatorNotificationTemplateID.
    */
  virtual uci::type::ID_Type& getOperatorNotificationTemplateID() = 0;

  /** Sets the complex content identified by OperatorNotificationTemplateID to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OperatorNotificationTemplateID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setOperatorNotificationTemplateID(const uci::type::ID_Type& value) = 0;

  /** Returns whether the Element identified by OperatorNotificationTemplateID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OperatorNotificationTemplateID is enabled or not.
    */
  virtual bool hasOperatorNotificationTemplateID() const = 0;

  /** Enables the Element identified by OperatorNotificationTemplateID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OperatorNotificationTemplateID.
    */
  virtual uci::type::ID_Type& enableOperatorNotificationTemplateID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OperatorNotificationTemplateID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& clearOperatorNotificationTemplateID() = 0;

  /** Returns a const reference to the bounded list identified by OperatorNotificationTemplateParameters.
    *
    * @return A const reference to the bounded list identified by OperatorNotificationTemplateParameters.
    */
  virtual const uci::type::OperatorNotificationMDT::OperatorNotificationTemplateParameters& getOperatorNotificationTemplateParameters() const = 0;

  /** Returns a reference to the bounded list identified by OperatorNotificationTemplateParameters.
    *
    * @return A reference to the bounded list identified by OperatorNotificationTemplateParameters.
    */
  virtual uci::type::OperatorNotificationMDT::OperatorNotificationTemplateParameters& getOperatorNotificationTemplateParameters() = 0;

  /** Sets the bounded list identified by OperatorNotificationTemplateParameters.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setOperatorNotificationTemplateParameters(const uci::type::OperatorNotificationMDT::OperatorNotificationTemplateParameters& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Title.
    *
    * @return A const reference to the accessor that provides access to the string identified by Title.
    */
  virtual const uci::type::VisibleString256Type& getTitle() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Title.
    *
    * @return A reference to the accessor that provides access to the string identified by Title.
    */
  virtual uci::type::VisibleString256Type& getTitle() = 0;

  /** Sets the string identified by Title to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Title.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setTitle(const uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by Title to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setTitle(const std::string& value) = 0;

  /** Sets the string identified by Title to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setTitle(const char* value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by Details.
    *
    * @return A const reference to the accessor that provides access to the string identified by Details.
    */
  virtual const uci::type::VisibleString1024Type& getDetails() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by Details.
    *
    * @return A reference to the accessor that provides access to the string identified by Details.
    */
  virtual uci::type::VisibleString1024Type& getDetails() = 0;

  /** Sets the string identified by Details to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by Details.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setDetails(const uci::type::VisibleString1024Type& value) = 0;

  /** Sets the string identified by Details to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setDetails(const std::string& value) = 0;

  /** Sets the string identified by Details to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setDetails(const char* value) = 0;

  /** Returns whether the Element identified by Details exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Details is enabled or not.
    */
  virtual bool hasDetails() const = 0;

  /** Enables the Element identified by Details.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by Details.
    */
  virtual uci::type::VisibleString1024Type& enableDetails(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Details.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& clearDetails() = 0;

  /** Returns a const reference to the value of the enumeration identified by Category.
    *
    * @return A const reference to the value of the enumeration identified by Category.
    */
  virtual const uci::type::NotificationCategoryEnum& getCategory() const = 0;

  /** Returns a reference to the value of the enumeration identified by Category.
    *
    * @return A reference to the value of the enumeration identified by Category.
    */
  virtual uci::type::NotificationCategoryEnum& getCategory() = 0;

  /** Sets the value of the enumeration identified by Category.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setCategory(const uci::type::NotificationCategoryEnum& value) = 0;

  /** Sets the value of the enumeration identified by Category.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setCategory(uci::type::NotificationCategoryEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by Severity.
    *
    * @return A const reference to the value of the enumeration identified by Severity.
    */
  virtual const uci::type::NotificationSeverityEnum& getSeverity() const = 0;

  /** Returns a reference to the value of the enumeration identified by Severity.
    *
    * @return A reference to the value of the enumeration identified by Severity.
    */
  virtual uci::type::NotificationSeverityEnum& getSeverity() = 0;

  /** Sets the value of the enumeration identified by Severity.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setSeverity(const uci::type::NotificationSeverityEnum& value) = 0;

  /** Sets the value of the enumeration identified by Severity.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setSeverity(uci::type::NotificationSeverityEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Location.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Location.
    */
  virtual const uci::type::Point2D_Type& getLocation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Location.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Location.
    */
  virtual uci::type::Point2D_Type& getLocation() = 0;

  /** Sets the complex content identified by Location to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Location.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setLocation(const uci::type::Point2D_Type& value) = 0;

  /** Returns whether the Element identified by Location exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Location is enabled or not.
    */
  virtual bool hasLocation() const = 0;

  /** Enables the Element identified by Location.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Location.
    */
  virtual uci::type::Point2D_Type& enableLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Location.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& clearLocation() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Source.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Source.
    */
  virtual const uci::type::NotificationSourceType& getSource() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Source.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Source.
    */
  virtual uci::type::NotificationSourceType& getSource() = 0;

  /** Sets the complex content identified by Source to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Source.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setSource(const uci::type::NotificationSourceType& value) = 0;

  /** Returns whether the Element identified by Source exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Source is enabled or not.
    */
  virtual bool hasSource() const = 0;

  /** Enables the Element identified by Source.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Source.
    */
  virtual uci::type::NotificationSourceType& enableSource(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Source.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& clearSource() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Actions.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Actions.
    */
  virtual const uci::type::OperatorNotificationActionType& getActions() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Actions.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Actions.
    */
  virtual uci::type::OperatorNotificationActionType& getActions() = 0;

  /** Sets the complex content identified by Actions to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Actions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setActions(const uci::type::OperatorNotificationActionType& value) = 0;

  /** Returns whether the Element identified by Actions exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Actions is enabled or not.
    */
  virtual bool hasActions() const = 0;

  /** Enables the Element identified by Actions.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Actions.
    */
  virtual uci::type::OperatorNotificationActionType& enableActions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Actions.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& clearActions() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Count.
    *
    * @return The value of the simple primitive data type identified by Count.
    */
  virtual xs::UnsignedInt getCount() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Count.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setCount(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by Count exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Count is enabled or not.
    */
  virtual bool hasCount() const = 0;

  /** Clears (disabled) the Element identified by Count.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& clearCount() = 0;

  /** Returns the value of the SimplePrimitive data type identified by OccurrenceTimestamp.
    *
    * @return The value of the simple primitive data type identified by OccurrenceTimestamp.
    */
  virtual uci::type::DateTimeTypeValue getOccurrenceTimestamp() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by OccurrenceTimestamp.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setOccurrenceTimestamp(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by OccurrenceTimestamp exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OccurrenceTimestamp is enabled or not.
    */
  virtual bool hasOccurrenceTimestamp() const = 0;

  /** Clears (disabled) the Element identified by OccurrenceTimestamp.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& clearOccurrenceTimestamp() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Priority.
    *
    * @return The value of the simple primitive data type identified by Priority.
    */
  virtual xs::UnsignedByte getPriority() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Priority.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setPriority(xs::UnsignedByte value) = 0;

  /** Returns whether the Element identified by Priority exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Priority is enabled or not.
    */
  virtual bool hasPriority() const = 0;

  /** Clears (disabled) the Element identified by Priority.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& clearPriority() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AuralAlert.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AuralAlert.
    */
  virtual const uci::type::AuralAlertType& getAuralAlert() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AuralAlert.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AuralAlert.
    */
  virtual uci::type::AuralAlertType& getAuralAlert() = 0;

  /** Sets the complex content identified by AuralAlert to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AuralAlert.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setAuralAlert(const uci::type::AuralAlertType& value) = 0;

  /** Returns whether the Element identified by AuralAlert exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AuralAlert is enabled or not.
    */
  virtual bool hasAuralAlert() const = 0;

  /** Enables the Element identified by AuralAlert.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AuralAlert.
    */
  virtual uci::type::AuralAlertType& enableAuralAlert(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AuralAlert.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& clearAuralAlert() = 0;

  /** Returns a const reference to the bounded list identified by Destinations.
    *
    * @return A const reference to the bounded list identified by Destinations.
    */
  virtual const uci::type::OperatorNotificationMDT::Destinations& getDestinations() const = 0;

  /** Returns a reference to the bounded list identified by Destinations.
    *
    * @return A reference to the bounded list identified by Destinations.
    */
  virtual uci::type::OperatorNotificationMDT::Destinations& getDestinations() = 0;

  /** Sets the bounded list identified by Destinations.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setDestinations(const uci::type::OperatorNotificationMDT::Destinations& value) = 0;

  /** Returns a const reference to the bounded list identified by AssociatedMessage.
    *
    * @return A const reference to the bounded list identified by AssociatedMessage.
    */
  virtual const uci::type::OperatorNotificationMDT::AssociatedMessage& getAssociatedMessage() const = 0;

  /** Returns a reference to the bounded list identified by AssociatedMessage.
    *
    * @return A reference to the bounded list identified by AssociatedMessage.
    */
  virtual uci::type::OperatorNotificationMDT::AssociatedMessage& getAssociatedMessage() = 0;

  /** Sets the bounded list identified by AssociatedMessage.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorNotificationMDT& setAssociatedMessage(const uci::type::OperatorNotificationMDT::AssociatedMessage& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OperatorNotificationMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~OperatorNotificationMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OperatorNotificationMDT to copy from.
    */
  OperatorNotificationMDT(const OperatorNotificationMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OperatorNotificationMDT to the contents of the
    * OperatorNotificationMDT on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OperatorNotificationMDT on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this OperatorNotificationMDT.
    * @return A reference to this OperatorNotificationMDT.
    */
  OperatorNotificationMDT& operator=(const OperatorNotificationMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_OPERATORNOTIFICATIONMDT_H

