/** @file AO_ActivityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_AO_ACTIVITYTYPE_H
#define UCI_TYPE_AO_ACTIVITYTYPE_H

#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/AO_ComponentSettingsType.h"
#include "uci/type/ActivityBaseType.h"
#include "uci/type/ConsentEnum.h"
#include "uci/type/NED_ConeType.h"
#include "uci/type/PolygonType.h"
#include "uci/type/RepetitionType.h"
#include "uci/type/TargetType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class AO_ActivityType : public virtual ActivityBaseType {
public:

  /** This method constructs a new AO_ActivityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AO_ActivityType.
    */
  static UCI_EXPORT AO_ActivityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new AO_ActivityType initializing the data accessed by the new AO_ActivityType using the data
    * accessed by the specified AO_ActivityType (cloning).
    *
    * @param accessor The AO_ActivityType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created AO_ActivityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AO_ActivityType.
    */
  static UCI_EXPORT AO_ActivityType& create(const AO_ActivityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified AO_ActivityType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The AO_ActivityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(AO_ActivityType& accessor);

  /** Returns this accessor's type constant, i.e. aO_ActivityType.
    *
    * @return This accessor's type constant, i.e. aO_ActivityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::aO_ActivityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of AO_ActivityType.
    *
    * @return The version that was initialized from the uci:version attribute of AO_ActivityType.
    */
  static std::string getUCITypeVersion() {
    return "003.002.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AO_ActivityType& accessor) = 0;

  /** This component is optional. Indicates specific component settings for various elements for the AO sensor.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::AO_ComponentSettingsType, uci::type::accessorType::aO_ComponentSettingsType> ComponentSettings;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FOV.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FOV.
    */
  virtual const uci::type::NED_ConeType& getFOV() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FOV.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FOV.
    */
  virtual uci::type::NED_ConeType& getFOV() = 0;

  /** Sets the complex content identified by FOV to the contents of the complex content accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FOV.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_ActivityType& setFOV(const uci::type::NED_ConeType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * EmissionFootPrint2D.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      EmissionFootPrint2D.
    */
  virtual const uci::type::PolygonType& getEmissionFootPrint2D() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EmissionFootPrint2D.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EmissionFootPrint2D.
    */
  virtual uci::type::PolygonType& getEmissionFootPrint2D() = 0;

  /** Sets the complex content identified by EmissionFootPrint2D to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EmissionFootPrint2D.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_ActivityType& setEmissionFootPrint2D(const uci::type::PolygonType& value) = 0;

  /** Returns whether the Element identified by EmissionFootPrint2D exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EmissionFootPrint2D is enabled or not.
    */
  virtual bool hasEmissionFootPrint2D() const = 0;

  /** Enables the Element identified by EmissionFootPrint2D.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EmissionFootPrint2D.
    */
  virtual uci::type::PolygonType& enableEmissionFootPrint2D(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EmissionFootPrint2D.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_ActivityType& clearEmissionFootPrint2D() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Target.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Target.
    */
  virtual const uci::type::TargetType& getTarget() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Target.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Target.
    */
  virtual uci::type::TargetType& getTarget() = 0;

  /** Sets the complex content identified by Target to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Target.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_ActivityType& setTarget(const uci::type::TargetType& value) = 0;

  /** Returns whether the Element identified by Target exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Target is enabled or not.
    */
  virtual bool hasTarget() const = 0;

  /** Enables the Element identified by Target.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Target.
    */
  virtual uci::type::TargetType& enableTarget(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Target.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_ActivityType& clearTarget() = 0;

  /** Returns a const reference to the bounded list identified by ComponentSettings.
    *
    * @return A const reference to the bounded list identified by ComponentSettings.
    */
  virtual const uci::type::AO_ActivityType::ComponentSettings& getComponentSettings() const = 0;

  /** Returns a reference to the bounded list identified by ComponentSettings.
    *
    * @return A reference to the bounded list identified by ComponentSettings.
    */
  virtual uci::type::AO_ActivityType::ComponentSettings& getComponentSettings() = 0;

  /** Sets the bounded list identified by ComponentSettings.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_ActivityType& setComponentSettings(const uci::type::AO_ActivityType::ComponentSettings& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual const uci::type::RepetitionType& getRepetition() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Repetition.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& getRepetition() = 0;

  /** Sets the complex content identified by Repetition to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Repetition.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_ActivityType& setRepetition(const uci::type::RepetitionType& value) = 0;

  /** Returns whether the Element identified by Repetition exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Repetition is enabled or not.
    */
  virtual bool hasRepetition() const = 0;

  /** Enables the Element identified by Repetition.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Repetition.
    */
  virtual uci::type::RepetitionType& enableRepetition(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Repetition.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_ActivityType& clearRepetition() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ConsentRequired.
    *
    * @return The value of the simple primitive data type identified by ConsentRequired.
    */
  virtual xs::Boolean getConsentRequired() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ConsentRequired.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_ActivityType& setConsentRequired(xs::Boolean value) = 0;

  /** Returns whether the Element identified by ConsentRequired exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConsentRequired is enabled or not.
    */
  virtual bool hasConsentRequired() const = 0;

  /** Clears (disabled) the Element identified by ConsentRequired.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_ActivityType& clearConsentRequired() = 0;

  /** Returns a const reference to the value of the enumeration identified by ConsentState.
    *
    * @return A const reference to the value of the enumeration identified by ConsentState.
    */
  virtual const uci::type::ConsentEnum& getConsentState() const = 0;

  /** Returns a reference to the value of the enumeration identified by ConsentState.
    *
    * @return A reference to the value of the enumeration identified by ConsentState.
    */
  virtual uci::type::ConsentEnum& getConsentState() = 0;

  /** Sets the value of the enumeration identified by ConsentState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_ActivityType& setConsentState(const uci::type::ConsentEnum& value) = 0;

  /** Sets the value of the enumeration identified by ConsentState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_ActivityType& setConsentState(uci::type::ConsentEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ConsentState exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConsentState is enabled or not.
    */
  virtual bool hasConsentState() const = 0;

  /** Enables the Element identified by ConsentState.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ConsentState.
    */
  virtual uci::type::ConsentEnum& enableConsentState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ConsentState.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AO_ActivityType& clearConsentState() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AO_ActivityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~AO_ActivityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AO_ActivityType to copy from.
    */
  AO_ActivityType(const AO_ActivityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AO_ActivityType to the contents of the AO_ActivityType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The AO_ActivityType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this AO_ActivityType.
    * @return A reference to this AO_ActivityType.
    */
  AO_ActivityType& operator=(const AO_ActivityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_AO_ACTIVITYTYPE_H

