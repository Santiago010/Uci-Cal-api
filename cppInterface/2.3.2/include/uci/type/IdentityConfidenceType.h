/** @file IdentityConfidenceType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_IDENTITYCONFIDENCETYPE_H
#define UCI_TYPE_IDENTITYCONFIDENCETYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "EOB_IdentityConfidenceType.h"
#include "EmitterMultipleType.h"
#include "EnvironmentIdentityConfidenceType.h"
#include "PlatformIdentityConfidenceType.h"
#include "SpecificEmitterMultipleType.h"
#include "SpecificFacilityIdentityConfidenceType.h"
#include "SpecificIdentityConfidenceType.h"
#include "SpecificVehicleIdentityConfidenceType.h"
#include "StandardIdentityConfidenceType.h"
#include "StoreMultipleType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class IdentityConfidenceType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new IdentityConfidenceType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IdentityConfidenceType.
    */
  static UCI_EXPORT IdentityConfidenceType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new IdentityConfidenceType initializing the data accessed by the new IdentityConfidenceType
    * using the data accessed by the specified IdentityConfidenceType (cloning).
    *
    * @param accessor The IdentityConfidenceType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created IdentityConfidenceType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed IdentityConfidenceType.
    */
  static UCI_EXPORT IdentityConfidenceType& create(const IdentityConfidenceType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified IdentityConfidenceType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The IdentityConfidenceType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(IdentityConfidenceType& accessor);

  /** Returns this accessor's type constant, i.e. identityConfidenceType.
    *
    * @return This accessor's type constant, i.e. identityConfidenceType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::identityConfidenceType;
  }

  /** Returns the version that was initialized from the uci:version attribute of IdentityConfidenceType.
    *
    * @return The version that was initialized from the uci:version attribute of IdentityConfidenceType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const IdentityConfidenceType& accessor) = 0;

  /** Indicates a possible "standard identity" of the Entity. The value of the child Confidence element of all instances of
    * this element should sum to 100%. If multiple instances are given, each must be of a different standard identity as
    * indicated by the child element. [Occurrences: Minimum: 0; Maximum: 8]
    */
  typedef uci::base::BoundedList<uci::type::StandardIdentityConfidenceType, uci::type::accessorType::standardIdentityConfidenceType> Standard;

  /** Indicates a possible "environment" of the Entity. The value of the child Confidence element of all instances of this
    * element should sum to 100%. If multiple instances are given, each must be of a different environment type as
    * indicated by the child element. [Occurrences: Minimum: 0; Maximum: 6]
    */
  typedef uci::base::BoundedList<uci::type::EnvironmentIdentityConfidenceType, uci::type::accessorType::environmentIdentityConfidenceType> Environment;

  /** Indicates a possible "platform identity" of the Entity. The value of the child Confidence element of all instances of
    * this element should sum to 100%. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PlatformIdentityConfidenceType, uci::type::accessorType::platformIdentityConfidenceType> Platform;

  /** Indicates a possible "specific identity" of the Entity. The value of the child Confidence element of all instances of
    * this element should sum to 100%. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SpecificIdentityConfidenceType, uci::type::accessorType::specificIdentityConfidenceType> Specific;

  /** Indicates an emitter that has been identified in association with the Entity. An Entity can have multiple emitters
    * each of which are represented by one instance of this element. Each emitter can in turn have an ambiguity list of
    * emitter types indicated by descendant elements. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EmitterMultipleType, uci::type::accessorType::emitterMultipleType> Emitter;

  /** Indicates a specific emitter instance that has been identified in association with the Entity. An Entity can have
    * multiple emitters and therefore multiple specific emitters. Each specific emitter can in turn have an ambiguity list
    * of specific emitter instance possibilities as indicated by descendant elements. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SpecificEmitterMultipleType, uci::type::accessorType::specificEmitterMultipleType> SpecificEmitter;

  /** Indicates a possible specific vehicle instance, generally a blue forces vehicle, that has been identified in
    * association with the Entity. The value of the child Confidence element of all instances of this element should sum to
    * 100%. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SpecificVehicleIdentityConfidenceType, uci::type::accessorType::specificVehicleIdentityConfidenceType> SpecificVehicle;

  /** Indicates a possible specific facility instance, generally a blue forces facility, that has been identified in
    * association with the Entity. The value of the child Confidence element of all instances of this element should sum to
    * 100%. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SpecificFacilityIdentityConfidenceType, uci::type::accessorType::specificFacilityIdentityConfidenceType> SpecificFacility;

  /** Indicates a possible identity of the Entity in the taxonomy/nomenclature of the Electronic Order of Battle (EOB). The
    * value of the child Confidence element of all instances of this element should sum to 100%. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EOB_IdentityConfidenceType, uci::type::accessorType::eOB_IdentityConfidenceType> EOB;

  /** Indicates a specific weapon instance that has been identified in association with the Entity. An Entity can have
    * multiple weapons. Each weapon can in turn have an ambiguity list of specific weapon instance possibilities as
    * indicated by descendant elements. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::StoreMultipleType, uci::type::accessorType::storeMultipleType> Weapon;

  /** Returns a const reference to the bounded list identified by Standard.
    *
    * @return A const reference to the bounded list identified by Standard.
    */
  virtual const uci::type::IdentityConfidenceType::Standard& getStandard() const = 0;

  /** Returns a reference to the bounded list identified by Standard.
    *
    * @return A reference to the bounded list identified by Standard.
    */
  virtual uci::type::IdentityConfidenceType::Standard& getStandard() = 0;

  /** Sets the bounded list identified by Standard.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityConfidenceType& setStandard(const uci::type::IdentityConfidenceType::Standard& value) = 0;

  /** Returns a const reference to the bounded list identified by Environment.
    *
    * @return A const reference to the bounded list identified by Environment.
    */
  virtual const uci::type::IdentityConfidenceType::Environment& getEnvironment() const = 0;

  /** Returns a reference to the bounded list identified by Environment.
    *
    * @return A reference to the bounded list identified by Environment.
    */
  virtual uci::type::IdentityConfidenceType::Environment& getEnvironment() = 0;

  /** Sets the bounded list identified by Environment.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityConfidenceType& setEnvironment(const uci::type::IdentityConfidenceType::Environment& value) = 0;

  /** Returns a const reference to the bounded list identified by Platform.
    *
    * @return A const reference to the bounded list identified by Platform.
    */
  virtual const uci::type::IdentityConfidenceType::Platform& getPlatform() const = 0;

  /** Returns a reference to the bounded list identified by Platform.
    *
    * @return A reference to the bounded list identified by Platform.
    */
  virtual uci::type::IdentityConfidenceType::Platform& getPlatform() = 0;

  /** Sets the bounded list identified by Platform.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityConfidenceType& setPlatform(const uci::type::IdentityConfidenceType::Platform& value) = 0;

  /** Returns a const reference to the bounded list identified by Specific.
    *
    * @return A const reference to the bounded list identified by Specific.
    */
  virtual const uci::type::IdentityConfidenceType::Specific& getSpecific() const = 0;

  /** Returns a reference to the bounded list identified by Specific.
    *
    * @return A reference to the bounded list identified by Specific.
    */
  virtual uci::type::IdentityConfidenceType::Specific& getSpecific() = 0;

  /** Sets the bounded list identified by Specific.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityConfidenceType& setSpecific(const uci::type::IdentityConfidenceType::Specific& value) = 0;

  /** Returns a const reference to the bounded list identified by Emitter.
    *
    * @return A const reference to the bounded list identified by Emitter.
    */
  virtual const uci::type::IdentityConfidenceType::Emitter& getEmitter() const = 0;

  /** Returns a reference to the bounded list identified by Emitter.
    *
    * @return A reference to the bounded list identified by Emitter.
    */
  virtual uci::type::IdentityConfidenceType::Emitter& getEmitter() = 0;

  /** Sets the bounded list identified by Emitter.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityConfidenceType& setEmitter(const uci::type::IdentityConfidenceType::Emitter& value) = 0;

  /** Returns a const reference to the bounded list identified by SpecificEmitter.
    *
    * @return A const reference to the bounded list identified by SpecificEmitter.
    */
  virtual const uci::type::IdentityConfidenceType::SpecificEmitter& getSpecificEmitter() const = 0;

  /** Returns a reference to the bounded list identified by SpecificEmitter.
    *
    * @return A reference to the bounded list identified by SpecificEmitter.
    */
  virtual uci::type::IdentityConfidenceType::SpecificEmitter& getSpecificEmitter() = 0;

  /** Sets the bounded list identified by SpecificEmitter.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityConfidenceType& setSpecificEmitter(const uci::type::IdentityConfidenceType::SpecificEmitter& value) = 0;

  /** Returns a const reference to the bounded list identified by SpecificVehicle.
    *
    * @return A const reference to the bounded list identified by SpecificVehicle.
    */
  virtual const uci::type::IdentityConfidenceType::SpecificVehicle& getSpecificVehicle() const = 0;

  /** Returns a reference to the bounded list identified by SpecificVehicle.
    *
    * @return A reference to the bounded list identified by SpecificVehicle.
    */
  virtual uci::type::IdentityConfidenceType::SpecificVehicle& getSpecificVehicle() = 0;

  /** Sets the bounded list identified by SpecificVehicle.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityConfidenceType& setSpecificVehicle(const uci::type::IdentityConfidenceType::SpecificVehicle& value) = 0;

  /** Returns a const reference to the bounded list identified by SpecificFacility.
    *
    * @return A const reference to the bounded list identified by SpecificFacility.
    */
  virtual const uci::type::IdentityConfidenceType::SpecificFacility& getSpecificFacility() const = 0;

  /** Returns a reference to the bounded list identified by SpecificFacility.
    *
    * @return A reference to the bounded list identified by SpecificFacility.
    */
  virtual uci::type::IdentityConfidenceType::SpecificFacility& getSpecificFacility() = 0;

  /** Sets the bounded list identified by SpecificFacility.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityConfidenceType& setSpecificFacility(const uci::type::IdentityConfidenceType::SpecificFacility& value) = 0;

  /** Returns a const reference to the bounded list identified by EOB.
    *
    * @return A const reference to the bounded list identified by EOB.
    */
  virtual const uci::type::IdentityConfidenceType::EOB& getEOB() const = 0;

  /** Returns a reference to the bounded list identified by EOB.
    *
    * @return A reference to the bounded list identified by EOB.
    */
  virtual uci::type::IdentityConfidenceType::EOB& getEOB() = 0;

  /** Sets the bounded list identified by EOB.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityConfidenceType& setEOB(const uci::type::IdentityConfidenceType::EOB& value) = 0;

  /** Returns a const reference to the bounded list identified by Weapon.
    *
    * @return A const reference to the bounded list identified by Weapon.
    */
  virtual const uci::type::IdentityConfidenceType::Weapon& getWeapon() const = 0;

  /** Returns a reference to the bounded list identified by Weapon.
    *
    * @return A reference to the bounded list identified by Weapon.
    */
  virtual uci::type::IdentityConfidenceType::Weapon& getWeapon() = 0;

  /** Sets the bounded list identified by Weapon.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::IdentityConfidenceType& setWeapon(const uci::type::IdentityConfidenceType::Weapon& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  IdentityConfidenceType() {
  }

  /** The destructor [only available to derived classes]. */
  ~IdentityConfidenceType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The IdentityConfidenceType to copy from.
    */
  IdentityConfidenceType(const IdentityConfidenceType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this IdentityConfidenceType to the contents of the
    * IdentityConfidenceType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The IdentityConfidenceType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this IdentityConfidenceType.
    * @return A reference to this IdentityConfidenceType.
    */
  IdentityConfidenceType& operator=(const IdentityConfidenceType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_IDENTITYCONFIDENCETYPE_H

