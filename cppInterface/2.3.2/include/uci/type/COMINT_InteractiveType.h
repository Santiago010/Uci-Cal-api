/** @file COMINT_InteractiveType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMINT_INTERACTIVETYPE_H
#define UCI_TYPE_COMINT_INTERACTIVETYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "COMINT_AcquisitionTargetType.h"
#include "ForeignKeyType.h"
#include "FrequencyRangeType.h"
#include "FrequencyType.h"
#include "GainControlMethodEnum.h"
#include "MilliwattPowerRatioType.h"
#include "NoiseAdaptiveThresholdStatusEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class COMINT_InteractiveType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new COMINT_InteractiveType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed COMINT_InteractiveType.
    */
  static UCI_EXPORT COMINT_InteractiveType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new COMINT_InteractiveType initializing the data accessed by the new COMINT_InteractiveType
    * using the data accessed by the specified COMINT_InteractiveType (cloning).
    *
    * @param accessor The COMINT_InteractiveType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created COMINT_InteractiveType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed COMINT_InteractiveType.
    */
  static UCI_EXPORT COMINT_InteractiveType& create(const COMINT_InteractiveType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified COMINT_InteractiveType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The COMINT_InteractiveType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(COMINT_InteractiveType& accessor);

  /** Returns this accessor's type constant, i.e. cOMINT_InteractiveType.
    *
    * @return This accessor's type constant, i.e. cOMINT_InteractiveType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::cOMINT_InteractiveType;
  }

  /** Returns the version that was initialized from the uci:version attribute of COMINT_InteractiveType.
    *
    * @return The version that was initialized from the uci:version attribute of COMINT_InteractiveType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const COMINT_InteractiveType& accessor) = 0;

  /** Define a center frequency or a list of center frequencies to be scanned. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FrequencyType, uci::type::accessorType::frequencyType> CenterFrequency;

  /** The list of frequency ranges that form the scan list. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::FrequencyRangeType, uci::type::accessorType::frequencyRangeType> ScanRange;

  /** The list of frequencies that the subsystem should not scan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::FrequencyRangeType, uci::type::accessorType::frequencyRangeType> ScanLockout;

  /** Defines targets to be ignored. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::COMINT_AcquisitionTargetType, uci::type::accessorType::cOMINT_AcquisitionTargetType> IgnoreTarget;

  /** The Technique ID to be used by the application. This represents a technique selectable within an application, and is
    * separate from the ApplicationID index. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType> TechniqueInUse;

  /** Application-specific parameters for the technique in use. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType> TechniqueParameters;

  /** Returns the value of the SimplePrimitive data type identified by Threshold.
    *
    * @return The value of the simple primitive data type identified by Threshold.
    */
  virtual uci::type::MilliwattPowerRatioTypeValue getThreshold() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Threshold.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& setThreshold(uci::type::MilliwattPowerRatioTypeValue value) = 0;

  /** Returns whether the Element identified by Threshold exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Threshold is enabled or not.
    */
  virtual bool hasThreshold() const = 0;

  /** Clears (disabled) the Element identified by Threshold.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& clearThreshold() = 0;

  /** Returns a const reference to the value of the enumeration identified by NoiseAdaptiveThresholdStatus.
    *
    * @return A const reference to the value of the enumeration identified by NoiseAdaptiveThresholdStatus.
    */
  virtual const uci::type::NoiseAdaptiveThresholdStatusEnum& getNoiseAdaptiveThresholdStatus() const = 0;

  /** Returns a reference to the value of the enumeration identified by NoiseAdaptiveThresholdStatus.
    *
    * @return A reference to the value of the enumeration identified by NoiseAdaptiveThresholdStatus.
    */
  virtual uci::type::NoiseAdaptiveThresholdStatusEnum& getNoiseAdaptiveThresholdStatus() = 0;

  /** Sets the value of the enumeration identified by NoiseAdaptiveThresholdStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& setNoiseAdaptiveThresholdStatus(const uci::type::NoiseAdaptiveThresholdStatusEnum& value) = 0;

  /** Sets the value of the enumeration identified by NoiseAdaptiveThresholdStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& setNoiseAdaptiveThresholdStatus(uci::type::NoiseAdaptiveThresholdStatusEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by NoiseAdaptiveThresholdStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NoiseAdaptiveThresholdStatus is enabled or not.
    */
  virtual bool hasNoiseAdaptiveThresholdStatus() const = 0;

  /** Enables the Element identified by NoiseAdaptiveThresholdStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by NoiseAdaptiveThresholdStatus.
    */
  virtual uci::type::NoiseAdaptiveThresholdStatusEnum& enableNoiseAdaptiveThresholdStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by NoiseAdaptiveThresholdStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& clearNoiseAdaptiveThresholdStatus() = 0;

  /** Returns a const reference to the value of the enumeration identified by GainControlMethod.
    *
    * @return A const reference to the value of the enumeration identified by GainControlMethod.
    */
  virtual const uci::type::GainControlMethodEnum& getGainControlMethod() const = 0;

  /** Returns a reference to the value of the enumeration identified by GainControlMethod.
    *
    * @return A reference to the value of the enumeration identified by GainControlMethod.
    */
  virtual uci::type::GainControlMethodEnum& getGainControlMethod() = 0;

  /** Sets the value of the enumeration identified by GainControlMethod.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& setGainControlMethod(const uci::type::GainControlMethodEnum& value) = 0;

  /** Sets the value of the enumeration identified by GainControlMethod.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& setGainControlMethod(uci::type::GainControlMethodEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by GainControlMethod exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by GainControlMethod is enabled or not.
    */
  virtual bool hasGainControlMethod() const = 0;

  /** Enables the Element identified by GainControlMethod.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by GainControlMethod.
    */
  virtual uci::type::GainControlMethodEnum& enableGainControlMethod(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by GainControlMethod.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& clearGainControlMethod() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Gain.
    *
    * @return The value of the simple primitive data type identified by Gain.
    */
  virtual uci::type::MilliwattPowerRatioTypeValue getGain() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Gain.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& setGain(uci::type::MilliwattPowerRatioTypeValue value) = 0;

  /** Returns whether the Element identified by Gain exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Gain is enabled or not.
    */
  virtual bool hasGain() const = 0;

  /** Clears (disabled) the Element identified by Gain.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& clearGain() = 0;

  /** Returns a const reference to the bounded list identified by CenterFrequency.
    *
    * @return A const reference to the bounded list identified by CenterFrequency.
    */
  virtual const uci::type::COMINT_InteractiveType::CenterFrequency& getCenterFrequency() const = 0;

  /** Returns a reference to the bounded list identified by CenterFrequency.
    *
    * @return A reference to the bounded list identified by CenterFrequency.
    */
  virtual uci::type::COMINT_InteractiveType::CenterFrequency& getCenterFrequency() = 0;

  /** Sets the bounded list identified by CenterFrequency.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& setCenterFrequency(const uci::type::COMINT_InteractiveType::CenterFrequency& value) = 0;

  /** Returns a const reference to the bounded list identified by ScanRange.
    *
    * @return A const reference to the bounded list identified by ScanRange.
    */
  virtual const uci::type::COMINT_InteractiveType::ScanRange& getScanRange() const = 0;

  /** Returns a reference to the bounded list identified by ScanRange.
    *
    * @return A reference to the bounded list identified by ScanRange.
    */
  virtual uci::type::COMINT_InteractiveType::ScanRange& getScanRange() = 0;

  /** Sets the bounded list identified by ScanRange.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& setScanRange(const uci::type::COMINT_InteractiveType::ScanRange& value) = 0;

  /** Returns a const reference to the bounded list identified by ScanLockout.
    *
    * @return A const reference to the bounded list identified by ScanLockout.
    */
  virtual const uci::type::COMINT_InteractiveType::ScanLockout& getScanLockout() const = 0;

  /** Returns a reference to the bounded list identified by ScanLockout.
    *
    * @return A reference to the bounded list identified by ScanLockout.
    */
  virtual uci::type::COMINT_InteractiveType::ScanLockout& getScanLockout() = 0;

  /** Sets the bounded list identified by ScanLockout.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& setScanLockout(const uci::type::COMINT_InteractiveType::ScanLockout& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DwellTarget.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DwellTarget.
    */
  virtual const uci::type::COMINT_AcquisitionTargetType& getDwellTarget() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DwellTarget.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DwellTarget.
    */
  virtual uci::type::COMINT_AcquisitionTargetType& getDwellTarget() = 0;

  /** Sets the complex content identified by DwellTarget to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DwellTarget.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& setDwellTarget(const uci::type::COMINT_AcquisitionTargetType& value) = 0;

  /** Returns whether the Element identified by DwellTarget exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DwellTarget is enabled or not.
    */
  virtual bool hasDwellTarget() const = 0;

  /** Enables the Element identified by DwellTarget.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DwellTarget.
    */
  virtual uci::type::COMINT_AcquisitionTargetType& enableDwellTarget(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DwellTarget.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& clearDwellTarget() = 0;

  /** Returns a const reference to the bounded list identified by IgnoreTarget.
    *
    * @return A const reference to the bounded list identified by IgnoreTarget.
    */
  virtual const uci::type::COMINT_InteractiveType::IgnoreTarget& getIgnoreTarget() const = 0;

  /** Returns a reference to the bounded list identified by IgnoreTarget.
    *
    * @return A reference to the bounded list identified by IgnoreTarget.
    */
  virtual uci::type::COMINT_InteractiveType::IgnoreTarget& getIgnoreTarget() = 0;

  /** Sets the bounded list identified by IgnoreTarget.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& setIgnoreTarget(const uci::type::COMINT_InteractiveType::IgnoreTarget& value) = 0;

  /** Returns a const reference to the bounded list identified by TechniqueInUse.
    *
    * @return A const reference to the bounded list identified by TechniqueInUse.
    */
  virtual const uci::type::COMINT_InteractiveType::TechniqueInUse& getTechniqueInUse() const = 0;

  /** Returns a reference to the bounded list identified by TechniqueInUse.
    *
    * @return A reference to the bounded list identified by TechniqueInUse.
    */
  virtual uci::type::COMINT_InteractiveType::TechniqueInUse& getTechniqueInUse() = 0;

  /** Sets the bounded list identified by TechniqueInUse.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& setTechniqueInUse(const uci::type::COMINT_InteractiveType::TechniqueInUse& value) = 0;

  /** Returns a const reference to the bounded list identified by TechniqueParameters.
    *
    * @return A const reference to the bounded list identified by TechniqueParameters.
    */
  virtual const uci::type::COMINT_InteractiveType::TechniqueParameters& getTechniqueParameters() const = 0;

  /** Returns a reference to the bounded list identified by TechniqueParameters.
    *
    * @return A reference to the bounded list identified by TechniqueParameters.
    */
  virtual uci::type::COMINT_InteractiveType::TechniqueParameters& getTechniqueParameters() = 0;

  /** Sets the bounded list identified by TechniqueParameters.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& setTechniqueParameters(const uci::type::COMINT_InteractiveType::TechniqueParameters& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by AudioEnable.
    *
    * @return The value of the simple primitive data type identified by AudioEnable.
    */
  virtual xs::Boolean getAudioEnable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AudioEnable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& setAudioEnable(xs::Boolean value) = 0;

  /** Returns whether the Element identified by AudioEnable exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AudioEnable is enabled or not.
    */
  virtual bool hasAudioEnable() const = 0;

  /** Clears (disabled) the Element identified by AudioEnable.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& clearAudioEnable() = 0;

  /** Returns the value of the SimplePrimitive data type identified by IQ_Enable.
    *
    * @return The value of the simple primitive data type identified by IQ_Enable.
    */
  virtual xs::Boolean getIQ_Enable() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by IQ_Enable.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& setIQ_Enable(xs::Boolean value) = 0;

  /** Returns whether the Element identified by IQ_Enable exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IQ_Enable is enabled or not.
    */
  virtual bool hasIQ_Enable() const = 0;

  /** Clears (disabled) the Element identified by IQ_Enable.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_InteractiveType& clearIQ_Enable() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  COMINT_InteractiveType() {
  }

  /** The destructor [only available to derived classes]. */
  ~COMINT_InteractiveType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The COMINT_InteractiveType to copy from.
    */
  COMINT_InteractiveType(const COMINT_InteractiveType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this COMINT_InteractiveType to the contents of the
    * COMINT_InteractiveType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The COMINT_InteractiveType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this COMINT_InteractiveType.
    * @return A reference to this COMINT_InteractiveType.
    */
  COMINT_InteractiveType& operator=(const COMINT_InteractiveType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMINT_INTERACTIVETYPE_H

