/** @file RequirementMetricsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_REQUIREMENTMETRICSTYPE_H
#define UCI_TYPE_REQUIREMENTMETRICSTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "EnduranceBaseType.h"
#include "MetricsType.h"
#include "OrbitalManeuverDetailsBaseType.h"
#include "RequirementInstanceID_ChoiceType.h"
#include "TimeWindowType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class RequirementMetricsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RequirementMetricsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RequirementMetricsType.
    */
  static UCI_EXPORT RequirementMetricsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RequirementMetricsType initializing the data accessed by the new RequirementMetricsType
    * using the data accessed by the specified RequirementMetricsType (cloning).
    *
    * @param accessor The RequirementMetricsType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created RequirementMetricsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RequirementMetricsType.
    */
  static UCI_EXPORT RequirementMetricsType& create(const RequirementMetricsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RequirementMetricsType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The RequirementMetricsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RequirementMetricsType& accessor);

  /** Returns this accessor's type constant, i.e. requirementMetricsType.
    *
    * @return This accessor's type constant, i.e. requirementMetricsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::requirementMetricsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of RequirementMetricsType.
    *
    * @return The version that was initialized from the uci:version attribute of RequirementMetricsType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RequirementMetricsType& accessor) = 0;

  /** Indicates the ID of a Requirement whose metrics are summarized by sibling elements. [Occurrences: Minimum: 1;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RequirementInstanceID_ChoiceType, uci::type::accessorType::requirementInstanceID_ChoiceType> RequirementID;

  /** Returns a const reference to the bounded list identified by RequirementID.
    *
    * @return A const reference to the bounded list identified by RequirementID.
    */
  virtual const uci::type::RequirementMetricsType::RequirementID& getRequirementID() const = 0;

  /** Returns a reference to the bounded list identified by RequirementID.
    *
    * @return A reference to the bounded list identified by RequirementID.
    */
  virtual uci::type::RequirementMetricsType::RequirementID& getRequirementID() = 0;

  /** Sets the bounded list identified by RequirementID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementMetricsType& setRequirementID(const uci::type::RequirementMetricsType::RequirementID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ResourceMetrics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ResourceMetrics.
    */
  virtual const uci::type::MetricsType& getResourceMetrics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ResourceMetrics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ResourceMetrics.
    */
  virtual uci::type::MetricsType& getResourceMetrics() = 0;

  /** Sets the complex content identified by ResourceMetrics to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ResourceMetrics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementMetricsType& setResourceMetrics(const uci::type::MetricsType& value) = 0;

  /** Returns whether the Element identified by ResourceMetrics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ResourceMetrics is enabled or not.
    */
  virtual bool hasResourceMetrics() const = 0;

  /** Enables the Element identified by ResourceMetrics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ResourceMetrics.
    */
  virtual uci::type::MetricsType& enableResourceMetrics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ResourceMetrics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementMetricsType& clearResourceMetrics() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TemporalMetrics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TemporalMetrics.
    */
  virtual const uci::type::TimeWindowType& getTemporalMetrics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TemporalMetrics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TemporalMetrics.
    */
  virtual uci::type::TimeWindowType& getTemporalMetrics() = 0;

  /** Sets the complex content identified by TemporalMetrics to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TemporalMetrics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementMetricsType& setTemporalMetrics(const uci::type::TimeWindowType& value) = 0;

  /** Returns whether the Element identified by TemporalMetrics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TemporalMetrics is enabled or not.
    */
  virtual bool hasTemporalMetrics() const = 0;

  /** Enables the Element identified by TemporalMetrics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TemporalMetrics.
    */
  virtual uci::type::TimeWindowType& enableTemporalMetrics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TemporalMetrics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementMetricsType& clearTemporalMetrics() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ManeuverUsage.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ManeuverUsage.
    */
  virtual const uci::type::OrbitalManeuverDetailsBaseType& getManeuverUsage() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ManeuverUsage.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ManeuverUsage.
    */
  virtual uci::type::OrbitalManeuverDetailsBaseType& getManeuverUsage() = 0;

  /** Sets the complex content identified by ManeuverUsage to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ManeuverUsage.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementMetricsType& setManeuverUsage(const uci::type::OrbitalManeuverDetailsBaseType& value) = 0;

  /** Returns whether the Element identified by ManeuverUsage exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ManeuverUsage is enabled or not.
    */
  virtual bool hasManeuverUsage() const = 0;

  /** Enables the Element identified by ManeuverUsage.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ManeuverUsage.
    */
  virtual uci::type::OrbitalManeuverDetailsBaseType& enableManeuverUsage(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ManeuverUsage.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementMetricsType& clearManeuverUsage() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OperationalEnduranceUsage.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OperationalEnduranceUsage.
    */
  virtual const uci::type::EnduranceBaseType& getOperationalEnduranceUsage() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * OperationalEnduranceUsage.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OperationalEnduranceUsage.
    */
  virtual uci::type::EnduranceBaseType& getOperationalEnduranceUsage() = 0;

  /** Sets the complex content identified by OperationalEnduranceUsage to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OperationalEnduranceUsage.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementMetricsType& setOperationalEnduranceUsage(const uci::type::EnduranceBaseType& value) = 0;

  /** Returns whether the Element identified by OperationalEnduranceUsage exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OperationalEnduranceUsage is enabled or not.
    */
  virtual bool hasOperationalEnduranceUsage() const = 0;

  /** Enables the Element identified by OperationalEnduranceUsage.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OperationalEnduranceUsage.
    */
  virtual uci::type::EnduranceBaseType& enableOperationalEnduranceUsage(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OperationalEnduranceUsage.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementMetricsType& clearOperationalEnduranceUsage() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RequirementMetricsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~RequirementMetricsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RequirementMetricsType to copy from.
    */
  RequirementMetricsType(const RequirementMetricsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RequirementMetricsType to the contents of the
    * RequirementMetricsType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The RequirementMetricsType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this RequirementMetricsType.
    * @return A reference to this RequirementMetricsType.
    */
  RequirementMetricsType& operator=(const RequirementMetricsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_REQUIREMENTMETRICSTYPE_H

