/** @file ImageSubheaderRevA_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_IMAGESUBHEADERREVA_TYPE_H
#define UCI_TYPE_IMAGESUBHEADERREVA_TYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "CharOrSpacePairsType.h"
#include "IID2_ChoiceType.h"
#include "NITF_ClassificationAuthorityType.h"
#include "NITF_ClassificationReasonType.h"
#include "NITF_CodewordsType.h"
#include "NITF_ControlAndHandlingType.h"
#include "NITF_DateType.h"
#include "NITF_DeclassificationExemptionType.h"
#include "NITF_DeclassificationType.h"
#include "NITF_DowngradeType.h"
#include "NITF_FileSecurityClassificationType.h"
#include "NITF_ReleasingInstructionsType.h"
#include "VisibleLatin1String15Type.h"
#include "VisibleLatin1String40Type.h"
#include "VisibleLatin1String43Type.h"
#include "VisibleString17Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ImageSubheaderRevA_Type : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ImageSubheaderRevA_Type.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ImageSubheaderRevA_Type.
    */
  static UCI_EXPORT ImageSubheaderRevA_Type& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ImageSubheaderRevA_Type initializing the data accessed by the new
    * ImageSubheaderRevA_Type using the data accessed by the specified ImageSubheaderRevA_Type (cloning).
    *
    * @param accessor The ImageSubheaderRevA_Type that provides access to the data that is to be used to initialize the
    *      data accessed by the new created ImageSubheaderRevA_Type.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ImageSubheaderRevA_Type.
    */
  static UCI_EXPORT ImageSubheaderRevA_Type& create(const ImageSubheaderRevA_Type& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ImageSubheaderRevA_Type. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The ImageSubheaderRevA_Type that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ImageSubheaderRevA_Type& accessor);

  /** Returns this accessor's type constant, i.e. imageSubheaderRevA_Type.
    *
    * @return This accessor's type constant, i.e. imageSubheaderRevA_Type.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::imageSubheaderRevA_Type;
  }

  /** Returns the version that was initialized from the uci:version attribute of ImageSubheaderRevA_Type.
    *
    * @return The version that was initialized from the uci:version attribute of ImageSubheaderRevA_Type.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ImageSubheaderRevA_Type& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by TargetIdentifier.
    *
    * @return A const reference to the accessor that provides access to the string identified by TargetIdentifier.
    */
  virtual const uci::type::VisibleString17Type& getTargetIdentifier() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by TargetIdentifier.
    *
    * @return A reference to the accessor that provides access to the string identified by TargetIdentifier.
    */
  virtual uci::type::VisibleString17Type& getTargetIdentifier() = 0;

  /** Sets the string identified by TargetIdentifier to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by TargetIdentifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setTargetIdentifier(const uci::type::VisibleString17Type& value) = 0;

  /** Sets the string identified by TargetIdentifier to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setTargetIdentifier(const std::string& value) = 0;

  /** Sets the string identified by TargetIdentifier to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setTargetIdentifier(const char* value) = 0;

  /** Returns whether the Element identified by TargetIdentifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TargetIdentifier is enabled or not.
    */
  virtual bool hasTargetIdentifier() const = 0;

  /** Enables the Element identified by TargetIdentifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by TargetIdentifier.
    */
  virtual uci::type::VisibleString17Type& enableTargetIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TargetIdentifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearTargetIdentifier() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by IID2.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by IID2.
    */
  virtual const uci::type::IID2_ChoiceType& getIID2() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by IID2.
    *
    * @return A reference to the accessor that provides access to the complex content identified by IID2.
    */
  virtual uci::type::IID2_ChoiceType& getIID2() = 0;

  /** Sets the complex content identified by IID2 to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by IID2.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setIID2(const uci::type::IID2_ChoiceType& value) = 0;

  /** Returns whether the Element identified by IID2 exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IID2 is enabled or not.
    */
  virtual bool hasIID2() const = 0;

  /** Enables the Element identified by IID2.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by IID2.
    */
  virtual uci::type::IID2_ChoiceType& enableIID2(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by IID2.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearIID2() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * ImageSecurityClassification.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      ImageSecurityClassification.
    */
  virtual const uci::type::NITF_FileSecurityClassificationType& getImageSecurityClassification() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ImageSecurityClassification.
    *
    * @return A reference to the accessor that provides access to the string identified by ImageSecurityClassification.
    */
  virtual uci::type::NITF_FileSecurityClassificationType& getImageSecurityClassification() = 0;

  /** Sets the string identified by ImageSecurityClassification to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageSecurityClassification.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageSecurityClassification(const uci::type::NITF_FileSecurityClassificationType& value) = 0;

  /** Sets the string identified by ImageSecurityClassification to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageSecurityClassification(const std::string& value) = 0;

  /** Sets the string identified by ImageSecurityClassification to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageSecurityClassification(const char* value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * ImageSecurityClassificationSystem.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      ImageSecurityClassificationSystem.
    */
  virtual const uci::type::CharOrSpacePairsType& getImageSecurityClassificationSystem() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by
    * ImageSecurityClassificationSystem.
    *
    * @return A reference to the accessor that provides access to the string identified by
    *      ImageSecurityClassificationSystem.
    */
  virtual uci::type::CharOrSpacePairsType& getImageSecurityClassificationSystem() = 0;

  /** Sets the string identified by ImageSecurityClassificationSystem to the contents of the string accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageSecurityClassificationSystem.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageSecurityClassificationSystem(const uci::type::CharOrSpacePairsType& value) = 0;

  /** Sets the string identified by ImageSecurityClassificationSystem to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageSecurityClassificationSystem(const std::string& value) = 0;

  /** Sets the string identified by ImageSecurityClassificationSystem to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageSecurityClassificationSystem(const char* value) = 0;

  /** Returns whether the Element identified by ImageSecurityClassificationSystem exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageSecurityClassificationSystem is enabled or not.
    */
  virtual bool hasImageSecurityClassificationSystem() const = 0;

  /** Enables the Element identified by ImageSecurityClassificationSystem.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by
    *      ImageSecurityClassificationSystem.
    */
  virtual uci::type::CharOrSpacePairsType& enableImageSecurityClassificationSystem(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageSecurityClassificationSystem.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearImageSecurityClassificationSystem() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ImageCodewords.
    *
    * @return A const reference to the accessor that provides access to the string identified by ImageCodewords.
    */
  virtual const uci::type::NITF_CodewordsType& getImageCodewords() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ImageCodewords.
    *
    * @return A reference to the accessor that provides access to the string identified by ImageCodewords.
    */
  virtual uci::type::NITF_CodewordsType& getImageCodewords() = 0;

  /** Sets the string identified by ImageCodewords to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageCodewords.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageCodewords(const uci::type::NITF_CodewordsType& value) = 0;

  /** Sets the string identified by ImageCodewords to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageCodewords(const std::string& value) = 0;

  /** Sets the string identified by ImageCodewords to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageCodewords(const char* value) = 0;

  /** Returns whether the Element identified by ImageCodewords exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageCodewords is enabled or not.
    */
  virtual bool hasImageCodewords() const = 0;

  /** Enables the Element identified by ImageCodewords.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ImageCodewords.
    */
  virtual uci::type::NITF_CodewordsType& enableImageCodewords(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageCodewords.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearImageCodewords() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ImageControlAndHandling.
    *
    * @return A const reference to the accessor that provides access to the string identified by ImageControlAndHandling.
    */
  virtual const uci::type::NITF_ControlAndHandlingType& getImageControlAndHandling() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ImageControlAndHandling.
    *
    * @return A reference to the accessor that provides access to the string identified by ImageControlAndHandling.
    */
  virtual uci::type::NITF_ControlAndHandlingType& getImageControlAndHandling() = 0;

  /** Sets the string identified by ImageControlAndHandling to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageControlAndHandling.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageControlAndHandling(const uci::type::NITF_ControlAndHandlingType& value) = 0;

  /** Sets the string identified by ImageControlAndHandling to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageControlAndHandling(const std::string& value) = 0;

  /** Sets the string identified by ImageControlAndHandling to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageControlAndHandling(const char* value) = 0;

  /** Returns whether the Element identified by ImageControlAndHandling exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageControlAndHandling is enabled or not.
    */
  virtual bool hasImageControlAndHandling() const = 0;

  /** Enables the Element identified by ImageControlAndHandling.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ImageControlAndHandling.
    */
  virtual uci::type::NITF_ControlAndHandlingType& enableImageControlAndHandling(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageControlAndHandling.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearImageControlAndHandling() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * ImageReleasingInstructions.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      ImageReleasingInstructions.
    */
  virtual const uci::type::NITF_ReleasingInstructionsType& getImageReleasingInstructions() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ImageReleasingInstructions.
    *
    * @return A reference to the accessor that provides access to the string identified by ImageReleasingInstructions.
    */
  virtual uci::type::NITF_ReleasingInstructionsType& getImageReleasingInstructions() = 0;

  /** Sets the string identified by ImageReleasingInstructions to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageReleasingInstructions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageReleasingInstructions(const uci::type::NITF_ReleasingInstructionsType& value) = 0;

  /** Sets the string identified by ImageReleasingInstructions to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageReleasingInstructions(const std::string& value) = 0;

  /** Sets the string identified by ImageReleasingInstructions to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageReleasingInstructions(const char* value) = 0;

  /** Returns whether the Element identified by ImageReleasingInstructions exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageReleasingInstructions is enabled or not.
    */
  virtual bool hasImageReleasingInstructions() const = 0;

  /** Enables the Element identified by ImageReleasingInstructions.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ImageReleasingInstructions.
    */
  virtual uci::type::NITF_ReleasingInstructionsType& enableImageReleasingInstructions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageReleasingInstructions.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearImageReleasingInstructions() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ImageDeclassificationType.
    *
    * @return A const reference to the accessor that provides access to the string identified by ImageDeclassificationType.
    */
  virtual const uci::type::NITF_DeclassificationType& getImageDeclassificationType() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ImageDeclassificationType.
    *
    * @return A reference to the accessor that provides access to the string identified by ImageDeclassificationType.
    */
  virtual uci::type::NITF_DeclassificationType& getImageDeclassificationType() = 0;

  /** Sets the string identified by ImageDeclassificationType to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageDeclassificationType.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageDeclassificationType(const uci::type::NITF_DeclassificationType& value) = 0;

  /** Sets the string identified by ImageDeclassificationType to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageDeclassificationType(const std::string& value) = 0;

  /** Sets the string identified by ImageDeclassificationType to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageDeclassificationType(const char* value) = 0;

  /** Returns whether the Element identified by ImageDeclassificationType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageDeclassificationType is enabled or not.
    */
  virtual bool hasImageDeclassificationType() const = 0;

  /** Enables the Element identified by ImageDeclassificationType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ImageDeclassificationType.
    */
  virtual uci::type::NITF_DeclassificationType& enableImageDeclassificationType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageDeclassificationType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearImageDeclassificationType() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ImageDeclassificationDate.
    *
    * @return A const reference to the accessor that provides access to the string identified by ImageDeclassificationDate.
    */
  virtual const uci::type::NITF_DateType& getImageDeclassificationDate() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ImageDeclassificationDate.
    *
    * @return A reference to the accessor that provides access to the string identified by ImageDeclassificationDate.
    */
  virtual uci::type::NITF_DateType& getImageDeclassificationDate() = 0;

  /** Sets the string identified by ImageDeclassificationDate to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageDeclassificationDate.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageDeclassificationDate(const uci::type::NITF_DateType& value) = 0;

  /** Sets the string identified by ImageDeclassificationDate to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageDeclassificationDate(const std::string& value) = 0;

  /** Sets the string identified by ImageDeclassificationDate to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageDeclassificationDate(const char* value) = 0;

  /** Returns whether the Element identified by ImageDeclassificationDate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageDeclassificationDate is enabled or not.
    */
  virtual bool hasImageDeclassificationDate() const = 0;

  /** Enables the Element identified by ImageDeclassificationDate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ImageDeclassificationDate.
    */
  virtual uci::type::NITF_DateType& enableImageDeclassificationDate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageDeclassificationDate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearImageDeclassificationDate() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * ImageDeclassificationExemption.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      ImageDeclassificationExemption.
    */
  virtual const uci::type::NITF_DeclassificationExemptionType& getImageDeclassificationExemption() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ImageDeclassificationExemption.
    *
    * @return A reference to the accessor that provides access to the string identified by ImageDeclassificationExemption.
    */
  virtual uci::type::NITF_DeclassificationExemptionType& getImageDeclassificationExemption() = 0;

  /** Sets the string identified by ImageDeclassificationExemption to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageDeclassificationExemption.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageDeclassificationExemption(const uci::type::NITF_DeclassificationExemptionType& value) = 0;

  /** Sets the string identified by ImageDeclassificationExemption to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageDeclassificationExemption(const std::string& value) = 0;

  /** Sets the string identified by ImageDeclassificationExemption to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageDeclassificationExemption(const char* value) = 0;

  /** Returns whether the Element identified by ImageDeclassificationExemption exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageDeclassificationExemption is enabled or not.
    */
  virtual bool hasImageDeclassificationExemption() const = 0;

  /** Enables the Element identified by ImageDeclassificationExemption.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ImageDeclassificationExemption.
    */
  virtual uci::type::NITF_DeclassificationExemptionType& enableImageDeclassificationExemption(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageDeclassificationExemption.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearImageDeclassificationExemption() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ImageDowngrade.
    *
    * @return A const reference to the accessor that provides access to the string identified by ImageDowngrade.
    */
  virtual const uci::type::NITF_DowngradeType& getImageDowngrade() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ImageDowngrade.
    *
    * @return A reference to the accessor that provides access to the string identified by ImageDowngrade.
    */
  virtual uci::type::NITF_DowngradeType& getImageDowngrade() = 0;

  /** Sets the string identified by ImageDowngrade to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageDowngrade.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageDowngrade(const uci::type::NITF_DowngradeType& value) = 0;

  /** Sets the string identified by ImageDowngrade to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageDowngrade(const std::string& value) = 0;

  /** Sets the string identified by ImageDowngrade to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageDowngrade(const char* value) = 0;

  /** Returns whether the Element identified by ImageDowngrade exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageDowngrade is enabled or not.
    */
  virtual bool hasImageDowngrade() const = 0;

  /** Enables the Element identified by ImageDowngrade.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ImageDowngrade.
    */
  virtual uci::type::NITF_DowngradeType& enableImageDowngrade(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageDowngrade.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearImageDowngrade() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ImageDowngradeDate.
    *
    * @return A const reference to the accessor that provides access to the string identified by ImageDowngradeDate.
    */
  virtual const uci::type::NITF_DateType& getImageDowngradeDate() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ImageDowngradeDate.
    *
    * @return A reference to the accessor that provides access to the string identified by ImageDowngradeDate.
    */
  virtual uci::type::NITF_DateType& getImageDowngradeDate() = 0;

  /** Sets the string identified by ImageDowngradeDate to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageDowngradeDate.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageDowngradeDate(const uci::type::NITF_DateType& value) = 0;

  /** Sets the string identified by ImageDowngradeDate to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageDowngradeDate(const std::string& value) = 0;

  /** Sets the string identified by ImageDowngradeDate to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageDowngradeDate(const char* value) = 0;

  /** Returns whether the Element identified by ImageDowngradeDate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageDowngradeDate is enabled or not.
    */
  virtual bool hasImageDowngradeDate() const = 0;

  /** Enables the Element identified by ImageDowngradeDate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ImageDowngradeDate.
    */
  virtual uci::type::NITF_DateType& enableImageDowngradeDate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageDowngradeDate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearImageDowngradeDate() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ImageClassificationText.
    *
    * @return A const reference to the accessor that provides access to the string identified by ImageClassificationText.
    */
  virtual const uci::type::VisibleLatin1String43Type& getImageClassificationText() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ImageClassificationText.
    *
    * @return A reference to the accessor that provides access to the string identified by ImageClassificationText.
    */
  virtual uci::type::VisibleLatin1String43Type& getImageClassificationText() = 0;

  /** Sets the string identified by ImageClassificationText to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageClassificationText.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageClassificationText(const uci::type::VisibleLatin1String43Type& value) = 0;

  /** Sets the string identified by ImageClassificationText to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageClassificationText(const std::string& value) = 0;

  /** Sets the string identified by ImageClassificationText to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageClassificationText(const char* value) = 0;

  /** Returns whether the Element identified by ImageClassificationText exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageClassificationText is enabled or not.
    */
  virtual bool hasImageClassificationText() const = 0;

  /** Enables the Element identified by ImageClassificationText.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ImageClassificationText.
    */
  virtual uci::type::VisibleLatin1String43Type& enableImageClassificationText(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageClassificationText.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearImageClassificationText() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * ImageClassificationAuthorityType.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      ImageClassificationAuthorityType.
    */
  virtual const uci::type::NITF_ClassificationAuthorityType& getImageClassificationAuthorityType() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by
    * ImageClassificationAuthorityType.
    *
    * @return A reference to the accessor that provides access to the string identified by
    *      ImageClassificationAuthorityType.
    */
  virtual uci::type::NITF_ClassificationAuthorityType& getImageClassificationAuthorityType() = 0;

  /** Sets the string identified by ImageClassificationAuthorityType to the contents of the string accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageClassificationAuthorityType.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageClassificationAuthorityType(const uci::type::NITF_ClassificationAuthorityType& value) = 0;

  /** Sets the string identified by ImageClassificationAuthorityType to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageClassificationAuthorityType(const std::string& value) = 0;

  /** Sets the string identified by ImageClassificationAuthorityType to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageClassificationAuthorityType(const char* value) = 0;

  /** Returns whether the Element identified by ImageClassificationAuthorityType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageClassificationAuthorityType is enabled or not.
    */
  virtual bool hasImageClassificationAuthorityType() const = 0;

  /** Enables the Element identified by ImageClassificationAuthorityType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by
    *      ImageClassificationAuthorityType.
    */
  virtual uci::type::NITF_ClassificationAuthorityType& enableImageClassificationAuthorityType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageClassificationAuthorityType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearImageClassificationAuthorityType() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * ImageClassificationAuthority.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      ImageClassificationAuthority.
    */
  virtual const uci::type::VisibleLatin1String40Type& getImageClassificationAuthority() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ImageClassificationAuthority.
    *
    * @return A reference to the accessor that provides access to the string identified by ImageClassificationAuthority.
    */
  virtual uci::type::VisibleLatin1String40Type& getImageClassificationAuthority() = 0;

  /** Sets the string identified by ImageClassificationAuthority to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageClassificationAuthority.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageClassificationAuthority(const uci::type::VisibleLatin1String40Type& value) = 0;

  /** Sets the string identified by ImageClassificationAuthority to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageClassificationAuthority(const std::string& value) = 0;

  /** Sets the string identified by ImageClassificationAuthority to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageClassificationAuthority(const char* value) = 0;

  /** Returns whether the Element identified by ImageClassificationAuthority exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageClassificationAuthority is enabled or not.
    */
  virtual bool hasImageClassificationAuthority() const = 0;

  /** Enables the Element identified by ImageClassificationAuthority.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ImageClassificationAuthority.
    */
  virtual uci::type::VisibleLatin1String40Type& enableImageClassificationAuthority(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageClassificationAuthority.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearImageClassificationAuthority() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ImageClassificationReason.
    *
    * @return A const reference to the accessor that provides access to the string identified by ImageClassificationReason.
    */
  virtual const uci::type::NITF_ClassificationReasonType& getImageClassificationReason() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ImageClassificationReason.
    *
    * @return A reference to the accessor that provides access to the string identified by ImageClassificationReason.
    */
  virtual uci::type::NITF_ClassificationReasonType& getImageClassificationReason() = 0;

  /** Sets the string identified by ImageClassificationReason to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageClassificationReason.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageClassificationReason(const uci::type::NITF_ClassificationReasonType& value) = 0;

  /** Sets the string identified by ImageClassificationReason to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageClassificationReason(const std::string& value) = 0;

  /** Sets the string identified by ImageClassificationReason to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageClassificationReason(const char* value) = 0;

  /** Returns whether the Element identified by ImageClassificationReason exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageClassificationReason is enabled or not.
    */
  virtual bool hasImageClassificationReason() const = 0;

  /** Enables the Element identified by ImageClassificationReason.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ImageClassificationReason.
    */
  virtual uci::type::NITF_ClassificationReasonType& enableImageClassificationReason(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageClassificationReason.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearImageClassificationReason() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ImageSecuritySourceDate.
    *
    * @return A const reference to the accessor that provides access to the string identified by ImageSecuritySourceDate.
    */
  virtual const uci::type::NITF_DateType& getImageSecuritySourceDate() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ImageSecuritySourceDate.
    *
    * @return A reference to the accessor that provides access to the string identified by ImageSecuritySourceDate.
    */
  virtual uci::type::NITF_DateType& getImageSecuritySourceDate() = 0;

  /** Sets the string identified by ImageSecuritySourceDate to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageSecuritySourceDate.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageSecuritySourceDate(const uci::type::NITF_DateType& value) = 0;

  /** Sets the string identified by ImageSecuritySourceDate to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageSecuritySourceDate(const std::string& value) = 0;

  /** Sets the string identified by ImageSecuritySourceDate to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageSecuritySourceDate(const char* value) = 0;

  /** Returns whether the Element identified by ImageSecuritySourceDate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageSecuritySourceDate is enabled or not.
    */
  virtual bool hasImageSecuritySourceDate() const = 0;

  /** Enables the Element identified by ImageSecuritySourceDate.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ImageSecuritySourceDate.
    */
  virtual uci::type::NITF_DateType& enableImageSecuritySourceDate(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageSecuritySourceDate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearImageSecuritySourceDate() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * ImageSecurityControlNumber.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      ImageSecurityControlNumber.
    */
  virtual const uci::type::VisibleLatin1String15Type& getImageSecurityControlNumber() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ImageSecurityControlNumber.
    *
    * @return A reference to the accessor that provides access to the string identified by ImageSecurityControlNumber.
    */
  virtual uci::type::VisibleLatin1String15Type& getImageSecurityControlNumber() = 0;

  /** Sets the string identified by ImageSecurityControlNumber to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageSecurityControlNumber.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageSecurityControlNumber(const uci::type::VisibleLatin1String15Type& value) = 0;

  /** Sets the string identified by ImageSecurityControlNumber to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageSecurityControlNumber(const std::string& value) = 0;

  /** Sets the string identified by ImageSecurityControlNumber to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& setImageSecurityControlNumber(const char* value) = 0;

  /** Returns whether the Element identified by ImageSecurityControlNumber exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ImageSecurityControlNumber is enabled or not.
    */
  virtual bool hasImageSecurityControlNumber() const = 0;

  /** Enables the Element identified by ImageSecurityControlNumber.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ImageSecurityControlNumber.
    */
  virtual uci::type::VisibleLatin1String15Type& enableImageSecurityControlNumber(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ImageSecurityControlNumber.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ImageSubheaderRevA_Type& clearImageSecurityControlNumber() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ImageSubheaderRevA_Type() {
  }

  /** The destructor [only available to derived classes]. */
  ~ImageSubheaderRevA_Type() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ImageSubheaderRevA_Type to copy from.
    */
  ImageSubheaderRevA_Type(const ImageSubheaderRevA_Type& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ImageSubheaderRevA_Type to the contents of the
    * ImageSubheaderRevA_Type on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ImageSubheaderRevA_Type on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this ImageSubheaderRevA_Type.
    * @return A reference to this ImageSubheaderRevA_Type.
    */
  ImageSubheaderRevA_Type& operator=(const ImageSubheaderRevA_Type& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_IMAGESUBHEADERREVA_TYPE_H

