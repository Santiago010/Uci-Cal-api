/** @file EntityOrbitalCSO_MDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ENTITYORBITALCSO_MDT_H
#define UCI_TYPE_ENTITYORBITALCSO_MDT_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/CSO_DetailsType.h"
#include "uci/type/CSO_StateEnum.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/EntityOrbitalCSO_ID_Type.h"
#include "uci/type/OperatorID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type indicates all of the message data associated with the EntityOrbitalCSO message. */
class EntityOrbitalCSO_MDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new EntityOrbitalCSO_MDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EntityOrbitalCSO_MDT.
    */
  static UCI_EXPORT EntityOrbitalCSO_MDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new EntityOrbitalCSO_MDT initializing the data accessed by the new EntityOrbitalCSO_MDT
    * using the data accessed by the specified EntityOrbitalCSO_MDT (cloning).
    *
    * @param accessor The EntityOrbitalCSO_MDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created EntityOrbitalCSO_MDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EntityOrbitalCSO_MDT.
    */
  static UCI_EXPORT EntityOrbitalCSO_MDT& create(const EntityOrbitalCSO_MDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified EntityOrbitalCSO_MDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The EntityOrbitalCSO_MDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(EntityOrbitalCSO_MDT& accessor);

  /** Returns this accessor's type constant, i.e. entityOrbitalCSO_MDT.
    *
    * @return This accessor's type constant, i.e. entityOrbitalCSO_MDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::entityOrbitalCSO_MDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of EntityOrbitalCSO_MDT.
    *
    * @return The version that was initialized from the uci:version attribute of EntityOrbitalCSO_MDT.
    */
  static std::string getUCITypeVersion() {
    return "002.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const EntityOrbitalCSO_MDT& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CSO_ID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CSO_ID.
    */
  virtual const uci::type::EntityOrbitalCSO_ID_Type& getCSO_ID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CSO_ID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CSO_ID.
    */
  virtual uci::type::EntityOrbitalCSO_ID_Type& getCSO_ID() = 0;

  /** Sets the complex content identified by CSO_ID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CSO_ID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityOrbitalCSO_MDT& setCSO_ID(const uci::type::EntityOrbitalCSO_ID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by CSO_State.
    *
    * @return A const reference to the value of the enumeration identified by CSO_State.
    */
  virtual const uci::type::CSO_StateEnum& getCSO_State() const = 0;

  /** Returns a reference to the value of the enumeration identified by CSO_State.
    *
    * @return A reference to the value of the enumeration identified by CSO_State.
    */
  virtual uci::type::CSO_StateEnum& getCSO_State() = 0;

  /** Sets the value of the enumeration identified by CSO_State.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityOrbitalCSO_MDT& setCSO_State(const uci::type::CSO_StateEnum& value) = 0;

  /** Sets the value of the enumeration identified by CSO_State.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityOrbitalCSO_MDT& setCSO_State(uci::type::CSO_StateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PrimaryObjectID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PrimaryObjectID.
    */
  virtual const uci::type::EntityID_Type& getPrimaryObjectID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PrimaryObjectID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PrimaryObjectID.
    */
  virtual uci::type::EntityID_Type& getPrimaryObjectID() = 0;

  /** Sets the complex content identified by PrimaryObjectID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PrimaryObjectID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityOrbitalCSO_MDT& setPrimaryObjectID(const uci::type::EntityID_Type& value) = 0;

  /** Enables the Element identified by PrimaryObjectID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return A reference to the accessor that provides access to the complex content identified by PrimaryObjectID.
    */
  virtual uci::type::EntityID_Type& enablePrimaryObjectID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SecondaryObjectID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SecondaryObjectID.
    */
  virtual const uci::type::EntityID_Type& getSecondaryObjectID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SecondaryObjectID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SecondaryObjectID.
    */
  virtual uci::type::EntityID_Type& getSecondaryObjectID() = 0;

  /** Sets the complex content identified by SecondaryObjectID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SecondaryObjectID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityOrbitalCSO_MDT& setSecondaryObjectID(const uci::type::EntityID_Type& value) = 0;

  /** Enables the Element identified by SecondaryObjectID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return A reference to the accessor that provides access to the complex content identified by SecondaryObjectID.
    */
  virtual uci::type::EntityID_Type& enableSecondaryObjectID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OperatorID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OperatorID.
    */
  virtual const uci::type::OperatorID_Type& getOperatorID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OperatorID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OperatorID.
    */
  virtual uci::type::OperatorID_Type& getOperatorID() = 0;

  /** Sets the complex content identified by OperatorID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OperatorID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityOrbitalCSO_MDT& setOperatorID(const uci::type::OperatorID_Type& value) = 0;

  /** Returns whether the Element identified by OperatorID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OperatorID is enabled or not.
    */
  virtual bool hasOperatorID() const = 0;

  /** Enables the Element identified by OperatorID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OperatorID.
    */
  virtual uci::type::OperatorID_Type& enableOperatorID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OperatorID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityOrbitalCSO_MDT& clearOperatorID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CSO_Details.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CSO_Details.
    */
  virtual const uci::type::CSO_DetailsType& getCSO_Details() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CSO_Details.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CSO_Details.
    */
  virtual uci::type::CSO_DetailsType& getCSO_Details() = 0;

  /** Sets the complex content identified by CSO_Details to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CSO_Details.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityOrbitalCSO_MDT& setCSO_Details(const uci::type::CSO_DetailsType& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  EntityOrbitalCSO_MDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~EntityOrbitalCSO_MDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The EntityOrbitalCSO_MDT to copy from.
    */
  EntityOrbitalCSO_MDT(const EntityOrbitalCSO_MDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this EntityOrbitalCSO_MDT to the contents of the EntityOrbitalCSO_MDT
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The EntityOrbitalCSO_MDT on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this EntityOrbitalCSO_MDT.
    * @return A reference to this EntityOrbitalCSO_MDT.
    */
  EntityOrbitalCSO_MDT& operator=(const EntityOrbitalCSO_MDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ENTITYORBITALCSO_MDT_H

