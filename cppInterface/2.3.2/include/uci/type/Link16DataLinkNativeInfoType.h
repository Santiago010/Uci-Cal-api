/** @file Link16DataLinkNativeInfoType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_LINK16DATALINKNATIVEINFOTYPE_H
#define UCI_TYPE_LINK16DATALINKNATIVEINFOTYPE_H

#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "DataLinkNativeInfoPET.h"
#include "Link16TrackBlockType.h"
#include "Link16TrackNumberType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This is a polymorphic extension which allows for the extension of the base DataLinkNativeInfoPET for a Link-16
  * mapping between a System ID and the specific platform data to exist within a link-16 network.
  */
class Link16DataLinkNativeInfoType : public virtual DataLinkNativeInfoPET {
public:

  /** This method constructs a new Link16DataLinkNativeInfoType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed Link16DataLinkNativeInfoType.
    */
  static UCI_EXPORT Link16DataLinkNativeInfoType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new Link16DataLinkNativeInfoType initializing the data accessed by the new
    * Link16DataLinkNativeInfoType using the data accessed by the specified Link16DataLinkNativeInfoType (cloning).
    *
    * @param accessor The Link16DataLinkNativeInfoType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created Link16DataLinkNativeInfoType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed Link16DataLinkNativeInfoType.
    */
  static UCI_EXPORT Link16DataLinkNativeInfoType& create(const Link16DataLinkNativeInfoType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified Link16DataLinkNativeInfoType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The Link16DataLinkNativeInfoType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(Link16DataLinkNativeInfoType& accessor);

  /** Returns this accessor's type constant, i.e. link16DataLinkNativeInfoType.
    *
    * @return This accessor's type constant, i.e. link16DataLinkNativeInfoType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::link16DataLinkNativeInfoType;
  }

  /** Returns the version that was initialized from the uci:version attribute of Link16DataLinkNativeInfoType.
    *
    * @return The version that was initialized from the uci:version attribute of Link16DataLinkNativeInfoType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const Link16DataLinkNativeInfoType& accessor) = 0;

  /** Indicates the unique ID of the lower track range limit. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::Link16TrackBlockType, uci::type::accessorType::link16TrackBlockType> TrackBlock;

  /** Returns a const reference to the accessor that provides access to the string identified by SourceTrackNumber.
    *
    * @return A const reference to the accessor that provides access to the string identified by SourceTrackNumber.
    */
  virtual const uci::type::Link16TrackNumberType& getSourceTrackNumber() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by SourceTrackNumber.
    *
    * @return A reference to the accessor that provides access to the string identified by SourceTrackNumber.
    */
  virtual uci::type::Link16TrackNumberType& getSourceTrackNumber() = 0;

  /** Sets the string identified by SourceTrackNumber to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by SourceTrackNumber.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16DataLinkNativeInfoType& setSourceTrackNumber(const uci::type::Link16TrackNumberType& value) = 0;

  /** Sets the string identified by SourceTrackNumber to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16DataLinkNativeInfoType& setSourceTrackNumber(const std::string& value) = 0;

  /** Sets the string identified by SourceTrackNumber to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16DataLinkNativeInfoType& setSourceTrackNumber(const char* value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by C2Indicator.
    *
    * @return The value of the simple primitive data type identified by C2Indicator.
    */
  virtual xs::Boolean getC2Indicator() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by C2Indicator.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16DataLinkNativeInfoType& setC2Indicator(xs::Boolean value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by CDO_Authority.
    *
    * @return The value of the simple primitive data type identified by CDO_Authority.
    */
  virtual xs::Boolean getCDO_Authority() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by CDO_Authority.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16DataLinkNativeInfoType& setCDO_Authority(xs::Boolean value) = 0;

  /** Returns a const reference to the bounded list identified by TrackBlock.
    *
    * @return A const reference to the bounded list identified by TrackBlock.
    */
  virtual const uci::type::Link16DataLinkNativeInfoType::TrackBlock& getTrackBlock() const = 0;

  /** Returns a reference to the bounded list identified by TrackBlock.
    *
    * @return A reference to the bounded list identified by TrackBlock.
    */
  virtual uci::type::Link16DataLinkNativeInfoType::TrackBlock& getTrackBlock() = 0;

  /** Sets the bounded list identified by TrackBlock.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16DataLinkNativeInfoType& setTrackBlock(const uci::type::Link16DataLinkNativeInfoType::TrackBlock& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  Link16DataLinkNativeInfoType() {
  }

  /** The destructor [only available to derived classes]. */
  ~Link16DataLinkNativeInfoType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The Link16DataLinkNativeInfoType to copy from.
    */
  Link16DataLinkNativeInfoType(const Link16DataLinkNativeInfoType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this Link16DataLinkNativeInfoType to the contents of the
    * Link16DataLinkNativeInfoType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The Link16DataLinkNativeInfoType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this Link16DataLinkNativeInfoType.
    * @return A reference to this Link16DataLinkNativeInfoType.
    */
  Link16DataLinkNativeInfoType& operator=(const Link16DataLinkNativeInfoType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_LINK16DATALINKNATIVEINFOTYPE_H

