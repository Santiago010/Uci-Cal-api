/** @file Link16InterfaceDataLinkNativeInfoType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_LINK16INTERFACEDATALINKNATIVEINFOTYPE_H
#define UCI_TYPE_LINK16INTERFACEDATALINKNATIVEINFOTYPE_H

#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ActivityByType.h"
#include "DataLinkNativeInfoPET.h"
#include "Link16_ControlChannelType.h"
#include "VoiceCallSignType.h"
#include "VoiceControlType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This is a polymorphic extension which allows for the extension of the base DataLinkNativeInfo type to support a Link
  * 16 self report.
  */
class Link16InterfaceDataLinkNativeInfoType : public virtual DataLinkNativeInfoPET {
public:

  /** This method constructs a new Link16InterfaceDataLinkNativeInfoType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed Link16InterfaceDataLinkNativeInfoType.
    */
  static UCI_EXPORT Link16InterfaceDataLinkNativeInfoType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new Link16InterfaceDataLinkNativeInfoType initializing the data accessed by the new
    * Link16InterfaceDataLinkNativeInfoType using the data accessed by the specified Link16InterfaceDataLinkNativeInfoType
    * (cloning).
    *
    * @param accessor The Link16InterfaceDataLinkNativeInfoType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created Link16InterfaceDataLinkNativeInfoType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed Link16InterfaceDataLinkNativeInfoType.
    */
  static UCI_EXPORT Link16InterfaceDataLinkNativeInfoType& create(const Link16InterfaceDataLinkNativeInfoType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified Link16InterfaceDataLinkNativeInfoType. Use of the specified accessor after it has
    * been destroyed will result in undefined behavior.
    *
    * @param accessor The Link16InterfaceDataLinkNativeInfoType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(Link16InterfaceDataLinkNativeInfoType& accessor);

  /** Returns this accessor's type constant, i.e. link16InterfaceDataLinkNativeInfoType.
    *
    * @return This accessor's type constant, i.e. link16InterfaceDataLinkNativeInfoType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::link16InterfaceDataLinkNativeInfoType;
  }

  /** Returns the version that was initialized from the uci:version attribute of Link16InterfaceDataLinkNativeInfoType.
    *
    * @return The version that was initialized from the uci:version attribute of Link16InterfaceDataLinkNativeInfoType.
    */
  static std::string getUCITypeVersion() {
    return "001.001.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const Link16InterfaceDataLinkNativeInfoType& accessor) = 0;

  /** This element indicates an activity, that isn't otherwise represented by UCI Tasks, Capability commands, etc. being
    * performed by the Entity. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ActivityByType, uci::type::accessorType::activityByType> ActivityBy;

  /** Returns a const reference to the accessor that provides access to the string identified by VoiceCallSign.
    *
    * @return A const reference to the accessor that provides access to the string identified by VoiceCallSign.
    */
  virtual const uci::type::VoiceCallSignType& getVoiceCallSign() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by VoiceCallSign.
    *
    * @return A reference to the accessor that provides access to the string identified by VoiceCallSign.
    */
  virtual uci::type::VoiceCallSignType& getVoiceCallSign() = 0;

  /** Sets the string identified by VoiceCallSign to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by VoiceCallSign.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16InterfaceDataLinkNativeInfoType& setVoiceCallSign(const uci::type::VoiceCallSignType& value) = 0;

  /** Sets the string identified by VoiceCallSign to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16InterfaceDataLinkNativeInfoType& setVoiceCallSign(const std::string& value) = 0;

  /** Sets the string identified by VoiceCallSign to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16InterfaceDataLinkNativeInfoType& setVoiceCallSign(const char* value) = 0;

  /** Returns whether the Element identified by VoiceCallSign exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VoiceCallSign is enabled or not.
    */
  virtual bool hasVoiceCallSign() const = 0;

  /** Enables the Element identified by VoiceCallSign.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by VoiceCallSign.
    */
  virtual uci::type::VoiceCallSignType& enableVoiceCallSign(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VoiceCallSign.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16InterfaceDataLinkNativeInfoType& clearVoiceCallSign() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ControlChannel.
    *
    * @return The value of the simple primitive data type identified by ControlChannel.
    */
  virtual uci::type::Link16_ControlChannelTypeValue getControlChannel() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ControlChannel.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16InterfaceDataLinkNativeInfoType& setControlChannel(uci::type::Link16_ControlChannelTypeValue value) = 0;

  /** Returns whether the Element identified by ControlChannel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ControlChannel is enabled or not.
    */
  virtual bool hasControlChannel() const = 0;

  /** Clears (disabled) the Element identified by ControlChannel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16InterfaceDataLinkNativeInfoType& clearControlChannel() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ForceTellIndicator.
    *
    * @return The value of the simple primitive data type identified by ForceTellIndicator.
    */
  virtual xs::Boolean getForceTellIndicator() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ForceTellIndicator.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16InterfaceDataLinkNativeInfoType& setForceTellIndicator(xs::Boolean value) = 0;

  /** Returns whether the Element identified by ForceTellIndicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ForceTellIndicator is enabled or not.
    */
  virtual bool hasForceTellIndicator() const = 0;

  /** Clears (disabled) the Element identified by ForceTellIndicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16InterfaceDataLinkNativeInfoType& clearForceTellIndicator() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EmergencyIndicator.
    *
    * @return The value of the simple primitive data type identified by EmergencyIndicator.
    */
  virtual xs::Boolean getEmergencyIndicator() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EmergencyIndicator.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16InterfaceDataLinkNativeInfoType& setEmergencyIndicator(xs::Boolean value) = 0;

  /** Returns whether the Element identified by EmergencyIndicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EmergencyIndicator is enabled or not.
    */
  virtual bool hasEmergencyIndicator() const = 0;

  /** Clears (disabled) the Element identified by EmergencyIndicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16InterfaceDataLinkNativeInfoType& clearEmergencyIndicator() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by VoiceControl.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by VoiceControl.
    */
  virtual const uci::type::VoiceControlType& getVoiceControl() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by VoiceControl.
    *
    * @return A reference to the accessor that provides access to the complex content identified by VoiceControl.
    */
  virtual uci::type::VoiceControlType& getVoiceControl() = 0;

  /** Sets the complex content identified by VoiceControl to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by VoiceControl.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16InterfaceDataLinkNativeInfoType& setVoiceControl(const uci::type::VoiceControlType& value) = 0;

  /** Returns whether the Element identified by VoiceControl exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VoiceControl is enabled or not.
    */
  virtual bool hasVoiceControl() const = 0;

  /** Enables the Element identified by VoiceControl.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by VoiceControl.
    */
  virtual uci::type::VoiceControlType& enableVoiceControl(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VoiceControl.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16InterfaceDataLinkNativeInfoType& clearVoiceControl() = 0;

  /** Returns a const reference to the bounded list identified by ActivityBy.
    *
    * @return A const reference to the bounded list identified by ActivityBy.
    */
  virtual const uci::type::Link16InterfaceDataLinkNativeInfoType::ActivityBy& getActivityBy() const = 0;

  /** Returns a reference to the bounded list identified by ActivityBy.
    *
    * @return A reference to the bounded list identified by ActivityBy.
    */
  virtual uci::type::Link16InterfaceDataLinkNativeInfoType::ActivityBy& getActivityBy() = 0;

  /** Sets the bounded list identified by ActivityBy.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::Link16InterfaceDataLinkNativeInfoType& setActivityBy(const uci::type::Link16InterfaceDataLinkNativeInfoType::ActivityBy& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  Link16InterfaceDataLinkNativeInfoType() {
  }

  /** The destructor [only available to derived classes]. */
  ~Link16InterfaceDataLinkNativeInfoType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The Link16InterfaceDataLinkNativeInfoType to copy from.
    */
  Link16InterfaceDataLinkNativeInfoType(const Link16InterfaceDataLinkNativeInfoType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this Link16InterfaceDataLinkNativeInfoType to the contents of the
    * Link16InterfaceDataLinkNativeInfoType on the right hand side (rhs) of the assignment operator [only available to
    * derived classes].
    *
    * @param rhs The Link16InterfaceDataLinkNativeInfoType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this Link16InterfaceDataLinkNativeInfoType.
    * @return A reference to this Link16InterfaceDataLinkNativeInfoType.
    */
  Link16InterfaceDataLinkNativeInfoType& operator=(const Link16InterfaceDataLinkNativeInfoType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_LINK16INTERFACEDATALINKNATIVEINFOTYPE_H

