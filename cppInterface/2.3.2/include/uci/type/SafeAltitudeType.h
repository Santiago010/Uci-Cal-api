/** @file SafeAltitudeType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SAFEALTITUDETYPE_H
#define UCI_TYPE_SAFEALTITUDETYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/AltitudeRadialPairType.h"
#include "uci/type/Point2D_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This field specifies a set of safe minimum approach altitudes and an emergency safe altitude. This field also
  * specifies the cylindrical area, defined by a center point and radius, where the altitudes apply. This field defines
  * minimum approach altitude and emergency safe altitude consistent with standard FAA instrument approach chart
  * definitions (using UCI standard data types). This information can, for example, be used to eliminate runways or
  * extirpation points when the required altitude is not achievable during an anomaly.
  */
class SafeAltitudeType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SafeAltitudeType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SafeAltitudeType.
    */
  static UCI_EXPORT SafeAltitudeType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SafeAltitudeType initializing the data accessed by the new SafeAltitudeType using the
    * data accessed by the specified SafeAltitudeType (cloning).
    *
    * @param accessor The SafeAltitudeType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SafeAltitudeType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SafeAltitudeType.
    */
  static UCI_EXPORT SafeAltitudeType& create(const SafeAltitudeType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SafeAltitudeType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The SafeAltitudeType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SafeAltitudeType& accessor);

  /** Returns this accessor's type constant, i.e. safeAltitudeType.
    *
    * @return This accessor's type constant, i.e. safeAltitudeType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::safeAltitudeType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SafeAltitudeType.
    *
    * @return The version that was initialized from the uci:version attribute of SafeAltitudeType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SafeAltitudeType& accessor) = 0;

  /** This field defines the minimum safe altitudes (MSA) as defined by the FAA Instrument Procedures Handbook, Chapter 4
    * "Approaches", "Minimum Safe/Sector Altitude" section. MSAs are published for emergency use on instrument approach
    * charts. MSAs provide 1,000 feet of clearance over all obstacles but do not necessarily assure acceptable navigation
    * signal coverage. Altitudes provided here are valid to a 25 nm radius range. Each array element defines the MSA
    * between the specified radial and the next element's radial. As a result elements in the array need to have a radial
    * greater than the preceding radial (i.e. in increasing radial order). If only one element is provided, its radial is
    * N/A as the MSA applies to the full circle. Radials are measured inbounds to the center point, relative to true north.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::AltitudeRadialPairType, uci::type::accessorType::altitudeRadialPairType> MinimumSafeAltitude;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CenterPointAndESA.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CenterPointAndESA.
    */
  virtual const uci::type::Point2D_Type& getCenterPointAndESA() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CenterPointAndESA.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CenterPointAndESA.
    */
  virtual uci::type::Point2D_Type& getCenterPointAndESA() = 0;

  /** Sets the complex content identified by CenterPointAndESA to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CenterPointAndESA.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SafeAltitudeType& setCenterPointAndESA(const uci::type::Point2D_Type& value) = 0;

  /** Enables the Element identified by CenterPointAndESA.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return A reference to the accessor that provides access to the complex content identified by CenterPointAndESA.
    */
  virtual uci::type::Point2D_Type& enableCenterPointAndESA(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the bounded list identified by MinimumSafeAltitude.
    *
    * @return A const reference to the bounded list identified by MinimumSafeAltitude.
    */
  virtual const uci::type::SafeAltitudeType::MinimumSafeAltitude& getMinimumSafeAltitude() const = 0;

  /** Returns a reference to the bounded list identified by MinimumSafeAltitude.
    *
    * @return A reference to the bounded list identified by MinimumSafeAltitude.
    */
  virtual uci::type::SafeAltitudeType::MinimumSafeAltitude& getMinimumSafeAltitude() = 0;

  /** Sets the bounded list identified by MinimumSafeAltitude.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SafeAltitudeType& setMinimumSafeAltitude(const uci::type::SafeAltitudeType::MinimumSafeAltitude& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SafeAltitudeType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SafeAltitudeType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SafeAltitudeType to copy from.
    */
  SafeAltitudeType(const SafeAltitudeType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SafeAltitudeType to the contents of the SafeAltitudeType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SafeAltitudeType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this SafeAltitudeType.
    * @return A reference to this SafeAltitudeType.
    */
  SafeAltitudeType& operator=(const SafeAltitudeType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SAFEALTITUDETYPE_H

