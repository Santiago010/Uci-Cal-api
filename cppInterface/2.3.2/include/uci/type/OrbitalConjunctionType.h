/** @file OrbitalConjunctionType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ORBITALCONJUNCTIONTYPE_H
#define UCI_TYPE_ORBITALCONJUNCTIONTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "DateTimeType.h"
#include "DistanceType.h"
#include "OrbitalConjunctionEnum.h"
#include "OrbitalConjunctionID_Type.h"
#include "OrbitalConjunctionObjectType.h"
#include "PercentType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the type of orbital conjunction that is reported. */
class OrbitalConjunctionType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OrbitalConjunctionType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitalConjunctionType.
    */
  static UCI_EXPORT OrbitalConjunctionType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OrbitalConjunctionType initializing the data accessed by the new OrbitalConjunctionType
    * using the data accessed by the specified OrbitalConjunctionType (cloning).
    *
    * @param accessor The OrbitalConjunctionType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created OrbitalConjunctionType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitalConjunctionType.
    */
  static UCI_EXPORT OrbitalConjunctionType& create(const OrbitalConjunctionType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OrbitalConjunctionType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The OrbitalConjunctionType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OrbitalConjunctionType& accessor);

  /** Returns this accessor's type constant, i.e. orbitalConjunctionType.
    *
    * @return This accessor's type constant, i.e. orbitalConjunctionType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::orbitalConjunctionType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OrbitalConjunctionType.
    *
    * @return The version that was initialized from the uci:version attribute of OrbitalConjunctionType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OrbitalConjunctionType& accessor) = 0;

  /** Indicates the details of the object or objects that are the subject of the Orbital Conjunction Assessment.
    * [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OrbitalConjunctionObjectType, uci::type::accessorType::orbitalConjunctionObjectType> OrbitalConjunctionObject;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ConjunctionID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ConjunctionID.
    */
  virtual const uci::type::OrbitalConjunctionID_Type& getConjunctionID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ConjunctionID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ConjunctionID.
    */
  virtual uci::type::OrbitalConjunctionID_Type& getConjunctionID() = 0;

  /** Sets the complex content identified by ConjunctionID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ConjunctionID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalConjunctionType& setConjunctionID(const uci::type::OrbitalConjunctionID_Type& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ConjunctionTime.
    *
    * @return The value of the simple primitive data type identified by ConjunctionTime.
    */
  virtual uci::type::DateTimeTypeValue getConjunctionTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ConjunctionTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalConjunctionType& setConjunctionTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the value of the enumeration identified by ConjunctionType.
    *
    * @return A const reference to the value of the enumeration identified by ConjunctionType.
    */
  virtual const uci::type::OrbitalConjunctionEnum& getConjunctionType() const = 0;

  /** Returns a reference to the value of the enumeration identified by ConjunctionType.
    *
    * @return A reference to the value of the enumeration identified by ConjunctionType.
    */
  virtual uci::type::OrbitalConjunctionEnum& getConjunctionType() = 0;

  /** Sets the value of the enumeration identified by ConjunctionType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalConjunctionType& setConjunctionType(const uci::type::OrbitalConjunctionEnum& value) = 0;

  /** Sets the value of the enumeration identified by ConjunctionType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalConjunctionType& setConjunctionType(uci::type::OrbitalConjunctionEnum::EnumerationItem value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ConjunctionRange.
    *
    * @return The value of the simple primitive data type identified by ConjunctionRange.
    */
  virtual uci::type::DistanceTypeValue getConjunctionRange() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ConjunctionRange.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalConjunctionType& setConjunctionRange(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by ConjunctionRange exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConjunctionRange is enabled or not.
    */
  virtual bool hasConjunctionRange() const = 0;

  /** Clears (disabled) the Element identified by ConjunctionRange.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalConjunctionType& clearConjunctionRange() = 0;

  /** Returns a const reference to the bounded list identified by OrbitalConjunctionObject.
    *
    * @return A const reference to the bounded list identified by OrbitalConjunctionObject.
    */
  virtual const uci::type::OrbitalConjunctionType::OrbitalConjunctionObject& getOrbitalConjunctionObject() const = 0;

  /** Returns a reference to the bounded list identified by OrbitalConjunctionObject.
    *
    * @return A reference to the bounded list identified by OrbitalConjunctionObject.
    */
  virtual uci::type::OrbitalConjunctionType::OrbitalConjunctionObject& getOrbitalConjunctionObject() = 0;

  /** Sets the bounded list identified by OrbitalConjunctionObject.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalConjunctionType& setOrbitalConjunctionObject(const uci::type::OrbitalConjunctionType::OrbitalConjunctionObject& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ConjunctionProbability.
    *
    * @return The value of the simple primitive data type identified by ConjunctionProbability.
    */
  virtual uci::type::PercentTypeValue getConjunctionProbability() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ConjunctionProbability.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalConjunctionType& setConjunctionProbability(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by ConjunctionProbability exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConjunctionProbability is enabled or not.
    */
  virtual bool hasConjunctionProbability() const = 0;

  /** Clears (disabled) the Element identified by ConjunctionProbability.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalConjunctionType& clearConjunctionProbability() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ConjunctionConfidence.
    *
    * @return The value of the simple primitive data type identified by ConjunctionConfidence.
    */
  virtual uci::type::PercentTypeValue getConjunctionConfidence() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ConjunctionConfidence.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalConjunctionType& setConjunctionConfidence(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by ConjunctionConfidence exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConjunctionConfidence is enabled or not.
    */
  virtual bool hasConjunctionConfidence() const = 0;

  /** Clears (disabled) the Element identified by ConjunctionConfidence.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalConjunctionType& clearConjunctionConfidence() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OrbitalConjunctionType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OrbitalConjunctionType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OrbitalConjunctionType to copy from.
    */
  OrbitalConjunctionType(const OrbitalConjunctionType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OrbitalConjunctionType to the contents of the
    * OrbitalConjunctionType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OrbitalConjunctionType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this OrbitalConjunctionType.
    * @return A reference to this OrbitalConjunctionType.
    */
  OrbitalConjunctionType& operator=(const OrbitalConjunctionType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ORBITALCONJUNCTIONTYPE_H

