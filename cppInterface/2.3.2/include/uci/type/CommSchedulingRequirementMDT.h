/** @file CommSchedulingRequirementMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMSCHEDULINGREQUIREMENTMDT_H
#define UCI_TYPE_COMMSCHEDULINGREQUIREMENTMDT_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CommCoverageUserDataType.h"
#include "CommSchedulingRequirementID_Type.h"
#include "CommSchedulingRequirementStateEnum.h"
#include "RoutePlanReferenceType.h"
#include "SystemID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class CommSchedulingRequirementMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CommSchedulingRequirementMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommSchedulingRequirementMDT.
    */
  static UCI_EXPORT CommSchedulingRequirementMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CommSchedulingRequirementMDT initializing the data accessed by the new
    * CommSchedulingRequirementMDT using the data accessed by the specified CommSchedulingRequirementMDT (cloning).
    *
    * @param accessor The CommSchedulingRequirementMDT that provides access to the data that is to be used to initialize
    *      the data accessed by the new created CommSchedulingRequirementMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommSchedulingRequirementMDT.
    */
  static UCI_EXPORT CommSchedulingRequirementMDT& create(const CommSchedulingRequirementMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CommSchedulingRequirementMDT. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The CommSchedulingRequirementMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CommSchedulingRequirementMDT& accessor);

  /** Returns this accessor's type constant, i.e. commSchedulingRequirementMDT.
    *
    * @return This accessor's type constant, i.e. commSchedulingRequirementMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commSchedulingRequirementMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of CommSchedulingRequirementMDT.
    *
    * @return The version that was initialized from the uci:version attribute of CommSchedulingRequirementMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CommSchedulingRequirementMDT& accessor) = 0;

  /** Indicates the route paths and segments that have been used to formulate this requirement, if applicable. It is not
    * expected that this element be updated as dynamic replanning occurs and new plan IDs are generated. It is simply for
    * traceability to the plan that was initially being considered when the requirement was generated. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RoutePlanReferenceType, uci::type::accessorType::routePlanReferenceType> RequirementRoutePlan;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RequirementID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RequirementID.
    */
  virtual const uci::type::CommSchedulingRequirementID_Type& getRequirementID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RequirementID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RequirementID.
    */
  virtual uci::type::CommSchedulingRequirementID_Type& getRequirementID() = 0;

  /** Sets the complex content identified by RequirementID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RequirementID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommSchedulingRequirementMDT& setRequirementID(const uci::type::CommSchedulingRequirementID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by RequirementState.
    *
    * @return A const reference to the value of the enumeration identified by RequirementState.
    */
  virtual const uci::type::CommSchedulingRequirementStateEnum& getRequirementState() const = 0;

  /** Returns a reference to the value of the enumeration identified by RequirementState.
    *
    * @return A reference to the value of the enumeration identified by RequirementState.
    */
  virtual uci::type::CommSchedulingRequirementStateEnum& getRequirementState() = 0;

  /** Sets the value of the enumeration identified by RequirementState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommSchedulingRequirementMDT& setRequirementState(const uci::type::CommSchedulingRequirementStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by RequirementState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommSchedulingRequirementMDT& setRequirementState(uci::type::CommSchedulingRequirementStateEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RequestingSystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RequestingSystemID.
    */
  virtual const uci::type::SystemID_Type& getRequestingSystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RequestingSystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RequestingSystemID.
    */
  virtual uci::type::SystemID_Type& getRequestingSystemID() = 0;

  /** Sets the complex content identified by RequestingSystemID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RequestingSystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommSchedulingRequirementMDT& setRequestingSystemID(const uci::type::SystemID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CommRequirementData.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CommRequirementData.
    */
  virtual const uci::type::CommCoverageUserDataType& getCommRequirementData() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CommRequirementData.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CommRequirementData.
    */
  virtual uci::type::CommCoverageUserDataType& getCommRequirementData() = 0;

  /** Sets the complex content identified by CommRequirementData to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CommRequirementData.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommSchedulingRequirementMDT& setCommRequirementData(const uci::type::CommCoverageUserDataType& value) = 0;

  /** Returns a const reference to the bounded list identified by RequirementRoutePlan.
    *
    * @return A const reference to the bounded list identified by RequirementRoutePlan.
    */
  virtual const uci::type::CommSchedulingRequirementMDT::RequirementRoutePlan& getRequirementRoutePlan() const = 0;

  /** Returns a reference to the bounded list identified by RequirementRoutePlan.
    *
    * @return A reference to the bounded list identified by RequirementRoutePlan.
    */
  virtual uci::type::CommSchedulingRequirementMDT::RequirementRoutePlan& getRequirementRoutePlan() = 0;

  /** Sets the bounded list identified by RequirementRoutePlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommSchedulingRequirementMDT& setRequirementRoutePlan(const uci::type::CommSchedulingRequirementMDT::RequirementRoutePlan& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CommSchedulingRequirementMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommSchedulingRequirementMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommSchedulingRequirementMDT to copy from.
    */
  CommSchedulingRequirementMDT(const CommSchedulingRequirementMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CommSchedulingRequirementMDT to the contents of the
    * CommSchedulingRequirementMDT on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The CommSchedulingRequirementMDT on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this CommSchedulingRequirementMDT.
    * @return A reference to this CommSchedulingRequirementMDT.
    */
  CommSchedulingRequirementMDT& operator=(const CommSchedulingRequirementMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMMSCHEDULINGREQUIREMENTMDT_H

