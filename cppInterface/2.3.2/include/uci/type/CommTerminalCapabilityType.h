/** @file CommTerminalCapabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMTERMINALCAPABILITYTYPE_H
#define UCI_TYPE_COMMTERMINALCAPABILITYTYPE_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CommCapabilityEnum.h"
#include "uci/type/CommCapabilityOptionsType.h"
#include "uci/type/CommDataFormatEnum.h"
#include "uci/type/CommProfileID_Type.h"
#include "uci/type/CommUserIO_ID_Type.h"
#include "uci/type/CommUserLinkType.h"
#include "uci/type/CommandableCapabilityDeclarationType.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/CryptoTypeEnum.h"
#include "uci/type/ForeignKeyType.h"
#include "uci/type/FrequencyRangeType.h"
#include "uci/type/MilliwattPowerRatioRangeType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class CommTerminalCapabilityType : public virtual CommandableCapabilityDeclarationType {
public:

  /** This method constructs a new CommTerminalCapabilityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommTerminalCapabilityType.
    */
  static UCI_EXPORT CommTerminalCapabilityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CommTerminalCapabilityType initializing the data accessed by the new
    * CommTerminalCapabilityType using the data accessed by the specified CommTerminalCapabilityType (cloning).
    *
    * @param accessor The CommTerminalCapabilityType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created CommTerminalCapabilityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommTerminalCapabilityType.
    */
  static UCI_EXPORT CommTerminalCapabilityType& create(const CommTerminalCapabilityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CommTerminalCapabilityType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The CommTerminalCapabilityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CommTerminalCapabilityType& accessor);

  /** Returns this accessor's type constant, i.e. commTerminalCapabilityType.
    *
    * @return This accessor's type constant, i.e. commTerminalCapabilityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commTerminalCapabilityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CommTerminalCapabilityType.
    *
    * @return The version that was initialized from the uci:version attribute of CommTerminalCapabilityType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CommTerminalCapabilityType& accessor) = 0;

  /** Indicates a Profile (preset) that is applicable to this Capability. Only the profiles currently available and
    * applicable to this Capability should be listed. A Profile (or preset) is a logical collection of data, whose
    * implementation is not specified, that is used to tailor, configure or otherwise affect the behavior of a Capability.
    * Profiles can vary from mission to mission or even by phases of a single mission. They are generally developed in
    * pre-mission planning and are unique for each Subsystem model. Their content is not standardized by UCI, but the
    * mechanism for advertising their availability and activating them is. Their content is abstracted by the UCI concept
    * of Capability. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CommProfileID_Type, uci::type::accessorType::commProfileID_Type> AvailableProfileID;

  /** Indicates the data formats this capability is capable of exchanging via the data link. List size for this element is
    * based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 17]
    */
  typedef uci::base::BoundedList<uci::type::CommDataFormatEnum, uci::type::accessorType::commDataFormatEnum> DataFormat;

  /** Indicates the frequency bands used by the waveform for transmissions over the network medium. [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::FrequencyRangeType, uci::type::accessorType::frequencyRangeType> TransmitFrequencyRange;

  /** Indicates the frequency bands used by the waveform to receive. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::FrequencyRangeType, uci::type::accessorType::frequencyRangeType> ReceiveFrequencyRange;

  /** Indicates the Capability's first tier type in the Crypto taxonomy. Reflects crypto modes supported by the capability
    * given the current configuration of MDF, Keys, code version, etc. List size for this element is based on "Select All
    * That Apply" condition. [Occurrences: Minimum: 0; Maximum: 14]
    */
  typedef uci::base::BoundedList<uci::type::CryptoTypeEnum, uci::type::accessorType::cryptoTypeEnum> CryptoType;

  /** Identifies User I/O components that the waveform may be dynamically configured to use a data source (in the case of
    * data to be transmitted) or a data sink (in the case of data received and decrypted). [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CommUserIO_ID_Type, uci::type::accessorType::commUserIO_ID_Type> AssociatedUserIO_ID;

  /** Identifies network components, or logical RF ports, that the waveform may be dynamically configured to use as a data
    * sink (in the case of data to be transmitted) or a data source (in the case of received data). [Occurrences: Minimum:
    * 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CommUserLinkType, uci::type::accessorType::commUserLinkType> AssociatedUserLink;

  /** Indicates a command and control relevant Antenna Component associated with the Capability. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ComponentID_Type, uci::type::accessorType::componentID_Type> AssociatedAntennaID;

  /** Returns a const reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A const reference to the value of the enumeration identified by CapabilityType.
    */
  virtual const uci::type::CommCapabilityEnum& getCapabilityType() const = 0;

  /** Returns a reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A reference to the value of the enumeration identified by CapabilityType.
    */
  virtual uci::type::CommCapabilityEnum& getCapabilityType() = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& setCapabilityType(const uci::type::CommCapabilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& setCapabilityType(uci::type::CommCapabilityEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SubCapabilityType.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SubCapabilityType.
    */
  virtual const uci::type::ForeignKeyType& getSubCapabilityType() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SubCapabilityType.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SubCapabilityType.
    */
  virtual uci::type::ForeignKeyType& getSubCapabilityType() = 0;

  /** Sets the complex content identified by SubCapabilityType to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SubCapabilityType.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& setSubCapabilityType(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by SubCapabilityType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SubCapabilityType is enabled or not.
    */
  virtual bool hasSubCapabilityType() const = 0;

  /** Enables the Element identified by SubCapabilityType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SubCapabilityType.
    */
  virtual uci::type::ForeignKeyType& enableSubCapabilityType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SubCapabilityType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& clearSubCapabilityType() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CapabilityOptions.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CapabilityOptions.
    */
  virtual const uci::type::CommCapabilityOptionsType& getCapabilityOptions() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CapabilityOptions.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityOptions.
    */
  virtual uci::type::CommCapabilityOptionsType& getCapabilityOptions() = 0;

  /** Sets the complex content identified by CapabilityOptions to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CapabilityOptions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& setCapabilityOptions(const uci::type::CommCapabilityOptionsType& value) = 0;

  /** Returns a const reference to the bounded list identified by AvailableProfileID.
    *
    * @return A const reference to the bounded list identified by AvailableProfileID.
    */
  virtual const uci::type::CommTerminalCapabilityType::AvailableProfileID& getAvailableProfileID() const = 0;

  /** Returns a reference to the bounded list identified by AvailableProfileID.
    *
    * @return A reference to the bounded list identified by AvailableProfileID.
    */
  virtual uci::type::CommTerminalCapabilityType::AvailableProfileID& getAvailableProfileID() = 0;

  /** Sets the bounded list identified by AvailableProfileID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& setAvailableProfileID(const uci::type::CommTerminalCapabilityType::AvailableProfileID& value) = 0;

  /** Returns a const reference to the bounded list identified by DataFormat.
    *
    * @return A const reference to the bounded list identified by DataFormat.
    */
  virtual const uci::type::CommTerminalCapabilityType::DataFormat& getDataFormat() const = 0;

  /** Returns a reference to the bounded list identified by DataFormat.
    *
    * @return A reference to the bounded list identified by DataFormat.
    */
  virtual uci::type::CommTerminalCapabilityType::DataFormat& getDataFormat() = 0;

  /** Sets the bounded list identified by DataFormat.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& setDataFormat(const uci::type::CommTerminalCapabilityType::DataFormat& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * TerminalUniqueKey.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      TerminalUniqueKey.
    */
  virtual const uci::type::ForeignKeyType& getTerminalUniqueKey() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TerminalUniqueKey.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TerminalUniqueKey.
    */
  virtual uci::type::ForeignKeyType& getTerminalUniqueKey() = 0;

  /** Sets the complex content identified by TerminalUniqueKey to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TerminalUniqueKey.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& setTerminalUniqueKey(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by TerminalUniqueKey exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TerminalUniqueKey is enabled or not.
    */
  virtual bool hasTerminalUniqueKey() const = 0;

  /** Enables the Element identified by TerminalUniqueKey.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TerminalUniqueKey.
    */
  virtual uci::type::ForeignKeyType& enableTerminalUniqueKey(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TerminalUniqueKey.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& clearTerminalUniqueKey() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TxPowerRange.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TxPowerRange.
    */
  virtual const uci::type::MilliwattPowerRatioRangeType& getTxPowerRange() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TxPowerRange.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TxPowerRange.
    */
  virtual uci::type::MilliwattPowerRatioRangeType& getTxPowerRange() = 0;

  /** Sets the complex content identified by TxPowerRange to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TxPowerRange.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& setTxPowerRange(const uci::type::MilliwattPowerRatioRangeType& value) = 0;

  /** Returns whether the Element identified by TxPowerRange exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TxPowerRange is enabled or not.
    */
  virtual bool hasTxPowerRange() const = 0;

  /** Enables the Element identified by TxPowerRange.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TxPowerRange.
    */
  virtual uci::type::MilliwattPowerRatioRangeType& enableTxPowerRange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TxPowerRange.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& clearTxPowerRange() = 0;

  /** Returns a const reference to the bounded list identified by TransmitFrequencyRange.
    *
    * @return A const reference to the bounded list identified by TransmitFrequencyRange.
    */
  virtual const uci::type::CommTerminalCapabilityType::TransmitFrequencyRange& getTransmitFrequencyRange() const = 0;

  /** Returns a reference to the bounded list identified by TransmitFrequencyRange.
    *
    * @return A reference to the bounded list identified by TransmitFrequencyRange.
    */
  virtual uci::type::CommTerminalCapabilityType::TransmitFrequencyRange& getTransmitFrequencyRange() = 0;

  /** Sets the bounded list identified by TransmitFrequencyRange.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& setTransmitFrequencyRange(const uci::type::CommTerminalCapabilityType::TransmitFrequencyRange& value) = 0;

  /** Returns a const reference to the bounded list identified by ReceiveFrequencyRange.
    *
    * @return A const reference to the bounded list identified by ReceiveFrequencyRange.
    */
  virtual const uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange& getReceiveFrequencyRange() const = 0;

  /** Returns a reference to the bounded list identified by ReceiveFrequencyRange.
    *
    * @return A reference to the bounded list identified by ReceiveFrequencyRange.
    */
  virtual uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange& getReceiveFrequencyRange() = 0;

  /** Sets the bounded list identified by ReceiveFrequencyRange.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& setReceiveFrequencyRange(const uci::type::CommTerminalCapabilityType::ReceiveFrequencyRange& value) = 0;

  /** Returns a const reference to the bounded list identified by CryptoType.
    *
    * @return A const reference to the bounded list identified by CryptoType.
    */
  virtual const uci::type::CommTerminalCapabilityType::CryptoType& getCryptoType() const = 0;

  /** Returns a reference to the bounded list identified by CryptoType.
    *
    * @return A reference to the bounded list identified by CryptoType.
    */
  virtual uci::type::CommTerminalCapabilityType::CryptoType& getCryptoType() = 0;

  /** Sets the bounded list identified by CryptoType.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& setCryptoType(const uci::type::CommTerminalCapabilityType::CryptoType& value) = 0;

  /** Returns a const reference to the bounded list identified by AssociatedUserIO_ID.
    *
    * @return A const reference to the bounded list identified by AssociatedUserIO_ID.
    */
  virtual const uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID& getAssociatedUserIO_ID() const = 0;

  /** Returns a reference to the bounded list identified by AssociatedUserIO_ID.
    *
    * @return A reference to the bounded list identified by AssociatedUserIO_ID.
    */
  virtual uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID& getAssociatedUserIO_ID() = 0;

  /** Sets the bounded list identified by AssociatedUserIO_ID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& setAssociatedUserIO_ID(const uci::type::CommTerminalCapabilityType::AssociatedUserIO_ID& value) = 0;

  /** Returns a const reference to the bounded list identified by AssociatedUserLink.
    *
    * @return A const reference to the bounded list identified by AssociatedUserLink.
    */
  virtual const uci::type::CommTerminalCapabilityType::AssociatedUserLink& getAssociatedUserLink() const = 0;

  /** Returns a reference to the bounded list identified by AssociatedUserLink.
    *
    * @return A reference to the bounded list identified by AssociatedUserLink.
    */
  virtual uci::type::CommTerminalCapabilityType::AssociatedUserLink& getAssociatedUserLink() = 0;

  /** Sets the bounded list identified by AssociatedUserLink.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& setAssociatedUserLink(const uci::type::CommTerminalCapabilityType::AssociatedUserLink& value) = 0;

  /** Returns a const reference to the bounded list identified by AssociatedAntennaID.
    *
    * @return A const reference to the bounded list identified by AssociatedAntennaID.
    */
  virtual const uci::type::CommTerminalCapabilityType::AssociatedAntennaID& getAssociatedAntennaID() const = 0;

  /** Returns a reference to the bounded list identified by AssociatedAntennaID.
    *
    * @return A reference to the bounded list identified by AssociatedAntennaID.
    */
  virtual uci::type::CommTerminalCapabilityType::AssociatedAntennaID& getAssociatedAntennaID() = 0;

  /** Sets the bounded list identified by AssociatedAntennaID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommTerminalCapabilityType& setAssociatedAntennaID(const uci::type::CommTerminalCapabilityType::AssociatedAntennaID& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CommTerminalCapabilityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommTerminalCapabilityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommTerminalCapabilityType to copy from.
    */
  CommTerminalCapabilityType(const CommTerminalCapabilityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CommTerminalCapabilityType to the contents of the
    * CommTerminalCapabilityType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The CommTerminalCapabilityType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this CommTerminalCapabilityType.
    * @return A reference to this CommTerminalCapabilityType.
    */
  CommTerminalCapabilityType& operator=(const CommTerminalCapabilityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMMTERMINALCAPABILITYTYPE_H

