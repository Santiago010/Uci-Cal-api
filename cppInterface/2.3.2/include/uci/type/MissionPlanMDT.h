/** @file MissionPlanMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_MISSIONPLANMDT_H
#define UCI_TYPE_MISSIONPLANMDT_H

#include "uci/base/Accessor.h"
#include "uci/base/BooleanAccessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/DateTimeRangeType.h"
#include "uci/type/ExecutionSequenceType.h"
#include "uci/type/MissionPlanCommandID_ChoiceType.h"
#include "uci/type/MissionPlanID_Type.h"
#include "uci/type/MissionPlanInputsType.h"
#include "uci/type/PlanApplicabilityType.h"
#include "uci/type/PlansReferenceBaseType.h"
#include "uci/type/RemarksType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class MissionPlanMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new MissionPlanMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MissionPlanMDT.
    */
  static UCI_EXPORT MissionPlanMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new MissionPlanMDT initializing the data accessed by the new MissionPlanMDT using the data
    * accessed by the specified MissionPlanMDT (cloning).
    *
    * @param accessor The MissionPlanMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created MissionPlanMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MissionPlanMDT.
    */
  static UCI_EXPORT MissionPlanMDT& create(const MissionPlanMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified MissionPlanMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The MissionPlanMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(MissionPlanMDT& accessor);

  /** Returns this accessor's type constant, i.e. missionPlanMDT.
    *
    * @return This accessor's type constant, i.e. missionPlanMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::missionPlanMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of MissionPlanMDT.
    *
    * @return The version that was initialized from the uci:version attribute of MissionPlanMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const MissionPlanMDT& accessor) = 0;

  /** Indicates a MissionPlan that is the parent of this MissionPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::MissionPlanID_Type, uci::type::accessorType::missionPlanID_Type> ParentMissionPlanID;

  /** Indicates a MissionPlan that is subordinate to this MissionPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::MissionPlanID_Type, uci::type::accessorType::missionPlanID_Type> SubordinateMissionPlanID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by MissionPlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by MissionPlanID.
    */
  virtual const uci::type::MissionPlanID_Type& getMissionPlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MissionPlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MissionPlanID.
    */
  virtual uci::type::MissionPlanID_Type& getMissionPlanID() = 0;

  /** Sets the complex content identified by MissionPlanID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MissionPlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& setMissionPlanID(const uci::type::MissionPlanID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * MissionPlanCommandID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      MissionPlanCommandID.
    */
  virtual const uci::type::MissionPlanCommandID_ChoiceType& getMissionPlanCommandID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MissionPlanCommandID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MissionPlanCommandID.
    */
  virtual uci::type::MissionPlanCommandID_ChoiceType& getMissionPlanCommandID() = 0;

  /** Sets the complex content identified by MissionPlanCommandID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MissionPlanCommandID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& setMissionPlanCommandID(const uci::type::MissionPlanCommandID_ChoiceType& value) = 0;

  /** Returns whether the Element identified by MissionPlanCommandID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MissionPlanCommandID is enabled or not.
    */
  virtual bool hasMissionPlanCommandID() const = 0;

  /** Enables the Element identified by MissionPlanCommandID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MissionPlanCommandID.
    */
  virtual uci::type::MissionPlanCommandID_ChoiceType& enableMissionPlanCommandID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MissionPlanCommandID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& clearMissionPlanCommandID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Applicability.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Applicability.
    */
  virtual const uci::type::PlanApplicabilityType& getApplicability() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Applicability.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Applicability.
    */
  virtual uci::type::PlanApplicabilityType& getApplicability() = 0;

  /** Sets the complex content identified by Applicability to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Applicability.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& setApplicability(const uci::type::PlanApplicabilityType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Window.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Window.
    */
  virtual const uci::type::DateTimeRangeType& getWindow() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Window.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Window.
    */
  virtual uci::type::DateTimeRangeType& getWindow() = 0;

  /** Sets the complex content identified by Window to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Window.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& setWindow(const uci::type::DateTimeRangeType& value) = 0;

  /** Returns whether the Element identified by Window exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Window is enabled or not.
    */
  virtual bool hasWindow() const = 0;

  /** Enables the Element identified by Window.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Window.
    */
  virtual uci::type::DateTimeRangeType& enableWindow(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Window.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& clearWindow() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SubPlans.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SubPlans.
    */
  virtual const uci::type::PlansReferenceBaseType& getSubPlans() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SubPlans.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SubPlans.
    */
  virtual uci::type::PlansReferenceBaseType& getSubPlans() = 0;

  /** Sets the complex content identified by SubPlans to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SubPlans.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& setSubPlans(const uci::type::PlansReferenceBaseType& value) = 0;

  /** Returns whether the Element identified by SubPlans exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SubPlans is enabled or not.
    */
  virtual bool hasSubPlans() const = 0;

  /** Enables the Element identified by SubPlans.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SubPlans.
    */
  virtual uci::type::PlansReferenceBaseType& enableSubPlans(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SubPlans.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& clearSubPlans() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ExecutionSequence.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ExecutionSequence.
    */
  virtual const uci::type::ExecutionSequenceType& getExecutionSequence() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ExecutionSequence.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ExecutionSequence.
    */
  virtual uci::type::ExecutionSequenceType& getExecutionSequence() = 0;

  /** Sets the complex content identified by ExecutionSequence to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ExecutionSequence.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& setExecutionSequence(const uci::type::ExecutionSequenceType& value) = 0;

  /** Returns whether the Element identified by ExecutionSequence exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ExecutionSequence is enabled or not.
    */
  virtual bool hasExecutionSequence() const = 0;

  /** Enables the Element identified by ExecutionSequence.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ExecutionSequence.
    */
  virtual uci::type::ExecutionSequenceType& enableExecutionSequence(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ExecutionSequence.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& clearExecutionSequence() = 0;

  /** Returns a const reference to the bounded list identified by ParentMissionPlanID.
    *
    * @return A const reference to the bounded list identified by ParentMissionPlanID.
    */
  virtual const uci::type::MissionPlanMDT::ParentMissionPlanID& getParentMissionPlanID() const = 0;

  /** Returns a reference to the bounded list identified by ParentMissionPlanID.
    *
    * @return A reference to the bounded list identified by ParentMissionPlanID.
    */
  virtual uci::type::MissionPlanMDT::ParentMissionPlanID& getParentMissionPlanID() = 0;

  /** Sets the bounded list identified by ParentMissionPlanID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& setParentMissionPlanID(const uci::type::MissionPlanMDT::ParentMissionPlanID& value) = 0;

  /** Returns a const reference to the bounded list identified by SubordinateMissionPlanID.
    *
    * @return A const reference to the bounded list identified by SubordinateMissionPlanID.
    */
  virtual const uci::type::MissionPlanMDT::SubordinateMissionPlanID& getSubordinateMissionPlanID() const = 0;

  /** Returns a reference to the bounded list identified by SubordinateMissionPlanID.
    *
    * @return A reference to the bounded list identified by SubordinateMissionPlanID.
    */
  virtual uci::type::MissionPlanMDT::SubordinateMissionPlanID& getSubordinateMissionPlanID() = 0;

  /** Sets the bounded list identified by SubordinateMissionPlanID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& setSubordinateMissionPlanID(const uci::type::MissionPlanMDT::SubordinateMissionPlanID& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ForPlanningUseOnly.
    *
    * @return The value of the simple primitive data type identified by ForPlanningUseOnly.
    */
  virtual xs::Boolean getForPlanningUseOnly() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ForPlanningUseOnly.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& setForPlanningUseOnly(xs::Boolean value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PlanInputs.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PlanInputs.
    */
  virtual const uci::type::MissionPlanInputsType& getPlanInputs() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PlanInputs.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PlanInputs.
    */
  virtual uci::type::MissionPlanInputsType& getPlanInputs() = 0;

  /** Sets the complex content identified by PlanInputs to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PlanInputs.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& setPlanInputs(const uci::type::MissionPlanInputsType& value) = 0;

  /** Returns whether the Element identified by PlanInputs exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PlanInputs is enabled or not.
    */
  virtual bool hasPlanInputs() const = 0;

  /** Enables the Element identified by PlanInputs.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PlanInputs.
    */
  virtual uci::type::MissionPlanInputsType& enablePlanInputs(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PlanInputs.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& clearPlanInputs() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Remarks.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Remarks.
    */
  virtual const uci::type::RemarksType& getRemarks() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Remarks.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Remarks.
    */
  virtual uci::type::RemarksType& getRemarks() = 0;

  /** Sets the complex content identified by Remarks to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Remarks.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& setRemarks(const uci::type::RemarksType& value) = 0;

  /** Returns whether the Element identified by Remarks exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Remarks is enabled or not.
    */
  virtual bool hasRemarks() const = 0;

  /** Enables the Element identified by Remarks.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Remarks.
    */
  virtual uci::type::RemarksType& enableRemarks(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Remarks.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MissionPlanMDT& clearRemarks() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  MissionPlanMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~MissionPlanMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The MissionPlanMDT to copy from.
    */
  MissionPlanMDT(const MissionPlanMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this MissionPlanMDT to the contents of the MissionPlanMDT on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The MissionPlanMDT on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this MissionPlanMDT.
    * @return A reference to this MissionPlanMDT.
    */
  MissionPlanMDT& operator=(const MissionPlanMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_MISSIONPLANMDT_H

