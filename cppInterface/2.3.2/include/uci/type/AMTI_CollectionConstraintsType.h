/** @file AMTI_CollectionConstraintsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_AMTI_COLLECTIONCONSTRAINTSTYPE_H
#define UCI_TYPE_AMTI_COLLECTIONCONSTRAINTSTYPE_H

#include "../base/BoundedList.h"
#include "../base/UnsignedByteAccessor.h"
#include "../base/export.h"
#include "CollectionConstraintsType.h"
#include "DecibelType.h"
#include "EmconConstraintType.h"
#include "SpeedRangeType.h"
#include "SpeedType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class AMTI_CollectionConstraintsType : public virtual CollectionConstraintsType {
public:

  /** This method constructs a new AMTI_CollectionConstraintsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AMTI_CollectionConstraintsType.
    */
  static UCI_EXPORT AMTI_CollectionConstraintsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new AMTI_CollectionConstraintsType initializing the data accessed by the new
    * AMTI_CollectionConstraintsType using the data accessed by the specified AMTI_CollectionConstraintsType (cloning).
    *
    * @param accessor The AMTI_CollectionConstraintsType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created AMTI_CollectionConstraintsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AMTI_CollectionConstraintsType.
    */
  static UCI_EXPORT AMTI_CollectionConstraintsType& create(const AMTI_CollectionConstraintsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified AMTI_CollectionConstraintsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The AMTI_CollectionConstraintsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(AMTI_CollectionConstraintsType& accessor);

  /** Returns this accessor's type constant, i.e. aMTI_CollectionConstraintsType.
    *
    * @return This accessor's type constant, i.e. aMTI_CollectionConstraintsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::aMTI_CollectionConstraintsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of AMTI_CollectionConstraintsType.
    *
    * @return The version that was initialized from the uci:version attribute of AMTI_CollectionConstraintsType.
    */
  static std::string getUCITypeVersion() {
    return "001.002.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AMTI_CollectionConstraintsType& accessor) = 0;

  /** Indicates both closing and opening velocities. This is the Radial velocity along the LOS to the sensor for each valid
    * range of radial velocity i.e., Volume searches may have multiple radial velocities that are of interest.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SpeedRangeType, uci::type::accessorType::speedRangeType> TargetRadialVelocity;

  /** Returns the value of the SimplePrimitive data type identified by SurfaceMoverVelocityGate.
    *
    * @return The value of the simple primitive data type identified by SurfaceMoverVelocityGate.
    */
  virtual uci::type::SpeedTypeValue getSurfaceMoverVelocityGate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SurfaceMoverVelocityGate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AMTI_CollectionConstraintsType& setSurfaceMoverVelocityGate(uci::type::SpeedTypeValue value) = 0;

  /** Returns whether the Element identified by SurfaceMoverVelocityGate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SurfaceMoverVelocityGate is enabled or not.
    */
  virtual bool hasSurfaceMoverVelocityGate() const = 0;

  /** Clears (disabled) the Element identified by SurfaceMoverVelocityGate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AMTI_CollectionConstraintsType& clearSurfaceMoverVelocityGate() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TargetRCS.
    *
    * @return The value of the simple primitive data type identified by TargetRCS.
    */
  virtual uci::type::DecibelTypeValue getTargetRCS() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TargetRCS.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AMTI_CollectionConstraintsType& setTargetRCS(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by TargetRCS exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TargetRCS is enabled or not.
    */
  virtual bool hasTargetRCS() const = 0;

  /** Clears (disabled) the Element identified by TargetRCS.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AMTI_CollectionConstraintsType& clearTargetRCS() = 0;

  /** Returns the value of the SimplePrimitive data type identified by FalseAlarmLevel.
    *
    * @return The value of the simple primitive data type identified by FalseAlarmLevel.
    */
  virtual xs::UnsignedByte getFalseAlarmLevel() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FalseAlarmLevel.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AMTI_CollectionConstraintsType& setFalseAlarmLevel(xs::UnsignedByte value) = 0;

  /** Returns whether the Element identified by FalseAlarmLevel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FalseAlarmLevel is enabled or not.
    */
  virtual bool hasFalseAlarmLevel() const = 0;

  /** Clears (disabled) the Element identified by FalseAlarmLevel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AMTI_CollectionConstraintsType& clearFalseAlarmLevel() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Emcon.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Emcon.
    */
  virtual const uci::type::EmconConstraintType& getEmcon() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Emcon.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Emcon.
    */
  virtual uci::type::EmconConstraintType& getEmcon() = 0;

  /** Sets the complex content identified by Emcon to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Emcon.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AMTI_CollectionConstraintsType& setEmcon(const uci::type::EmconConstraintType& value) = 0;

  /** Returns whether the Element identified by Emcon exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Emcon is enabled or not.
    */
  virtual bool hasEmcon() const = 0;

  /** Enables the Element identified by Emcon.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Emcon.
    */
  virtual uci::type::EmconConstraintType& enableEmcon(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Emcon.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AMTI_CollectionConstraintsType& clearEmcon() = 0;

  /** Returns a const reference to the bounded list identified by TargetRadialVelocity.
    *
    * @return A const reference to the bounded list identified by TargetRadialVelocity.
    */
  virtual const uci::type::AMTI_CollectionConstraintsType::TargetRadialVelocity& getTargetRadialVelocity() const = 0;

  /** Returns a reference to the bounded list identified by TargetRadialVelocity.
    *
    * @return A reference to the bounded list identified by TargetRadialVelocity.
    */
  virtual uci::type::AMTI_CollectionConstraintsType::TargetRadialVelocity& getTargetRadialVelocity() = 0;

  /** Sets the bounded list identified by TargetRadialVelocity.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AMTI_CollectionConstraintsType& setTargetRadialVelocity(const uci::type::AMTI_CollectionConstraintsType::TargetRadialVelocity& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AMTI_CollectionConstraintsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~AMTI_CollectionConstraintsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AMTI_CollectionConstraintsType to copy from.
    */
  AMTI_CollectionConstraintsType(const AMTI_CollectionConstraintsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AMTI_CollectionConstraintsType to the contents of the
    * AMTI_CollectionConstraintsType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The AMTI_CollectionConstraintsType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this AMTI_CollectionConstraintsType.
    * @return A reference to this AMTI_CollectionConstraintsType.
    */
  AMTI_CollectionConstraintsType& operator=(const AMTI_CollectionConstraintsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_AMTI_COLLECTIONCONSTRAINTSTYPE_H

