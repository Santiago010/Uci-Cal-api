/** @file ProductDisseminationDestinationMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PRODUCTDISSEMINATIONDESTINATIONMDT_H
#define UCI_TYPE_PRODUCTDISSEMINATIONDESTINATIONMDT_H

#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "DataRecordBaseType.h"
#include "DestinationCategoryEnum.h"
#include "MIME_Type.h"
#include "ProductDisseminationDestinationID_Type.h"
#include "ProductDisseminationGatewayType.h"
#include "ProductTypeEnum.h"
#include "SecurityInformationType.h"
#include "VisibleString256Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type defines all the fields required to represent a destination for purposes of dissemination. */
class ProductDisseminationDestinationMDT : public virtual DataRecordBaseType {
public:

  /** This method constructs a new ProductDisseminationDestinationMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ProductDisseminationDestinationMDT.
    */
  static UCI_EXPORT ProductDisseminationDestinationMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ProductDisseminationDestinationMDT initializing the data accessed by the new
    * ProductDisseminationDestinationMDT using the data accessed by the specified ProductDisseminationDestinationMDT
    * (cloning).
    *
    * @param accessor The ProductDisseminationDestinationMDT that provides access to the data that is to be used to
    *      initialize the data accessed by the new created ProductDisseminationDestinationMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ProductDisseminationDestinationMDT.
    */
  static UCI_EXPORT ProductDisseminationDestinationMDT& create(const ProductDisseminationDestinationMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ProductDisseminationDestinationMDT. Use of the specified accessor after it has
    * been destroyed will result in undefined behavior.
    *
    * @param accessor The ProductDisseminationDestinationMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ProductDisseminationDestinationMDT& accessor);

  /** Returns this accessor's type constant, i.e. productDisseminationDestinationMDT.
    *
    * @return This accessor's type constant, i.e. productDisseminationDestinationMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::productDisseminationDestinationMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of ProductDisseminationDestinationMDT.
    *
    * @return The version that was initialized from the uci:version attribute of ProductDisseminationDestinationMDT.
    */
  static std::string getUCITypeVersion() {
    return "001.001.002.002";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ProductDisseminationDestinationMDT& accessor) = 0;

  /** This field allows for logical names to be used in place of an ID to reference a configured Destination. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::VisibleString256Type, uci::type::accessorType::visibleString256Type> Handle;

  /** This field is used to list the product types that this destination supports for dissemination. List size for this
    * element is based on "Select All That Apply" condition. [Occurrences: Minimum: 0; Maximum: 81]
    */
  typedef uci::base::BoundedList<uci::type::ProductTypeEnum, uci::type::accessorType::productTypeEnum> SupportedProductType;

  /** This field is used to list the product formats that this destination supports for dissemination. [Occurrences:
    * Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::MIME_Type, uci::type::accessorType::mIME_Type> SupportedFormat;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ProductDisseminationDestinationID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ProductDisseminationDestinationID.
    */
  virtual const uci::type::ProductDisseminationDestinationID_Type& getProductDisseminationDestinationID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ProductDisseminationDestinationID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ProductDisseminationDestinationID.
    */
  virtual uci::type::ProductDisseminationDestinationID_Type& getProductDisseminationDestinationID() = 0;

  /** Sets the complex content identified by ProductDisseminationDestinationID to the contents of the complex content
    * accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ProductDisseminationDestinationID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductDisseminationDestinationMDT& setProductDisseminationDestinationID(const uci::type::ProductDisseminationDestinationID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by Handle.
    *
    * @return A const reference to the bounded list identified by Handle.
    */
  virtual const uci::type::ProductDisseminationDestinationMDT::Handle& getHandle() const = 0;

  /** Returns a reference to the bounded list identified by Handle.
    *
    * @return A reference to the bounded list identified by Handle.
    */
  virtual uci::type::ProductDisseminationDestinationMDT::Handle& getHandle() = 0;

  /** Sets the bounded list identified by Handle.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductDisseminationDestinationMDT& setHandle(const uci::type::ProductDisseminationDestinationMDT::Handle& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Endpoint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Endpoint.
    */
  virtual const uci::type::ProductDisseminationGatewayType& getEndpoint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Endpoint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Endpoint.
    */
  virtual uci::type::ProductDisseminationGatewayType& getEndpoint() = 0;

  /** Sets the complex content identified by Endpoint to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Endpoint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductDisseminationDestinationMDT& setEndpoint(const uci::type::ProductDisseminationGatewayType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SecurityInformation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SecurityInformation.
    */
  virtual const uci::type::SecurityInformationType& getSecurityInformation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SecurityInformation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SecurityInformation.
    */
  virtual uci::type::SecurityInformationType& getSecurityInformation() = 0;

  /** Sets the complex content identified by SecurityInformation to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SecurityInformation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductDisseminationDestinationMDT& setSecurityInformation(const uci::type::SecurityInformationType& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by DestinationType.
    *
    * @return A const reference to the value of the enumeration identified by DestinationType.
    */
  virtual const uci::type::DestinationCategoryEnum& getDestinationType() const = 0;

  /** Returns a reference to the value of the enumeration identified by DestinationType.
    *
    * @return A reference to the value of the enumeration identified by DestinationType.
    */
  virtual uci::type::DestinationCategoryEnum& getDestinationType() = 0;

  /** Sets the value of the enumeration identified by DestinationType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductDisseminationDestinationMDT& setDestinationType(const uci::type::DestinationCategoryEnum& value) = 0;

  /** Sets the value of the enumeration identified by DestinationType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductDisseminationDestinationMDT& setDestinationType(uci::type::DestinationCategoryEnum::EnumerationItem value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Enabled.
    *
    * @return The value of the simple primitive data type identified by Enabled.
    */
  virtual xs::Boolean getEnabled() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Enabled.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductDisseminationDestinationMDT& setEnabled(xs::Boolean value) = 0;

  /** Returns a const reference to the bounded list identified by SupportedProductType.
    *
    * @return A const reference to the bounded list identified by SupportedProductType.
    */
  virtual const uci::type::ProductDisseminationDestinationMDT::SupportedProductType& getSupportedProductType() const = 0;

  /** Returns a reference to the bounded list identified by SupportedProductType.
    *
    * @return A reference to the bounded list identified by SupportedProductType.
    */
  virtual uci::type::ProductDisseminationDestinationMDT::SupportedProductType& getSupportedProductType() = 0;

  /** Sets the bounded list identified by SupportedProductType.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductDisseminationDestinationMDT& setSupportedProductType(const uci::type::ProductDisseminationDestinationMDT::SupportedProductType& value) = 0;

  /** Returns a const reference to the bounded list identified by SupportedFormat.
    *
    * @return A const reference to the bounded list identified by SupportedFormat.
    */
  virtual const uci::type::ProductDisseminationDestinationMDT::SupportedFormat& getSupportedFormat() const = 0;

  /** Returns a reference to the bounded list identified by SupportedFormat.
    *
    * @return A reference to the bounded list identified by SupportedFormat.
    */
  virtual uci::type::ProductDisseminationDestinationMDT::SupportedFormat& getSupportedFormat() = 0;

  /** Sets the bounded list identified by SupportedFormat.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ProductDisseminationDestinationMDT& setSupportedFormat(const uci::type::ProductDisseminationDestinationMDT::SupportedFormat& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ProductDisseminationDestinationMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~ProductDisseminationDestinationMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ProductDisseminationDestinationMDT to copy from.
    */
  ProductDisseminationDestinationMDT(const ProductDisseminationDestinationMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ProductDisseminationDestinationMDT to the contents of the
    * ProductDisseminationDestinationMDT on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ProductDisseminationDestinationMDT on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this ProductDisseminationDestinationMDT.
    * @return A reference to this ProductDisseminationDestinationMDT.
    */
  ProductDisseminationDestinationMDT& operator=(const ProductDisseminationDestinationMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PRODUCTDISSEMINATIONDESTINATIONMDT_H

