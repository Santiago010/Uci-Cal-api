/** @file MessageConfigurationType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_MESSAGECONFIGURATIONTYPE_H
#define UCI_TYPE_MESSAGECONFIGURATIONTYPE_H

#include "../base/Accessor.h"
#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CommConfigurationStateEnum.h"
#include "CommDataDirectionFiltrationEnum.h"
#include "ComparableRankingType.h"
#include "DataLinkNativeFilterPET.h"
#include "DurationType.h"
#include "FilterID_Type.h"
#include "ForeignKeyType.h"
#include "InclusionEnum.h"
#include "MessageConfigurationID_Type.h"
#include "QueryMessageType.h"
#include "SystemID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** A filter for messages. Each component has an 'and' relationship with the others. */
class MessageConfigurationType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new MessageConfigurationType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MessageConfigurationType.
    */
  static UCI_EXPORT MessageConfigurationType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new MessageConfigurationType initializing the data accessed by the new
    * MessageConfigurationType using the data accessed by the specified MessageConfigurationType (cloning).
    *
    * @param accessor The MessageConfigurationType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created MessageConfigurationType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MessageConfigurationType.
    */
  static UCI_EXPORT MessageConfigurationType& create(const MessageConfigurationType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified MessageConfigurationType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The MessageConfigurationType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(MessageConfigurationType& accessor);

  /** Returns this accessor's type constant, i.e. messageConfigurationType.
    *
    * @return This accessor's type constant, i.e. messageConfigurationType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::messageConfigurationType;
  }

  /** Returns the version that was initialized from the uci:version attribute of MessageConfigurationType.
    *
    * @return The version that was initialized from the uci:version attribute of MessageConfigurationType.
    */
  static std::string getUCITypeVersion() {
    return "003.001.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const MessageConfigurationType& accessor) = 0;

  /** Specifies an implementation specific Connection ID. This allows this message configuration to be applied to a
    * specific Connection therefore only applying to message traffic on that connection. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType> ConnectionKey;

  /** System ID of a remote System. If System ID is empty, It is assumed this is a broadcast. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SystemID_Type, uci::type::accessorType::systemID_Type> RemoteSystemID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * MessageConfigurationID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      MessageConfigurationID.
    */
  virtual const uci::type::MessageConfigurationID_Type& getMessageConfigurationID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MessageConfigurationID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MessageConfigurationID.
    */
  virtual uci::type::MessageConfigurationID_Type& getMessageConfigurationID() = 0;

  /** Sets the complex content identified by MessageConfigurationID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MessageConfigurationID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& setMessageConfigurationID(const uci::type::MessageConfigurationID_Type& value) = 0;

  /** Returns whether the Element identified by MessageConfigurationID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MessageConfigurationID is enabled or not.
    */
  virtual bool hasMessageConfigurationID() const = 0;

  /** Enables the Element identified by MessageConfigurationID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by MessageConfigurationID.
    */
  virtual uci::type::MessageConfigurationID_Type& enableMessageConfigurationID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MessageConfigurationID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& clearMessageConfigurationID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by FilterID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by FilterID.
    */
  virtual const uci::type::FilterID_Type& getFilterID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FilterID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FilterID.
    */
  virtual uci::type::FilterID_Type& getFilterID() = 0;

  /** Sets the complex content identified by FilterID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FilterID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& setFilterID(const uci::type::FilterID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Filter.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Filter.
    */
  virtual const uci::type::QueryMessageType& getFilter() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Filter.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Filter.
    */
  virtual uci::type::QueryMessageType& getFilter() = 0;

  /** Sets the complex content identified by Filter to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Filter.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& setFilter(const uci::type::QueryMessageType& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by FilterStatus.
    *
    * @return The value of the simple primitive data type identified by FilterStatus.
    */
  virtual xs::Boolean getFilterStatus() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FilterStatus.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& setFilterStatus(xs::Boolean value) = 0;

  /** Returns a const reference to the value of the enumeration identified by FilterDirection.
    *
    * @return A const reference to the value of the enumeration identified by FilterDirection.
    */
  virtual const uci::type::CommDataDirectionFiltrationEnum& getFilterDirection() const = 0;

  /** Returns a reference to the value of the enumeration identified by FilterDirection.
    *
    * @return A reference to the value of the enumeration identified by FilterDirection.
    */
  virtual uci::type::CommDataDirectionFiltrationEnum& getFilterDirection() = 0;

  /** Sets the value of the enumeration identified by FilterDirection.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& setFilterDirection(const uci::type::CommDataDirectionFiltrationEnum& value) = 0;

  /** Sets the value of the enumeration identified by FilterDirection.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& setFilterDirection(uci::type::CommDataDirectionFiltrationEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by FilterInclusionType.
    *
    * @return A const reference to the value of the enumeration identified by FilterInclusionType.
    */
  virtual const uci::type::InclusionEnum& getFilterInclusionType() const = 0;

  /** Returns a reference to the value of the enumeration identified by FilterInclusionType.
    *
    * @return A reference to the value of the enumeration identified by FilterInclusionType.
    */
  virtual uci::type::InclusionEnum& getFilterInclusionType() = 0;

  /** Sets the value of the enumeration identified by FilterInclusionType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& setFilterInclusionType(const uci::type::InclusionEnum& value) = 0;

  /** Sets the value of the enumeration identified by FilterInclusionType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& setFilterInclusionType(uci::type::InclusionEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by ConnectionKey.
    *
    * @return A const reference to the bounded list identified by ConnectionKey.
    */
  virtual const uci::type::MessageConfigurationType::ConnectionKey& getConnectionKey() const = 0;

  /** Returns a reference to the bounded list identified by ConnectionKey.
    *
    * @return A reference to the bounded list identified by ConnectionKey.
    */
  virtual uci::type::MessageConfigurationType::ConnectionKey& getConnectionKey() = 0;

  /** Sets the bounded list identified by ConnectionKey.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& setConnectionKey(const uci::type::MessageConfigurationType::ConnectionKey& value) = 0;

  /** Returns a const reference to the bounded list identified by RemoteSystemID.
    *
    * @return A const reference to the bounded list identified by RemoteSystemID.
    */
  virtual const uci::type::MessageConfigurationType::RemoteSystemID& getRemoteSystemID() const = 0;

  /** Returns a reference to the bounded list identified by RemoteSystemID.
    *
    * @return A reference to the bounded list identified by RemoteSystemID.
    */
  virtual uci::type::MessageConfigurationType::RemoteSystemID& getRemoteSystemID() = 0;

  /** Sets the bounded list identified by RemoteSystemID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& setRemoteSystemID(const uci::type::MessageConfigurationType::RemoteSystemID& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by TransmitPeriodicity.
    *
    * @return The value of the simple primitive data type identified by TransmitPeriodicity.
    */
  virtual uci::type::DurationTypeValue getTransmitPeriodicity() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TransmitPeriodicity.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& setTransmitPeriodicity(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by TransmitPeriodicity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TransmitPeriodicity is enabled or not.
    */
  virtual bool hasTransmitPeriodicity() const = 0;

  /** Clears (disabled) the Element identified by TransmitPeriodicity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& clearTransmitPeriodicity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * DataLinkNativeFilter.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      DataLinkNativeFilter.
    */
  virtual const uci::type::DataLinkNativeFilterPET& getDataLinkNativeFilter() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DataLinkNativeFilter.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DataLinkNativeFilter.
    */
  virtual uci::type::DataLinkNativeFilterPET& getDataLinkNativeFilter() = 0;

  /** Sets the complex content identified by DataLinkNativeFilter to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DataLinkNativeFilter.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& setDataLinkNativeFilter(const uci::type::DataLinkNativeFilterPET& value) = 0;

  /** Returns whether the Element identified by DataLinkNativeFilter exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DataLinkNativeFilter is enabled or not.
    */
  virtual bool hasDataLinkNativeFilter() const = 0;

  /** Enables the Element identified by DataLinkNativeFilter.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DataLinkNativeFilter.
    */
  virtual uci::type::DataLinkNativeFilterPET& enableDataLinkNativeFilter(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DataLinkNativeFilter.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& clearDataLinkNativeFilter() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Rank.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Rank.
    */
  virtual const uci::type::ComparableRankingType& getRank() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Rank.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Rank.
    */
  virtual uci::type::ComparableRankingType& getRank() = 0;

  /** Sets the complex content identified by Rank to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Rank.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& setRank(const uci::type::ComparableRankingType& value) = 0;

  /** Returns whether the Element identified by Rank exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Rank is enabled or not.
    */
  virtual bool hasRank() const = 0;

  /** Enables the Element identified by Rank.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Rank.
    */
  virtual uci::type::ComparableRankingType& enableRank(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Rank.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& clearRank() = 0;

  /** Returns a const reference to the value of the enumeration identified by ConfigurationState.
    *
    * @return A const reference to the value of the enumeration identified by ConfigurationState.
    */
  virtual const uci::type::CommConfigurationStateEnum& getConfigurationState() const = 0;

  /** Returns a reference to the value of the enumeration identified by ConfigurationState.
    *
    * @return A reference to the value of the enumeration identified by ConfigurationState.
    */
  virtual uci::type::CommConfigurationStateEnum& getConfigurationState() = 0;

  /** Sets the value of the enumeration identified by ConfigurationState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& setConfigurationState(const uci::type::CommConfigurationStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by ConfigurationState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& setConfigurationState(uci::type::CommConfigurationStateEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ConfigurationState exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConfigurationState is enabled or not.
    */
  virtual bool hasConfigurationState() const = 0;

  /** Enables the Element identified by ConfigurationState.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ConfigurationState.
    */
  virtual uci::type::CommConfigurationStateEnum& enableConfigurationState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ConfigurationState.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MessageConfigurationType& clearConfigurationState() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  MessageConfigurationType() {
  }

  /** The destructor [only available to derived classes]. */
  ~MessageConfigurationType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The MessageConfigurationType to copy from.
    */
  MessageConfigurationType(const MessageConfigurationType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this MessageConfigurationType to the contents of the
    * MessageConfigurationType on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The MessageConfigurationType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this MessageConfigurationType.
    * @return A reference to this MessageConfigurationType.
    */
  MessageConfigurationType& operator=(const MessageConfigurationType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_MESSAGECONFIGURATIONTYPE_H

