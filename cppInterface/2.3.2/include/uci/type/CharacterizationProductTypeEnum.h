/** @file CharacterizationProductTypeEnum.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CHARACTERIZATIONPRODUCTTYPEENUM_H
#define UCI_TYPE_CHARACTERIZATIONPRODUCTTYPEENUM_H

#include <map>
#include <sstream>

#include "uci/base/Accessor.h"
#include "uci/base/export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** An enumeration of product types that provide information on the characteristics (other than position/velocity data)
  * of a target that a sensor may produce. These include apparent size/signal strength in units such as dBsm, dBW, visual
  * magnitude; time series on apparent size; and signal strength over select frequency/wavelength bands.
  */
class CharacterizationProductTypeEnum : public virtual uci::base::Accessor {
public:

  /** The following are the enumerated items that comprise this enumeration */
  enum EnumerationItem {

    /** Enumerated item that indicates that the enumeration has not been set */
    enumNotSet,

    /** Short period single measurement of calibrated representation of signal amplitude received at sensor. Might be
      * per-metric-measurement of visual magnitude or RCS.
      */
    UCI_POINT_SOI,

    /** Point SOI radar cross section on a per-reported-metric-measurement basis (may be a tracking-filter output measurement
      * rather than single detection-level measurement).
      */
    UCI_PER_OBSERVATION_RCS,

    /** Point SOI visual magnitude on a per-reported-metric-measurement basis (may be a tracking-filter output measurement
      * rather than single detection-level measurement)â€“ usually referenced to entry of sensor aperture.
      */
    UCI_PER_OBSERVATION_VMAG,

    /** Calibrated representation of signal amplitude received at sensor averaged over a collection period. */
    UCI_AVERAGE_SOI,

    /** Calibrated representation of radar cross section, measured in dBsm, received at sensor and averaged over a collection
      * period.
      */
    UCI_AVERAGE_RCS,

    /** Calibrated representation of visual magnitude, measured in visual magnitude (log scale), received at sensor and
      * averaged over a collection period.
      */
    UCI_AVERAGE_VMAG,

    /** Calibrated representation of signal amplitude received at sensor vs time, typically at the same rate as used for
      * detection (e.g., pulse rate for a radar or frame rate for optical system).
      */
    UCI_AMPLITUDE_VS_TIME,

    /** RCS vs time, typically at the radar pulse rate (but at the pulse-block rate when integrating pulses for detection
      * purposes). Resolution is typically specified in time and potentially RCS.
      */
    UCI_NARROWBAND_SOI,

    /** Characterization highly resolved in the optical spectrum. */
    UCI_HYPERSPECTRAL,

    /** Magnitude vs time in two or more sub-portions of the visible-band spectrum. */
    UCI_COLOR_PHOTOMETRY,

    /** Radar amplitude vs range characterization where the target is resolved in range (due to high-bandwidth of the radar
      * pulses). Can include SOI where target is also resolved in Doppler, enabling a radar image in the range and
      * cross-range dimensions.
      */
    UCI_WIDEBAND_SOI,

    /** Wideband SOI with a target resolved in range providing range vs amplitude. */
    UCI_RANGE_PROFILE,

    /** Two dimensional plot showing Intensity (usually in RCS) of radar scatterers as a function of range and time. Radar
      * scatterers may be multiple targets within radar beam or different parts of the same target.
      */
    UCI_RANGE_TIME_INTENSITY,

    /** Two dimensional plot showing Intensity (usually in RCS) of radar scatterers as a function of Doppler shift and time.
      * Radar scatterers may be multiple targets within radar beam or different parts of the same target.
      */
    UCI_DOPPLER_TIME_INTENSITY,

    /** Optical image, usually with target resolved in the two linear dimensions projected onto a plane perpendicular to the
      * line of sight to the target. Resolution is typically specified in angular dimensions (millidegrees, arcseconds,
      * milliradians).
      */
    UCI_OPTICAL_IMAGE,

    /** Radar image leveraging wideband collections and resolved Doppler differences across elements of the target to create
      * a two dimensional image in the dimensions of range and cross-range. Resolution is typically specified in meters.
      */
    UCI_RANGE_DOPPLER_IMAGE,

    /** Characterization product where the target is resolved in at least two linear dimensions, usually with sufficient
      * resolution to characterize size through the linear dimensions (as opposed to through signal magnitude) and target
      * features. Note that sometimes images are used to resolve two closely-spaced targets, neither of which is resolved.
      */
    UCI_IMAGE,

    /** Image from data in the infrared band, usually with target resolved in the two linear dimensions projected onto a
      * plane perpendicular to the line of sight to the target. Resolution is typically specified in angular dimensions
      * (millidegrees, arcseconds, milliradians).
      */
    UCI_IR_IMAGE,

    /** Characterization product with target resolved in three linear dimensions. This may be through processing of multiple
      * frames of two-dimensional images or through use of sensors capable of simultaneous high-resolution in three
      * dimensions (e.g., laser radar with high range-resolution combined with high-angular-resolution optics).
      */
    UCI_IMAGE_3D,

    /** Enumerated item that indicates maximum enumerated item exclusive of this item */
    enumMaxExclusive
  };

  /** Returns this accessor's type constant, i.e. characterizationProductTypeEnum.
    *
    * @return This accessor's type constant, i.e. characterizationProductTypeEnum.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::characterizationProductTypeEnum;
  }

  /** The assignment operator. Sets the contents of this CharacterizationProductTypeEnum to the contents of the
    * CharacterizationProductTypeEnum on the right hand side (rhs) of the assignment operator.
    *
    * @param rhs The CharacterizationProductTypeEnum on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this CharacterizationProductTypeEnum.
    * @return A reference to this CharacterizationProductTypeEnum.
    */
  CharacterizationProductTypeEnum& operator=(const CharacterizationProductTypeEnum& rhs) {
    setValue(rhs.getValue());
    return *this;
  }

  /** The assignment operator that sets the value of this CharacterizationProductTypeEnum enumeration to the
    * EnumerationItem on the right hand side of the assignment operator.
    *
    * @param rhs The EnumerationItem whose value is to be assigned to this CharacterizationProductTypeEnum enumeration.
    * @return A reference to this CharacterizationProductTypeEnum enumeration.
    */
  CharacterizationProductTypeEnum& operator=(EnumerationItem rhs) {
    setValue(rhs);
    return *this;
  }

  /** Sets the value of this CharacterizationProductTypeEnum enumeration to the value of the specified enumeration item.
    *
    * @param item The EnumerationItem whose value is to be used to set the value of this CharacterizationProductTypeEnum
    *      enumeration.
    */
  virtual void setValue(EnumerationItem item) = 0;

  /** Returns the value of this CharacterizationProductTypeEnum enumeration.
    *
    * @param testForValidity=true Specifies whether this CharacterizationProductTypeEnum enumeration should be validated
    *      (true) or not (false) as part of retrieving its value.
    * @return The value of this CharacterizationProductTypeEnum enumeration.
    */
  virtual EnumerationItem getValue(bool testForValidity=true) const = 0;

  /** Returns the number of items in this CharacterizationProductTypeEnum enumeration.
    *
    * @return The number of items in this CharacterizationProductTypeEnum enumeration.
    */
  int getNumberOfItems() const noexception {
    return 19;
  }

  /** Returns whether this CharacterizationProductTypeEnum enumeration is valid or not. A CharacterizationProductTypeEnum
    * enumeration is valid if its value is one of the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @return A flag indicating whether this CharacterizationProductTypeEnum enumeration is valid (true) or not (false).
    */
  virtual bool isValid() const noexception {
    return isValid(getValue(false));
  }

  /** Returns whether the specified enumeration item is valid or not. A enumeration item is valid if its value is one of
    * the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @param item The EnumerationItem to test.
    * @return A flag indicating whether the specified EnumerationItem is valid (true) or not (false).
    */
  static bool isValid(EnumerationItem item) noexception {
    return (item > enumNotSet) && (item < enumMaxExclusive);
  }

  /** Returns whether the specified name item is valid or not. A name is valid if it is the name of one of the enumeration
    * items other than enumNotSet and enumMaxExclusive.
    *
    * @param name The name to test.
    * @return A flag indicating whether the specified name is valid (true) or not (false).
    */
  static bool isValid(const std::string& name) noexception {
    FromNameTable::const_iterator iter = m_fromNameTable.find(name);
    return !(iter == m_fromNameTable.end());
  }

  /** Tests whether the value of the CharacterizationProductTypeEnum enumeration on the right hand side of the == operator
    * is equal to the value as this CharacterizationProductTypeEnum enumeration.
    *
    * @param rhs The CharacterizationProductTypeEnum enumeration whose value is to be compared against the value of this
    *      CharacterizationProductTypeEnum enumeration.
    * @return True if the value of the specified CharacterizationProductTypeEnum enumeration (rhs) is equal to the value of
    *      this CharacterizationProductTypeEnum enumeration, false otherwise.
    */
  bool operator==(const CharacterizationProductTypeEnum& rhs) const {
    return getValue() == rhs.getValue();
  }

  /** Tests whether the value of the CharacterizationProductTypeEnum enumeration on the right hand side of the != operator
    * is not equal to the value as this CharacterizationProductTypeEnum enumeration.
    *
    * @param rhs The CharacterizationProductTypeEnum enumeration whose value is to be compared against the value of this
    *      CharacterizationProductTypeEnum enumeration.
    * @return True if the value of the specified CharacterizationProductTypeEnum enumeration (rhs) is not equal to the
    *      value of this CharacterizationProductTypeEnum enumeration, false otherwise.
    */
  bool operator!=(const CharacterizationProductTypeEnum& rhs) const {
    return getValue() != rhs.getValue();
  }

  /** Tests whether the value of the CharacterizationProductTypeEnum enumeration on the right hand side of the < operator
    * is less than the value as this CharacterizationProductTypeEnum enumeration.
    *
    * @param rhs The CharacterizationProductTypeEnum enumeration whose value is to be compared against the value of this
    *      CharacterizationProductTypeEnum enumeration.
    * @return True if the value of the specified CharacterizationProductTypeEnum enumeration (rhs) is less than the value
    *      of this CharacterizationProductTypeEnum enumeration, false otherwise.
    */
  bool operator<(const CharacterizationProductTypeEnum& rhs) const {
    return getValue() < rhs.getValue();
  }

  /** Tests whether the value of the CharacterizationProductTypeEnum enumeration on the right hand side of the <= operator
    * is less than or equal to the value as this CharacterizationProductTypeEnum enumeration.
    *
    * @param rhs The CharacterizationProductTypeEnum enumeration whose value is to be compared against the value of this
    *      CharacterizationProductTypeEnum enumeration.
    * @return True if the value of the specified CharacterizationProductTypeEnum enumeration (rhs) is less than or equal to
    *      the value of this CharacterizationProductTypeEnum enumeration, false otherwise.
    */
  bool operator<=(const CharacterizationProductTypeEnum& rhs) const {
    return getValue() <= rhs.getValue();
  }

  /** Tests whether the value of the CharacterizationProductTypeEnum enumeration on the right hand side of the > operator
    * is greater than the value as this CharacterizationProductTypeEnum enumeration.
    *
    * @param rhs The CharacterizationProductTypeEnum enumeration whose value is to be compared against the value of this
    *      CharacterizationProductTypeEnum enumeration.
    * @return True if the value of the specified CharacterizationProductTypeEnum enumeration (rhs) is greater than the
    *      value of this CharacterizationProductTypeEnum enumeration, false otherwise.
    */
  bool operator>(const CharacterizationProductTypeEnum& rhs) const {
    return getValue() > rhs.getValue();
  }

  /** Tests whether the value of the CharacterizationProductTypeEnum enumeration on the right hand side of the >= operator
    * is greater than or equal to the value as this CharacterizationProductTypeEnum enumeration.
    *
    * @param rhs The CharacterizationProductTypeEnum enumeration whose value is to be compared against the value of this
    *      CharacterizationProductTypeEnum enumeration.
    * @return True if the value of the specified CharacterizationProductTypeEnum enumeration (rhs) is greater than or equal
    *      to the value of this CharacterizationProductTypeEnum enumeration, false otherwise.
    */
  bool operator>=(const CharacterizationProductTypeEnum& rhs) const {
    return getValue() >= rhs.getValue();
  }

  /** Tests whether the value of this CharacterizationProductTypeEnum enumeration is equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this
    *      CharacterizationProductTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is equal to the value of this CharacterizationProductTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator==(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() == rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is equal to the value of the specified
    * CharacterizationProductTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified
    *      CharacterizationProductTypeEnum enumeration.
    * @param rhs The CharacterizationProductTypeEnum enumeration whose value is to be compared against the value of the
    *      specified EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is equal to the value of the CharacterizationProductTypeEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator==(EnumerationItem lhs, const CharacterizationProductTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs == rhs.getValue();
  }

  /** Tests whether the value of this CharacterizationProductTypeEnum enumeration is not equal to the value of the
    * specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this
    *      CharacterizationProductTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is not equal to the value of this
    *      CharacterizationProductTypeEnum enumeration, false otherwise.
    */
  bool operator!=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() != rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is not equal to the value of the specified
    * CharacterizationProductTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified
    *      CharacterizationProductTypeEnum enumeration.
    * @param rhs The CharacterizationProductTypeEnum enumeration whose value is to be compared against the value of the
    *      specified EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is not equal to the value of the
    *      CharacterizationProductTypeEnum enumeration (rhs), false otherwise.
    */
  friend bool operator!=(EnumerationItem lhs, const CharacterizationProductTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs != rhs.getValue();
  }

  /** Tests whether the value of this CharacterizationProductTypeEnum enumeration is less than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this
    *      CharacterizationProductTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than the value of this CharacterizationProductTypeEnum
    *      enumeration, false otherwise.
    */
  bool operator<(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() < rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than the value of the specified
    * CharacterizationProductTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified
    *      CharacterizationProductTypeEnum enumeration.
    * @param rhs The CharacterizationProductTypeEnum enumeration whose value is to be compared against the value of the
    *      specified EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than the value of the CharacterizationProductTypeEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator<(EnumerationItem lhs, const CharacterizationProductTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs < rhs.getValue();
  }

  /** Tests whether the value of this CharacterizationProductTypeEnum enumeration is less than or equal to the value of the
    * specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this
    *      CharacterizationProductTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than or equal to the value of this
    *      CharacterizationProductTypeEnum enumeration, false otherwise.
    */
  bool operator<=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() <= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than or equal to the value of the specified
    * CharacterizationProductTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified
    *      CharacterizationProductTypeEnum enumeration.
    * @param rhs The CharacterizationProductTypeEnum enumeration whose value is to be compared against the value of the
    *      specified EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than or equal to the value of the
    *      CharacterizationProductTypeEnum enumeration (rhs), false otherwise.
    */
  friend bool operator<=(EnumerationItem lhs, const CharacterizationProductTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs <= rhs.getValue();
  }

  /** Tests whether the value of this CharacterizationProductTypeEnum enumeration is greater than the value of the
    * specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this
    *      CharacterizationProductTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than the value of this
    *      CharacterizationProductTypeEnum enumeration, false otherwise.
    */
  bool operator>(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() > rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than the value of the specified
    * CharacterizationProductTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified
    *      CharacterizationProductTypeEnum enumeration.
    * @param rhs The CharacterizationProductTypeEnum enumeration whose value is to be compared against the value of the
    *      specified EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than the value of the
    *      CharacterizationProductTypeEnum enumeration (rhs), false otherwise.
    */
  friend bool operator>(EnumerationItem lhs, const CharacterizationProductTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs > rhs.getValue();
  }

  /** Tests whether the value of this CharacterizationProductTypeEnum enumeration is greater than or equal to the value of
    * the specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this
    *      CharacterizationProductTypeEnum enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than or equal to the value of this
    *      CharacterizationProductTypeEnum enumeration, false otherwise.
    */
  bool operator>=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() >= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than or equal to the value of the specified
    * CharacterizationProductTypeEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified
    *      CharacterizationProductTypeEnum enumeration.
    * @param rhs The CharacterizationProductTypeEnum enumeration whose value is to be compared against the value of the
    *      specified EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than or equal to the value of the
    *      CharacterizationProductTypeEnum enumeration (rhs), false otherwise.
    */
  friend bool operator>=(EnumerationItem lhs, const CharacterizationProductTypeEnum& rhs) {
    testForValidItem(lhs);
    return lhs >= rhs.getValue();
  }

  /** Returns the name of the specified enumeration item.
    *
    * @param item The enumeration item whose name is to be returned.
    * @return The enumeration item's name if valid.
    */
  static std::string toName(EnumerationItem item) {
    ToNameTable::const_iterator iter = m_toNameTable.find(item);
    if (iter == m_toNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to convert enumerated item to its name, item not found in mapping: " << item;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Returns the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item to be returned.
    * @return The enumeration item having the specified name.
    */
  static EnumerationItem fromName(const std::string& itemName) {
    FromNameTable::const_iterator iter = m_fromNameTable.find(itemName);
    if (iter == m_fromNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to return enumerated item having specified name, name not found in mapping: " << itemName;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Return the name of the enumeration item that the value of this CharacterizationProductTypeEnum enumeration is set to.
    *
    * @return The name of the enumeration item.
    */
  virtual std::string toName() const {
    return toName(getValue());
  }

  /** Sets the value of this CharacterizationProductTypeEnum enumeration to the value of the enumeration item having the
    * specified name.
    *
    * @param itemName The name of the enumeration item whose value is to be used to set this
    *      CharacterizationProductTypeEnum enumeration to.
    */
  virtual void setValueFromName(const std::string& itemName) {
    setValue(fromName(itemName));
  }

protected:

  /** The default constructor. In addition to constructing a new CharacterizationProductTypeEnum, this constructor also
    * makes sure the conversion tables are initialized.
    */
  CharacterizationProductTypeEnum() {
  }

  /** The destructor [only available to derived classes]. */
  ~CharacterizationProductTypeEnum() {
  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param additionalDescription An additional description to include in the error message should an exception be thrown.
    * @param item The enumeration item to test.
    */
  static void testForValidItem(const char* additionalDescription, EnumerationItem item) {
    if (!isValid(item)) {
      std::ostringstream oStream;
      oStream << additionalDescription << ": " << item << " (item must be between " << enumNotSet << " and "<< enumMaxExclusive << " exclusive)";
      throw uci::base::UCIException(oStream.str(), 0);
    }

  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param item The enumeration item to test.
    */
  static void testForValidItem(EnumerationItem item) {
    testForValidItem("Invalid enumerated item specified", item);
  }

private:

  /** The type of table that is used to lookup the name of a enumeration item given that enumeration item. */
  typedef std::map<EnumerationItem, const std::string> ToNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  typedef std::map<const std::string, EnumerationItem> FromNameTable;

  /** The table that is used to lookup the name of a enumeration item given that enumeration item. */
  static UCI_EXPORT ToNameTable m_toNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  static UCI_EXPORT FromNameTable m_fromNameTable;

protected:

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CharacterizationProductTypeEnum to copy from.
    */
  CharacterizationProductTypeEnum(const CharacterizationProductTypeEnum& rhs) {
    (void)rhs;
  }

};

} // namespace type
} // namespace uci

template<typename charT, typename traits>
std::basic_ostream<charT, traits>&
operator<<(std::basic_ostream<charT, traits>& oStream, const uci::type::CharacterizationProductTypeEnum& enumeration)
{
  oStream << enumeration.toName();
  return oStream;
}

#endif // UCI_TYPE_CHARACTERIZATIONPRODUCTTYPEENUM_H

