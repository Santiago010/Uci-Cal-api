/** @file DeclassExceptionEnum.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_DECLASSEXCEPTIONENUM_H
#define UCI_TYPE_DECLASSEXCEPTIONENUM_H

#include <map>
#include <sstream>

#include "../base/Accessor.h"
#include "../base/export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** (U) All currently authorized authority block declass date/event exemptions. PERMISSIBLE VALUES The permissible values
  * for this simple type are defined in the Controlled Value Enumeration: CVEnumISM25X.xml
  */
class DeclassExceptionEnum : public virtual uci::base::Accessor {
public:

  /** The following are the enumerated items that comprise this enumeration */
  enum EnumerationItem {

    /** Enumerated item that indicates that the enumeration has not been set */
    enumNotSet,

    /** When using a source document that contains portions of Restricted Data (RD) or Formerly Restricted Data (FRD) where
      * the RD/FRD source document(s) do not have declassification instructions, the derivatively classified document shall
      * not contain a declassification date or event on the Declassify On line. The following shall be annotated on the
      * Declassify On line: "Not Applicable or (N/A) to RD/FRD portions" and "See source list for NSI portions" separated by
      * a period. The source list must include the declassification instruction for each of the source documents classified
      * under E.O. 13526 and shall not appear in the classification authority block
      */
    UCI_AEA,

    /** Since NATO information is not to be declassified or downgraded without the prior consent of NATO, the "Declassify on"
      * line of documents that commingle information classified by NATO and U.S. classified NSI, will read "N/A to NATO
      * portions. See source list for NSI portions." The NSI source list will appear beneath the classification authority
      * block in a manner that clearly identifies it as separate and distinct.
      */
    UCI_NATO,

    /** Handles special case of BOTH NATO and AEA as a single exemption. */
    UCI_NATO_AEA,

    /** Reveal the identity of a confidential human source, a human intelligence source, a relationship with an intelligence
      * or security service of a foreign government or international organization, or a non-human intelligence source; or
      * impair the effectiveness of an intelligence method currently in use, available for use, or under development.
      */
    UCI_25X1,

    /** "25X1, EO 12951" (prescribed by the DNI for use on information described in E.O. 12951, Release of Imagery Acquired
      * by Space-Based National Intelligence Reconnaissance Systems)
      */
    UCI_25X1_EO_12951,

    /** Reveal information that would assist in the development, production, or use of weapons of mass destruction. */
    UCI_25X2,

    /** Reveal information that would impair U.S. cryptologic systems or activities. */
    UCI_25X3,

    /** Reveal information that would impair the application of state-of-the-art technology within a U.S. weapon system. */
    UCI_25X4,

    /** Reveal formally named or numbered U.S. military war plans that remain in effect, or reveal operational or tactical
      * elements of prior plans that are contained in such active plans;
      */
    UCI_25X5,

    /** Reveal information, including foreign government information, that would cause serious harm to relations between the
      * United States and a foreign government, or to ongoing diplomatic activities of the United States
      */
    UCI_25X6,

    /** Reveal information that would impair the current ability of United States Government officials to protect the
      * President, Vice President, and other protectees for whom protection services, in the interest of the national
      * security, are authorized.
      */
    UCI_25X7,

    /** Reveal information that would seriously impair current national security emergency preparedness plans or reveal
      * current vulnerabilities of systems, installations, or infrastructures relating to the national security.
      */
    UCI_25X8,

    /** Violate a statute, treaty, or international agreement that does not permit the automatic or unilateral
      * declassification of information at 25 years.
      */
    UCI_25X9,

    /** When the information clearly and demonstrably could be expected to reveal the identity of a confidential human source
      * or a human intelligence source.
      */
    UCI_50X1_HUM,

    /** The ISCAP has authorized use of this code in the FBI's classification guidance (which results in a 75-year
      * classification period) for any agency sourcing/reusing the information.
      */
    UCI_50X1,

    /** When the information clearly and demonstrably could reveal key design concepts of weapons of mass destruction. */
    UCI_50X2_WMD,

    /** The ISCAP has authorized use of this code in the FBI's classification guidance (which results in a 75-year
      * classification period) for any agency sourcing/reusing the information.
      */
    UCI_50X6,

    /** Enumerated item that indicates maximum enumerated item exclusive of this item */
    enumMaxExclusive
  };

  /** Returns this accessor's type constant, i.e. declassExceptionEnum.
    *
    * @return This accessor's type constant, i.e. declassExceptionEnum.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::declassExceptionEnum;
  }

  /** The assignment operator. Sets the contents of this DeclassExceptionEnum to the contents of the DeclassExceptionEnum
    * on the right hand side (rhs) of the assignment operator.
    *
    * @param rhs The DeclassExceptionEnum on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this DeclassExceptionEnum.
    * @return A reference to this DeclassExceptionEnum.
    */
  DeclassExceptionEnum& operator=(const DeclassExceptionEnum& rhs) {
    setValue(rhs.getValue());
    return *this;
  }

  /** The assignment operator that sets the value of this DeclassExceptionEnum enumeration to the EnumerationItem on the
    * right hand side of the assignment operator.
    *
    * @param rhs The EnumerationItem whose value is to be assigned to this DeclassExceptionEnum enumeration.
    * @return A reference to this DeclassExceptionEnum enumeration.
    */
  DeclassExceptionEnum& operator=(EnumerationItem rhs) {
    setValue(rhs);
    return *this;
  }

  /** Sets the value of this DeclassExceptionEnum enumeration to the value of the specified enumeration item.
    *
    * @param item The EnumerationItem whose value is to be used to set the value of this DeclassExceptionEnum enumeration.
    */
  virtual void setValue(EnumerationItem item) = 0;

  /** Returns the value of this DeclassExceptionEnum enumeration.
    *
    * @param testForValidity=true Specifies whether this DeclassExceptionEnum enumeration should be validated (true) or not
    *      (false) as part of retrieving its value.
    * @return The value of this DeclassExceptionEnum enumeration.
    */
  virtual EnumerationItem getValue(bool testForValidity=true) const = 0;

  /** Returns the number of items in this DeclassExceptionEnum enumeration.
    *
    * @return The number of items in this DeclassExceptionEnum enumeration.
    */
  int getNumberOfItems() const noexception {
    return 17;
  }

  /** Returns whether this DeclassExceptionEnum enumeration is valid or not. A DeclassExceptionEnum enumeration is valid if
    * its value is one of the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @return A flag indicating whether this DeclassExceptionEnum enumeration is valid (true) or not (false).
    */
  virtual bool isValid() const noexception {
    return isValid(getValue(false));
  }

  /** Returns whether the specified enumeration item is valid or not. A enumeration item is valid if its value is one of
    * the enumeration items other than enumNotSet and enumMaxExclusive.
    *
    * @param item The EnumerationItem to test.
    * @return A flag indicating whether the specified EnumerationItem is valid (true) or not (false).
    */
  static bool isValid(EnumerationItem item) noexception {
    return (item > enumNotSet) && (item < enumMaxExclusive);
  }

  /** Returns whether the specified name item is valid or not. A name is valid if it is the name of one of the enumeration
    * items other than enumNotSet and enumMaxExclusive.
    *
    * @param name The name to test.
    * @return A flag indicating whether the specified name is valid (true) or not (false).
    */
  static bool isValid(const std::string& name) noexception {
    FromNameTable::const_iterator iter = m_fromNameTable.find(name);
    return !(iter == m_fromNameTable.end());
  }

  /** Tests whether the value of the DeclassExceptionEnum enumeration on the right hand side of the == operator is equal to
    * the value as this DeclassExceptionEnum enumeration.
    *
    * @param rhs The DeclassExceptionEnum enumeration whose value is to be compared against the value of this
    *      DeclassExceptionEnum enumeration.
    * @return True if the value of the specified DeclassExceptionEnum enumeration (rhs) is equal to the value of this
    *      DeclassExceptionEnum enumeration, false otherwise.
    */
  bool operator==(const DeclassExceptionEnum& rhs) const {
    return getValue() == rhs.getValue();
  }

  /** Tests whether the value of the DeclassExceptionEnum enumeration on the right hand side of the != operator is not
    * equal to the value as this DeclassExceptionEnum enumeration.
    *
    * @param rhs The DeclassExceptionEnum enumeration whose value is to be compared against the value of this
    *      DeclassExceptionEnum enumeration.
    * @return True if the value of the specified DeclassExceptionEnum enumeration (rhs) is not equal to the value of this
    *      DeclassExceptionEnum enumeration, false otherwise.
    */
  bool operator!=(const DeclassExceptionEnum& rhs) const {
    return getValue() != rhs.getValue();
  }

  /** Tests whether the value of the DeclassExceptionEnum enumeration on the right hand side of the < operator is less than
    * the value as this DeclassExceptionEnum enumeration.
    *
    * @param rhs The DeclassExceptionEnum enumeration whose value is to be compared against the value of this
    *      DeclassExceptionEnum enumeration.
    * @return True if the value of the specified DeclassExceptionEnum enumeration (rhs) is less than the value of this
    *      DeclassExceptionEnum enumeration, false otherwise.
    */
  bool operator<(const DeclassExceptionEnum& rhs) const {
    return getValue() < rhs.getValue();
  }

  /** Tests whether the value of the DeclassExceptionEnum enumeration on the right hand side of the <= operator is less
    * than or equal to the value as this DeclassExceptionEnum enumeration.
    *
    * @param rhs The DeclassExceptionEnum enumeration whose value is to be compared against the value of this
    *      DeclassExceptionEnum enumeration.
    * @return True if the value of the specified DeclassExceptionEnum enumeration (rhs) is less than or equal to the value
    *      of this DeclassExceptionEnum enumeration, false otherwise.
    */
  bool operator<=(const DeclassExceptionEnum& rhs) const {
    return getValue() <= rhs.getValue();
  }

  /** Tests whether the value of the DeclassExceptionEnum enumeration on the right hand side of the > operator is greater
    * than the value as this DeclassExceptionEnum enumeration.
    *
    * @param rhs The DeclassExceptionEnum enumeration whose value is to be compared against the value of this
    *      DeclassExceptionEnum enumeration.
    * @return True if the value of the specified DeclassExceptionEnum enumeration (rhs) is greater than the value of this
    *      DeclassExceptionEnum enumeration, false otherwise.
    */
  bool operator>(const DeclassExceptionEnum& rhs) const {
    return getValue() > rhs.getValue();
  }

  /** Tests whether the value of the DeclassExceptionEnum enumeration on the right hand side of the >= operator is greater
    * than or equal to the value as this DeclassExceptionEnum enumeration.
    *
    * @param rhs The DeclassExceptionEnum enumeration whose value is to be compared against the value of this
    *      DeclassExceptionEnum enumeration.
    * @return True if the value of the specified DeclassExceptionEnum enumeration (rhs) is greater than or equal to the
    *      value of this DeclassExceptionEnum enumeration, false otherwise.
    */
  bool operator>=(const DeclassExceptionEnum& rhs) const {
    return getValue() >= rhs.getValue();
  }

  /** Tests whether the value of this DeclassExceptionEnum enumeration is equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this DeclassExceptionEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is equal to the value of this DeclassExceptionEnum
    *      enumeration, false otherwise.
    */
  bool operator==(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() == rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is equal to the value of the specified DeclassExceptionEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified DeclassExceptionEnum
    *      enumeration.
    * @param rhs The DeclassExceptionEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is equal to the value of the DeclassExceptionEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator==(EnumerationItem lhs, const DeclassExceptionEnum& rhs) {
    testForValidItem(lhs);
    return lhs == rhs.getValue();
  }

  /** Tests whether the value of this DeclassExceptionEnum enumeration is not equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this DeclassExceptionEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is not equal to the value of this DeclassExceptionEnum
    *      enumeration, false otherwise.
    */
  bool operator!=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() != rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is not equal to the value of the specified
    * DeclassExceptionEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified DeclassExceptionEnum
    *      enumeration.
    * @param rhs The DeclassExceptionEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is not equal to the value of the DeclassExceptionEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator!=(EnumerationItem lhs, const DeclassExceptionEnum& rhs) {
    testForValidItem(lhs);
    return lhs != rhs.getValue();
  }

  /** Tests whether the value of this DeclassExceptionEnum enumeration is less than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this DeclassExceptionEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than the value of this DeclassExceptionEnum
    *      enumeration, false otherwise.
    */
  bool operator<(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() < rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than the value of the specified DeclassExceptionEnum
    * enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified DeclassExceptionEnum
    *      enumeration.
    * @param rhs The DeclassExceptionEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than the value of the DeclassExceptionEnum enumeration
    *      (rhs), false otherwise.
    */
  friend bool operator<(EnumerationItem lhs, const DeclassExceptionEnum& rhs) {
    testForValidItem(lhs);
    return lhs < rhs.getValue();
  }

  /** Tests whether the value of this DeclassExceptionEnum enumeration is less than or equal to the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this DeclassExceptionEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is less than or equal to the value of this
    *      DeclassExceptionEnum enumeration, false otherwise.
    */
  bool operator<=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() <= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is less than or equal to the value of the specified
    * DeclassExceptionEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified DeclassExceptionEnum
    *      enumeration.
    * @param rhs The DeclassExceptionEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is less than or equal to the value of the DeclassExceptionEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator<=(EnumerationItem lhs, const DeclassExceptionEnum& rhs) {
    testForValidItem(lhs);
    return lhs <= rhs.getValue();
  }

  /** Tests whether the value of this DeclassExceptionEnum enumeration is greater than the value of the specified
    * EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this DeclassExceptionEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than the value of this DeclassExceptionEnum
    *      enumeration, false otherwise.
    */
  bool operator>(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() > rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than the value of the specified
    * DeclassExceptionEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified DeclassExceptionEnum
    *      enumeration.
    * @param rhs The DeclassExceptionEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than the value of the DeclassExceptionEnum
    *      enumeration (rhs), false otherwise.
    */
  friend bool operator>(EnumerationItem lhs, const DeclassExceptionEnum& rhs) {
    testForValidItem(lhs);
    return lhs > rhs.getValue();
  }

  /** Tests whether the value of this DeclassExceptionEnum enumeration is greater than or equal to the value of the
    * specified EnumerationItem.
    *
    * @param rhs The EnumerationItem whose value is to be compared against the value of this DeclassExceptionEnum
    *      enumeration.
    * @return True if the value of the EnumerationItem (rhs) is greater than or equal to the value of this
    *      DeclassExceptionEnum enumeration, false otherwise.
    */
  bool operator>=(EnumerationItem rhs) const {
    testForValidItem(rhs);
    return getValue() >= rhs;
  }

  /** Tests whether the value of the specified EnumerationItem is greater than or equal to the value of the specified
    * DeclassExceptionEnum enumeration.
    *
    * @param lhs The EnumerationItem whose value is to be compared against the value of the specified DeclassExceptionEnum
    *      enumeration.
    * @param rhs The DeclassExceptionEnum enumeration whose value is to be compared against the value of the specified
    *      EnumerationItem.
    * @return True if the value of the EnumerationItem (lhs) is greater than or equal to the value of the
    *      DeclassExceptionEnum enumeration (rhs), false otherwise.
    */
  friend bool operator>=(EnumerationItem lhs, const DeclassExceptionEnum& rhs) {
    testForValidItem(lhs);
    return lhs >= rhs.getValue();
  }

  /** Returns the name of the specified enumeration item.
    *
    * @param item The enumeration item whose name is to be returned.
    * @return The enumeration item's name if valid.
    */
  static std::string toName(EnumerationItem item) {
    ToNameTable::const_iterator iter = m_toNameTable.find(item);
    if (iter == m_toNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to convert enumerated item to its name, item not found in mapping: " << item;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Returns the enumeration item having the specified name.
    *
    * @param itemName The name of the enumeration item to be returned.
    * @return The enumeration item having the specified name.
    */
  static EnumerationItem fromName(const std::string& itemName) {
    FromNameTable::const_iterator iter = m_fromNameTable.find(itemName);
    if (iter == m_fromNameTable.end()) {
      std::ostringstream oStream;
      oStream << "Failed to return enumerated item having specified name, name not found in mapping: " << itemName;
      throw uci::base::UCIException(oStream.str(), 0);
    }

    return iter->second;
  }

  /** Return the name of the enumeration item that the value of this DeclassExceptionEnum enumeration is set to.
    *
    * @return The name of the enumeration item.
    */
  virtual std::string toName() const {
    return toName(getValue());
  }

  /** Sets the value of this DeclassExceptionEnum enumeration to the value of the enumeration item having the specified
    * name.
    *
    * @param itemName The name of the enumeration item whose value is to be used to set this DeclassExceptionEnum
    *      enumeration to.
    */
  virtual void setValueFromName(const std::string& itemName) {
    setValue(fromName(itemName));
  }

protected:

  /** The default constructor. In addition to constructing a new DeclassExceptionEnum, this constructor also makes sure the
    * conversion tables are initialized.
    */
  DeclassExceptionEnum() {
  }

  /** The destructor [only available to derived classes]. */
  ~DeclassExceptionEnum() {
  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param additionalDescription An additional description to include in the error message should an exception be thrown.
    * @param item The enumeration item to test.
    */
  static void testForValidItem(const char* additionalDescription, EnumerationItem item) {
    if (!isValid(item)) {
      std::ostringstream oStream;
      oStream << additionalDescription << ": " << item << " (item must be between " << enumNotSet << " and "<< enumMaxExclusive << " exclusive)";
      throw uci::base::UCIException(oStream.str(), 0);
    }

  }

  /** Tests that the specified enumeration item is valid or not, throwing an exception if the item is not valid.
    *
    * @param item The enumeration item to test.
    */
  static void testForValidItem(EnumerationItem item) {
    testForValidItem("Invalid enumerated item specified", item);
  }

private:

  /** The type of table that is used to lookup the name of a enumeration item given that enumeration item. */
  typedef std::map<EnumerationItem, const std::string> ToNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  typedef std::map<const std::string, EnumerationItem> FromNameTable;

  /** The table that is used to lookup the name of a enumeration item given that enumeration item. */
  static UCI_EXPORT ToNameTable m_toNameTable;

  /** The type of table that is used to lookup an enumeration item given its name. */
  static UCI_EXPORT FromNameTable m_fromNameTable;

protected:

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The DeclassExceptionEnum to copy from.
    */
  DeclassExceptionEnum(const DeclassExceptionEnum& rhs) {
    (void)rhs;
  }

};

} // namespace type
} // namespace uci

template<typename charT, typename traits>
std::basic_ostream<charT, traits>&
operator<<(std::basic_ostream<charT, traits>& oStream, const uci::type::DeclassExceptionEnum& enumeration)
{
  oStream << enumeration.toName();
  return oStream;
}

#endif // UCI_TYPE_DECLASSEXCEPTIONENUM_H

