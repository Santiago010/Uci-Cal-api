/** @file RoutePathType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ROUTEPATHTYPE_H
#define UCI_TYPE_ROUTEPATHTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/AirfieldID_Type.h"
#include "uci/type/PathID_Type.h"
#include "uci/type/PathSegmentType.h"
#include "uci/type/PathTypeEnum.h"
#include "uci/type/PlanningLocationType.h"
#include "uci/type/RemarksType.h"
#include "uci/type/RunwayID_Type.h"
#include "uci/type/SegmentID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class RoutePathType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RoutePathType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RoutePathType.
    */
  static UCI_EXPORT RoutePathType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RoutePathType initializing the data accessed by the new RoutePathType using the data
    * accessed by the specified RoutePathType (cloning).
    *
    * @param accessor The RoutePathType that provides access to the data that is to be used to initialize the data accessed
    *      by the new created RoutePathType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RoutePathType.
    */
  static UCI_EXPORT RoutePathType& create(const RoutePathType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RoutePathType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The RoutePathType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RoutePathType& accessor);

  /** Returns this accessor's type constant, i.e. routePathType.
    *
    * @return This accessor's type constant, i.e. routePathType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::routePathType;
  }

  /** Returns the version that was initialized from the uci:version attribute of RoutePathType.
    *
    * @return The version that was initialized from the uci:version attribute of RoutePathType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RoutePathType& accessor) = 0;

  /** A PathSegment is defined from the previous path segment EndPoint (or current vehicle state if no previous path
    * segment) to the current path segment EndPoint. Elements given here are not necessarily in mission/flight order; it is
    * necessary to follow the linkages provided in NextPathSegment and/or ConditionalPathSegment to traverse the segments
    * in mission/flight order. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PathSegmentType, uci::type::accessorType::pathSegmentType> PathSegment;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PathID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PathID.
    */
  virtual const uci::type::PathID_Type& getPathID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PathID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PathID.
    */
  virtual uci::type::PathID_Type& getPathID() = 0;

  /** Sets the complex content identified by PathID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PathID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePathType& setPathID(const uci::type::PathID_Type& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by PathType.
    *
    * @return A const reference to the value of the enumeration identified by PathType.
    */
  virtual const uci::type::PathTypeEnum& getPathType() const = 0;

  /** Returns a reference to the value of the enumeration identified by PathType.
    *
    * @return A reference to the value of the enumeration identified by PathType.
    */
  virtual uci::type::PathTypeEnum& getPathType() = 0;

  /** Sets the value of the enumeration identified by PathType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePathType& setPathType(const uci::type::PathTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by PathType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePathType& setPathType(uci::type::PathTypeEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * FirstInPathSegmentID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      FirstInPathSegmentID.
    */
  virtual const uci::type::SegmentID_Type& getFirstInPathSegmentID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by FirstInPathSegmentID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by FirstInPathSegmentID.
    */
  virtual uci::type::SegmentID_Type& getFirstInPathSegmentID() = 0;

  /** Sets the complex content identified by FirstInPathSegmentID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by FirstInPathSegmentID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePathType& setFirstInPathSegmentID(const uci::type::SegmentID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by PathSegment.
    *
    * @return A const reference to the bounded list identified by PathSegment.
    */
  virtual const uci::type::RoutePathType::PathSegment& getPathSegment() const = 0;

  /** Returns a reference to the bounded list identified by PathSegment.
    *
    * @return A reference to the bounded list identified by PathSegment.
    */
  virtual uci::type::RoutePathType::PathSegment& getPathSegment() = 0;

  /** Sets the bounded list identified by PathSegment.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePathType& setPathSegment(const uci::type::RoutePathType::PathSegment& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * InitialConditions.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      InitialConditions.
    */
  virtual const uci::type::PlanningLocationType& getInitialConditions() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by InitialConditions.
    *
    * @return A reference to the accessor that provides access to the complex content identified by InitialConditions.
    */
  virtual uci::type::PlanningLocationType& getInitialConditions() = 0;

  /** Sets the complex content identified by InitialConditions to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by InitialConditions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePathType& setInitialConditions(const uci::type::PlanningLocationType& value) = 0;

  /** Returns whether the Element identified by InitialConditions exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by InitialConditions is enabled or not.
    */
  virtual bool hasInitialConditions() const = 0;

  /** Enables the Element identified by InitialConditions.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by InitialConditions.
    */
  virtual uci::type::PlanningLocationType& enableInitialConditions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by InitialConditions.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePathType& clearInitialConditions() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AirfieldID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AirfieldID.
    */
  virtual const uci::type::AirfieldID_Type& getAirfieldID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AirfieldID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AirfieldID.
    */
  virtual uci::type::AirfieldID_Type& getAirfieldID() = 0;

  /** Sets the complex content identified by AirfieldID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AirfieldID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePathType& setAirfieldID(const uci::type::AirfieldID_Type& value) = 0;

  /** Returns whether the Element identified by AirfieldID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AirfieldID is enabled or not.
    */
  virtual bool hasAirfieldID() const = 0;

  /** Enables the Element identified by AirfieldID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AirfieldID.
    */
  virtual uci::type::AirfieldID_Type& enableAirfieldID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AirfieldID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePathType& clearAirfieldID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RunwayID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RunwayID.
    */
  virtual const uci::type::RunwayID_Type& getRunwayID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RunwayID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RunwayID.
    */
  virtual uci::type::RunwayID_Type& getRunwayID() = 0;

  /** Sets the complex content identified by RunwayID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RunwayID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePathType& setRunwayID(const uci::type::RunwayID_Type& value) = 0;

  /** Returns whether the Element identified by RunwayID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RunwayID is enabled or not.
    */
  virtual bool hasRunwayID() const = 0;

  /** Enables the Element identified by RunwayID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RunwayID.
    */
  virtual uci::type::RunwayID_Type& enableRunwayID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RunwayID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePathType& clearRunwayID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Remarks.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Remarks.
    */
  virtual const uci::type::RemarksType& getRemarks() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Remarks.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Remarks.
    */
  virtual uci::type::RemarksType& getRemarks() = 0;

  /** Sets the complex content identified by Remarks to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Remarks.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePathType& setRemarks(const uci::type::RemarksType& value) = 0;

  /** Returns whether the Element identified by Remarks exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Remarks is enabled or not.
    */
  virtual bool hasRemarks() const = 0;

  /** Enables the Element identified by Remarks.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Remarks.
    */
  virtual uci::type::RemarksType& enableRemarks(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Remarks.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RoutePathType& clearRemarks() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RoutePathType() {
  }

  /** The destructor [only available to derived classes]. */
  ~RoutePathType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RoutePathType to copy from.
    */
  RoutePathType(const RoutePathType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RoutePathType to the contents of the RoutePathType on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The RoutePathType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this RoutePathType.
    * @return A reference to this RoutePathType.
    */
  RoutePathType& operator=(const RoutePathType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ROUTEPATHTYPE_H

