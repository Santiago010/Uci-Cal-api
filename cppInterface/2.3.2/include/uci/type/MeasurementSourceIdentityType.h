/** @file MeasurementSourceIdentityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_MEASUREMENTSOURCEIDENTITYTYPE_H
#define UCI_TYPE_MEASUREMENTSOURCEIDENTITYTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/UnsignedShortAccessor.h"
#include "uci/base/export.h"
#include "uci/type/ActivityID_Type.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/SatelliteIdentifierType.h"
#include "uci/type/ServiceID_Type.h"
#include "uci/type/SubsystemID_Type.h"
#include "uci/type/SystemID_Type.h"
#include "uci/type/TaskID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class MeasurementSourceIdentityType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new MeasurementSourceIdentityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MeasurementSourceIdentityType.
    */
  static UCI_EXPORT MeasurementSourceIdentityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new MeasurementSourceIdentityType initializing the data accessed by the new
    * MeasurementSourceIdentityType using the data accessed by the specified MeasurementSourceIdentityType (cloning).
    *
    * @param accessor The MeasurementSourceIdentityType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created MeasurementSourceIdentityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MeasurementSourceIdentityType.
    */
  static UCI_EXPORT MeasurementSourceIdentityType& create(const MeasurementSourceIdentityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified MeasurementSourceIdentityType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The MeasurementSourceIdentityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(MeasurementSourceIdentityType& accessor);

  /** Returns this accessor's type constant, i.e. measurementSourceIdentityType.
    *
    * @return This accessor's type constant, i.e. measurementSourceIdentityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::measurementSourceIdentityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of MeasurementSourceIdentityType.
    *
    * @return The version that was initialized from the uci:version attribute of MeasurementSourceIdentityType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const MeasurementSourceIdentityType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CapabilityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CapabilityID.
    */
  virtual const uci::type::CapabilityID_Type& getCapabilityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CapabilityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityID.
    */
  virtual uci::type::CapabilityID_Type& getCapabilityID() = 0;

  /** Sets the complex content identified by CapabilityID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CapabilityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& setCapabilityID(const uci::type::CapabilityID_Type& value) = 0;

  /** Returns whether the Element identified by CapabilityID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CapabilityID is enabled or not.
    */
  virtual bool hasCapabilityID() const = 0;

  /** Enables the Element identified by CapabilityID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityID.
    */
  virtual uci::type::CapabilityID_Type& enableCapabilityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CapabilityID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& clearCapabilityID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by TaskID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual const uci::type::TaskID_Type& getTaskID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by TaskID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual uci::type::TaskID_Type& getTaskID() = 0;

  /** Sets the complex content identified by TaskID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TaskID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& setTaskID(const uci::type::TaskID_Type& value) = 0;

  /** Returns whether the Element identified by TaskID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TaskID is enabled or not.
    */
  virtual bool hasTaskID() const = 0;

  /** Enables the Element identified by TaskID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by TaskID.
    */
  virtual uci::type::TaskID_Type& enableTaskID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TaskID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& clearTaskID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ActivityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ActivityID.
    */
  virtual const uci::type::ActivityID_Type& getActivityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ActivityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ActivityID.
    */
  virtual uci::type::ActivityID_Type& getActivityID() = 0;

  /** Sets the complex content identified by ActivityID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ActivityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& setActivityID(const uci::type::ActivityID_Type& value) = 0;

  /** Returns whether the Element identified by ActivityID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActivityID is enabled or not.
    */
  virtual bool hasActivityID() const = 0;

  /** Enables the Element identified by ActivityID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ActivityID.
    */
  virtual uci::type::ActivityID_Type& enableActivityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ActivityID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& clearActivityID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual const uci::type::SystemID_Type& getSystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual uci::type::SystemID_Type& getSystemID() = 0;

  /** Sets the complex content identified by SystemID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& setSystemID(const uci::type::SystemID_Type& value) = 0;

  /** Returns whether the Element identified by SystemID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SystemID is enabled or not.
    */
  virtual bool hasSystemID() const = 0;

  /** Enables the Element identified by SystemID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SystemID.
    */
  virtual uci::type::SystemID_Type& enableSystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SystemID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& clearSystemID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ServiceID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ServiceID.
    */
  virtual const uci::type::ServiceID_Type& getServiceID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ServiceID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ServiceID.
    */
  virtual uci::type::ServiceID_Type& getServiceID() = 0;

  /** Sets the complex content identified by ServiceID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ServiceID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& setServiceID(const uci::type::ServiceID_Type& value) = 0;

  /** Returns whether the Element identified by ServiceID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ServiceID is enabled or not.
    */
  virtual bool hasServiceID() const = 0;

  /** Enables the Element identified by ServiceID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ServiceID.
    */
  virtual uci::type::ServiceID_Type& enableServiceID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ServiceID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& clearServiceID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SubsystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SubsystemID.
    */
  virtual const uci::type::SubsystemID_Type& getSubsystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SubsystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SubsystemID.
    */
  virtual uci::type::SubsystemID_Type& getSubsystemID() = 0;

  /** Sets the complex content identified by SubsystemID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SubsystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& setSubsystemID(const uci::type::SubsystemID_Type& value) = 0;

  /** Returns whether the Element identified by SubsystemID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SubsystemID is enabled or not.
    */
  virtual bool hasSubsystemID() const = 0;

  /** Enables the Element identified by SubsystemID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SubsystemID.
    */
  virtual uci::type::SubsystemID_Type& enableSubsystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SubsystemID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& clearSubsystemID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EntityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EntityID.
    */
  virtual const uci::type::EntityID_Type& getEntityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EntityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EntityID.
    */
  virtual uci::type::EntityID_Type& getEntityID() = 0;

  /** Sets the complex content identified by EntityID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EntityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& setEntityID(const uci::type::EntityID_Type& value) = 0;

  /** Returns whether the Element identified by EntityID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EntityID is enabled or not.
    */
  virtual bool hasEntityID() const = 0;

  /** Enables the Element identified by EntityID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EntityID.
    */
  virtual uci::type::EntityID_Type& enableEntityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EntityID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& clearEntityID() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SensorSystemIdentity.
    *
    * @return The value of the simple primitive data type identified by SensorSystemIdentity.
    */
  virtual xs::UnsignedShort getSensorSystemIdentity() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SensorSystemIdentity.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& setSensorSystemIdentity(xs::UnsignedShort value) = 0;

  /** Returns whether the Element identified by SensorSystemIdentity exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SensorSystemIdentity is enabled or not.
    */
  virtual bool hasSensorSystemIdentity() const = 0;

  /** Clears (disabled) the Element identified by SensorSystemIdentity.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& clearSensorSystemIdentity() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Satellite.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Satellite.
    */
  virtual const uci::type::SatelliteIdentifierType& getSatellite() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Satellite.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Satellite.
    */
  virtual uci::type::SatelliteIdentifierType& getSatellite() = 0;

  /** Sets the complex content identified by Satellite to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Satellite.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& setSatellite(const uci::type::SatelliteIdentifierType& value) = 0;

  /** Returns whether the Element identified by Satellite exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Satellite is enabled or not.
    */
  virtual bool hasSatellite() const = 0;

  /** Enables the Element identified by Satellite.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Satellite.
    */
  virtual uci::type::SatelliteIdentifierType& enableSatellite(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Satellite.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MeasurementSourceIdentityType& clearSatellite() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  MeasurementSourceIdentityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~MeasurementSourceIdentityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The MeasurementSourceIdentityType to copy from.
    */
  MeasurementSourceIdentityType(const MeasurementSourceIdentityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this MeasurementSourceIdentityType to the contents of the
    * MeasurementSourceIdentityType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The MeasurementSourceIdentityType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this MeasurementSourceIdentityType.
    * @return A reference to this MeasurementSourceIdentityType.
    */
  MeasurementSourceIdentityType& operator=(const MeasurementSourceIdentityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_MEASUREMENTSOURCEIDENTITYTYPE_H

