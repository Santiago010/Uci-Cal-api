/** @file COMINT_DataCollectCommandType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMINT_DATACOLLECTCOMMANDTYPE_H
#define UCI_TYPE_COMINT_DATACOLLECTCOMMANDTYPE_H

#include "../base/Accessor.h"
#include "../base/FloatAccessor.h"
#include "../base/IntAccessor.h"
#include "../base/UnsignedIntAccessor.h"
#include "../base/export.h"
#include "COMINT_InteractiveType.h"
#include "CollectionFrequencyType.h"
#include "DateTimeType.h"
#include "DurationType.h"
#include "FrequencyRangeType.h"
#include "ModulationEnum.h"
#include "SignalTypeEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class COMINT_DataCollectCommandType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new COMINT_DataCollectCommandType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed COMINT_DataCollectCommandType.
    */
  static UCI_EXPORT COMINT_DataCollectCommandType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new COMINT_DataCollectCommandType initializing the data accessed by the new
    * COMINT_DataCollectCommandType using the data accessed by the specified COMINT_DataCollectCommandType (cloning).
    *
    * @param accessor The COMINT_DataCollectCommandType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created COMINT_DataCollectCommandType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed COMINT_DataCollectCommandType.
    */
  static UCI_EXPORT COMINT_DataCollectCommandType& create(const COMINT_DataCollectCommandType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified COMINT_DataCollectCommandType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The COMINT_DataCollectCommandType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(COMINT_DataCollectCommandType& accessor);

  /** Returns this accessor's type constant, i.e. cOMINT_DataCollectCommandType.
    *
    * @return This accessor's type constant, i.e. cOMINT_DataCollectCommandType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::cOMINT_DataCollectCommandType;
  }

  /** Returns the version that was initialized from the uci:version attribute of COMINT_DataCollectCommandType.
    *
    * @return The version that was initialized from the uci:version attribute of COMINT_DataCollectCommandType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.002.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const COMINT_DataCollectCommandType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CollectionFrequency.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CollectionFrequency.
    */
  virtual const uci::type::CollectionFrequencyType& getCollectionFrequency() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CollectionFrequency.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CollectionFrequency.
    */
  virtual uci::type::CollectionFrequencyType& getCollectionFrequency() = 0;

  /** Sets the complex content identified by CollectionFrequency to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionFrequency.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& setCollectionFrequency(const uci::type::CollectionFrequencyType& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by StartTime.
    *
    * @return The value of the simple primitive data type identified by StartTime.
    */
  virtual uci::type::DateTimeTypeValue getStartTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by StartTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& setStartTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by DwellDuration.
    *
    * @return The value of the simple primitive data type identified by DwellDuration.
    */
  virtual uci::type::DurationTypeValue getDwellDuration() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by DwellDuration.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& setDwellDuration(uci::type::DurationTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Dwells.
    *
    * @return The value of the simple primitive data type identified by Dwells.
    */
  virtual xs::UnsignedInt getDwells() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Dwells.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& setDwells(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by Dwells exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Dwells is enabled or not.
    */
  virtual bool hasDwells() const = 0;

  /** Clears (disabled) the Element identified by Dwells.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& clearDwells() = 0;

  /** Returns the value of the SimplePrimitive data type identified by RepetitionInterval.
    *
    * @return The value of the simple primitive data type identified by RepetitionInterval.
    */
  virtual uci::type::DurationTypeValue getRepetitionInterval() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RepetitionInterval.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& setRepetitionInterval(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by RepetitionInterval exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RepetitionInterval is enabled or not.
    */
  virtual bool hasRepetitionInterval() const = 0;

  /** Clears (disabled) the Element identified by RepetitionInterval.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& clearRepetitionInterval() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SignalBandwidth.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SignalBandwidth.
    */
  virtual const uci::type::FrequencyRangeType& getSignalBandwidth() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SignalBandwidth.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SignalBandwidth.
    */
  virtual uci::type::FrequencyRangeType& getSignalBandwidth() = 0;

  /** Sets the complex content identified by SignalBandwidth to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SignalBandwidth.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& setSignalBandwidth(const uci::type::FrequencyRangeType& value) = 0;

  /** Returns whether the Element identified by SignalBandwidth exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SignalBandwidth is enabled or not.
    */
  virtual bool hasSignalBandwidth() const = 0;

  /** Enables the Element identified by SignalBandwidth.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SignalBandwidth.
    */
  virtual uci::type::FrequencyRangeType& enableSignalBandwidth(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SignalBandwidth.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& clearSignalBandwidth() = 0;

  /** Returns a const reference to the value of the enumeration identified by Modulation.
    *
    * @return A const reference to the value of the enumeration identified by Modulation.
    */
  virtual const uci::type::ModulationEnum& getModulation() const = 0;

  /** Returns a reference to the value of the enumeration identified by Modulation.
    *
    * @return A reference to the value of the enumeration identified by Modulation.
    */
  virtual uci::type::ModulationEnum& getModulation() = 0;

  /** Sets the value of the enumeration identified by Modulation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& setModulation(const uci::type::ModulationEnum& value) = 0;

  /** Sets the value of the enumeration identified by Modulation.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& setModulation(uci::type::ModulationEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Modulation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Modulation is enabled or not.
    */
  virtual bool hasModulation() const = 0;

  /** Enables the Element identified by Modulation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Modulation.
    */
  virtual uci::type::ModulationEnum& enableModulation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Modulation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& clearModulation() = 0;

  /** Returns a const reference to the value of the enumeration identified by DataCollectType.
    *
    * @return A const reference to the value of the enumeration identified by DataCollectType.
    */
  virtual const uci::type::SignalTypeEnum& getDataCollectType() const = 0;

  /** Returns a reference to the value of the enumeration identified by DataCollectType.
    *
    * @return A reference to the value of the enumeration identified by DataCollectType.
    */
  virtual uci::type::SignalTypeEnum& getDataCollectType() = 0;

  /** Sets the value of the enumeration identified by DataCollectType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& setDataCollectType(const uci::type::SignalTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by DataCollectType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& setDataCollectType(uci::type::SignalTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by DataCollectType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DataCollectType is enabled or not.
    */
  virtual bool hasDataCollectType() const = 0;

  /** Enables the Element identified by DataCollectType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by DataCollectType.
    */
  virtual uci::type::SignalTypeEnum& enableDataCollectType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DataCollectType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& clearDataCollectType() = 0;

  /** Returns the value of the SimplePrimitive data type identified by SampleRate.
    *
    * @return The value of the simple primitive data type identified by SampleRate.
    */
  virtual xs::Float getSampleRate() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by SampleRate.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& setSampleRate(xs::Float value) = 0;

  /** Returns whether the Element identified by SampleRate exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SampleRate is enabled or not.
    */
  virtual bool hasSampleRate() const = 0;

  /** Clears (disabled) the Element identified by SampleRate.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& clearSampleRate() = 0;

  /** Returns the value of the SimplePrimitive data type identified by FFT_PointsPerSample.
    *
    * @return The value of the simple primitive data type identified by FFT_PointsPerSample.
    */
  virtual xs::Int getFFT_PointsPerSample() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by FFT_PointsPerSample.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& setFFT_PointsPerSample(xs::Int value) = 0;

  /** Returns whether the Element identified by FFT_PointsPerSample exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by FFT_PointsPerSample is enabled or not.
    */
  virtual bool hasFFT_PointsPerSample() const = 0;

  /** Clears (disabled) the Element identified by FFT_PointsPerSample.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& clearFFT_PointsPerSample() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * COMINT_Interactive.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      COMINT_Interactive.
    */
  virtual const uci::type::COMINT_InteractiveType& getCOMINT_Interactive() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by COMINT_Interactive.
    *
    * @return A reference to the accessor that provides access to the complex content identified by COMINT_Interactive.
    */
  virtual uci::type::COMINT_InteractiveType& getCOMINT_Interactive() = 0;

  /** Sets the complex content identified by COMINT_Interactive to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by COMINT_Interactive.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& setCOMINT_Interactive(const uci::type::COMINT_InteractiveType& value) = 0;

  /** Returns whether the Element identified by COMINT_Interactive exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by COMINT_Interactive is enabled or not.
    */
  virtual bool hasCOMINT_Interactive() const = 0;

  /** Enables the Element identified by COMINT_Interactive.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by COMINT_Interactive.
    */
  virtual uci::type::COMINT_InteractiveType& enableCOMINT_Interactive(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by COMINT_Interactive.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::COMINT_DataCollectCommandType& clearCOMINT_Interactive() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  COMINT_DataCollectCommandType() {
  }

  /** The destructor [only available to derived classes]. */
  ~COMINT_DataCollectCommandType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The COMINT_DataCollectCommandType to copy from.
    */
  COMINT_DataCollectCommandType(const COMINT_DataCollectCommandType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this COMINT_DataCollectCommandType to the contents of the
    * COMINT_DataCollectCommandType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The COMINT_DataCollectCommandType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this COMINT_DataCollectCommandType.
    * @return A reference to this COMINT_DataCollectCommandType.
    */
  COMINT_DataCollectCommandType& operator=(const COMINT_DataCollectCommandType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMINT_DATACOLLECTCOMMANDTYPE_H

