/** @file OperatorAnnotationMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OPERATORANNOTATIONMDT_H
#define UCI_TYPE_OPERATORANNOTATIONMDT_H

#include "../base/BoundedList.h"
#include "../base/export.h"
#include "DataRecordBaseType.h"
#include "DateTimeType.h"
#include "ID_Type.h"
#include "OperatorAnnotationID_Type.h"
#include "ServiceID_Type.h"
#include "VisibleString1024Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class OperatorAnnotationMDT : public virtual DataRecordBaseType {
public:

  /** This method constructs a new OperatorAnnotationMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OperatorAnnotationMDT.
    */
  static UCI_EXPORT OperatorAnnotationMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OperatorAnnotationMDT initializing the data accessed by the new OperatorAnnotationMDT
    * using the data accessed by the specified OperatorAnnotationMDT (cloning).
    *
    * @param accessor The OperatorAnnotationMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created OperatorAnnotationMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OperatorAnnotationMDT.
    */
  static UCI_EXPORT OperatorAnnotationMDT& create(const OperatorAnnotationMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OperatorAnnotationMDT. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The OperatorAnnotationMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OperatorAnnotationMDT& accessor);

  /** Returns this accessor's type constant, i.e. operatorAnnotationMDT.
    *
    * @return This accessor's type constant, i.e. operatorAnnotationMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::operatorAnnotationMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of OperatorAnnotationMDT.
    *
    * @return The version that was initialized from the uci:version attribute of OperatorAnnotationMDT.
    */
  static std::string getUCITypeVersion() {
    return "000.001.000.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OperatorAnnotationMDT& accessor) = 0;

  /** The specific object instance or instances with which the annotation is associated. For Entity message types, this
    * field would be populated with entity IDs. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ID_Type, uci::type::accessorType::iD_Type> ObjectID;

  /** Annotation notes and text. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::VisibleString1024Type, uci::type::accessorType::visibleString1024Type> AnnotationText;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OperatorAnnotationID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OperatorAnnotationID.
    */
  virtual const uci::type::OperatorAnnotationID_Type& getOperatorAnnotationID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OperatorAnnotationID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OperatorAnnotationID.
    */
  virtual uci::type::OperatorAnnotationID_Type& getOperatorAnnotationID() = 0;

  /** Sets the complex content identified by OperatorAnnotationID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OperatorAnnotationID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorAnnotationMDT& setOperatorAnnotationID(const uci::type::OperatorAnnotationID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ServiceID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ServiceID.
    */
  virtual const uci::type::ServiceID_Type& getServiceID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ServiceID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ServiceID.
    */
  virtual uci::type::ServiceID_Type& getServiceID() = 0;

  /** Sets the complex content identified by ServiceID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ServiceID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorAnnotationMDT& setServiceID(const uci::type::ServiceID_Type& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by TimestampForAnnotation.
    *
    * @return The value of the simple primitive data type identified by TimestampForAnnotation.
    */
  virtual uci::type::DateTimeTypeValue getTimestampForAnnotation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TimestampForAnnotation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorAnnotationMDT& setTimestampForAnnotation(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by TimestampForAnnotation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TimestampForAnnotation is enabled or not.
    */
  virtual bool hasTimestampForAnnotation() const = 0;

  /** Clears (disabled) the Element identified by TimestampForAnnotation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorAnnotationMDT& clearTimestampForAnnotation() = 0;

  /** Returns a const reference to the bounded list identified by ObjectID.
    *
    * @return A const reference to the bounded list identified by ObjectID.
    */
  virtual const uci::type::OperatorAnnotationMDT::ObjectID& getObjectID() const = 0;

  /** Returns a reference to the bounded list identified by ObjectID.
    *
    * @return A reference to the bounded list identified by ObjectID.
    */
  virtual uci::type::OperatorAnnotationMDT::ObjectID& getObjectID() = 0;

  /** Sets the bounded list identified by ObjectID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorAnnotationMDT& setObjectID(const uci::type::OperatorAnnotationMDT::ObjectID& value) = 0;

  /** Returns a const reference to the bounded list identified by AnnotationText.
    *
    * @return A const reference to the bounded list identified by AnnotationText.
    */
  virtual const uci::type::OperatorAnnotationMDT::AnnotationText& getAnnotationText() const = 0;

  /** Returns a reference to the bounded list identified by AnnotationText.
    *
    * @return A reference to the bounded list identified by AnnotationText.
    */
  virtual uci::type::OperatorAnnotationMDT::AnnotationText& getAnnotationText() = 0;

  /** Sets the bounded list identified by AnnotationText.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OperatorAnnotationMDT& setAnnotationText(const uci::type::OperatorAnnotationMDT::AnnotationText& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OperatorAnnotationMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~OperatorAnnotationMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OperatorAnnotationMDT to copy from.
    */
  OperatorAnnotationMDT(const OperatorAnnotationMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OperatorAnnotationMDT to the contents of the OperatorAnnotationMDT
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OperatorAnnotationMDT on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this OperatorAnnotationMDT.
    * @return A reference to this OperatorAnnotationMDT.
    */
  OperatorAnnotationMDT& operator=(const OperatorAnnotationMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_OPERATORANNOTATIONMDT_H

