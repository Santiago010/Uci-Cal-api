/** @file SAR_ProcessingParametersType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SAR_PROCESSINGPARAMETERSTYPE_H
#define UCI_TYPE_SAR_PROCESSINGPARAMETERSTYPE_H

#include "uci/base/export.h"
#include "uci/type/ImageRegionOfInterestPET.h"
#include "uci/type/ImageRemapEnum.h"
#include "uci/type/ImageWeightEnum.h"
#include "uci/type/ProcessingParametersPET.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This is a polymorphic extension which allows for the extension of the base ProcessingParametersPET. It represents the
  * base processing parameters needed for SAR processing. Specific algorithms will have an extended type for additional
  * parameters. Available extension types include: SAR_AutomaticTargetDetectionParametersType,
  * SAR_CoherentChangeDetectionParametersType, SAR_DynamicImageParametersType, SAR_TwoColorMultiViewParametersType.
  */
class SAR_ProcessingParametersType : public virtual ProcessingParametersPET {
public:

  /** This method constructs a new SAR_ProcessingParametersType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SAR_ProcessingParametersType.
    */
  static UCI_EXPORT SAR_ProcessingParametersType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SAR_ProcessingParametersType initializing the data accessed by the new
    * SAR_ProcessingParametersType using the data accessed by the specified SAR_ProcessingParametersType (cloning).
    *
    * @param accessor The SAR_ProcessingParametersType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created SAR_ProcessingParametersType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SAR_ProcessingParametersType.
    */
  static UCI_EXPORT SAR_ProcessingParametersType& create(const SAR_ProcessingParametersType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SAR_ProcessingParametersType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The SAR_ProcessingParametersType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SAR_ProcessingParametersType& accessor);

  /** Returns this accessor's type constant, i.e. sAR_ProcessingParametersType.
    *
    * @return This accessor's type constant, i.e. sAR_ProcessingParametersType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sAR_ProcessingParametersType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SAR_ProcessingParametersType.
    *
    * @return The version that was initialized from the uci:version attribute of SAR_ProcessingParametersType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SAR_ProcessingParametersType& accessor) = 0;

  /** Returns a const reference to the value of the enumeration identified by Weight.
    *
    * @return A const reference to the value of the enumeration identified by Weight.
    */
  virtual const uci::type::ImageWeightEnum& getWeight() const = 0;

  /** Returns a reference to the value of the enumeration identified by Weight.
    *
    * @return A reference to the value of the enumeration identified by Weight.
    */
  virtual uci::type::ImageWeightEnum& getWeight() = 0;

  /** Sets the value of the enumeration identified by Weight.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ProcessingParametersType& setWeight(const uci::type::ImageWeightEnum& value) = 0;

  /** Sets the value of the enumeration identified by Weight.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ProcessingParametersType& setWeight(uci::type::ImageWeightEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Weight exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Weight is enabled or not.
    */
  virtual bool hasWeight() const = 0;

  /** Enables the Element identified by Weight.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Weight.
    */
  virtual uci::type::ImageWeightEnum& enableWeight(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Weight.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ProcessingParametersType& clearWeight() = 0;

  /** Returns a const reference to the value of the enumeration identified by Remap.
    *
    * @return A const reference to the value of the enumeration identified by Remap.
    */
  virtual const uci::type::ImageRemapEnum& getRemap() const = 0;

  /** Returns a reference to the value of the enumeration identified by Remap.
    *
    * @return A reference to the value of the enumeration identified by Remap.
    */
  virtual uci::type::ImageRemapEnum& getRemap() = 0;

  /** Sets the value of the enumeration identified by Remap.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ProcessingParametersType& setRemap(const uci::type::ImageRemapEnum& value) = 0;

  /** Sets the value of the enumeration identified by Remap.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ProcessingParametersType& setRemap(uci::type::ImageRemapEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Remap exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Remap is enabled or not.
    */
  virtual bool hasRemap() const = 0;

  /** Enables the Element identified by Remap.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Remap.
    */
  virtual uci::type::ImageRemapEnum& enableRemap(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Remap.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ProcessingParametersType& clearRemap() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RegionOfInterest.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RegionOfInterest.
    */
  virtual const uci::type::ImageRegionOfInterestPET& getRegionOfInterest() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RegionOfInterest.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RegionOfInterest.
    */
  virtual uci::type::ImageRegionOfInterestPET& getRegionOfInterest() = 0;

  /** Sets the complex content identified by RegionOfInterest to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RegionOfInterest.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ProcessingParametersType& setRegionOfInterest(const uci::type::ImageRegionOfInterestPET& value) = 0;

  /** Returns whether the Element identified by RegionOfInterest exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RegionOfInterest is enabled or not.
    */
  virtual bool hasRegionOfInterest() const = 0;

  /** Enables the Element identified by RegionOfInterest.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RegionOfInterest.
    */
  virtual uci::type::ImageRegionOfInterestPET& enableRegionOfInterest(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RegionOfInterest.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_ProcessingParametersType& clearRegionOfInterest() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SAR_ProcessingParametersType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SAR_ProcessingParametersType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SAR_ProcessingParametersType to copy from.
    */
  SAR_ProcessingParametersType(const SAR_ProcessingParametersType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SAR_ProcessingParametersType to the contents of the
    * SAR_ProcessingParametersType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The SAR_ProcessingParametersType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this SAR_ProcessingParametersType.
    * @return A reference to this SAR_ProcessingParametersType.
    */
  SAR_ProcessingParametersType& operator=(const SAR_ProcessingParametersType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SAR_PROCESSINGPARAMETERSTYPE_H

