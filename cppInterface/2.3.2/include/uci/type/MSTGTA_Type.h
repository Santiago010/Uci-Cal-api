/** @file MSTGTA_Type.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_MSTGTA_TYPE_H
#define UCI_TYPE_MSTGTA_TYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/MSTGTA_TGT_CAT_String_Type.h"
#include "uci/type/MSTGTA_TGT_UTC_Type.h"
#include "uci/type/NumericSpaceString13OnlyType.h"
#include "uci/type/NumericSpaceString2OnlyType.h"
#include "uci/type/NumericSpaceString4OnlyType.h"
#include "uci/type/NumericSpaceString6OnlyType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class MSTGTA_Type : public virtual uci::base::Accessor {
public:

  /** This method constructs a new MSTGTA_Type.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MSTGTA_Type.
    */
  static UCI_EXPORT MSTGTA_Type& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new MSTGTA_Type initializing the data accessed by the new MSTGTA_Type using the data
    * accessed by the specified MSTGTA_Type (cloning).
    *
    * @param accessor The MSTGTA_Type that provides access to the data that is to be used to initialize the data accessed
    *      by the new created MSTGTA_Type.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MSTGTA_Type.
    */
  static UCI_EXPORT MSTGTA_Type& create(const MSTGTA_Type& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified MSTGTA_Type. Use of the specified accessor after it has been destroyed will result
    * in undefined behavior.
    *
    * @param accessor The MSTGTA_Type that is to be destroyed.
    */
  static UCI_EXPORT void destroy(MSTGTA_Type& accessor);

  /** Returns this accessor's type constant, i.e. mSTGTA_Type.
    *
    * @return This accessor's type constant, i.e. mSTGTA_Type.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::mSTGTA_Type;
  }

  /** Returns the version that was initialized from the uci:version attribute of MSTGTA_Type.
    *
    * @return The version that was initialized from the uci:version attribute of MSTGTA_Type.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const MSTGTA_Type& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by TGT_NUM.
    *
    * @return A const reference to the accessor that provides access to the string identified by TGT_NUM.
    */
  virtual const uci::type::NumericSpaceString6OnlyType& getTGT_NUM() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by TGT_NUM.
    *
    * @return A reference to the accessor that provides access to the string identified by TGT_NUM.
    */
  virtual uci::type::NumericSpaceString6OnlyType& getTGT_NUM() = 0;

  /** Sets the string identified by TGT_NUM to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by TGT_NUM.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_NUM(const uci::type::NumericSpaceString6OnlyType& value) = 0;

  /** Sets the string identified by TGT_NUM to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_NUM(const std::string& value) = 0;

  /** Sets the string identified by TGT_NUM to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_NUM(const char* value) = 0;

  /** Returns whether the Element identified by TGT_NUM exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TGT_NUM is enabled or not.
    */
  virtual bool hasTGT_NUM() const = 0;

  /** Enables the Element identified by TGT_NUM.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by TGT_NUM.
    */
  virtual uci::type::NumericSpaceString6OnlyType& enableTGT_NUM(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TGT_NUM.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& clearTGT_NUM() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by TGT_PRI.
    *
    * @return A const reference to the accessor that provides access to the string identified by TGT_PRI.
    */
  virtual const uci::type::NumericSpaceString4OnlyType& getTGT_PRI() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by TGT_PRI.
    *
    * @return A reference to the accessor that provides access to the string identified by TGT_PRI.
    */
  virtual uci::type::NumericSpaceString4OnlyType& getTGT_PRI() = 0;

  /** Sets the string identified by TGT_PRI to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by TGT_PRI.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_PRI(const uci::type::NumericSpaceString4OnlyType& value) = 0;

  /** Sets the string identified by TGT_PRI to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_PRI(const std::string& value) = 0;

  /** Sets the string identified by TGT_PRI to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_PRI(const char* value) = 0;

  /** Returns whether the Element identified by TGT_PRI exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TGT_PRI is enabled or not.
    */
  virtual bool hasTGT_PRI() const = 0;

  /** Enables the Element identified by TGT_PRI.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by TGT_PRI.
    */
  virtual uci::type::NumericSpaceString4OnlyType& enableTGT_PRI(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TGT_PRI.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& clearTGT_PRI() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by TGT_LTIOV.
    *
    * @return A const reference to the accessor that provides access to the string identified by TGT_LTIOV.
    */
  virtual const uci::type::NumericSpaceString13OnlyType& getTGT_LTIOV() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by TGT_LTIOV.
    *
    * @return A reference to the accessor that provides access to the string identified by TGT_LTIOV.
    */
  virtual uci::type::NumericSpaceString13OnlyType& getTGT_LTIOV() = 0;

  /** Sets the string identified by TGT_LTIOV to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by TGT_LTIOV.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_LTIOV(const uci::type::NumericSpaceString13OnlyType& value) = 0;

  /** Sets the string identified by TGT_LTIOV to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_LTIOV(const std::string& value) = 0;

  /** Sets the string identified by TGT_LTIOV to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_LTIOV(const char* value) = 0;

  /** Returns whether the Element identified by TGT_LTIOV exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TGT_LTIOV is enabled or not.
    */
  virtual bool hasTGT_LTIOV() const = 0;

  /** Enables the Element identified by TGT_LTIOV.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by TGT_LTIOV.
    */
  virtual uci::type::NumericSpaceString13OnlyType& enableTGT_LTIOV(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TGT_LTIOV.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& clearTGT_LTIOV() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by TGT_COLL.
    *
    * @return A const reference to the accessor that provides access to the string identified by TGT_COLL.
    */
  virtual const uci::type::NumericSpaceString2OnlyType& getTGT_COLL() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by TGT_COLL.
    *
    * @return A reference to the accessor that provides access to the string identified by TGT_COLL.
    */
  virtual uci::type::NumericSpaceString2OnlyType& getTGT_COLL() = 0;

  /** Sets the string identified by TGT_COLL to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by TGT_COLL.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_COLL(const uci::type::NumericSpaceString2OnlyType& value) = 0;

  /** Sets the string identified by TGT_COLL to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_COLL(const std::string& value) = 0;

  /** Sets the string identified by TGT_COLL to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_COLL(const char* value) = 0;

  /** Returns whether the Element identified by TGT_COLL exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TGT_COLL is enabled or not.
    */
  virtual bool hasTGT_COLL() const = 0;

  /** Enables the Element identified by TGT_COLL.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by TGT_COLL.
    */
  virtual uci::type::NumericSpaceString2OnlyType& enableTGT_COLL(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TGT_COLL.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& clearTGT_COLL() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by TGT_CAT.
    *
    * @return A const reference to the accessor that provides access to the string identified by TGT_CAT.
    */
  virtual const uci::type::MSTGTA_TGT_CAT_String_Type& getTGT_CAT() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by TGT_CAT.
    *
    * @return A reference to the accessor that provides access to the string identified by TGT_CAT.
    */
  virtual uci::type::MSTGTA_TGT_CAT_String_Type& getTGT_CAT() = 0;

  /** Sets the string identified by TGT_CAT to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by TGT_CAT.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_CAT(const uci::type::MSTGTA_TGT_CAT_String_Type& value) = 0;

  /** Sets the string identified by TGT_CAT to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_CAT(const std::string& value) = 0;

  /** Sets the string identified by TGT_CAT to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_CAT(const char* value) = 0;

  /** Returns whether the Element identified by TGT_CAT exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TGT_CAT is enabled or not.
    */
  virtual bool hasTGT_CAT() const = 0;

  /** Enables the Element identified by TGT_CAT.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by TGT_CAT.
    */
  virtual uci::type::MSTGTA_TGT_CAT_String_Type& enableTGT_CAT(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TGT_CAT.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& clearTGT_CAT() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by TGT_UTC.
    *
    * @return A const reference to the accessor that provides access to the string identified by TGT_UTC.
    */
  virtual const uci::type::MSTGTA_TGT_UTC_Type& getTGT_UTC() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by TGT_UTC.
    *
    * @return A reference to the accessor that provides access to the string identified by TGT_UTC.
    */
  virtual uci::type::MSTGTA_TGT_UTC_Type& getTGT_UTC() = 0;

  /** Sets the string identified by TGT_UTC to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by TGT_UTC.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_UTC(const uci::type::MSTGTA_TGT_UTC_Type& value) = 0;

  /** Sets the string identified by TGT_UTC to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_UTC(const std::string& value) = 0;

  /** Sets the string identified by TGT_UTC to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& setTGT_UTC(const char* value) = 0;

  /** Returns whether the Element identified by TGT_UTC exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TGT_UTC is enabled or not.
    */
  virtual bool hasTGT_UTC() const = 0;

  /** Enables the Element identified by TGT_UTC.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by TGT_UTC.
    */
  virtual uci::type::MSTGTA_TGT_UTC_Type& enableTGT_UTC(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TGT_UTC.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MSTGTA_Type& clearTGT_UTC() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  MSTGTA_Type() {
  }

  /** The destructor [only available to derived classes]. */
  ~MSTGTA_Type() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The MSTGTA_Type to copy from.
    */
  MSTGTA_Type(const MSTGTA_Type& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this MSTGTA_Type to the contents of the MSTGTA_Type on the right hand
    * side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The MSTGTA_Type on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this MSTGTA_Type.
    * @return A reference to this MSTGTA_Type.
    */
  MSTGTA_Type& operator=(const MSTGTA_Type& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_MSTGTA_TYPE_H

