/** @file CommUHF_SATCOM_CommWaveformActivityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_COMMUHF_SATCOM_COMMWAVEFORMACTIVITYTYPE_H
#define UCI_TYPE_COMMUHF_SATCOM_COMMWAVEFORMACTIVITYTYPE_H

#include "../base/BooleanAccessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CommRangeModeTypeEnum.h"
#include "CommSATCOM_ServiceTypeEnum.h"
#include "CommWaveformActivityPET.h"
#include "DurationType.h"
#include "ForeignKeyType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This is a polymorphic extension which allows for the extension of the base CommWaveformActivityPET for communication
  * UHF SATCOM parameters.
  */
class CommUHF_SATCOM_CommWaveformActivityType : public virtual CommWaveformActivityPET {
public:

  /** This method constructs a new CommUHF_SATCOM_CommWaveformActivityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommUHF_SATCOM_CommWaveformActivityType.
    */
  static UCI_EXPORT CommUHF_SATCOM_CommWaveformActivityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CommUHF_SATCOM_CommWaveformActivityType initializing the data accessed by the new
    * CommUHF_SATCOM_CommWaveformActivityType using the data accessed by the specified
    * CommUHF_SATCOM_CommWaveformActivityType (cloning).
    *
    * @param accessor The CommUHF_SATCOM_CommWaveformActivityType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created CommUHF_SATCOM_CommWaveformActivityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CommUHF_SATCOM_CommWaveformActivityType.
    */
  static UCI_EXPORT CommUHF_SATCOM_CommWaveformActivityType& create(const CommUHF_SATCOM_CommWaveformActivityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CommUHF_SATCOM_CommWaveformActivityType. Use of the specified accessor after it
    * has been destroyed will result in undefined behavior.
    *
    * @param accessor The CommUHF_SATCOM_CommWaveformActivityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CommUHF_SATCOM_CommWaveformActivityType& accessor);

  /** Returns this accessor's type constant, i.e. commUHF_SATCOM_CommWaveformActivityType.
    *
    * @return This accessor's type constant, i.e. commUHF_SATCOM_CommWaveformActivityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::commUHF_SATCOM_CommWaveformActivityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CommUHF_SATCOM_CommWaveformActivityType.
    *
    * @return The version that was initialized from the uci:version attribute of CommUHF_SATCOM_CommWaveformActivityType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CommUHF_SATCOM_CommWaveformActivityType& accessor) = 0;

  /** A set of terminal addresses associated with each I/O port. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType> GuardSlotKey;

  /** Returns the value of the SimplePrimitive data type identified by RangeDelay.
    *
    * @return The value of the simple primitive data type identified by RangeDelay.
    */
  virtual uci::type::DurationTypeValue getRangeDelay() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RangeDelay.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommUHF_SATCOM_CommWaveformActivityType& setRangeDelay(uci::type::DurationTypeValue value) = 0;

  /** Returns a const reference to the value of the enumeration identified by RangeMode.
    *
    * @return A const reference to the value of the enumeration identified by RangeMode.
    */
  virtual const uci::type::CommRangeModeTypeEnum& getRangeMode() const = 0;

  /** Returns a reference to the value of the enumeration identified by RangeMode.
    *
    * @return A reference to the value of the enumeration identified by RangeMode.
    */
  virtual uci::type::CommRangeModeTypeEnum& getRangeMode() = 0;

  /** Sets the value of the enumeration identified by RangeMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommUHF_SATCOM_CommWaveformActivityType& setRangeMode(const uci::type::CommRangeModeTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by RangeMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommUHF_SATCOM_CommWaveformActivityType& setRangeMode(uci::type::CommRangeModeTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by RangeMode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RangeMode is enabled or not.
    */
  virtual bool hasRangeMode() const = 0;

  /** Enables the Element identified by RangeMode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by RangeMode.
    */
  virtual uci::type::CommRangeModeTypeEnum& enableRangeMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RangeMode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommUHF_SATCOM_CommWaveformActivityType& clearRangeMode() = 0;

  /** Returns a const reference to the value of the enumeration identified by ServiceType.
    *
    * @return A const reference to the value of the enumeration identified by ServiceType.
    */
  virtual const uci::type::CommSATCOM_ServiceTypeEnum& getServiceType() const = 0;

  /** Returns a reference to the value of the enumeration identified by ServiceType.
    *
    * @return A reference to the value of the enumeration identified by ServiceType.
    */
  virtual uci::type::CommSATCOM_ServiceTypeEnum& getServiceType() = 0;

  /** Sets the value of the enumeration identified by ServiceType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommUHF_SATCOM_CommWaveformActivityType& setServiceType(const uci::type::CommSATCOM_ServiceTypeEnum& value) = 0;

  /** Sets the value of the enumeration identified by ServiceType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommUHF_SATCOM_CommWaveformActivityType& setServiceType(uci::type::CommSATCOM_ServiceTypeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by ServiceType exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ServiceType is enabled or not.
    */
  virtual bool hasServiceType() const = 0;

  /** Enables the Element identified by ServiceType.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by ServiceType.
    */
  virtual uci::type::CommSATCOM_ServiceTypeEnum& enableServiceType(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ServiceType.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommUHF_SATCOM_CommWaveformActivityType& clearServiceType() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ConfigurationCode.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ConfigurationCode.
    */
  virtual const uci::type::ForeignKeyType& getConfigurationCode() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ConfigurationCode.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ConfigurationCode.
    */
  virtual uci::type::ForeignKeyType& getConfigurationCode() = 0;

  /** Sets the complex content identified by ConfigurationCode to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ConfigurationCode.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommUHF_SATCOM_CommWaveformActivityType& setConfigurationCode(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by ConfigurationCode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ConfigurationCode is enabled or not.
    */
  virtual bool hasConfigurationCode() const = 0;

  /** Enables the Element identified by ConfigurationCode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ConfigurationCode.
    */
  virtual uci::type::ForeignKeyType& enableConfigurationCode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ConfigurationCode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommUHF_SATCOM_CommWaveformActivityType& clearConfigurationCode() = 0;

  /** Returns the value of the SimplePrimitive data type identified by OrderwireEncryption.
    *
    * @return The value of the simple primitive data type identified by OrderwireEncryption.
    */
  virtual xs::Boolean getOrderwireEncryption() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by OrderwireEncryption.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommUHF_SATCOM_CommWaveformActivityType& setOrderwireEncryption(xs::Boolean value) = 0;

  /** Returns whether the Element identified by OrderwireEncryption exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrderwireEncryption is enabled or not.
    */
  virtual bool hasOrderwireEncryption() const = 0;

  /** Clears (disabled) the Element identified by OrderwireEncryption.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommUHF_SATCOM_CommWaveformActivityType& clearOrderwireEncryption() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SatelliteKey.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SatelliteKey.
    */
  virtual const uci::type::ForeignKeyType& getSatelliteKey() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SatelliteKey.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SatelliteKey.
    */
  virtual uci::type::ForeignKeyType& getSatelliteKey() = 0;

  /** Sets the complex content identified by SatelliteKey to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SatelliteKey.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommUHF_SATCOM_CommWaveformActivityType& setSatelliteKey(const uci::type::ForeignKeyType& value) = 0;

  /** Returns whether the Element identified by SatelliteKey exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SatelliteKey is enabled or not.
    */
  virtual bool hasSatelliteKey() const = 0;

  /** Enables the Element identified by SatelliteKey.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SatelliteKey.
    */
  virtual uci::type::ForeignKeyType& enableSatelliteKey(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SatelliteKey.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommUHF_SATCOM_CommWaveformActivityType& clearSatelliteKey() = 0;

  /** Returns a const reference to the bounded list identified by GuardSlotKey.
    *
    * @return A const reference to the bounded list identified by GuardSlotKey.
    */
  virtual const uci::type::CommUHF_SATCOM_CommWaveformActivityType::GuardSlotKey& getGuardSlotKey() const = 0;

  /** Returns a reference to the bounded list identified by GuardSlotKey.
    *
    * @return A reference to the bounded list identified by GuardSlotKey.
    */
  virtual uci::type::CommUHF_SATCOM_CommWaveformActivityType::GuardSlotKey& getGuardSlotKey() = 0;

  /** Sets the bounded list identified by GuardSlotKey.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CommUHF_SATCOM_CommWaveformActivityType& setGuardSlotKey(const uci::type::CommUHF_SATCOM_CommWaveformActivityType::GuardSlotKey& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CommUHF_SATCOM_CommWaveformActivityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CommUHF_SATCOM_CommWaveformActivityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CommUHF_SATCOM_CommWaveformActivityType to copy from.
    */
  CommUHF_SATCOM_CommWaveformActivityType(const CommUHF_SATCOM_CommWaveformActivityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CommUHF_SATCOM_CommWaveformActivityType to the contents of the
    * CommUHF_SATCOM_CommWaveformActivityType on the right hand side (rhs) of the assignment operator [only available to
    * derived classes].
    *
    * @param rhs The CommUHF_SATCOM_CommWaveformActivityType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this CommUHF_SATCOM_CommWaveformActivityType.
    * @return A reference to this CommUHF_SATCOM_CommWaveformActivityType.
    */
  CommUHF_SATCOM_CommWaveformActivityType& operator=(const CommUHF_SATCOM_CommWaveformActivityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_COMMUHF_SATCOM_COMMWAVEFORMACTIVITYTYPE_H

