/** @file RequirementTemplateOptionsType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_REQUIREMENTTEMPLATEOPTIONSTYPE_H
#define UCI_TYPE_REQUIREMENTTEMPLATEOPTIONSTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/UnsignedIntAccessor.h"
#include "../base/export.h"
#include "CollectionObjectiveEnum.h"
#include "DurationType.h"
#include "RequirementGenerationDependencyType.h"
#include "RequirementTemplateOptionType.h"
#include "VisibleString256Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class RequirementTemplateOptionsType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new RequirementTemplateOptionsType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RequirementTemplateOptionsType.
    */
  static UCI_EXPORT RequirementTemplateOptionsType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new RequirementTemplateOptionsType initializing the data accessed by the new
    * RequirementTemplateOptionsType using the data accessed by the specified RequirementTemplateOptionsType (cloning).
    *
    * @param accessor The RequirementTemplateOptionsType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created RequirementTemplateOptionsType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed RequirementTemplateOptionsType.
    */
  static UCI_EXPORT RequirementTemplateOptionsType& create(const RequirementTemplateOptionsType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified RequirementTemplateOptionsType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The RequirementTemplateOptionsType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(RequirementTemplateOptionsType& accessor);

  /** Returns this accessor's type constant, i.e. requirementTemplateOptionsType.
    *
    * @return This accessor's type constant, i.e. requirementTemplateOptionsType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::requirementTemplateOptionsType;
  }

  /** Returns the version that was initialized from the uci:version attribute of RequirementTemplateOptionsType.
    *
    * @return The version that was initialized from the uci:version attribute of RequirementTemplateOptionsType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const RequirementTemplateOptionsType& accessor) = 0;

  /** Indicates a potential Requirement to update or generate. When multiple Requirements are given, only one should be
    * updated/generated. It could be chosen based on 1) the child RequirementOptionIndex (indicating relative priority
    * between options), 2) The Capabilities of the System or Systems available to execute the Requirement or other
    * considerations. [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RequirementTemplateOptionType, uci::type::accessorType::requirementTemplateOptionType> RequirementOption;

  /** Indicates a temporal dependency to include when generating or updating the Requirement selected from the sibling
    * RequirementOption. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RequirementGenerationDependencyType, uci::type::accessorType::requirementGenerationDependencyType> DependentRequirement;

  /** The objective of the collection created as part of this response. List size for this element is based on "Select All
    * That Apply" condition. [Occurrences: Minimum: 0; Maximum: 5]
    */
  typedef uci::base::BoundedList<uci::type::CollectionObjectiveEnum, uci::type::accessorType::collectionObjectiveEnum> CollectionObjective;

  /** Returns the value of the SimplePrimitive data type identified by RequirementIndex.
    *
    * @return The value of the simple primitive data type identified by RequirementIndex.
    */
  virtual xs::UnsignedInt getRequirementIndex() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by RequirementIndex.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementTemplateOptionsType& setRequirementIndex(xs::UnsignedInt value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by DescriptiveLabel.
    *
    * @return A const reference to the accessor that provides access to the string identified by DescriptiveLabel.
    */
  virtual const asb_uci::type::VisibleString256Type& getDescriptiveLabel() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by DescriptiveLabel.
    *
    * @return A reference to the accessor that provides access to the string identified by DescriptiveLabel.
    */
  virtual asb_uci::type::VisibleString256Type& getDescriptiveLabel() = 0;

  /** Sets the string identified by DescriptiveLabel to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by DescriptiveLabel.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementTemplateOptionsType& setDescriptiveLabel(const asb_uci::type::VisibleString256Type& value) = 0;

  /** Sets the string identified by DescriptiveLabel to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementTemplateOptionsType& setDescriptiveLabel(const std::string& value) = 0;

  /** Sets the string identified by DescriptiveLabel to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementTemplateOptionsType& setDescriptiveLabel(const char* value) = 0;

  /** Returns whether the Element identified by DescriptiveLabel exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DescriptiveLabel is enabled or not.
    */
  virtual bool hasDescriptiveLabel() const = 0;

  /** Enables the Element identified by DescriptiveLabel.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by DescriptiveLabel.
    */
  virtual asb_uci::type::VisibleString256Type& enableDescriptiveLabel(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DescriptiveLabel.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementTemplateOptionsType& clearDescriptiveLabel() = 0;

  /** Returns a const reference to the bounded list identified by RequirementOption.
    *
    * @return A const reference to the bounded list identified by RequirementOption.
    */
  virtual const uci::type::RequirementTemplateOptionsType::RequirementOption& getRequirementOption() const = 0;

  /** Returns a reference to the bounded list identified by RequirementOption.
    *
    * @return A reference to the bounded list identified by RequirementOption.
    */
  virtual uci::type::RequirementTemplateOptionsType::RequirementOption& getRequirementOption() = 0;

  /** Sets the bounded list identified by RequirementOption.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementTemplateOptionsType& setRequirementOption(const uci::type::RequirementTemplateOptionsType::RequirementOption& value) = 0;

  /** Returns a const reference to the bounded list identified by DependentRequirement.
    *
    * @return A const reference to the bounded list identified by DependentRequirement.
    */
  virtual const uci::type::RequirementTemplateOptionsType::DependentRequirement& getDependentRequirement() const = 0;

  /** Returns a reference to the bounded list identified by DependentRequirement.
    *
    * @return A reference to the bounded list identified by DependentRequirement.
    */
  virtual uci::type::RequirementTemplateOptionsType::DependentRequirement& getDependentRequirement() = 0;

  /** Sets the bounded list identified by DependentRequirement.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementTemplateOptionsType& setDependentRequirement(const uci::type::RequirementTemplateOptionsType::DependentRequirement& value) = 0;

  /** Returns a const reference to the bounded list identified by CollectionObjective.
    *
    * @return A const reference to the bounded list identified by CollectionObjective.
    */
  virtual const uci::type::RequirementTemplateOptionsType::CollectionObjective& getCollectionObjective() const = 0;

  /** Returns a reference to the bounded list identified by CollectionObjective.
    *
    * @return A reference to the bounded list identified by CollectionObjective.
    */
  virtual uci::type::RequirementTemplateOptionsType::CollectionObjective& getCollectionObjective() = 0;

  /** Sets the bounded list identified by CollectionObjective.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementTemplateOptionsType& setCollectionObjective(const uci::type::RequirementTemplateOptionsType::CollectionObjective& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ProductStaleness.
    *
    * @return The value of the simple primitive data type identified by ProductStaleness.
    */
  virtual uci::type::DurationTypeValue getProductStaleness() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ProductStaleness.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementTemplateOptionsType& setProductStaleness(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by ProductStaleness exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProductStaleness is enabled or not.
    */
  virtual bool hasProductStaleness() const = 0;

  /** Clears (disabled) the Element identified by ProductStaleness.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::RequirementTemplateOptionsType& clearProductStaleness() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  RequirementTemplateOptionsType() {
  }

  /** The destructor [only available to derived classes]. */
  ~RequirementTemplateOptionsType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The RequirementTemplateOptionsType to copy from.
    */
  RequirementTemplateOptionsType(const RequirementTemplateOptionsType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this RequirementTemplateOptionsType to the contents of the
    * RequirementTemplateOptionsType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The RequirementTemplateOptionsType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this RequirementTemplateOptionsType.
    * @return A reference to this RequirementTemplateOptionsType.
    */
  RequirementTemplateOptionsType& operator=(const RequirementTemplateOptionsType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_REQUIREMENTTEMPLATEOPTIONSTYPE_H

