/** @file ValidationCommandStatusBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_VALIDATIONCOMMANDSTATUSBASETYPE_H
#define UCI_TYPE_VALIDATIONCOMMANDSTATUSBASETYPE_H

#include "uci/base/BoundedList.h"
#include "uci/type/CommandStatusBaseType.h"
#include "uci/type/CompletionStatusType.h"
#include "uci/type/IncompleteProcessingType.h"
#include "uci/type/ProcessingStatusEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** The base type for all *ValidationCommandStatus messages. */
class ValidationCommandStatusBaseType : public virtual CommandStatusBaseType {
public:

  /** Returns this accessor's type constant, i.e. validationCommandStatusBaseType.
    *
    * @return This accessor's type constant, i.e. validationCommandStatusBaseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::validationCommandStatusBaseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ValidationCommandStatusBaseType.
    *
    * @return The version that was initialized from the uci:version attribute of ValidationCommandStatusBaseType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ValidationCommandStatusBaseType& accessor) = 0;

  /** Indicates items associated with command processing that failed to complete. For example if a particular required
    * Capability wasn't available, it could be referenced here. This element/type is highly flexible. It can reference
    * almost any message/concept in UCI as a planning issue. The wide range of messages/concepts it can reference makes it
    * 1) difficult to use as a basis for software/services to resolve the issue but 2) an excellent general method for
    * processing algorithms to convey issues to operators. This element shouldn't be used to report processing
    * issues/results that are more directly indicated by other processing status elements. For example, for planning
    * processing, other elements focus specifically on per-Requirement allocation results therefore this element shouldn't
    * be used for per-Requirement allocation results. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::IncompleteProcessingType, uci::type::accessorType::incompleteProcessingType> IncompleteItem;

  /** Returns a const reference to the value of the enumeration identified by CommandStatus.
    *
    * @return A const reference to the value of the enumeration identified by CommandStatus.
    */
  virtual const uci::type::ProcessingStatusEnum& getCommandStatus() const = 0;

  /** Returns a reference to the value of the enumeration identified by CommandStatus.
    *
    * @return A reference to the value of the enumeration identified by CommandStatus.
    */
  virtual uci::type::ProcessingStatusEnum& getCommandStatus() = 0;

  /** Sets the value of the enumeration identified by CommandStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ValidationCommandStatusBaseType& setCommandStatus(const uci::type::ProcessingStatusEnum& value) = 0;

  /** Sets the value of the enumeration identified by CommandStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ValidationCommandStatusBaseType& setCommandStatus(uci::type::ProcessingStatusEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by CommandStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CommandStatus is enabled or not.
    */
  virtual bool hasCommandStatus() const = 0;

  /** Enables the Element identified by CommandStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by CommandStatus.
    */
  virtual uci::type::ProcessingStatusEnum& enableCommandStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CommandStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ValidationCommandStatusBaseType& clearCommandStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CompletionStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CompletionStatus.
    */
  virtual const uci::type::CompletionStatusType& getCompletionStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CompletionStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CompletionStatus.
    */
  virtual uci::type::CompletionStatusType& getCompletionStatus() = 0;

  /** Sets the complex content identified by CompletionStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CompletionStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ValidationCommandStatusBaseType& setCompletionStatus(const uci::type::CompletionStatusType& value) = 0;

  /** Returns whether the Element identified by CompletionStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CompletionStatus is enabled or not.
    */
  virtual bool hasCompletionStatus() const = 0;

  /** Enables the Element identified by CompletionStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CompletionStatus.
    */
  virtual uci::type::CompletionStatusType& enableCompletionStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CompletionStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ValidationCommandStatusBaseType& clearCompletionStatus() = 0;

  /** Returns a const reference to the bounded list identified by IncompleteItem.
    *
    * @return A const reference to the bounded list identified by IncompleteItem.
    */
  virtual const uci::type::ValidationCommandStatusBaseType::IncompleteItem& getIncompleteItem() const = 0;

  /** Returns a reference to the bounded list identified by IncompleteItem.
    *
    * @return A reference to the bounded list identified by IncompleteItem.
    */
  virtual uci::type::ValidationCommandStatusBaseType::IncompleteItem& getIncompleteItem() = 0;

  /** Sets the bounded list identified by IncompleteItem.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ValidationCommandStatusBaseType& setIncompleteItem(const uci::type::ValidationCommandStatusBaseType::IncompleteItem& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ValidationCommandStatusBaseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ValidationCommandStatusBaseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ValidationCommandStatusBaseType to copy from.
    */
  ValidationCommandStatusBaseType(const ValidationCommandStatusBaseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ValidationCommandStatusBaseType to the contents of the
    * ValidationCommandStatusBaseType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The ValidationCommandStatusBaseType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this ValidationCommandStatusBaseType.
    * @return A reference to this ValidationCommandStatusBaseType.
    */
  ValidationCommandStatusBaseType& operator=(const ValidationCommandStatusBaseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_VALIDATIONCOMMANDSTATUSBASETYPE_H

