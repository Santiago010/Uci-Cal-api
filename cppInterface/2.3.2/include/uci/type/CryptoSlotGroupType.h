/** @file CryptoSlotGroupType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CRYPTOSLOTGROUPTYPE_H
#define UCI_TYPE_CRYPTOSLOTGROUPTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "CapabilityID_Type.h"
#include "CryptoLoadStatusType.h"
#include "CryptoRolloverMethodEnum.h"
#include "CryptoSlotGroupID_Type.h"
#include "CryptoSlotGroupStateEnum.h"
#include "CryptoSlotIdentifierType.h"
#include "CryptoSlotType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type represents information about a crypto slot group. A crypto slot group can contain one or more crypto slots. */
class CryptoSlotGroupType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CryptoSlotGroupType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CryptoSlotGroupType.
    */
  static UCI_EXPORT CryptoSlotGroupType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CryptoSlotGroupType initializing the data accessed by the new CryptoSlotGroupType using
    * the data accessed by the specified CryptoSlotGroupType (cloning).
    *
    * @param accessor The CryptoSlotGroupType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created CryptoSlotGroupType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CryptoSlotGroupType.
    */
  static UCI_EXPORT CryptoSlotGroupType& create(const CryptoSlotGroupType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CryptoSlotGroupType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The CryptoSlotGroupType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CryptoSlotGroupType& accessor);

  /** Returns this accessor's type constant, i.e. cryptoSlotGroupType.
    *
    * @return This accessor's type constant, i.e. cryptoSlotGroupType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::cryptoSlotGroupType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CryptoSlotGroupType.
    *
    * @return The version that was initialized from the uci:version attribute of CryptoSlotGroupType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.001.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CryptoSlotGroupType& accessor) = 0;

  /** Indicates the ID of a Capability whose use requires operation of the crypto key slot. [Occurrences: Minimum: 0;
    * Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CapabilityID_Type, uci::type::accessorType::capabilityID_Type> CapabilityID;

  /** Indicates which types of key rollover are available for this group of crypto keys. List size for this element is
    * based on "Select All That Apply" condition. [Occurrences: Minimum: 1; Maximum: 5]
    */
  typedef uci::base::BoundedList<uci::type::CryptoRolloverMethodEnum, uci::type::accessorType::cryptoRolloverMethodEnum> RolloverMethod;

  /** Indicates detailed information about current load activities. Allows keys to be grouped based upon their load status.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CryptoLoadStatusType, uci::type::accessorType::cryptoLoadStatusType> LoadStatus;

  /** Indicates detailed information about each crypto slot within a group of crypto key slots. This includes state of the
    * key slot, the next slot in a link list of slots (with respect to rollover, if applicable), and unique ID for the key.
    * [Occurrences: Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CryptoSlotType, uci::type::accessorType::cryptoSlotType> SlotInformation;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CryptoSlotGroupID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CryptoSlotGroupID.
    */
  virtual const uci::type::CryptoSlotGroupID_Type& getCryptoSlotGroupID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CryptoSlotGroupID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CryptoSlotGroupID.
    */
  virtual uci::type::CryptoSlotGroupID_Type& getCryptoSlotGroupID() = 0;

  /** Sets the complex content identified by CryptoSlotGroupID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CryptoSlotGroupID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CryptoSlotGroupType& setCryptoSlotGroupID(const uci::type::CryptoSlotGroupID_Type& value) = 0;

  /** Returns a const reference to the bounded list identified by CapabilityID.
    *
    * @return A const reference to the bounded list identified by CapabilityID.
    */
  virtual const uci::type::CryptoSlotGroupType::CapabilityID& getCapabilityID() const = 0;

  /** Returns a reference to the bounded list identified by CapabilityID.
    *
    * @return A reference to the bounded list identified by CapabilityID.
    */
  virtual uci::type::CryptoSlotGroupType::CapabilityID& getCapabilityID() = 0;

  /** Sets the bounded list identified by CapabilityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CryptoSlotGroupType& setCapabilityID(const uci::type::CryptoSlotGroupType::CapabilityID& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by CryptoSlotGroupState.
    *
    * @return A const reference to the value of the enumeration identified by CryptoSlotGroupState.
    */
  virtual const uci::type::CryptoSlotGroupStateEnum& getCryptoSlotGroupState() const = 0;

  /** Returns a reference to the value of the enumeration identified by CryptoSlotGroupState.
    *
    * @return A reference to the value of the enumeration identified by CryptoSlotGroupState.
    */
  virtual uci::type::CryptoSlotGroupStateEnum& getCryptoSlotGroupState() = 0;

  /** Sets the value of the enumeration identified by CryptoSlotGroupState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CryptoSlotGroupType& setCryptoSlotGroupState(const uci::type::CryptoSlotGroupStateEnum& value) = 0;

  /** Sets the value of the enumeration identified by CryptoSlotGroupState.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CryptoSlotGroupType& setCryptoSlotGroupState(uci::type::CryptoSlotGroupStateEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by CryptoSlotGroupState exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CryptoSlotGroupState is enabled or not.
    */
  virtual bool hasCryptoSlotGroupState() const = 0;

  /** Enables the Element identified by CryptoSlotGroupState.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by CryptoSlotGroupState.
    */
  virtual uci::type::CryptoSlotGroupStateEnum& enableCryptoSlotGroupState(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CryptoSlotGroupState.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CryptoSlotGroupType& clearCryptoSlotGroupState() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by CurrentSlotIdentifier.
    *
    * @return A const reference to the accessor that provides access to the string identified by CurrentSlotIdentifier.
    */
  virtual const uci::type::CryptoSlotIdentifierType& getCurrentSlotIdentifier() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by CurrentSlotIdentifier.
    *
    * @return A reference to the accessor that provides access to the string identified by CurrentSlotIdentifier.
    */
  virtual uci::type::CryptoSlotIdentifierType& getCurrentSlotIdentifier() = 0;

  /** Sets the string identified by CurrentSlotIdentifier to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by CurrentSlotIdentifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CryptoSlotGroupType& setCurrentSlotIdentifier(const uci::type::CryptoSlotIdentifierType& value) = 0;

  /** Sets the string identified by CurrentSlotIdentifier to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CryptoSlotGroupType& setCurrentSlotIdentifier(const std::string& value) = 0;

  /** Sets the string identified by CurrentSlotIdentifier to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CryptoSlotGroupType& setCurrentSlotIdentifier(const char* value) = 0;

  /** Returns a const reference to the bounded list identified by RolloverMethod.
    *
    * @return A const reference to the bounded list identified by RolloverMethod.
    */
  virtual const uci::type::CryptoSlotGroupType::RolloverMethod& getRolloverMethod() const = 0;

  /** Returns a reference to the bounded list identified by RolloverMethod.
    *
    * @return A reference to the bounded list identified by RolloverMethod.
    */
  virtual uci::type::CryptoSlotGroupType::RolloverMethod& getRolloverMethod() = 0;

  /** Sets the bounded list identified by RolloverMethod.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CryptoSlotGroupType& setRolloverMethod(const uci::type::CryptoSlotGroupType::RolloverMethod& value) = 0;

  /** Returns a const reference to the bounded list identified by LoadStatus.
    *
    * @return A const reference to the bounded list identified by LoadStatus.
    */
  virtual const uci::type::CryptoSlotGroupType::LoadStatus& getLoadStatus() const = 0;

  /** Returns a reference to the bounded list identified by LoadStatus.
    *
    * @return A reference to the bounded list identified by LoadStatus.
    */
  virtual uci::type::CryptoSlotGroupType::LoadStatus& getLoadStatus() = 0;

  /** Sets the bounded list identified by LoadStatus.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CryptoSlotGroupType& setLoadStatus(const uci::type::CryptoSlotGroupType::LoadStatus& value) = 0;

  /** Returns a const reference to the bounded list identified by SlotInformation.
    *
    * @return A const reference to the bounded list identified by SlotInformation.
    */
  virtual const uci::type::CryptoSlotGroupType::SlotInformation& getSlotInformation() const = 0;

  /** Returns a reference to the bounded list identified by SlotInformation.
    *
    * @return A reference to the bounded list identified by SlotInformation.
    */
  virtual uci::type::CryptoSlotGroupType::SlotInformation& getSlotInformation() = 0;

  /** Sets the bounded list identified by SlotInformation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CryptoSlotGroupType& setSlotInformation(const uci::type::CryptoSlotGroupType::SlotInformation& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CryptoSlotGroupType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CryptoSlotGroupType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CryptoSlotGroupType to copy from.
    */
  CryptoSlotGroupType(const CryptoSlotGroupType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CryptoSlotGroupType to the contents of the CryptoSlotGroupType on
    * the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CryptoSlotGroupType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this CryptoSlotGroupType.
    * @return A reference to this CryptoSlotGroupType.
    */
  CryptoSlotGroupType& operator=(const CryptoSlotGroupType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_CRYPTOSLOTGROUPTYPE_H

