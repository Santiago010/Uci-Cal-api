/** @file EntityMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ENTITYMDT_H
#define UCI_TYPE_ENTITYMDT_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ActivityAgainstType.h"
#include "uci/type/ActivityByType.h"
#include "uci/type/CapabilityID_Type.h"
#include "uci/type/DateTimeSigmaType.h"
#include "uci/type/EnduranceType.h"
#include "uci/type/EntityID_Type.h"
#include "uci/type/EntityIdentityType.h"
#include "uci/type/EntityRemoveInfoType.h"
#include "uci/type/EntitySignalSummaryType.h"
#include "uci/type/EntitySourceType.h"
#include "uci/type/EntityStatusEnum.h"
#include "uci/type/ID_Type.h"
#include "uci/type/KinematicsType.h"
#include "uci/type/MeasurementID_Type.h"
#include "uci/type/MobilityEnum.h"
#include "uci/type/OB_OperationalStatusEnum.h"
#include "uci/type/OrbitalKinematicsChoiceType.h"
#include "uci/type/OrbitalSingleVectorParametersType.h"
#include "uci/type/PlatformStatusType.h"
#include "uci/type/Point2D_Type.h"
#include "uci/type/PulseDataID_Type.h"
#include "uci/type/StrengthType.h"
#include "uci/type/VoiceControlType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class EntityMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new EntityMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EntityMDT.
    */
  static UCI_EXPORT EntityMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new EntityMDT initializing the data accessed by the new EntityMDT using the data accessed by
    * the specified EntityMDT (cloning).
    *
    * @param accessor The EntityMDT that provides access to the data that is to be used to initialize the data accessed by
    *      the new created EntityMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EntityMDT.
    */
  static UCI_EXPORT EntityMDT& create(const EntityMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified EntityMDT. Use of the specified accessor after it has been destroyed will result
    * in undefined behavior.
    *
    * @param accessor The EntityMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(EntityMDT& accessor);

  /** Returns this accessor's type constant, i.e. entityMDT.
    *
    * @return This accessor's type constant, i.e. entityMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::entityMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of EntityMDT.
    *
    * @return The version that was initialized from the uci:version attribute of EntityMDT.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const EntityMDT& accessor) = 0;

  /** Indicates the unique ID of an Entity that is a part of this Site Entity. When omitted, the Entity is not a Site. When
    * one or more are given, this Entity is a Site. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EntityID_Type, uci::type::accessorType::entityID_Type> SiteEntityID;

  /** Indicates a summary of an RF Signal from the Entity. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::EntitySignalSummaryType, uci::type::accessorType::entitySignalSummaryType> SignalSummary;

  /** Indicates the unique ID of a PulseData collection associated with the Entity. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::PulseDataID_Type, uci::type::accessorType::pulseDataID_Type> PulseDataID;

  /** Indicates the unique ID of a Measurement within an Observation Measurement Report associated with the Entity.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::MeasurementID_Type, uci::type::accessorType::measurementID_Type> MeasurementID;

  /** This element indicates an activity, that isn't otherwise represented by UCI Tasks, Capability commands, etc. being
    * performed on/against the Entity. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ActivityAgainstType, uci::type::accessorType::activityAgainstType> ActivityAgainst;

  /** This element indicates an activity, that isn't otherwise represented by UCI Tasks, Capability commands, etc. being
    * performed by the Entity. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ActivityByType, uci::type::accessorType::activityByType> ActivityBy;

  /** This element indicates an association (not a fusion or derivation relationship) between this Entity and another UCI
    * message or object. For example, an Entity could be associated with an OpPoint. Data content of the Entity and the
    * associated message/object is maintained independently. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ID_Type, uci::type::accessorType::iD_Type> AssociatedID;

  /** Indicates a capability of the Entity. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::CapabilityID_Type, uci::type::accessorType::capabilityID_Type> CapabilityID;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EntityID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EntityID.
    */
  virtual const uci::type::EntityID_Type& getEntityID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EntityID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EntityID.
    */
  virtual uci::type::EntityID_Type& getEntityID() = 0;

  /** Sets the complex content identified by EntityID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EntityID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setEntityID(const uci::type::EntityID_Type& value) = 0;

  /** Enables the Element identified by EntityID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return A reference to the accessor that provides access to the complex content identified by EntityID.
    */
  virtual uci::type::EntityID_Type& enableEntityID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CreationTimestamp.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CreationTimestamp.
    */
  virtual const uci::type::DateTimeSigmaType& getCreationTimestamp() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CreationTimestamp.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CreationTimestamp.
    */
  virtual uci::type::DateTimeSigmaType& getCreationTimestamp() = 0;

  /** Sets the complex content identified by CreationTimestamp to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CreationTimestamp.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setCreationTimestamp(const uci::type::DateTimeSigmaType& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Source.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Source.
    */
  virtual const uci::type::EntitySourceType& getSource() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Source.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Source.
    */
  virtual uci::type::EntitySourceType& getSource() = 0;

  /** Sets the complex content identified by Source to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Source.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setSource(const uci::type::EntitySourceType& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by EntityStatus.
    *
    * @return A const reference to the value of the enumeration identified by EntityStatus.
    */
  virtual const uci::type::EntityStatusEnum& getEntityStatus() const = 0;

  /** Returns a reference to the value of the enumeration identified by EntityStatus.
    *
    * @return A reference to the value of the enumeration identified by EntityStatus.
    */
  virtual uci::type::EntityStatusEnum& getEntityStatus() = 0;

  /** Sets the value of the enumeration identified by EntityStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setEntityStatus(const uci::type::EntityStatusEnum& value) = 0;

  /** Sets the value of the enumeration identified by EntityStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setEntityStatus(uci::type::EntityStatusEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by OperationalStatus.
    *
    * @return A const reference to the value of the enumeration identified by OperationalStatus.
    */
  virtual const uci::type::OB_OperationalStatusEnum& getOperationalStatus() const = 0;

  /** Returns a reference to the value of the enumeration identified by OperationalStatus.
    *
    * @return A reference to the value of the enumeration identified by OperationalStatus.
    */
  virtual uci::type::OB_OperationalStatusEnum& getOperationalStatus() = 0;

  /** Sets the value of the enumeration identified by OperationalStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setOperationalStatus(const uci::type::OB_OperationalStatusEnum& value) = 0;

  /** Sets the value of the enumeration identified by OperationalStatus.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setOperationalStatus(uci::type::OB_OperationalStatusEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by OperationalStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OperationalStatus is enabled or not.
    */
  virtual bool hasOperationalStatus() const = 0;

  /** Enables the Element identified by OperationalStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by OperationalStatus.
    */
  virtual uci::type::OB_OperationalStatusEnum& enableOperationalStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OperationalStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& clearOperationalStatus() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual const uci::type::EntityIdentityType& getIdentity() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Identity.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Identity.
    */
  virtual uci::type::EntityIdentityType& getIdentity() = 0;

  /** Sets the complex content identified by Identity to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Identity.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setIdentity(const uci::type::EntityIdentityType& value) = 0;

  /** Returns a const reference to the bounded list identified by SiteEntityID.
    *
    * @return A const reference to the bounded list identified by SiteEntityID.
    */
  virtual const uci::type::EntityMDT::SiteEntityID& getSiteEntityID() const = 0;

  /** Returns a reference to the bounded list identified by SiteEntityID.
    *
    * @return A reference to the bounded list identified by SiteEntityID.
    */
  virtual uci::type::EntityMDT::SiteEntityID& getSiteEntityID() = 0;

  /** Sets the bounded list identified by SiteEntityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setSiteEntityID(const uci::type::EntityMDT::SiteEntityID& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by Mobility.
    *
    * @return A const reference to the value of the enumeration identified by Mobility.
    */
  virtual const uci::type::MobilityEnum& getMobility() const = 0;

  /** Returns a reference to the value of the enumeration identified by Mobility.
    *
    * @return A reference to the value of the enumeration identified by Mobility.
    */
  virtual uci::type::MobilityEnum& getMobility() = 0;

  /** Sets the value of the enumeration identified by Mobility.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setMobility(const uci::type::MobilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by Mobility.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setMobility(uci::type::MobilityEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by Mobility exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Mobility is enabled or not.
    */
  virtual bool hasMobility() const = 0;

  /** Enables the Element identified by Mobility.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by Mobility.
    */
  virtual uci::type::MobilityEnum& enableMobility(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Mobility.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& clearMobility() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Kinematics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Kinematics.
    */
  virtual const uci::type::KinematicsType& getKinematics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Kinematics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Kinematics.
    */
  virtual uci::type::KinematicsType& getKinematics() = 0;

  /** Sets the complex content identified by Kinematics to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Kinematics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setKinematics(const uci::type::KinematicsType& value) = 0;

  /** Returns whether the Element identified by Kinematics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Kinematics is enabled or not.
    */
  virtual bool hasKinematics() const = 0;

  /** Enables the Element identified by Kinematics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Kinematics.
    */
  virtual uci::type::KinematicsType& enableKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Kinematics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& clearKinematics() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * EstimatedKinematics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      EstimatedKinematics.
    */
  virtual const uci::type::KinematicsType& getEstimatedKinematics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EstimatedKinematics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EstimatedKinematics.
    */
  virtual uci::type::KinematicsType& getEstimatedKinematics() = 0;

  /** Sets the complex content identified by EstimatedKinematics to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EstimatedKinematics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setEstimatedKinematics(const uci::type::KinematicsType& value) = 0;

  /** Returns whether the Element identified by EstimatedKinematics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedKinematics is enabled or not.
    */
  virtual bool hasEstimatedKinematics() const = 0;

  /** Enables the Element identified by EstimatedKinematics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EstimatedKinematics.
    */
  virtual uci::type::KinematicsType& enableEstimatedKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EstimatedKinematics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& clearEstimatedKinematics() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DownLocation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DownLocation.
    */
  virtual const uci::type::Point2D_Type& getDownLocation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DownLocation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DownLocation.
    */
  virtual uci::type::Point2D_Type& getDownLocation() = 0;

  /** Sets the complex content identified by DownLocation to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DownLocation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setDownLocation(const uci::type::Point2D_Type& value) = 0;

  /** Returns whether the Element identified by DownLocation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DownLocation is enabled or not.
    */
  virtual bool hasDownLocation() const = 0;

  /** Enables the Element identified by DownLocation.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DownLocation.
    */
  virtual uci::type::Point2D_Type& enableDownLocation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DownLocation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& clearDownLocation() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PlatformStatus.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PlatformStatus.
    */
  virtual const uci::type::PlatformStatusType& getPlatformStatus() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PlatformStatus.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PlatformStatus.
    */
  virtual uci::type::PlatformStatusType& getPlatformStatus() = 0;

  /** Sets the complex content identified by PlatformStatus to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PlatformStatus.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setPlatformStatus(const uci::type::PlatformStatusType& value) = 0;

  /** Returns whether the Element identified by PlatformStatus exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PlatformStatus is enabled or not.
    */
  virtual bool hasPlatformStatus() const = 0;

  /** Enables the Element identified by PlatformStatus.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by PlatformStatus.
    */
  virtual uci::type::PlatformStatusType& enablePlatformStatus(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PlatformStatus.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& clearPlatformStatus() = 0;

  /** Returns a const reference to the bounded list identified by SignalSummary.
    *
    * @return A const reference to the bounded list identified by SignalSummary.
    */
  virtual const uci::type::EntityMDT::SignalSummary& getSignalSummary() const = 0;

  /** Returns a reference to the bounded list identified by SignalSummary.
    *
    * @return A reference to the bounded list identified by SignalSummary.
    */
  virtual uci::type::EntityMDT::SignalSummary& getSignalSummary() = 0;

  /** Sets the bounded list identified by SignalSummary.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setSignalSummary(const uci::type::EntityMDT::SignalSummary& value) = 0;

  /** Returns a const reference to the bounded list identified by PulseDataID.
    *
    * @return A const reference to the bounded list identified by PulseDataID.
    */
  virtual const uci::type::EntityMDT::PulseDataID& getPulseDataID() const = 0;

  /** Returns a reference to the bounded list identified by PulseDataID.
    *
    * @return A reference to the bounded list identified by PulseDataID.
    */
  virtual uci::type::EntityMDT::PulseDataID& getPulseDataID() = 0;

  /** Sets the bounded list identified by PulseDataID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setPulseDataID(const uci::type::EntityMDT::PulseDataID& value) = 0;

  /** Returns a const reference to the bounded list identified by MeasurementID.
    *
    * @return A const reference to the bounded list identified by MeasurementID.
    */
  virtual const uci::type::EntityMDT::MeasurementID& getMeasurementID() const = 0;

  /** Returns a reference to the bounded list identified by MeasurementID.
    *
    * @return A reference to the bounded list identified by MeasurementID.
    */
  virtual uci::type::EntityMDT::MeasurementID& getMeasurementID() = 0;

  /** Sets the bounded list identified by MeasurementID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setMeasurementID(const uci::type::EntityMDT::MeasurementID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Strength.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Strength.
    */
  virtual const uci::type::StrengthType& getStrength() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Strength.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Strength.
    */
  virtual uci::type::StrengthType& getStrength() = 0;

  /** Sets the complex content identified by Strength to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Strength.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setStrength(const uci::type::StrengthType& value) = 0;

  /** Returns whether the Element identified by Strength exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Strength is enabled or not.
    */
  virtual bool hasStrength() const = 0;

  /** Enables the Element identified by Strength.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Strength.
    */
  virtual uci::type::StrengthType& enableStrength(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Strength.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& clearStrength() = 0;

  /** Returns a const reference to the bounded list identified by ActivityAgainst.
    *
    * @return A const reference to the bounded list identified by ActivityAgainst.
    */
  virtual const uci::type::EntityMDT::ActivityAgainst& getActivityAgainst() const = 0;

  /** Returns a reference to the bounded list identified by ActivityAgainst.
    *
    * @return A reference to the bounded list identified by ActivityAgainst.
    */
  virtual uci::type::EntityMDT::ActivityAgainst& getActivityAgainst() = 0;

  /** Sets the bounded list identified by ActivityAgainst.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setActivityAgainst(const uci::type::EntityMDT::ActivityAgainst& value) = 0;

  /** Returns a const reference to the bounded list identified by ActivityBy.
    *
    * @return A const reference to the bounded list identified by ActivityBy.
    */
  virtual const uci::type::EntityMDT::ActivityBy& getActivityBy() const = 0;

  /** Returns a reference to the bounded list identified by ActivityBy.
    *
    * @return A reference to the bounded list identified by ActivityBy.
    */
  virtual uci::type::EntityMDT::ActivityBy& getActivityBy() = 0;

  /** Sets the bounded list identified by ActivityBy.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setActivityBy(const uci::type::EntityMDT::ActivityBy& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Endurance.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Endurance.
    */
  virtual const uci::type::EnduranceType& getEndurance() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Endurance.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Endurance.
    */
  virtual uci::type::EnduranceType& getEndurance() = 0;

  /** Sets the complex content identified by Endurance to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Endurance.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setEndurance(const uci::type::EnduranceType& value) = 0;

  /** Returns whether the Element identified by Endurance exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Endurance is enabled or not.
    */
  virtual bool hasEndurance() const = 0;

  /** Enables the Element identified by Endurance.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Endurance.
    */
  virtual uci::type::EnduranceType& enableEndurance(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Endurance.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& clearEndurance() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by VoiceControl.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by VoiceControl.
    */
  virtual const uci::type::VoiceControlType& getVoiceControl() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by VoiceControl.
    *
    * @return A reference to the accessor that provides access to the complex content identified by VoiceControl.
    */
  virtual uci::type::VoiceControlType& getVoiceControl() = 0;

  /** Sets the complex content identified by VoiceControl to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by VoiceControl.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setVoiceControl(const uci::type::VoiceControlType& value) = 0;

  /** Returns whether the Element identified by VoiceControl exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by VoiceControl is enabled or not.
    */
  virtual bool hasVoiceControl() const = 0;

  /** Enables the Element identified by VoiceControl.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by VoiceControl.
    */
  virtual uci::type::VoiceControlType& enableVoiceControl(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by VoiceControl.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& clearVoiceControl() = 0;

  /** Returns a const reference to the bounded list identified by AssociatedID.
    *
    * @return A const reference to the bounded list identified by AssociatedID.
    */
  virtual const uci::type::EntityMDT::AssociatedID& getAssociatedID() const = 0;

  /** Returns a reference to the bounded list identified by AssociatedID.
    *
    * @return A reference to the bounded list identified by AssociatedID.
    */
  virtual uci::type::EntityMDT::AssociatedID& getAssociatedID() = 0;

  /** Sets the bounded list identified by AssociatedID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setAssociatedID(const uci::type::EntityMDT::AssociatedID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RemoveInfo.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RemoveInfo.
    */
  virtual const uci::type::EntityRemoveInfoType& getRemoveInfo() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RemoveInfo.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RemoveInfo.
    */
  virtual uci::type::EntityRemoveInfoType& getRemoveInfo() = 0;

  /** Sets the complex content identified by RemoveInfo to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RemoveInfo.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setRemoveInfo(const uci::type::EntityRemoveInfoType& value) = 0;

  /** Returns whether the Element identified by RemoveInfo exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by RemoveInfo is enabled or not.
    */
  virtual bool hasRemoveInfo() const = 0;

  /** Enables the Element identified by RemoveInfo.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by RemoveInfo.
    */
  virtual uci::type::EntityRemoveInfoType& enableRemoveInfo(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by RemoveInfo.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& clearRemoveInfo() = 0;

  /** Returns a const reference to the bounded list identified by CapabilityID.
    *
    * @return A const reference to the bounded list identified by CapabilityID.
    */
  virtual const uci::type::EntityMDT::CapabilityID& getCapabilityID() const = 0;

  /** Returns a reference to the bounded list identified by CapabilityID.
    *
    * @return A reference to the bounded list identified by CapabilityID.
    */
  virtual uci::type::EntityMDT::CapabilityID& getCapabilityID() = 0;

  /** Sets the bounded list identified by CapabilityID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setCapabilityID(const uci::type::EntityMDT::CapabilityID& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrbitalKinematics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrbitalKinematics.
    */
  virtual const uci::type::OrbitalKinematicsChoiceType& getOrbitalKinematics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitalKinematics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitalKinematics.
    */
  virtual uci::type::OrbitalKinematicsChoiceType& getOrbitalKinematics() = 0;

  /** Sets the complex content identified by OrbitalKinematics to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitalKinematics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setOrbitalKinematics(const uci::type::OrbitalKinematicsChoiceType& value) = 0;

  /** Returns whether the Element identified by OrbitalKinematics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrbitalKinematics is enabled or not.
    */
  virtual bool hasOrbitalKinematics() const = 0;

  /** Enables the Element identified by OrbitalKinematics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrbitalKinematics.
    */
  virtual uci::type::OrbitalKinematicsChoiceType& enableOrbitalKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrbitalKinematics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& clearOrbitalKinematics() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrbitalKinematicsParameters.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrbitalKinematicsParameters.
    */
  virtual const uci::type::OrbitalSingleVectorParametersType& getOrbitalKinematicsParameters() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * OrbitalKinematicsParameters.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OrbitalKinematicsParameters.
    */
  virtual uci::type::OrbitalSingleVectorParametersType& getOrbitalKinematicsParameters() = 0;

  /** Sets the complex content identified by OrbitalKinematicsParameters to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitalKinematicsParameters.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setOrbitalKinematicsParameters(const uci::type::OrbitalSingleVectorParametersType& value) = 0;

  /** Returns whether the Element identified by OrbitalKinematicsParameters exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrbitalKinematicsParameters is enabled or not.
    */
  virtual bool hasOrbitalKinematicsParameters() const = 0;

  /** Enables the Element identified by OrbitalKinematicsParameters.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OrbitalKinematicsParameters.
    */
  virtual uci::type::OrbitalSingleVectorParametersType& enableOrbitalKinematicsParameters(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrbitalKinematicsParameters.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& clearOrbitalKinematicsParameters() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * EstimatedOrbitalKinematics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      EstimatedOrbitalKinematics.
    */
  virtual const uci::type::OrbitalKinematicsChoiceType& getEstimatedOrbitalKinematics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * EstimatedOrbitalKinematics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      EstimatedOrbitalKinematics.
    */
  virtual uci::type::OrbitalKinematicsChoiceType& getEstimatedOrbitalKinematics() = 0;

  /** Sets the complex content identified by EstimatedOrbitalKinematics to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EstimatedOrbitalKinematics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& setEstimatedOrbitalKinematics(const uci::type::OrbitalKinematicsChoiceType& value) = 0;

  /** Returns whether the Element identified by EstimatedOrbitalKinematics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedOrbitalKinematics is enabled or not.
    */
  virtual bool hasEstimatedOrbitalKinematics() const = 0;

  /** Enables the Element identified by EstimatedOrbitalKinematics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      EstimatedOrbitalKinematics.
    */
  virtual uci::type::OrbitalKinematicsChoiceType& enableEstimatedOrbitalKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EstimatedOrbitalKinematics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EntityMDT& clearEstimatedOrbitalKinematics() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  EntityMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~EntityMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The EntityMDT to copy from.
    */
  EntityMDT(const EntityMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this EntityMDT to the contents of the EntityMDT on the right hand side
    * (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The EntityMDT on the right hand side (rhs) of the assignment operator whose contents are used to set the
    *      contents of this EntityMDT.
    * @return A reference to this EntityMDT.
    */
  EntityMDT& operator=(const EntityMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ENTITYMDT_H

