/** @file PlanningByCaseTriggerType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_PLANNINGBYCASETRIGGERTYPE_H
#define UCI_TYPE_PLANNINGBYCASETRIGGERTYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "CapabilityTaxonomyType.h"
#include "CommsLostTriggerDataType.h"
#include "EmptyType.h"
#include "EnduranceType.h"
#include "PlanVulnerabilityType.h"
#include "RequirementFailedTriggerType.h"
#include "RequirementTriggerType.h"
#include "ResponseID_Type.h"
#include "SatelliteEnduranceType.h"
#include "SystemStateFilterType.h"
#include "ThresholdOffOrbitTriggerDataType.h"
#include "ThresholdOffRouteTriggerDataType.h"
#include "ZoneViolationTriggerDataType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class PlanningByCaseTriggerType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new PlanningByCaseTriggerType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanningByCaseTriggerType.
    */
  static UCI_EXPORT PlanningByCaseTriggerType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new PlanningByCaseTriggerType initializing the data accessed by the new
    * PlanningByCaseTriggerType using the data accessed by the specified PlanningByCaseTriggerType (cloning).
    *
    * @param accessor The PlanningByCaseTriggerType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created PlanningByCaseTriggerType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed PlanningByCaseTriggerType.
    */
  static UCI_EXPORT PlanningByCaseTriggerType& create(const PlanningByCaseTriggerType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified PlanningByCaseTriggerType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The PlanningByCaseTriggerType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(PlanningByCaseTriggerType& accessor);

  /** Returns this accessor's type constant, i.e. planningByCaseTriggerType.
    *
    * @return This accessor's type constant, i.e. planningByCaseTriggerType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::planningByCaseTriggerType;
  }

  /** Returns the version that was initialized from the uci:version attribute of PlanningByCaseTriggerType.
    *
    * @return The version that was initialized from the uci:version attribute of PlanningByCaseTriggerType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const PlanningByCaseTriggerType& accessor) = 0;

  /** The following enumeration is used to identify which element of this Choice has been chosen. */
  enum PlanningByCaseTriggerTypeChoice {
    PLANNINGBYCASETRIGGERTYPE_CHOICE_NONE,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_CAPABILITYADDED,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_CAPABILITYFAILURE,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_COMMSLOST,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_DMPI_OVERDESIGNATION,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_DMPI_UNDERDESIGNATION,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_ENDURANCELOW,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_OFFROUTE,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_PROXIMITYCONFLICT,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_RELEASEPOINTOUTSIDELAR,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_ROUTECONFLICT,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_ROUTEVULNERABILITY,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_SYSTEMSTATECHANGE,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_REQUIREMENTADDED,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_REQUIREMENTDEPENDENCYFAILED,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_REQUIREMENTDROPPED,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_REQUIREMENTFAILED,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_REQUIREMENTCHANGE,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_REQUIREMENTTIMING,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_ZONEVIOLATION,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_ORBITCONFLICT,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_OFFPLANNEDORBIT,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_SPACECRAFTENDURANCELOW,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_SPACECRAFTPROXIMITYCONFLICT,
    PLANNINGBYCASETRIGGERTYPE_CHOICE_RESPONSEID
  };

  /** This method returns this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active.
    *
    * @return The selected item's enumerated value.
    */
  virtual PlanningByCaseTriggerTypeChoice getPlanningByCaseTriggerTypeChoiceOrdinal() const = 0;

  /** This method is used to set this choice's "selection ordinal." A choice's "selection ordinal" is used to specify which
    * element in the choice is chosen to be active. There are two mechanisms that can be used to set a choice's "selection
    * ordinal." The first mechanism is by invoking this method. The second mechanism is by invoking one of the set methods
    * associated with one of the elements contained in this choice. Once this method is invoked, the value returned by
    * getPlanningByCaseTriggerTypeChoiceOrdinal() will be the ordinal specified when this method was invoked. In addition,
    * the access methods associated with the chosen element will be enabled and will provide access to the chosen element.
    *
    * @param chosenElementOrdinal The ordinal to set this choice's selected ordinal to.
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setPlanningByCaseTriggerTypeChoiceOrdinal(PlanningByCaseTriggerTypeChoice chosenElementOrdinal, uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CapabilityAdded.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CapabilityAdded.
    */
  virtual const uci::type::CapabilityTaxonomyType& getCapabilityAdded() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CapabilityAdded.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityAdded.
    */
  virtual uci::type::CapabilityTaxonomyType& getCapabilityAdded() = 0;

  /** Sets the complex content identified by CapabilityAdded to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CapabilityAdded.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setCapabilityAdded(const uci::type::CapabilityTaxonomyType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CapabilityAdded.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CapabilityAdded, false
    *      otherwise.
    */
  virtual bool isCapabilityAdded() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by CapabilityAdded.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CapabilityAdded.
    */
  virtual uci::type::CapabilityTaxonomyType& chooseCapabilityAdded(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CapabilityFailure.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CapabilityFailure.
    */
  virtual const uci::type::CapabilityTaxonomyType& getCapabilityFailure() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CapabilityFailure.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityFailure.
    */
  virtual uci::type::CapabilityTaxonomyType& getCapabilityFailure() = 0;

  /** Sets the complex content identified by CapabilityFailure to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CapabilityFailure.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setCapabilityFailure(const uci::type::CapabilityTaxonomyType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CapabilityFailure.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CapabilityFailure, false
    *      otherwise.
    */
  virtual bool isCapabilityFailure() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by CapabilityFailure.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CapabilityFailure.
    */
  virtual uci::type::CapabilityTaxonomyType& chooseCapabilityFailure(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by CommsLost.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by CommsLost.
    */
  virtual const uci::type::CommsLostTriggerDataType& getCommsLost() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CommsLost.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CommsLost.
    */
  virtual uci::type::CommsLostTriggerDataType& getCommsLost() = 0;

  /** Sets the complex content identified by CommsLost to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CommsLost.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setCommsLost(const uci::type::CommsLostTriggerDataType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by CommsLost.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by CommsLost, false otherwise.
    */
  virtual bool isCommsLost() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by CommsLost.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by CommsLost.
    */
  virtual uci::type::CommsLostTriggerDataType& chooseCommsLost(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by DMPI_OverDesignation.
    *
    * @return A const reference to the accessor that provides access to the string identified by DMPI_OverDesignation.
    */
  virtual const uci::type::EmptyType& getDMPI_OverDesignation() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by DMPI_OverDesignation.
    *
    * @return A reference to the accessor that provides access to the string identified by DMPI_OverDesignation.
    */
  virtual uci::type::EmptyType& getDMPI_OverDesignation() = 0;

  /** Sets the string identified by DMPI_OverDesignation to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by DMPI_OverDesignation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setDMPI_OverDesignation(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by DMPI_OverDesignation to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setDMPI_OverDesignation(const std::string& value) = 0;

  /** Sets the string identified by DMPI_OverDesignation to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setDMPI_OverDesignation(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by DMPI_OverDesignation.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by DMPI_OverDesignation, false
    *      otherwise.
    */
  virtual bool isDMPI_OverDesignation() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by DMPI_OverDesignation.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by DMPI_OverDesignation.
    */
  virtual uci::type::EmptyType& chooseDMPI_OverDesignation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by DMPI_UnderDesignation.
    *
    * @return A const reference to the accessor that provides access to the string identified by DMPI_UnderDesignation.
    */
  virtual const uci::type::EmptyType& getDMPI_UnderDesignation() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by DMPI_UnderDesignation.
    *
    * @return A reference to the accessor that provides access to the string identified by DMPI_UnderDesignation.
    */
  virtual uci::type::EmptyType& getDMPI_UnderDesignation() = 0;

  /** Sets the string identified by DMPI_UnderDesignation to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by DMPI_UnderDesignation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setDMPI_UnderDesignation(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by DMPI_UnderDesignation to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setDMPI_UnderDesignation(const std::string& value) = 0;

  /** Sets the string identified by DMPI_UnderDesignation to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setDMPI_UnderDesignation(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by DMPI_UnderDesignation.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by DMPI_UnderDesignation, false
    *      otherwise.
    */
  virtual bool isDMPI_UnderDesignation() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by DMPI_UnderDesignation.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by DMPI_UnderDesignation.
    */
  virtual uci::type::EmptyType& chooseDMPI_UnderDesignation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by EnduranceLow.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by EnduranceLow.
    */
  virtual const uci::type::EnduranceType& getEnduranceLow() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EnduranceLow.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EnduranceLow.
    */
  virtual uci::type::EnduranceType& getEnduranceLow() = 0;

  /** Sets the complex content identified by EnduranceLow to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EnduranceLow.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setEnduranceLow(const uci::type::EnduranceType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by EnduranceLow.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by EnduranceLow, false otherwise.
    */
  virtual bool isEnduranceLow() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by EnduranceLow.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by EnduranceLow.
    */
  virtual uci::type::EnduranceType& chooseEnduranceLow(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OffRoute.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OffRoute.
    */
  virtual const uci::type::ThresholdOffRouteTriggerDataType& getOffRoute() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OffRoute.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OffRoute.
    */
  virtual uci::type::ThresholdOffRouteTriggerDataType& getOffRoute() = 0;

  /** Sets the complex content identified by OffRoute to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OffRoute.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setOffRoute(const uci::type::ThresholdOffRouteTriggerDataType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OffRoute.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OffRoute, false otherwise.
    */
  virtual bool isOffRoute() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by OffRoute.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OffRoute.
    */
  virtual uci::type::ThresholdOffRouteTriggerDataType& chooseOffRoute(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ProximityConflict.
    *
    * @return A const reference to the accessor that provides access to the string identified by ProximityConflict.
    */
  virtual const uci::type::EmptyType& getProximityConflict() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ProximityConflict.
    *
    * @return A reference to the accessor that provides access to the string identified by ProximityConflict.
    */
  virtual uci::type::EmptyType& getProximityConflict() = 0;

  /** Sets the string identified by ProximityConflict to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ProximityConflict.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setProximityConflict(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by ProximityConflict to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setProximityConflict(const std::string& value) = 0;

  /** Sets the string identified by ProximityConflict to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setProximityConflict(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ProximityConflict.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ProximityConflict, false
    *      otherwise.
    */
  virtual bool isProximityConflict() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ProximityConflict.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by ProximityConflict.
    */
  virtual uci::type::EmptyType& chooseProximityConflict(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ReleasePointOutsideLAR.
    *
    * @return A const reference to the accessor that provides access to the string identified by ReleasePointOutsideLAR.
    */
  virtual const uci::type::EmptyType& getReleasePointOutsideLAR() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ReleasePointOutsideLAR.
    *
    * @return A reference to the accessor that provides access to the string identified by ReleasePointOutsideLAR.
    */
  virtual uci::type::EmptyType& getReleasePointOutsideLAR() = 0;

  /** Sets the string identified by ReleasePointOutsideLAR to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ReleasePointOutsideLAR.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setReleasePointOutsideLAR(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by ReleasePointOutsideLAR to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setReleasePointOutsideLAR(const std::string& value) = 0;

  /** Sets the string identified by ReleasePointOutsideLAR to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setReleasePointOutsideLAR(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ReleasePointOutsideLAR.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ReleasePointOutsideLAR, false
    *      otherwise.
    */
  virtual bool isReleasePointOutsideLAR() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ReleasePointOutsideLAR.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by ReleasePointOutsideLAR.
    */
  virtual uci::type::EmptyType& chooseReleasePointOutsideLAR(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by RouteConflict.
    *
    * @return A const reference to the accessor that provides access to the string identified by RouteConflict.
    */
  virtual const uci::type::EmptyType& getRouteConflict() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by RouteConflict.
    *
    * @return A reference to the accessor that provides access to the string identified by RouteConflict.
    */
  virtual uci::type::EmptyType& getRouteConflict() = 0;

  /** Sets the string identified by RouteConflict to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by RouteConflict.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setRouteConflict(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by RouteConflict to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setRouteConflict(const std::string& value) = 0;

  /** Sets the string identified by RouteConflict to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setRouteConflict(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RouteConflict.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RouteConflict, false otherwise.
    */
  virtual bool isRouteConflict() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by RouteConflict.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by RouteConflict.
    */
  virtual uci::type::EmptyType& chooseRouteConflict(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RouteVulnerability.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RouteVulnerability.
    */
  virtual const uci::type::PlanVulnerabilityType& getRouteVulnerability() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RouteVulnerability.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RouteVulnerability.
    */
  virtual uci::type::PlanVulnerabilityType& getRouteVulnerability() = 0;

  /** Sets the complex content identified by RouteVulnerability to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RouteVulnerability.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setRouteVulnerability(const uci::type::PlanVulnerabilityType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RouteVulnerability.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RouteVulnerability, false
    *      otherwise.
    */
  virtual bool isRouteVulnerability() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by RouteVulnerability.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RouteVulnerability.
    */
  virtual uci::type::PlanVulnerabilityType& chooseRouteVulnerability(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SystemStateChange.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SystemStateChange.
    */
  virtual const uci::type::SystemStateFilterType& getSystemStateChange() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemStateChange.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemStateChange.
    */
  virtual uci::type::SystemStateFilterType& getSystemStateChange() = 0;

  /** Sets the complex content identified by SystemStateChange to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemStateChange.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setSystemStateChange(const uci::type::SystemStateFilterType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SystemStateChange.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SystemStateChange, false
    *      otherwise.
    */
  virtual bool isSystemStateChange() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SystemStateChange.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SystemStateChange.
    */
  virtual uci::type::SystemStateFilterType& chooseSystemStateChange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by RequirementAdded.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by RequirementAdded.
    */
  virtual const uci::type::RequirementTriggerType& getRequirementAdded() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RequirementAdded.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RequirementAdded.
    */
  virtual uci::type::RequirementTriggerType& getRequirementAdded() = 0;

  /** Sets the complex content identified by RequirementAdded to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RequirementAdded.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setRequirementAdded(const uci::type::RequirementTriggerType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequirementAdded.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequirementAdded, false
    *      otherwise.
    */
  virtual bool isRequirementAdded() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementAdded.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementAdded.
    */
  virtual uci::type::RequirementTriggerType& chooseRequirementAdded(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * RequirementDependencyFailed.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      RequirementDependencyFailed.
    */
  virtual const uci::type::EmptyType& getRequirementDependencyFailed() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by RequirementDependencyFailed.
    *
    * @return A reference to the accessor that provides access to the string identified by RequirementDependencyFailed.
    */
  virtual uci::type::EmptyType& getRequirementDependencyFailed() = 0;

  /** Sets the string identified by RequirementDependencyFailed to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by RequirementDependencyFailed.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setRequirementDependencyFailed(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by RequirementDependencyFailed to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setRequirementDependencyFailed(const std::string& value) = 0;

  /** Sets the string identified by RequirementDependencyFailed to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setRequirementDependencyFailed(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequirementDependencyFailed.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequirementDependencyFailed,
    *      false otherwise.
    */
  virtual bool isRequirementDependencyFailed() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementDependencyFailed.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by RequirementDependencyFailed.
    */
  virtual uci::type::EmptyType& chooseRequirementDependencyFailed(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RequirementDropped.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RequirementDropped.
    */
  virtual const uci::type::RequirementTriggerType& getRequirementDropped() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RequirementDropped.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RequirementDropped.
    */
  virtual uci::type::RequirementTriggerType& getRequirementDropped() = 0;

  /** Sets the complex content identified by RequirementDropped to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RequirementDropped.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setRequirementDropped(const uci::type::RequirementTriggerType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequirementDropped.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequirementDropped, false
    *      otherwise.
    */
  virtual bool isRequirementDropped() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementDropped.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementDropped.
    */
  virtual uci::type::RequirementTriggerType& chooseRequirementDropped(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RequirementFailed.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RequirementFailed.
    */
  virtual const uci::type::RequirementFailedTriggerType& getRequirementFailed() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RequirementFailed.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RequirementFailed.
    */
  virtual uci::type::RequirementFailedTriggerType& getRequirementFailed() = 0;

  /** Sets the complex content identified by RequirementFailed to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RequirementFailed.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setRequirementFailed(const uci::type::RequirementFailedTriggerType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequirementFailed.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequirementFailed, false
    *      otherwise.
    */
  virtual bool isRequirementFailed() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementFailed.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementFailed.
    */
  virtual uci::type::RequirementFailedTriggerType& chooseRequirementFailed(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * RequirementChange.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      RequirementChange.
    */
  virtual const uci::type::RequirementTriggerType& getRequirementChange() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by RequirementChange.
    *
    * @return A reference to the accessor that provides access to the complex content identified by RequirementChange.
    */
  virtual uci::type::RequirementTriggerType& getRequirementChange() = 0;

  /** Sets the complex content identified by RequirementChange to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by RequirementChange.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setRequirementChange(const uci::type::RequirementTriggerType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequirementChange.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequirementChange, false
    *      otherwise.
    */
  virtual bool isRequirementChange() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementChange.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by RequirementChange.
    */
  virtual uci::type::RequirementTriggerType& chooseRequirementChange(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by RequirementTiming.
    *
    * @return A const reference to the accessor that provides access to the string identified by RequirementTiming.
    */
  virtual const uci::type::EmptyType& getRequirementTiming() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by RequirementTiming.
    *
    * @return A reference to the accessor that provides access to the string identified by RequirementTiming.
    */
  virtual uci::type::EmptyType& getRequirementTiming() = 0;

  /** Sets the string identified by RequirementTiming to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by RequirementTiming.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setRequirementTiming(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by RequirementTiming to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setRequirementTiming(const std::string& value) = 0;

  /** Sets the string identified by RequirementTiming to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setRequirementTiming(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by RequirementTiming.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by RequirementTiming, false
    *      otherwise.
    */
  virtual bool isRequirementTiming() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by RequirementTiming.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by RequirementTiming.
    */
  virtual uci::type::EmptyType& chooseRequirementTiming(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ZoneViolation.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ZoneViolation.
    */
  virtual const uci::type::ZoneViolationTriggerDataType& getZoneViolation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ZoneViolation.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ZoneViolation.
    */
  virtual uci::type::ZoneViolationTriggerDataType& getZoneViolation() = 0;

  /** Sets the complex content identified by ZoneViolation to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ZoneViolation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setZoneViolation(const uci::type::ZoneViolationTriggerDataType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ZoneViolation.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ZoneViolation, false otherwise.
    */
  virtual bool isZoneViolation() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ZoneViolation.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ZoneViolation.
    */
  virtual uci::type::ZoneViolationTriggerDataType& chooseZoneViolation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by OrbitConflict.
    *
    * @return A const reference to the accessor that provides access to the string identified by OrbitConflict.
    */
  virtual const uci::type::EmptyType& getOrbitConflict() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by OrbitConflict.
    *
    * @return A reference to the accessor that provides access to the string identified by OrbitConflict.
    */
  virtual uci::type::EmptyType& getOrbitConflict() = 0;

  /** Sets the string identified by OrbitConflict to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by OrbitConflict.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setOrbitConflict(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by OrbitConflict to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setOrbitConflict(const std::string& value) = 0;

  /** Sets the string identified by OrbitConflict to the contents of the string that is accessed by the specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setOrbitConflict(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OrbitConflict.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OrbitConflict, false otherwise.
    */
  virtual bool isOrbitConflict() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by OrbitConflict.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by OrbitConflict.
    */
  virtual uci::type::EmptyType& chooseOrbitConflict(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OffPlannedOrbit.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OffPlannedOrbit.
    */
  virtual const uci::type::ThresholdOffOrbitTriggerDataType& getOffPlannedOrbit() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OffPlannedOrbit.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OffPlannedOrbit.
    */
  virtual uci::type::ThresholdOffOrbitTriggerDataType& getOffPlannedOrbit() = 0;

  /** Sets the complex content identified by OffPlannedOrbit to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OffPlannedOrbit.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setOffPlannedOrbit(const uci::type::ThresholdOffOrbitTriggerDataType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by OffPlannedOrbit.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by OffPlannedOrbit, false
    *      otherwise.
    */
  virtual bool isOffPlannedOrbit() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by OffPlannedOrbit.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by OffPlannedOrbit.
    */
  virtual uci::type::ThresholdOffOrbitTriggerDataType& chooseOffPlannedOrbit(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SpacecraftEnduranceLow.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SpacecraftEnduranceLow.
    */
  virtual const uci::type::SatelliteEnduranceType& getSpacecraftEnduranceLow() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SpacecraftEnduranceLow.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SpacecraftEnduranceLow.
    */
  virtual uci::type::SatelliteEnduranceType& getSpacecraftEnduranceLow() = 0;

  /** Sets the complex content identified by SpacecraftEnduranceLow to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SpacecraftEnduranceLow.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setSpacecraftEnduranceLow(const uci::type::SatelliteEnduranceType& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SpacecraftEnduranceLow.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SpacecraftEnduranceLow, false
    *      otherwise.
    */
  virtual bool isSpacecraftEnduranceLow() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SpacecraftEnduranceLow.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by SpacecraftEnduranceLow.
    */
  virtual uci::type::SatelliteEnduranceType& chooseSpacecraftEnduranceLow(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * SpacecraftProximityConflict.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      SpacecraftProximityConflict.
    */
  virtual const uci::type::EmptyType& getSpacecraftProximityConflict() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by SpacecraftProximityConflict.
    *
    * @return A reference to the accessor that provides access to the string identified by SpacecraftProximityConflict.
    */
  virtual uci::type::EmptyType& getSpacecraftProximityConflict() = 0;

  /** Sets the string identified by SpacecraftProximityConflict to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by SpacecraftProximityConflict.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setSpacecraftProximityConflict(const uci::type::EmptyType& value) = 0;

  /** Sets the string identified by SpacecraftProximityConflict to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setSpacecraftProximityConflict(const std::string& value) = 0;

  /** Sets the string identified by SpacecraftProximityConflict to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setSpacecraftProximityConflict(const char* value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by SpacecraftProximityConflict.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by SpacecraftProximityConflict,
    *      false otherwise.
    */
  virtual bool isSpacecraftProximityConflict() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by SpacecraftProximityConflict.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the string identified by SpacecraftProximityConflict.
    */
  virtual uci::type::EmptyType& chooseSpacecraftProximityConflict(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ResponseID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ResponseID.
    */
  virtual const uci::type::ResponseID_Type& getResponseID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ResponseID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ResponseID.
    */
  virtual uci::type::ResponseID_Type& getResponseID() = 0;

  /** Sets the complex content identified by ResponseID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ResponseID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::PlanningByCaseTriggerType& setResponseID(const uci::type::ResponseID_Type& value) = 0;

  /** Returns whether this choice's "selection ordinal" is set to the choice identified by ResponseID.
    *
    * @return True if this choice's "selection ordinal" is set to the choice identified by ResponseID, false otherwise.
    */
  virtual bool isResponseID() const = 0;

  /** Sets this choice's "selection ordinal" to the choice identified by ResponseID.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available when the ordinal is set.
    *      The use of this parameter provides support for inheritable types. This parameter defaults to
    *      uci::base::accessorType::null that is used to indicate that the access methods associated with the chosen
    *      element shall provide access to data of the type that was specified for that element in the choice in the OMS
    *      schema, i.e. the chosen element's base type. If specified, this field must either be a type ID associated with
    *      the chosen element's base type or a type ID associated with a type that is derived from the chosen element's
    *      base type.
    * @return A reference to the accessor that provides access to the choice identified by ResponseID.
    */
  virtual uci::type::ResponseID_Type& chooseResponseID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  PlanningByCaseTriggerType() {
  }

  /** The destructor [only available to derived classes]. */
  ~PlanningByCaseTriggerType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The PlanningByCaseTriggerType to copy from.
    */
  PlanningByCaseTriggerType(const PlanningByCaseTriggerType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this PlanningByCaseTriggerType to the contents of the
    * PlanningByCaseTriggerType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The PlanningByCaseTriggerType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this PlanningByCaseTriggerType.
    * @return A reference to this PlanningByCaseTriggerType.
    */
  PlanningByCaseTriggerType& operator=(const PlanningByCaseTriggerType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_PLANNINGBYCASETRIGGERTYPE_H

