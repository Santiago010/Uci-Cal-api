/** @file CS_SignalType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CS_SIGNALTYPE_H
#define UCI_TYPE_CS_SIGNALTYPE_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "ForeignKeyType.h"
#include "FrequencyRangeType.h"
#include "PolarizationEnum.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type represents an associated or reference signal for a CounterSpace engagement. */
class CS_SignalType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new CS_SignalType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CS_SignalType.
    */
  static UCI_EXPORT CS_SignalType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new CS_SignalType initializing the data accessed by the new CS_SignalType using the data
    * accessed by the specified CS_SignalType (cloning).
    *
    * @param accessor The CS_SignalType that provides access to the data that is to be used to initialize the data accessed
    *      by the new created CS_SignalType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed CS_SignalType.
    */
  static UCI_EXPORT CS_SignalType& create(const CS_SignalType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified CS_SignalType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The CS_SignalType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(CS_SignalType& accessor);

  /** Returns this accessor's type constant, i.e. cS_SignalType.
    *
    * @return This accessor's type constant, i.e. cS_SignalType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::cS_SignalType;
  }

  /** Returns the version that was initialized from the uci:version attribute of CS_SignalType.
    *
    * @return The version that was initialized from the uci:version attribute of CS_SignalType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const CS_SignalType& accessor) = 0;

  /** Additional signals IDs overserved within or associated with the tasked signal. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ForeignKeyType, uci::type::accessorType::foreignKeyType> ExistingSignal;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Signal.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Signal.
    */
  virtual const uci::type::ForeignKeyType& getSignal() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Signal.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Signal.
    */
  virtual uci::type::ForeignKeyType& getSignal() = 0;

  /** Sets the complex content identified by Signal to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Signal.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SignalType& setSignal(const uci::type::ForeignKeyType& value) = 0;

  /** Enables the Element identified by Signal.
    *
    * @param type = uci::base::accessorType::null The type of data that is to be made available for the element. The use of
    *      this parameter provides support for inheritable types. This parameter defaults to uci::base::accessorType::null
    *      that is used to indicate that the access methods associated with the element shall provide access to data of the
    *      type that was specified for that element in the OMS schema, i.e. the element's base type. If specified, this
    *      field must either be a type ID associated with the element's base type or a type ID associated with a type that
    *      is derived from the element's base type.
    * @return A reference to the accessor that provides access to the complex content identified by Signal.
    */
  virtual uci::type::ForeignKeyType& enableSignal(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by UplinkFrequency.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by UplinkFrequency.
    */
  virtual const uci::type::FrequencyRangeType& getUplinkFrequency() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by UplinkFrequency.
    *
    * @return A reference to the accessor that provides access to the complex content identified by UplinkFrequency.
    */
  virtual uci::type::FrequencyRangeType& getUplinkFrequency() = 0;

  /** Sets the complex content identified by UplinkFrequency to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by UplinkFrequency.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SignalType& setUplinkFrequency(const uci::type::FrequencyRangeType& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by UplinkPolarization.
    *
    * @return A const reference to the value of the enumeration identified by UplinkPolarization.
    */
  virtual const uci::type::PolarizationEnum& getUplinkPolarization() const = 0;

  /** Returns a reference to the value of the enumeration identified by UplinkPolarization.
    *
    * @return A reference to the value of the enumeration identified by UplinkPolarization.
    */
  virtual uci::type::PolarizationEnum& getUplinkPolarization() = 0;

  /** Sets the value of the enumeration identified by UplinkPolarization.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SignalType& setUplinkPolarization(const uci::type::PolarizationEnum& value) = 0;

  /** Sets the value of the enumeration identified by UplinkPolarization.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SignalType& setUplinkPolarization(uci::type::PolarizationEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * DownlinkFrequency.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      DownlinkFrequency.
    */
  virtual const uci::type::FrequencyRangeType& getDownlinkFrequency() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DownlinkFrequency.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DownlinkFrequency.
    */
  virtual uci::type::FrequencyRangeType& getDownlinkFrequency() = 0;

  /** Sets the complex content identified by DownlinkFrequency to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DownlinkFrequency.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SignalType& setDownlinkFrequency(const uci::type::FrequencyRangeType& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by DownlinkPolarization.
    *
    * @return A const reference to the value of the enumeration identified by DownlinkPolarization.
    */
  virtual const uci::type::PolarizationEnum& getDownlinkPolarization() const = 0;

  /** Returns a reference to the value of the enumeration identified by DownlinkPolarization.
    *
    * @return A reference to the value of the enumeration identified by DownlinkPolarization.
    */
  virtual uci::type::PolarizationEnum& getDownlinkPolarization() = 0;

  /** Sets the value of the enumeration identified by DownlinkPolarization.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SignalType& setDownlinkPolarization(const uci::type::PolarizationEnum& value) = 0;

  /** Sets the value of the enumeration identified by DownlinkPolarization.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SignalType& setDownlinkPolarization(uci::type::PolarizationEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the bounded list identified by ExistingSignal.
    *
    * @return A const reference to the bounded list identified by ExistingSignal.
    */
  virtual const uci::type::CS_SignalType::ExistingSignal& getExistingSignal() const = 0;

  /** Returns a reference to the bounded list identified by ExistingSignal.
    *
    * @return A reference to the bounded list identified by ExistingSignal.
    */
  virtual uci::type::CS_SignalType::ExistingSignal& getExistingSignal() = 0;

  /** Sets the bounded list identified by ExistingSignal.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::CS_SignalType& setExistingSignal(const uci::type::CS_SignalType::ExistingSignal& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  CS_SignalType() {
  }

  /** The destructor [only available to derived classes]. */
  ~CS_SignalType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The CS_SignalType to copy from.
    */
  CS_SignalType(const CS_SignalType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this CS_SignalType to the contents of the CS_SignalType on the right
    * hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The CS_SignalType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this CS_SignalType.
    * @return A reference to this CS_SignalType.
    */
  CS_SignalType& operator=(const CS_SignalType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_CS_SIGNALTYPE_H

