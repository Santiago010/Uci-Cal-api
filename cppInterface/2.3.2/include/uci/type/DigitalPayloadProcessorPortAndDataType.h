/** @file DigitalPayloadProcessorPortAndDataType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_DIGITALPAYLOADPROCESSORPORTANDDATATYPE_H
#define UCI_TYPE_DIGITALPAYLOADPROCESSORPORTANDDATATYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/UnsignedIntAccessor.h"
#include "uci/base/export.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class DigitalPayloadProcessorPortAndDataType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new DigitalPayloadProcessorPortAndDataType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DigitalPayloadProcessorPortAndDataType.
    */
  static UCI_EXPORT DigitalPayloadProcessorPortAndDataType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new DigitalPayloadProcessorPortAndDataType initializing the data accessed by the new
    * DigitalPayloadProcessorPortAndDataType using the data accessed by the specified
    * DigitalPayloadProcessorPortAndDataType (cloning).
    *
    * @param accessor The DigitalPayloadProcessorPortAndDataType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created DigitalPayloadProcessorPortAndDataType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed DigitalPayloadProcessorPortAndDataType.
    */
  static UCI_EXPORT DigitalPayloadProcessorPortAndDataType& create(const DigitalPayloadProcessorPortAndDataType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified DigitalPayloadProcessorPortAndDataType. Use of the specified accessor after it has
    * been destroyed will result in undefined behavior.
    *
    * @param accessor The DigitalPayloadProcessorPortAndDataType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(DigitalPayloadProcessorPortAndDataType& accessor);

  /** Returns this accessor's type constant, i.e. digitalPayloadProcessorPortAndDataType.
    *
    * @return This accessor's type constant, i.e. digitalPayloadProcessorPortAndDataType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::digitalPayloadProcessorPortAndDataType;
  }

  /** Returns the version that was initialized from the uci:version attribute of DigitalPayloadProcessorPortAndDataType.
    *
    * @return The version that was initialized from the uci:version attribute of DigitalPayloadProcessorPortAndDataType.
    */
  static std::string getUCITypeVersion() {
    return "000.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const DigitalPayloadProcessorPortAndDataType& accessor) = 0;

  /** The index of a DataIO construct described in the DPP portion of the Shared Aperture InformationFile. The set of
    * DataIO constructs, which may be multi-layered, describes the connection of the NetworkPort to the ProcessingInstance.
    * If no DataIO_Instance is present, it may be because there is only one possible path from the NetworkPort to the
    * ProcessingInstance, or because the ProcessingInstanceIndex and/or DataIOInstanceIndex are "don't care" at the time of
    * the message, such as in the RF_ResourceAllocationRequest. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::base::UnsignedIntAccessor, uci::base::accessorType::unsignedIntAccessor> DataIO_InstanceIndex;

  /** The number of the Network Interface Card/Port on the DPP, defined in the Shared Aperture Information Files. That is,
    * if the DPP has two fiber ports for IQ data transfer, they are numbered in the MFP Information File, and the "Network
    * Port" identifies which of the numbered fibers/ports is part of the Digital Payload Processing usage. [Occurrences:
    * Minimum: 1; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::base::UnsignedIntAccessor, uci::base::accessorType::unsignedIntAccessor> NetworkPortIndex;

  /** The index of a Processing Instance described in the DPP portion of the Shared Aperture Information Files, describing
    * an allocatable processing segment and memory combination. If no ProcessingInstanceIndex is present, it may be because
    * there is only one possible processor and memory combination available on the DPP card, (which may be because the DPP
    * only supports one MFC at a time), or because the ProcessingInstanceIndex is "don't care" at the time of the message,
    * such as in the RF_ResourceAllocationRequest. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::base::UnsignedIntAccessor, uci::base::accessorType::unsignedIntAccessor> ProcessingInstanceIndex;

  /** Returns a const reference to the bounded list identified by DataIO_InstanceIndex.
    *
    * @return A const reference to the bounded list identified by DataIO_InstanceIndex.
    */
  virtual const uci::type::DigitalPayloadProcessorPortAndDataType::DataIO_InstanceIndex& getDataIO_InstanceIndex() const = 0;

  /** Returns a reference to the bounded list identified by DataIO_InstanceIndex.
    *
    * @return A reference to the bounded list identified by DataIO_InstanceIndex.
    */
  virtual uci::type::DigitalPayloadProcessorPortAndDataType::DataIO_InstanceIndex& getDataIO_InstanceIndex() = 0;

  /** Sets the bounded list identified by DataIO_InstanceIndex.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DigitalPayloadProcessorPortAndDataType& setDataIO_InstanceIndex(const uci::type::DigitalPayloadProcessorPortAndDataType::DataIO_InstanceIndex& value) = 0;

  /** Returns a const reference to the bounded list identified by NetworkPortIndex.
    *
    * @return A const reference to the bounded list identified by NetworkPortIndex.
    */
  virtual const uci::type::DigitalPayloadProcessorPortAndDataType::NetworkPortIndex& getNetworkPortIndex() const = 0;

  /** Returns a reference to the bounded list identified by NetworkPortIndex.
    *
    * @return A reference to the bounded list identified by NetworkPortIndex.
    */
  virtual uci::type::DigitalPayloadProcessorPortAndDataType::NetworkPortIndex& getNetworkPortIndex() = 0;

  /** Sets the bounded list identified by NetworkPortIndex.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DigitalPayloadProcessorPortAndDataType& setNetworkPortIndex(const uci::type::DigitalPayloadProcessorPortAndDataType::NetworkPortIndex& value) = 0;

  /** Returns a const reference to the bounded list identified by ProcessingInstanceIndex.
    *
    * @return A const reference to the bounded list identified by ProcessingInstanceIndex.
    */
  virtual const uci::type::DigitalPayloadProcessorPortAndDataType::ProcessingInstanceIndex& getProcessingInstanceIndex() const = 0;

  /** Returns a reference to the bounded list identified by ProcessingInstanceIndex.
    *
    * @return A reference to the bounded list identified by ProcessingInstanceIndex.
    */
  virtual uci::type::DigitalPayloadProcessorPortAndDataType::ProcessingInstanceIndex& getProcessingInstanceIndex() = 0;

  /** Sets the bounded list identified by ProcessingInstanceIndex.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::DigitalPayloadProcessorPortAndDataType& setProcessingInstanceIndex(const uci::type::DigitalPayloadProcessorPortAndDataType::ProcessingInstanceIndex& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  DigitalPayloadProcessorPortAndDataType() {
  }

  /** The destructor [only available to derived classes]. */
  ~DigitalPayloadProcessorPortAndDataType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The DigitalPayloadProcessorPortAndDataType to copy from.
    */
  DigitalPayloadProcessorPortAndDataType(const DigitalPayloadProcessorPortAndDataType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this DigitalPayloadProcessorPortAndDataType to the contents of the
    * DigitalPayloadProcessorPortAndDataType on the right hand side (rhs) of the assignment operator [only available to
    * derived classes].
    *
    * @param rhs The DigitalPayloadProcessorPortAndDataType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this DigitalPayloadProcessorPortAndDataType.
    * @return A reference to this DigitalPayloadProcessorPortAndDataType.
    */
  DigitalPayloadProcessorPortAndDataType& operator=(const DigitalPayloadProcessorPortAndDataType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_DIGITALPAYLOADPROCESSORPORTANDDATATYPE_H

