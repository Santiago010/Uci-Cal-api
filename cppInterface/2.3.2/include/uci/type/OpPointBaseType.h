/** @file OpPointBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_OPPOINTBASETYPE_H
#define UCI_TYPE_OPPOINTBASETYPE_H

#include "uci/base/BoundedList.h"
#include "uci/type/AnglePairType.h"
#include "uci/type/OpBaseType.h"
#include "uci/type/OpPointChoiceType.h"
#include "uci/type/OpPointID_Type.h"
#include "uci/type/RelativeDirectionEnum.h"
#include "uci/type/SafeAltitudeType.h"
#include "uci/type/SystemConfigurationType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Base Type for OpPointMDT, which does not include a Category. */
class OpPointBaseType : public virtual OpBaseType {
public:

  /** Returns this accessor's type constant, i.e. opPointBaseType.
    *
    * @return This accessor's type constant, i.e. opPointBaseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::opPointBaseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OpPointBaseType.
    *
    * @return The version that was initialized from the uci:version attribute of OpPointBaseType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OpPointBaseType& accessor) = 0;

  /** Indicates a System which the OpPoint is applicable for and its planned configuration/state upon arriving at the
    * OpPoint. If omitted, the OpPoint applies to all Systems. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::SystemConfigurationType, uci::type::accessorType::systemConfigurationType> SystemConfiguration;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OpPointID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OpPointID.
    */
  virtual const uci::type::OpPointID_Type& getOpPointID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OpPointID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OpPointID.
    */
  virtual uci::type::OpPointID_Type& getOpPointID() = 0;

  /** Sets the complex content identified by OpPointID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OpPointID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpPointBaseType& setOpPointID(const uci::type::OpPointID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by PointChoice.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by PointChoice.
    */
  virtual const uci::type::OpPointChoiceType& getPointChoice() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by PointChoice.
    *
    * @return A reference to the accessor that provides access to the complex content identified by PointChoice.
    */
  virtual uci::type::OpPointChoiceType& getPointChoice() = 0;

  /** Sets the complex content identified by PointChoice to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by PointChoice.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpPointBaseType& setPointChoice(const uci::type::OpPointChoiceType& value) = 0;

  /** Returns a const reference to the bounded list identified by SystemConfiguration.
    *
    * @return A const reference to the bounded list identified by SystemConfiguration.
    */
  virtual const uci::type::OpPointBaseType::SystemConfiguration& getSystemConfiguration() const = 0;

  /** Returns a reference to the bounded list identified by SystemConfiguration.
    *
    * @return A reference to the bounded list identified by SystemConfiguration.
    */
  virtual uci::type::OpPointBaseType::SystemConfiguration& getSystemConfiguration() = 0;

  /** Sets the bounded list identified by SystemConfiguration.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpPointBaseType& setSystemConfiguration(const uci::type::OpPointBaseType::SystemConfiguration& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by TurnDirection.
    *
    * @return A const reference to the value of the enumeration identified by TurnDirection.
    */
  virtual const uci::type::RelativeDirectionEnum& getTurnDirection() const = 0;

  /** Returns a reference to the value of the enumeration identified by TurnDirection.
    *
    * @return A reference to the value of the enumeration identified by TurnDirection.
    */
  virtual uci::type::RelativeDirectionEnum& getTurnDirection() = 0;

  /** Sets the value of the enumeration identified by TurnDirection.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpPointBaseType& setTurnDirection(const uci::type::RelativeDirectionEnum& value) = 0;

  /** Sets the value of the enumeration identified by TurnDirection.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpPointBaseType& setTurnDirection(uci::type::RelativeDirectionEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by TurnDirection exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TurnDirection is enabled or not.
    */
  virtual bool hasTurnDirection() const = 0;

  /** Enables the Element identified by TurnDirection.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by TurnDirection.
    */
  virtual uci::type::RelativeDirectionEnum& enableTurnDirection(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TurnDirection.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpPointBaseType& clearTurnDirection() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * IngressConstraint.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      IngressConstraint.
    */
  virtual const uci::type::AnglePairType& getIngressConstraint() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by IngressConstraint.
    *
    * @return A reference to the accessor that provides access to the complex content identified by IngressConstraint.
    */
  virtual uci::type::AnglePairType& getIngressConstraint() = 0;

  /** Sets the complex content identified by IngressConstraint to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by IngressConstraint.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpPointBaseType& setIngressConstraint(const uci::type::AnglePairType& value) = 0;

  /** Returns whether the Element identified by IngressConstraint exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by IngressConstraint is enabled or not.
    */
  virtual bool hasIngressConstraint() const = 0;

  /** Enables the Element identified by IngressConstraint.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by IngressConstraint.
    */
  virtual uci::type::AnglePairType& enableIngressConstraint(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by IngressConstraint.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpPointBaseType& clearIngressConstraint() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by SafeAltitude.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by SafeAltitude.
    */
  virtual const uci::type::SafeAltitudeType& getSafeAltitude() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SafeAltitude.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SafeAltitude.
    */
  virtual uci::type::SafeAltitudeType& getSafeAltitude() = 0;

  /** Sets the complex content identified by SafeAltitude to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SafeAltitude.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpPointBaseType& setSafeAltitude(const uci::type::SafeAltitudeType& value) = 0;

  /** Returns whether the Element identified by SafeAltitude exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SafeAltitude is enabled or not.
    */
  virtual bool hasSafeAltitude() const = 0;

  /** Enables the Element identified by SafeAltitude.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SafeAltitude.
    */
  virtual uci::type::SafeAltitudeType& enableSafeAltitude(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SafeAltitude.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OpPointBaseType& clearSafeAltitude() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OpPointBaseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OpPointBaseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OpPointBaseType to copy from.
    */
  OpPointBaseType(const OpPointBaseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OpPointBaseType to the contents of the OpPointBaseType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The OpPointBaseType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this OpPointBaseType.
    * @return A reference to this OpPointBaseType.
    */
  OpPointBaseType& operator=(const OpPointBaseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_OPPOINTBASETYPE_H

