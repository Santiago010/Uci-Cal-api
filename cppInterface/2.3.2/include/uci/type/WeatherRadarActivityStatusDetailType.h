/** @file WeatherRadarActivityStatusDetailType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_WEATHERRADARACTIVITYSTATUSDETAILTYPE_H
#define UCI_TYPE_WEATHERRADARACTIVITYSTATUSDETAILTYPE_H

#include "../base/Accessor.h"
#include "../base/UnsignedIntAccessor.h"
#include "../base/export.h"
#include "DateTimeType.h"
#include "DecibelType.h"
#include "DurationType.h"
#include "PercentType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class WeatherRadarActivityStatusDetailType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new WeatherRadarActivityStatusDetailType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed WeatherRadarActivityStatusDetailType.
    */
  static UCI_EXPORT WeatherRadarActivityStatusDetailType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new WeatherRadarActivityStatusDetailType initializing the data accessed by the new
    * WeatherRadarActivityStatusDetailType using the data accessed by the specified WeatherRadarActivityStatusDetailType
    * (cloning).
    *
    * @param accessor The WeatherRadarActivityStatusDetailType that provides access to the data that is to be used to
    *      initialize the data accessed by the new created WeatherRadarActivityStatusDetailType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed WeatherRadarActivityStatusDetailType.
    */
  static UCI_EXPORT WeatherRadarActivityStatusDetailType& create(const WeatherRadarActivityStatusDetailType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified WeatherRadarActivityStatusDetailType. Use of the specified accessor after it has
    * been destroyed will result in undefined behavior.
    *
    * @param accessor The WeatherRadarActivityStatusDetailType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(WeatherRadarActivityStatusDetailType& accessor);

  /** Returns this accessor's type constant, i.e. weatherRadarActivityStatusDetailType.
    *
    * @return This accessor's type constant, i.e. weatherRadarActivityStatusDetailType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::weatherRadarActivityStatusDetailType;
  }

  /** Returns the version that was initialized from the uci:version attribute of WeatherRadarActivityStatusDetailType.
    *
    * @return The version that was initialized from the uci:version attribute of WeatherRadarActivityStatusDetailType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const WeatherRadarActivityStatusDetailType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by NumberOfTimesSearched.
    *
    * @return The value of the simple primitive data type identified by NumberOfTimesSearched.
    */
  virtual xs::UnsignedInt getNumberOfTimesSearched() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by NumberOfTimesSearched.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& setNumberOfTimesSearched(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by NumberOfTimesSearched exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by NumberOfTimesSearched is enabled or not.
    */
  virtual bool hasNumberOfTimesSearched() const = 0;

  /** Clears (disabled) the Element identified by NumberOfTimesSearched.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& clearNumberOfTimesSearched() = 0;

  /** Returns the value of the SimplePrimitive data type identified by TimeLastSearched.
    *
    * @return The value of the simple primitive data type identified by TimeLastSearched.
    */
  virtual uci::type::DateTimeTypeValue getTimeLastSearched() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TimeLastSearched.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& setTimeLastSearched(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by TimeLastSearched exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TimeLastSearched is enabled or not.
    */
  virtual bool hasTimeLastSearched() const = 0;

  /** Clears (disabled) the Element identified by TimeLastSearched.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& clearTimeLastSearched() = 0;

  /** Returns the value of the SimplePrimitive data type identified by Attempts.
    *
    * @return The value of the simple primitive data type identified by Attempts.
    */
  virtual xs::UnsignedInt getAttempts() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Attempts.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& setAttempts(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by Attempts exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Attempts is enabled or not.
    */
  virtual bool hasAttempts() const = 0;

  /** Clears (disabled) the Element identified by Attempts.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& clearAttempts() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ActualRevisitPeriod.
    *
    * @return The value of the simple primitive data type identified by ActualRevisitPeriod.
    */
  virtual uci::type::DurationTypeValue getActualRevisitPeriod() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ActualRevisitPeriod.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& setActualRevisitPeriod(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by ActualRevisitPeriod exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActualRevisitPeriod is enabled or not.
    */
  virtual bool hasActualRevisitPeriod() const = 0;

  /** Clears (disabled) the Element identified by ActualRevisitPeriod.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& clearActualRevisitPeriod() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PercentageInFOR.
    *
    * @return The value of the simple primitive data type identified by PercentageInFOR.
    */
  virtual uci::type::PercentTypeValue getPercentageInFOR() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PercentageInFOR.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& setPercentageInFOR(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by PercentageInFOR exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PercentageInFOR is enabled or not.
    */
  virtual bool hasPercentageInFOR() const = 0;

  /** Clears (disabled) the Element identified by PercentageInFOR.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& clearPercentageInFOR() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ActualStartTime.
    *
    * @return The value of the simple primitive data type identified by ActualStartTime.
    */
  virtual uci::type::DateTimeTypeValue getActualStartTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ActualStartTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& setActualStartTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by ActualStartTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActualStartTime is enabled or not.
    */
  virtual bool hasActualStartTime() const = 0;

  /** Clears (disabled) the Element identified by ActualStartTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& clearActualStartTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ActualStopTime.
    *
    * @return The value of the simple primitive data type identified by ActualStopTime.
    */
  virtual uci::type::DateTimeTypeValue getActualStopTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ActualStopTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& setActualStopTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by ActualStopTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ActualStopTime is enabled or not.
    */
  virtual bool hasActualStopTime() const = 0;

  /** Clears (disabled) the Element identified by ActualStopTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& clearActualStopTime() = 0;

  /** Returns the value of the SimplePrimitive data type identified by PercentSearched.
    *
    * @return The value of the simple primitive data type identified by PercentSearched.
    */
  virtual uci::type::PercentTypeValue getPercentSearched() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by PercentSearched.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& setPercentSearched(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by PercentSearched exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PercentSearched is enabled or not.
    */
  virtual bool hasPercentSearched() const = 0;

  /** Clears (disabled) the Element identified by PercentSearched.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& clearPercentSearched() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ProductsProduced.
    *
    * @return The value of the simple primitive data type identified by ProductsProduced.
    */
  virtual xs::UnsignedInt getProductsProduced() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ProductsProduced.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& setProductsProduced(xs::UnsignedInt value) = 0;

  /** Returns whether the Element identified by ProductsProduced exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProductsProduced is enabled or not.
    */
  virtual bool hasProductsProduced() const = 0;

  /** Clears (disabled) the Element identified by ProductsProduced.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& clearProductsProduced() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EstimatedERP.
    *
    * @return The value of the simple primitive data type identified by EstimatedERP.
    */
  virtual uci::type::DecibelTypeValue getEstimatedERP() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EstimatedERP.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& setEstimatedERP(uci::type::DecibelTypeValue value) = 0;

  /** Returns whether the Element identified by EstimatedERP exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EstimatedERP is enabled or not.
    */
  virtual bool hasEstimatedERP() const = 0;

  /** Clears (disabled) the Element identified by EstimatedERP.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::WeatherRadarActivityStatusDetailType& clearEstimatedERP() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  WeatherRadarActivityStatusDetailType() {
  }

  /** The destructor [only available to derived classes]. */
  ~WeatherRadarActivityStatusDetailType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The WeatherRadarActivityStatusDetailType to copy from.
    */
  WeatherRadarActivityStatusDetailType(const WeatherRadarActivityStatusDetailType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this WeatherRadarActivityStatusDetailType to the contents of the
    * WeatherRadarActivityStatusDetailType on the right hand side (rhs) of the assignment operator [only available to
    * derived classes].
    *
    * @param rhs The WeatherRadarActivityStatusDetailType on the right hand side (rhs) of the assignment operator whose
    *      contents are used to set the contents of this WeatherRadarActivityStatusDetailType.
    * @return A reference to this WeatherRadarActivityStatusDetailType.
    */
  WeatherRadarActivityStatusDetailType& operator=(const WeatherRadarActivityStatusDetailType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_WEATHERRADARACTIVITYSTATUSDETAILTYPE_H

