/** @file AccessEventType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ACCESSEVENTTYPE_H
#define UCI_TYPE_ACCESSEVENTTYPE_H

#include "../base/Accessor.h"
#include "../base/export.h"
#include "AccessEffortEnum.h"
#include "DateTimeType.h"
#include "DistanceType.h"
#include "DurationType.h"
#include "EnduranceMultiStandardType.h"
#include "KinematicsMultiStandardType.h"
#include "ManeuverMultiStandardType.h"
#include "PercentType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Specifies the parameters for the AccessEvent. */
class AccessEventType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new AccessEventType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AccessEventType.
    */
  static UCI_EXPORT AccessEventType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new AccessEventType initializing the data accessed by the new AccessEventType using the data
    * accessed by the specified AccessEventType (cloning).
    *
    * @param accessor The AccessEventType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created AccessEventType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AccessEventType.
    */
  static UCI_EXPORT AccessEventType& create(const AccessEventType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified AccessEventType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The AccessEventType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(AccessEventType& accessor);

  /** Returns this accessor's type constant, i.e. accessEventType.
    *
    * @return This accessor's type constant, i.e. accessEventType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::accessEventType;
  }

  /** Returns the version that was initialized from the uci:version attribute of AccessEventType.
    *
    * @return The version that was initialized from the uci:version attribute of AccessEventType.
    */
  static std::string getUCITypeVersion() {
    return "003.000.003.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AccessEventType& accessor) = 0;

  /** Returns a const reference to the value of the enumeration identified by Effort.
    *
    * @return A const reference to the value of the enumeration identified by Effort.
    */
  virtual const uci::type::AccessEffortEnum& getEffort() const = 0;

  /** Returns a reference to the value of the enumeration identified by Effort.
    *
    * @return A reference to the value of the enumeration identified by Effort.
    */
  virtual uci::type::AccessEffortEnum& getEffort() = 0;

  /** Sets the value of the enumeration identified by Effort.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& setEffort(const uci::type::AccessEffortEnum& value) = 0;

  /** Sets the value of the enumeration identified by Effort.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& setEffort(uci::type::AccessEffortEnum::EnumerationItem value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Time.
    *
    * @return The value of the simple primitive data type identified by Time.
    */
  virtual uci::type::DateTimeTypeValue getTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Time.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& setTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by Duration.
    *
    * @return The value of the simple primitive data type identified by Duration.
    */
  virtual uci::type::DurationTypeValue getDuration() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by Duration.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& setDuration(uci::type::DurationTypeValue value) = 0;

  /** Returns whether the Element identified by Duration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Duration is enabled or not.
    */
  virtual bool hasDuration() const = 0;

  /** Clears (disabled) the Element identified by Duration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& clearDuration() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ProbabilityOfAccessAttempt.
    *
    * @return The value of the simple primitive data type identified by ProbabilityOfAccessAttempt.
    */
  virtual uci::type::PercentTypeValue getProbabilityOfAccessAttempt() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ProbabilityOfAccessAttempt.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& setProbabilityOfAccessAttempt(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by ProbabilityOfAccessAttempt exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProbabilityOfAccessAttempt is enabled or not.
    */
  virtual bool hasProbabilityOfAccessAttempt() const = 0;

  /** Clears (disabled) the Element identified by ProbabilityOfAccessAttempt.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& clearProbabilityOfAccessAttempt() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ProbabilityOfSuccessfulAccess.
    *
    * @return The value of the simple primitive data type identified by ProbabilityOfSuccessfulAccess.
    */
  virtual uci::type::PercentTypeValue getProbabilityOfSuccessfulAccess() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ProbabilityOfSuccessfulAccess.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& setProbabilityOfSuccessfulAccess(uci::type::PercentTypeValue value) = 0;

  /** Returns whether the Element identified by ProbabilityOfSuccessfulAccess exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ProbabilityOfSuccessfulAccess is enabled or not.
    */
  virtual bool hasProbabilityOfSuccessfulAccess() const = 0;

  /** Clears (disabled) the Element identified by ProbabilityOfSuccessfulAccess.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& clearProbabilityOfSuccessfulAccess() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SubjectObjectKinematics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SubjectObjectKinematics.
    */
  virtual const uci::type::KinematicsMultiStandardType& getSubjectObjectKinematics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * SubjectObjectKinematics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      SubjectObjectKinematics.
    */
  virtual uci::type::KinematicsMultiStandardType& getSubjectObjectKinematics() = 0;

  /** Sets the complex content identified by SubjectObjectKinematics to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SubjectObjectKinematics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& setSubjectObjectKinematics(const uci::type::KinematicsMultiStandardType& value) = 0;

  /** Returns whether the Element identified by SubjectObjectKinematics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SubjectObjectKinematics is enabled or not.
    */
  virtual bool hasSubjectObjectKinematics() const = 0;

  /** Enables the Element identified by SubjectObjectKinematics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      SubjectObjectKinematics.
    */
  virtual uci::type::KinematicsMultiStandardType& enableSubjectObjectKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SubjectObjectKinematics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& clearSubjectObjectKinematics() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AssessedObjectKinematics.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AssessedObjectKinematics.
    */
  virtual const uci::type::KinematicsMultiStandardType& getAssessedObjectKinematics() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * AssessedObjectKinematics.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AssessedObjectKinematics.
    */
  virtual uci::type::KinematicsMultiStandardType& getAssessedObjectKinematics() = 0;

  /** Sets the complex content identified by AssessedObjectKinematics to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AssessedObjectKinematics.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& setAssessedObjectKinematics(const uci::type::KinematicsMultiStandardType& value) = 0;

  /** Returns whether the Element identified by AssessedObjectKinematics exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AssessedObjectKinematics is enabled or not.
    */
  virtual bool hasAssessedObjectKinematics() const = 0;

  /** Enables the Element identified by AssessedObjectKinematics.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      AssessedObjectKinematics.
    */
  virtual uci::type::KinematicsMultiStandardType& enableAssessedObjectKinematics(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AssessedObjectKinematics.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& clearAssessedObjectKinematics() = 0;

  /** Returns the value of the SimplePrimitive data type identified by ObjectSeparation.
    *
    * @return The value of the simple primitive data type identified by ObjectSeparation.
    */
  virtual uci::type::DistanceTypeValue getObjectSeparation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ObjectSeparation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& setObjectSeparation(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by ObjectSeparation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ObjectSeparation is enabled or not.
    */
  virtual bool hasObjectSeparation() const = 0;

  /** Clears (disabled) the Element identified by ObjectSeparation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& clearObjectSeparation() = 0;

  /** Returns the value of the SimplePrimitive data type identified by UnambiguousTime.
    *
    * @return The value of the simple primitive data type identified by UnambiguousTime.
    */
  virtual uci::type::DateTimeTypeValue getUnambiguousTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by UnambiguousTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& setUnambiguousTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by UnambiguousTime exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by UnambiguousTime is enabled or not.
    */
  virtual bool hasUnambiguousTime() const = 0;

  /** Clears (disabled) the Element identified by UnambiguousTime.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& clearUnambiguousTime() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ResourceConsumption.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ResourceConsumption.
    */
  virtual const uci::type::EnduranceMultiStandardType& getResourceConsumption() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ResourceConsumption.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ResourceConsumption.
    */
  virtual uci::type::EnduranceMultiStandardType& getResourceConsumption() = 0;

  /** Sets the complex content identified by ResourceConsumption to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ResourceConsumption.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& setResourceConsumption(const uci::type::EnduranceMultiStandardType& value) = 0;

  /** Returns whether the Element identified by ResourceConsumption exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ResourceConsumption is enabled or not.
    */
  virtual bool hasResourceConsumption() const = 0;

  /** Enables the Element identified by ResourceConsumption.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ResourceConsumption.
    */
  virtual uci::type::EnduranceMultiStandardType& enableResourceConsumption(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ResourceConsumption.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& clearResourceConsumption() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * AssessedObjectManeuver.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      AssessedObjectManeuver.
    */
  virtual const uci::type::ManeuverMultiStandardType& getAssessedObjectManeuver() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AssessedObjectManeuver.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AssessedObjectManeuver.
    */
  virtual uci::type::ManeuverMultiStandardType& getAssessedObjectManeuver() = 0;

  /** Sets the complex content identified by AssessedObjectManeuver to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AssessedObjectManeuver.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& setAssessedObjectManeuver(const uci::type::ManeuverMultiStandardType& value) = 0;

  /** Returns whether the Element identified by AssessedObjectManeuver exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AssessedObjectManeuver is enabled or not.
    */
  virtual bool hasAssessedObjectManeuver() const = 0;

  /** Enables the Element identified by AssessedObjectManeuver.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by AssessedObjectManeuver.
    */
  virtual uci::type::ManeuverMultiStandardType& enableAssessedObjectManeuver(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by AssessedObjectManeuver.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AccessEventType& clearAssessedObjectManeuver() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AccessEventType() {
  }

  /** The destructor [only available to derived classes]. */
  ~AccessEventType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AccessEventType to copy from.
    */
  AccessEventType(const AccessEventType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AccessEventType to the contents of the AccessEventType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The AccessEventType on the right hand side (rhs) of the assignment operator whose contents are used to set
    *      the contents of this AccessEventType.
    * @return A reference to this AccessEventType.
    */
  AccessEventType& operator=(const AccessEventType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ACCESSEVENTTYPE_H

