/** @file MISP_PackingPlanType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_MISP_PACKINGPLANTYPE_H
#define UCI_TYPE_MISP_PACKINGPLANTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/DoubleAccessor.h"
#include "uci/base/export.h"
#include "uci/type/AlphanumericDashSpaceUnderscoreString16Type.h"
#include "uci/type/AlphanumericDashSpaceUnderscoreString20Type.h"
#include "uci/type/AlphanumericDashSpaceUnderscoreString40Type.h"
#include "uci/type/MISP_OperationalModeEnum.h"
#include "uci/type/MissionID_Type.h"
#include "uci/type/TailNumberType.h"
#include "uci/type/UMID_AudioID_Type.h"
#include "uci/type/UMID_DataID_Type.h"
#include "uci/type/UMID_SystemID_Type.h"
#include "uci/type/UMID_VideoID_Type.h"
#include "uci/type/VisibleString10Type.h"
#include "uci/type/VisibleString20Type.h"
#include "uci/type/VisibleString480Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class MISP_PackingPlanType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new MISP_PackingPlanType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MISP_PackingPlanType.
    */
  static UCI_EXPORT MISP_PackingPlanType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new MISP_PackingPlanType initializing the data accessed by the new MISP_PackingPlanType
    * using the data accessed by the specified MISP_PackingPlanType (cloning).
    *
    * @param accessor The MISP_PackingPlanType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created MISP_PackingPlanType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed MISP_PackingPlanType.
    */
  static UCI_EXPORT MISP_PackingPlanType& create(const MISP_PackingPlanType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified MISP_PackingPlanType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The MISP_PackingPlanType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(MISP_PackingPlanType& accessor);

  /** Returns this accessor's type constant, i.e. mISP_PackingPlanType.
    *
    * @return This accessor's type constant, i.e. mISP_PackingPlanType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::mISP_PackingPlanType;
  }

  /** Returns the version that was initialized from the uci:version attribute of MISP_PackingPlanType.
    *
    * @return The version that was initialized from the uci:version attribute of MISP_PackingPlanType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const MISP_PackingPlanType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by MissionID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by MissionID.
    */
  virtual const uci::type::MissionID_Type& getMissionID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by MissionID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by MissionID.
    */
  virtual uci::type::MissionID_Type& getMissionID() = 0;

  /** Sets the complex content identified by MissionID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by MissionID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setMissionID(const uci::type::MissionID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by PlatformDesignation.
    *
    * @return A const reference to the accessor that provides access to the string identified by PlatformDesignation.
    */
  virtual const uci::type::AlphanumericDashSpaceUnderscoreString20Type& getPlatformDesignation() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by PlatformDesignation.
    *
    * @return A reference to the accessor that provides access to the string identified by PlatformDesignation.
    */
  virtual uci::type::AlphanumericDashSpaceUnderscoreString20Type& getPlatformDesignation() = 0;

  /** Sets the string identified by PlatformDesignation to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by PlatformDesignation.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setPlatformDesignation(const uci::type::AlphanumericDashSpaceUnderscoreString20Type& value) = 0;

  /** Sets the string identified by PlatformDesignation to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setPlatformDesignation(const std::string& value) = 0;

  /** Sets the string identified by PlatformDesignation to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setPlatformDesignation(const char* value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ImageSourceSensor.
    *
    * @return A const reference to the accessor that provides access to the string identified by ImageSourceSensor.
    */
  virtual const uci::type::VisibleString20Type& getImageSourceSensor() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ImageSourceSensor.
    *
    * @return A reference to the accessor that provides access to the string identified by ImageSourceSensor.
    */
  virtual uci::type::VisibleString20Type& getImageSourceSensor() = 0;

  /** Sets the string identified by ImageSourceSensor to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ImageSourceSensor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setImageSourceSensor(const uci::type::VisibleString20Type& value) = 0;

  /** Sets the string identified by ImageSourceSensor to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setImageSourceSensor(const std::string& value) = 0;

  /** Sets the string identified by ImageSourceSensor to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setImageSourceSensor(const char* value) = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by PlatformTailNumber.
    *
    * @return A const reference to the accessor that provides access to the string identified by PlatformTailNumber.
    */
  virtual const uci::type::TailNumberType& getPlatformTailNumber() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by PlatformTailNumber.
    *
    * @return A reference to the accessor that provides access to the string identified by PlatformTailNumber.
    */
  virtual uci::type::TailNumberType& getPlatformTailNumber() = 0;

  /** Sets the string identified by PlatformTailNumber to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by PlatformTailNumber.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setPlatformTailNumber(const uci::type::TailNumberType& value) = 0;

  /** Sets the string identified by PlatformTailNumber to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setPlatformTailNumber(const std::string& value) = 0;

  /** Sets the string identified by PlatformTailNumber to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setPlatformTailNumber(const char* value) = 0;

  /** Returns whether the Element identified by PlatformTailNumber exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PlatformTailNumber is enabled or not.
    */
  virtual bool hasPlatformTailNumber() const = 0;

  /** Enables the Element identified by PlatformTailNumber.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by PlatformTailNumber.
    */
  virtual uci::type::TailNumberType& enablePlatformTailNumber(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PlatformTailNumber.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& clearPlatformTailNumber() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AirfieldBarometricPressure.
    *
    * @return The value of the simple primitive data type identified by AirfieldBarometricPressure.
    */
  virtual xs::Double getAirfieldBarometricPressure() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AirfieldBarometricPressure.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setAirfieldBarometricPressure(xs::Double value) = 0;

  /** Returns whether the Element identified by AirfieldBarometricPressure exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AirfieldBarometricPressure is enabled or not.
    */
  virtual bool hasAirfieldBarometricPressure() const = 0;

  /** Clears (disabled) the Element identified by AirfieldBarometricPressure.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& clearAirfieldBarometricPressure() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AirFieldElevation.
    *
    * @return The value of the simple primitive data type identified by AirFieldElevation.
    */
  virtual xs::Double getAirFieldElevation() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AirFieldElevation.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setAirFieldElevation(xs::Double value) = 0;

  /** Returns whether the Element identified by AirFieldElevation exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AirFieldElevation is enabled or not.
    */
  virtual bool hasAirFieldElevation() const = 0;

  /** Clears (disabled) the Element identified by AirFieldElevation.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& clearAirFieldElevation() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by PlatformCallSign.
    *
    * @return A const reference to the accessor that provides access to the string identified by PlatformCallSign.
    */
  virtual const uci::type::VisibleString10Type& getPlatformCallSign() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by PlatformCallSign.
    *
    * @return A reference to the accessor that provides access to the string identified by PlatformCallSign.
    */
  virtual uci::type::VisibleString10Type& getPlatformCallSign() = 0;

  /** Sets the string identified by PlatformCallSign to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by PlatformCallSign.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setPlatformCallSign(const uci::type::VisibleString10Type& value) = 0;

  /** Sets the string identified by PlatformCallSign to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setPlatformCallSign(const std::string& value) = 0;

  /** Sets the string identified by PlatformCallSign to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setPlatformCallSign(const char* value) = 0;

  /** Returns whether the Element identified by PlatformCallSign exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PlatformCallSign is enabled or not.
    */
  virtual bool hasPlatformCallSign() const = 0;

  /** Enables the Element identified by PlatformCallSign.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by PlatformCallSign.
    */
  virtual uci::type::VisibleString10Type& enablePlatformCallSign(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PlatformCallSign.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& clearPlatformCallSign() = 0;

  /** Returns a const reference to the value of the enumeration identified by OperationalMode.
    *
    * @return A const reference to the value of the enumeration identified by OperationalMode.
    */
  virtual const uci::type::MISP_OperationalModeEnum& getOperationalMode() const = 0;

  /** Returns a reference to the value of the enumeration identified by OperationalMode.
    *
    * @return A reference to the value of the enumeration identified by OperationalMode.
    */
  virtual uci::type::MISP_OperationalModeEnum& getOperationalMode() = 0;

  /** Sets the value of the enumeration identified by OperationalMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setOperationalMode(const uci::type::MISP_OperationalModeEnum& value) = 0;

  /** Sets the value of the enumeration identified by OperationalMode.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setOperationalMode(uci::type::MISP_OperationalModeEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by OperationalMode exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OperationalMode is enabled or not.
    */
  virtual bool hasOperationalMode() const = 0;

  /** Enables the Element identified by OperationalMode.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by OperationalMode.
    */
  virtual uci::type::MISP_OperationalModeEnum& enableOperationalMode(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OperationalMode.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& clearOperationalMode() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by
    * ClassificationOrMarkingSystem.
    *
    * @return A const reference to the accessor that provides access to the string identified by
    *      ClassificationOrMarkingSystem.
    */
  virtual const uci::type::AlphanumericDashSpaceUnderscoreString40Type& getClassificationOrMarkingSystem() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ClassificationOrMarkingSystem.
    *
    * @return A reference to the accessor that provides access to the string identified by ClassificationOrMarkingSystem.
    */
  virtual uci::type::AlphanumericDashSpaceUnderscoreString40Type& getClassificationOrMarkingSystem() = 0;

  /** Sets the string identified by ClassificationOrMarkingSystem to the contents of the string accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ClassificationOrMarkingSystem.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setClassificationOrMarkingSystem(const uci::type::AlphanumericDashSpaceUnderscoreString40Type& value) = 0;

  /** Sets the string identified by ClassificationOrMarkingSystem to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setClassificationOrMarkingSystem(const std::string& value) = 0;

  /** Sets the string identified by ClassificationOrMarkingSystem to the contents of the string that is accessed by the
    * specified accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setClassificationOrMarkingSystem(const char* value) = 0;

  /** Returns whether the Element identified by ClassificationOrMarkingSystem exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ClassificationOrMarkingSystem is enabled or not.
    */
  virtual bool hasClassificationOrMarkingSystem() const = 0;

  /** Enables the Element identified by ClassificationOrMarkingSystem.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ClassificationOrMarkingSystem.
    */
  virtual uci::type::AlphanumericDashSpaceUnderscoreString40Type& enableClassificationOrMarkingSystem(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ClassificationOrMarkingSystem.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& clearClassificationOrMarkingSystem() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ClassificationComment.
    *
    * @return A const reference to the accessor that provides access to the string identified by ClassificationComment.
    */
  virtual const uci::type::VisibleString480Type& getClassificationComment() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ClassificationComment.
    *
    * @return A reference to the accessor that provides access to the string identified by ClassificationComment.
    */
  virtual uci::type::VisibleString480Type& getClassificationComment() = 0;

  /** Sets the string identified by ClassificationComment to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ClassificationComment.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setClassificationComment(const uci::type::VisibleString480Type& value) = 0;

  /** Sets the string identified by ClassificationComment to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setClassificationComment(const std::string& value) = 0;

  /** Sets the string identified by ClassificationComment to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setClassificationComment(const char* value) = 0;

  /** Returns whether the Element identified by ClassificationComment exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ClassificationComment is enabled or not.
    */
  virtual bool hasClassificationComment() const = 0;

  /** Enables the Element identified by ClassificationComment.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ClassificationComment.
    */
  virtual uci::type::VisibleString480Type& enableClassificationComment(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ClassificationComment.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& clearClassificationComment() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by UMID_VideoID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by UMID_VideoID.
    */
  virtual const uci::type::UMID_VideoID_Type& getUMID_VideoID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by UMID_VideoID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by UMID_VideoID.
    */
  virtual uci::type::UMID_VideoID_Type& getUMID_VideoID() = 0;

  /** Sets the complex content identified by UMID_VideoID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by UMID_VideoID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setUMID_VideoID(const uci::type::UMID_VideoID_Type& value) = 0;

  /** Returns whether the Element identified by UMID_VideoID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by UMID_VideoID is enabled or not.
    */
  virtual bool hasUMID_VideoID() const = 0;

  /** Enables the Element identified by UMID_VideoID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by UMID_VideoID.
    */
  virtual uci::type::UMID_VideoID_Type& enableUMID_VideoID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by UMID_VideoID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& clearUMID_VideoID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by UMID_AudioID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by UMID_AudioID.
    */
  virtual const uci::type::UMID_AudioID_Type& getUMID_AudioID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by UMID_AudioID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by UMID_AudioID.
    */
  virtual uci::type::UMID_AudioID_Type& getUMID_AudioID() = 0;

  /** Sets the complex content identified by UMID_AudioID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by UMID_AudioID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setUMID_AudioID(const uci::type::UMID_AudioID_Type& value) = 0;

  /** Returns whether the Element identified by UMID_AudioID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by UMID_AudioID is enabled or not.
    */
  virtual bool hasUMID_AudioID() const = 0;

  /** Enables the Element identified by UMID_AudioID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by UMID_AudioID.
    */
  virtual uci::type::UMID_AudioID_Type& enableUMID_AudioID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by UMID_AudioID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& clearUMID_AudioID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by UMID_DataID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by UMID_DataID.
    */
  virtual const uci::type::UMID_DataID_Type& getUMID_DataID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by UMID_DataID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by UMID_DataID.
    */
  virtual uci::type::UMID_DataID_Type& getUMID_DataID() = 0;

  /** Sets the complex content identified by UMID_DataID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by UMID_DataID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setUMID_DataID(const uci::type::UMID_DataID_Type& value) = 0;

  /** Returns whether the Element identified by UMID_DataID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by UMID_DataID is enabled or not.
    */
  virtual bool hasUMID_DataID() const = 0;

  /** Enables the Element identified by UMID_DataID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by UMID_DataID.
    */
  virtual uci::type::UMID_DataID_Type& enableUMID_DataID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by UMID_DataID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& clearUMID_DataID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by UMID_SystemID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by UMID_SystemID.
    */
  virtual const uci::type::UMID_SystemID_Type& getUMID_SystemID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by UMID_SystemID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by UMID_SystemID.
    */
  virtual uci::type::UMID_SystemID_Type& getUMID_SystemID() = 0;

  /** Sets the complex content identified by UMID_SystemID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by UMID_SystemID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setUMID_SystemID(const uci::type::UMID_SystemID_Type& value) = 0;

  /** Returns whether the Element identified by UMID_SystemID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by UMID_SystemID is enabled or not.
    */
  virtual bool hasUMID_SystemID() const = 0;

  /** Enables the Element identified by UMID_SystemID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by UMID_SystemID.
    */
  virtual uci::type::UMID_SystemID_Type& enableUMID_SystemID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by UMID_SystemID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& clearUMID_SystemID() = 0;

  /** Returns a const reference to the accessor that provides access to the string identified by ItemDesignator.
    *
    * @return A const reference to the accessor that provides access to the string identified by ItemDesignator.
    */
  virtual const uci::type::AlphanumericDashSpaceUnderscoreString16Type& getItemDesignator() const = 0;

  /** Returns a reference to the accessor that provides access to the string identified by ItemDesignator.
    *
    * @return A reference to the accessor that provides access to the string identified by ItemDesignator.
    */
  virtual uci::type::AlphanumericDashSpaceUnderscoreString16Type& getItemDesignator() = 0;

  /** Sets the string identified by ItemDesignator to the contents of the string accessed by the specified accessor.
    *
    * @param value The accessor that provides access to the string whose contents are to be used to set the contents of the
    *      string identified by ItemDesignator.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setItemDesignator(const uci::type::AlphanumericDashSpaceUnderscoreString16Type& value) = 0;

  /** Sets the string identified by ItemDesignator to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setItemDesignator(const std::string& value) = 0;

  /** Sets the string identified by ItemDesignator to the contents of the string that is accessed by the specified
    * accessor.
    *
    * @param value The string used to set the string data type.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& setItemDesignator(const char* value) = 0;

  /** Returns whether the Element identified by ItemDesignator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ItemDesignator is enabled or not.
    */
  virtual bool hasItemDesignator() const = 0;

  /** Enables the Element identified by ItemDesignator.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the string identified by ItemDesignator.
    */
  virtual uci::type::AlphanumericDashSpaceUnderscoreString16Type& enableItemDesignator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ItemDesignator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::MISP_PackingPlanType& clearItemDesignator() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  MISP_PackingPlanType() {
  }

  /** The destructor [only available to derived classes]. */
  ~MISP_PackingPlanType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The MISP_PackingPlanType to copy from.
    */
  MISP_PackingPlanType(const MISP_PackingPlanType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this MISP_PackingPlanType to the contents of the MISP_PackingPlanType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The MISP_PackingPlanType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this MISP_PackingPlanType.
    * @return A reference to this MISP_PackingPlanType.
    */
  MISP_PackingPlanType& operator=(const MISP_PackingPlanType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_MISP_PACKINGPLANTYPE_H

