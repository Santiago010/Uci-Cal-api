/** @file AirfieldReportMDT.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_AIRFIELDREPORTMDT_H
#define UCI_TYPE_AIRFIELDREPORTMDT_H

#include "../base/Accessor.h"
#include "../base/BoundedList.h"
#include "../base/export.h"
#include "AirfieldID_Type.h"
#include "AirfieldInformationType.h"
#include "AirfieldReferenceID_ChoiceType.h"
#include "AirfieldReportID_Type.h"
#include "AirfieldStoresPET.h"
#include "DateTimeType.h"
#include "WeatherAreaDataType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See the annotation in the associated message airfield status data. */
class AirfieldReportMDT : public virtual uci::base::Accessor {
public:

  /** This method constructs a new AirfieldReportMDT.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AirfieldReportMDT.
    */
  static UCI_EXPORT AirfieldReportMDT& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new AirfieldReportMDT initializing the data accessed by the new AirfieldReportMDT using the
    * data accessed by the specified AirfieldReportMDT (cloning).
    *
    * @param accessor The AirfieldReportMDT that provides access to the data that is to be used to initialize the data
    *      accessed by the new created AirfieldReportMDT.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed AirfieldReportMDT.
    */
  static UCI_EXPORT AirfieldReportMDT& create(const AirfieldReportMDT& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified AirfieldReportMDT. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The AirfieldReportMDT that is to be destroyed.
    */
  static UCI_EXPORT void destroy(AirfieldReportMDT& accessor);

  /** Returns this accessor's type constant, i.e. airfieldReportMDT.
    *
    * @return This accessor's type constant, i.e. airfieldReportMDT.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::airfieldReportMDT;
  }

  /** Returns the version that was initialized from the uci:version attribute of AirfieldReportMDT.
    *
    * @return The version that was initialized from the uci:version attribute of AirfieldReportMDT.
    */
  static std::string getUCITypeVersion() {
    return "002.001.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const AirfieldReportMDT& accessor) = 0;

  /** Contains details about stores available on an Airfield. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::AirfieldStoresPET, uci::type::accessorType::airfieldStoresPET> AirfieldStores;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AirfieldReportID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AirfieldReportID.
    */
  virtual const uci::type::AirfieldReportID_Type& getAirfieldReportID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AirfieldReportID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AirfieldReportID.
    */
  virtual uci::type::AirfieldReportID_Type& getAirfieldReportID() = 0;

  /** Sets the complex content identified by AirfieldReportID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AirfieldReportID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldReportMDT& setAirfieldReportID(const uci::type::AirfieldReportID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by AirfieldID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by AirfieldID.
    */
  virtual const uci::type::AirfieldID_Type& getAirfieldID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by AirfieldID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by AirfieldID.
    */
  virtual uci::type::AirfieldID_Type& getAirfieldID() = 0;

  /** Sets the complex content identified by AirfieldID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by AirfieldID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldReportMDT& setAirfieldID(const uci::type::AirfieldID_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * IdentityReferenceID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      IdentityReferenceID.
    */
  virtual const uci::type::AirfieldReferenceID_ChoiceType& getIdentityReferenceID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by IdentityReferenceID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by IdentityReferenceID.
    */
  virtual uci::type::AirfieldReferenceID_ChoiceType& getIdentityReferenceID() = 0;

  /** Sets the complex content identified by IdentityReferenceID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by IdentityReferenceID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldReportMDT& setIdentityReferenceID(const uci::type::AirfieldReferenceID_ChoiceType& value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ObservationTime.
    *
    * @return The value of the simple primitive data type identified by ObservationTime.
    */
  virtual uci::type::DateTimeTypeValue getObservationTime() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ObservationTime.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldReportMDT& setObservationTime(uci::type::DateTimeTypeValue value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Information.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Information.
    */
  virtual const uci::type::AirfieldInformationType& getInformation() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Information.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Information.
    */
  virtual uci::type::AirfieldInformationType& getInformation() = 0;

  /** Sets the complex content identified by Information to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Information.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldReportMDT& setInformation(const uci::type::AirfieldInformationType& value) = 0;

  /** Returns whether the Element identified by Information exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Information is enabled or not.
    */
  virtual bool hasInformation() const = 0;

  /** Enables the Element identified by Information.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Information.
    */
  virtual uci::type::AirfieldInformationType& enableInformation(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Information.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldReportMDT& clearInformation() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by Weather.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by Weather.
    */
  virtual const uci::type::WeatherAreaDataType& getWeather() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by Weather.
    *
    * @return A reference to the accessor that provides access to the complex content identified by Weather.
    */
  virtual uci::type::WeatherAreaDataType& getWeather() = 0;

  /** Sets the complex content identified by Weather to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by Weather.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldReportMDT& setWeather(const uci::type::WeatherAreaDataType& value) = 0;

  /** Returns whether the Element identified by Weather exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by Weather is enabled or not.
    */
  virtual bool hasWeather() const = 0;

  /** Enables the Element identified by Weather.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by Weather.
    */
  virtual uci::type::WeatherAreaDataType& enableWeather(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by Weather.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldReportMDT& clearWeather() = 0;

  /** Returns a const reference to the bounded list identified by AirfieldStores.
    *
    * @return A const reference to the bounded list identified by AirfieldStores.
    */
  virtual const uci::type::AirfieldReportMDT::AirfieldStores& getAirfieldStores() const = 0;

  /** Returns a reference to the bounded list identified by AirfieldStores.
    *
    * @return A reference to the bounded list identified by AirfieldStores.
    */
  virtual uci::type::AirfieldReportMDT::AirfieldStores& getAirfieldStores() = 0;

  /** Sets the bounded list identified by AirfieldStores.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::AirfieldReportMDT& setAirfieldStores(const uci::type::AirfieldReportMDT::AirfieldStores& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  AirfieldReportMDT() {
  }

  /** The destructor [only available to derived classes]. */
  ~AirfieldReportMDT() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The AirfieldReportMDT to copy from.
    */
  AirfieldReportMDT(const AirfieldReportMDT& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this AirfieldReportMDT to the contents of the AirfieldReportMDT on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The AirfieldReportMDT on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this AirfieldReportMDT.
    * @return A reference to this AirfieldReportMDT.
    */
  AirfieldReportMDT& operator=(const AirfieldReportMDT& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_AIRFIELDREPORTMDT_H

