/** @file OrbitKinematicsReferencesType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ORBITKINEMATICSREFERENCESTYPE_H
#define UCI_TYPE_ORBITKINEMATICSREFERENCESTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/export.h"
#include "uci/type/EntityOrbitalElementSetID_Type.h"
#include "uci/type/EntityOrbitalEphemerisID_Type.h"
#include "uci/type/OrbitKinematicsSequenceID_Type.h"
#include "uci/type/OrbitManeuverSegmentID_Type.h"
#include "uci/type/OrbitPlanID_Type.h"
#include "uci/type/SystemOrbitalElementSetID_Type.h"
#include "uci/type/SystemOrbitalEphemerisID_Type.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** Indicates the kinematics associated with an orbital object. */
class OrbitKinematicsReferencesType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OrbitKinematicsReferencesType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitKinematicsReferencesType.
    */
  static UCI_EXPORT OrbitKinematicsReferencesType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OrbitKinematicsReferencesType initializing the data accessed by the new
    * OrbitKinematicsReferencesType using the data accessed by the specified OrbitKinematicsReferencesType (cloning).
    *
    * @param accessor The OrbitKinematicsReferencesType that provides access to the data that is to be used to initialize
    *      the data accessed by the new created OrbitKinematicsReferencesType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitKinematicsReferencesType.
    */
  static UCI_EXPORT OrbitKinematicsReferencesType& create(const OrbitKinematicsReferencesType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OrbitKinematicsReferencesType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The OrbitKinematicsReferencesType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OrbitKinematicsReferencesType& accessor);

  /** Returns this accessor's type constant, i.e. orbitKinematicsReferencesType.
    *
    * @return This accessor's type constant, i.e. orbitKinematicsReferencesType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::orbitKinematicsReferencesType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OrbitKinematicsReferencesType.
    *
    * @return The version that was initialized from the uci:version attribute of OrbitKinematicsReferencesType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OrbitKinematicsReferencesType& accessor) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by OrbitPlanID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by OrbitPlanID.
    */
  virtual const uci::type::OrbitPlanID_Type& getOrbitPlanID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitPlanID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitPlanID.
    */
  virtual uci::type::OrbitPlanID_Type& getOrbitPlanID() = 0;

  /** Sets the complex content identified by OrbitPlanID to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitPlanID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitKinematicsReferencesType& setOrbitPlanID(const uci::type::OrbitPlanID_Type& value) = 0;

  /** Returns whether the Element identified by OrbitPlanID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrbitPlanID is enabled or not.
    */
  virtual bool hasOrbitPlanID() const = 0;

  /** Enables the Element identified by OrbitPlanID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrbitPlanID.
    */
  virtual uci::type::OrbitPlanID_Type& enableOrbitPlanID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrbitPlanID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitKinematicsReferencesType& clearOrbitPlanID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrbitPlanSequenceID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrbitPlanSequenceID.
    */
  virtual const uci::type::OrbitKinematicsSequenceID_Type& getOrbitPlanSequenceID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by OrbitPlanSequenceID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by OrbitPlanSequenceID.
    */
  virtual uci::type::OrbitKinematicsSequenceID_Type& getOrbitPlanSequenceID() = 0;

  /** Sets the complex content identified by OrbitPlanSequenceID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitPlanSequenceID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitKinematicsReferencesType& setOrbitPlanSequenceID(const uci::type::OrbitKinematicsSequenceID_Type& value) = 0;

  /** Returns whether the Element identified by OrbitPlanSequenceID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrbitPlanSequenceID is enabled or not.
    */
  virtual bool hasOrbitPlanSequenceID() const = 0;

  /** Enables the Element identified by OrbitPlanSequenceID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by OrbitPlanSequenceID.
    */
  virtual uci::type::OrbitKinematicsSequenceID_Type& enableOrbitPlanSequenceID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrbitPlanSequenceID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitKinematicsReferencesType& clearOrbitPlanSequenceID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * OrbitPlanManeuverSegmentID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      OrbitPlanManeuverSegmentID.
    */
  virtual const uci::type::OrbitManeuverSegmentID_Type& getOrbitPlanManeuverSegmentID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * OrbitPlanManeuverSegmentID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OrbitPlanManeuverSegmentID.
    */
  virtual uci::type::OrbitManeuverSegmentID_Type& getOrbitPlanManeuverSegmentID() = 0;

  /** Sets the complex content identified by OrbitPlanManeuverSegmentID to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by OrbitPlanManeuverSegmentID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitKinematicsReferencesType& setOrbitPlanManeuverSegmentID(const uci::type::OrbitManeuverSegmentID_Type& value) = 0;

  /** Returns whether the Element identified by OrbitPlanManeuverSegmentID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by OrbitPlanManeuverSegmentID is enabled or not.
    */
  virtual bool hasOrbitPlanManeuverSegmentID() const = 0;

  /** Enables the Element identified by OrbitPlanManeuverSegmentID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      OrbitPlanManeuverSegmentID.
    */
  virtual uci::type::OrbitManeuverSegmentID_Type& enableOrbitPlanManeuverSegmentID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by OrbitPlanManeuverSegmentID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitKinematicsReferencesType& clearOrbitPlanManeuverSegmentID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SystemElementSetID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SystemElementSetID.
    */
  virtual const uci::type::SystemOrbitalElementSetID_Type& getSystemElementSetID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemElementSetID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemElementSetID.
    */
  virtual uci::type::SystemOrbitalElementSetID_Type& getSystemElementSetID() = 0;

  /** Sets the complex content identified by SystemElementSetID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemElementSetID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitKinematicsReferencesType& setSystemElementSetID(const uci::type::SystemOrbitalElementSetID_Type& value) = 0;

  /** Returns whether the Element identified by SystemElementSetID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SystemElementSetID is enabled or not.
    */
  virtual bool hasSystemElementSetID() const = 0;

  /** Enables the Element identified by SystemElementSetID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SystemElementSetID.
    */
  virtual uci::type::SystemOrbitalElementSetID_Type& enableSystemElementSetID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SystemElementSetID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitKinematicsReferencesType& clearSystemElementSetID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * EntityElementSetID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      EntityElementSetID.
    */
  virtual const uci::type::EntityOrbitalElementSetID_Type& getEntityElementSetID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EntityElementSetID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EntityElementSetID.
    */
  virtual uci::type::EntityOrbitalElementSetID_Type& getEntityElementSetID() = 0;

  /** Sets the complex content identified by EntityElementSetID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EntityElementSetID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitKinematicsReferencesType& setEntityElementSetID(const uci::type::EntityOrbitalElementSetID_Type& value) = 0;

  /** Returns whether the Element identified by EntityElementSetID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EntityElementSetID is enabled or not.
    */
  virtual bool hasEntityElementSetID() const = 0;

  /** Enables the Element identified by EntityElementSetID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EntityElementSetID.
    */
  virtual uci::type::EntityOrbitalElementSetID_Type& enableEntityElementSetID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EntityElementSetID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitKinematicsReferencesType& clearEntityElementSetID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * SystemEphemerisID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      SystemEphemerisID.
    */
  virtual const uci::type::SystemOrbitalEphemerisID_Type& getSystemEphemerisID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by SystemEphemerisID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by SystemEphemerisID.
    */
  virtual uci::type::SystemOrbitalEphemerisID_Type& getSystemEphemerisID() = 0;

  /** Sets the complex content identified by SystemEphemerisID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by SystemEphemerisID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitKinematicsReferencesType& setSystemEphemerisID(const uci::type::SystemOrbitalEphemerisID_Type& value) = 0;

  /** Returns whether the Element identified by SystemEphemerisID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by SystemEphemerisID is enabled or not.
    */
  virtual bool hasSystemEphemerisID() const = 0;

  /** Enables the Element identified by SystemEphemerisID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by SystemEphemerisID.
    */
  virtual uci::type::SystemOrbitalEphemerisID_Type& enableSystemEphemerisID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by SystemEphemerisID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitKinematicsReferencesType& clearSystemEphemerisID() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * EntityEphemerisID.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      EntityEphemerisID.
    */
  virtual const uci::type::EntityOrbitalEphemerisID_Type& getEntityEphemerisID() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by EntityEphemerisID.
    *
    * @return A reference to the accessor that provides access to the complex content identified by EntityEphemerisID.
    */
  virtual uci::type::EntityOrbitalEphemerisID_Type& getEntityEphemerisID() = 0;

  /** Sets the complex content identified by EntityEphemerisID to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by EntityEphemerisID.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitKinematicsReferencesType& setEntityEphemerisID(const uci::type::EntityOrbitalEphemerisID_Type& value) = 0;

  /** Returns whether the Element identified by EntityEphemerisID exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EntityEphemerisID is enabled or not.
    */
  virtual bool hasEntityEphemerisID() const = 0;

  /** Enables the Element identified by EntityEphemerisID.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by EntityEphemerisID.
    */
  virtual uci::type::EntityOrbitalEphemerisID_Type& enableEntityEphemerisID(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EntityEphemerisID.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitKinematicsReferencesType& clearEntityEphemerisID() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OrbitKinematicsReferencesType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OrbitKinematicsReferencesType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OrbitKinematicsReferencesType to copy from.
    */
  OrbitKinematicsReferencesType(const OrbitKinematicsReferencesType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OrbitKinematicsReferencesType to the contents of the
    * OrbitKinematicsReferencesType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The OrbitKinematicsReferencesType on the right hand side (rhs) of the assignment operator whose contents
    *      are used to set the contents of this OrbitKinematicsReferencesType.
    * @return A reference to this OrbitKinematicsReferencesType.
    */
  OrbitKinematicsReferencesType& operator=(const OrbitKinematicsReferencesType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ORBITKINEMATICSREFERENCESTYPE_H

