/** @file OrbitalRendezvousEventType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:07 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_ORBITALRENDEZVOUSEVENTTYPE_H
#define UCI_TYPE_ORBITALRENDEZVOUSEVENTTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/DurationAccessor.h"
#include "uci/base/IntAccessor.h"
#include "uci/base/export.h"
#include "uci/type/AngleHalfPositiveType.h"
#include "uci/type/DateTimeType.h"
#include "uci/type/DistanceType.h"
#include "uci/type/OrbitalDeltaVelocity_A_Type.h"
#include "uci/type/OrbitalObjectComparisonDeltaType.h"
#include "uci/type/OrbitalToleranceValuesType.h"
#include "uci/type/PercentType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** This type specifies details for a Rendezvous Operational Proximity Analysis Event. */
class OrbitalRendezvousEventType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new OrbitalRendezvousEventType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitalRendezvousEventType.
    */
  static UCI_EXPORT OrbitalRendezvousEventType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new OrbitalRendezvousEventType initializing the data accessed by the new
    * OrbitalRendezvousEventType using the data accessed by the specified OrbitalRendezvousEventType (cloning).
    *
    * @param accessor The OrbitalRendezvousEventType that provides access to the data that is to be used to initialize the
    *      data accessed by the new created OrbitalRendezvousEventType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed OrbitalRendezvousEventType.
    */
  static UCI_EXPORT OrbitalRendezvousEventType& create(const OrbitalRendezvousEventType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified OrbitalRendezvousEventType. Use of the specified accessor after it has been
    * destroyed will result in undefined behavior.
    *
    * @param accessor The OrbitalRendezvousEventType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(OrbitalRendezvousEventType& accessor);

  /** Returns this accessor's type constant, i.e. orbitalRendezvousEventType.
    *
    * @return This accessor's type constant, i.e. orbitalRendezvousEventType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::orbitalRendezvousEventType;
  }

  /** Returns the version that was initialized from the uci:version attribute of OrbitalRendezvousEventType.
    *
    * @return The version that was initialized from the uci:version attribute of OrbitalRendezvousEventType.
    */
  static std::string getUCITypeVersion() {
    return "001.000.000.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const OrbitalRendezvousEventType& accessor) = 0;

  /** Returns the value of the SimplePrimitive data type identified by ActorStateEpoch.
    *
    * @return The value of the simple primitive data type identified by ActorStateEpoch.
    */
  virtual uci::type::DateTimeTypeValue getActorStateEpoch() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by ActorStateEpoch.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setActorStateEpoch(uci::type::DateTimeTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by TargetStateEpoch.
    *
    * @return The value of the simple primitive data type identified by TargetStateEpoch.
    */
  virtual uci::type::DateTimeTypeValue getTargetStateEpoch() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by TargetStateEpoch.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setTargetStateEpoch(uci::type::DateTimeTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by AnalysisEpoch.
    *
    * @return The value of the simple primitive data type identified by AnalysisEpoch.
    */
  virtual uci::type::DateTimeTypeValue getAnalysisEpoch() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AnalysisEpoch.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setAnalysisEpoch(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by AnalysisEpoch exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AnalysisEpoch is enabled or not.
    */
  virtual bool hasAnalysisEpoch() const = 0;

  /** Clears (disabled) the Element identified by AnalysisEpoch.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& clearAnalysisEpoch() = 0;

  /** Returns the value of the SimplePrimitive data type identified by AnalysisDuration.
    *
    * @return The value of the simple primitive data type identified by AnalysisDuration.
    */
  virtual xs::Duration getAnalysisDuration() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by AnalysisDuration.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setAnalysisDuration(xs::Duration value) = 0;

  /** Returns whether the Element identified by AnalysisDuration exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by AnalysisDuration is enabled or not.
    */
  virtual bool hasAnalysisDuration() const = 0;

  /** Clears (disabled) the Element identified by AnalysisDuration.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& clearAnalysisDuration() = 0;

  /** Returns the value of the SimplePrimitive data type identified by EventIntervalCoverage.
    *
    * @return The value of the simple primitive data type identified by EventIntervalCoverage.
    */
  virtual uci::type::PercentTypeValue getEventIntervalCoverage() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by EventIntervalCoverage.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setEventIntervalCoverage(uci::type::PercentTypeValue value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by NumberSubIntervals.
    *
    * @return The value of the simple primitive data type identified by NumberSubIntervals.
    */
  virtual xs::Int getNumberSubIntervals() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by NumberSubIntervals.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setNumberSubIntervals(xs::Int value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by MinimumRange.
    *
    * @return The value of the simple primitive data type identified by MinimumRange.
    */
  virtual uci::type::DistanceTypeValue getMinimumRange() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MinimumRange.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setMinimumRange(uci::type::DistanceTypeValue value) = 0;

  /** Returns whether the Element identified by MinimumRange exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MinimumRange is enabled or not.
    */
  virtual bool hasMinimumRange() const = 0;

  /** Clears (disabled) the Element identified by MinimumRange.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& clearMinimumRange() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MinimumRangeEpoch.
    *
    * @return The value of the simple primitive data type identified by MinimumRangeEpoch.
    */
  virtual uci::type::DateTimeTypeValue getMinimumRangeEpoch() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MinimumRangeEpoch.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setMinimumRangeEpoch(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by MinimumRangeEpoch exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MinimumRangeEpoch is enabled or not.
    */
  virtual bool hasMinimumRangeEpoch() const = 0;

  /** Clears (disabled) the Element identified by MinimumRangeEpoch.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& clearMinimumRangeEpoch() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MinimumRangeAnalysisDuration.
    *
    * @return The value of the simple primitive data type identified by MinimumRangeAnalysisDuration.
    */
  virtual xs::Duration getMinimumRangeAnalysisDuration() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MinimumRangeAnalysisDuration.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setMinimumRangeAnalysisDuration(xs::Duration value) = 0;

  /** Returns the value of the SimplePrimitive data type identified by MinimumInPlaneSeparationAngle.
    *
    * @return The value of the simple primitive data type identified by MinimumInPlaneSeparationAngle.
    */
  virtual uci::type::AngleHalfPositiveTypeValue getMinimumInPlaneSeparationAngle() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MinimumInPlaneSeparationAngle.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setMinimumInPlaneSeparationAngle(uci::type::AngleHalfPositiveTypeValue value) = 0;

  /** Returns whether the Element identified by MinimumInPlaneSeparationAngle exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MinimumInPlaneSeparationAngle is enabled or not.
    */
  virtual bool hasMinimumInPlaneSeparationAngle() const = 0;

  /** Clears (disabled) the Element identified by MinimumInPlaneSeparationAngle.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& clearMinimumInPlaneSeparationAngle() = 0;

  /** Returns the value of the SimplePrimitive data type identified by MinimumInPlaneSeparationEpoch.
    *
    * @return The value of the simple primitive data type identified by MinimumInPlaneSeparationEpoch.
    */
  virtual uci::type::DateTimeTypeValue getMinimumInPlaneSeparationEpoch() const = 0;

  /** Sets the value of the SimplePrimitive data type identified by MinimumInPlaneSeparationEpoch.
    *
    * @param value The value to set the SimplePrimitve data type to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setMinimumInPlaneSeparationEpoch(uci::type::DateTimeTypeValue value) = 0;

  /** Returns whether the Element identified by MinimumInPlaneSeparationEpoch exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MinimumInPlaneSeparationEpoch is enabled or not.
    */
  virtual bool hasMinimumInPlaneSeparationEpoch() const = 0;

  /** Clears (disabled) the Element identified by MinimumInPlaneSeparationEpoch.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& clearMinimumInPlaneSeparationEpoch() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ObjectComparisonAtEventStart.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ObjectComparisonAtEventStart.
    */
  virtual const uci::type::OrbitalObjectComparisonDeltaType& getObjectComparisonAtEventStart() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ObjectComparisonAtEventStart.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ObjectComparisonAtEventStart.
    */
  virtual uci::type::OrbitalObjectComparisonDeltaType& getObjectComparisonAtEventStart() = 0;

  /** Sets the complex content identified by ObjectComparisonAtEventStart to the contents of the complex content accessed
    * by the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ObjectComparisonAtEventStart.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setObjectComparisonAtEventStart(const uci::type::OrbitalObjectComparisonDeltaType& value) = 0;

  /** Returns whether the Element identified by ObjectComparisonAtEventStart exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ObjectComparisonAtEventStart is enabled or not.
    */
  virtual bool hasObjectComparisonAtEventStart() const = 0;

  /** Enables the Element identified by ObjectComparisonAtEventStart.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ObjectComparisonAtEventStart.
    */
  virtual uci::type::OrbitalObjectComparisonDeltaType& enableObjectComparisonAtEventStart(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ObjectComparisonAtEventStart.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& clearObjectComparisonAtEventStart() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ObjectComparisonAtEventEnd.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ObjectComparisonAtEventEnd.
    */
  virtual const uci::type::OrbitalObjectComparisonDeltaType& getObjectComparisonAtEventEnd() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * ObjectComparisonAtEventEnd.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ObjectComparisonAtEventEnd.
    */
  virtual uci::type::OrbitalObjectComparisonDeltaType& getObjectComparisonAtEventEnd() = 0;

  /** Sets the complex content identified by ObjectComparisonAtEventEnd to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ObjectComparisonAtEventEnd.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setObjectComparisonAtEventEnd(const uci::type::OrbitalObjectComparisonDeltaType& value) = 0;

  /** Returns whether the Element identified by ObjectComparisonAtEventEnd exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ObjectComparisonAtEventEnd is enabled or not.
    */
  virtual bool hasObjectComparisonAtEventEnd() const = 0;

  /** Enables the Element identified by ObjectComparisonAtEventEnd.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      ObjectComparisonAtEventEnd.
    */
  virtual uci::type::OrbitalObjectComparisonDeltaType& enableObjectComparisonAtEventEnd(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ObjectComparisonAtEventEnd.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& clearObjectComparisonAtEventEnd() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * ObjectComparisonMeans.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      ObjectComparisonMeans.
    */
  virtual const uci::type::OrbitalObjectComparisonDeltaType& getObjectComparisonMeans() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ObjectComparisonMeans.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ObjectComparisonMeans.
    */
  virtual uci::type::OrbitalObjectComparisonDeltaType& getObjectComparisonMeans() = 0;

  /** Sets the complex content identified by ObjectComparisonMeans to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ObjectComparisonMeans.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setObjectComparisonMeans(const uci::type::OrbitalObjectComparisonDeltaType& value) = 0;

  /** Returns whether the Element identified by ObjectComparisonMeans exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by ObjectComparisonMeans is enabled or not.
    */
  virtual bool hasObjectComparisonMeans() const = 0;

  /** Enables the Element identified by ObjectComparisonMeans.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by ObjectComparisonMeans.
    */
  virtual uci::type::OrbitalObjectComparisonDeltaType& enableObjectComparisonMeans(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by ObjectComparisonMeans.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& clearObjectComparisonMeans() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DeltaV.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DeltaV.
    */
  virtual const uci::type::OrbitalDeltaVelocity_A_Type& getDeltaV() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DeltaV.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DeltaV.
    */
  virtual uci::type::OrbitalDeltaVelocity_A_Type& getDeltaV() = 0;

  /** Sets the complex content identified by DeltaV to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DeltaV.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setDeltaV(const uci::type::OrbitalDeltaVelocity_A_Type& value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by ToleranceValues.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by ToleranceValues.
    */
  virtual const uci::type::OrbitalToleranceValuesType& getToleranceValues() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by ToleranceValues.
    *
    * @return A reference to the accessor that provides access to the complex content identified by ToleranceValues.
    */
  virtual uci::type::OrbitalToleranceValuesType& getToleranceValues() = 0;

  /** Sets the complex content identified by ToleranceValues to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by ToleranceValues.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::OrbitalRendezvousEventType& setToleranceValues(const uci::type::OrbitalToleranceValuesType& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  OrbitalRendezvousEventType() {
  }

  /** The destructor [only available to derived classes]. */
  ~OrbitalRendezvousEventType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The OrbitalRendezvousEventType to copy from.
    */
  OrbitalRendezvousEventType(const OrbitalRendezvousEventType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this OrbitalRendezvousEventType to the contents of the
    * OrbitalRendezvousEventType on the right hand side (rhs) of the assignment operator [only available to derived
    * classes].
    *
    * @param rhs The OrbitalRendezvousEventType on the right hand side (rhs) of the assignment operator whose contents are
    *      used to set the contents of this OrbitalRendezvousEventType.
    * @return A reference to this OrbitalRendezvousEventType.
    */
  OrbitalRendezvousEventType& operator=(const OrbitalRendezvousEventType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_ORBITALRENDEZVOUSEVENTTYPE_H

