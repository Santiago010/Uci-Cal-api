/** @file SAR_TaskBaseType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:08 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_SAR_TASKBASETYPE_H
#define UCI_TYPE_SAR_TASKBASETYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/LocatedEllipseType.h"
#include "uci/type/PairIdentifierEnum.h"
#include "uci/type/ProductOutputCommandImageryType.h"
#include "uci/type/SAR_CapabilityEnum.h"
#include "uci/type/SAR_CollectionConstraintsType.h"
#include "uci/type/SAR_CollectionOptionsType.h"
#include "uci/type/SAR_SubCapabilityEnum.h"
#include "uci/type/SAR_WaveformType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class SAR_TaskBaseType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new SAR_TaskBaseType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SAR_TaskBaseType.
    */
  static UCI_EXPORT SAR_TaskBaseType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new SAR_TaskBaseType initializing the data accessed by the new SAR_TaskBaseType using the
    * data accessed by the specified SAR_TaskBaseType (cloning).
    *
    * @param accessor The SAR_TaskBaseType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created SAR_TaskBaseType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed SAR_TaskBaseType.
    */
  static UCI_EXPORT SAR_TaskBaseType& create(const SAR_TaskBaseType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified SAR_TaskBaseType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The SAR_TaskBaseType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(SAR_TaskBaseType& accessor);

  /** Returns this accessor's type constant, i.e. sAR_TaskBaseType.
    *
    * @return This accessor's type constant, i.e. sAR_TaskBaseType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::sAR_TaskBaseType;
  }

  /** Returns the version that was initialized from the uci:version attribute of SAR_TaskBaseType.
    *
    * @return The version that was initialized from the uci:version attribute of SAR_TaskBaseType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const SAR_TaskBaseType& accessor) = 0;

  /** Indicates a desired output Product of the Task. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH] */
  typedef uci::base::BoundedList<uci::type::ProductOutputCommandImageryType, uci::type::accessorType::productOutputCommandImageryType> Output;

  /** Returns a const reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A const reference to the value of the enumeration identified by CapabilityType.
    */
  virtual const uci::type::SAR_CapabilityEnum& getCapabilityType() const = 0;

  /** Returns a reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A reference to the value of the enumeration identified by CapabilityType.
    */
  virtual uci::type::SAR_CapabilityEnum& getCapabilityType() = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& setCapabilityType(const uci::type::SAR_CapabilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& setCapabilityType(uci::type::SAR_CapabilityEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the value of the enumeration identified by SubCapabilityType.
    *
    * @return A const reference to the value of the enumeration identified by SubCapabilityType.
    */
  virtual const uci::type::SAR_SubCapabilityEnum& getSubCapabilityType() const = 0;

  /** Returns a reference to the value of the enumeration identified by SubCapabilityType.
    *
    * @return A reference to the value of the enumeration identified by SubCapabilityType.
    */
  virtual uci::type::SAR_SubCapabilityEnum& getSubCapabilityType() = 0;

  /** Sets the value of the enumeration identified by SubCapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& setSubCapabilityType(const uci::type::SAR_SubCapabilityEnum& value) = 0;

  /** Sets the value of the enumeration identified by SubCapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& setSubCapabilityType(uci::type::SAR_SubCapabilityEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by LookAtCoords.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by LookAtCoords.
    */
  virtual const uci::type::LocatedEllipseType& getLookAtCoords() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by LookAtCoords.
    *
    * @return A reference to the accessor that provides access to the complex content identified by LookAtCoords.
    */
  virtual uci::type::LocatedEllipseType& getLookAtCoords() = 0;

  /** Sets the complex content identified by LookAtCoords to the contents of the complex content accessed by the specified
    * accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by LookAtCoords.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& setLookAtCoords(const uci::type::LocatedEllipseType& value) = 0;

  /** Returns whether the Element identified by LookAtCoords exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by LookAtCoords is enabled or not.
    */
  virtual bool hasLookAtCoords() const = 0;

  /** Enables the Element identified by LookAtCoords.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by LookAtCoords.
    */
  virtual uci::type::LocatedEllipseType& enableLookAtCoords(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by LookAtCoords.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& clearLookAtCoords() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CollectionOptions.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CollectionOptions.
    */
  virtual const uci::type::SAR_CollectionOptionsType& getCollectionOptions() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CollectionOptions.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CollectionOptions.
    */
  virtual uci::type::SAR_CollectionOptionsType& getCollectionOptions() = 0;

  /** Sets the complex content identified by CollectionOptions to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionOptions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& setCollectionOptions(const uci::type::SAR_CollectionOptionsType& value) = 0;

  /** Returns whether the Element identified by CollectionOptions exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionOptions is enabled or not.
    */
  virtual bool hasCollectionOptions() const = 0;

  /** Enables the Element identified by CollectionOptions.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CollectionOptions.
    */
  virtual uci::type::SAR_CollectionOptionsType& enableCollectionOptions(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionOptions.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& clearCollectionOptions() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CollectionConstraints.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CollectionConstraints.
    */
  virtual const uci::type::SAR_CollectionConstraintsType& getCollectionConstraints() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CollectionConstraints.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CollectionConstraints.
    */
  virtual uci::type::SAR_CollectionConstraintsType& getCollectionConstraints() = 0;

  /** Sets the complex content identified by CollectionConstraints to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CollectionConstraints.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& setCollectionConstraints(const uci::type::SAR_CollectionConstraintsType& value) = 0;

  /** Returns whether the Element identified by CollectionConstraints exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by CollectionConstraints is enabled or not.
    */
  virtual bool hasCollectionConstraints() const = 0;

  /** Enables the Element identified by CollectionConstraints.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by CollectionConstraints.
    */
  virtual uci::type::SAR_CollectionConstraintsType& enableCollectionConstraints(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by CollectionConstraints.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& clearCollectionConstraints() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by DesiredWaveform.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by DesiredWaveform.
    */
  virtual const uci::type::SAR_WaveformType& getDesiredWaveform() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by DesiredWaveform.
    *
    * @return A reference to the accessor that provides access to the complex content identified by DesiredWaveform.
    */
  virtual uci::type::SAR_WaveformType& getDesiredWaveform() = 0;

  /** Sets the complex content identified by DesiredWaveform to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by DesiredWaveform.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& setDesiredWaveform(const uci::type::SAR_WaveformType& value) = 0;

  /** Returns whether the Element identified by DesiredWaveform exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by DesiredWaveform is enabled or not.
    */
  virtual bool hasDesiredWaveform() const = 0;

  /** Enables the Element identified by DesiredWaveform.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by DesiredWaveform.
    */
  virtual uci::type::SAR_WaveformType& enableDesiredWaveform(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by DesiredWaveform.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& clearDesiredWaveform() = 0;

  /** Returns a const reference to the value of the enumeration identified by PairIdentifier.
    *
    * @return A const reference to the value of the enumeration identified by PairIdentifier.
    */
  virtual const uci::type::PairIdentifierEnum& getPairIdentifier() const = 0;

  /** Returns a reference to the value of the enumeration identified by PairIdentifier.
    *
    * @return A reference to the value of the enumeration identified by PairIdentifier.
    */
  virtual uci::type::PairIdentifierEnum& getPairIdentifier() = 0;

  /** Sets the value of the enumeration identified by PairIdentifier.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& setPairIdentifier(const uci::type::PairIdentifierEnum& value) = 0;

  /** Sets the value of the enumeration identified by PairIdentifier.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& setPairIdentifier(uci::type::PairIdentifierEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by PairIdentifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by PairIdentifier is enabled or not.
    */
  virtual bool hasPairIdentifier() const = 0;

  /** Enables the Element identified by PairIdentifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by PairIdentifier.
    */
  virtual uci::type::PairIdentifierEnum& enablePairIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by PairIdentifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& clearPairIdentifier() = 0;

  /** Returns a const reference to the bounded list identified by Output.
    *
    * @return A const reference to the bounded list identified by Output.
    */
  virtual const uci::type::SAR_TaskBaseType::Output& getOutput() const = 0;

  /** Returns a reference to the bounded list identified by Output.
    *
    * @return A reference to the bounded list identified by Output.
    */
  virtual uci::type::SAR_TaskBaseType::Output& getOutput() = 0;

  /** Sets the bounded list identified by Output.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::SAR_TaskBaseType& setOutput(const uci::type::SAR_TaskBaseType::Output& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  SAR_TaskBaseType() {
  }

  /** The destructor [only available to derived classes]. */
  ~SAR_TaskBaseType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The SAR_TaskBaseType to copy from.
    */
  SAR_TaskBaseType(const SAR_TaskBaseType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this SAR_TaskBaseType to the contents of the SAR_TaskBaseType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The SAR_TaskBaseType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this SAR_TaskBaseType.
    * @return A reference to this SAR_TaskBaseType.
    */
  SAR_TaskBaseType& operator=(const SAR_TaskBaseType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_SAR_TASKBASETYPE_H

