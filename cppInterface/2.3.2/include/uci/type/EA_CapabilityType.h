/** @file EA_CapabilityType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_EA_CAPABILITYTYPE_H
#define UCI_TYPE_EA_CAPABILITYTYPE_H

#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/CapabilityInitiationEnum.h"
#include "uci/type/CommandableCapabilityDeclarationType.h"
#include "uci/type/ComponentID_Type.h"
#include "uci/type/EA_CapabilityOptionsType.h"
#include "uci/type/EA_IndicatorEnum.h"
#include "uci/type/EA_MessageOutputsEnum.h"
#include "uci/type/EA_TechniqueGroupIdentifierType.h"
#include "uci/type/EA_TechniqueType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class EA_CapabilityType : public virtual CommandableCapabilityDeclarationType {
public:

  /** This method constructs a new EA_CapabilityType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EA_CapabilityType.
    */
  static UCI_EXPORT EA_CapabilityType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new EA_CapabilityType initializing the data accessed by the new EA_CapabilityType using the
    * data accessed by the specified EA_CapabilityType (cloning).
    *
    * @param accessor The EA_CapabilityType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created EA_CapabilityType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed EA_CapabilityType.
    */
  static UCI_EXPORT EA_CapabilityType& create(const EA_CapabilityType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified EA_CapabilityType. Use of the specified accessor after it has been destroyed will
    * result in undefined behavior.
    *
    * @param accessor The EA_CapabilityType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(EA_CapabilityType& accessor);

  /** Returns this accessor's type constant, i.e. eA_CapabilityType.
    *
    * @return This accessor's type constant, i.e. eA_CapabilityType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::eA_CapabilityType;
  }

  /** Returns the version that was initialized from the uci:version attribute of EA_CapabilityType.
    *
    * @return The version that was initialized from the uci:version attribute of EA_CapabilityType.
    */
  static std::string getUCITypeVersion() {
    return "002.001.002.001";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const EA_CapabilityType& accessor) = 0;

  /** Indicates an EA technique supported by the Capability. Names and implementations of techniques vary widely across EA
    * Subsystems. This element is an abstraction that describes them from a heterogeneous command and control perspective.
    * [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EA_TechniqueType, uci::type::accessorType::eA_TechniqueType> Technique;

  /** Indicates a command and control relevant Subsystem Component associated with the Capability. Only those Components
    * that are independent of the sibling Technique element should be listed; Technique has its own association to
    * Components. Multiple Capabilities can use the same Component. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ComponentID_Type, uci::type::accessorType::componentID_Type> AssociatedComponentID;

  /** Returns a const reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A const reference to the value of the enumeration identified by CapabilityType.
    */
  virtual const uci::type::CapabilityInitiationEnum& getCapabilityType() const = 0;

  /** Returns a reference to the value of the enumeration identified by CapabilityType.
    *
    * @return A reference to the value of the enumeration identified by CapabilityType.
    */
  virtual uci::type::CapabilityInitiationEnum& getCapabilityType() = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_CapabilityType& setCapabilityType(const uci::type::CapabilityInitiationEnum& value) = 0;

  /** Sets the value of the enumeration identified by CapabilityType.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_CapabilityType& setCapabilityType(uci::type::CapabilityInitiationEnum::EnumerationItem value) = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * CapabilityOptions.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      CapabilityOptions.
    */
  virtual const uci::type::EA_CapabilityOptionsType& getCapabilityOptions() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by CapabilityOptions.
    *
    * @return A reference to the accessor that provides access to the complex content identified by CapabilityOptions.
    */
  virtual uci::type::EA_CapabilityOptionsType& getCapabilityOptions() = 0;

  /** Sets the complex content identified by CapabilityOptions to the contents of the complex content accessed by the
    * specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by CapabilityOptions.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_CapabilityType& setCapabilityOptions(const uci::type::EA_CapabilityOptionsType& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by EA_Indicator.
    *
    * @return A const reference to the value of the enumeration identified by EA_Indicator.
    */
  virtual const uci::type::EA_IndicatorEnum& getEA_Indicator() const = 0;

  /** Returns a reference to the value of the enumeration identified by EA_Indicator.
    *
    * @return A reference to the value of the enumeration identified by EA_Indicator.
    */
  virtual uci::type::EA_IndicatorEnum& getEA_Indicator() = 0;

  /** Sets the value of the enumeration identified by EA_Indicator.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_CapabilityType& setEA_Indicator(const uci::type::EA_IndicatorEnum& value) = 0;

  /** Sets the value of the enumeration identified by EA_Indicator.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_CapabilityType& setEA_Indicator(uci::type::EA_IndicatorEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by EA_Indicator exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by EA_Indicator is enabled or not.
    */
  virtual bool hasEA_Indicator() const = 0;

  /** Enables the Element identified by EA_Indicator.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by EA_Indicator.
    */
  virtual uci::type::EA_IndicatorEnum& enableEA_Indicator(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by EA_Indicator.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_CapabilityType& clearEA_Indicator() = 0;

  /** Returns a const reference to the bounded list identified by Technique.
    *
    * @return A const reference to the bounded list identified by Technique.
    */
  virtual const uci::type::EA_CapabilityType::Technique& getTechnique() const = 0;

  /** Returns a reference to the bounded list identified by Technique.
    *
    * @return A reference to the bounded list identified by Technique.
    */
  virtual uci::type::EA_CapabilityType::Technique& getTechnique() = 0;

  /** Sets the bounded list identified by Technique.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_CapabilityType& setTechnique(const uci::type::EA_CapabilityType::Technique& value) = 0;

  /** Returns a const reference to the bounded list identified by AssociatedComponentID.
    *
    * @return A const reference to the bounded list identified by AssociatedComponentID.
    */
  virtual const uci::type::EA_CapabilityType::AssociatedComponentID& getAssociatedComponentID() const = 0;

  /** Returns a reference to the bounded list identified by AssociatedComponentID.
    *
    * @return A reference to the bounded list identified by AssociatedComponentID.
    */
  virtual uci::type::EA_CapabilityType::AssociatedComponentID& getAssociatedComponentID() = 0;

  /** Sets the bounded list identified by AssociatedComponentID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_CapabilityType& setAssociatedComponentID(const uci::type::EA_CapabilityType::AssociatedComponentID& value) = 0;

  /** Returns a const reference to the value of the enumeration identified by MessageOutput.
    *
    * @return A const reference to the value of the enumeration identified by MessageOutput.
    */
  virtual const uci::type::EA_MessageOutputsEnum& getMessageOutput() const = 0;

  /** Returns a reference to the value of the enumeration identified by MessageOutput.
    *
    * @return A reference to the value of the enumeration identified by MessageOutput.
    */
  virtual uci::type::EA_MessageOutputsEnum& getMessageOutput() = 0;

  /** Sets the value of the enumeration identified by MessageOutput.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_CapabilityType& setMessageOutput(const uci::type::EA_MessageOutputsEnum& value) = 0;

  /** Sets the value of the enumeration identified by MessageOutput.
    *
    * @param value The value to set the enumeration to.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_CapabilityType& setMessageOutput(uci::type::EA_MessageOutputsEnum::EnumerationItem value) = 0;

  /** Returns whether the Element identified by MessageOutput exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by MessageOutput is enabled or not.
    */
  virtual bool hasMessageOutput() const = 0;

  /** Enables the Element identified by MessageOutput.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the value of the enumeration identified by MessageOutput.
    */
  virtual uci::type::EA_MessageOutputsEnum& enableMessageOutput(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by MessageOutput.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_CapabilityType& clearMessageOutput() = 0;

  /** Returns a const reference to the accessor that provides access to the complex content identified by
    * TechniqueGroupIdentifier.
    *
    * @return A const reference to the accessor that provides access to the complex content identified by
    *      TechniqueGroupIdentifier.
    */
  virtual const uci::type::EA_TechniqueGroupIdentifierType& getTechniqueGroupIdentifier() const = 0;

  /** Returns a reference to the accessor that provides access to the complex content identified by
    * TechniqueGroupIdentifier.
    *
    * @return A reference to the accessor that provides access to the complex content identified by
    *      TechniqueGroupIdentifier.
    */
  virtual uci::type::EA_TechniqueGroupIdentifierType& getTechniqueGroupIdentifier() = 0;

  /** Sets the complex content identified by TechniqueGroupIdentifier to the contents of the complex content accessed by
    * the specified accessor.
    *
    * @param value The accessor that provides access to the complex content whose contents are to be used to set the
    *      contents of the complex content identified by TechniqueGroupIdentifier.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_CapabilityType& setTechniqueGroupIdentifier(const uci::type::EA_TechniqueGroupIdentifierType& value) = 0;

  /** Returns whether the Element identified by TechniqueGroupIdentifier exists (is enabled) or not.
    *
    * @return A boolean indicating whether the Element identified by TechniqueGroupIdentifier is enabled or not.
    */
  virtual bool hasTechniqueGroupIdentifier() const = 0;

  /** Enables the Element identified by TechniqueGroupIdentifier.
    *
    * @param type = uci::base::accessorType::null This Accessor's accessor type.
    * @return A reference to the accessor that provides access to the complex content identified by
    *      TechniqueGroupIdentifier.
    */
  virtual uci::type::EA_TechniqueGroupIdentifierType& enableTechniqueGroupIdentifier(uci::base::accessorType::AccessorType type = uci::base::accessorType::null) = 0;

  /** Clears (disabled) the Element identified by TechniqueGroupIdentifier.
    *
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::EA_CapabilityType& clearTechniqueGroupIdentifier() = 0;

protected:

  /** The constructor [only available to derived classes]. */
  EA_CapabilityType() {
  }

  /** The destructor [only available to derived classes]. */
  ~EA_CapabilityType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The EA_CapabilityType to copy from.
    */
  EA_CapabilityType(const EA_CapabilityType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this EA_CapabilityType to the contents of the EA_CapabilityType on the
    * right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The EA_CapabilityType on the right hand side (rhs) of the assignment operator whose contents are used to
    *      set the contents of this EA_CapabilityType.
    * @return A reference to this EA_CapabilityType.
    */
  EA_CapabilityType& operator=(const EA_CapabilityType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_EA_CAPABILITYTYPE_H

