/** @file ConstrainingPlansType.h
 *
 * @warning This file is automatically generated, edit at your own risk
 *
 * This file was generated on 04/01/2024 at 02:25:06 PM
 *
 * <pre>
 * Unclassified               U N C L A S S I F I E D               Unclassified
 *
 * DISTRIBUTION STATEMENT D: Distribution authorized to Department of Defense
 *    and U.S. DoD contractors only, Critical Technology, Export Controlled,
 *    26 January 2023. Other requests for this document shall be referred to
 *    AFLCMC/XA (OAMO), Wright-Patterson AFB OH 45433.
 *
 * DESTRUCTION NOTICE: Destroy by any method that will prevent disclosure of
 *    contents or reconstruction of the document.
 *
 * WARNING - This document contains technical data whose export is restricted
 *    by the Arms Export Control Act (Section 2751 of Title 22, United States
 *    Code) or the Export Control Reform Act of 2018 (Chapter 58 Sections
 *    4801-4852 of Title 50, United States Code). Violations of these export
 *    laws are subject to severe criminal penalties. Disseminate in accordance
 *    with provisions of DoD Directive 5230.25 and DoD Instruction 2040.02.
 *
 * Controlled by: USAF
 * Controlled by: AFLCMC/XA (OAMO)
 * CUI Category(ies): CTI, EXPT
 * Distribution Statement D
 * POC: Wayne Artuso, 937-713-5124
 *
 * CUI//SP-CTI/SP-EXPT
 * </pre>
 *
 */

#ifndef UCI_TYPE_CONSTRAININGPLANSTYPE_H
#define UCI_TYPE_CONSTRAININGPLANSTYPE_H

#include "uci/base/Accessor.h"
#include "uci/base/BoundedList.h"
#include "uci/base/export.h"
#include "uci/type/ActionPlanConstraintType.h"
#include "uci/type/ActivityPlanConstraintType.h"
#include "uci/type/CommAllocationConstraintType.h"
#include "uci/type/EffectPlanConstraintType.h"
#include "uci/type/MissionPlanID_Type.h"
#include "uci/type/OrbitActivityPlanConstraintType.h"
#include "uci/type/OrbitPlanConstraintType.h"
#include "uci/type/PlanTypeEnum.h"
#include "uci/type/ResponsePlanConstraintType.h"
#include "uci/type/RouteActivityPlanConstraintType.h"
#include "uci/type/RoutePlanConstraintType.h"
#include "uci/type/TaskPlanConstraintType.h"

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all base data types are declared */
namespace base {

class AbstractServiceBusConnection;

} // namespace base
} // namespace uci

/** The namespace in which all UCI data types are declared */
namespace uci {

/** The namespace in which all generated data types are declared */
namespace type {

/** See annotations in child elements and messages/elements that use this type for details. */
class ConstrainingPlansType : public virtual uci::base::Accessor {
public:

  /** This method constructs a new ConstrainingPlansType.
    *
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ConstrainingPlansType.
    */
  static UCI_EXPORT ConstrainingPlansType& create(uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method constructs a new ConstrainingPlansType initializing the data accessed by the new ConstrainingPlansType
    * using the data accessed by the specified ConstrainingPlansType (cloning).
    *
    * @param accessor The ConstrainingPlansType that provides access to the data that is to be used to initialize the data
    *      accessed by the new created ConstrainingPlansType.
    * @param abstractServiceBusConnection The pointer to the Abstract Service Bus Connection that provides the support
    *      required to create objects.
    * @return The newly contructed ConstrainingPlansType.
    */
  static UCI_EXPORT ConstrainingPlansType& create(const ConstrainingPlansType& accessor, uci::base::AbstractServiceBusConnection* abstractServiceBusConnection = NULL);

  /** This method destroys the specified ConstrainingPlansType. Use of the specified accessor after it has been destroyed
    * will result in undefined behavior.
    *
    * @param accessor The ConstrainingPlansType that is to be destroyed.
    */
  static UCI_EXPORT void destroy(ConstrainingPlansType& accessor);

  /** Returns this accessor's type constant, i.e. constrainingPlansType.
    *
    * @return This accessor's type constant, i.e. constrainingPlansType.
    */
  virtual uci::base::accessorType::AccessorType getAccessorType() const noexception {
    return uci::type::accessorType::constrainingPlansType;
  }

  /** Returns the version that was initialized from the uci:version attribute of ConstrainingPlansType.
    *
    * @return The version that was initialized from the uci:version attribute of ConstrainingPlansType.
    */
  static std::string getUCITypeVersion() {
    return "002.000.003.000";
  }

  /** Initializes the contents of this accessor by copying the contents of the specified accessor.
    *
    * @param accessor The accessor whose contents are to be used to initialize the contents of this accessor.
    */
  virtual void copy(const ConstrainingPlansType& accessor) = 0;

  /** Indicates a type of Plan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). A
    * *PlanCommand that includes the ancestor ReplanReason element occurs only during live and/or autonomous operations.
    * During live/autonomous operations, a constrained *PlanCommand is understood to be constrained by the current/latest
    * *Plan. Therefore, a *PlanCommand with a ReplanReason can indicate a constraining *Plan without listing the unique ID;
    * this element alone is sufficient to identify the constraining plan. During non-live/non-autonomous operations, when
    * the sibling ReplanReason element is not given, the sibling *Plan element corresponding to this element should include
    * the specific *Plan unique ID and constraining details corresponding to this element. If omitted during non-live
    * operations, the corresponding sibling *Plan element should also be omitted. List size for this element is based on
    * "Select All That Apply" condition. [Occurrences: Minimum: 1; Maximum: 11]
    */
  typedef uci::base::BoundedList<uci::type::PlanTypeEnum, uci::type::accessorType::planTypeEnum> ConstrainingPlanType;

  /** Indicates a MissionPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by a MissionPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::MissionPlanID_Type, uci::type::accessorType::missionPlanID_Type> MissionPlanID;

  /** Indicates a TaskPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by a TaskPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::TaskPlanConstraintType, uci::type::accessorType::taskPlanConstraintType> TaskPlan;

  /** Indicates a RoutePlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by a RoutePlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RoutePlanConstraintType, uci::type::accessorType::routePlanConstraintType> RoutePlan;

  /** Indicates a RouteActivityPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.).
    * For a given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might
    * initially be created in a particular order with updates in another order or orders. For other Systems, the order
    * might be completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of
    * *Plan might be a constraint on the creation or update of any other kind. When omitted, the
    * existing/referenced/commanded *Plan isn't constrained by a RouteActivityPlan. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::RouteActivityPlanConstraintType, uci::type::accessorType::routeActivityPlanConstraintType> RouteActivityPlan;

  /** Indicates an OrbitPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by an OrbitPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OrbitPlanConstraintType, uci::type::accessorType::orbitPlanConstraintType> OrbitPlan;

  /** Indicates an OrbitActivityPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.).
    * For a given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might
    * initially be created in a particular order with updates in another order or orders. For other Systems, the order
    * might be completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of
    * *Plan might be a constraint on the creation or update of any other kind. When omitted, the
    * existing/referenced/commanded *Plan isn't constrained by an OrbitActivityPlan. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::OrbitActivityPlanConstraintType, uci::type::accessorType::orbitActivityPlanConstraintType> OrbitActivityPlan;

  /** Indicates an ActivityPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by an ActivityPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ActivityPlanConstraintType, uci::type::accessorType::activityPlanConstraintType> ActivityPlan;

  /** Indicates a CommAllocation that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For
    * a given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might
    * initially be created in a particular order with updates in another order or orders. For other Systems, the order
    * might be completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of
    * *Plan might be a constraint on the creation or update of any other kind. When omitted, the
    * existing/referenced/commanded *Plan isn't constrained by a CommAllocation. [Occurrences: Minimum: 0; Maximum:
    * MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::CommAllocationConstraintType, uci::type::accessorType::commAllocationConstraintType> CommAllocation;

  /** Indicates an EffectPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by an EffectPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::EffectPlanConstraintType, uci::type::accessorType::effectPlanConstraintType> EffectPlan;

  /** Indicates an ActionPlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by an EffectPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ActionPlanConstraintType, uci::type::accessorType::actionPlanConstraintType> ActionPlan;

  /** Indicates a ResponsePlan that constrains the existing/referenced/commanded *Plan (OrbitPlan, RoutePlan, etc.). For a
    * given kind of System, *Plans might always be created in a particular order. For other Systems, *Plans might initially
    * be created in a particular order with updates in another order or orders. For other Systems, the order might be
    * completely variable depending on conditions, priority, operator preference, etc. Therefore, any kind of *Plan might
    * be a constraint on the creation or update of any other kind. When omitted, the existing/referenced/commanded *Plan
    * isn't constrained by an EffectPlan. [Occurrences: Minimum: 0; Maximum: MAX_LENGTH]
    */
  typedef uci::base::BoundedList<uci::type::ResponsePlanConstraintType, uci::type::accessorType::responsePlanConstraintType> ResponsePlan;

  /** Returns a const reference to the bounded list identified by ConstrainingPlanType.
    *
    * @return A const reference to the bounded list identified by ConstrainingPlanType.
    */
  virtual const uci::type::ConstrainingPlansType::ConstrainingPlanType& getConstrainingPlanType() const = 0;

  /** Returns a reference to the bounded list identified by ConstrainingPlanType.
    *
    * @return A reference to the bounded list identified by ConstrainingPlanType.
    */
  virtual uci::type::ConstrainingPlansType::ConstrainingPlanType& getConstrainingPlanType() = 0;

  /** Sets the bounded list identified by ConstrainingPlanType.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConstrainingPlansType& setConstrainingPlanType(const uci::type::ConstrainingPlansType::ConstrainingPlanType& value) = 0;

  /** Returns a const reference to the bounded list identified by MissionPlanID.
    *
    * @return A const reference to the bounded list identified by MissionPlanID.
    */
  virtual const uci::type::ConstrainingPlansType::MissionPlanID& getMissionPlanID() const = 0;

  /** Returns a reference to the bounded list identified by MissionPlanID.
    *
    * @return A reference to the bounded list identified by MissionPlanID.
    */
  virtual uci::type::ConstrainingPlansType::MissionPlanID& getMissionPlanID() = 0;

  /** Sets the bounded list identified by MissionPlanID.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConstrainingPlansType& setMissionPlanID(const uci::type::ConstrainingPlansType::MissionPlanID& value) = 0;

  /** Returns a const reference to the bounded list identified by TaskPlan.
    *
    * @return A const reference to the bounded list identified by TaskPlan.
    */
  virtual const uci::type::ConstrainingPlansType::TaskPlan& getTaskPlan() const = 0;

  /** Returns a reference to the bounded list identified by TaskPlan.
    *
    * @return A reference to the bounded list identified by TaskPlan.
    */
  virtual uci::type::ConstrainingPlansType::TaskPlan& getTaskPlan() = 0;

  /** Sets the bounded list identified by TaskPlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConstrainingPlansType& setTaskPlan(const uci::type::ConstrainingPlansType::TaskPlan& value) = 0;

  /** Returns a const reference to the bounded list identified by RoutePlan.
    *
    * @return A const reference to the bounded list identified by RoutePlan.
    */
  virtual const uci::type::ConstrainingPlansType::RoutePlan& getRoutePlan() const = 0;

  /** Returns a reference to the bounded list identified by RoutePlan.
    *
    * @return A reference to the bounded list identified by RoutePlan.
    */
  virtual uci::type::ConstrainingPlansType::RoutePlan& getRoutePlan() = 0;

  /** Sets the bounded list identified by RoutePlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConstrainingPlansType& setRoutePlan(const uci::type::ConstrainingPlansType::RoutePlan& value) = 0;

  /** Returns a const reference to the bounded list identified by RouteActivityPlan.
    *
    * @return A const reference to the bounded list identified by RouteActivityPlan.
    */
  virtual const uci::type::ConstrainingPlansType::RouteActivityPlan& getRouteActivityPlan() const = 0;

  /** Returns a reference to the bounded list identified by RouteActivityPlan.
    *
    * @return A reference to the bounded list identified by RouteActivityPlan.
    */
  virtual uci::type::ConstrainingPlansType::RouteActivityPlan& getRouteActivityPlan() = 0;

  /** Sets the bounded list identified by RouteActivityPlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConstrainingPlansType& setRouteActivityPlan(const uci::type::ConstrainingPlansType::RouteActivityPlan& value) = 0;

  /** Returns a const reference to the bounded list identified by OrbitPlan.
    *
    * @return A const reference to the bounded list identified by OrbitPlan.
    */
  virtual const uci::type::ConstrainingPlansType::OrbitPlan& getOrbitPlan() const = 0;

  /** Returns a reference to the bounded list identified by OrbitPlan.
    *
    * @return A reference to the bounded list identified by OrbitPlan.
    */
  virtual uci::type::ConstrainingPlansType::OrbitPlan& getOrbitPlan() = 0;

  /** Sets the bounded list identified by OrbitPlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConstrainingPlansType& setOrbitPlan(const uci::type::ConstrainingPlansType::OrbitPlan& value) = 0;

  /** Returns a const reference to the bounded list identified by OrbitActivityPlan.
    *
    * @return A const reference to the bounded list identified by OrbitActivityPlan.
    */
  virtual const uci::type::ConstrainingPlansType::OrbitActivityPlan& getOrbitActivityPlan() const = 0;

  /** Returns a reference to the bounded list identified by OrbitActivityPlan.
    *
    * @return A reference to the bounded list identified by OrbitActivityPlan.
    */
  virtual uci::type::ConstrainingPlansType::OrbitActivityPlan& getOrbitActivityPlan() = 0;

  /** Sets the bounded list identified by OrbitActivityPlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConstrainingPlansType& setOrbitActivityPlan(const uci::type::ConstrainingPlansType::OrbitActivityPlan& value) = 0;

  /** Returns a const reference to the bounded list identified by ActivityPlan.
    *
    * @return A const reference to the bounded list identified by ActivityPlan.
    */
  virtual const uci::type::ConstrainingPlansType::ActivityPlan& getActivityPlan() const = 0;

  /** Returns a reference to the bounded list identified by ActivityPlan.
    *
    * @return A reference to the bounded list identified by ActivityPlan.
    */
  virtual uci::type::ConstrainingPlansType::ActivityPlan& getActivityPlan() = 0;

  /** Sets the bounded list identified by ActivityPlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConstrainingPlansType& setActivityPlan(const uci::type::ConstrainingPlansType::ActivityPlan& value) = 0;

  /** Returns a const reference to the bounded list identified by CommAllocation.
    *
    * @return A const reference to the bounded list identified by CommAllocation.
    */
  virtual const uci::type::ConstrainingPlansType::CommAllocation& getCommAllocation() const = 0;

  /** Returns a reference to the bounded list identified by CommAllocation.
    *
    * @return A reference to the bounded list identified by CommAllocation.
    */
  virtual uci::type::ConstrainingPlansType::CommAllocation& getCommAllocation() = 0;

  /** Sets the bounded list identified by CommAllocation.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConstrainingPlansType& setCommAllocation(const uci::type::ConstrainingPlansType::CommAllocation& value) = 0;

  /** Returns a const reference to the bounded list identified by EffectPlan.
    *
    * @return A const reference to the bounded list identified by EffectPlan.
    */
  virtual const uci::type::ConstrainingPlansType::EffectPlan& getEffectPlan() const = 0;

  /** Returns a reference to the bounded list identified by EffectPlan.
    *
    * @return A reference to the bounded list identified by EffectPlan.
    */
  virtual uci::type::ConstrainingPlansType::EffectPlan& getEffectPlan() = 0;

  /** Sets the bounded list identified by EffectPlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConstrainingPlansType& setEffectPlan(const uci::type::ConstrainingPlansType::EffectPlan& value) = 0;

  /** Returns a const reference to the bounded list identified by ActionPlan.
    *
    * @return A const reference to the bounded list identified by ActionPlan.
    */
  virtual const uci::type::ConstrainingPlansType::ActionPlan& getActionPlan() const = 0;

  /** Returns a reference to the bounded list identified by ActionPlan.
    *
    * @return A reference to the bounded list identified by ActionPlan.
    */
  virtual uci::type::ConstrainingPlansType::ActionPlan& getActionPlan() = 0;

  /** Sets the bounded list identified by ActionPlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConstrainingPlansType& setActionPlan(const uci::type::ConstrainingPlansType::ActionPlan& value) = 0;

  /** Returns a const reference to the bounded list identified by ResponsePlan.
    *
    * @return A const reference to the bounded list identified by ResponsePlan.
    */
  virtual const uci::type::ConstrainingPlansType::ResponsePlan& getResponsePlan() const = 0;

  /** Returns a reference to the bounded list identified by ResponsePlan.
    *
    * @return A reference to the bounded list identified by ResponsePlan.
    */
  virtual uci::type::ConstrainingPlansType::ResponsePlan& getResponsePlan() = 0;

  /** Sets the bounded list identified by ResponsePlan.
    *
    * @param value The bounded list whose contents are to be used to set the value of the bounded list accessed by this
    *      accessor.
    * @return A reference to the object on which this method was called.
    */
  virtual uci::type::ConstrainingPlansType& setResponsePlan(const uci::type::ConstrainingPlansType::ResponsePlan& value) = 0;

protected:

  /** The constructor [only available to derived classes]. */
  ConstrainingPlansType() {
  }

  /** The destructor [only available to derived classes]. */
  ~ConstrainingPlansType() {
  }

  /** The copy constructor [only available to derived classes].
    *
    * @param rhs The ConstrainingPlansType to copy from.
    */
  ConstrainingPlansType(const ConstrainingPlansType& rhs) {
    (void)rhs;
  }

  /** The assignment operator. Sets the contents of this ConstrainingPlansType to the contents of the ConstrainingPlansType
    * on the right hand side (rhs) of the assignment operator [only available to derived classes].
    *
    * @param rhs The ConstrainingPlansType on the right hand side (rhs) of the assignment operator whose contents are used
    *      to set the contents of this ConstrainingPlansType.
    * @return A reference to this ConstrainingPlansType.
    */
  ConstrainingPlansType& operator=(const ConstrainingPlansType& rhs) {
    (void)rhs;

    return *this;
  }

};

} // namespace type
} // namespace uci

#endif // UCI_TYPE_CONSTRAININGPLANSTYPE_H

